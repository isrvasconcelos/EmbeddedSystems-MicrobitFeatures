
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
GEN_ABS_SYM_END
       0:	20001a00 	.word	0x20001a00
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
       4:	00002351 	.word	0x00002351
}
       8:	00002385 	.word	0x00002385
       c:	00002205 	.word	0x00002205
      10:	00002205 	.word	0x00002205
      14:	00002205 	.word	0x00002205
      18:	00002205 	.word	0x00002205
      1c:	00002205 	.word	0x00002205
      20:	00002205 	.word	0x00002205
      24:	00002205 	.word	0x00002205
      28:	00002205 	.word	0x00002205
      2c:	00002019 	.word	0x00002019
      30:	00002205 	.word	0x00002205
      34:	00002205 	.word	0x00002205
      38:	00001fbd 	.word	0x00001fbd
      3c:	00002205 	.word	0x00002205

00000040 <_irq_vector_table>:
      40:	00002319 00009a63 00002319 00002319     .#..c....#...#..
      50:	00002319 00002319 00002319 00002319     .#...#...#...#..
      60:	00002319 00002319 00002319 00002319     .#...#...#...#..
      70:	00002319 00002319 00002319 00002319     .#...#...#...#..
      80:	00002319 00002319 00002319 00002319     .#...#...#...#..
      90:	00002319 00002319 00002319 00002319     .#...#...#...#..
      a0:	00002319 00002319                       .#...#..

000000a8 <_sw_isr_table>:
      a8:	00000000 00002e31 00000000 00002179     ....1.......y!..
      b8:	00000000 00002179 00000000 00002179     ....y!......y!..
      c8:	00000000 00002179 00000000 00002179     ....y!......y!..
      d8:	200024bc 00003035 00000000 00002179     .$. 50......y!..
      e8:	00000000 00002179 00000000 00002179     ....y!......y!..
      f8:	00000000 00002179 00000000 00009a21     ....y!......!...
     108:	200024f8 00003439 00000000 00009a5b     .$. 94......[...
     118:	00000000 00002179 00000000 00002179     ....y!......y!..
     128:	00000000 00002179 00000000 00003609     ....y!.......6..
     138:	00000000 00002179 00000000 00002179     ....y!......y!..
     148:	00000000 00002179 00000000 00002179     ....y!......y!..
     158:	00000000 00002179 00000000 00002179     ....y!......y!..
     168:	00000000 00009a51 00000000 00002179     ....Q.......y!..

00000178 <__gnu_thumb1_case_sqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5609      	ldrsb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uqi>:
     18c:	b402      	push	{r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0049      	lsls	r1, r1, #1
     194:	5c09      	ldrb	r1, [r1, r0]
     196:	0049      	lsls	r1, r1, #1
     198:	448e      	add	lr, r1
     19a:	bc02      	pop	{r1}
     19c:	4770      	bx	lr
     19e:	46c0      	nop			; (mov r8, r8)

000001a0 <__gnu_thumb1_case_shi>:
     1a0:	b403      	push	{r0, r1}
     1a2:	4671      	mov	r1, lr
     1a4:	0849      	lsrs	r1, r1, #1
     1a6:	0040      	lsls	r0, r0, #1
     1a8:	0049      	lsls	r1, r1, #1
     1aa:	5e09      	ldrsh	r1, [r1, r0]
     1ac:	0049      	lsls	r1, r1, #1
     1ae:	448e      	add	lr, r1
     1b0:	bc03      	pop	{r0, r1}
     1b2:	4770      	bx	lr

000001b4 <__gnu_thumb1_case_uhi>:
     1b4:	b403      	push	{r0, r1}
     1b6:	4671      	mov	r1, lr
     1b8:	0849      	lsrs	r1, r1, #1
     1ba:	0040      	lsls	r0, r0, #1
     1bc:	0049      	lsls	r1, r1, #1
     1be:	5a09      	ldrh	r1, [r1, r0]
     1c0:	0049      	lsls	r1, r1, #1
     1c2:	448e      	add	lr, r1
     1c4:	bc03      	pop	{r0, r1}
     1c6:	4770      	bx	lr

000001c8 <__aeabi_uidiv>:
     1c8:	2900      	cmp	r1, #0
     1ca:	d034      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>

000001cc <.udivsi3_skip_div0_test>:
     1cc:	2301      	movs	r3, #1
     1ce:	2200      	movs	r2, #0
     1d0:	b410      	push	{r4}
     1d2:	4288      	cmp	r0, r1
     1d4:	d32c      	bcc.n	230 <.udivsi3_skip_div0_test+0x64>
     1d6:	2401      	movs	r4, #1
     1d8:	0724      	lsls	r4, r4, #28
     1da:	42a1      	cmp	r1, r4
     1dc:	d204      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1de:	4281      	cmp	r1, r0
     1e0:	d202      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1e2:	0109      	lsls	r1, r1, #4
     1e4:	011b      	lsls	r3, r3, #4
     1e6:	e7f8      	b.n	1da <.udivsi3_skip_div0_test+0xe>
     1e8:	00e4      	lsls	r4, r4, #3
     1ea:	42a1      	cmp	r1, r4
     1ec:	d204      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1ee:	4281      	cmp	r1, r0
     1f0:	d202      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1f2:	0049      	lsls	r1, r1, #1
     1f4:	005b      	lsls	r3, r3, #1
     1f6:	e7f8      	b.n	1ea <.udivsi3_skip_div0_test+0x1e>
     1f8:	4288      	cmp	r0, r1
     1fa:	d301      	bcc.n	200 <.udivsi3_skip_div0_test+0x34>
     1fc:	1a40      	subs	r0, r0, r1
     1fe:	431a      	orrs	r2, r3
     200:	084c      	lsrs	r4, r1, #1
     202:	42a0      	cmp	r0, r4
     204:	d302      	bcc.n	20c <.udivsi3_skip_div0_test+0x40>
     206:	1b00      	subs	r0, r0, r4
     208:	085c      	lsrs	r4, r3, #1
     20a:	4322      	orrs	r2, r4
     20c:	088c      	lsrs	r4, r1, #2
     20e:	42a0      	cmp	r0, r4
     210:	d302      	bcc.n	218 <.udivsi3_skip_div0_test+0x4c>
     212:	1b00      	subs	r0, r0, r4
     214:	089c      	lsrs	r4, r3, #2
     216:	4322      	orrs	r2, r4
     218:	08cc      	lsrs	r4, r1, #3
     21a:	42a0      	cmp	r0, r4
     21c:	d302      	bcc.n	224 <.udivsi3_skip_div0_test+0x58>
     21e:	1b00      	subs	r0, r0, r4
     220:	08dc      	lsrs	r4, r3, #3
     222:	4322      	orrs	r2, r4
     224:	2800      	cmp	r0, #0
     226:	d003      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     228:	091b      	lsrs	r3, r3, #4
     22a:	d001      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     22c:	0909      	lsrs	r1, r1, #4
     22e:	e7e3      	b.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     230:	1c10      	adds	r0, r2, #0
     232:	bc10      	pop	{r4}
     234:	4770      	bx	lr
     236:	2800      	cmp	r0, #0
     238:	d001      	beq.n	23e <.udivsi3_skip_div0_test+0x72>
     23a:	2000      	movs	r0, #0
     23c:	43c0      	mvns	r0, r0
     23e:	b407      	push	{r0, r1, r2}
     240:	4802      	ldr	r0, [pc, #8]	; (24c <.udivsi3_skip_div0_test+0x80>)
     242:	a102      	add	r1, pc, #8	; (adr r1, 24c <.udivsi3_skip_div0_test+0x80>)
     244:	1840      	adds	r0, r0, r1
     246:	9002      	str	r0, [sp, #8]
     248:	bd03      	pop	{r0, r1, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	000000d9 	.word	0x000000d9

00000250 <__aeabi_uidivmod>:
     250:	2900      	cmp	r1, #0
     252:	d0f0      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>
     254:	b503      	push	{r0, r1, lr}
     256:	f7ff ffb9 	bl	1cc <.udivsi3_skip_div0_test>
     25a:	bc0e      	pop	{r1, r2, r3}
     25c:	4342      	muls	r2, r0
     25e:	1a89      	subs	r1, r1, r2
     260:	4718      	bx	r3
     262:	46c0      	nop			; (mov r8, r8)

00000264 <__aeabi_idiv>:
     264:	2900      	cmp	r1, #0
     266:	d041      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>

00000268 <.divsi3_skip_div0_test>:
     268:	b410      	push	{r4}
     26a:	1c04      	adds	r4, r0, #0
     26c:	404c      	eors	r4, r1
     26e:	46a4      	mov	ip, r4
     270:	2301      	movs	r3, #1
     272:	2200      	movs	r2, #0
     274:	2900      	cmp	r1, #0
     276:	d500      	bpl.n	27a <.divsi3_skip_div0_test+0x12>
     278:	4249      	negs	r1, r1
     27a:	2800      	cmp	r0, #0
     27c:	d500      	bpl.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     27e:	4240      	negs	r0, r0
     280:	4288      	cmp	r0, r1
     282:	d32c      	bcc.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     284:	2401      	movs	r4, #1
     286:	0724      	lsls	r4, r4, #28
     288:	42a1      	cmp	r1, r4
     28a:	d204      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     28c:	4281      	cmp	r1, r0
     28e:	d202      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     290:	0109      	lsls	r1, r1, #4
     292:	011b      	lsls	r3, r3, #4
     294:	e7f8      	b.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     296:	00e4      	lsls	r4, r4, #3
     298:	42a1      	cmp	r1, r4
     29a:	d204      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     29c:	4281      	cmp	r1, r0
     29e:	d202      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2a0:	0049      	lsls	r1, r1, #1
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	e7f8      	b.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     2a6:	4288      	cmp	r0, r1
     2a8:	d301      	bcc.n	2ae <CONFIG_BT_HCI_TX_STACK_SIZE+0x2e>
     2aa:	1a40      	subs	r0, r0, r1
     2ac:	431a      	orrs	r2, r3
     2ae:	084c      	lsrs	r4, r1, #1
     2b0:	42a0      	cmp	r0, r4
     2b2:	d302      	bcc.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2b4:	1b00      	subs	r0, r0, r4
     2b6:	085c      	lsrs	r4, r3, #1
     2b8:	4322      	orrs	r2, r4
     2ba:	088c      	lsrs	r4, r1, #2
     2bc:	42a0      	cmp	r0, r4
     2be:	d302      	bcc.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2c0:	1b00      	subs	r0, r0, r4
     2c2:	089c      	lsrs	r4, r3, #2
     2c4:	4322      	orrs	r2, r4
     2c6:	08cc      	lsrs	r4, r1, #3
     2c8:	42a0      	cmp	r0, r4
     2ca:	d302      	bcc.n	2d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x52>
     2cc:	1b00      	subs	r0, r0, r4
     2ce:	08dc      	lsrs	r4, r3, #3
     2d0:	4322      	orrs	r2, r4
     2d2:	2800      	cmp	r0, #0
     2d4:	d003      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2d6:	091b      	lsrs	r3, r3, #4
     2d8:	d001      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2da:	0909      	lsrs	r1, r1, #4
     2dc:	e7e3      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2de:	1c10      	adds	r0, r2, #0
     2e0:	4664      	mov	r4, ip
     2e2:	2c00      	cmp	r4, #0
     2e4:	d500      	bpl.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     2e6:	4240      	negs	r0, r0
     2e8:	bc10      	pop	{r4}
     2ea:	4770      	bx	lr
     2ec:	2800      	cmp	r0, #0
     2ee:	d006      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f0:	db03      	blt.n	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     2f2:	2000      	movs	r0, #0
     2f4:	43c0      	mvns	r0, r0
     2f6:	0840      	lsrs	r0, r0, #1
     2f8:	e001      	b.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2fa:	2080      	movs	r0, #128	; 0x80
     2fc:	0600      	lsls	r0, r0, #24
     2fe:	b407      	push	{r0, r1, r2}
     300:	4802      	ldr	r0, [pc, #8]	; (30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     302:	a102      	add	r1, pc, #8	; (adr r1, 30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     304:	1840      	adds	r0, r0, r1
     306:	9002      	str	r0, [sp, #8]
     308:	bd03      	pop	{r0, r1, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000019 	.word	0x00000019

00000310 <__aeabi_idivmod>:
     310:	2900      	cmp	r1, #0
     312:	d0eb      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     314:	b503      	push	{r0, r1, lr}
     316:	f7ff ffa7 	bl	268 <.divsi3_skip_div0_test>
     31a:	bc0e      	pop	{r1, r2, r3}
     31c:	4342      	muls	r2, r0
     31e:	1a89      	subs	r1, r1, r2
     320:	4718      	bx	r3
     322:	46c0      	nop			; (mov r8, r8)

00000324 <__aeabi_idiv0>:
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)

00000328 <__aeabi_llsr>:
     328:	40d0      	lsrs	r0, r2
     32a:	1c0b      	adds	r3, r1, #0
     32c:	40d1      	lsrs	r1, r2
     32e:	469c      	mov	ip, r3
     330:	3a20      	subs	r2, #32
     332:	40d3      	lsrs	r3, r2
     334:	4318      	orrs	r0, r3
     336:	4252      	negs	r2, r2
     338:	4663      	mov	r3, ip
     33a:	4093      	lsls	r3, r2
     33c:	4318      	orrs	r0, r3
     33e:	4770      	bx	lr

00000340 <__aeabi_llsl>:
     340:	4091      	lsls	r1, r2
     342:	1c03      	adds	r3, r0, #0
     344:	4090      	lsls	r0, r2
     346:	469c      	mov	ip, r3
     348:	3a20      	subs	r2, #32
     34a:	4093      	lsls	r3, r2
     34c:	4319      	orrs	r1, r3
     34e:	4252      	negs	r2, r2
     350:	4663      	mov	r3, ip
     352:	40d3      	lsrs	r3, r2
     354:	4319      	orrs	r1, r3
     356:	4770      	bx	lr

00000358 <__aeabi_uldivmod>:
     358:	2b00      	cmp	r3, #0
     35a:	d111      	bne.n	380 <__aeabi_uldivmod+0x28>
     35c:	2a00      	cmp	r2, #0
     35e:	d10f      	bne.n	380 <__aeabi_uldivmod+0x28>
     360:	2900      	cmp	r1, #0
     362:	d100      	bne.n	366 <__aeabi_uldivmod+0xe>
     364:	2800      	cmp	r0, #0
     366:	d002      	beq.n	36e <__aeabi_uldivmod+0x16>
     368:	2100      	movs	r1, #0
     36a:	43c9      	mvns	r1, r1
     36c:	1c08      	adds	r0, r1, #0
     36e:	b407      	push	{r0, r1, r2}
     370:	4802      	ldr	r0, [pc, #8]	; (37c <__aeabi_uldivmod+0x24>)
     372:	a102      	add	r1, pc, #8	; (adr r1, 37c <__aeabi_uldivmod+0x24>)
     374:	1840      	adds	r0, r0, r1
     376:	9002      	str	r0, [sp, #8]
     378:	bd03      	pop	{r0, r1, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	ffffffa9 	.word	0xffffffa9
     380:	b403      	push	{r0, r1}
     382:	4668      	mov	r0, sp
     384:	b501      	push	{r0, lr}
     386:	9802      	ldr	r0, [sp, #8]
     388:	f000 f854 	bl	434 <__udivmoddi4>
     38c:	9b01      	ldr	r3, [sp, #4]
     38e:	469e      	mov	lr, r3
     390:	b002      	add	sp, #8
     392:	bc0c      	pop	{r2, r3}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)

00000398 <__aeabi_lmul>:
     398:	b5f0      	push	{r4, r5, r6, r7, lr}
     39a:	464f      	mov	r7, r9
     39c:	4646      	mov	r6, r8
     39e:	0415      	lsls	r5, r2, #16
     3a0:	0c2d      	lsrs	r5, r5, #16
     3a2:	b4c0      	push	{r6, r7}
     3a4:	002e      	movs	r6, r5
     3a6:	0407      	lsls	r7, r0, #16
     3a8:	0c14      	lsrs	r4, r2, #16
     3aa:	0c3f      	lsrs	r7, r7, #16
     3ac:	4699      	mov	r9, r3
     3ae:	0c03      	lsrs	r3, r0, #16
     3b0:	437e      	muls	r6, r7
     3b2:	435d      	muls	r5, r3
     3b4:	4367      	muls	r7, r4
     3b6:	4363      	muls	r3, r4
     3b8:	197f      	adds	r7, r7, r5
     3ba:	0c34      	lsrs	r4, r6, #16
     3bc:	19e4      	adds	r4, r4, r7
     3be:	469c      	mov	ip, r3
     3c0:	42a5      	cmp	r5, r4
     3c2:	d903      	bls.n	3cc <__aeabi_lmul+0x34>
     3c4:	2380      	movs	r3, #128	; 0x80
     3c6:	025b      	lsls	r3, r3, #9
     3c8:	4698      	mov	r8, r3
     3ca:	44c4      	add	ip, r8
     3cc:	464b      	mov	r3, r9
     3ce:	4351      	muls	r1, r2
     3d0:	4343      	muls	r3, r0
     3d2:	0436      	lsls	r6, r6, #16
     3d4:	0c36      	lsrs	r6, r6, #16
     3d6:	0c25      	lsrs	r5, r4, #16
     3d8:	0424      	lsls	r4, r4, #16
     3da:	4465      	add	r5, ip
     3dc:	19a4      	adds	r4, r4, r6
     3de:	1859      	adds	r1, r3, r1
     3e0:	1949      	adds	r1, r1, r5
     3e2:	0020      	movs	r0, r4
     3e4:	bc0c      	pop	{r2, r3}
     3e6:	4690      	mov	r8, r2
     3e8:	4699      	mov	r9, r3
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003ec <__ffssi2>:
     3ec:	b510      	push	{r4, lr}
     3ee:	2300      	movs	r3, #0
     3f0:	2800      	cmp	r0, #0
     3f2:	d002      	beq.n	3fa <__ffssi2+0xe>
     3f4:	f000 ff8e 	bl	1314 <__ctzsi2>
     3f8:	1c43      	adds	r3, r0, #1
     3fa:	0018      	movs	r0, r3
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)

00000400 <__popcountsi2>:
     400:	4a09      	ldr	r2, [pc, #36]	; (428 <CONFIG_BT_RX_STACK_SIZE+0x28>)
     402:	0843      	lsrs	r3, r0, #1
     404:	4013      	ands	r3, r2
     406:	1ac0      	subs	r0, r0, r3
     408:	0003      	movs	r3, r0
     40a:	4a08      	ldr	r2, [pc, #32]	; (42c <CONFIG_BT_RX_STACK_SIZE+0x2c>)
     40c:	0880      	lsrs	r0, r0, #2
     40e:	4010      	ands	r0, r2
     410:	4013      	ands	r3, r2
     412:	181b      	adds	r3, r3, r0
     414:	0918      	lsrs	r0, r3, #4
     416:	18c0      	adds	r0, r0, r3
     418:	4b05      	ldr	r3, [pc, #20]	; (430 <CONFIG_BT_RX_STACK_SIZE+0x30>)
     41a:	4003      	ands	r3, r0
     41c:	0218      	lsls	r0, r3, #8
     41e:	18c0      	adds	r0, r0, r3
     420:	0403      	lsls	r3, r0, #16
     422:	18c0      	adds	r0, r0, r3
     424:	0e00      	lsrs	r0, r0, #24
     426:	4770      	bx	lr
     428:	55555555 	.word	0x55555555
     42c:	33333333 	.word	0x33333333
     430:	0f0f0f0f 	.word	0x0f0f0f0f

00000434 <__udivmoddi4>:
     434:	b5f0      	push	{r4, r5, r6, r7, lr}
     436:	464d      	mov	r5, r9
     438:	4656      	mov	r6, sl
     43a:	4644      	mov	r4, r8
     43c:	465f      	mov	r7, fp
     43e:	b4f0      	push	{r4, r5, r6, r7}
     440:	4692      	mov	sl, r2
     442:	b083      	sub	sp, #12
     444:	0004      	movs	r4, r0
     446:	000d      	movs	r5, r1
     448:	4699      	mov	r9, r3
     44a:	428b      	cmp	r3, r1
     44c:	d82f      	bhi.n	4ae <__udivmoddi4+0x7a>
     44e:	d02c      	beq.n	4aa <__udivmoddi4+0x76>
     450:	4649      	mov	r1, r9
     452:	4650      	mov	r0, sl
     454:	f000 ff52 	bl	12fc <__clzdi2>
     458:	0029      	movs	r1, r5
     45a:	0006      	movs	r6, r0
     45c:	0020      	movs	r0, r4
     45e:	f000 ff4d 	bl	12fc <__clzdi2>
     462:	1a33      	subs	r3, r6, r0
     464:	4698      	mov	r8, r3
     466:	3b20      	subs	r3, #32
     468:	469b      	mov	fp, r3
     46a:	d500      	bpl.n	46e <__udivmoddi4+0x3a>
     46c:	e074      	b.n	558 <__udivmoddi4+0x124>
     46e:	4653      	mov	r3, sl
     470:	465a      	mov	r2, fp
     472:	4093      	lsls	r3, r2
     474:	001f      	movs	r7, r3
     476:	4653      	mov	r3, sl
     478:	4642      	mov	r2, r8
     47a:	4093      	lsls	r3, r2
     47c:	001e      	movs	r6, r3
     47e:	42af      	cmp	r7, r5
     480:	d829      	bhi.n	4d6 <__udivmoddi4+0xa2>
     482:	d026      	beq.n	4d2 <__udivmoddi4+0x9e>
     484:	465b      	mov	r3, fp
     486:	1ba4      	subs	r4, r4, r6
     488:	41bd      	sbcs	r5, r7
     48a:	2b00      	cmp	r3, #0
     48c:	da00      	bge.n	490 <__udivmoddi4+0x5c>
     48e:	e079      	b.n	584 <__udivmoddi4+0x150>
     490:	2200      	movs	r2, #0
     492:	2300      	movs	r3, #0
     494:	9200      	str	r2, [sp, #0]
     496:	9301      	str	r3, [sp, #4]
     498:	2301      	movs	r3, #1
     49a:	465a      	mov	r2, fp
     49c:	4093      	lsls	r3, r2
     49e:	9301      	str	r3, [sp, #4]
     4a0:	2301      	movs	r3, #1
     4a2:	4642      	mov	r2, r8
     4a4:	4093      	lsls	r3, r2
     4a6:	9300      	str	r3, [sp, #0]
     4a8:	e019      	b.n	4de <__udivmoddi4+0xaa>
     4aa:	4282      	cmp	r2, r0
     4ac:	d9d0      	bls.n	450 <__udivmoddi4+0x1c>
     4ae:	2200      	movs	r2, #0
     4b0:	2300      	movs	r3, #0
     4b2:	9200      	str	r2, [sp, #0]
     4b4:	9301      	str	r3, [sp, #4]
     4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     4b8:	2b00      	cmp	r3, #0
     4ba:	d001      	beq.n	4c0 <__udivmoddi4+0x8c>
     4bc:	601c      	str	r4, [r3, #0]
     4be:	605d      	str	r5, [r3, #4]
     4c0:	9800      	ldr	r0, [sp, #0]
     4c2:	9901      	ldr	r1, [sp, #4]
     4c4:	b003      	add	sp, #12
     4c6:	bc3c      	pop	{r2, r3, r4, r5}
     4c8:	4690      	mov	r8, r2
     4ca:	4699      	mov	r9, r3
     4cc:	46a2      	mov	sl, r4
     4ce:	46ab      	mov	fp, r5
     4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d2:	42a3      	cmp	r3, r4
     4d4:	d9d6      	bls.n	484 <__udivmoddi4+0x50>
     4d6:	2200      	movs	r2, #0
     4d8:	2300      	movs	r3, #0
     4da:	9200      	str	r2, [sp, #0]
     4dc:	9301      	str	r3, [sp, #4]
     4de:	4643      	mov	r3, r8
     4e0:	2b00      	cmp	r3, #0
     4e2:	d0e8      	beq.n	4b6 <__udivmoddi4+0x82>
     4e4:	07fb      	lsls	r3, r7, #31
     4e6:	0872      	lsrs	r2, r6, #1
     4e8:	431a      	orrs	r2, r3
     4ea:	4646      	mov	r6, r8
     4ec:	087b      	lsrs	r3, r7, #1
     4ee:	e00e      	b.n	50e <__udivmoddi4+0xda>
     4f0:	42ab      	cmp	r3, r5
     4f2:	d101      	bne.n	4f8 <__udivmoddi4+0xc4>
     4f4:	42a2      	cmp	r2, r4
     4f6:	d80c      	bhi.n	512 <__udivmoddi4+0xde>
     4f8:	1aa4      	subs	r4, r4, r2
     4fa:	419d      	sbcs	r5, r3
     4fc:	2001      	movs	r0, #1
     4fe:	1924      	adds	r4, r4, r4
     500:	416d      	adcs	r5, r5
     502:	2100      	movs	r1, #0
     504:	3e01      	subs	r6, #1
     506:	1824      	adds	r4, r4, r0
     508:	414d      	adcs	r5, r1
     50a:	2e00      	cmp	r6, #0
     50c:	d006      	beq.n	51c <__udivmoddi4+0xe8>
     50e:	42ab      	cmp	r3, r5
     510:	d9ee      	bls.n	4f0 <__udivmoddi4+0xbc>
     512:	3e01      	subs	r6, #1
     514:	1924      	adds	r4, r4, r4
     516:	416d      	adcs	r5, r5
     518:	2e00      	cmp	r6, #0
     51a:	d1f8      	bne.n	50e <__udivmoddi4+0xda>
     51c:	465b      	mov	r3, fp
     51e:	9800      	ldr	r0, [sp, #0]
     520:	9901      	ldr	r1, [sp, #4]
     522:	1900      	adds	r0, r0, r4
     524:	4169      	adcs	r1, r5
     526:	2b00      	cmp	r3, #0
     528:	db22      	blt.n	570 <__udivmoddi4+0x13c>
     52a:	002b      	movs	r3, r5
     52c:	465a      	mov	r2, fp
     52e:	40d3      	lsrs	r3, r2
     530:	002a      	movs	r2, r5
     532:	4644      	mov	r4, r8
     534:	40e2      	lsrs	r2, r4
     536:	001c      	movs	r4, r3
     538:	465b      	mov	r3, fp
     53a:	0015      	movs	r5, r2
     53c:	2b00      	cmp	r3, #0
     53e:	db2c      	blt.n	59a <__udivmoddi4+0x166>
     540:	0026      	movs	r6, r4
     542:	409e      	lsls	r6, r3
     544:	0033      	movs	r3, r6
     546:	0026      	movs	r6, r4
     548:	4647      	mov	r7, r8
     54a:	40be      	lsls	r6, r7
     54c:	0032      	movs	r2, r6
     54e:	1a80      	subs	r0, r0, r2
     550:	4199      	sbcs	r1, r3
     552:	9000      	str	r0, [sp, #0]
     554:	9101      	str	r1, [sp, #4]
     556:	e7ae      	b.n	4b6 <__udivmoddi4+0x82>
     558:	4642      	mov	r2, r8
     55a:	2320      	movs	r3, #32
     55c:	1a9b      	subs	r3, r3, r2
     55e:	4652      	mov	r2, sl
     560:	40da      	lsrs	r2, r3
     562:	4641      	mov	r1, r8
     564:	0013      	movs	r3, r2
     566:	464a      	mov	r2, r9
     568:	408a      	lsls	r2, r1
     56a:	0017      	movs	r7, r2
     56c:	431f      	orrs	r7, r3
     56e:	e782      	b.n	476 <__udivmoddi4+0x42>
     570:	4642      	mov	r2, r8
     572:	2320      	movs	r3, #32
     574:	1a9b      	subs	r3, r3, r2
     576:	002a      	movs	r2, r5
     578:	4646      	mov	r6, r8
     57a:	409a      	lsls	r2, r3
     57c:	0023      	movs	r3, r4
     57e:	40f3      	lsrs	r3, r6
     580:	4313      	orrs	r3, r2
     582:	e7d5      	b.n	530 <__udivmoddi4+0xfc>
     584:	4642      	mov	r2, r8
     586:	2320      	movs	r3, #32
     588:	2100      	movs	r1, #0
     58a:	1a9b      	subs	r3, r3, r2
     58c:	2200      	movs	r2, #0
     58e:	9100      	str	r1, [sp, #0]
     590:	9201      	str	r2, [sp, #4]
     592:	2201      	movs	r2, #1
     594:	40da      	lsrs	r2, r3
     596:	9201      	str	r2, [sp, #4]
     598:	e782      	b.n	4a0 <__udivmoddi4+0x6c>
     59a:	4642      	mov	r2, r8
     59c:	2320      	movs	r3, #32
     59e:	0026      	movs	r6, r4
     5a0:	1a9b      	subs	r3, r3, r2
     5a2:	40de      	lsrs	r6, r3
     5a4:	002f      	movs	r7, r5
     5a6:	46b4      	mov	ip, r6
     5a8:	4097      	lsls	r7, r2
     5aa:	4666      	mov	r6, ip
     5ac:	003b      	movs	r3, r7
     5ae:	4333      	orrs	r3, r6
     5b0:	e7c9      	b.n	546 <__udivmoddi4+0x112>
     5b2:	46c0      	nop			; (mov r8, r8)

000005b4 <__aeabi_dadd>:
     5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5b6:	465f      	mov	r7, fp
     5b8:	4644      	mov	r4, r8
     5ba:	4656      	mov	r6, sl
     5bc:	464d      	mov	r5, r9
     5be:	b4f0      	push	{r4, r5, r6, r7}
     5c0:	030c      	lsls	r4, r1, #12
     5c2:	004e      	lsls	r6, r1, #1
     5c4:	0fc9      	lsrs	r1, r1, #31
     5c6:	4688      	mov	r8, r1
     5c8:	000d      	movs	r5, r1
     5ca:	0a61      	lsrs	r1, r4, #9
     5cc:	0f44      	lsrs	r4, r0, #29
     5ce:	430c      	orrs	r4, r1
     5d0:	00c7      	lsls	r7, r0, #3
     5d2:	0319      	lsls	r1, r3, #12
     5d4:	0058      	lsls	r0, r3, #1
     5d6:	0fdb      	lsrs	r3, r3, #31
     5d8:	469b      	mov	fp, r3
     5da:	0a4b      	lsrs	r3, r1, #9
     5dc:	0f51      	lsrs	r1, r2, #29
     5de:	430b      	orrs	r3, r1
     5e0:	0d76      	lsrs	r6, r6, #21
     5e2:	0d40      	lsrs	r0, r0, #21
     5e4:	0019      	movs	r1, r3
     5e6:	00d2      	lsls	r2, r2, #3
     5e8:	45d8      	cmp	r8, fp
     5ea:	d100      	bne.n	5ee <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x12>
     5ec:	e0ae      	b.n	74c <CONFIG_BT_CTLR_COMPANY_ID+0x15b>
     5ee:	1a35      	subs	r5, r6, r0
     5f0:	2d00      	cmp	r5, #0
     5f2:	dc00      	bgt.n	5f6 <CONFIG_BT_CTLR_COMPANY_ID+0x5>
     5f4:	e0f6      	b.n	7e4 <CONFIG_BT_CTLR_COMPANY_ID+0x1f3>
     5f6:	2800      	cmp	r0, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_CTLR_COMPANY_ID+0x29>
     5fa:	4313      	orrs	r3, r2
     5fc:	d100      	bne.n	600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>
     5fe:	e0db      	b.n	7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>
     600:	1e6b      	subs	r3, r5, #1
     602:	2b00      	cmp	r3, #0
     604:	d000      	beq.n	608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>
     606:	e137      	b.n	878 <CONFIG_BT_CTLR_COMPANY_ID+0x287>
     608:	1aba      	subs	r2, r7, r2
     60a:	4297      	cmp	r7, r2
     60c:	41bf      	sbcs	r7, r7
     60e:	1a64      	subs	r4, r4, r1
     610:	427f      	negs	r7, r7
     612:	1be4      	subs	r4, r4, r7
     614:	2601      	movs	r6, #1
     616:	0017      	movs	r7, r2
     618:	e024      	b.n	664 <CONFIG_BT_CTLR_COMPANY_ID+0x73>
     61a:	4bc6      	ldr	r3, [pc, #792]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     61c:	429e      	cmp	r6, r3
     61e:	d04d      	beq.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     620:	2380      	movs	r3, #128	; 0x80
     622:	041b      	lsls	r3, r3, #16
     624:	4319      	orrs	r1, r3
     626:	2d38      	cmp	r5, #56	; 0x38
     628:	dd00      	ble.n	62c <CONFIG_BT_CTLR_COMPANY_ID+0x3b>
     62a:	e107      	b.n	83c <CONFIG_BT_CTLR_COMPANY_ID+0x24b>
     62c:	2d1f      	cmp	r5, #31
     62e:	dd00      	ble.n	632 <CONFIG_BT_CTLR_COMPANY_ID+0x41>
     630:	e138      	b.n	8a4 <CONFIG_BT_CTLR_COMPANY_ID+0x2b3>
     632:	2020      	movs	r0, #32
     634:	1b43      	subs	r3, r0, r5
     636:	469a      	mov	sl, r3
     638:	000b      	movs	r3, r1
     63a:	4650      	mov	r0, sl
     63c:	4083      	lsls	r3, r0
     63e:	4699      	mov	r9, r3
     640:	0013      	movs	r3, r2
     642:	4648      	mov	r0, r9
     644:	40eb      	lsrs	r3, r5
     646:	4318      	orrs	r0, r3
     648:	0003      	movs	r3, r0
     64a:	4650      	mov	r0, sl
     64c:	4082      	lsls	r2, r0
     64e:	1e50      	subs	r0, r2, #1
     650:	4182      	sbcs	r2, r0
     652:	40e9      	lsrs	r1, r5
     654:	431a      	orrs	r2, r3
     656:	1aba      	subs	r2, r7, r2
     658:	1a61      	subs	r1, r4, r1
     65a:	4297      	cmp	r7, r2
     65c:	41a4      	sbcs	r4, r4
     65e:	0017      	movs	r7, r2
     660:	4264      	negs	r4, r4
     662:	1b0c      	subs	r4, r1, r4
     664:	0223      	lsls	r3, r4, #8
     666:	d562      	bpl.n	72e <CONFIG_BT_CTLR_COMPANY_ID+0x13d>
     668:	0264      	lsls	r4, r4, #9
     66a:	0a65      	lsrs	r5, r4, #9
     66c:	2d00      	cmp	r5, #0
     66e:	d100      	bne.n	672 <CONFIG_BT_CTLR_COMPANY_ID+0x81>
     670:	e0df      	b.n	832 <CONFIG_BT_CTLR_COMPANY_ID+0x241>
     672:	0028      	movs	r0, r5
     674:	f000 fe24 	bl	12c0 <__clzsi2>
     678:	0003      	movs	r3, r0
     67a:	3b08      	subs	r3, #8
     67c:	2b1f      	cmp	r3, #31
     67e:	dd00      	ble.n	682 <CONFIG_BT_CTLR_COMPANY_ID+0x91>
     680:	e0d2      	b.n	828 <CONFIG_BT_CTLR_COMPANY_ID+0x237>
     682:	2220      	movs	r2, #32
     684:	003c      	movs	r4, r7
     686:	1ad2      	subs	r2, r2, r3
     688:	409d      	lsls	r5, r3
     68a:	40d4      	lsrs	r4, r2
     68c:	409f      	lsls	r7, r3
     68e:	4325      	orrs	r5, r4
     690:	429e      	cmp	r6, r3
     692:	dd00      	ble.n	696 <CONFIG_BT_CTLR_COMPANY_ID+0xa5>
     694:	e0c4      	b.n	820 <CONFIG_BT_CTLR_COMPANY_ID+0x22f>
     696:	1b9e      	subs	r6, r3, r6
     698:	1c73      	adds	r3, r6, #1
     69a:	2b1f      	cmp	r3, #31
     69c:	dd00      	ble.n	6a0 <CONFIG_BT_CTLR_COMPANY_ID+0xaf>
     69e:	e0f1      	b.n	884 <CONFIG_BT_CTLR_COMPANY_ID+0x293>
     6a0:	2220      	movs	r2, #32
     6a2:	0038      	movs	r0, r7
     6a4:	0029      	movs	r1, r5
     6a6:	1ad2      	subs	r2, r2, r3
     6a8:	40d8      	lsrs	r0, r3
     6aa:	4091      	lsls	r1, r2
     6ac:	4097      	lsls	r7, r2
     6ae:	002c      	movs	r4, r5
     6b0:	4301      	orrs	r1, r0
     6b2:	1e78      	subs	r0, r7, #1
     6b4:	4187      	sbcs	r7, r0
     6b6:	40dc      	lsrs	r4, r3
     6b8:	2600      	movs	r6, #0
     6ba:	430f      	orrs	r7, r1
     6bc:	077b      	lsls	r3, r7, #29
     6be:	d009      	beq.n	6d4 <CONFIG_BT_CTLR_COMPANY_ID+0xe3>
     6c0:	230f      	movs	r3, #15
     6c2:	403b      	ands	r3, r7
     6c4:	2b04      	cmp	r3, #4
     6c6:	d005      	beq.n	6d4 <CONFIG_BT_CTLR_COMPANY_ID+0xe3>
     6c8:	1d3b      	adds	r3, r7, #4
     6ca:	42bb      	cmp	r3, r7
     6cc:	41bf      	sbcs	r7, r7
     6ce:	427f      	negs	r7, r7
     6d0:	19e4      	adds	r4, r4, r7
     6d2:	001f      	movs	r7, r3
     6d4:	0223      	lsls	r3, r4, #8
     6d6:	d52c      	bpl.n	732 <CONFIG_BT_CTLR_COMPANY_ID+0x141>
     6d8:	4b96      	ldr	r3, [pc, #600]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     6da:	3601      	adds	r6, #1
     6dc:	429e      	cmp	r6, r3
     6de:	d100      	bne.n	6e2 <CONFIG_BT_CTLR_COMPANY_ID+0xf1>
     6e0:	e09a      	b.n	818 <CONFIG_BT_CTLR_COMPANY_ID+0x227>
     6e2:	4645      	mov	r5, r8
     6e4:	4b94      	ldr	r3, [pc, #592]	; (938 <CONFIG_BT_CTLR_COMPANY_ID+0x347>)
     6e6:	08ff      	lsrs	r7, r7, #3
     6e8:	401c      	ands	r4, r3
     6ea:	0760      	lsls	r0, r4, #29
     6ec:	0576      	lsls	r6, r6, #21
     6ee:	0264      	lsls	r4, r4, #9
     6f0:	4307      	orrs	r7, r0
     6f2:	0b24      	lsrs	r4, r4, #12
     6f4:	0d76      	lsrs	r6, r6, #21
     6f6:	2100      	movs	r1, #0
     6f8:	0324      	lsls	r4, r4, #12
     6fa:	0b23      	lsrs	r3, r4, #12
     6fc:	0d0c      	lsrs	r4, r1, #20
     6fe:	4a8f      	ldr	r2, [pc, #572]	; (93c <CONFIG_BT_CTLR_COMPANY_ID+0x34b>)
     700:	0524      	lsls	r4, r4, #20
     702:	431c      	orrs	r4, r3
     704:	4014      	ands	r4, r2
     706:	0533      	lsls	r3, r6, #20
     708:	4323      	orrs	r3, r4
     70a:	005b      	lsls	r3, r3, #1
     70c:	07ed      	lsls	r5, r5, #31
     70e:	085b      	lsrs	r3, r3, #1
     710:	432b      	orrs	r3, r5
     712:	0038      	movs	r0, r7
     714:	0019      	movs	r1, r3
     716:	bc3c      	pop	{r2, r3, r4, r5}
     718:	4690      	mov	r8, r2
     71a:	4699      	mov	r9, r3
     71c:	46a2      	mov	sl, r4
     71e:	46ab      	mov	fp, r5
     720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     722:	4664      	mov	r4, ip
     724:	4304      	orrs	r4, r0
     726:	d100      	bne.n	72a <CONFIG_BT_CTLR_COMPANY_ID+0x139>
     728:	e211      	b.n	b4e <CONFIG_BT_CTLR_COMPANY_ID+0x55d>
     72a:	0004      	movs	r4, r0
     72c:	4667      	mov	r7, ip
     72e:	077b      	lsls	r3, r7, #29
     730:	d1c6      	bne.n	6c0 <CONFIG_BT_CTLR_COMPANY_ID+0xcf>
     732:	4645      	mov	r5, r8
     734:	0760      	lsls	r0, r4, #29
     736:	08ff      	lsrs	r7, r7, #3
     738:	4307      	orrs	r7, r0
     73a:	08e4      	lsrs	r4, r4, #3
     73c:	4b7d      	ldr	r3, [pc, #500]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     73e:	429e      	cmp	r6, r3
     740:	d030      	beq.n	7a4 <CONFIG_BT_CTLR_COMPANY_ID+0x1b3>
     742:	0324      	lsls	r4, r4, #12
     744:	0576      	lsls	r6, r6, #21
     746:	0b24      	lsrs	r4, r4, #12
     748:	0d76      	lsrs	r6, r6, #21
     74a:	e7d4      	b.n	6f6 <CONFIG_BT_CTLR_COMPANY_ID+0x105>
     74c:	1a33      	subs	r3, r6, r0
     74e:	469a      	mov	sl, r3
     750:	2b00      	cmp	r3, #0
     752:	dd78      	ble.n	846 <CONFIG_BT_CTLR_COMPANY_ID+0x255>
     754:	2800      	cmp	r0, #0
     756:	d031      	beq.n	7bc <CONFIG_BT_CTLR_COMPANY_ID+0x1cb>
     758:	4876      	ldr	r0, [pc, #472]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     75a:	4286      	cmp	r6, r0
     75c:	d0ae      	beq.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     75e:	2080      	movs	r0, #128	; 0x80
     760:	0400      	lsls	r0, r0, #16
     762:	4301      	orrs	r1, r0
     764:	4653      	mov	r3, sl
     766:	2b38      	cmp	r3, #56	; 0x38
     768:	dc00      	bgt.n	76c <CONFIG_BT_CTLR_COMPANY_ID+0x17b>
     76a:	e0e9      	b.n	940 <CONFIG_BT_CTLR_COMPANY_ID+0x34f>
     76c:	430a      	orrs	r2, r1
     76e:	1e51      	subs	r1, r2, #1
     770:	418a      	sbcs	r2, r1
     772:	2100      	movs	r1, #0
     774:	19d2      	adds	r2, r2, r7
     776:	42ba      	cmp	r2, r7
     778:	41bf      	sbcs	r7, r7
     77a:	1909      	adds	r1, r1, r4
     77c:	427c      	negs	r4, r7
     77e:	0017      	movs	r7, r2
     780:	190c      	adds	r4, r1, r4
     782:	0223      	lsls	r3, r4, #8
     784:	d5d3      	bpl.n	72e <CONFIG_BT_CTLR_COMPANY_ID+0x13d>
     786:	4b6b      	ldr	r3, [pc, #428]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     788:	3601      	adds	r6, #1
     78a:	429e      	cmp	r6, r3
     78c:	d100      	bne.n	790 <CONFIG_BT_CTLR_COMPANY_ID+0x19f>
     78e:	e13a      	b.n	a06 <CONFIG_BT_CTLR_COMPANY_ID+0x415>
     790:	2001      	movs	r0, #1
     792:	4b69      	ldr	r3, [pc, #420]	; (938 <CONFIG_BT_CTLR_COMPANY_ID+0x347>)
     794:	401c      	ands	r4, r3
     796:	087b      	lsrs	r3, r7, #1
     798:	4007      	ands	r7, r0
     79a:	431f      	orrs	r7, r3
     79c:	07e0      	lsls	r0, r4, #31
     79e:	4307      	orrs	r7, r0
     7a0:	0864      	lsrs	r4, r4, #1
     7a2:	e78b      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     7a4:	0023      	movs	r3, r4
     7a6:	433b      	orrs	r3, r7
     7a8:	d100      	bne.n	7ac <CONFIG_BT_CTLR_COMPANY_ID+0x1bb>
     7aa:	e1cb      	b.n	b44 <CONFIG_BT_CTLR_COMPANY_ID+0x553>
     7ac:	2280      	movs	r2, #128	; 0x80
     7ae:	0312      	lsls	r2, r2, #12
     7b0:	4314      	orrs	r4, r2
     7b2:	0324      	lsls	r4, r4, #12
     7b4:	0b24      	lsrs	r4, r4, #12
     7b6:	e79e      	b.n	6f6 <CONFIG_BT_CTLR_COMPANY_ID+0x105>
     7b8:	002e      	movs	r6, r5
     7ba:	e77f      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     7bc:	0008      	movs	r0, r1
     7be:	4310      	orrs	r0, r2
     7c0:	d100      	bne.n	7c4 <CONFIG_BT_CTLR_COMPANY_ID+0x1d3>
     7c2:	e0b4      	b.n	92e <CONFIG_BT_CTLR_COMPANY_ID+0x33d>
     7c4:	1e58      	subs	r0, r3, #1
     7c6:	2800      	cmp	r0, #0
     7c8:	d000      	beq.n	7cc <CONFIG_BT_CTLR_COMPANY_ID+0x1db>
     7ca:	e0de      	b.n	98a <CONFIG_BT_CTLR_COMPANY_ID+0x399>
     7cc:	18ba      	adds	r2, r7, r2
     7ce:	42ba      	cmp	r2, r7
     7d0:	419b      	sbcs	r3, r3
     7d2:	1864      	adds	r4, r4, r1
     7d4:	425b      	negs	r3, r3
     7d6:	18e4      	adds	r4, r4, r3
     7d8:	0017      	movs	r7, r2
     7da:	2601      	movs	r6, #1
     7dc:	0223      	lsls	r3, r4, #8
     7de:	d5a6      	bpl.n	72e <CONFIG_BT_CTLR_COMPANY_ID+0x13d>
     7e0:	2602      	movs	r6, #2
     7e2:	e7d5      	b.n	790 <CONFIG_BT_CTLR_COMPANY_ID+0x19f>
     7e4:	2d00      	cmp	r5, #0
     7e6:	d16e      	bne.n	8c6 <CONFIG_BT_CTLR_COMPANY_ID+0x2d5>
     7e8:	1c70      	adds	r0, r6, #1
     7ea:	0540      	lsls	r0, r0, #21
     7ec:	0d40      	lsrs	r0, r0, #21
     7ee:	2801      	cmp	r0, #1
     7f0:	dc00      	bgt.n	7f4 <CONFIG_BT_CTLR_COMPANY_ID+0x203>
     7f2:	e0f9      	b.n	9e8 <CONFIG_BT_CTLR_COMPANY_ID+0x3f7>
     7f4:	1ab8      	subs	r0, r7, r2
     7f6:	4684      	mov	ip, r0
     7f8:	4287      	cmp	r7, r0
     7fa:	4180      	sbcs	r0, r0
     7fc:	1ae5      	subs	r5, r4, r3
     7fe:	4240      	negs	r0, r0
     800:	1a2d      	subs	r5, r5, r0
     802:	0228      	lsls	r0, r5, #8
     804:	d400      	bmi.n	808 <CONFIG_BT_CTLR_COMPANY_ID+0x217>
     806:	e089      	b.n	91c <CONFIG_BT_CTLR_COMPANY_ID+0x32b>
     808:	1bd7      	subs	r7, r2, r7
     80a:	42ba      	cmp	r2, r7
     80c:	4192      	sbcs	r2, r2
     80e:	1b1c      	subs	r4, r3, r4
     810:	4252      	negs	r2, r2
     812:	1aa5      	subs	r5, r4, r2
     814:	46d8      	mov	r8, fp
     816:	e729      	b.n	66c <CONFIG_BT_CTLR_COMPANY_ID+0x7b>
     818:	4645      	mov	r5, r8
     81a:	2400      	movs	r4, #0
     81c:	2700      	movs	r7, #0
     81e:	e76a      	b.n	6f6 <CONFIG_BT_CTLR_COMPANY_ID+0x105>
     820:	4c45      	ldr	r4, [pc, #276]	; (938 <CONFIG_BT_CTLR_COMPANY_ID+0x347>)
     822:	1af6      	subs	r6, r6, r3
     824:	402c      	ands	r4, r5
     826:	e749      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     828:	003d      	movs	r5, r7
     82a:	3828      	subs	r0, #40	; 0x28
     82c:	4085      	lsls	r5, r0
     82e:	2700      	movs	r7, #0
     830:	e72e      	b.n	690 <CONFIG_BT_CTLR_COMPANY_ID+0x9f>
     832:	0038      	movs	r0, r7
     834:	f000 fd44 	bl	12c0 <__clzsi2>
     838:	3020      	adds	r0, #32
     83a:	e71d      	b.n	678 <CONFIG_BT_CTLR_COMPANY_ID+0x87>
     83c:	430a      	orrs	r2, r1
     83e:	1e51      	subs	r1, r2, #1
     840:	418a      	sbcs	r2, r1
     842:	2100      	movs	r1, #0
     844:	e707      	b.n	656 <CONFIG_BT_CTLR_COMPANY_ID+0x65>
     846:	2b00      	cmp	r3, #0
     848:	d000      	beq.n	84c <CONFIG_BT_CTLR_COMPANY_ID+0x25b>
     84a:	e0f3      	b.n	a34 <CONFIG_BT_CTLR_COMPANY_ID+0x443>
     84c:	1c70      	adds	r0, r6, #1
     84e:	0543      	lsls	r3, r0, #21
     850:	0d5b      	lsrs	r3, r3, #21
     852:	2b01      	cmp	r3, #1
     854:	dc00      	bgt.n	858 <CONFIG_BT_CTLR_COMPANY_ID+0x267>
     856:	e0ad      	b.n	9b4 <CONFIG_BT_CTLR_COMPANY_ID+0x3c3>
     858:	4b36      	ldr	r3, [pc, #216]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     85a:	4298      	cmp	r0, r3
     85c:	d100      	bne.n	860 <CONFIG_BT_CTLR_COMPANY_ID+0x26f>
     85e:	e0d1      	b.n	a04 <CONFIG_BT_CTLR_COMPANY_ID+0x413>
     860:	18ba      	adds	r2, r7, r2
     862:	42ba      	cmp	r2, r7
     864:	41bf      	sbcs	r7, r7
     866:	1864      	adds	r4, r4, r1
     868:	427f      	negs	r7, r7
     86a:	19e4      	adds	r4, r4, r7
     86c:	07e7      	lsls	r7, r4, #31
     86e:	0852      	lsrs	r2, r2, #1
     870:	4317      	orrs	r7, r2
     872:	0864      	lsrs	r4, r4, #1
     874:	0006      	movs	r6, r0
     876:	e721      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     878:	482e      	ldr	r0, [pc, #184]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     87a:	4285      	cmp	r5, r0
     87c:	d100      	bne.n	880 <CONFIG_BT_CTLR_COMPANY_ID+0x28f>
     87e:	e093      	b.n	9a8 <CONFIG_BT_CTLR_COMPANY_ID+0x3b7>
     880:	001d      	movs	r5, r3
     882:	e6d0      	b.n	626 <CONFIG_BT_CTLR_COMPANY_ID+0x35>
     884:	0029      	movs	r1, r5
     886:	3e1f      	subs	r6, #31
     888:	40f1      	lsrs	r1, r6
     88a:	2b20      	cmp	r3, #32
     88c:	d100      	bne.n	890 <CONFIG_BT_CTLR_COMPANY_ID+0x29f>
     88e:	e08d      	b.n	9ac <CONFIG_BT_CTLR_COMPANY_ID+0x3bb>
     890:	2240      	movs	r2, #64	; 0x40
     892:	1ad3      	subs	r3, r2, r3
     894:	409d      	lsls	r5, r3
     896:	432f      	orrs	r7, r5
     898:	1e7d      	subs	r5, r7, #1
     89a:	41af      	sbcs	r7, r5
     89c:	2400      	movs	r4, #0
     89e:	430f      	orrs	r7, r1
     8a0:	2600      	movs	r6, #0
     8a2:	e744      	b.n	72e <CONFIG_BT_CTLR_COMPANY_ID+0x13d>
     8a4:	002b      	movs	r3, r5
     8a6:	0008      	movs	r0, r1
     8a8:	3b20      	subs	r3, #32
     8aa:	40d8      	lsrs	r0, r3
     8ac:	0003      	movs	r3, r0
     8ae:	2d20      	cmp	r5, #32
     8b0:	d100      	bne.n	8b4 <CONFIG_BT_CTLR_COMPANY_ID+0x2c3>
     8b2:	e07d      	b.n	9b0 <CONFIG_BT_CTLR_COMPANY_ID+0x3bf>
     8b4:	2040      	movs	r0, #64	; 0x40
     8b6:	1b45      	subs	r5, r0, r5
     8b8:	40a9      	lsls	r1, r5
     8ba:	430a      	orrs	r2, r1
     8bc:	1e51      	subs	r1, r2, #1
     8be:	418a      	sbcs	r2, r1
     8c0:	2100      	movs	r1, #0
     8c2:	431a      	orrs	r2, r3
     8c4:	e6c7      	b.n	656 <CONFIG_BT_CTLR_COMPANY_ID+0x65>
     8c6:	2e00      	cmp	r6, #0
     8c8:	d050      	beq.n	96c <CONFIG_BT_CTLR_COMPANY_ID+0x37b>
     8ca:	4e1a      	ldr	r6, [pc, #104]	; (934 <CONFIG_BT_CTLR_COMPANY_ID+0x343>)
     8cc:	42b0      	cmp	r0, r6
     8ce:	d057      	beq.n	980 <CONFIG_BT_CTLR_COMPANY_ID+0x38f>
     8d0:	2680      	movs	r6, #128	; 0x80
     8d2:	426b      	negs	r3, r5
     8d4:	4699      	mov	r9, r3
     8d6:	0436      	lsls	r6, r6, #16
     8d8:	4334      	orrs	r4, r6
     8da:	464b      	mov	r3, r9
     8dc:	2b38      	cmp	r3, #56	; 0x38
     8de:	dd00      	ble.n	8e2 <CONFIG_BT_CTLR_COMPANY_ID+0x2f1>
     8e0:	e0d6      	b.n	a90 <CONFIG_BT_CTLR_COMPANY_ID+0x49f>
     8e2:	2b1f      	cmp	r3, #31
     8e4:	dd00      	ble.n	8e8 <CONFIG_BT_CTLR_COMPANY_ID+0x2f7>
     8e6:	e135      	b.n	b54 <CONFIG_BT_CTLR_COMPANY_ID+0x563>
     8e8:	2620      	movs	r6, #32
     8ea:	1af5      	subs	r5, r6, r3
     8ec:	0026      	movs	r6, r4
     8ee:	40ae      	lsls	r6, r5
     8f0:	46b2      	mov	sl, r6
     8f2:	003e      	movs	r6, r7
     8f4:	40de      	lsrs	r6, r3
     8f6:	46ac      	mov	ip, r5
     8f8:	0035      	movs	r5, r6
     8fa:	4656      	mov	r6, sl
     8fc:	432e      	orrs	r6, r5
     8fe:	4665      	mov	r5, ip
     900:	40af      	lsls	r7, r5
     902:	1e7d      	subs	r5, r7, #1
     904:	41af      	sbcs	r7, r5
     906:	40dc      	lsrs	r4, r3
     908:	4337      	orrs	r7, r6
     90a:	1bd7      	subs	r7, r2, r7
     90c:	42ba      	cmp	r2, r7
     90e:	4192      	sbcs	r2, r2
     910:	1b0c      	subs	r4, r1, r4
     912:	4252      	negs	r2, r2
     914:	1aa4      	subs	r4, r4, r2
     916:	0006      	movs	r6, r0
     918:	46d8      	mov	r8, fp
     91a:	e6a3      	b.n	664 <CONFIG_BT_CTLR_COMPANY_ID+0x73>
     91c:	4664      	mov	r4, ip
     91e:	4667      	mov	r7, ip
     920:	432c      	orrs	r4, r5
     922:	d000      	beq.n	926 <CONFIG_BT_CTLR_COMPANY_ID+0x335>
     924:	e6a2      	b.n	66c <CONFIG_BT_CTLR_COMPANY_ID+0x7b>
     926:	2500      	movs	r5, #0
     928:	2600      	movs	r6, #0
     92a:	2700      	movs	r7, #0
     92c:	e706      	b.n	73c <CONFIG_BT_CTLR_COMPANY_ID+0x14b>
     92e:	001e      	movs	r6, r3
     930:	e6c4      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     932:	46c0      	nop			; (mov r8, r8)
     934:	000007ff 	.word	0x000007ff
     938:	ff7fffff 	.word	0xff7fffff
     93c:	800fffff 	.word	0x800fffff
     940:	2b1f      	cmp	r3, #31
     942:	dc63      	bgt.n	a0c <CONFIG_BT_CTLR_COMPANY_ID+0x41b>
     944:	2020      	movs	r0, #32
     946:	1ac3      	subs	r3, r0, r3
     948:	0008      	movs	r0, r1
     94a:	4098      	lsls	r0, r3
     94c:	469c      	mov	ip, r3
     94e:	4683      	mov	fp, r0
     950:	4653      	mov	r3, sl
     952:	0010      	movs	r0, r2
     954:	40d8      	lsrs	r0, r3
     956:	0003      	movs	r3, r0
     958:	4658      	mov	r0, fp
     95a:	4318      	orrs	r0, r3
     95c:	4663      	mov	r3, ip
     95e:	409a      	lsls	r2, r3
     960:	1e53      	subs	r3, r2, #1
     962:	419a      	sbcs	r2, r3
     964:	4653      	mov	r3, sl
     966:	4302      	orrs	r2, r0
     968:	40d9      	lsrs	r1, r3
     96a:	e703      	b.n	774 <CONFIG_BT_CTLR_COMPANY_ID+0x183>
     96c:	0026      	movs	r6, r4
     96e:	433e      	orrs	r6, r7
     970:	d006      	beq.n	980 <CONFIG_BT_CTLR_COMPANY_ID+0x38f>
     972:	43eb      	mvns	r3, r5
     974:	4699      	mov	r9, r3
     976:	2b00      	cmp	r3, #0
     978:	d0c7      	beq.n	90a <CONFIG_BT_CTLR_COMPANY_ID+0x319>
     97a:	4e94      	ldr	r6, [pc, #592]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     97c:	42b0      	cmp	r0, r6
     97e:	d1ac      	bne.n	8da <CONFIG_BT_CTLR_COMPANY_ID+0x2e9>
     980:	000c      	movs	r4, r1
     982:	0017      	movs	r7, r2
     984:	0006      	movs	r6, r0
     986:	46d8      	mov	r8, fp
     988:	e698      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     98a:	4b90      	ldr	r3, [pc, #576]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     98c:	459a      	cmp	sl, r3
     98e:	d00b      	beq.n	9a8 <CONFIG_BT_CTLR_COMPANY_ID+0x3b7>
     990:	4682      	mov	sl, r0
     992:	e6e7      	b.n	764 <CONFIG_BT_CTLR_COMPANY_ID+0x173>
     994:	2800      	cmp	r0, #0
     996:	d000      	beq.n	99a <CONFIG_BT_CTLR_COMPANY_ID+0x3a9>
     998:	e09e      	b.n	ad8 <CONFIG_BT_CTLR_COMPANY_ID+0x4e7>
     99a:	0018      	movs	r0, r3
     99c:	4310      	orrs	r0, r2
     99e:	d100      	bne.n	9a2 <CONFIG_BT_CTLR_COMPANY_ID+0x3b1>
     9a0:	e0e9      	b.n	b76 <CONFIG_BT_CTLR_COMPANY_ID+0x585>
     9a2:	001c      	movs	r4, r3
     9a4:	0017      	movs	r7, r2
     9a6:	46d8      	mov	r8, fp
     9a8:	4e88      	ldr	r6, [pc, #544]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     9aa:	e687      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     9ac:	2500      	movs	r5, #0
     9ae:	e772      	b.n	896 <CONFIG_BT_CTLR_COMPANY_ID+0x2a5>
     9b0:	2100      	movs	r1, #0
     9b2:	e782      	b.n	8ba <CONFIG_BT_CTLR_COMPANY_ID+0x2c9>
     9b4:	0023      	movs	r3, r4
     9b6:	433b      	orrs	r3, r7
     9b8:	2e00      	cmp	r6, #0
     9ba:	d000      	beq.n	9be <CONFIG_BT_CTLR_COMPANY_ID+0x3cd>
     9bc:	e0ab      	b.n	b16 <CONFIG_BT_CTLR_COMPANY_ID+0x525>
     9be:	2b00      	cmp	r3, #0
     9c0:	d100      	bne.n	9c4 <CONFIG_BT_CTLR_COMPANY_ID+0x3d3>
     9c2:	e0e7      	b.n	b94 <CONFIG_BT_CTLR_COMPANY_ID+0x5a3>
     9c4:	000b      	movs	r3, r1
     9c6:	4313      	orrs	r3, r2
     9c8:	d100      	bne.n	9cc <CONFIG_BT_CTLR_COMPANY_ID+0x3db>
     9ca:	e677      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     9cc:	18ba      	adds	r2, r7, r2
     9ce:	42ba      	cmp	r2, r7
     9d0:	41bf      	sbcs	r7, r7
     9d2:	1864      	adds	r4, r4, r1
     9d4:	427f      	negs	r7, r7
     9d6:	19e4      	adds	r4, r4, r7
     9d8:	0223      	lsls	r3, r4, #8
     9da:	d400      	bmi.n	9de <CONFIG_BT_CTLR_COMPANY_ID+0x3ed>
     9dc:	e0f2      	b.n	bc4 <CONFIG_BT_CTLR_COMPANY_ID+0x5d3>
     9de:	4b7c      	ldr	r3, [pc, #496]	; (bd0 <CONFIG_BT_CTLR_COMPANY_ID+0x5df>)
     9e0:	0017      	movs	r7, r2
     9e2:	401c      	ands	r4, r3
     9e4:	0006      	movs	r6, r0
     9e6:	e669      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     9e8:	0020      	movs	r0, r4
     9ea:	4338      	orrs	r0, r7
     9ec:	2e00      	cmp	r6, #0
     9ee:	d1d1      	bne.n	994 <CONFIG_BT_CTLR_COMPANY_ID+0x3a3>
     9f0:	2800      	cmp	r0, #0
     9f2:	d15b      	bne.n	aac <CONFIG_BT_CTLR_COMPANY_ID+0x4bb>
     9f4:	001c      	movs	r4, r3
     9f6:	4314      	orrs	r4, r2
     9f8:	d100      	bne.n	9fc <CONFIG_BT_CTLR_COMPANY_ID+0x40b>
     9fa:	e0a8      	b.n	b4e <CONFIG_BT_CTLR_COMPANY_ID+0x55d>
     9fc:	001c      	movs	r4, r3
     9fe:	0017      	movs	r7, r2
     a00:	46d8      	mov	r8, fp
     a02:	e65b      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     a04:	0006      	movs	r6, r0
     a06:	2400      	movs	r4, #0
     a08:	2700      	movs	r7, #0
     a0a:	e697      	b.n	73c <CONFIG_BT_CTLR_COMPANY_ID+0x14b>
     a0c:	4650      	mov	r0, sl
     a0e:	000b      	movs	r3, r1
     a10:	3820      	subs	r0, #32
     a12:	40c3      	lsrs	r3, r0
     a14:	4699      	mov	r9, r3
     a16:	4653      	mov	r3, sl
     a18:	2b20      	cmp	r3, #32
     a1a:	d100      	bne.n	a1e <CONFIG_BT_CTLR_COMPANY_ID+0x42d>
     a1c:	e095      	b.n	b4a <CONFIG_BT_CTLR_COMPANY_ID+0x559>
     a1e:	2340      	movs	r3, #64	; 0x40
     a20:	4650      	mov	r0, sl
     a22:	1a1b      	subs	r3, r3, r0
     a24:	4099      	lsls	r1, r3
     a26:	430a      	orrs	r2, r1
     a28:	1e51      	subs	r1, r2, #1
     a2a:	418a      	sbcs	r2, r1
     a2c:	464b      	mov	r3, r9
     a2e:	2100      	movs	r1, #0
     a30:	431a      	orrs	r2, r3
     a32:	e69f      	b.n	774 <CONFIG_BT_CTLR_COMPANY_ID+0x183>
     a34:	2e00      	cmp	r6, #0
     a36:	d130      	bne.n	a9a <CONFIG_BT_CTLR_COMPANY_ID+0x4a9>
     a38:	0026      	movs	r6, r4
     a3a:	433e      	orrs	r6, r7
     a3c:	d067      	beq.n	b0e <CONFIG_BT_CTLR_COMPANY_ID+0x51d>
     a3e:	43db      	mvns	r3, r3
     a40:	469a      	mov	sl, r3
     a42:	2b00      	cmp	r3, #0
     a44:	d01c      	beq.n	a80 <CONFIG_BT_CTLR_COMPANY_ID+0x48f>
     a46:	4e61      	ldr	r6, [pc, #388]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     a48:	42b0      	cmp	r0, r6
     a4a:	d060      	beq.n	b0e <CONFIG_BT_CTLR_COMPANY_ID+0x51d>
     a4c:	4653      	mov	r3, sl
     a4e:	2b38      	cmp	r3, #56	; 0x38
     a50:	dd00      	ble.n	a54 <CONFIG_BT_CTLR_COMPANY_ID+0x463>
     a52:	e096      	b.n	b82 <CONFIG_BT_CTLR_COMPANY_ID+0x591>
     a54:	2b1f      	cmp	r3, #31
     a56:	dd00      	ble.n	a5a <CONFIG_BT_CTLR_COMPANY_ID+0x469>
     a58:	e09f      	b.n	b9a <CONFIG_BT_CTLR_COMPANY_ID+0x5a9>
     a5a:	2620      	movs	r6, #32
     a5c:	1af3      	subs	r3, r6, r3
     a5e:	0026      	movs	r6, r4
     a60:	409e      	lsls	r6, r3
     a62:	469c      	mov	ip, r3
     a64:	46b3      	mov	fp, r6
     a66:	4653      	mov	r3, sl
     a68:	003e      	movs	r6, r7
     a6a:	40de      	lsrs	r6, r3
     a6c:	0033      	movs	r3, r6
     a6e:	465e      	mov	r6, fp
     a70:	431e      	orrs	r6, r3
     a72:	4663      	mov	r3, ip
     a74:	409f      	lsls	r7, r3
     a76:	1e7b      	subs	r3, r7, #1
     a78:	419f      	sbcs	r7, r3
     a7a:	4653      	mov	r3, sl
     a7c:	40dc      	lsrs	r4, r3
     a7e:	4337      	orrs	r7, r6
     a80:	18bf      	adds	r7, r7, r2
     a82:	4297      	cmp	r7, r2
     a84:	4192      	sbcs	r2, r2
     a86:	1864      	adds	r4, r4, r1
     a88:	4252      	negs	r2, r2
     a8a:	18a4      	adds	r4, r4, r2
     a8c:	0006      	movs	r6, r0
     a8e:	e678      	b.n	782 <CONFIG_BT_CTLR_COMPANY_ID+0x191>
     a90:	4327      	orrs	r7, r4
     a92:	1e7c      	subs	r4, r7, #1
     a94:	41a7      	sbcs	r7, r4
     a96:	2400      	movs	r4, #0
     a98:	e737      	b.n	90a <CONFIG_BT_CTLR_COMPANY_ID+0x319>
     a9a:	4e4c      	ldr	r6, [pc, #304]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     a9c:	42b0      	cmp	r0, r6
     a9e:	d036      	beq.n	b0e <CONFIG_BT_CTLR_COMPANY_ID+0x51d>
     aa0:	2680      	movs	r6, #128	; 0x80
     aa2:	425b      	negs	r3, r3
     aa4:	0436      	lsls	r6, r6, #16
     aa6:	469a      	mov	sl, r3
     aa8:	4334      	orrs	r4, r6
     aaa:	e7cf      	b.n	a4c <CONFIG_BT_CTLR_COMPANY_ID+0x45b>
     aac:	0018      	movs	r0, r3
     aae:	4310      	orrs	r0, r2
     ab0:	d100      	bne.n	ab4 <CONFIG_BT_CTLR_COMPANY_ID+0x4c3>
     ab2:	e603      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     ab4:	1ab8      	subs	r0, r7, r2
     ab6:	4684      	mov	ip, r0
     ab8:	4567      	cmp	r7, ip
     aba:	41ad      	sbcs	r5, r5
     abc:	1ae0      	subs	r0, r4, r3
     abe:	426d      	negs	r5, r5
     ac0:	1b40      	subs	r0, r0, r5
     ac2:	0205      	lsls	r5, r0, #8
     ac4:	d400      	bmi.n	ac8 <CONFIG_BT_CTLR_COMPANY_ID+0x4d7>
     ac6:	e62c      	b.n	722 <CONFIG_BT_CTLR_COMPANY_ID+0x131>
     ac8:	1bd7      	subs	r7, r2, r7
     aca:	42ba      	cmp	r2, r7
     acc:	4192      	sbcs	r2, r2
     ace:	1b1c      	subs	r4, r3, r4
     ad0:	4252      	negs	r2, r2
     ad2:	1aa4      	subs	r4, r4, r2
     ad4:	46d8      	mov	r8, fp
     ad6:	e5f1      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     ad8:	0018      	movs	r0, r3
     ada:	4310      	orrs	r0, r2
     adc:	d100      	bne.n	ae0 <CONFIG_BT_CTLR_COMPANY_ID+0x4ef>
     ade:	e763      	b.n	9a8 <CONFIG_BT_CTLR_COMPANY_ID+0x3b7>
     ae0:	08f8      	lsrs	r0, r7, #3
     ae2:	0767      	lsls	r7, r4, #29
     ae4:	4307      	orrs	r7, r0
     ae6:	2080      	movs	r0, #128	; 0x80
     ae8:	08e4      	lsrs	r4, r4, #3
     aea:	0300      	lsls	r0, r0, #12
     aec:	4204      	tst	r4, r0
     aee:	d008      	beq.n	b02 <CONFIG_BT_CTLR_COMPANY_ID+0x511>
     af0:	08dd      	lsrs	r5, r3, #3
     af2:	4205      	tst	r5, r0
     af4:	d105      	bne.n	b02 <CONFIG_BT_CTLR_COMPANY_ID+0x511>
     af6:	08d2      	lsrs	r2, r2, #3
     af8:	0759      	lsls	r1, r3, #29
     afa:	4311      	orrs	r1, r2
     afc:	000f      	movs	r7, r1
     afe:	002c      	movs	r4, r5
     b00:	46d8      	mov	r8, fp
     b02:	0f7b      	lsrs	r3, r7, #29
     b04:	00e4      	lsls	r4, r4, #3
     b06:	431c      	orrs	r4, r3
     b08:	00ff      	lsls	r7, r7, #3
     b0a:	4e30      	ldr	r6, [pc, #192]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     b0c:	e5d6      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     b0e:	000c      	movs	r4, r1
     b10:	0017      	movs	r7, r2
     b12:	0006      	movs	r6, r0
     b14:	e5d2      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     b16:	2b00      	cmp	r3, #0
     b18:	d038      	beq.n	b8c <CONFIG_BT_CTLR_COMPANY_ID+0x59b>
     b1a:	000b      	movs	r3, r1
     b1c:	4313      	orrs	r3, r2
     b1e:	d100      	bne.n	b22 <CONFIG_BT_CTLR_COMPANY_ID+0x531>
     b20:	e742      	b.n	9a8 <CONFIG_BT_CTLR_COMPANY_ID+0x3b7>
     b22:	08f8      	lsrs	r0, r7, #3
     b24:	0767      	lsls	r7, r4, #29
     b26:	4307      	orrs	r7, r0
     b28:	2080      	movs	r0, #128	; 0x80
     b2a:	08e4      	lsrs	r4, r4, #3
     b2c:	0300      	lsls	r0, r0, #12
     b2e:	4204      	tst	r4, r0
     b30:	d0e7      	beq.n	b02 <CONFIG_BT_CTLR_COMPANY_ID+0x511>
     b32:	08cb      	lsrs	r3, r1, #3
     b34:	4203      	tst	r3, r0
     b36:	d1e4      	bne.n	b02 <CONFIG_BT_CTLR_COMPANY_ID+0x511>
     b38:	08d2      	lsrs	r2, r2, #3
     b3a:	0749      	lsls	r1, r1, #29
     b3c:	4311      	orrs	r1, r2
     b3e:	000f      	movs	r7, r1
     b40:	001c      	movs	r4, r3
     b42:	e7de      	b.n	b02 <CONFIG_BT_CTLR_COMPANY_ID+0x511>
     b44:	2700      	movs	r7, #0
     b46:	2400      	movs	r4, #0
     b48:	e5d5      	b.n	6f6 <CONFIG_BT_CTLR_COMPANY_ID+0x105>
     b4a:	2100      	movs	r1, #0
     b4c:	e76b      	b.n	a26 <CONFIG_BT_CTLR_COMPANY_ID+0x435>
     b4e:	2500      	movs	r5, #0
     b50:	2700      	movs	r7, #0
     b52:	e5f3      	b.n	73c <CONFIG_BT_CTLR_COMPANY_ID+0x14b>
     b54:	464e      	mov	r6, r9
     b56:	0025      	movs	r5, r4
     b58:	3e20      	subs	r6, #32
     b5a:	40f5      	lsrs	r5, r6
     b5c:	464b      	mov	r3, r9
     b5e:	002e      	movs	r6, r5
     b60:	2b20      	cmp	r3, #32
     b62:	d02d      	beq.n	bc0 <CONFIG_BT_CTLR_COMPANY_ID+0x5cf>
     b64:	2540      	movs	r5, #64	; 0x40
     b66:	1aed      	subs	r5, r5, r3
     b68:	40ac      	lsls	r4, r5
     b6a:	4327      	orrs	r7, r4
     b6c:	1e7c      	subs	r4, r7, #1
     b6e:	41a7      	sbcs	r7, r4
     b70:	2400      	movs	r4, #0
     b72:	4337      	orrs	r7, r6
     b74:	e6c9      	b.n	90a <CONFIG_BT_CTLR_COMPANY_ID+0x319>
     b76:	2480      	movs	r4, #128	; 0x80
     b78:	2500      	movs	r5, #0
     b7a:	0324      	lsls	r4, r4, #12
     b7c:	4e13      	ldr	r6, [pc, #76]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     b7e:	2700      	movs	r7, #0
     b80:	e5dc      	b.n	73c <CONFIG_BT_CTLR_COMPANY_ID+0x14b>
     b82:	4327      	orrs	r7, r4
     b84:	1e7c      	subs	r4, r7, #1
     b86:	41a7      	sbcs	r7, r4
     b88:	2400      	movs	r4, #0
     b8a:	e779      	b.n	a80 <CONFIG_BT_CTLR_COMPANY_ID+0x48f>
     b8c:	000c      	movs	r4, r1
     b8e:	0017      	movs	r7, r2
     b90:	4e0e      	ldr	r6, [pc, #56]	; (bcc <CONFIG_BT_CTLR_COMPANY_ID+0x5db>)
     b92:	e593      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     b94:	000c      	movs	r4, r1
     b96:	0017      	movs	r7, r2
     b98:	e590      	b.n	6bc <CONFIG_BT_CTLR_COMPANY_ID+0xcb>
     b9a:	4656      	mov	r6, sl
     b9c:	0023      	movs	r3, r4
     b9e:	3e20      	subs	r6, #32
     ba0:	40f3      	lsrs	r3, r6
     ba2:	4699      	mov	r9, r3
     ba4:	4653      	mov	r3, sl
     ba6:	2b20      	cmp	r3, #32
     ba8:	d00e      	beq.n	bc8 <CONFIG_BT_CTLR_COMPANY_ID+0x5d7>
     baa:	2340      	movs	r3, #64	; 0x40
     bac:	4656      	mov	r6, sl
     bae:	1b9b      	subs	r3, r3, r6
     bb0:	409c      	lsls	r4, r3
     bb2:	4327      	orrs	r7, r4
     bb4:	1e7c      	subs	r4, r7, #1
     bb6:	41a7      	sbcs	r7, r4
     bb8:	464b      	mov	r3, r9
     bba:	2400      	movs	r4, #0
     bbc:	431f      	orrs	r7, r3
     bbe:	e75f      	b.n	a80 <CONFIG_BT_CTLR_COMPANY_ID+0x48f>
     bc0:	2400      	movs	r4, #0
     bc2:	e7d2      	b.n	b6a <CONFIG_BT_CTLR_COMPANY_ID+0x579>
     bc4:	0017      	movs	r7, r2
     bc6:	e5b2      	b.n	72e <CONFIG_BT_CTLR_COMPANY_ID+0x13d>
     bc8:	2400      	movs	r4, #0
     bca:	e7f2      	b.n	bb2 <CONFIG_BT_CTLR_COMPANY_ID+0x5c1>
     bcc:	000007ff 	.word	0x000007ff
     bd0:	ff7fffff 	.word	0xff7fffff

00000bd4 <__aeabi_ddiv>:
     bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd6:	465f      	mov	r7, fp
     bd8:	4656      	mov	r6, sl
     bda:	4644      	mov	r4, r8
     bdc:	464d      	mov	r5, r9
     bde:	b4f0      	push	{r4, r5, r6, r7}
     be0:	030e      	lsls	r6, r1, #12
     be2:	004c      	lsls	r4, r1, #1
     be4:	b087      	sub	sp, #28
     be6:	4683      	mov	fp, r0
     be8:	4692      	mov	sl, r2
     bea:	001d      	movs	r5, r3
     bec:	4680      	mov	r8, r0
     bee:	0b36      	lsrs	r6, r6, #12
     bf0:	0d64      	lsrs	r4, r4, #21
     bf2:	0fcf      	lsrs	r7, r1, #31
     bf4:	2c00      	cmp	r4, #0
     bf6:	d04f      	beq.n	c98 <__aeabi_ddiv+0xc4>
     bf8:	4b6f      	ldr	r3, [pc, #444]	; (db8 <__aeabi_ddiv+0x1e4>)
     bfa:	429c      	cmp	r4, r3
     bfc:	d035      	beq.n	c6a <__aeabi_ddiv+0x96>
     bfe:	2380      	movs	r3, #128	; 0x80
     c00:	0f42      	lsrs	r2, r0, #29
     c02:	041b      	lsls	r3, r3, #16
     c04:	00f6      	lsls	r6, r6, #3
     c06:	4313      	orrs	r3, r2
     c08:	4333      	orrs	r3, r6
     c0a:	4699      	mov	r9, r3
     c0c:	00c3      	lsls	r3, r0, #3
     c0e:	4698      	mov	r8, r3
     c10:	4b6a      	ldr	r3, [pc, #424]	; (dbc <__aeabi_ddiv+0x1e8>)
     c12:	2600      	movs	r6, #0
     c14:	469c      	mov	ip, r3
     c16:	2300      	movs	r3, #0
     c18:	4464      	add	r4, ip
     c1a:	9303      	str	r3, [sp, #12]
     c1c:	032b      	lsls	r3, r5, #12
     c1e:	0b1b      	lsrs	r3, r3, #12
     c20:	469b      	mov	fp, r3
     c22:	006b      	lsls	r3, r5, #1
     c24:	0fed      	lsrs	r5, r5, #31
     c26:	4650      	mov	r0, sl
     c28:	0d5b      	lsrs	r3, r3, #21
     c2a:	9501      	str	r5, [sp, #4]
     c2c:	d05e      	beq.n	cec <__aeabi_ddiv+0x118>
     c2e:	4a62      	ldr	r2, [pc, #392]	; (db8 <__aeabi_ddiv+0x1e4>)
     c30:	4293      	cmp	r3, r2
     c32:	d053      	beq.n	cdc <__aeabi_ddiv+0x108>
     c34:	465a      	mov	r2, fp
     c36:	00d1      	lsls	r1, r2, #3
     c38:	2280      	movs	r2, #128	; 0x80
     c3a:	0f40      	lsrs	r0, r0, #29
     c3c:	0412      	lsls	r2, r2, #16
     c3e:	4302      	orrs	r2, r0
     c40:	430a      	orrs	r2, r1
     c42:	4693      	mov	fp, r2
     c44:	4652      	mov	r2, sl
     c46:	00d1      	lsls	r1, r2, #3
     c48:	4a5c      	ldr	r2, [pc, #368]	; (dbc <__aeabi_ddiv+0x1e8>)
     c4a:	4694      	mov	ip, r2
     c4c:	2200      	movs	r2, #0
     c4e:	4463      	add	r3, ip
     c50:	0038      	movs	r0, r7
     c52:	4068      	eors	r0, r5
     c54:	4684      	mov	ip, r0
     c56:	9002      	str	r0, [sp, #8]
     c58:	1ae4      	subs	r4, r4, r3
     c5a:	4316      	orrs	r6, r2
     c5c:	2e0f      	cmp	r6, #15
     c5e:	d900      	bls.n	c62 <__aeabi_ddiv+0x8e>
     c60:	e0b4      	b.n	dcc <__aeabi_ddiv+0x1f8>
     c62:	4b57      	ldr	r3, [pc, #348]	; (dc0 <__aeabi_ddiv+0x1ec>)
     c64:	00b6      	lsls	r6, r6, #2
     c66:	599b      	ldr	r3, [r3, r6]
     c68:	469f      	mov	pc, r3
     c6a:	0003      	movs	r3, r0
     c6c:	4333      	orrs	r3, r6
     c6e:	4699      	mov	r9, r3
     c70:	d16c      	bne.n	d4c <__aeabi_ddiv+0x178>
     c72:	2300      	movs	r3, #0
     c74:	4698      	mov	r8, r3
     c76:	3302      	adds	r3, #2
     c78:	2608      	movs	r6, #8
     c7a:	9303      	str	r3, [sp, #12]
     c7c:	e7ce      	b.n	c1c <__aeabi_ddiv+0x48>
     c7e:	46cb      	mov	fp, r9
     c80:	4641      	mov	r1, r8
     c82:	9a03      	ldr	r2, [sp, #12]
     c84:	9701      	str	r7, [sp, #4]
     c86:	2a02      	cmp	r2, #2
     c88:	d165      	bne.n	d56 <__aeabi_ddiv+0x182>
     c8a:	9b01      	ldr	r3, [sp, #4]
     c8c:	4c4a      	ldr	r4, [pc, #296]	; (db8 <__aeabi_ddiv+0x1e4>)
     c8e:	469c      	mov	ip, r3
     c90:	2300      	movs	r3, #0
     c92:	2200      	movs	r2, #0
     c94:	4698      	mov	r8, r3
     c96:	e06b      	b.n	d70 <__aeabi_ddiv+0x19c>
     c98:	0003      	movs	r3, r0
     c9a:	4333      	orrs	r3, r6
     c9c:	4699      	mov	r9, r3
     c9e:	d04e      	beq.n	d3e <__aeabi_ddiv+0x16a>
     ca0:	2e00      	cmp	r6, #0
     ca2:	d100      	bne.n	ca6 <__aeabi_ddiv+0xd2>
     ca4:	e1bc      	b.n	1020 <__aeabi_ddiv+0x44c>
     ca6:	0030      	movs	r0, r6
     ca8:	f000 fb0a 	bl	12c0 <__clzsi2>
     cac:	0003      	movs	r3, r0
     cae:	3b0b      	subs	r3, #11
     cb0:	2b1c      	cmp	r3, #28
     cb2:	dd00      	ble.n	cb6 <__aeabi_ddiv+0xe2>
     cb4:	e1ac      	b.n	1010 <__aeabi_ddiv+0x43c>
     cb6:	221d      	movs	r2, #29
     cb8:	1ad3      	subs	r3, r2, r3
     cba:	465a      	mov	r2, fp
     cbc:	0001      	movs	r1, r0
     cbe:	40da      	lsrs	r2, r3
     cc0:	3908      	subs	r1, #8
     cc2:	408e      	lsls	r6, r1
     cc4:	0013      	movs	r3, r2
     cc6:	4333      	orrs	r3, r6
     cc8:	4699      	mov	r9, r3
     cca:	465b      	mov	r3, fp
     ccc:	408b      	lsls	r3, r1
     cce:	4698      	mov	r8, r3
     cd0:	2300      	movs	r3, #0
     cd2:	4c3c      	ldr	r4, [pc, #240]	; (dc4 <__aeabi_ddiv+0x1f0>)
     cd4:	2600      	movs	r6, #0
     cd6:	1a24      	subs	r4, r4, r0
     cd8:	9303      	str	r3, [sp, #12]
     cda:	e79f      	b.n	c1c <__aeabi_ddiv+0x48>
     cdc:	4651      	mov	r1, sl
     cde:	465a      	mov	r2, fp
     ce0:	4311      	orrs	r1, r2
     ce2:	d129      	bne.n	d38 <__aeabi_ddiv+0x164>
     ce4:	2200      	movs	r2, #0
     ce6:	4693      	mov	fp, r2
     ce8:	3202      	adds	r2, #2
     cea:	e7b1      	b.n	c50 <__aeabi_ddiv+0x7c>
     cec:	4659      	mov	r1, fp
     cee:	4301      	orrs	r1, r0
     cf0:	d01e      	beq.n	d30 <__aeabi_ddiv+0x15c>
     cf2:	465b      	mov	r3, fp
     cf4:	2b00      	cmp	r3, #0
     cf6:	d100      	bne.n	cfa <__aeabi_ddiv+0x126>
     cf8:	e19e      	b.n	1038 <__aeabi_ddiv+0x464>
     cfa:	4658      	mov	r0, fp
     cfc:	f000 fae0 	bl	12c0 <__clzsi2>
     d00:	0003      	movs	r3, r0
     d02:	3b0b      	subs	r3, #11
     d04:	2b1c      	cmp	r3, #28
     d06:	dd00      	ble.n	d0a <__aeabi_ddiv+0x136>
     d08:	e18f      	b.n	102a <__aeabi_ddiv+0x456>
     d0a:	0002      	movs	r2, r0
     d0c:	4659      	mov	r1, fp
     d0e:	3a08      	subs	r2, #8
     d10:	4091      	lsls	r1, r2
     d12:	468b      	mov	fp, r1
     d14:	211d      	movs	r1, #29
     d16:	1acb      	subs	r3, r1, r3
     d18:	4651      	mov	r1, sl
     d1a:	40d9      	lsrs	r1, r3
     d1c:	000b      	movs	r3, r1
     d1e:	4659      	mov	r1, fp
     d20:	430b      	orrs	r3, r1
     d22:	4651      	mov	r1, sl
     d24:	469b      	mov	fp, r3
     d26:	4091      	lsls	r1, r2
     d28:	4b26      	ldr	r3, [pc, #152]	; (dc4 <__aeabi_ddiv+0x1f0>)
     d2a:	2200      	movs	r2, #0
     d2c:	1a1b      	subs	r3, r3, r0
     d2e:	e78f      	b.n	c50 <__aeabi_ddiv+0x7c>
     d30:	2300      	movs	r3, #0
     d32:	2201      	movs	r2, #1
     d34:	469b      	mov	fp, r3
     d36:	e78b      	b.n	c50 <__aeabi_ddiv+0x7c>
     d38:	4651      	mov	r1, sl
     d3a:	2203      	movs	r2, #3
     d3c:	e788      	b.n	c50 <__aeabi_ddiv+0x7c>
     d3e:	2300      	movs	r3, #0
     d40:	4698      	mov	r8, r3
     d42:	3301      	adds	r3, #1
     d44:	2604      	movs	r6, #4
     d46:	2400      	movs	r4, #0
     d48:	9303      	str	r3, [sp, #12]
     d4a:	e767      	b.n	c1c <__aeabi_ddiv+0x48>
     d4c:	2303      	movs	r3, #3
     d4e:	46b1      	mov	r9, r6
     d50:	9303      	str	r3, [sp, #12]
     d52:	260c      	movs	r6, #12
     d54:	e762      	b.n	c1c <__aeabi_ddiv+0x48>
     d56:	2a03      	cmp	r2, #3
     d58:	d100      	bne.n	d5c <__aeabi_ddiv+0x188>
     d5a:	e25c      	b.n	1216 <__aeabi_ddiv+0x642>
     d5c:	9b01      	ldr	r3, [sp, #4]
     d5e:	2a01      	cmp	r2, #1
     d60:	d000      	beq.n	d64 <__aeabi_ddiv+0x190>
     d62:	e1e4      	b.n	112e <__aeabi_ddiv+0x55a>
     d64:	4013      	ands	r3, r2
     d66:	469c      	mov	ip, r3
     d68:	2300      	movs	r3, #0
     d6a:	2400      	movs	r4, #0
     d6c:	2200      	movs	r2, #0
     d6e:	4698      	mov	r8, r3
     d70:	2100      	movs	r1, #0
     d72:	0312      	lsls	r2, r2, #12
     d74:	0b13      	lsrs	r3, r2, #12
     d76:	0d0a      	lsrs	r2, r1, #20
     d78:	0512      	lsls	r2, r2, #20
     d7a:	431a      	orrs	r2, r3
     d7c:	0523      	lsls	r3, r4, #20
     d7e:	4c12      	ldr	r4, [pc, #72]	; (dc8 <__aeabi_ddiv+0x1f4>)
     d80:	4640      	mov	r0, r8
     d82:	4022      	ands	r2, r4
     d84:	4313      	orrs	r3, r2
     d86:	4662      	mov	r2, ip
     d88:	005b      	lsls	r3, r3, #1
     d8a:	07d2      	lsls	r2, r2, #31
     d8c:	085b      	lsrs	r3, r3, #1
     d8e:	4313      	orrs	r3, r2
     d90:	0019      	movs	r1, r3
     d92:	b007      	add	sp, #28
     d94:	bc3c      	pop	{r2, r3, r4, r5}
     d96:	4690      	mov	r8, r2
     d98:	4699      	mov	r9, r3
     d9a:	46a2      	mov	sl, r4
     d9c:	46ab      	mov	fp, r5
     d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     da0:	2300      	movs	r3, #0
     da2:	2280      	movs	r2, #128	; 0x80
     da4:	469c      	mov	ip, r3
     da6:	0312      	lsls	r2, r2, #12
     da8:	4698      	mov	r8, r3
     daa:	4c03      	ldr	r4, [pc, #12]	; (db8 <__aeabi_ddiv+0x1e4>)
     dac:	e7e0      	b.n	d70 <__aeabi_ddiv+0x19c>
     dae:	2300      	movs	r3, #0
     db0:	4c01      	ldr	r4, [pc, #4]	; (db8 <__aeabi_ddiv+0x1e4>)
     db2:	2200      	movs	r2, #0
     db4:	4698      	mov	r8, r3
     db6:	e7db      	b.n	d70 <__aeabi_ddiv+0x19c>
     db8:	000007ff 	.word	0x000007ff
     dbc:	fffffc01 	.word	0xfffffc01
     dc0:	0000c400 	.word	0x0000c400
     dc4:	fffffc0d 	.word	0xfffffc0d
     dc8:	800fffff 	.word	0x800fffff
     dcc:	45d9      	cmp	r9, fp
     dce:	d900      	bls.n	dd2 <__aeabi_ddiv+0x1fe>
     dd0:	e139      	b.n	1046 <__aeabi_ddiv+0x472>
     dd2:	d100      	bne.n	dd6 <__aeabi_ddiv+0x202>
     dd4:	e134      	b.n	1040 <__aeabi_ddiv+0x46c>
     dd6:	2300      	movs	r3, #0
     dd8:	4646      	mov	r6, r8
     dda:	464d      	mov	r5, r9
     ddc:	469a      	mov	sl, r3
     dde:	3c01      	subs	r4, #1
     de0:	465b      	mov	r3, fp
     de2:	0e0a      	lsrs	r2, r1, #24
     de4:	021b      	lsls	r3, r3, #8
     de6:	431a      	orrs	r2, r3
     de8:	020b      	lsls	r3, r1, #8
     dea:	0c17      	lsrs	r7, r2, #16
     dec:	9303      	str	r3, [sp, #12]
     dee:	0413      	lsls	r3, r2, #16
     df0:	0c1b      	lsrs	r3, r3, #16
     df2:	0039      	movs	r1, r7
     df4:	0028      	movs	r0, r5
     df6:	4690      	mov	r8, r2
     df8:	9301      	str	r3, [sp, #4]
     dfa:	f7ff f9e5 	bl	1c8 <__aeabi_uidiv>
     dfe:	0002      	movs	r2, r0
     e00:	9b01      	ldr	r3, [sp, #4]
     e02:	4683      	mov	fp, r0
     e04:	435a      	muls	r2, r3
     e06:	0028      	movs	r0, r5
     e08:	0039      	movs	r1, r7
     e0a:	4691      	mov	r9, r2
     e0c:	f7ff fa20 	bl	250 <__aeabi_uidivmod>
     e10:	0c35      	lsrs	r5, r6, #16
     e12:	0409      	lsls	r1, r1, #16
     e14:	430d      	orrs	r5, r1
     e16:	45a9      	cmp	r9, r5
     e18:	d90d      	bls.n	e36 <__aeabi_ddiv+0x262>
     e1a:	465b      	mov	r3, fp
     e1c:	4445      	add	r5, r8
     e1e:	3b01      	subs	r3, #1
     e20:	45a8      	cmp	r8, r5
     e22:	d900      	bls.n	e26 <__aeabi_ddiv+0x252>
     e24:	e13a      	b.n	109c <__aeabi_ddiv+0x4c8>
     e26:	45a9      	cmp	r9, r5
     e28:	d800      	bhi.n	e2c <__aeabi_ddiv+0x258>
     e2a:	e137      	b.n	109c <__aeabi_ddiv+0x4c8>
     e2c:	2302      	movs	r3, #2
     e2e:	425b      	negs	r3, r3
     e30:	469c      	mov	ip, r3
     e32:	4445      	add	r5, r8
     e34:	44e3      	add	fp, ip
     e36:	464b      	mov	r3, r9
     e38:	1aeb      	subs	r3, r5, r3
     e3a:	0039      	movs	r1, r7
     e3c:	0018      	movs	r0, r3
     e3e:	9304      	str	r3, [sp, #16]
     e40:	f7ff f9c2 	bl	1c8 <__aeabi_uidiv>
     e44:	9b01      	ldr	r3, [sp, #4]
     e46:	0005      	movs	r5, r0
     e48:	4343      	muls	r3, r0
     e4a:	0039      	movs	r1, r7
     e4c:	9804      	ldr	r0, [sp, #16]
     e4e:	4699      	mov	r9, r3
     e50:	f7ff f9fe 	bl	250 <__aeabi_uidivmod>
     e54:	0433      	lsls	r3, r6, #16
     e56:	0409      	lsls	r1, r1, #16
     e58:	0c1b      	lsrs	r3, r3, #16
     e5a:	430b      	orrs	r3, r1
     e5c:	4599      	cmp	r9, r3
     e5e:	d909      	bls.n	e74 <__aeabi_ddiv+0x2a0>
     e60:	4443      	add	r3, r8
     e62:	1e6a      	subs	r2, r5, #1
     e64:	4598      	cmp	r8, r3
     e66:	d900      	bls.n	e6a <__aeabi_ddiv+0x296>
     e68:	e11a      	b.n	10a0 <__aeabi_ddiv+0x4cc>
     e6a:	4599      	cmp	r9, r3
     e6c:	d800      	bhi.n	e70 <__aeabi_ddiv+0x29c>
     e6e:	e117      	b.n	10a0 <__aeabi_ddiv+0x4cc>
     e70:	3d02      	subs	r5, #2
     e72:	4443      	add	r3, r8
     e74:	464a      	mov	r2, r9
     e76:	1a9b      	subs	r3, r3, r2
     e78:	465a      	mov	r2, fp
     e7a:	0412      	lsls	r2, r2, #16
     e7c:	432a      	orrs	r2, r5
     e7e:	9903      	ldr	r1, [sp, #12]
     e80:	4693      	mov	fp, r2
     e82:	0c10      	lsrs	r0, r2, #16
     e84:	0c0a      	lsrs	r2, r1, #16
     e86:	4691      	mov	r9, r2
     e88:	0409      	lsls	r1, r1, #16
     e8a:	465a      	mov	r2, fp
     e8c:	0c09      	lsrs	r1, r1, #16
     e8e:	464e      	mov	r6, r9
     e90:	000d      	movs	r5, r1
     e92:	0412      	lsls	r2, r2, #16
     e94:	0c12      	lsrs	r2, r2, #16
     e96:	4345      	muls	r5, r0
     e98:	9105      	str	r1, [sp, #20]
     e9a:	4351      	muls	r1, r2
     e9c:	4372      	muls	r2, r6
     e9e:	4370      	muls	r0, r6
     ea0:	1952      	adds	r2, r2, r5
     ea2:	0c0e      	lsrs	r6, r1, #16
     ea4:	18b2      	adds	r2, r6, r2
     ea6:	4295      	cmp	r5, r2
     ea8:	d903      	bls.n	eb2 <__aeabi_ddiv+0x2de>
     eaa:	2580      	movs	r5, #128	; 0x80
     eac:	026d      	lsls	r5, r5, #9
     eae:	46ac      	mov	ip, r5
     eb0:	4460      	add	r0, ip
     eb2:	0c15      	lsrs	r5, r2, #16
     eb4:	0409      	lsls	r1, r1, #16
     eb6:	0412      	lsls	r2, r2, #16
     eb8:	0c09      	lsrs	r1, r1, #16
     eba:	1828      	adds	r0, r5, r0
     ebc:	1852      	adds	r2, r2, r1
     ebe:	4283      	cmp	r3, r0
     ec0:	d200      	bcs.n	ec4 <__aeabi_ddiv+0x2f0>
     ec2:	e0ce      	b.n	1062 <__aeabi_ddiv+0x48e>
     ec4:	d100      	bne.n	ec8 <__aeabi_ddiv+0x2f4>
     ec6:	e0c8      	b.n	105a <__aeabi_ddiv+0x486>
     ec8:	1a1d      	subs	r5, r3, r0
     eca:	4653      	mov	r3, sl
     ecc:	1a9e      	subs	r6, r3, r2
     ece:	45b2      	cmp	sl, r6
     ed0:	4192      	sbcs	r2, r2
     ed2:	4252      	negs	r2, r2
     ed4:	1aab      	subs	r3, r5, r2
     ed6:	469a      	mov	sl, r3
     ed8:	4598      	cmp	r8, r3
     eda:	d100      	bne.n	ede <__aeabi_ddiv+0x30a>
     edc:	e117      	b.n	110e <__aeabi_ddiv+0x53a>
     ede:	0039      	movs	r1, r7
     ee0:	0018      	movs	r0, r3
     ee2:	f7ff f971 	bl	1c8 <__aeabi_uidiv>
     ee6:	9b01      	ldr	r3, [sp, #4]
     ee8:	0005      	movs	r5, r0
     eea:	4343      	muls	r3, r0
     eec:	0039      	movs	r1, r7
     eee:	4650      	mov	r0, sl
     ef0:	9304      	str	r3, [sp, #16]
     ef2:	f7ff f9ad 	bl	250 <__aeabi_uidivmod>
     ef6:	9804      	ldr	r0, [sp, #16]
     ef8:	040b      	lsls	r3, r1, #16
     efa:	0c31      	lsrs	r1, r6, #16
     efc:	4319      	orrs	r1, r3
     efe:	4288      	cmp	r0, r1
     f00:	d909      	bls.n	f16 <__aeabi_ddiv+0x342>
     f02:	4441      	add	r1, r8
     f04:	1e6b      	subs	r3, r5, #1
     f06:	4588      	cmp	r8, r1
     f08:	d900      	bls.n	f0c <__aeabi_ddiv+0x338>
     f0a:	e107      	b.n	111c <__aeabi_ddiv+0x548>
     f0c:	4288      	cmp	r0, r1
     f0e:	d800      	bhi.n	f12 <__aeabi_ddiv+0x33e>
     f10:	e104      	b.n	111c <__aeabi_ddiv+0x548>
     f12:	3d02      	subs	r5, #2
     f14:	4441      	add	r1, r8
     f16:	9b04      	ldr	r3, [sp, #16]
     f18:	1acb      	subs	r3, r1, r3
     f1a:	0018      	movs	r0, r3
     f1c:	0039      	movs	r1, r7
     f1e:	9304      	str	r3, [sp, #16]
     f20:	f7ff f952 	bl	1c8 <__aeabi_uidiv>
     f24:	9b01      	ldr	r3, [sp, #4]
     f26:	4682      	mov	sl, r0
     f28:	4343      	muls	r3, r0
     f2a:	0039      	movs	r1, r7
     f2c:	9804      	ldr	r0, [sp, #16]
     f2e:	9301      	str	r3, [sp, #4]
     f30:	f7ff f98e 	bl	250 <__aeabi_uidivmod>
     f34:	9801      	ldr	r0, [sp, #4]
     f36:	040b      	lsls	r3, r1, #16
     f38:	0431      	lsls	r1, r6, #16
     f3a:	0c09      	lsrs	r1, r1, #16
     f3c:	4319      	orrs	r1, r3
     f3e:	4288      	cmp	r0, r1
     f40:	d90d      	bls.n	f5e <__aeabi_ddiv+0x38a>
     f42:	4653      	mov	r3, sl
     f44:	4441      	add	r1, r8
     f46:	3b01      	subs	r3, #1
     f48:	4588      	cmp	r8, r1
     f4a:	d900      	bls.n	f4e <__aeabi_ddiv+0x37a>
     f4c:	e0e8      	b.n	1120 <__aeabi_ddiv+0x54c>
     f4e:	4288      	cmp	r0, r1
     f50:	d800      	bhi.n	f54 <__aeabi_ddiv+0x380>
     f52:	e0e5      	b.n	1120 <__aeabi_ddiv+0x54c>
     f54:	2302      	movs	r3, #2
     f56:	425b      	negs	r3, r3
     f58:	469c      	mov	ip, r3
     f5a:	4441      	add	r1, r8
     f5c:	44e2      	add	sl, ip
     f5e:	9b01      	ldr	r3, [sp, #4]
     f60:	042d      	lsls	r5, r5, #16
     f62:	1ace      	subs	r6, r1, r3
     f64:	4651      	mov	r1, sl
     f66:	4329      	orrs	r1, r5
     f68:	9d05      	ldr	r5, [sp, #20]
     f6a:	464f      	mov	r7, r9
     f6c:	002a      	movs	r2, r5
     f6e:	040b      	lsls	r3, r1, #16
     f70:	0c08      	lsrs	r0, r1, #16
     f72:	0c1b      	lsrs	r3, r3, #16
     f74:	435a      	muls	r2, r3
     f76:	4345      	muls	r5, r0
     f78:	437b      	muls	r3, r7
     f7a:	4378      	muls	r0, r7
     f7c:	195b      	adds	r3, r3, r5
     f7e:	0c17      	lsrs	r7, r2, #16
     f80:	18fb      	adds	r3, r7, r3
     f82:	429d      	cmp	r5, r3
     f84:	d903      	bls.n	f8e <__aeabi_ddiv+0x3ba>
     f86:	2580      	movs	r5, #128	; 0x80
     f88:	026d      	lsls	r5, r5, #9
     f8a:	46ac      	mov	ip, r5
     f8c:	4460      	add	r0, ip
     f8e:	0c1d      	lsrs	r5, r3, #16
     f90:	0412      	lsls	r2, r2, #16
     f92:	041b      	lsls	r3, r3, #16
     f94:	0c12      	lsrs	r2, r2, #16
     f96:	1828      	adds	r0, r5, r0
     f98:	189b      	adds	r3, r3, r2
     f9a:	4286      	cmp	r6, r0
     f9c:	d200      	bcs.n	fa0 <__aeabi_ddiv+0x3cc>
     f9e:	e093      	b.n	10c8 <__aeabi_ddiv+0x4f4>
     fa0:	d100      	bne.n	fa4 <__aeabi_ddiv+0x3d0>
     fa2:	e08e      	b.n	10c2 <__aeabi_ddiv+0x4ee>
     fa4:	2301      	movs	r3, #1
     fa6:	4319      	orrs	r1, r3
     fa8:	4ba0      	ldr	r3, [pc, #640]	; (122c <__aeabi_ddiv+0x658>)
     faa:	18e3      	adds	r3, r4, r3
     fac:	2b00      	cmp	r3, #0
     fae:	dc00      	bgt.n	fb2 <__aeabi_ddiv+0x3de>
     fb0:	e099      	b.n	10e6 <__aeabi_ddiv+0x512>
     fb2:	074a      	lsls	r2, r1, #29
     fb4:	d000      	beq.n	fb8 <__aeabi_ddiv+0x3e4>
     fb6:	e09e      	b.n	10f6 <__aeabi_ddiv+0x522>
     fb8:	465a      	mov	r2, fp
     fba:	01d2      	lsls	r2, r2, #7
     fbc:	d506      	bpl.n	fcc <__aeabi_ddiv+0x3f8>
     fbe:	465a      	mov	r2, fp
     fc0:	4b9b      	ldr	r3, [pc, #620]	; (1230 <__aeabi_ddiv+0x65c>)
     fc2:	401a      	ands	r2, r3
     fc4:	2380      	movs	r3, #128	; 0x80
     fc6:	4693      	mov	fp, r2
     fc8:	00db      	lsls	r3, r3, #3
     fca:	18e3      	adds	r3, r4, r3
     fcc:	4a99      	ldr	r2, [pc, #612]	; (1234 <__aeabi_ddiv+0x660>)
     fce:	4293      	cmp	r3, r2
     fd0:	dd68      	ble.n	10a4 <__aeabi_ddiv+0x4d0>
     fd2:	2301      	movs	r3, #1
     fd4:	9a02      	ldr	r2, [sp, #8]
     fd6:	4c98      	ldr	r4, [pc, #608]	; (1238 <__aeabi_ddiv+0x664>)
     fd8:	401a      	ands	r2, r3
     fda:	2300      	movs	r3, #0
     fdc:	4694      	mov	ip, r2
     fde:	4698      	mov	r8, r3
     fe0:	2200      	movs	r2, #0
     fe2:	e6c5      	b.n	d70 <__aeabi_ddiv+0x19c>
     fe4:	2280      	movs	r2, #128	; 0x80
     fe6:	464b      	mov	r3, r9
     fe8:	0312      	lsls	r2, r2, #12
     fea:	4213      	tst	r3, r2
     fec:	d00a      	beq.n	1004 <__aeabi_ddiv+0x430>
     fee:	465b      	mov	r3, fp
     ff0:	4213      	tst	r3, r2
     ff2:	d106      	bne.n	1002 <__aeabi_ddiv+0x42e>
     ff4:	431a      	orrs	r2, r3
     ff6:	0312      	lsls	r2, r2, #12
     ff8:	0b12      	lsrs	r2, r2, #12
     ffa:	46ac      	mov	ip, r5
     ffc:	4688      	mov	r8, r1
     ffe:	4c8e      	ldr	r4, [pc, #568]	; (1238 <__aeabi_ddiv+0x664>)
    1000:	e6b6      	b.n	d70 <__aeabi_ddiv+0x19c>
    1002:	464b      	mov	r3, r9
    1004:	431a      	orrs	r2, r3
    1006:	0312      	lsls	r2, r2, #12
    1008:	0b12      	lsrs	r2, r2, #12
    100a:	46bc      	mov	ip, r7
    100c:	4c8a      	ldr	r4, [pc, #552]	; (1238 <__aeabi_ddiv+0x664>)
    100e:	e6af      	b.n	d70 <__aeabi_ddiv+0x19c>
    1010:	0003      	movs	r3, r0
    1012:	465a      	mov	r2, fp
    1014:	3b28      	subs	r3, #40	; 0x28
    1016:	409a      	lsls	r2, r3
    1018:	2300      	movs	r3, #0
    101a:	4691      	mov	r9, r2
    101c:	4698      	mov	r8, r3
    101e:	e657      	b.n	cd0 <__aeabi_ddiv+0xfc>
    1020:	4658      	mov	r0, fp
    1022:	f000 f94d 	bl	12c0 <__clzsi2>
    1026:	3020      	adds	r0, #32
    1028:	e640      	b.n	cac <__aeabi_ddiv+0xd8>
    102a:	0003      	movs	r3, r0
    102c:	4652      	mov	r2, sl
    102e:	3b28      	subs	r3, #40	; 0x28
    1030:	409a      	lsls	r2, r3
    1032:	2100      	movs	r1, #0
    1034:	4693      	mov	fp, r2
    1036:	e677      	b.n	d28 <__aeabi_ddiv+0x154>
    1038:	f000 f942 	bl	12c0 <__clzsi2>
    103c:	3020      	adds	r0, #32
    103e:	e65f      	b.n	d00 <__aeabi_ddiv+0x12c>
    1040:	4588      	cmp	r8, r1
    1042:	d200      	bcs.n	1046 <__aeabi_ddiv+0x472>
    1044:	e6c7      	b.n	dd6 <__aeabi_ddiv+0x202>
    1046:	464b      	mov	r3, r9
    1048:	07de      	lsls	r6, r3, #31
    104a:	085d      	lsrs	r5, r3, #1
    104c:	4643      	mov	r3, r8
    104e:	085b      	lsrs	r3, r3, #1
    1050:	431e      	orrs	r6, r3
    1052:	4643      	mov	r3, r8
    1054:	07db      	lsls	r3, r3, #31
    1056:	469a      	mov	sl, r3
    1058:	e6c2      	b.n	de0 <__aeabi_ddiv+0x20c>
    105a:	2500      	movs	r5, #0
    105c:	4592      	cmp	sl, r2
    105e:	d300      	bcc.n	1062 <__aeabi_ddiv+0x48e>
    1060:	e733      	b.n	eca <__aeabi_ddiv+0x2f6>
    1062:	9e03      	ldr	r6, [sp, #12]
    1064:	4659      	mov	r1, fp
    1066:	46b4      	mov	ip, r6
    1068:	44e2      	add	sl, ip
    106a:	45b2      	cmp	sl, r6
    106c:	41ad      	sbcs	r5, r5
    106e:	426d      	negs	r5, r5
    1070:	4445      	add	r5, r8
    1072:	18eb      	adds	r3, r5, r3
    1074:	3901      	subs	r1, #1
    1076:	4598      	cmp	r8, r3
    1078:	d207      	bcs.n	108a <__aeabi_ddiv+0x4b6>
    107a:	4298      	cmp	r0, r3
    107c:	d900      	bls.n	1080 <__aeabi_ddiv+0x4ac>
    107e:	e07f      	b.n	1180 <__aeabi_ddiv+0x5ac>
    1080:	d100      	bne.n	1084 <__aeabi_ddiv+0x4b0>
    1082:	e0bc      	b.n	11fe <__aeabi_ddiv+0x62a>
    1084:	1a1d      	subs	r5, r3, r0
    1086:	468b      	mov	fp, r1
    1088:	e71f      	b.n	eca <__aeabi_ddiv+0x2f6>
    108a:	4598      	cmp	r8, r3
    108c:	d1fa      	bne.n	1084 <__aeabi_ddiv+0x4b0>
    108e:	9d03      	ldr	r5, [sp, #12]
    1090:	4555      	cmp	r5, sl
    1092:	d9f2      	bls.n	107a <__aeabi_ddiv+0x4a6>
    1094:	4643      	mov	r3, r8
    1096:	468b      	mov	fp, r1
    1098:	1a1d      	subs	r5, r3, r0
    109a:	e716      	b.n	eca <__aeabi_ddiv+0x2f6>
    109c:	469b      	mov	fp, r3
    109e:	e6ca      	b.n	e36 <__aeabi_ddiv+0x262>
    10a0:	0015      	movs	r5, r2
    10a2:	e6e7      	b.n	e74 <__aeabi_ddiv+0x2a0>
    10a4:	465a      	mov	r2, fp
    10a6:	08c9      	lsrs	r1, r1, #3
    10a8:	0752      	lsls	r2, r2, #29
    10aa:	430a      	orrs	r2, r1
    10ac:	055b      	lsls	r3, r3, #21
    10ae:	4690      	mov	r8, r2
    10b0:	0d5c      	lsrs	r4, r3, #21
    10b2:	465a      	mov	r2, fp
    10b4:	2301      	movs	r3, #1
    10b6:	9902      	ldr	r1, [sp, #8]
    10b8:	0252      	lsls	r2, r2, #9
    10ba:	4019      	ands	r1, r3
    10bc:	0b12      	lsrs	r2, r2, #12
    10be:	468c      	mov	ip, r1
    10c0:	e656      	b.n	d70 <__aeabi_ddiv+0x19c>
    10c2:	2b00      	cmp	r3, #0
    10c4:	d100      	bne.n	10c8 <__aeabi_ddiv+0x4f4>
    10c6:	e76f      	b.n	fa8 <__aeabi_ddiv+0x3d4>
    10c8:	4446      	add	r6, r8
    10ca:	1e4a      	subs	r2, r1, #1
    10cc:	45b0      	cmp	r8, r6
    10ce:	d929      	bls.n	1124 <__aeabi_ddiv+0x550>
    10d0:	0011      	movs	r1, r2
    10d2:	4286      	cmp	r6, r0
    10d4:	d000      	beq.n	10d8 <__aeabi_ddiv+0x504>
    10d6:	e765      	b.n	fa4 <__aeabi_ddiv+0x3d0>
    10d8:	9a03      	ldr	r2, [sp, #12]
    10da:	4293      	cmp	r3, r2
    10dc:	d000      	beq.n	10e0 <__aeabi_ddiv+0x50c>
    10de:	e761      	b.n	fa4 <__aeabi_ddiv+0x3d0>
    10e0:	e762      	b.n	fa8 <__aeabi_ddiv+0x3d4>
    10e2:	2101      	movs	r1, #1
    10e4:	4249      	negs	r1, r1
    10e6:	2001      	movs	r0, #1
    10e8:	1ac2      	subs	r2, r0, r3
    10ea:	2a38      	cmp	r2, #56	; 0x38
    10ec:	dd21      	ble.n	1132 <__aeabi_ddiv+0x55e>
    10ee:	9b02      	ldr	r3, [sp, #8]
    10f0:	4003      	ands	r3, r0
    10f2:	469c      	mov	ip, r3
    10f4:	e638      	b.n	d68 <__aeabi_ddiv+0x194>
    10f6:	220f      	movs	r2, #15
    10f8:	400a      	ands	r2, r1
    10fa:	2a04      	cmp	r2, #4
    10fc:	d100      	bne.n	1100 <__aeabi_ddiv+0x52c>
    10fe:	e75b      	b.n	fb8 <__aeabi_ddiv+0x3e4>
    1100:	000a      	movs	r2, r1
    1102:	1d11      	adds	r1, r2, #4
    1104:	4291      	cmp	r1, r2
    1106:	4192      	sbcs	r2, r2
    1108:	4252      	negs	r2, r2
    110a:	4493      	add	fp, r2
    110c:	e754      	b.n	fb8 <__aeabi_ddiv+0x3e4>
    110e:	4b47      	ldr	r3, [pc, #284]	; (122c <__aeabi_ddiv+0x658>)
    1110:	18e3      	adds	r3, r4, r3
    1112:	2b00      	cmp	r3, #0
    1114:	dde5      	ble.n	10e2 <__aeabi_ddiv+0x50e>
    1116:	2201      	movs	r2, #1
    1118:	4252      	negs	r2, r2
    111a:	e7f2      	b.n	1102 <__aeabi_ddiv+0x52e>
    111c:	001d      	movs	r5, r3
    111e:	e6fa      	b.n	f16 <__aeabi_ddiv+0x342>
    1120:	469a      	mov	sl, r3
    1122:	e71c      	b.n	f5e <__aeabi_ddiv+0x38a>
    1124:	42b0      	cmp	r0, r6
    1126:	d839      	bhi.n	119c <__aeabi_ddiv+0x5c8>
    1128:	d06e      	beq.n	1208 <__aeabi_ddiv+0x634>
    112a:	0011      	movs	r1, r2
    112c:	e73a      	b.n	fa4 <__aeabi_ddiv+0x3d0>
    112e:	9302      	str	r3, [sp, #8]
    1130:	e73a      	b.n	fa8 <__aeabi_ddiv+0x3d4>
    1132:	2a1f      	cmp	r2, #31
    1134:	dc3c      	bgt.n	11b0 <__aeabi_ddiv+0x5dc>
    1136:	2320      	movs	r3, #32
    1138:	1a9b      	subs	r3, r3, r2
    113a:	000c      	movs	r4, r1
    113c:	4658      	mov	r0, fp
    113e:	4099      	lsls	r1, r3
    1140:	4098      	lsls	r0, r3
    1142:	1e4b      	subs	r3, r1, #1
    1144:	4199      	sbcs	r1, r3
    1146:	465b      	mov	r3, fp
    1148:	40d4      	lsrs	r4, r2
    114a:	40d3      	lsrs	r3, r2
    114c:	4320      	orrs	r0, r4
    114e:	4308      	orrs	r0, r1
    1150:	001a      	movs	r2, r3
    1152:	0743      	lsls	r3, r0, #29
    1154:	d009      	beq.n	116a <__aeabi_ddiv+0x596>
    1156:	230f      	movs	r3, #15
    1158:	4003      	ands	r3, r0
    115a:	2b04      	cmp	r3, #4
    115c:	d005      	beq.n	116a <__aeabi_ddiv+0x596>
    115e:	0001      	movs	r1, r0
    1160:	1d08      	adds	r0, r1, #4
    1162:	4288      	cmp	r0, r1
    1164:	419b      	sbcs	r3, r3
    1166:	425b      	negs	r3, r3
    1168:	18d2      	adds	r2, r2, r3
    116a:	0213      	lsls	r3, r2, #8
    116c:	d53a      	bpl.n	11e4 <__aeabi_ddiv+0x610>
    116e:	2301      	movs	r3, #1
    1170:	9a02      	ldr	r2, [sp, #8]
    1172:	2401      	movs	r4, #1
    1174:	401a      	ands	r2, r3
    1176:	2300      	movs	r3, #0
    1178:	4694      	mov	ip, r2
    117a:	4698      	mov	r8, r3
    117c:	2200      	movs	r2, #0
    117e:	e5f7      	b.n	d70 <__aeabi_ddiv+0x19c>
    1180:	2102      	movs	r1, #2
    1182:	4249      	negs	r1, r1
    1184:	468c      	mov	ip, r1
    1186:	9d03      	ldr	r5, [sp, #12]
    1188:	44e3      	add	fp, ip
    118a:	46ac      	mov	ip, r5
    118c:	44e2      	add	sl, ip
    118e:	45aa      	cmp	sl, r5
    1190:	41ad      	sbcs	r5, r5
    1192:	426d      	negs	r5, r5
    1194:	4445      	add	r5, r8
    1196:	18ed      	adds	r5, r5, r3
    1198:	1a2d      	subs	r5, r5, r0
    119a:	e696      	b.n	eca <__aeabi_ddiv+0x2f6>
    119c:	1e8a      	subs	r2, r1, #2
    119e:	9903      	ldr	r1, [sp, #12]
    11a0:	004d      	lsls	r5, r1, #1
    11a2:	428d      	cmp	r5, r1
    11a4:	4189      	sbcs	r1, r1
    11a6:	4249      	negs	r1, r1
    11a8:	4441      	add	r1, r8
    11aa:	1876      	adds	r6, r6, r1
    11ac:	9503      	str	r5, [sp, #12]
    11ae:	e78f      	b.n	10d0 <__aeabi_ddiv+0x4fc>
    11b0:	201f      	movs	r0, #31
    11b2:	4240      	negs	r0, r0
    11b4:	1ac3      	subs	r3, r0, r3
    11b6:	4658      	mov	r0, fp
    11b8:	40d8      	lsrs	r0, r3
    11ba:	0003      	movs	r3, r0
    11bc:	2a20      	cmp	r2, #32
    11be:	d028      	beq.n	1212 <__aeabi_ddiv+0x63e>
    11c0:	2040      	movs	r0, #64	; 0x40
    11c2:	465d      	mov	r5, fp
    11c4:	1a82      	subs	r2, r0, r2
    11c6:	4095      	lsls	r5, r2
    11c8:	4329      	orrs	r1, r5
    11ca:	1e4a      	subs	r2, r1, #1
    11cc:	4191      	sbcs	r1, r2
    11ce:	4319      	orrs	r1, r3
    11d0:	2307      	movs	r3, #7
    11d2:	2200      	movs	r2, #0
    11d4:	400b      	ands	r3, r1
    11d6:	d009      	beq.n	11ec <__aeabi_ddiv+0x618>
    11d8:	230f      	movs	r3, #15
    11da:	2200      	movs	r2, #0
    11dc:	400b      	ands	r3, r1
    11de:	0008      	movs	r0, r1
    11e0:	2b04      	cmp	r3, #4
    11e2:	d1bd      	bne.n	1160 <__aeabi_ddiv+0x58c>
    11e4:	0001      	movs	r1, r0
    11e6:	0753      	lsls	r3, r2, #29
    11e8:	0252      	lsls	r2, r2, #9
    11ea:	0b12      	lsrs	r2, r2, #12
    11ec:	08c9      	lsrs	r1, r1, #3
    11ee:	4319      	orrs	r1, r3
    11f0:	2301      	movs	r3, #1
    11f2:	4688      	mov	r8, r1
    11f4:	9902      	ldr	r1, [sp, #8]
    11f6:	2400      	movs	r4, #0
    11f8:	4019      	ands	r1, r3
    11fa:	468c      	mov	ip, r1
    11fc:	e5b8      	b.n	d70 <__aeabi_ddiv+0x19c>
    11fe:	4552      	cmp	r2, sl
    1200:	d8be      	bhi.n	1180 <__aeabi_ddiv+0x5ac>
    1202:	468b      	mov	fp, r1
    1204:	2500      	movs	r5, #0
    1206:	e660      	b.n	eca <__aeabi_ddiv+0x2f6>
    1208:	9d03      	ldr	r5, [sp, #12]
    120a:	429d      	cmp	r5, r3
    120c:	d3c6      	bcc.n	119c <__aeabi_ddiv+0x5c8>
    120e:	0011      	movs	r1, r2
    1210:	e762      	b.n	10d8 <__aeabi_ddiv+0x504>
    1212:	2500      	movs	r5, #0
    1214:	e7d8      	b.n	11c8 <__aeabi_ddiv+0x5f4>
    1216:	2280      	movs	r2, #128	; 0x80
    1218:	465b      	mov	r3, fp
    121a:	0312      	lsls	r2, r2, #12
    121c:	431a      	orrs	r2, r3
    121e:	9b01      	ldr	r3, [sp, #4]
    1220:	0312      	lsls	r2, r2, #12
    1222:	0b12      	lsrs	r2, r2, #12
    1224:	469c      	mov	ip, r3
    1226:	4688      	mov	r8, r1
    1228:	4c03      	ldr	r4, [pc, #12]	; (1238 <__aeabi_ddiv+0x664>)
    122a:	e5a1      	b.n	d70 <__aeabi_ddiv+0x19c>
    122c:	000003ff 	.word	0x000003ff
    1230:	feffffff 	.word	0xfeffffff
    1234:	000007fe 	.word	0x000007fe
    1238:	000007ff 	.word	0x000007ff

0000123c <__aeabi_i2d>:
    123c:	b570      	push	{r4, r5, r6, lr}
    123e:	2800      	cmp	r0, #0
    1240:	d030      	beq.n	12a4 <__aeabi_i2d+0x68>
    1242:	17c3      	asrs	r3, r0, #31
    1244:	18c4      	adds	r4, r0, r3
    1246:	405c      	eors	r4, r3
    1248:	0fc5      	lsrs	r5, r0, #31
    124a:	0020      	movs	r0, r4
    124c:	f000 f838 	bl	12c0 <__clzsi2>
    1250:	4b17      	ldr	r3, [pc, #92]	; (12b0 <__aeabi_i2d+0x74>)
    1252:	4a18      	ldr	r2, [pc, #96]	; (12b4 <__aeabi_i2d+0x78>)
    1254:	1a1b      	subs	r3, r3, r0
    1256:	1ad2      	subs	r2, r2, r3
    1258:	2a1f      	cmp	r2, #31
    125a:	dd18      	ble.n	128e <__aeabi_i2d+0x52>
    125c:	4a16      	ldr	r2, [pc, #88]	; (12b8 <__aeabi_i2d+0x7c>)
    125e:	1ad2      	subs	r2, r2, r3
    1260:	4094      	lsls	r4, r2
    1262:	2200      	movs	r2, #0
    1264:	0324      	lsls	r4, r4, #12
    1266:	055b      	lsls	r3, r3, #21
    1268:	0b24      	lsrs	r4, r4, #12
    126a:	0d5b      	lsrs	r3, r3, #21
    126c:	2100      	movs	r1, #0
    126e:	0010      	movs	r0, r2
    1270:	0324      	lsls	r4, r4, #12
    1272:	0d0a      	lsrs	r2, r1, #20
    1274:	0b24      	lsrs	r4, r4, #12
    1276:	0512      	lsls	r2, r2, #20
    1278:	4322      	orrs	r2, r4
    127a:	4c10      	ldr	r4, [pc, #64]	; (12bc <__aeabi_i2d+0x80>)
    127c:	051b      	lsls	r3, r3, #20
    127e:	4022      	ands	r2, r4
    1280:	4313      	orrs	r3, r2
    1282:	005b      	lsls	r3, r3, #1
    1284:	07ed      	lsls	r5, r5, #31
    1286:	085b      	lsrs	r3, r3, #1
    1288:	432b      	orrs	r3, r5
    128a:	0019      	movs	r1, r3
    128c:	bd70      	pop	{r4, r5, r6, pc}
    128e:	0021      	movs	r1, r4
    1290:	4091      	lsls	r1, r2
    1292:	000a      	movs	r2, r1
    1294:	210b      	movs	r1, #11
    1296:	1a08      	subs	r0, r1, r0
    1298:	40c4      	lsrs	r4, r0
    129a:	055b      	lsls	r3, r3, #21
    129c:	0324      	lsls	r4, r4, #12
    129e:	0b24      	lsrs	r4, r4, #12
    12a0:	0d5b      	lsrs	r3, r3, #21
    12a2:	e7e3      	b.n	126c <__aeabi_i2d+0x30>
    12a4:	2500      	movs	r5, #0
    12a6:	2300      	movs	r3, #0
    12a8:	2400      	movs	r4, #0
    12aa:	2200      	movs	r2, #0
    12ac:	e7de      	b.n	126c <__aeabi_i2d+0x30>
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	0000041e 	.word	0x0000041e
    12b4:	00000433 	.word	0x00000433
    12b8:	00000413 	.word	0x00000413
    12bc:	800fffff 	.word	0x800fffff

000012c0 <__clzsi2>:
    12c0:	211c      	movs	r1, #28
    12c2:	2301      	movs	r3, #1
    12c4:	041b      	lsls	r3, r3, #16
    12c6:	4298      	cmp	r0, r3
    12c8:	d301      	bcc.n	12ce <__clzsi2+0xe>
    12ca:	0c00      	lsrs	r0, r0, #16
    12cc:	3910      	subs	r1, #16
    12ce:	0a1b      	lsrs	r3, r3, #8
    12d0:	4298      	cmp	r0, r3
    12d2:	d301      	bcc.n	12d8 <__clzsi2+0x18>
    12d4:	0a00      	lsrs	r0, r0, #8
    12d6:	3908      	subs	r1, #8
    12d8:	091b      	lsrs	r3, r3, #4
    12da:	4298      	cmp	r0, r3
    12dc:	d301      	bcc.n	12e2 <__clzsi2+0x22>
    12de:	0900      	lsrs	r0, r0, #4
    12e0:	3904      	subs	r1, #4
    12e2:	a202      	add	r2, pc, #8	; (adr r2, 12ec <__clzsi2+0x2c>)
    12e4:	5c10      	ldrb	r0, [r2, r0]
    12e6:	1840      	adds	r0, r0, r1
    12e8:	4770      	bx	lr
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	02020304 	.word	0x02020304
    12f0:	01010101 	.word	0x01010101
	...

000012fc <__clzdi2>:
    12fc:	b510      	push	{r4, lr}
    12fe:	2900      	cmp	r1, #0
    1300:	d103      	bne.n	130a <__clzdi2+0xe>
    1302:	f7ff ffdd 	bl	12c0 <__clzsi2>
    1306:	3020      	adds	r0, #32
    1308:	e002      	b.n	1310 <__clzdi2+0x14>
    130a:	1c08      	adds	r0, r1, #0
    130c:	f7ff ffd8 	bl	12c0 <__clzsi2>
    1310:	bd10      	pop	{r4, pc}
    1312:	46c0      	nop			; (mov r8, r8)

00001314 <__ctzsi2>:
    1314:	4241      	negs	r1, r0
    1316:	4008      	ands	r0, r1
    1318:	211c      	movs	r1, #28
    131a:	2301      	movs	r3, #1
    131c:	041b      	lsls	r3, r3, #16
    131e:	4298      	cmp	r0, r3
    1320:	d301      	bcc.n	1326 <__ctzsi2+0x12>
    1322:	0c00      	lsrs	r0, r0, #16
    1324:	3910      	subs	r1, #16
    1326:	0a1b      	lsrs	r3, r3, #8
    1328:	4298      	cmp	r0, r3
    132a:	d301      	bcc.n	1330 <__ctzsi2+0x1c>
    132c:	0a00      	lsrs	r0, r0, #8
    132e:	3908      	subs	r1, #8
    1330:	091b      	lsrs	r3, r3, #4
    1332:	4298      	cmp	r0, r3
    1334:	d301      	bcc.n	133a <__ctzsi2+0x26>
    1336:	0900      	lsrs	r0, r0, #4
    1338:	3904      	subs	r1, #4
    133a:	a202      	add	r2, pc, #8	; (adr r2, 1344 <__ctzsi2+0x30>)
    133c:	5c10      	ldrb	r0, [r2, r0]
    133e:	1a40      	subs	r0, r0, r1
    1340:	4770      	bx	lr
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	1d1d1c1b 	.word	0x1d1d1c1b
    1348:	1e1e1e1e 	.word	0x1e1e1e1e
    134c:	1f1f1f1f 	.word	0x1f1f1f1f
    1350:	1f1f1f1f 	.word	0x1f1f1f1f

00001354 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    1354:	0003      	movs	r3, r0
    1356:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
    1358:	701a      	strb	r2, [r3, #0]
	while (*s != '\0') {
    135a:	2a00      	cmp	r2, #0
    135c:	d100      	bne.n	1360 <strcpy+0xc>
	}

	*d = '\0';

	return dest;
}
    135e:	4770      	bx	lr
		d++;
    1360:	3301      	adds	r3, #1
		s++;
    1362:	3101      	adds	r1, #1
    1364:	e7f7      	b.n	1356 <strcpy+0x2>

00001366 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    1366:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    1368:	7803      	ldrb	r3, [r0, #0]
    136a:	4299      	cmp	r1, r3
    136c:	d005      	beq.n	137a <strchr+0x14>
    136e:	2b00      	cmp	r3, #0
    1370:	d104      	bne.n	137c <strchr+0x16>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    1372:	424b      	negs	r3, r1
    1374:	4159      	adcs	r1, r3
    1376:	4249      	negs	r1, r1
    1378:	4008      	ands	r0, r1
}
    137a:	4770      	bx	lr
		s++;
    137c:	3001      	adds	r0, #1
    137e:	e7f3      	b.n	1368 <strchr+0x2>

00001380 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1380:	7803      	ldrb	r3, [r0, #0]
    1382:	780a      	ldrb	r2, [r1, #0]
    1384:	4293      	cmp	r3, r2
    1386:	d102      	bne.n	138e <strcmp+0xe>
    1388:	2b00      	cmp	r3, #0
    138a:	d102      	bne.n	1392 <strcmp+0x12>
    138c:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
    138e:	1a98      	subs	r0, r3, r2
}
    1390:	4770      	bx	lr
		s1++;
    1392:	3001      	adds	r0, #1
		s2++;
    1394:	3101      	adds	r1, #1
    1396:	e7f3      	b.n	1380 <strcmp>

00001398 <memcmp>:
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
    1398:	2300      	movs	r3, #0
{
    139a:	b510      	push	{r4, lr}
	if (!n)
    139c:	429a      	cmp	r2, r3
    139e:	d005      	beq.n	13ac <memcmp+0x14>

	while ((--n > 0) && (*c1 == *c2)) {
    13a0:	3a01      	subs	r2, #1
    13a2:	2a00      	cmp	r2, #0
    13a4:	d104      	bne.n	13b0 <memcmp+0x18>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    13a6:	7803      	ldrb	r3, [r0, #0]
    13a8:	7808      	ldrb	r0, [r1, #0]
    13aa:	1a1b      	subs	r3, r3, r0
}
    13ac:	0018      	movs	r0, r3
    13ae:	bd10      	pop	{r4, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    13b0:	7804      	ldrb	r4, [r0, #0]
    13b2:	780b      	ldrb	r3, [r1, #0]
    13b4:	429c      	cmp	r4, r3
    13b6:	d1f6      	bne.n	13a6 <memcmp+0xe>
		c1++;
    13b8:	3001      	adds	r0, #1
		c2++;
    13ba:	3101      	adds	r1, #1
    13bc:	e7f0      	b.n	13a0 <memcmp+0x8>

000013be <memmove>:
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    13be:	b510      	push	{r4, lr}
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    13c0:	1a43      	subs	r3, r0, r1
    13c2:	4293      	cmp	r3, r2
    13c4:	d306      	bcc.n	13d4 <memmove+0x16>
    13c6:	2300      	movs	r3, #0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    13c8:	429a      	cmp	r2, r3
    13ca:	d008      	beq.n	13de <memmove+0x20>
			*dest = *src;
    13cc:	5ccc      	ldrb	r4, [r1, r3]
    13ce:	54c4      	strb	r4, [r0, r3]
    13d0:	3301      	adds	r3, #1
    13d2:	e7f9      	b.n	13c8 <memmove+0xa>
			n--;
    13d4:	3a01      	subs	r2, #1
			dest[n] = src[n];
    13d6:	5c8b      	ldrb	r3, [r1, r2]
    13d8:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
    13da:	2a00      	cmp	r2, #0
    13dc:	d1fa      	bne.n	13d4 <memmove+0x16>
			n--;
		}
	}

	return d;
}
    13de:	bd10      	pop	{r4, pc}

000013e0 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    13e0:	0003      	movs	r3, r0
{
    13e2:	b530      	push	{r4, r5, lr}
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    13e4:	2503      	movs	r5, #3
    13e6:	404b      	eors	r3, r1
    13e8:	422b      	tst	r3, r5
    13ea:	d019      	beq.n	1420 <memcpy+0x40>
	unsigned char *d_byte = (unsigned char *)d;
    13ec:	0003      	movs	r3, r0
    13ee:	2400      	movs	r4, #0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    13f0:	42a2      	cmp	r2, r4
    13f2:	d11b      	bne.n	142c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    13f4:	bd30      	pop	{r4, r5, pc}
			if (n == 0) {
    13f6:	2a00      	cmp	r2, #0
    13f8:	d0fc      	beq.n	13f4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    13fa:	780c      	ldrb	r4, [r1, #0]
			n--;
    13fc:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    13fe:	701c      	strb	r4, [r3, #0]
    1400:	3101      	adds	r1, #1
    1402:	3301      	adds	r3, #1
		while (((unsigned int)d_byte) & 0x3) {
    1404:	001c      	movs	r4, r3
    1406:	402c      	ands	r4, r5
    1408:	d1f5      	bne.n	13f6 <memcpy+0x16>
		while (n >= sizeof(unsigned int)) {
    140a:	1b15      	subs	r5, r2, r4
    140c:	2d03      	cmp	r5, #3
    140e:	d809      	bhi.n	1424 <memcpy+0x44>
    1410:	2403      	movs	r4, #3
    1412:	0015      	movs	r5, r2
    1414:	43a5      	bics	r5, r4
    1416:	2403      	movs	r4, #3
    1418:	1949      	adds	r1, r1, r5
    141a:	195b      	adds	r3, r3, r5
    141c:	4022      	ands	r2, r4
    141e:	e7e6      	b.n	13ee <memcpy+0xe>
    1420:	0003      	movs	r3, r0
    1422:	e7ef      	b.n	1404 <memcpy+0x24>
			*(d_word++) = *(s_word++);
    1424:	590d      	ldr	r5, [r1, r4]
    1426:	511d      	str	r5, [r3, r4]
    1428:	3404      	adds	r4, #4
    142a:	e7ee      	b.n	140a <memcpy+0x2a>
		*(d_byte++) = *(s_byte++);
    142c:	5d0d      	ldrb	r5, [r1, r4]
    142e:	551d      	strb	r5, [r3, r4]
    1430:	3401      	adds	r4, #1
    1432:	e7dd      	b.n	13f0 <memcpy+0x10>

00001434 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	0005      	movs	r5, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
    1438:	2603      	movs	r6, #3
	unsigned char c_byte = (unsigned char)c;
    143a:	b2cb      	uxtb	r3, r1
    143c:	002c      	movs	r4, r5
	while (((unsigned int)d_byte) & 0x3) {
    143e:	4235      	tst	r5, r6
    1440:	d111      	bne.n	1466 <memset+0x32>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
    1442:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    1444:	020e      	lsls	r6, r1, #8
    1446:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
    1448:	040e      	lsls	r6, r1, #16
    144a:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
    144c:	0016      	movs	r6, r2
    144e:	2e03      	cmp	r6, #3
    1450:	d80f      	bhi.n	1472 <memset+0x3e>
    1452:	2103      	movs	r1, #3
    1454:	0015      	movs	r5, r2
    1456:	438d      	bics	r5, r1
    1458:	1961      	adds	r1, r4, r5
    145a:	2403      	movs	r4, #3
    145c:	4022      	ands	r2, r4
    145e:	188a      	adds	r2, r1, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1460:	4291      	cmp	r1, r2
    1462:	d109      	bne.n	1478 <memset+0x44>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1464:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1466:	2a00      	cmp	r2, #0
    1468:	d0fc      	beq.n	1464 <memset+0x30>
		*(d_byte++) = c_byte;
    146a:	702b      	strb	r3, [r5, #0]
		n--;
    146c:	3a01      	subs	r2, #1
    146e:	3501      	adds	r5, #1
    1470:	e7e4      	b.n	143c <memset+0x8>
		*(d_word++) = c_word;
    1472:	c502      	stmia	r5!, {r1}
		n -= sizeof(unsigned int);
    1474:	3e04      	subs	r6, #4
    1476:	e7ea      	b.n	144e <memset+0x1a>
		*(d_byte++) = c_byte;
    1478:	700b      	strb	r3, [r1, #0]
    147a:	3101      	adds	r1, #1
    147c:	e7f0      	b.n	1460 <memset+0x2c>

0000147e <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    147e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1480:	0004      	movs	r4, r0
    1482:	000d      	movs	r5, r1
    1484:	0006      	movs	r6, r0
    1486:	9200      	str	r2, [sp, #0]
    1488:	9301      	str	r3, [sp, #4]
	char *buf0 = buf;

	do {
		int d = n % base;
    148a:	0028      	movs	r0, r5
    148c:	9900      	ldr	r1, [sp, #0]
    148e:	f7fe fedf 	bl	250 <__aeabi_uidivmod>

		n /= base;
    1492:	0028      	movs	r0, r5
		int d = n % base;
    1494:	000f      	movs	r7, r1
		n /= base;
    1496:	9900      	ldr	r1, [sp, #0]
    1498:	f7fe fe96 	bl	1c8 <__aeabi_uidiv>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    149c:	b2fa      	uxtb	r2, r7
		n /= base;
    149e:	0005      	movs	r5, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    14a0:	2327      	movs	r3, #39	; 0x27
    14a2:	1c70      	adds	r0, r6, #1
    14a4:	2f09      	cmp	r7, #9
    14a6:	dc00      	bgt.n	14aa <_to_x+0x2c>
    14a8:	2300      	movs	r3, #0
    14aa:	3230      	adds	r2, #48	; 0x30
    14ac:	189b      	adds	r3, r3, r2
    14ae:	7033      	strb	r3, [r6, #0]
    14b0:	0006      	movs	r6, r0
	} while (n);
    14b2:	2d00      	cmp	r5, #0
    14b4:	d1e9      	bne.n	148a <_to_x+0xc>
		*end++ = '0';
    14b6:	2230      	movs	r2, #48	; 0x30
    14b8:	1b00      	subs	r0, r0, r4
	while (end - start < minlen) {
    14ba:	9901      	ldr	r1, [sp, #4]
    14bc:	1823      	adds	r3, r4, r0
    14be:	4281      	cmp	r1, r0
    14c0:	dc05      	bgt.n	14ce <_to_x+0x50>
	*end = 0;
    14c2:	2200      	movs	r2, #0
	for (end--; end > start; end--, start++) {
    14c4:	3b01      	subs	r3, #1
	*end = 0;
    14c6:	705a      	strb	r2, [r3, #1]
	for (end--; end > start; end--, start++) {
    14c8:	42a3      	cmp	r3, r4
    14ca:	d803      	bhi.n	14d4 <_to_x+0x56>
	return _reverse_and_pad(buf0, buf, minlen);
}
    14cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		*end++ = '0';
    14ce:	5422      	strb	r2, [r4, r0]
    14d0:	3001      	adds	r0, #1
    14d2:	e7f2      	b.n	14ba <_to_x+0x3c>
		char tmp = *end;
    14d4:	781a      	ldrb	r2, [r3, #0]
		*end = *start;
    14d6:	7821      	ldrb	r1, [r4, #0]
	for (end--; end > start; end--, start++) {
    14d8:	3b01      	subs	r3, #1
		*end = *start;
    14da:	7059      	strb	r1, [r3, #1]
		*start = tmp;
    14dc:	7022      	strb	r2, [r4, #0]
	for (end--; end > start; end--, start++) {
    14de:	3401      	adds	r4, #1
    14e0:	e7f2      	b.n	14c8 <_to_x+0x4a>

000014e2 <_rlrshift>:

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
    14e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	*v = (*v & 1) + (*v >> 1);
    14e4:	2401      	movs	r4, #1
    14e6:	6806      	ldr	r6, [r0, #0]
    14e8:	2300      	movs	r3, #0
    14ea:	4034      	ands	r4, r6
    14ec:	0022      	movs	r2, r4
    14ee:	6841      	ldr	r1, [r0, #4]
    14f0:	0874      	lsrs	r4, r6, #1
    14f2:	07cf      	lsls	r7, r1, #31
    14f4:	433c      	orrs	r4, r7
    14f6:	084d      	lsrs	r5, r1, #1
    14f8:	1912      	adds	r2, r2, r4
    14fa:	416b      	adcs	r3, r5
    14fc:	6002      	str	r2, [r0, #0]
    14fe:	6043      	str	r3, [r0, #4]
}
    1500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001504 <_ldiv5>:
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
    1504:	2300      	movs	r3, #0
    1506:	2202      	movs	r2, #2
{
    1508:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0, q;
    150a:	2400      	movs	r4, #0
{
    150c:	0005      	movs	r5, r0
	rem += 2;
    150e:	6841      	ldr	r1, [r0, #4]
    1510:	6800      	ldr	r0, [r0, #0]
    1512:	1880      	adds	r0, r0, r2
    1514:	4159      	adcs	r1, r3
	uint64_t rem = *v, quot = 0, q;
    1516:	2300      	movs	r3, #0
{
    1518:	b085      	sub	sp, #20
	uint64_t rem = *v, quot = 0, q;
    151a:	9302      	str	r3, [sp, #8]
    151c:	9403      	str	r4, [sp, #12]

	for (i = 0; i < 3; i++) {
    151e:	2400      	movs	r4, #0
	rem += 2;
    1520:	9000      	str	r0, [sp, #0]
    1522:	9101      	str	r1, [sp, #4]
		hi = rem >> shifts[i];
    1524:	9800      	ldr	r0, [sp, #0]
    1526:	9901      	ldr	r1, [sp, #4]
    1528:	4b13      	ldr	r3, [pc, #76]	; (1578 <_ldiv5+0x74>)
    152a:	5ce6      	ldrb	r6, [r4, r3]
	for (i = 0; i < 3; i++) {
    152c:	3401      	adds	r4, #1
		hi = rem >> shifts[i];
    152e:	0032      	movs	r2, r6
    1530:	f7fe fefa 	bl	328 <__aeabi_llsr>
		q = (uint64_t)(hi / 5) << shifts[i];
    1534:	2105      	movs	r1, #5
    1536:	f7fe fe47 	bl	1c8 <__aeabi_uidiv>
    153a:	0032      	movs	r2, r6
    153c:	2100      	movs	r1, #0
    153e:	f7fe feff 	bl	340 <__aeabi_llsl>
		rem -= q * 5;
    1542:	2205      	movs	r2, #5
    1544:	2300      	movs	r3, #0
		q = (uint64_t)(hi / 5) << shifts[i];
    1546:	0006      	movs	r6, r0
    1548:	000f      	movs	r7, r1
		rem -= q * 5;
    154a:	f7fe ff25 	bl	398 <__aeabi_lmul>
    154e:	9a00      	ldr	r2, [sp, #0]
    1550:	9b01      	ldr	r3, [sp, #4]
    1552:	1a12      	subs	r2, r2, r0
    1554:	418b      	sbcs	r3, r1
    1556:	9200      	str	r2, [sp, #0]
    1558:	9301      	str	r3, [sp, #4]
		quot += q;
    155a:	9a02      	ldr	r2, [sp, #8]
    155c:	9b03      	ldr	r3, [sp, #12]
    155e:	1992      	adds	r2, r2, r6
    1560:	417b      	adcs	r3, r7
    1562:	9202      	str	r2, [sp, #8]
    1564:	9303      	str	r3, [sp, #12]
	for (i = 0; i < 3; i++) {
    1566:	2c03      	cmp	r4, #3
    1568:	d1dc      	bne.n	1524 <_ldiv5+0x20>
	}

	*v = quot;
    156a:	001c      	movs	r4, r3
    156c:	0013      	movs	r3, r2
    156e:	602b      	str	r3, [r5, #0]
    1570:	606c      	str	r4, [r5, #4]
}
    1572:	b005      	add	sp, #20
    1574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	0000c44b 	.word	0x0000c44b

0000157c <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    157c:	680a      	ldr	r2, [r1, #0]
{
    157e:	b510      	push	{r4, lr}
		*digit_count -= 1;
		*fr = *fr * 10;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else
		rval = '0';
    1580:	2330      	movs	r3, #48	; 0x30
{
    1582:	0004      	movs	r4, r0
	if (*digit_count > 0) {
    1584:	2a00      	cmp	r2, #0
    1586:	dd0d      	ble.n	15a4 <_get_digit+0x28>
		*digit_count -= 1;
    1588:	3a01      	subs	r2, #1
    158a:	600a      	str	r2, [r1, #0]
		*fr = *fr * 10;
    158c:	2300      	movs	r3, #0
    158e:	6841      	ldr	r1, [r0, #4]
    1590:	6800      	ldr	r0, [r0, #0]
    1592:	220a      	movs	r2, #10
    1594:	f7fe ff00 	bl	398 <__aeabi_lmul>
		rval = ((*fr >> 60) & 0xF) + '0';
    1598:	0f0b      	lsrs	r3, r1, #28
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    159a:	0109      	lsls	r1, r1, #4
    159c:	0909      	lsrs	r1, r1, #4
		rval = ((*fr >> 60) & 0xF) + '0';
    159e:	3330      	adds	r3, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    15a0:	6020      	str	r0, [r4, #0]
    15a2:	6061      	str	r1, [r4, #4]
	return (char) (rval);
    15a4:	b2d8      	uxtb	r0, r3
}
    15a6:	bd10      	pop	{r4, pc}

000015a8 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15aa:	001d      	movs	r5, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    15ac:	2300      	movs	r3, #0
{
    15ae:	b0c9      	sub	sp, #292	; 0x124
    15b0:	900c      	str	r0, [sp, #48]	; 0x30
    15b2:	910d      	str	r1, [sp, #52]	; 0x34
	count = 0;
    15b4:	9306      	str	r3, [sp, #24]

	while ((c = *format++)) {
    15b6:	7810      	ldrb	r0, [r2, #0]
    15b8:	1c53      	adds	r3, r2, #1
    15ba:	9303      	str	r3, [sp, #12]
    15bc:	2800      	cmp	r0, #0
    15be:	d031      	beq.n	1624 <_prf+0x7c>
		if (c != '%') {
    15c0:	2825      	cmp	r0, #37	; 0x25
    15c2:	d127      	bne.n	1614 <_prf+0x6c>
    15c4:	2320      	movs	r3, #32
    15c6:	9307      	str	r3, [sp, #28]
    15c8:	2300      	movs	r3, #0
    15ca:	001f      	movs	r7, r3
    15cc:	9309      	str	r3, [sp, #36]	; 0x24
    15ce:	9308      	str	r3, [sp, #32]
    15d0:	930a      	str	r3, [sp, #40]	; 0x28
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
    15d2:	9e03      	ldr	r6, [sp, #12]
    15d4:	9b03      	ldr	r3, [sp, #12]
    15d6:	7834      	ldrb	r4, [r6, #0]
    15d8:	3301      	adds	r3, #1
    15da:	0021      	movs	r1, r4
    15dc:	48b4      	ldr	r0, [pc, #720]	; (18b0 <_prf+0x308>)
    15de:	9303      	str	r3, [sp, #12]
    15e0:	f7ff fec1 	bl	1366 <strchr>
    15e4:	2800      	cmp	r0, #0
    15e6:	d127      	bne.n	1638 <_prf+0x90>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
    15e8:	2c2a      	cmp	r4, #42	; 0x2a
    15ea:	d140      	bne.n	166e <_prf+0xc6>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
    15ec:	682a      	ldr	r2, [r5, #0]
    15ee:	1d2b      	adds	r3, r5, #4
    15f0:	9204      	str	r2, [sp, #16]
				if (width < 0) {
    15f2:	2a00      	cmp	r2, #0
    15f4:	da03      	bge.n	15fe <_prf+0x56>
					fminus = true;
					width = -width;
    15f6:	4252      	negs	r2, r2
    15f8:	9204      	str	r2, [sp, #16]
					fminus = true;
    15fa:	2201      	movs	r2, #1
    15fc:	920a      	str	r2, [sp, #40]	; 0x28
				}
				c = *format++;
    15fe:	9a03      	ldr	r2, [sp, #12]
				width = (int32_t) va_arg(vargs, int32_t);
    1600:	001d      	movs	r5, r3
				c = *format++;
    1602:	7814      	ldrb	r4, [r2, #0]
    1604:	1cb3      	adds	r3, r6, #2
    1606:	9303      	str	r3, [sp, #12]
			 * If <width> is INT_MIN, then its absolute value can
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
    1608:	9b04      	ldr	r3, [sp, #16]
    160a:	2bc8      	cmp	r3, #200	; 0xc8
    160c:	d935      	bls.n	167a <_prf+0xd2>
				width = MAXFLD;
    160e:	23c8      	movs	r3, #200	; 0xc8
    1610:	9304      	str	r3, [sp, #16]
    1612:	e032      	b.n	167a <_prf+0xd2>
			if ((*func) (c, dest) == EOF) {
    1614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1616:	990d      	ldr	r1, [sp, #52]	; 0x34
    1618:	4798      	blx	r3
    161a:	1c43      	adds	r3, r0, #1
    161c:	d105      	bne.n	162a <_prf+0x82>
				return EOF;
    161e:	2301      	movs	r3, #1
    1620:	425b      	negs	r3, r3
    1622:	9306      	str	r3, [sp, #24]
				}
			}
		}
	}
	return count;
}
    1624:	9806      	ldr	r0, [sp, #24]
    1626:	b049      	add	sp, #292	; 0x124
    1628:	bdf0      	pop	{r4, r5, r6, r7, pc}
			count++;
    162a:	9c06      	ldr	r4, [sp, #24]
    162c:	9505      	str	r5, [sp, #20]
    162e:	3401      	adds	r4, #1
			if (c >= MAXFLD + 1)
    1630:	9d05      	ldr	r5, [sp, #20]
    1632:	9a03      	ldr	r2, [sp, #12]
    1634:	9406      	str	r4, [sp, #24]
    1636:	e7be      	b.n	15b6 <_prf+0xe>
				switch (c) {
    1638:	2c23      	cmp	r4, #35	; 0x23
    163a:	d013      	beq.n	1664 <_prf+0xbc>
    163c:	d806      	bhi.n	164c <_prf+0xa4>
    163e:	2c00      	cmp	r4, #0
    1640:	d0f0      	beq.n	1624 <_prf+0x7c>
    1642:	2c20      	cmp	r4, #32
    1644:	d1c5      	bne.n	15d2 <_prf+0x2a>
					fspace = true;
    1646:	2301      	movs	r3, #1
    1648:	9309      	str	r3, [sp, #36]	; 0x24
					break;
    164a:	e7c2      	b.n	15d2 <_prf+0x2a>
				switch (c) {
    164c:	2c2d      	cmp	r4, #45	; 0x2d
    164e:	d006      	beq.n	165e <_prf+0xb6>
    1650:	2c30      	cmp	r4, #48	; 0x30
    1652:	d009      	beq.n	1668 <_prf+0xc0>
    1654:	2c2b      	cmp	r4, #43	; 0x2b
    1656:	d1bc      	bne.n	15d2 <_prf+0x2a>
					fplus = true;
    1658:	2301      	movs	r3, #1
    165a:	9308      	str	r3, [sp, #32]
					break;
    165c:	e7b9      	b.n	15d2 <_prf+0x2a>
					fminus = true;
    165e:	2301      	movs	r3, #1
    1660:	930a      	str	r3, [sp, #40]	; 0x28
    1662:	e7b6      	b.n	15d2 <_prf+0x2a>
					falt = true;
    1664:	2701      	movs	r7, #1
					break;
    1666:	e7b4      	b.n	15d2 <_prf+0x2a>
					pad = '0';
    1668:	2330      	movs	r3, #48	; 0x30
    166a:	9307      	str	r3, [sp, #28]
					break;
    166c:	e7b1      	b.n	15d2 <_prf+0x2a>
			} else if (!isdigit(c))
    166e:	0023      	movs	r3, r4
    1670:	3b30      	subs	r3, #48	; 0x30
				width = 0;
    1672:	9004      	str	r0, [sp, #16]
		i = 10 * i + *p++ - '0';
    1674:	220a      	movs	r2, #10
			} else if (!isdigit(c))
    1676:	2b09      	cmp	r3, #9
    1678:	d91a      	bls.n	16b0 <_prf+0x108>
			if (c == '.') {
    167a:	2c2e      	cmp	r4, #46	; 0x2e
    167c:	d14e      	bne.n	171c <_prf+0x174>
				if (c == '*') {
    167e:	9b03      	ldr	r3, [sp, #12]
    1680:	781b      	ldrb	r3, [r3, #0]
    1682:	2b2a      	cmp	r3, #42	; 0x2a
    1684:	d01c      	beq.n	16c0 <_prf+0x118>
    1686:	2300      	movs	r3, #0
		i = 10 * i + *p++ - '0';
    1688:	200a      	movs	r0, #10
    168a:	9301      	str	r3, [sp, #4]
				if (c == '*') {
    168c:	9b03      	ldr	r3, [sp, #12]
	while (isdigit(((int) *p)))
    168e:	7819      	ldrb	r1, [r3, #0]
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    1690:	000a      	movs	r2, r1
    1692:	3a30      	subs	r2, #48	; 0x30
    1694:	2a09      	cmp	r2, #9
    1696:	d818      	bhi.n	16ca <_prf+0x122>
		i = 10 * i + *p++ - '0';
    1698:	9a01      	ldr	r2, [sp, #4]
    169a:	3301      	adds	r3, #1
    169c:	4342      	muls	r2, r0
    169e:	1852      	adds	r2, r2, r1
    16a0:	3a30      	subs	r2, #48	; 0x30
    16a2:	9201      	str	r2, [sp, #4]
    16a4:	e7f3      	b.n	168e <_prf+0xe6>
    16a6:	9804      	ldr	r0, [sp, #16]
    16a8:	4350      	muls	r0, r2
    16aa:	1904      	adds	r4, r0, r4
    16ac:	3c30      	subs	r4, #48	; 0x30
    16ae:	9404      	str	r4, [sp, #16]
	while (isdigit(((int) *p)))
    16b0:	7834      	ldrb	r4, [r6, #0]
    16b2:	3601      	adds	r6, #1
    16b4:	0023      	movs	r3, r4
    16b6:	3b30      	subs	r3, #48	; 0x30
    16b8:	2b09      	cmp	r3, #9
    16ba:	d9f4      	bls.n	16a6 <_prf+0xfe>
				c = *format++;
    16bc:	9603      	str	r6, [sp, #12]
    16be:	e7a3      	b.n	1608 <_prf+0x60>
					precision = (int32_t)
    16c0:	682a      	ldr	r2, [r5, #0]
				c = *format++;
    16c2:	9b03      	ldr	r3, [sp, #12]
					precision = (int32_t)
    16c4:	9201      	str	r2, [sp, #4]
				c = *format++;
    16c6:	3301      	adds	r3, #1
					precision = (int32_t)
    16c8:	3504      	adds	r5, #4
				if (precision > MAXFLD)
    16ca:	9a01      	ldr	r2, [sp, #4]
    16cc:	2ac8      	cmp	r2, #200	; 0xc8
    16ce:	dd02      	ble.n	16d6 <_prf+0x12e>
					precision = -1;
    16d0:	2201      	movs	r2, #1
    16d2:	4252      	negs	r2, r2
    16d4:	9201      	str	r2, [sp, #4]
				c = *format++;
    16d6:	1c5a      	adds	r2, r3, #1
    16d8:	781c      	ldrb	r4, [r3, #0]
    16da:	9203      	str	r2, [sp, #12]
			if (strchr("hlLz", c) != NULL) {
    16dc:	0021      	movs	r1, r4
    16de:	4875      	ldr	r0, [pc, #468]	; (18b4 <_prf+0x30c>)
    16e0:	f7ff fe41 	bl	1366 <strchr>
    16e4:	2800      	cmp	r0, #0
    16e6:	d003      	beq.n	16f0 <_prf+0x148>
				c = *format++;
    16e8:	9b03      	ldr	r3, [sp, #12]
    16ea:	781c      	ldrb	r4, [r3, #0]
    16ec:	3301      	adds	r3, #1
    16ee:	9303      	str	r3, [sp, #12]
			switch (c) {
    16f0:	2c67      	cmp	r4, #103	; 0x67
    16f2:	dc3d      	bgt.n	1770 <_prf+0x1c8>
    16f4:	2c65      	cmp	r4, #101	; 0x65
    16f6:	db00      	blt.n	16fa <_prf+0x152>
    16f8:	e0a2      	b.n	1840 <_prf+0x298>
    16fa:	2c47      	cmp	r4, #71	; 0x47
    16fc:	d100      	bne.n	1700 <_prf+0x158>
    16fe:	e09f      	b.n	1840 <_prf+0x298>
    1700:	dc10      	bgt.n	1724 <_prf+0x17c>
    1702:	2c25      	cmp	r4, #37	; 0x25
    1704:	d100      	bne.n	1708 <_prf+0x160>
    1706:	e294      	b.n	1c32 <_prf+0x68a>
    1708:	2c45      	cmp	r4, #69	; 0x45
    170a:	d100      	bne.n	170e <_prf+0x166>
    170c:	e098      	b.n	1840 <_prf+0x298>
    170e:	2c00      	cmp	r4, #0
    1710:	d100      	bne.n	1714 <_prf+0x16c>
    1712:	e787      	b.n	1624 <_prf+0x7c>
			if (c >= MAXFLD + 1)
    1714:	2cc8      	cmp	r4, #200	; 0xc8
    1716:	dc00      	bgt.n	171a <_prf+0x172>
    1718:	e295      	b.n	1c46 <_prf+0x69e>
    171a:	e780      	b.n	161e <_prf+0x76>
			precision = -1;	/* No precision specified   */
    171c:	2301      	movs	r3, #1
    171e:	425b      	negs	r3, r3
    1720:	9301      	str	r3, [sp, #4]
    1722:	e7db      	b.n	16dc <_prf+0x134>
			switch (c) {
    1724:	2c63      	cmp	r4, #99	; 0x63
    1726:	d05c      	beq.n	17e2 <_prf+0x23a>
    1728:	dc2d      	bgt.n	1786 <_prf+0x1de>
    172a:	2c58      	cmp	r4, #88	; 0x58
    172c:	d1f2      	bne.n	1714 <_prf+0x16c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    172e:	1d2b      	adds	r3, r5, #4
    1730:	6829      	ldr	r1, [r5, #0]
    1732:	9305      	str	r3, [sp, #20]
    1734:	ad15      	add	r5, sp, #84	; 0x54
	if (alt_form) {
    1736:	2f00      	cmp	r7, #0
    1738:	d006      	beq.n	1748 <_prf+0x1a0>
		*buf++ = '0';
    173a:	2330      	movs	r3, #48	; 0x30
    173c:	702b      	strb	r3, [r5, #0]
		*buf++ = 'x';
    173e:	3348      	adds	r3, #72	; 0x48
    1740:	706b      	strb	r3, [r5, #1]
    1742:	251e      	movs	r5, #30
    1744:	ab0e      	add	r3, sp, #56	; 0x38
    1746:	18ed      	adds	r5, r5, r3
	len = _to_x(buf, value, 16, precision);
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	2210      	movs	r2, #16
    174c:	0028      	movs	r0, r5
    174e:	f7ff fe96 	bl	147e <_to_x>
	if (prefix == 'X') {
    1752:	2c58      	cmp	r4, #88	; 0x58
    1754:	d105      	bne.n	1762 <_prf+0x1ba>
    1756:	2100      	movs	r1, #0
	for (/**/; *buf; buf++) {
    1758:	aa15      	add	r2, sp, #84	; 0x54
    175a:	5c8b      	ldrb	r3, [r1, r2]
    175c:	2b00      	cmp	r3, #0
    175e:	d000      	beq.n	1762 <_prf+0x1ba>
    1760:	e25f      	b.n	1c22 <_prf+0x67a>
					prefix = 2;
    1762:	1e7a      	subs	r2, r7, #1
    1764:	4197      	sbcs	r7, r2
	return len + (buf - buf0);
    1766:	ab15      	add	r3, sp, #84	; 0x54
    1768:	1aed      	subs	r5, r5, r3
    176a:	1828      	adds	r0, r5, r0
					prefix = 2;
    176c:	007c      	lsls	r4, r7, #1
    176e:	e05b      	b.n	1828 <_prf+0x280>
			switch (c) {
    1770:	2c70      	cmp	r4, #112	; 0x70
    1772:	d100      	bne.n	1776 <_prf+0x1ce>
    1774:	e227      	b.n	1bc6 <_prf+0x61e>
    1776:	dc19      	bgt.n	17ac <_prf+0x204>
    1778:	2c6e      	cmp	r4, #110	; 0x6e
    177a:	d100      	bne.n	177e <_prf+0x1d6>
    177c:	e1ea      	b.n	1b54 <_prf+0x5ac>
    177e:	dd00      	ble.n	1782 <_prf+0x1da>
    1780:	e1ef      	b.n	1b62 <_prf+0x5ba>
    1782:	2c69      	cmp	r4, #105	; 0x69
    1784:	d1c6      	bne.n	1714 <_prf+0x16c>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    1786:	682e      	ldr	r6, [r5, #0]
    1788:	1d2b      	adds	r3, r5, #4
    178a:	9305      	str	r3, [sp, #20]
    178c:	ad15      	add	r5, sp, #84	; 0x54
	if (value < 0) {
    178e:	2e00      	cmp	r6, #0
    1790:	da31      	bge.n	17f6 <_prf+0x24e>
		*buf++ = '-';
    1792:	232d      	movs	r3, #45	; 0x2d
    1794:	702b      	strb	r3, [r5, #0]
		if (value != 0x80000000)
    1796:	2380      	movs	r3, #128	; 0x80
			value = -value;
    1798:	4271      	negs	r1, r6
		if (value != 0x80000000)
    179a:	061b      	lsls	r3, r3, #24
    179c:	429e      	cmp	r6, r3
    179e:	d100      	bne.n	17a2 <_prf+0x1fa>
    17a0:	0031      	movs	r1, r6
		*buf++ = '-';
    17a2:	231d      	movs	r3, #29
    17a4:	aa0e      	add	r2, sp, #56	; 0x38
    17a6:	189b      	adds	r3, r3, r2
    17a8:	001d      	movs	r5, r3
    17aa:	e02d      	b.n	1808 <_prf+0x260>
			switch (c) {
    17ac:	2c75      	cmp	r4, #117	; 0x75
    17ae:	d100      	bne.n	17b2 <_prf+0x20a>
    17b0:	e22e      	b.n	1c10 <_prf+0x668>
    17b2:	2c78      	cmp	r4, #120	; 0x78
    17b4:	d0bb      	beq.n	172e <_prf+0x186>
    17b6:	2c73      	cmp	r4, #115	; 0x73
    17b8:	d1ac      	bne.n	1714 <_prf+0x16c>
				for (c = 0; c < MAXFLD; c++) {
    17ba:	2700      	movs	r7, #0
				cptr_temp = (char *) va_arg(vargs, char *);
    17bc:	1d2b      	adds	r3, r5, #4
    17be:	6829      	ldr	r1, [r5, #0]
    17c0:	9305      	str	r3, [sp, #20]
					if (cptr_temp[c] == '\0') {
    17c2:	5dcb      	ldrb	r3, [r1, r7]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d000      	beq.n	17ca <_prf+0x222>
    17c8:	e214      	b.n	1bf4 <_prf+0x64c>
				if ((precision >= 0) && (precision < c))
    17ca:	9b01      	ldr	r3, [sp, #4]
    17cc:	2b00      	cmp	r3, #0
    17ce:	db00      	blt.n	17d2 <_prf+0x22a>
    17d0:	e218      	b.n	1c04 <_prf+0x65c>
				if (c > 0) {
    17d2:	2f00      	cmp	r7, #0
    17d4:	d100      	bne.n	17d8 <_prf+0x230>
    17d6:	e1c2      	b.n	1b5e <_prf+0x5b6>
					memcpy(buf, cptr_temp, (size_t) c);
    17d8:	003a      	movs	r2, r7
    17da:	a815      	add	r0, sp, #84	; 0x54
    17dc:	f7ff fe00 	bl	13e0 <memcpy>
    17e0:	e007      	b.n	17f2 <_prf+0x24a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    17e2:	1d2b      	adds	r3, r5, #4
    17e4:	682a      	ldr	r2, [r5, #0]
    17e6:	9305      	str	r3, [sp, #20]
    17e8:	ab15      	add	r3, sp, #84	; 0x54
    17ea:	701a      	strb	r2, [r3, #0]
				buf[1] = '\0';
    17ec:	2200      	movs	r2, #0
				c = 1;
    17ee:	2701      	movs	r7, #1
				buf[1] = '\0';
    17f0:	705a      	strb	r2, [r3, #1]
					prefix = 2;
    17f2:	2400      	movs	r4, #0
    17f4:	e1c7      	b.n	1b86 <_prf+0x5de>
	} else if (fplus)
    17f6:	9b08      	ldr	r3, [sp, #32]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d01b      	beq.n	1834 <_prf+0x28c>
		*buf++ = '+';
    17fc:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    17fe:	702b      	strb	r3, [r5, #0]
    1800:	251d      	movs	r5, #29
    1802:	0031      	movs	r1, r6
    1804:	ab0e      	add	r3, sp, #56	; 0x38
    1806:	18ed      	adds	r5, r5, r3
	return _to_x(buf, value, 10, precision);
    1808:	9b01      	ldr	r3, [sp, #4]
    180a:	0028      	movs	r0, r5
    180c:	220a      	movs	r2, #10
    180e:	f7ff fe36 	bl	147e <_to_x>
				if (fplus || fspace || (int32_temp < 0))
    1812:	9c08      	ldr	r4, [sp, #32]
    1814:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    1816:	182d      	adds	r5, r5, r0
    1818:	a815      	add	r0, sp, #84	; 0x54
    181a:	1a28      	subs	r0, r5, r0
				if (fplus || fspace || (int32_temp < 0))
    181c:	431c      	orrs	r4, r3
    181e:	2101      	movs	r1, #1
    1820:	2c00      	cmp	r4, #0
    1822:	d100      	bne.n	1826 <_prf+0x27e>
    1824:	0ff1      	lsrs	r1, r6, #31
    1826:	000c      	movs	r4, r1
				if (precision != -1)
    1828:	9b01      	ldr	r3, [sp, #4]
    182a:	3301      	adds	r3, #1
    182c:	d03a      	beq.n	18a4 <_prf+0x2fc>
					pad = ' ';
    182e:	2320      	movs	r3, #32
    1830:	9307      	str	r3, [sp, #28]
    1832:	e037      	b.n	18a4 <_prf+0x2fc>
	else if (fspace)
    1834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1836:	0031      	movs	r1, r6
    1838:	2b00      	cmp	r3, #0
    183a:	d0e5      	beq.n	1808 <_prf+0x260>
		*buf++ = ' ';
    183c:	2320      	movs	r3, #32
    183e:	e7de      	b.n	17fe <_prf+0x256>
				u.d = (double) va_arg(vargs, double);
    1840:	2307      	movs	r3, #7
    1842:	3507      	adds	r5, #7
    1844:	439d      	bics	r5, r3
    1846:	002b      	movs	r3, r5
				double_temp = u.i;
    1848:	6869      	ldr	r1, [r5, #4]
    184a:	682a      	ldr	r2, [r5, #0]
				u.d = (double) va_arg(vargs, double);
    184c:	3308      	adds	r3, #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    184e:	0d55      	lsrs	r5, r2, #21
				u.d = (double) va_arg(vargs, double);
    1850:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    1852:	02cb      	lsls	r3, r1, #11
    1854:	432b      	orrs	r3, r5
    1856:	005b      	lsls	r3, r3, #1
	if (exp == 0x7ff) {
    1858:	4d17      	ldr	r5, [pc, #92]	; (18b8 <_prf+0x310>)
	exp = double_temp >> 52 & 0x7ff;
    185a:	0048      	lsls	r0, r1, #1
	fract = (double_temp << 11) & ~HIGHBIT64;
    185c:	02d2      	lsls	r2, r2, #11
    185e:	085b      	lsrs	r3, r3, #1
	exp = double_temp >> 52 & 0x7ff;
    1860:	0d40      	lsrs	r0, r0, #21
	fract = (double_temp << 11) & ~HIGHBIT64;
    1862:	9210      	str	r2, [sp, #64]	; 0x40
    1864:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp == 0x7ff) {
    1866:	42a8      	cmp	r0, r5
    1868:	d131      	bne.n	18ce <_prf+0x326>
		if (!fract) {
    186a:	4313      	orrs	r3, r2
    186c:	aa15      	add	r2, sp, #84	; 0x54
    186e:	2b00      	cmp	r3, #0
    1870:	d124      	bne.n	18bc <_prf+0x314>
			*buf++ = sign ? '-' : '+';
    1872:	332d      	adds	r3, #45	; 0x2d
    1874:	2900      	cmp	r1, #0
    1876:	db00      	blt.n	187a <_prf+0x2d2>
    1878:	3b02      	subs	r3, #2
    187a:	7013      	strb	r3, [r2, #0]
			*buf++ = 'I';
    187c:	2349      	movs	r3, #73	; 0x49
    187e:	7053      	strb	r3, [r2, #1]
			*buf++ = 'N';
    1880:	3305      	adds	r3, #5
    1882:	7093      	strb	r3, [r2, #2]
			*buf++ = 'F';
    1884:	3b08      	subs	r3, #8
    1886:	70d3      	strb	r3, [r2, #3]
    1888:	ad16      	add	r5, sp, #88	; 0x58
	*buf = 0;
    188a:	2300      	movs	r3, #0
    188c:	702b      	strb	r3, [r5, #0]
				if (fplus || fspace || (buf[0] == '-'))
    188e:	9c08      	ldr	r4, [sp, #32]
    1890:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return buf - start;
    1892:	a815      	add	r0, sp, #84	; 0x54
    1894:	1a28      	subs	r0, r5, r0
				if (fplus || fspace || (buf[0] == '-'))
    1896:	431c      	orrs	r4, r3
    1898:	d104      	bne.n	18a4 <_prf+0x2fc>
    189a:	ab15      	add	r3, sp, #84	; 0x54
    189c:	781c      	ldrb	r4, [r3, #0]
    189e:	3c2d      	subs	r4, #45	; 0x2d
			prefix = 0;
    18a0:	4267      	negs	r7, r4
    18a2:	417c      	adcs	r4, r7
			if (c >= MAXFLD + 1)
    18a4:	28c8      	cmp	r0, #200	; 0xc8
    18a6:	dd00      	ble.n	18aa <_prf+0x302>
    18a8:	e6b9      	b.n	161e <_prf+0x76>
    18aa:	0007      	movs	r7, r0
    18ac:	e16b      	b.n	1b86 <_prf+0x5de>
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	0000c440 	.word	0x0000c440
    18b4:	0000c446 	.word	0x0000c446
    18b8:	000007ff 	.word	0x000007ff
			*buf++ = 'N';
    18bc:	234e      	movs	r3, #78	; 0x4e
			*buf++ = 'a';
    18be:	2161      	movs	r1, #97	; 0x61
			*buf++ = 'N';
    18c0:	251f      	movs	r5, #31
			*buf++ = 'N';
    18c2:	7013      	strb	r3, [r2, #0]
			*buf++ = 'N';
    18c4:	7093      	strb	r3, [r2, #2]
    18c6:	ab0e      	add	r3, sp, #56	; 0x38
			*buf++ = 'a';
    18c8:	7051      	strb	r1, [r2, #1]
			*buf++ = 'N';
    18ca:	18ed      	adds	r5, r5, r3
    18cc:	e7dd      	b.n	188a <_prf+0x2e2>
	if ((exp | fract) != 0) {
    18ce:	0005      	movs	r5, r0
    18d0:	4315      	orrs	r5, r2
    18d2:	431d      	orrs	r5, r3
    18d4:	d039      	beq.n	194a <_prf+0x3a2>
		fract |= HIGHBIT64;
    18d6:	9210      	str	r2, [sp, #64]	; 0x40
    18d8:	2280      	movs	r2, #128	; 0x80
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    18da:	4dc3      	ldr	r5, [pc, #780]	; (1be8 <_prf+0x640>)
		fract |= HIGHBIT64;
    18dc:	0612      	lsls	r2, r2, #24
    18de:	4313      	orrs	r3, r2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    18e0:	1945      	adds	r5, r0, r5
		fract |= HIGHBIT64;
    18e2:	9311      	str	r3, [sp, #68]	; 0x44
	if (decexp && sign) {
    18e4:	2900      	cmp	r1, #0
    18e6:	da30      	bge.n	194a <_prf+0x3a2>
		*buf++ = '-';
    18e8:	222d      	movs	r2, #45	; 0x2d
    18ea:	ab15      	add	r3, sp, #84	; 0x54
		*buf++ = ' ';
    18ec:	261d      	movs	r6, #29
    18ee:	701a      	strb	r2, [r3, #0]
    18f0:	ab0e      	add	r3, sp, #56	; 0x38
    18f2:	18f6      	adds	r6, r6, r3
	decexp = 0;
    18f4:	2300      	movs	r3, #0
    18f6:	9302      	str	r3, [sp, #8]
	while (exp <= -3) {
    18f8:	1cab      	adds	r3, r5, #2
    18fa:	db36      	blt.n	196a <_prf+0x3c2>
	while (exp > 0) {
    18fc:	2d00      	cmp	r5, #0
    18fe:	dc51      	bgt.n	19a4 <_prf+0x3fc>
		_rlrshift(&fract);
    1900:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    1902:	3501      	adds	r5, #1
		_rlrshift(&fract);
    1904:	f7ff fded 	bl	14e2 <_rlrshift>
	while (exp < (0 + 4)) {
    1908:	2d04      	cmp	r5, #4
    190a:	d1f9      	bne.n	1900 <_prf+0x358>
	if (precision < 0)
    190c:	9b01      	ldr	r3, [sp, #4]
    190e:	2b00      	cmp	r3, #0
    1910:	da01      	bge.n	1916 <_prf+0x36e>
		precision = 6;		/* Default precision if none given */
    1912:	2306      	movs	r3, #6
    1914:	9301      	str	r3, [sp, #4]
	if ((c == 'g') || (c == 'G')) {
    1916:	0023      	movs	r3, r4
    1918:	2220      	movs	r2, #32
    191a:	4393      	bics	r3, r2
    191c:	2b47      	cmp	r3, #71	; 0x47
    191e:	d158      	bne.n	19d2 <_prf+0x42a>
		if (!falt && (precision > 0))
    1920:	2300      	movs	r3, #0
    1922:	429f      	cmp	r7, r3
    1924:	d103      	bne.n	192e <_prf+0x386>
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	1e5a      	subs	r2, r3, #1
    192a:	4193      	sbcs	r3, r2
    192c:	b2db      	uxtb	r3, r3
    192e:	930b      	str	r3, [sp, #44]	; 0x2c
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    1930:	9b02      	ldr	r3, [sp, #8]
    1932:	3303      	adds	r3, #3
    1934:	db04      	blt.n	1940 <_prf+0x398>
    1936:	9b01      	ldr	r3, [sp, #4]
    1938:	9a02      	ldr	r2, [sp, #8]
    193a:	3301      	adds	r3, #1
    193c:	429a      	cmp	r2, r3
    193e:	dd4c      	ble.n	19da <_prf+0x432>
			if (c == 'g')
    1940:	2c67      	cmp	r4, #103	; 0x67
    1942:	d000      	beq.n	1946 <_prf+0x39e>
    1944:	e092      	b.n	1a6c <_prf+0x4c4>
				c = 'e';
    1946:	2465      	movs	r4, #101	; 0x65
    1948:	e091      	b.n	1a6e <_prf+0x4c6>
	} else if (fplus) {
    194a:	9a08      	ldr	r2, [sp, #32]
    194c:	ab15      	add	r3, sp, #84	; 0x54
    194e:	2a00      	cmp	r2, #0
    1950:	d001      	beq.n	1956 <_prf+0x3ae>
		*buf++ = '+';
    1952:	222b      	movs	r2, #43	; 0x2b
    1954:	e7ca      	b.n	18ec <_prf+0x344>
	} else if (fspace) {
    1956:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1958:	001e      	movs	r6, r3
    195a:	2a00      	cmp	r2, #0
    195c:	d0ca      	beq.n	18f4 <_prf+0x34c>
		*buf++ = ' ';
    195e:	2220      	movs	r2, #32
    1960:	e7c4      	b.n	18ec <_prf+0x344>
			_rlrshift(&fract);
    1962:	a810      	add	r0, sp, #64	; 0x40
    1964:	f7ff fdbd 	bl	14e2 <_rlrshift>
			exp++;
    1968:	3501      	adds	r5, #1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    196a:	9911      	ldr	r1, [sp, #68]	; 0x44
    196c:	4b9f      	ldr	r3, [pc, #636]	; (1bec <_prf+0x644>)
    196e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1970:	4299      	cmp	r1, r3
    1972:	d8f6      	bhi.n	1962 <_prf+0x3ba>
		fract *= 5;
    1974:	2205      	movs	r2, #5
    1976:	2300      	movs	r3, #0
    1978:	f7fe fd0e 	bl	398 <__aeabi_lmul>
		decexp--;
    197c:	9b02      	ldr	r3, [sp, #8]
		fract *= 5;
    197e:	9010      	str	r0, [sp, #64]	; 0x40
    1980:	9111      	str	r1, [sp, #68]	; 0x44
		decexp--;
    1982:	3b01      	subs	r3, #1
    1984:	9302      	str	r3, [sp, #8]
    1986:	2300      	movs	r3, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    1988:	4a99      	ldr	r2, [pc, #612]	; (1bf0 <_prf+0x648>)
		exp++;
    198a:	3501      	adds	r5, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    198c:	428a      	cmp	r2, r1
    198e:	d204      	bcs.n	199a <_prf+0x3f2>
    1990:	2b00      	cmp	r3, #0
    1992:	d0b1      	beq.n	18f8 <_prf+0x350>
    1994:	9010      	str	r0, [sp, #64]	; 0x40
    1996:	9111      	str	r1, [sp, #68]	; 0x44
    1998:	e7ae      	b.n	18f8 <_prf+0x350>
			fract <<= 1;
    199a:	1800      	adds	r0, r0, r0
    199c:	4149      	adcs	r1, r1
			exp--;
    199e:	3d01      	subs	r5, #1
    19a0:	2301      	movs	r3, #1
    19a2:	e7f3      	b.n	198c <_prf+0x3e4>
		_ldiv5(&fract);
    19a4:	a810      	add	r0, sp, #64	; 0x40
    19a6:	f7ff fdad 	bl	1504 <_ldiv5>
		decexp++;
    19aa:	2100      	movs	r1, #0
    19ac:	9b02      	ldr	r3, [sp, #8]
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    19ae:	4890      	ldr	r0, [pc, #576]	; (1bf0 <_prf+0x648>)
		decexp++;
    19b0:	3301      	adds	r3, #1
		exp--;
    19b2:	3d01      	subs	r5, #1
		decexp++;
    19b4:	9302      	str	r3, [sp, #8]
    19b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    19ba:	4298      	cmp	r0, r3
    19bc:	d204      	bcs.n	19c8 <_prf+0x420>
    19be:	2900      	cmp	r1, #0
    19c0:	d09c      	beq.n	18fc <_prf+0x354>
    19c2:	9210      	str	r2, [sp, #64]	; 0x40
    19c4:	9311      	str	r3, [sp, #68]	; 0x44
    19c6:	e799      	b.n	18fc <_prf+0x354>
			fract <<= 1;
    19c8:	1892      	adds	r2, r2, r2
    19ca:	415b      	adcs	r3, r3
			exp--;
    19cc:	3d01      	subs	r5, #1
    19ce:	2101      	movs	r1, #1
    19d0:	e7f3      	b.n	19ba <_prf+0x412>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    19d2:	2300      	movs	r3, #0
    19d4:	930b      	str	r3, [sp, #44]	; 0x2c
	if (c == 'f') {
    19d6:	2c66      	cmp	r4, #102	; 0x66
    19d8:	d149      	bne.n	1a6e <_prf+0x4c6>
		exp = precision + decexp;
    19da:	9b02      	ldr	r3, [sp, #8]
    19dc:	9a01      	ldr	r2, [sp, #4]
    19de:	2466      	movs	r4, #102	; 0x66
    19e0:	189d      	adds	r5, r3, r2
    19e2:	43eb      	mvns	r3, r5
    19e4:	17db      	asrs	r3, r3, #31
    19e6:	401d      	ands	r5, r3
	ltemp = 0x0800000000000000;
    19e8:	2380      	movs	r3, #128	; 0x80
	digit_count = 16;
    19ea:	2110      	movs	r1, #16
	ltemp = 0x0800000000000000;
    19ec:	2200      	movs	r2, #0
    19ee:	051b      	lsls	r3, r3, #20
	digit_count = 16;
    19f0:	910f      	str	r1, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
    19f2:	9212      	str	r2, [sp, #72]	; 0x48
    19f4:	9313      	str	r3, [sp, #76]	; 0x4c
    19f6:	428d      	cmp	r5, r1
    19f8:	dd00      	ble.n	19fc <_prf+0x454>
    19fa:	000d      	movs	r5, r1
	while (exp--) {
    19fc:	2d00      	cmp	r5, #0
    19fe:	d139      	bne.n	1a74 <_prf+0x4cc>
	fract += ltemp;
    1a00:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a04:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a06:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a08:	1812      	adds	r2, r2, r0
    1a0a:	414b      	adcs	r3, r1
    1a0c:	9210      	str	r2, [sp, #64]	; 0x40
    1a0e:	9311      	str	r3, [sp, #68]	; 0x44
	if ((fract >> 32) & 0xF0000000) {
    1a10:	0f1b      	lsrs	r3, r3, #28
    1a12:	d008      	beq.n	1a26 <_prf+0x47e>
		_ldiv5(&fract);
    1a14:	a810      	add	r0, sp, #64	; 0x40
    1a16:	f7ff fd75 	bl	1504 <_ldiv5>
		_rlrshift(&fract);
    1a1a:	a810      	add	r0, sp, #64	; 0x40
    1a1c:	f7ff fd61 	bl	14e2 <_rlrshift>
		decexp++;
    1a20:	9b02      	ldr	r3, [sp, #8]
    1a22:	3301      	adds	r3, #1
    1a24:	9302      	str	r3, [sp, #8]
	if (c == 'f') {
    1a26:	2c66      	cmp	r4, #102	; 0x66
    1a28:	d140      	bne.n	1aac <_prf+0x504>
		if (decexp > 0) {
    1a2a:	9b02      	ldr	r3, [sp, #8]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	dd29      	ble.n	1a84 <_prf+0x4dc>
    1a30:	18f5      	adds	r5, r6, r3
				*buf++ = _get_digit(&fract, &digit_count);
    1a32:	a90f      	add	r1, sp, #60	; 0x3c
    1a34:	a810      	add	r0, sp, #64	; 0x40
    1a36:	f7ff fda1 	bl	157c <_get_digit>
    1a3a:	7030      	strb	r0, [r6, #0]
    1a3c:	3601      	adds	r6, #1
			while (decexp > 0) {
    1a3e:	42b5      	cmp	r5, r6
    1a40:	d1f7      	bne.n	1a32 <_prf+0x48a>
    1a42:	2300      	movs	r3, #0
    1a44:	9302      	str	r3, [sp, #8]
		if (falt || (precision > 0))
    1a46:	2f00      	cmp	r7, #0
    1a48:	d102      	bne.n	1a50 <_prf+0x4a8>
    1a4a:	9b01      	ldr	r3, [sp, #4]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d009      	beq.n	1a64 <_prf+0x4bc>
			*buf++ = '.';
    1a50:	232e      	movs	r3, #46	; 0x2e
    1a52:	002e      	movs	r6, r5
    1a54:	702b      	strb	r3, [r5, #0]
    1a56:	9b01      	ldr	r3, [sp, #4]
    1a58:	18ef      	adds	r7, r5, r3
		while (precision-- > 0) {
    1a5a:	42be      	cmp	r6, r7
    1a5c:	d116      	bne.n	1a8c <_prf+0x4e4>
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	3301      	adds	r3, #1
    1a62:	18ed      	adds	r5, r5, r3
	if (prune_zero) {
    1a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a66:	2b00      	cmp	r3, #0
    1a68:	d13b      	bne.n	1ae2 <_prf+0x53a>
    1a6a:	e70e      	b.n	188a <_prf+0x2e2>
				c = 'E';
    1a6c:	2445      	movs	r4, #69	; 0x45
		exp = precision + 1;
    1a6e:	9b01      	ldr	r3, [sp, #4]
    1a70:	1c5d      	adds	r5, r3, #1
    1a72:	e7b9      	b.n	19e8 <_prf+0x440>
		_ldiv5(&ltemp);
    1a74:	a812      	add	r0, sp, #72	; 0x48
    1a76:	f7ff fd45 	bl	1504 <_ldiv5>
		_rlrshift(&ltemp);
    1a7a:	a812      	add	r0, sp, #72	; 0x48
    1a7c:	f7ff fd31 	bl	14e2 <_rlrshift>
    1a80:	3d01      	subs	r5, #1
    1a82:	e7bb      	b.n	19fc <_prf+0x454>
			*buf++ = '0';
    1a84:	2330      	movs	r3, #48	; 0x30
    1a86:	1c75      	adds	r5, r6, #1
    1a88:	7033      	strb	r3, [r6, #0]
    1a8a:	e7dc      	b.n	1a46 <_prf+0x49e>
			if (decexp < 0) {
    1a8c:	9b02      	ldr	r3, [sp, #8]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d006      	beq.n	1aa0 <_prf+0x4f8>
				*buf++ = '0';
    1a92:	2330      	movs	r3, #48	; 0x30
    1a94:	7073      	strb	r3, [r6, #1]
				decexp++;
    1a96:	9b02      	ldr	r3, [sp, #8]
    1a98:	3301      	adds	r3, #1
    1a9a:	9302      	str	r3, [sp, #8]
    1a9c:	3601      	adds	r6, #1
    1a9e:	e7dc      	b.n	1a5a <_prf+0x4b2>
				*buf++ = _get_digit(&fract, &digit_count);
    1aa0:	a90f      	add	r1, sp, #60	; 0x3c
    1aa2:	a810      	add	r0, sp, #64	; 0x40
    1aa4:	f7ff fd6a 	bl	157c <_get_digit>
    1aa8:	7070      	strb	r0, [r6, #1]
    1aaa:	e7f7      	b.n	1a9c <_prf+0x4f4>
		*buf = _get_digit(&fract, &digit_count);
    1aac:	a90f      	add	r1, sp, #60	; 0x3c
    1aae:	a810      	add	r0, sp, #64	; 0x40
    1ab0:	f7ff fd64 	bl	157c <_get_digit>
    1ab4:	7030      	strb	r0, [r6, #0]
			decexp--;
    1ab6:	3830      	subs	r0, #48	; 0x30
    1ab8:	1e43      	subs	r3, r0, #1
    1aba:	4198      	sbcs	r0, r3
    1abc:	9b02      	ldr	r3, [sp, #8]
    1abe:	1a1b      	subs	r3, r3, r0
    1ac0:	9302      	str	r3, [sp, #8]
		if (falt || (precision > 0))
    1ac2:	2f00      	cmp	r7, #0
    1ac4:	d103      	bne.n	1ace <_prf+0x526>
    1ac6:	9b01      	ldr	r3, [sp, #4]
		if (*buf++ != '0')
    1ac8:	1c75      	adds	r5, r6, #1
		if (falt || (precision > 0))
    1aca:	2b00      	cmp	r3, #0
    1acc:	d006      	beq.n	1adc <_prf+0x534>
			*buf++ = '.';
    1ace:	232e      	movs	r3, #46	; 0x2e
    1ad0:	7073      	strb	r3, [r6, #1]
    1ad2:	9b01      	ldr	r3, [sp, #4]
    1ad4:	3602      	adds	r6, #2
    1ad6:	18f5      	adds	r5, r6, r3
		while (precision-- > 0)
    1ad8:	42b5      	cmp	r5, r6
    1ada:	d132      	bne.n	1b42 <_prf+0x59a>
	if (prune_zero) {
    1adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d007      	beq.n	1af2 <_prf+0x54a>
		while (*--buf == '0')
    1ae2:	002b      	movs	r3, r5
    1ae4:	3d01      	subs	r5, #1
    1ae6:	782a      	ldrb	r2, [r5, #0]
    1ae8:	2a30      	cmp	r2, #48	; 0x30
    1aea:	d0fa      	beq.n	1ae2 <_prf+0x53a>
		if (*buf != '.')
    1aec:	2a2e      	cmp	r2, #46	; 0x2e
    1aee:	d000      	beq.n	1af2 <_prf+0x54a>
    1af0:	001d      	movs	r5, r3
	if ((c == 'e') || (c == 'E')) {
    1af2:	0023      	movs	r3, r4
    1af4:	2220      	movs	r2, #32
    1af6:	4393      	bics	r3, r2
    1af8:	2b45      	cmp	r3, #69	; 0x45
    1afa:	d000      	beq.n	1afe <_prf+0x556>
    1afc:	e6c5      	b.n	188a <_prf+0x2e2>
		if (decexp < 0) {
    1afe:	9b02      	ldr	r3, [sp, #8]
		*buf++ = (char) c;
    1b00:	702c      	strb	r4, [r5, #0]
    1b02:	1cac      	adds	r4, r5, #2
		if (decexp < 0) {
    1b04:	2b00      	cmp	r3, #0
    1b06:	da23      	bge.n	1b50 <_prf+0x5a8>
			decexp = -decexp;
    1b08:	425b      	negs	r3, r3
    1b0a:	9302      	str	r3, [sp, #8]
			*buf++ = '-';
    1b0c:	232d      	movs	r3, #45	; 0x2d
			*buf++ = '+';
    1b0e:	706b      	strb	r3, [r5, #1]
		*buf++ = (char) ((decexp / 100) + '0');
    1b10:	2164      	movs	r1, #100	; 0x64
    1b12:	9802      	ldr	r0, [sp, #8]
    1b14:	f7fe fba6 	bl	264 <__aeabi_idiv>
    1b18:	3030      	adds	r0, #48	; 0x30
    1b1a:	7020      	strb	r0, [r4, #0]
		decexp %= 100;
    1b1c:	2164      	movs	r1, #100	; 0x64
    1b1e:	9802      	ldr	r0, [sp, #8]
    1b20:	f7fe fbf6 	bl	310 <__aeabi_idivmod>
    1b24:	000e      	movs	r6, r1
		*buf++ = (char) ((decexp / 10) + '0');
    1b26:	210a      	movs	r1, #10
    1b28:	0030      	movs	r0, r6
    1b2a:	f7fe fb9b 	bl	264 <__aeabi_idiv>
    1b2e:	3030      	adds	r0, #48	; 0x30
    1b30:	7060      	strb	r0, [r4, #1]
		decexp %= 10;
    1b32:	210a      	movs	r1, #10
    1b34:	0030      	movs	r0, r6
    1b36:	f7fe fbeb 	bl	310 <__aeabi_idivmod>
		*buf++ = (char) (decexp + '0');
    1b3a:	3130      	adds	r1, #48	; 0x30
    1b3c:	1ce5      	adds	r5, r4, #3
    1b3e:	70a1      	strb	r1, [r4, #2]
    1b40:	e6a3      	b.n	188a <_prf+0x2e2>
			*buf++ = _get_digit(&fract, &digit_count);
    1b42:	a90f      	add	r1, sp, #60	; 0x3c
    1b44:	a810      	add	r0, sp, #64	; 0x40
    1b46:	f7ff fd19 	bl	157c <_get_digit>
    1b4a:	7030      	strb	r0, [r6, #0]
    1b4c:	3601      	adds	r6, #1
    1b4e:	e7c3      	b.n	1ad8 <_prf+0x530>
			*buf++ = '+';
    1b50:	232b      	movs	r3, #43	; 0x2b
    1b52:	e7dc      	b.n	1b0e <_prf+0x566>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    1b54:	1d2b      	adds	r3, r5, #4
    1b56:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    1b58:	9a06      	ldr	r2, [sp, #24]
    1b5a:	682b      	ldr	r3, [r5, #0]
    1b5c:	601a      	str	r2, [r3, #0]
							prefix = 0;
    1b5e:	9c06      	ldr	r4, [sp, #24]
    1b60:	e566      	b.n	1630 <_prf+0x88>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1b62:	1d2b      	adds	r3, r5, #4
    1b64:	9305      	str	r3, [sp, #20]
    1b66:	6829      	ldr	r1, [r5, #0]
    1b68:	ab15      	add	r3, sp, #84	; 0x54
	if (alt_form) {
    1b6a:	2f00      	cmp	r7, #0
    1b6c:	d021      	beq.n	1bb2 <_prf+0x60a>
		*buf++ = '0';
    1b6e:	2230      	movs	r2, #48	; 0x30
    1b70:	201d      	movs	r0, #29
    1b72:	701a      	strb	r2, [r3, #0]
    1b74:	aa0e      	add	r2, sp, #56	; 0x38
    1b76:	1880      	adds	r0, r0, r2
		if (!value) {
    1b78:	2900      	cmp	r1, #0
    1b7a:	d11b      	bne.n	1bb4 <_prf+0x60c>
			*buf++ = 0;
    1b7c:	7059      	strb	r1, [r3, #1]
				if (precision != -1)
    1b7e:	9b01      	ldr	r3, [sp, #4]
			prefix = 0;
    1b80:	000c      	movs	r4, r1
				if (precision != -1)
    1b82:	3301      	adds	r3, #1
    1b84:	d161      	bne.n	1c4a <_prf+0x6a2>
				if (c < width) {
    1b86:	9b04      	ldr	r3, [sp, #16]
    1b88:	42bb      	cmp	r3, r7
    1b8a:	dc61      	bgt.n	1c50 <_prf+0x6a8>
							prefix = 0;
    1b8c:	9c06      	ldr	r4, [sp, #24]
    1b8e:	9b06      	ldr	r3, [sp, #24]
    1b90:	18fb      	adds	r3, r7, r3
    1b92:	1b1b      	subs	r3, r3, r4
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    1b94:	2b00      	cmp	r3, #0
    1b96:	dc00      	bgt.n	1b9a <_prf+0x5f2>
    1b98:	e54a      	b.n	1630 <_prf+0x88>
					if ((*func)(*cptr, dest) == EOF)
    1b9a:	9a06      	ldr	r2, [sp, #24]
    1b9c:	ab15      	add	r3, sp, #84	; 0x54
    1b9e:	1a9b      	subs	r3, r3, r2
    1ba0:	5d18      	ldrb	r0, [r3, r4]
    1ba2:	990d      	ldr	r1, [sp, #52]	; 0x34
    1ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ba6:	4798      	blx	r3
    1ba8:	1c43      	adds	r3, r0, #1
    1baa:	d100      	bne.n	1bae <_prf+0x606>
    1bac:	e537      	b.n	161e <_prf+0x76>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    1bae:	3401      	adds	r4, #1
    1bb0:	e7ed      	b.n	1b8e <_prf+0x5e6>
	if (alt_form) {
    1bb2:	0018      	movs	r0, r3
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    1bb4:	ad15      	add	r5, sp, #84	; 0x54
    1bb6:	9b01      	ldr	r3, [sp, #4]
    1bb8:	2208      	movs	r2, #8
    1bba:	1b45      	subs	r5, r0, r5
    1bbc:	f7ff fc5f 	bl	147e <_to_x>
    1bc0:	1828      	adds	r0, r5, r0
			prefix = 0;
    1bc2:	2400      	movs	r4, #0
    1bc4:	e630      	b.n	1828 <_prf+0x280>
		*buf++ = '0';
    1bc6:	2230      	movs	r2, #48	; 0x30
	len = _to_x(buf, value, 16, precision);
    1bc8:	201e      	movs	r0, #30
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1bca:	1d2b      	adds	r3, r5, #4
    1bcc:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    1bce:	ab15      	add	r3, sp, #84	; 0x54
    1bd0:	701a      	strb	r2, [r3, #0]
	len = _to_x(buf, value, 16, precision);
    1bd2:	ac0e      	add	r4, sp, #56	; 0x38
		*buf++ = 'x';
    1bd4:	3248      	adds	r2, #72	; 0x48
    1bd6:	705a      	strb	r2, [r3, #1]
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1bd8:	6829      	ldr	r1, [r5, #0]
	len = _to_x(buf, value, 16, precision);
    1bda:	2308      	movs	r3, #8
    1bdc:	3a68      	subs	r2, #104	; 0x68
    1bde:	1900      	adds	r0, r0, r4
    1be0:	f7ff fc4d 	bl	147e <_to_x>
	return len + (buf - buf0);
    1be4:	3002      	adds	r0, #2
    1be6:	e7ec      	b.n	1bc2 <_prf+0x61a>
    1be8:	fffffc02 	.word	0xfffffc02
    1bec:	33333332 	.word	0x33333332
    1bf0:	7fffffff 	.word	0x7fffffff
				for (c = 0; c < MAXFLD; c++) {
    1bf4:	3701      	adds	r7, #1
    1bf6:	2fc8      	cmp	r7, #200	; 0xc8
    1bf8:	d000      	beq.n	1bfc <_prf+0x654>
    1bfa:	e5e2      	b.n	17c2 <_prf+0x21a>
				if ((precision >= 0) && (precision < c))
    1bfc:	9b01      	ldr	r3, [sp, #4]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	da00      	bge.n	1c04 <_prf+0x65c>
    1c02:	e5e9      	b.n	17d8 <_prf+0x230>
    1c04:	9b01      	ldr	r3, [sp, #4]
    1c06:	429f      	cmp	r7, r3
    1c08:	dc00      	bgt.n	1c0c <_prf+0x664>
    1c0a:	e5e2      	b.n	17d2 <_prf+0x22a>
    1c0c:	001f      	movs	r7, r3
    1c0e:	e5e0      	b.n	17d2 <_prf+0x22a>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    1c10:	1d2b      	adds	r3, r5, #4
    1c12:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    1c14:	220a      	movs	r2, #10
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	6829      	ldr	r1, [r5, #0]
    1c1a:	a815      	add	r0, sp, #84	; 0x54
    1c1c:	f7ff fc2f 	bl	147e <_to_x>
    1c20:	e7cf      	b.n	1bc2 <_prf+0x61a>
		if (*buf >= 'a' && *buf <= 'z') {
    1c22:	001c      	movs	r4, r3
    1c24:	3c61      	subs	r4, #97	; 0x61
    1c26:	2c19      	cmp	r4, #25
    1c28:	d801      	bhi.n	1c2e <_prf+0x686>
			*buf += 'A' - 'a';
    1c2a:	3b20      	subs	r3, #32
    1c2c:	548b      	strb	r3, [r1, r2]
    1c2e:	3101      	adds	r1, #1
    1c30:	e593      	b.n	175a <_prf+0x1b2>
				if ((*func)('%', dest) == EOF) {
    1c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c34:	990d      	ldr	r1, [sp, #52]	; 0x34
    1c36:	0020      	movs	r0, r4
    1c38:	4798      	blx	r3
    1c3a:	1c43      	adds	r3, r0, #1
    1c3c:	d100      	bne.n	1c40 <_prf+0x698>
    1c3e:	e4ee      	b.n	161e <_prf+0x76>
				count++;
    1c40:	9b06      	ldr	r3, [sp, #24]
    1c42:	3301      	adds	r3, #1
    1c44:	9306      	str	r3, [sp, #24]
			if (c >= MAXFLD + 1)
    1c46:	9505      	str	r5, [sp, #20]
    1c48:	e789      	b.n	1b5e <_prf+0x5b6>
					pad = ' ';
    1c4a:	2320      	movs	r3, #32
    1c4c:	9307      	str	r3, [sp, #28]
    1c4e:	e79a      	b.n	1b86 <_prf+0x5de>
					if (fminus)	{
    1c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c52:	2b00      	cmp	r3, #0
    1c54:	d007      	beq.n	1c66 <_prf+0x6be>
							buf[i] = ' ';
    1c56:	ab15      	add	r3, sp, #84	; 0x54
    1c58:	2220      	movs	r2, #32
    1c5a:	54fa      	strb	r2, [r7, r3]
						for (i = c; i < width; i++)
    1c5c:	9a04      	ldr	r2, [sp, #16]
    1c5e:	3701      	adds	r7, #1
    1c60:	42ba      	cmp	r2, r7
    1c62:	d1f9      	bne.n	1c58 <_prf+0x6b0>
    1c64:	e792      	b.n	1b8c <_prf+0x5e4>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1c66:	9b04      	ldr	r3, [sp, #16]
										+ 1));
    1c68:	1c7a      	adds	r2, r7, #1
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1c6a:	1bdd      	subs	r5, r3, r7
    1c6c:	ab15      	add	r3, sp, #84	; 0x54
    1c6e:	1958      	adds	r0, r3, r5
    1c70:	0019      	movs	r1, r3
    1c72:	f7ff fba4 	bl	13be <memmove>
						if (pad == ' ')
    1c76:	9b07      	ldr	r3, [sp, #28]
    1c78:	2b20      	cmp	r3, #32
    1c7a:	d100      	bne.n	1c7e <_prf+0x6d6>
							prefix = 0;
    1c7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						c = width - c + prefix;
    1c7e:	1965      	adds	r5, r4, r5
							buf[i] = pad;
    1c80:	ab15      	add	r3, sp, #84	; 0x54
						for (i = prefix; i < c; i++)
    1c82:	42ac      	cmp	r4, r5
    1c84:	db01      	blt.n	1c8a <_prf+0x6e2>
    1c86:	9f04      	ldr	r7, [sp, #16]
    1c88:	e780      	b.n	1b8c <_prf+0x5e4>
							buf[i] = pad;
    1c8a:	466a      	mov	r2, sp
    1c8c:	7f12      	ldrb	r2, [r2, #28]
    1c8e:	54e2      	strb	r2, [r4, r3]
						for (i = prefix; i < c; i++)
    1c90:	3401      	adds	r4, #1
    1c92:	e7f6      	b.n	1c82 <_prf+0x6da>

00001c94 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    1c94:	2001      	movs	r0, #1
    1c96:	4240      	negs	r0, r0
    1c98:	4770      	bx	lr
	...

00001c9c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1c9c:	4b01      	ldr	r3, [pc, #4]	; (1ca4 <__stdout_hook_install+0x8>)
    1c9e:	6018      	str	r0, [r3, #0]
}
    1ca0:	4770      	bx	lr
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	20002180 	.word	0x20002180

00001ca8 <fputc>:

int fputc(int c, FILE *stream)
{
    1ca8:	b510      	push	{r4, lr}
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    1caa:	2902      	cmp	r1, #2
    1cac:	d103      	bne.n	1cb6 <fputc+0xe>
    1cae:	4b03      	ldr	r3, [pc, #12]	; (1cbc <fputc+0x14>)
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	4798      	blx	r3
}
    1cb4:	bd10      	pop	{r4, pc}
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    1cb6:	2001      	movs	r0, #1
    1cb8:	4240      	negs	r0, r0
    1cba:	e7fb      	b.n	1cb4 <fputc+0xc>
    1cbc:	20002180 	.word	0x20002180

00001cc0 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    1cc0:	b40f      	push	{r0, r1, r2, r3}
    1cc2:	b507      	push	{r0, r1, r2, lr}
    1cc4:	ab04      	add	r3, sp, #16
    1cc6:	cb04      	ldmia	r3!, {r2}
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
    1cc8:	2102      	movs	r1, #2
    1cca:	4804      	ldr	r0, [pc, #16]	; (1cdc <printf+0x1c>)
	va_start(vargs, format);
    1ccc:	9301      	str	r3, [sp, #4]
	r = _prf(fputc, DESC(stdout), format, vargs);
    1cce:	f7ff fc6b 	bl	15a8 <_prf>
	va_end(vargs);

	return r;
}
    1cd2:	b003      	add	sp, #12
    1cd4:	bc08      	pop	{r3}
    1cd6:	b004      	add	sp, #16
    1cd8:	4718      	bx	r3
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	00001ca9 	.word	0x00001ca9

00001ce0 <s4_temperature>:

void s4_temperature() {



}
    1ce0:	4770      	bx	lr
	...

00001ce4 <s1_display>:
void s1_display() { /* Show some scrolling text ("ECOM042.2017.2") */
    1ce4:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    1ce6:	f000 ff97 	bl	2c18 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_DEFAULT | MB_DISPLAY_FLAG_LOOP, 
    1cea:	22fa      	movs	r2, #250	; 0xfa
    1cec:	2180      	movs	r1, #128	; 0x80
    1cee:	4b03      	ldr	r3, [pc, #12]	; (1cfc <s1_display+0x18>)
    1cf0:	0052      	lsls	r2, r2, #1
    1cf2:	0249      	lsls	r1, r1, #9
    1cf4:	f000 ff40 	bl	2b78 <mb_display_print>
}
    1cf8:	bd10      	pop	{r4, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	0000c52c 	.word	0x0000c52c

00001d00 <s2_accelerometer>:
void s2_accelerometer() {
    1d00:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    1d02:	f000 ff89 	bl	2c18 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
    1d06:	22fa      	movs	r2, #250	; 0xfa
    1d08:	4b02      	ldr	r3, [pc, #8]	; (1d14 <s2_accelerometer+0x14>)
    1d0a:	0092      	lsls	r2, r2, #2
    1d0c:	2101      	movs	r1, #1
    1d0e:	f000 ff33 	bl	2b78 <mb_display_print>
}
    1d12:	bd10      	pop	{r4, pc}
    1d14:	0000c539 	.word	0x0000c539

00001d18 <s3_compass>:
void s3_compass() {
    1d18:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    1d1a:	f000 ff7d 	bl	2c18 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
    1d1e:	22fa      	movs	r2, #250	; 0xfa
    1d20:	4b02      	ldr	r3, [pc, #8]	; (1d2c <s3_compass+0x14>)
    1d22:	0092      	lsls	r2, r2, #2
    1d24:	2101      	movs	r1, #1
    1d26:	f000 ff27 	bl	2b78 <mb_display_print>
}
    1d2a:	bd10      	pop	{r4, pc}
    1d2c:	0000c53b 	.word	0x0000c53b

00001d30 <s5_bluetooth>:

void s5_bluetooth() {
    1d30:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    1d32:	f000 ff71 	bl	2c18 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
    1d36:	22fa      	movs	r2, #250	; 0xfa
    1d38:	4b02      	ldr	r3, [pc, #8]	; (1d44 <s5_bluetooth+0x14>)
    1d3a:	0092      	lsls	r2, r2, #2
    1d3c:	2101      	movs	r1, #1
    1d3e:	f000 ff1b 	bl	2b78 <mb_display_print>
		K_SECONDS(1), "5");
}
    1d42:	bd10      	pop	{r4, pc}
    1d44:	0000c53d 	.word	0x0000c53d

00001d48 <button_pressed>:

static struct device *pwm;
static struct device *gpio;

static void button_pressed(struct device *dev, struct gpio_callback *cb, u32_t pins)
{
    1d48:	b510      	push	{r4, lr}
    1d4a:	4c0d      	ldr	r4, [pc, #52]	; (1d80 <button_pressed+0x38>)
	if (pins & BIT(SW0_GPIO_PIN)) {
    1d4c:	0393      	lsls	r3, r2, #14
    1d4e:	d511      	bpl.n	1d74 <button_pressed+0x2c>
		printk("A pressed\n");
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <button_pressed+0x3c>)
    1d52:	f000 fcd7 	bl	2704 <printk>
		current_event = BACKWARD;
    1d56:	2302      	movs	r3, #2
	} else {
		printk("B pressed\n");
		current_event = FORWARD;
	}

	current_state = machine[current_state].events[current_event];
    1d58:	490b      	ldr	r1, [pc, #44]	; (1d88 <button_pressed+0x40>)
		current_event = FORWARD;
    1d5a:	7023      	strb	r3, [r4, #0]
	current_state = machine[current_state].events[current_event];
    1d5c:	780b      	ldrb	r3, [r1, #0]
    1d5e:	4a0b      	ldr	r2, [pc, #44]	; (1d8c <button_pressed+0x44>)
    1d60:	7820      	ldrb	r0, [r4, #0]
    1d62:	00db      	lsls	r3, r3, #3
    1d64:	18d3      	adds	r3, r2, r3
    1d66:	5c1b      	ldrb	r3, [r3, r0]
    1d68:	700b      	strb	r3, [r1, #0]
	machine[current_state].action();
    1d6a:	00db      	lsls	r3, r3, #3
    1d6c:	18d2      	adds	r2, r2, r3
    1d6e:	6853      	ldr	r3, [r2, #4]
    1d70:	4798      	blx	r3
}
    1d72:	bd10      	pop	{r4, pc}
		printk("B pressed\n");
    1d74:	4806      	ldr	r0, [pc, #24]	; (1d90 <button_pressed+0x48>)
    1d76:	f000 fcc5 	bl	2704 <printk>
		current_event = FORWARD;
    1d7a:	2301      	movs	r3, #1
    1d7c:	e7ec      	b.n	1d58 <button_pressed+0x10>
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	2000000c 	.word	0x2000000c
    1d84:	0000c44e 	.word	0x0000c44e
    1d88:	2000000d 	.word	0x2000000d
    1d8c:	20002184 	.word	0x20002184
    1d90:	0000c459 	.word	0x0000c459

00001d94 <main>:


/***************************************************************************************/
/** MAIN **/
void main(void)
{
    1d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio = device_get_binding(SW0_GPIO_NAME);
    1d96:	4838      	ldr	r0, [pc, #224]	; (1e78 <main+0xe4>)
    1d98:	f009 f840 	bl	ae1c <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1d9c:	6843      	ldr	r3, [r0, #4]
    1d9e:	4c37      	ldr	r4, [pc, #220]	; (1e7c <main+0xe8>)
    1da0:	681d      	ldr	r5, [r3, #0]
    1da2:	2211      	movs	r2, #17
    1da4:	2322      	movs	r3, #34	; 0x22
    1da6:	2100      	movs	r1, #0
    1da8:	6020      	str	r0, [r4, #0]
    1daa:	47a8      	blx	r5
	gpio_pin_configure(gpio, SW1_GPIO_PIN, (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE | GPIO_INT_ACTIVE_LOW));
    1dac:	6820      	ldr	r0, [r4, #0]
    1dae:	221a      	movs	r2, #26
    1db0:	6843      	ldr	r3, [r0, #4]
    1db2:	2100      	movs	r1, #0
    1db4:	681d      	ldr	r5, [r3, #0]
    1db6:	2322      	movs	r3, #34	; 0x22
    1db8:	47a8      	blx	r5
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1dba:	4931      	ldr	r1, [pc, #196]	; (1e80 <main+0xec>)
    1dbc:	4b31      	ldr	r3, [pc, #196]	; (1e84 <main+0xf0>)
	gpio_add_callback(gpio, &button_cb);
    1dbe:	6820      	ldr	r0, [r4, #0]
    1dc0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    1dc2:	4b31      	ldr	r3, [pc, #196]	; (1e88 <main+0xf4>)
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
    1dc4:	2201      	movs	r2, #1
	callback->pin_mask = pin_mask;
    1dc6:	608b      	str	r3, [r1, #8]
	return api->manage_callback(port, callback, true);
    1dc8:	6843      	ldr	r3, [r0, #4]
    1dca:	68db      	ldr	r3, [r3, #12]
    1dcc:	4798      	blx	r3
	pwm = device_get_binding(CONFIG_PWM_NRF5_SW_0_DEV_NAME);
    1dce:	482f      	ldr	r0, [pc, #188]	; (1e8c <main+0xf8>)
    1dd0:	f009 f824 	bl	ae1c <device_get_binding>
	gpio_pin_enable_callback(gpio, SW0_GPIO_PIN);
    1dd4:	6820      	ldr	r0, [r4, #0]
	return api->enable_callback(port, access_op, pin);
    1dd6:	2211      	movs	r2, #17
    1dd8:	6843      	ldr	r3, [r0, #4]
    1dda:	2100      	movs	r1, #0
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	4798      	blx	r3
	gpio_pin_enable_callback(gpio, SW1_GPIO_PIN);
    1de0:	6820      	ldr	r0, [r4, #0]
    1de2:	221a      	movs	r2, #26
    1de4:	6843      	ldr	r3, [r0, #4]
    1de6:	2100      	movs	r1, #0
    1de8:	691b      	ldr	r3, [r3, #16]
    1dea:	4798      	blx	r3
	configure_buttons();

	printk("Thermometer Example! %s\n", CONFIG_ARCH);
    1dec:	4928      	ldr	r1, [pc, #160]	; (1e90 <main+0xfc>)
    1dee:	4829      	ldr	r0, [pc, #164]	; (1e94 <main+0x100>)
    1df0:	f000 fc88 	bl	2704 <printk>

	temp_dev = device_get_binding("TEMP_0");
    1df4:	4828      	ldr	r0, [pc, #160]	; (1e98 <main+0x104>)
    1df6:	f009 f811 	bl	ae1c <device_get_binding>
    1dfa:	4c28      	ldr	r4, [pc, #160]	; (1e9c <main+0x108>)
    1dfc:	1e01      	subs	r1, r0, #0
    1dfe:	6020      	str	r0, [r4, #0]
	if (!temp_dev) {
    1e00:	d103      	bne.n	1e0a <main+0x76>
		printk("error: no temp device\n");
    1e02:	4827      	ldr	r0, [pc, #156]	; (1ea0 <main+0x10c>)
    1e04:	f000 fc7e 	bl	2704 <printk>
		printf("Temperature is %gC\n",
		       sensor_value_to_double(&temp_value));

		k_sleep(5000);
	}
}
    1e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	printf("temp device is %p, name is %s\n",
    1e0a:	6803      	ldr	r3, [r0, #0]
    1e0c:	4825      	ldr	r0, [pc, #148]	; (1ea4 <main+0x110>)
    1e0e:	681a      	ldr	r2, [r3, #0]
    1e10:	f7ff ff56 	bl	1cc0 <printf>
		r = sensor_sample_fetch(temp_dev);
    1e14:	6820      	ldr	r0, [r4, #0]

static inline int _impl_sensor_sample_fetch(struct device *dev)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    1e16:	211e      	movs	r1, #30
    1e18:	6843      	ldr	r3, [r0, #4]
    1e1a:	689b      	ldr	r3, [r3, #8]
    1e1c:	4798      	blx	r3
    1e1e:	1e01      	subs	r1, r0, #0
		if (r) {
    1e20:	d003      	beq.n	1e2a <main+0x96>
			printf("sensor_sample_fetch failed return: %d\n", r);
    1e22:	4821      	ldr	r0, [pc, #132]	; (1ea8 <main+0x114>)
			printf("sensor_channel_get failed return: %d\n", r);
    1e24:	f7ff ff4c 	bl	1cc0 <printf>
			break;
    1e28:	e7ee      	b.n	1e08 <main+0x74>
		r = sensor_channel_get(temp_dev, SENSOR_CHAN_TEMP,
    1e2a:	6820      	ldr	r0, [r4, #0]
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
    1e2c:	4d1f      	ldr	r5, [pc, #124]	; (1eac <main+0x118>)
    1e2e:	6843      	ldr	r3, [r0, #4]
    1e30:	210c      	movs	r1, #12
    1e32:	68db      	ldr	r3, [r3, #12]
    1e34:	002a      	movs	r2, r5
    1e36:	4798      	blx	r3
    1e38:	1e01      	subs	r1, r0, #0
		if (r) {
    1e3a:	d001      	beq.n	1e40 <main+0xac>
			printf("sensor_channel_get failed return: %d\n", r);
    1e3c:	481c      	ldr	r0, [pc, #112]	; (1eb0 <main+0x11c>)
    1e3e:	e7f1      	b.n	1e24 <main+0x90>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
    1e40:	6868      	ldr	r0, [r5, #4]
    1e42:	f7ff f9fb 	bl	123c <__aeabi_i2d>
    1e46:	2200      	movs	r2, #0
    1e48:	4b1a      	ldr	r3, [pc, #104]	; (1eb4 <main+0x120>)
    1e4a:	f7fe fec3 	bl	bd4 <__aeabi_ddiv>
    1e4e:	0006      	movs	r6, r0
    1e50:	6828      	ldr	r0, [r5, #0]
    1e52:	000f      	movs	r7, r1
    1e54:	f7ff f9f2 	bl	123c <__aeabi_i2d>
    1e58:	0002      	movs	r2, r0
    1e5a:	000b      	movs	r3, r1
    1e5c:	0030      	movs	r0, r6
    1e5e:	0039      	movs	r1, r7
    1e60:	f7fe fba8 	bl	5b4 <__aeabi_dadd>
    1e64:	0002      	movs	r2, r0
    1e66:	000b      	movs	r3, r1
		printf("Temperature is %gC\n",
    1e68:	4813      	ldr	r0, [pc, #76]	; (1eb8 <main+0x124>)
    1e6a:	f7ff ff29 	bl	1cc0 <printf>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1e6e:	4813      	ldr	r0, [pc, #76]	; (1ebc <main+0x128>)
    1e70:	f009 fc52 	bl	b718 <_impl_k_sleep>
    1e74:	e7ce      	b.n	1e14 <main+0x80>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	0000c464 	.word	0x0000c464
    1e7c:	20000010 	.word	0x20000010
    1e80:	20000000 	.word	0x20000000
    1e84:	00001d49 	.word	0x00001d49
    1e88:	04020000 	.word	0x04020000
    1e8c:	0000c46b 	.word	0x0000c46b
    1e90:	0000c471 	.word	0x0000c471
    1e94:	0000c475 	.word	0x0000c475
    1e98:	0000c48e 	.word	0x0000c48e
    1e9c:	20000014 	.word	0x20000014
    1ea0:	0000c495 	.word	0x0000c495
    1ea4:	0000c4ac 	.word	0x0000c4ac
    1ea8:	0000c4cb 	.word	0x0000c4cb
    1eac:	20000018 	.word	0x20000018
    1eb0:	0000c4f2 	.word	0x0000c4f2
    1eb4:	412e8480 	.word	0x412e8480
    1eb8:	0000c518 	.word	0x0000c518
    1ebc:	00001388 	.word	0x00001388

00001ec0 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
    1ec0:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
    1ec2:	f3ef 8010 	mrs	r0, PRIMASK
    1ec6:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    1ec8:	491d      	ldr	r1, [pc, #116]	; (1f40 <nordicsemi_nrf51_init+0x80>)
    1eca:	780b      	ldrb	r3, [r1, #0]
    1ecc:	2b01      	cmp	r3, #1
    1ece:	d10f      	bne.n	1ef0 <nordicsemi_nrf51_init+0x30>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    1ed0:	4b1c      	ldr	r3, [pc, #112]	; (1f44 <nordicsemi_nrf51_init+0x84>)
    1ed2:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    1ed4:	071b      	lsls	r3, r3, #28
    1ed6:	d10b      	bne.n	1ef0 <nordicsemi_nrf51_init+0x30>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    1ed8:	4b1b      	ldr	r3, [pc, #108]	; (1f48 <nordicsemi_nrf51_init+0x88>)
    1eda:	25e0      	movs	r5, #224	; 0xe0
    1edc:	681a      	ldr	r2, [r3, #0]
    1ede:	23f0      	movs	r3, #240	; 0xf0
    1ee0:	0014      	movs	r4, r2
    1ee2:	401c      	ands	r4, r3
    1ee4:	422a      	tst	r2, r5
    1ee6:	d11a      	bne.n	1f1e <nordicsemi_nrf51_init+0x5e>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    1ee8:	4a18      	ldr	r2, [pc, #96]	; (1f4c <nordicsemi_nrf51_init+0x8c>)
    1eea:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    1eec:	421a      	tst	r2, r3
    1eee:	d019      	beq.n	1f24 <nordicsemi_nrf51_init+0x64>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    1ef0:	680b      	ldr	r3, [r1, #0]
    1ef2:	b2db      	uxtb	r3, r3
    1ef4:	2b01      	cmp	r3, #1
    1ef6:	d10d      	bne.n	1f14 <nordicsemi_nrf51_init+0x54>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    1ef8:	4a12      	ldr	r2, [pc, #72]	; (1f44 <nordicsemi_nrf51_init+0x84>)
    1efa:	6812      	ldr	r2, [r2, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    1efc:	0712      	lsls	r2, r2, #28
    1efe:	d109      	bne.n	1f14 <nordicsemi_nrf51_init+0x54>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    1f00:	21f0      	movs	r1, #240	; 0xf0
    1f02:	4a11      	ldr	r2, [pc, #68]	; (1f48 <nordicsemi_nrf51_init+0x88>)
    1f04:	6812      	ldr	r2, [r2, #0]
    1f06:	400a      	ands	r2, r1
    1f08:	2a40      	cmp	r2, #64	; 0x40
    1f0a:	d103      	bne.n	1f14 <nordicsemi_nrf51_init+0x54>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    1f0c:	4a0f      	ldr	r2, [pc, #60]	; (1f4c <nordicsemi_nrf51_init+0x8c>)
    1f0e:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    1f10:	420a      	tst	r2, r1
    1f12:	d00f      	beq.n	1f34 <nordicsemi_nrf51_init+0x74>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key) {
    1f14:	2800      	cmp	r0, #0
    1f16:	d100      	bne.n	1f1a <nordicsemi_nrf51_init+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1f18:	b662      	cpsie	i
}
    1f1a:	2000      	movs	r0, #0
    1f1c:	bd30      	pop	{r4, r5, pc}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
    1f1e:	2c30      	cmp	r4, #48	; 0x30
    1f20:	d0e2      	beq.n	1ee8 <nordicsemi_nrf51_init+0x28>
    1f22:	e7e5      	b.n	1ef0 <nordicsemi_nrf51_init+0x30>
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
    1f24:	4a0a      	ldr	r2, [pc, #40]	; (1f50 <nordicsemi_nrf51_init+0x90>)
    1f26:	4b0b      	ldr	r3, [pc, #44]	; (1f54 <nordicsemi_nrf51_init+0x94>)
    1f28:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
    1f2a:	2280      	movs	r2, #128	; 0x80
    1f2c:	4b0a      	ldr	r3, [pc, #40]	; (1f58 <nordicsemi_nrf51_init+0x98>)
    1f2e:	0212      	lsls	r2, r2, #8
    1f30:	601a      	str	r2, [r3, #0]
    1f32:	e7dd      	b.n	1ef0 <nordicsemi_nrf51_init+0x30>
		NRF_MPU->DISABLEINDEBUG =
    1f34:	22c1      	movs	r2, #193	; 0xc1
    1f36:	2180      	movs	r1, #128	; 0x80
    1f38:	00d2      	lsls	r2, r2, #3
    1f3a:	05c9      	lsls	r1, r1, #23
    1f3c:	508b      	str	r3, [r1, r2]
    1f3e:	e7e9      	b.n	1f14 <nordicsemi_nrf51_init+0x54>
    1f40:	f0000fe0 	.word	0xf0000fe0
    1f44:	f0000fe4 	.word	0xf0000fe4
    1f48:	f0000fe8 	.word	0xf0000fe8
    1f4c:	f0000fec 	.word	0xf0000fec
    1f50:	c007ffdf 	.word	0xc007ffdf
    1f54:	40000504 	.word	0x40000504
    1f58:	40006c18 	.word	0x40006c18

00001f5c <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1f5c:	4808      	ldr	r0, [pc, #32]	; (1f80 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1f5e:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    1f60:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    1f62:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    1f64:	d80a      	bhi.n	1f7c <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    1f66:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
    1f68:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1f6a:	d007      	beq.n	1f7c <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    1f6c:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    1f6e:	f009 fc25 	bl	b7bc <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    1f72:	bc01      	pop	{r0}
    mov lr, r0
    1f74:	4686      	mov	lr, r0
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1f76:	4903      	ldr	r1, [pc, #12]	; (1f84 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    1f78:	4a03      	ldr	r2, [pc, #12]	; (1f88 <_EXIT_EXC+0xc>)
    str r2, [r1]
    1f7a:	600a      	str	r2, [r1, #0]

00001f7c <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    1f7c:	4770      	bx	lr
    1f7e:	0000      	.short	0x0000
    ldr r0, =_kernel
    1f80:	20000bd4 	.word	0x20000bd4
    ldr r1, =_SCS_ICSR
    1f84:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
    1f88:	10000000 	.word	0x10000000

00001f8c <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f8e:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
    1f90:	2200      	movs	r2, #0
    1f92:	2603      	movs	r6, #3
    1f94:	25ff      	movs	r5, #255	; 0xff
    1f96:	00a4      	lsls	r4, r4, #2
    1f98:	0010      	movs	r0, r2
    1f9a:	002f      	movs	r7, r5
    1f9c:	4030      	ands	r0, r6
    1f9e:	00c0      	lsls	r0, r0, #3
    1fa0:	4087      	lsls	r7, r0
    1fa2:	0893      	lsrs	r3, r2, #2
    1fa4:	4904      	ldr	r1, [pc, #16]	; (1fb8 <_IntLibInit+0x2c>)
    1fa6:	009b      	lsls	r3, r3, #2
    1fa8:	185b      	adds	r3, r3, r1
    1faa:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1fac:	3201      	adds	r2, #1
    1fae:	43b9      	bics	r1, r7
    1fb0:	5119      	str	r1, [r3, r4]
    1fb2:	2a1a      	cmp	r2, #26
    1fb4:	d1f0      	bne.n	1f98 <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb8:	e000e100 	.word	0xe000e100

00001fbc <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1fbc:	4913      	ldr	r1, [pc, #76]	; (200c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1fbe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1fc0:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    1fc2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1fc4:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
    1fc8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
    1fca:	4643      	mov	r3, r8
    mov r4, r9
    1fcc:	464c      	mov	r4, r9
    mov r5, r10
    1fce:	4655      	mov	r5, sl
    mov r6, r11
    1fd0:	465e      	mov	r6, fp
    mov r7, ip
    1fd2:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
    1fd4:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1fd6:	4f0e      	ldr	r7, [pc, #56]	; (2010 <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1fd8:	4e0e      	ldr	r6, [pc, #56]	; (2014 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
    1fda:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1fdc:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1fde:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1fe0:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1fe2:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
    1fe4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1fe6:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
    1fe8:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
    1fea:	d100      	bne.n	1fee <_thread_irq_disabled>
    cpsie i
    1fec:	b662      	cpsie	i

00001fee <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
    1fee:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
    1ff0:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
    1ff2:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
    1ff4:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
    1ff6:	4698      	mov	r8, r3
    mov r9, r4
    1ff8:	46a1      	mov	r9, r4
    mov r10, r5
    1ffa:	46aa      	mov	sl, r5
    mov r11, r6
    1ffc:	46b3      	mov	fp, r6
    mov ip, r7
    1ffe:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    2000:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
    2002:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    2004:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    2008:	4770      	bx	lr
    200a:	0000      	.short	0x0000
    ldr r1, =_kernel
    200c:	20000bd4 	.word	0x20000bd4
    ldr v4, =_SCS_ICSR
    2010:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
    2014:	08000000 	.word	0x08000000

00002018 <__svc>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
    2018:	2004      	movs	r0, #4
    mov r1, lr
    201a:	4671      	mov	r1, lr
    tst r1, r0
    201c:	4201      	tst	r1, r0
    beq _stack_frame_msp
    201e:	d002      	beq.n	2026 <_stack_frame_msp>
    mrs r0, PSP
    2020:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
    2024:	d101      	bne.n	202a <_stack_frame_endif>

00002026 <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
    2026:	f3ef 8008 	mrs	r0, MSP

0000202a <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    202a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
    202c:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
    202e:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
    2030:	2902      	cmp	r1, #2
    beq _oops
    2032:	d000      	beq.n	2036 <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
    2034:	e792      	b.n	1f5c <_ExcExit>

00002036 <_oops>:

_oops:
    push {lr}
    2036:	b500      	push	{lr}
    blx _do_kernel_oops
    2038:	f000 f91c 	bl	2274 <_do_kernel_oops>
    pop {pc}
    203c:	bd00      	pop	{pc}
    203e:	46c0      	nop			; (mov r8, r8)

00002040 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
    2040:	4905      	ldr	r1, [pc, #20]	; (2058 <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2042:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
    2044:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    2046:	4905      	ldr	r1, [pc, #20]	; (205c <__swap+0x1c>)
    ldr r1, [r1]
    2048:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
    204a:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
    204c:	4904      	ldr	r1, [pc, #16]	; (2060 <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
    204e:	4b05      	ldr	r3, [pc, #20]	; (2064 <__swap+0x24>)
    str r3, [r1, #0]
    2050:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
    2052:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
    2054:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
    2056:	4770      	bx	lr
    ldr r1, =_kernel
    2058:	20000bd4 	.word	0x20000bd4
    ldr r1, =_k_neg_eagain
    205c:	0000cab0 	.word	0x0000cab0
    ldr r1, =_SCS_ICSR
    2060:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
    2064:	10000000 	.word	0x10000000

00002068 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2068:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <_Fault+0x3c>)
{
    206a:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    206c:	685a      	ldr	r2, [r3, #4]
{
    206e:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2070:	05d2      	lsls	r2, r2, #23
    2072:	0dd2      	lsrs	r2, r2, #23
	switch (fault) {
    2074:	2a03      	cmp	r2, #3
    2076:	d10e      	bne.n	2096 <_Fault+0x2e>
	PR_EXC("***** HARD FAULT *****\n");
    2078:	480b      	ldr	r0, [pc, #44]	; (20a8 <_Fault+0x40>)
    207a:	f000 fb43 	bl	2704 <printk>

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    207e:	f009 fb6f 	bl	b760 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
    2082:	69a2      	ldr	r2, [r4, #24]
    2084:	0001      	movs	r1, r0
    2086:	4809      	ldr	r0, [pc, #36]	; (20ac <_Fault+0x44>)
	PR_EXC("***** %s %d) *****\n",
    2088:	f000 fb3c 	bl	2704 <printk>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    208c:	0021      	movs	r1, r4
    208e:	2000      	movs	r0, #0
    2090:	f000 f8f6 	bl	2280 <_SysFatalErrorHandler>
}
    2094:	bd10      	pop	{r4, pc}
	PR_EXC("***** %s %d) *****\n",
    2096:	4906      	ldr	r1, [pc, #24]	; (20b0 <_Fault+0x48>)
    2098:	2a0f      	cmp	r2, #15
    209a:	dd00      	ble.n	209e <_Fault+0x36>
    209c:	4905      	ldr	r1, [pc, #20]	; (20b4 <_Fault+0x4c>)
    209e:	3a10      	subs	r2, #16
    20a0:	4805      	ldr	r0, [pc, #20]	; (20b8 <_Fault+0x50>)
    20a2:	e7f1      	b.n	2088 <_Fault+0x20>
    20a4:	e000ed00 	.word	0xe000ed00
    20a8:	0000c56d 	.word	0x0000c56d
    20ac:	0000c585 	.word	0x0000c585
    20b0:	0000c53f 	.word	0x0000c53f
    20b4:	0000c554 	.word	0x0000c554
    20b8:	0000c5cf 	.word	0x0000c5cf

000020bc <_FaultInit>:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    20bc:	4770      	bx	lr
	...

000020c0 <_arch_irq_enable>:
  if ((int32_t)(IRQn) >= 0)
    20c0:	0603      	lsls	r3, r0, #24
    20c2:	d405      	bmi.n	20d0 <_arch_irq_enable+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20c4:	231f      	movs	r3, #31
    20c6:	4018      	ands	r0, r3
    20c8:	3b1e      	subs	r3, #30
    20ca:	4083      	lsls	r3, r0
    20cc:	4a01      	ldr	r2, [pc, #4]	; (20d4 <_arch_irq_enable+0x14>)
    20ce:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
    20d0:	4770      	bx	lr
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	e000e100 	.word	0xe000e100

000020d8 <_arch_irq_disable>:
  if ((int32_t)(IRQn) >= 0)
    20d8:	0603      	lsls	r3, r0, #24
    20da:	d409      	bmi.n	20f0 <_arch_irq_disable+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20dc:	231f      	movs	r3, #31
    20de:	4018      	ands	r0, r3
    20e0:	3b1e      	subs	r3, #30
    20e2:	4083      	lsls	r3, r0
    20e4:	4a03      	ldr	r2, [pc, #12]	; (20f4 <_arch_irq_disable+0x1c>)
    20e6:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    20e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20ec:	f3bf 8f6f 	isb	sy
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
    20f0:	4770      	bx	lr
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	e000e104 	.word	0xe000e104

000020f8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    20f8:	0943      	lsrs	r3, r0, #5
    20fa:	4a05      	ldr	r2, [pc, #20]	; (2110 <_arch_irq_is_enabled+0x18>)
    20fc:	009b      	lsls	r3, r3, #2
    20fe:	589b      	ldr	r3, [r3, r2]
    2100:	221f      	movs	r2, #31
    2102:	4010      	ands	r0, r2
    2104:	3a1e      	subs	r2, #30
    2106:	4082      	lsls	r2, r0
    2108:	0010      	movs	r0, r2
    210a:	4018      	ands	r0, r3
}
    210c:	4770      	bx	lr
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	e000e100 	.word	0xe000e100

00002114 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2114:	b243      	sxtb	r3, r0
{
    2116:	b570      	push	{r4, r5, r6, lr}
    2118:	0189      	lsls	r1, r1, #6
  if ((int32_t)(IRQn) >= 0)
    211a:	2b00      	cmp	r3, #0
    211c:	db12      	blt.n	2144 <_irq_priority_set+0x30>
    211e:	4a14      	ldr	r2, [pc, #80]	; (2170 <_irq_priority_set+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2120:	089b      	lsrs	r3, r3, #2
    2122:	2503      	movs	r5, #3
    2124:	009b      	lsls	r3, r3, #2
    2126:	189b      	adds	r3, r3, r2
    2128:	22ff      	movs	r2, #255	; 0xff
    212a:	4028      	ands	r0, r5
    212c:	40a8      	lsls	r0, r5
    212e:	0015      	movs	r5, r2
    2130:	24c0      	movs	r4, #192	; 0xc0
    2132:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2134:	4011      	ands	r1, r2
    2136:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2138:	00a4      	lsls	r4, r4, #2
    213a:	591e      	ldr	r6, [r3, r4]
    213c:	43ae      	bics	r6, r5
    213e:	4331      	orrs	r1, r6
    2140:	5119      	str	r1, [r3, r4]
}
    2142:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2144:	2403      	movs	r4, #3
    2146:	230f      	movs	r3, #15
    2148:	b2c0      	uxtb	r0, r0
    214a:	4003      	ands	r3, r0
    214c:	4020      	ands	r0, r4
    214e:	40a0      	lsls	r0, r4
    2150:	34fc      	adds	r4, #252	; 0xfc
    2152:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2154:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2156:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2158:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    215a:	3b08      	subs	r3, #8
    215c:	4a05      	ldr	r2, [pc, #20]	; (2174 <_irq_priority_set+0x60>)
    215e:	089b      	lsrs	r3, r3, #2
    2160:	009b      	lsls	r3, r3, #2
    2162:	189b      	adds	r3, r3, r2
    2164:	69da      	ldr	r2, [r3, #28]
    2166:	43aa      	bics	r2, r5
    2168:	4311      	orrs	r1, r2
    216a:	61d9      	str	r1, [r3, #28]
    216c:	e7e9      	b.n	2142 <_irq_priority_set+0x2e>
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	e000e100 	.word	0xe000e100
    2174:	e000ed00 	.word	0xe000ed00

00002178 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
    2178:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
    217a:	f000 f843 	bl	2204 <__hard_fault>
}
    217e:	bd10      	pop	{r4, pc}

00002180 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    2180:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    2182:	f3ef 8410 	mrs	r4, PRIMASK
    2186:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2188:	4b05      	ldr	r3, [pc, #20]	; (21a0 <_arch_isr_direct_pm+0x20>)
    218a:	6998      	ldr	r0, [r3, #24]
    218c:	2800      	cmp	r0, #0
    218e:	d003      	beq.n	2198 <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    2190:	2200      	movs	r2, #0
    2192:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    2194:	f008 fe6a 	bl	ae6c <_sys_power_save_idle_exit>
	if (key) {
    2198:	2c00      	cmp	r4, #0
    219a:	d100      	bne.n	219e <_arch_isr_direct_pm+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
    219c:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    219e:	bd10      	pop	{r4, pc}
    21a0:	20000bd4 	.word	0x20000bd4

000021a4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    21a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21a6:	0017      	movs	r7, r2
    21a8:	001e      	movs	r6, r3
    21aa:	000c      	movs	r4, r1
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    21ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    21b0:	2204      	movs	r2, #4
    21b2:	0005      	movs	r5, r0
    21b4:	f009 fdea 	bl	bd8c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    21b8:	0039      	movs	r1, r7
    21ba:	2207      	movs	r2, #7
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    21bc:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    21be:	2300      	movs	r3, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    21c0:	3920      	subs	r1, #32
    21c2:	1861      	adds	r1, r4, r1
    21c4:	4391      	bics	r1, r2
	pInitCtx->pc &= 0xfffffffe;
    21c6:	4a09      	ldr	r2, [pc, #36]	; (21ec <_new_thread+0x48>)
    21c8:	64eb      	str	r3, [r5, #76]	; 0x4c
    21ca:	4382      	bics	r2, r0
	thread->fn_abort = NULL;
    21cc:	652b      	str	r3, [r5, #80]	; 0x50
    21ce:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    21d0:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->a1 = (u32_t)pEntry;
    21d2:	600e      	str	r6, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
    21d4:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    21d6:	9a07      	ldr	r2, [sp, #28]
    21d8:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    21da:	9a08      	ldr	r2, [sp, #32]
    21dc:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    21de:	2280      	movs	r2, #128	; 0x80
    21e0:	0452      	lsls	r2, r2, #17
    21e2:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    21e4:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    21e6:	65ab      	str	r3, [r5, #88]	; 0x58
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
	thread_monitor_init(thread);
#endif
}
    21e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	0000bbf9 	.word	0x0000bbf9

000021f0 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    21f0:	4901      	ldr	r1, [pc, #4]	; (21f8 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    21f2:	2210      	movs	r2, #16
	str r2, [r1]
    21f4:	600a      	str	r2, [r1, #0]
	bx lr
    21f6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    21f8:	e000ed10 	.word	0xe000ed10

000021fc <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
    21fc:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    21fe:	bf30      	wfi

	bx lr
    2200:	4770      	bx	lr
    2202:	46c0      	nop			; (mov r8, r8)

00002204 <__hard_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* force unlock interrupts */
	cpsie i
    2204:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
    2206:	2004      	movs	r0, #4
	mov r1, lr
    2208:	4671      	mov	r1, lr
	tst r1, r0
    220a:	4201      	tst	r1, r0
	beq _stack_frame_msp
    220c:	d002      	beq.n	2214 <_stack_frame_msp>
	mrs r0, PSP
    220e:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
    2212:	d101      	bne.n	2218 <_stack_frame_endif>

00002214 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
    2214:	f3ef 8008 	mrs	r0, MSP

00002218 <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    2218:	b500      	push	{lr}
	bl _Fault
    221a:	f7ff ff25 	bl	2068 <_Fault>

	pop {pc}
    221e:	bd00      	pop	{pc}

00002220 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	0004      	movs	r4, r0
    2224:	000d      	movs	r5, r1
	switch (reason) {
    2226:	2804      	cmp	r0, #4
    2228:	d009      	beq.n	223e <_NanoFatalErrorHandler+0x1e>
    222a:	2805      	cmp	r0, #5
    222c:	d016      	beq.n	225c <_NanoFatalErrorHandler+0x3c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    222e:	480c      	ldr	r0, [pc, #48]	; (2260 <_NanoFatalErrorHandler+0x40>)
	switch (reason) {
    2230:	2c03      	cmp	r4, #3
    2232:	d005      	beq.n	2240 <_NanoFatalErrorHandler+0x20>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    2234:	0021      	movs	r1, r4
    2236:	480b      	ldr	r0, [pc, #44]	; (2264 <_NanoFatalErrorHandler+0x44>)
    2238:	f000 fa64 	bl	2704 <printk>
		break;
    223c:	e002      	b.n	2244 <_NanoFatalErrorHandler+0x24>
		printk("***** Kernel OOPS! *****\n");
    223e:	480a      	ldr	r0, [pc, #40]	; (2268 <_NanoFatalErrorHandler+0x48>)
    2240:	f000 fa60 	bl	2704 <printk>
    2244:	f009 fa8c 	bl	b760 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
    2248:	69aa      	ldr	r2, [r5, #24]
    224a:	0001      	movs	r1, r0
    224c:	4807      	ldr	r0, [pc, #28]	; (226c <_NanoFatalErrorHandler+0x4c>)
    224e:	f000 fa59 	bl	2704 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    2252:	0029      	movs	r1, r5
    2254:	0020      	movs	r0, r4
    2256:	f000 f813 	bl	2280 <_SysFatalErrorHandler>
}
    225a:	bd70      	pop	{r4, r5, r6, pc}
		printk("***** Kernel Panic! *****\n");
    225c:	4804      	ldr	r0, [pc, #16]	; (2270 <_NanoFatalErrorHandler+0x50>)
    225e:	e7ef      	b.n	2240 <_NanoFatalErrorHandler+0x20>
    2260:	0000c5e3 	.word	0x0000c5e3
    2264:	0000c63e 	.word	0x0000c63e
    2268:	0000c609 	.word	0x0000c609
    226c:	0000c661 	.word	0x0000c661
    2270:	0000c623 	.word	0x0000c623

00002274 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    2274:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
    2276:	0001      	movs	r1, r0
    2278:	6800      	ldr	r0, [r0, #0]
    227a:	f7ff ffd1 	bl	2220 <_NanoFatalErrorHandler>
}
    227e:	bd10      	pop	{r4, pc}

00002280 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    2280:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    2282:	2805      	cmp	r0, #5
    2284:	d00c      	beq.n	22a0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    2286:	f009 fca5 	bl	bbd4 <k_is_in_isr>
    228a:	2800      	cmp	r0, #0
    228c:	d00b      	beq.n	22a6 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    228e:	f009 fca1 	bl	bbd4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    2292:	490b      	ldr	r1, [pc, #44]	; (22c0 <_SysFatalErrorHandler+0x40>)
    2294:	2800      	cmp	r0, #0
    2296:	d100      	bne.n	229a <_SysFatalErrorHandler+0x1a>
    2298:	490a      	ldr	r1, [pc, #40]	; (22c4 <_SysFatalErrorHandler+0x44>)
    229a:	480b      	ldr	r0, [pc, #44]	; (22c8 <_SysFatalErrorHandler+0x48>)
    229c:	f000 fa32 	bl	2704 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    22a0:	f7ff ffac 	bl	21fc <k_cpu_idle>
    22a4:	e7fc      	b.n	22a0 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    22a6:	f009 fc9f 	bl	bbe8 <_is_thread_essential>
    22aa:	2800      	cmp	r0, #0
    22ac:	d1ef      	bne.n	228e <_SysFatalErrorHandler+0xe>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    22ae:	4c07      	ldr	r4, [pc, #28]	; (22cc <_SysFatalErrorHandler+0x4c>)
    22b0:	4807      	ldr	r0, [pc, #28]	; (22d0 <_SysFatalErrorHandler+0x50>)
    22b2:	68a1      	ldr	r1, [r4, #8]
    22b4:	f000 fa26 	bl	2704 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    22b8:	68a0      	ldr	r0, [r4, #8]
    22ba:	f000 f80b 	bl	22d4 <_impl_k_thread_abort>
	}
	CODE_UNREACHABLE;
}
    22be:	bd10      	pop	{r4, pc}
    22c0:	0000c69d 	.word	0x0000c69d
    22c4:	0000c6a1 	.word	0x0000c6a1
    22c8:	0000c6b2 	.word	0x0000c6b2
    22cc:	20000bd4 	.word	0x20000bd4
    22d0:	0000c6d2 	.word	0x0000c6d2

000022d4 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    22d4:	b570      	push	{r4, r5, r6, lr}
    22d6:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    22d8:	f3ef 8410 	mrs	r4, PRIMASK
    22dc:	b672      	cpsid	i
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    22de:	f009 fced 	bl	bcbc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    22e2:	4b0b      	ldr	r3, [pc, #44]	; (2310 <_impl_k_thread_abort+0x3c>)
    22e4:	689b      	ldr	r3, [r3, #8]
    22e6:	429d      	cmp	r5, r3
    22e8:	d10d      	bne.n	2306 <_impl_k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    22ea:	4b0a      	ldr	r3, [pc, #40]	; (2314 <_impl_k_thread_abort+0x40>)
    22ec:	685a      	ldr	r2, [r3, #4]
    22ee:	05d2      	lsls	r2, r2, #23
    22f0:	d104      	bne.n	22fc <_impl_k_thread_abort+0x28>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    22f2:	f009 fa63 	bl	b7bc <_update_time_slice_before_swap>

	return __swap(key);
    22f6:	0020      	movs	r0, r4
    22f8:	f7ff fea2 	bl	2040 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    22fc:	2280      	movs	r2, #128	; 0x80
    22fe:	6859      	ldr	r1, [r3, #4]
    2300:	0552      	lsls	r2, r2, #21
    2302:	430a      	orrs	r2, r1
    2304:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    2306:	0020      	movs	r0, r4
    2308:	f009 f99c 	bl	b644 <_reschedule_threads>
}
    230c:	bd70      	pop	{r4, r5, r6, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	20000bd4 	.word	0x20000bd4
    2314:	e000ed00 	.word	0xe000ed00

00002318 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    2318:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    231a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    231c:	4a0a      	ldr	r2, [pc, #40]	; (2348 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    231e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2320:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	beq _idle_state_cleared
    2322:	d003      	beq.n	232c <_idle_state_cleared>
	movs.n r1, #0
    2324:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
    2326:	6191      	str	r1, [r2, #24]
	blx _sys_power_save_idle_exit
    2328:	f008 fda0 	bl	ae6c <_sys_power_save_idle_exit>

0000232c <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    232c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    232e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
    2332:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
    2334:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
    2336:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    2338:	4904      	ldr	r1, [pc, #16]	; (234c <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    233a:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    233c:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    233e:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
    2340:	bc08      	pop	{r3}
	mov lr, r3
    2342:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    2344:	e60a      	b.n	1f5c <_ExcExit>
    2346:	0000      	.short	0x0000
	ldr r2, =_kernel
    2348:	20000bd4 	.word	0x20000bd4
	ldr r1, =_sw_isr_table
    234c:	000000a8 	.word	0x000000a8

00002350 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
    2350:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    2352:	4804      	ldr	r0, [pc, #16]	; (2364 <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2354:	4904      	ldr	r1, [pc, #16]	; (2368 <__reset+0x18>)
    adds r0, r0, r1
    2356:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2358:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    235c:	2002      	movs	r0, #2
    msr CONTROL, r0
    235e:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    2362:	e006      	b.n	2372 <_PrepC>
    ldr r0, =_interrupt_stack
    2364:	20001b00 	.word	0x20001b00
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2368:	00000280 	.word	0x00000280

0000236c <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    236c:	bf30      	wfi
    b _SysNmiOnReset
    236e:	e7fd      	b.n	236c <_SysNmiOnReset>

00002370 <relocate_vector_table>:
	size_t vector_size = (size_t)_vector_end - (size_t)_vector_start;
	memcpy(VECTOR_ADDRESS, _vector_start, vector_size);
#elif defined(CONFIG_SW_VECTOR_RELAY)
	_vector_table_pointer = _vector_start;
#endif
}
    2370:	4770      	bx	lr

00002372 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    2372:	b510      	push	{r4, lr}
	relocate_vector_table();
    2374:	f7ff fffc 	bl	2370 <relocate_vector_table>
	enable_floating_point();
	_bss_zero();
    2378:	f008 fda8 	bl	aecc <_bss_zero>
	_data_copy();
    237c:	f008 fdb2 	bl	aee4 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    2380:	f008 fdda 	bl	af38 <_Cstart>

00002384 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    2384:	b510      	push	{r4, lr}
	handler();
    2386:	f7ff fff1 	bl	236c <_SysNmiOnReset>
	_ExcExit();
    238a:	f7ff fde7 	bl	1f5c <_ExcExit>
}
    238e:	bd10      	pop	{r4, pc}

00002390 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2390:	2000      	movs	r0, #0
    2392:	4770      	bx	lr

00002394 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2394:	680b      	ldr	r3, [r1, #0]
{
    2396:	b510      	push	{r4, lr}
	ctx->count++;
    2398:	3301      	adds	r3, #1
    239a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    239c:	4b01      	ldr	r3, [pc, #4]	; (23a4 <char_out+0x10>)
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	4798      	blx	r3
}
    23a2:	bd10      	pop	{r4, pc}
    23a4:	200021ac 	.word	0x200021ac

000023a8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    23a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23aa:	b087      	sub	sp, #28
    23ac:	9303      	str	r3, [sp, #12]
    23ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    23b0:	0007      	movs	r7, r0
    23b2:	9102      	str	r1, [sp, #8]
    23b4:	9300      	str	r3, [sp, #0]
    23b6:	2b00      	cmp	r3, #0
    23b8:	dc01      	bgt.n	23be <_printk_dec_ulong+0x16>
    23ba:	2301      	movs	r3, #1
    23bc:	9300      	str	r3, [sp, #0]
    23be:	2320      	movs	r3, #32
    23c0:	9305      	str	r3, [sp, #20]
    23c2:	9b03      	ldr	r3, [sp, #12]
    23c4:	2b01      	cmp	r3, #1
    23c6:	d101      	bne.n	23cc <_printk_dec_ulong+0x24>
    23c8:	332f      	adds	r3, #47	; 0x2f
    23ca:	9305      	str	r3, [sp, #20]
    23cc:	230a      	movs	r3, #10
    23ce:	9301      	str	r3, [sp, #4]
    23d0:	2300      	movs	r3, #0
    23d2:	0014      	movs	r4, r2
    23d4:	2601      	movs	r6, #1
    23d6:	4d1f      	ldr	r5, [pc, #124]	; (2454 <_printk_dec_ulong+0xac>)
    23d8:	9304      	str	r3, [sp, #16]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    23da:	9b04      	ldr	r3, [sp, #16]
    23dc:	2b00      	cmp	r3, #0
    23de:	d101      	bne.n	23e4 <_printk_dec_ulong+0x3c>
    23e0:	42a5      	cmp	r5, r4
    23e2:	d226      	bcs.n	2432 <_printk_dec_ulong+0x8a>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    23e4:	1c69      	adds	r1, r5, #1
    23e6:	0020      	movs	r0, r4
    23e8:	f7fd feee 	bl	1c8 <__aeabi_uidiv>
    23ec:	9902      	ldr	r1, [sp, #8]
    23ee:	3030      	adds	r0, #48	; 0x30
    23f0:	47b8      	blx	r7
			found_largest_digit = 1;
    23f2:	2301      	movs	r3, #1
			digits++;
    23f4:	3601      	adds	r6, #1
			found_largest_digit = 1;
    23f6:	9304      	str	r3, [sp, #16]
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    23f8:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
    23fa:	1c69      	adds	r1, r5, #1
		remaining--;
    23fc:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
    23fe:	0020      	movs	r0, r4
		remaining--;
    2400:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
    2402:	f7fd ff25 	bl	250 <__aeabi_uidivmod>
		pos /= 10;
    2406:	0028      	movs	r0, r5
		remainder %= (pos + 1);
    2408:	000c      	movs	r4, r1
		pos /= 10;
    240a:	210a      	movs	r1, #10
    240c:	f7fd fedc 	bl	1c8 <__aeabi_uidiv>
	while (pos >= 9) {
    2410:	9b01      	ldr	r3, [sp, #4]
		pos /= 10;
    2412:	0005      	movs	r5, r0
	while (pos >= 9) {
    2414:	2b01      	cmp	r3, #1
    2416:	d1e0      	bne.n	23da <_printk_dec_ulong+0x32>
	}
	out((int)(remainder + 48), ctx);
    2418:	0020      	movs	r0, r4
    241a:	9902      	ldr	r1, [sp, #8]
    241c:	3030      	adds	r0, #48	; 0x30
    241e:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
    2420:	9b03      	ldr	r3, [sp, #12]
    2422:	2b03      	cmp	r3, #3
    2424:	d103      	bne.n	242e <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
    2426:	9b00      	ldr	r3, [sp, #0]
    2428:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    242a:	2c00      	cmp	r4, #0
    242c:	dc0d      	bgt.n	244a <_printk_dec_ulong+0xa2>
			out(' ', ctx);
		}
	}
}
    242e:	b007      	add	sp, #28
    2430:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (remaining <= min_width
    2432:	9b00      	ldr	r3, [sp, #0]
    2434:	9a01      	ldr	r2, [sp, #4]
    2436:	4293      	cmp	r3, r2
    2438:	dbde      	blt.n	23f8 <_printk_dec_ulong+0x50>
				&& padding < PAD_SPACE_AFTER) {
    243a:	9b03      	ldr	r3, [sp, #12]
    243c:	2b02      	cmp	r3, #2
    243e:	d8db      	bhi.n	23f8 <_printk_dec_ulong+0x50>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2440:	9902      	ldr	r1, [sp, #8]
    2442:	9805      	ldr	r0, [sp, #20]
    2444:	47b8      	blx	r7
			digits++;
    2446:	3601      	adds	r6, #1
    2448:	e7d6      	b.n	23f8 <_printk_dec_ulong+0x50>
			out(' ', ctx);
    244a:	9902      	ldr	r1, [sp, #8]
    244c:	2020      	movs	r0, #32
    244e:	47b8      	blx	r7
    2450:	3c01      	subs	r4, #1
    2452:	e7ea      	b.n	242a <_printk_dec_ulong+0x82>
    2454:	3b9ac9ff 	.word	0x3b9ac9ff

00002458 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    2458:	680a      	ldr	r2, [r1, #0]
{
    245a:	b530      	push	{r4, r5, lr}
    245c:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    245e:	2a00      	cmp	r2, #0
    2460:	d002      	beq.n	2468 <str_out+0x10>
    2462:	684c      	ldr	r4, [r1, #4]
    2464:	42a3      	cmp	r3, r4
    2466:	db02      	blt.n	246e <str_out+0x16>
		ctx->count++;
    2468:	3301      	adds	r3, #1
    246a:	608b      	str	r3, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
    246c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    246e:	1e65      	subs	r5, r4, #1
    2470:	42ab      	cmp	r3, r5
    2472:	d103      	bne.n	247c <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
    2474:	608c      	str	r4, [r1, #8]
    2476:	2100      	movs	r1, #0
    2478:	54d1      	strb	r1, [r2, r3]
    247a:	e7f7      	b.n	246c <str_out+0x14>
		ctx->str[ctx->count++] = c;
    247c:	1c5c      	adds	r4, r3, #1
    247e:	608c      	str	r4, [r1, #8]
    2480:	54d0      	strb	r0, [r2, r3]
    2482:	e7f3      	b.n	246c <str_out+0x14>

00002484 <__printk_hook_install>:
	_char_out = fn;
    2484:	4b01      	ldr	r3, [pc, #4]	; (248c <__printk_hook_install+0x8>)
    2486:	6018      	str	r0, [r3, #0]
}
    2488:	4770      	bx	lr
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	200021ac 	.word	0x200021ac

00002490 <_vprintk>:
{
    2490:	b5f0      	push	{r4, r5, r6, r7, lr}
    2492:	001c      	movs	r4, r3
	int long_ctr = 0;
    2494:	2300      	movs	r3, #0
{
    2496:	b08d      	sub	sp, #52	; 0x34
	int long_ctr = 0;
    2498:	9305      	str	r3, [sp, #20]
	int min_width = -1;
    249a:	3b01      	subs	r3, #1
    249c:	9303      	str	r3, [sp, #12]
	enum pad_type padding = PAD_NONE;
    249e:	2300      	movs	r3, #0
{
    24a0:	0007      	movs	r7, r0
	int might_format = 0; /* 1 if encountered a '%' */
    24a2:	001e      	movs	r6, r3
{
    24a4:	9102      	str	r1, [sp, #8]
    24a6:	9207      	str	r2, [sp, #28]
	enum pad_type padding = PAD_NONE;
    24a8:	9304      	str	r3, [sp, #16]
	while (*fmt) {
    24aa:	9b07      	ldr	r3, [sp, #28]
    24ac:	7818      	ldrb	r0, [r3, #0]
    24ae:	2800      	cmp	r0, #0
    24b0:	d101      	bne.n	24b6 <_vprintk+0x26>
}
    24b2:	b00d      	add	sp, #52	; 0x34
    24b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!might_format) {
    24b6:	2e00      	cmp	r6, #0
    24b8:	d108      	bne.n	24cc <_vprintk+0x3c>
			if (*fmt != '%') {
    24ba:	2825      	cmp	r0, #37	; 0x25
    24bc:	d100      	bne.n	24c0 <_vprintk+0x30>
    24be:	e107      	b.n	26d0 <_vprintk+0x240>
				out((int)*fmt, ctx);
    24c0:	9902      	ldr	r1, [sp, #8]
    24c2:	47b8      	blx	r7
		++fmt;
    24c4:	9b07      	ldr	r3, [sp, #28]
    24c6:	3301      	adds	r3, #1
    24c8:	9307      	str	r3, [sp, #28]
    24ca:	e7ee      	b.n	24aa <_vprintk+0x1a>
			switch (*fmt) {
    24cc:	2864      	cmp	r0, #100	; 0x64
    24ce:	d05d      	beq.n	258c <_vprintk+0xfc>
    24d0:	d818      	bhi.n	2504 <_vprintk+0x74>
    24d2:	2839      	cmp	r0, #57	; 0x39
    24d4:	d80a      	bhi.n	24ec <_vprintk+0x5c>
    24d6:	2831      	cmp	r0, #49	; 0x31
    24d8:	d24c      	bcs.n	2574 <_vprintk+0xe4>
    24da:	282d      	cmp	r0, #45	; 0x2d
    24dc:	d039      	beq.n	2552 <_vprintk+0xc2>
    24de:	2830      	cmp	r0, #48	; 0x30
    24e0:	d03a      	beq.n	2558 <_vprintk+0xc8>
    24e2:	2825      	cmp	r0, #37	; 0x25
    24e4:	d108      	bne.n	24f8 <_vprintk+0x68>
				out((int)*fmt, ctx);
    24e6:	9902      	ldr	r1, [sp, #8]
    24e8:	47b8      	blx	r7
    24ea:	e065      	b.n	25b8 <_vprintk+0x128>
			switch (*fmt) {
    24ec:	2858      	cmp	r0, #88	; 0x58
    24ee:	d100      	bne.n	24f2 <_vprintk+0x62>
    24f0:	e087      	b.n	2602 <_vprintk+0x172>
    24f2:	2863      	cmp	r0, #99	; 0x63
    24f4:	d100      	bne.n	24f8 <_vprintk+0x68>
    24f6:	e0e6      	b.n	26c6 <_vprintk+0x236>
				out((int)'%', ctx);
    24f8:	9902      	ldr	r1, [sp, #8]
    24fa:	2025      	movs	r0, #37	; 0x25
    24fc:	47b8      	blx	r7
				out((int)*fmt, ctx);
    24fe:	9b07      	ldr	r3, [sp, #28]
    2500:	7818      	ldrb	r0, [r3, #0]
    2502:	e7f0      	b.n	24e6 <_vprintk+0x56>
			switch (*fmt) {
    2504:	2870      	cmp	r0, #112	; 0x70
    2506:	d072      	beq.n	25ee <_vprintk+0x15e>
    2508:	d806      	bhi.n	2518 <_vprintk+0x88>
    250a:	2869      	cmp	r0, #105	; 0x69
    250c:	d03e      	beq.n	258c <_vprintk+0xfc>
    250e:	286c      	cmp	r0, #108	; 0x6c
    2510:	d038      	beq.n	2584 <_vprintk+0xf4>
    2512:	2868      	cmp	r0, #104	; 0x68
    2514:	d1f0      	bne.n	24f8 <_vprintk+0x68>
    2516:	e7d5      	b.n	24c4 <_vprintk+0x34>
    2518:	2875      	cmp	r0, #117	; 0x75
    251a:	d057      	beq.n	25cc <_vprintk+0x13c>
    251c:	d814      	bhi.n	2548 <_vprintk+0xb8>
    251e:	2873      	cmp	r0, #115	; 0x73
    2520:	d1ea      	bne.n	24f8 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
    2522:	6826      	ldr	r6, [r4, #0]
    2524:	1d25      	adds	r5, r4, #4
    2526:	0034      	movs	r4, r6
				while (*s)
    2528:	7820      	ldrb	r0, [r4, #0]
    252a:	2800      	cmp	r0, #0
    252c:	d000      	beq.n	2530 <_vprintk+0xa0>
    252e:	e0c1      	b.n	26b4 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    2530:	9b04      	ldr	r3, [sp, #16]
    2532:	2b03      	cmp	r3, #3
    2534:	d000      	beq.n	2538 <_vprintk+0xa8>
    2536:	e0d4      	b.n	26e2 <_vprintk+0x252>
					int remaining = min_width - (s - start);
    2538:	9b03      	ldr	r3, [sp, #12]
    253a:	1ba4      	subs	r4, r4, r6
    253c:	1b1c      	subs	r4, r3, r4
					while (remaining-- > 0) {
    253e:	2c00      	cmp	r4, #0
    2540:	dd00      	ble.n	2544 <_vprintk+0xb4>
    2542:	e0bb      	b.n	26bc <_vprintk+0x22c>
				int c = va_arg(ap, int);
    2544:	002c      	movs	r4, r5
    2546:	e037      	b.n	25b8 <_vprintk+0x128>
			switch (*fmt) {
    2548:	2878      	cmp	r0, #120	; 0x78
    254a:	d05a      	beq.n	2602 <_vprintk+0x172>
    254c:	287a      	cmp	r0, #122	; 0x7a
    254e:	d0b9      	beq.n	24c4 <_vprintk+0x34>
    2550:	e7d2      	b.n	24f8 <_vprintk+0x68>
				padding = PAD_SPACE_AFTER;
    2552:	2303      	movs	r3, #3
					padding = PAD_ZERO_BEFORE;
    2554:	9304      	str	r3, [sp, #16]
    2556:	e7b5      	b.n	24c4 <_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
    2558:	9b03      	ldr	r3, [sp, #12]
    255a:	2b00      	cmp	r3, #0
    255c:	da0d      	bge.n	257a <_vprintk+0xea>
    255e:	9b04      	ldr	r3, [sp, #16]
    2560:	2b00      	cmp	r3, #0
    2562:	d100      	bne.n	2566 <_vprintk+0xd6>
    2564:	e0bb      	b.n	26de <_vprintk+0x24e>
				if (padding == PAD_NONE) {
    2566:	9b04      	ldr	r3, [sp, #16]
					min_width = 10 * min_width + *fmt - '0';
    2568:	3830      	subs	r0, #48	; 0x30
    256a:	9003      	str	r0, [sp, #12]
				if (padding == PAD_NONE) {
    256c:	2b00      	cmp	r3, #0
    256e:	d1a9      	bne.n	24c4 <_vprintk+0x34>
					padding = PAD_SPACE_BEFORE;
    2570:	3302      	adds	r3, #2
    2572:	e7ef      	b.n	2554 <_vprintk+0xc4>
				if (min_width < 0) {
    2574:	9b03      	ldr	r3, [sp, #12]
    2576:	2b00      	cmp	r3, #0
    2578:	dbf5      	blt.n	2566 <_vprintk+0xd6>
					min_width = 10 * min_width + *fmt - '0';
    257a:	230a      	movs	r3, #10
    257c:	9a03      	ldr	r2, [sp, #12]
    257e:	4353      	muls	r3, r2
    2580:	1818      	adds	r0, r3, r0
    2582:	e7f0      	b.n	2566 <_vprintk+0xd6>
				long_ctr++;
    2584:	9b05      	ldr	r3, [sp, #20]
    2586:	3301      	adds	r3, #1
    2588:	9305      	str	r3, [sp, #20]
    258a:	e79b      	b.n	24c4 <_vprintk+0x34>
				if (long_ctr < 2) {
    258c:	9b05      	ldr	r3, [sp, #20]
    258e:	2b01      	cmp	r3, #1
    2590:	dc14      	bgt.n	25bc <_vprintk+0x12c>
					d = va_arg(ap, long);
    2592:	6825      	ldr	r5, [r4, #0]
    2594:	3404      	adds	r4, #4
				if (d < 0) {
    2596:	2d00      	cmp	r5, #0
    2598:	da06      	bge.n	25a8 <_vprintk+0x118>
					out((int)'-', ctx);
    259a:	9902      	ldr	r1, [sp, #8]
    259c:	202d      	movs	r0, #45	; 0x2d
    259e:	47b8      	blx	r7
					min_width--;
    25a0:	9b03      	ldr	r3, [sp, #12]
					d = -d;
    25a2:	426d      	negs	r5, r5
					min_width--;
    25a4:	3b01      	subs	r3, #1
    25a6:	9303      	str	r3, [sp, #12]
				_printk_dec_ulong(out, ctx, d, padding,
    25a8:	002a      	movs	r2, r5
    25aa:	9b03      	ldr	r3, [sp, #12]
    25ac:	9300      	str	r3, [sp, #0]
    25ae:	9b04      	ldr	r3, [sp, #16]
				_printk_dec_ulong(out, ctx, u, padding,
    25b0:	9902      	ldr	r1, [sp, #8]
    25b2:	0038      	movs	r0, r7
    25b4:	f7ff fef8 	bl	23a8 <_printk_dec_ulong>
			might_format = 0;
    25b8:	2600      	movs	r6, #0
				break;
    25ba:	e783      	b.n	24c4 <_vprintk+0x34>
					d = (long)va_arg(ap, long long);
    25bc:	3407      	adds	r4, #7
    25be:	0023      	movs	r3, r4
    25c0:	2207      	movs	r2, #7
    25c2:	4393      	bics	r3, r2
    25c4:	001c      	movs	r4, r3
    25c6:	681d      	ldr	r5, [r3, #0]
    25c8:	3408      	adds	r4, #8
    25ca:	e7e4      	b.n	2596 <_vprintk+0x106>
				if (long_ctr < 2) {
    25cc:	9b05      	ldr	r3, [sp, #20]
    25ce:	2b01      	cmp	r3, #1
    25d0:	dc05      	bgt.n	25de <_vprintk+0x14e>
					u = va_arg(ap, unsigned long);
    25d2:	6822      	ldr	r2, [r4, #0]
    25d4:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    25d6:	9b03      	ldr	r3, [sp, #12]
    25d8:	9300      	str	r3, [sp, #0]
    25da:	9b04      	ldr	r3, [sp, #16]
    25dc:	e7e8      	b.n	25b0 <_vprintk+0x120>
					u = (unsigned long)va_arg(ap,
    25de:	3407      	adds	r4, #7
    25e0:	0023      	movs	r3, r4
    25e2:	2207      	movs	r2, #7
    25e4:	4393      	bics	r3, r2
    25e6:	001c      	movs	r4, r3
    25e8:	681a      	ldr	r2, [r3, #0]
    25ea:	3408      	adds	r4, #8
    25ec:	e7f3      	b.n	25d6 <_vprintk+0x146>
				  out('0', ctx);
    25ee:	9902      	ldr	r1, [sp, #8]
    25f0:	2030      	movs	r0, #48	; 0x30
    25f2:	47b8      	blx	r7
				  out('x', ctx);
    25f4:	9902      	ldr	r1, [sp, #8]
    25f6:	2078      	movs	r0, #120	; 0x78
    25f8:	47b8      	blx	r7
				  min_width = 8;
    25fa:	2308      	movs	r3, #8
    25fc:	9303      	str	r3, [sp, #12]
				  padding = PAD_ZERO_BEFORE;
    25fe:	3b07      	subs	r3, #7
    2600:	9304      	str	r3, [sp, #16]
				if (long_ctr < 2) {
    2602:	9b05      	ldr	r3, [sp, #20]
    2604:	2b01      	cmp	r3, #1
    2606:	dc16      	bgt.n	2636 <_vprintk+0x1a6>
					x = va_arg(ap, unsigned long);
    2608:	6823      	ldr	r3, [r4, #0]
    260a:	3404      	adds	r4, #4
    260c:	9309      	str	r3, [sp, #36]	; 0x24
	int remaining = 8; /* 8 digits max */
    260e:	2308      	movs	r3, #8
    2610:	9306      	str	r3, [sp, #24]
	int digits = 0;
    2612:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
    2614:	2508      	movs	r5, #8
	int digits = 0;
    2616:	9308      	str	r3, [sp, #32]
	int found_largest_digit = 0;
    2618:	930b      	str	r3, [sp, #44]	; 0x2c
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    261a:	3d01      	subs	r5, #1
    261c:	9809      	ldr	r0, [sp, #36]	; 0x24
    261e:	00ab      	lsls	r3, r5, #2
    2620:	40d8      	lsrs	r0, r3
    2622:	230f      	movs	r3, #15
    2624:	4018      	ands	r0, r3
		if (nibble || found_largest_digit || size == 1) {
    2626:	d112      	bne.n	264e <_vprintk+0x1be>
    2628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    262a:	2b00      	cmp	r3, #0
    262c:	d101      	bne.n	2632 <_vprintk+0x1a2>
    262e:	2d00      	cmp	r5, #0
    2630:	d12c      	bne.n	268c <_vprintk+0x1fc>
			nibble += nibble > 9 ? 87 : 48;
    2632:	2330      	movs	r3, #48	; 0x30
    2634:	e00f      	b.n	2656 <_vprintk+0x1c6>
					x = (unsigned long)va_arg(ap,
    2636:	3407      	adds	r4, #7
    2638:	0023      	movs	r3, r4
    263a:	2207      	movs	r2, #7
    263c:	4393      	bics	r3, r2
    263e:	001c      	movs	r4, r3
    2640:	681b      	ldr	r3, [r3, #0]
    2642:	3408      	adds	r4, #8
    2644:	9309      	str	r3, [sp, #36]	; 0x24
    2646:	e7e2      	b.n	260e <_vprintk+0x17e>
	for (; size; size--) {
    2648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    264a:	9306      	str	r3, [sp, #24]
    264c:	e7e5      	b.n	261a <_vprintk+0x18a>
			nibble += nibble > 9 ? 87 : 48;
    264e:	2357      	movs	r3, #87	; 0x57
    2650:	2809      	cmp	r0, #9
    2652:	d800      	bhi.n	2656 <_vprintk+0x1c6>
    2654:	3b27      	subs	r3, #39	; 0x27
			out((int)nibble, ctx);
    2656:	18c0      	adds	r0, r0, r3
    2658:	9902      	ldr	r1, [sp, #8]
    265a:	47b8      	blx	r7
			digits++;
    265c:	9b08      	ldr	r3, [sp, #32]
			found_largest_digit = 1;
    265e:	960b      	str	r6, [sp, #44]	; 0x2c
			digits++;
    2660:	3301      	adds	r3, #1
    2662:	9308      	str	r3, [sp, #32]
    2664:	9b06      	ldr	r3, [sp, #24]
    2666:	930a      	str	r3, [sp, #40]	; 0x28
	for (; size; size--) {
    2668:	2d00      	cmp	r5, #0
    266a:	d1ed      	bne.n	2648 <_vprintk+0x1b8>
	if (padding == PAD_SPACE_AFTER) {
    266c:	9b04      	ldr	r3, [sp, #16]
			might_format = 0;
    266e:	002e      	movs	r6, r5
	if (padding == PAD_SPACE_AFTER) {
    2670:	2b03      	cmp	r3, #3
    2672:	d000      	beq.n	2676 <_vprintk+0x1e6>
    2674:	e726      	b.n	24c4 <_vprintk+0x34>
		remaining = min_width * 2 - digits;
    2676:	9b03      	ldr	r3, [sp, #12]
    2678:	005d      	lsls	r5, r3, #1
    267a:	9b08      	ldr	r3, [sp, #32]
    267c:	1aed      	subs	r5, r5, r3
		while (remaining-- > 0) {
    267e:	2d00      	cmp	r5, #0
    2680:	dd9a      	ble.n	25b8 <_vprintk+0x128>
			out(' ', ctx);
    2682:	9902      	ldr	r1, [sp, #8]
    2684:	2020      	movs	r0, #32
    2686:	47b8      	blx	r7
    2688:	3d01      	subs	r5, #1
    268a:	e7f8      	b.n	267e <_vprintk+0x1ee>
		if (remaining-- <= min_width) {
    268c:	9b06      	ldr	r3, [sp, #24]
    268e:	9a06      	ldr	r2, [sp, #24]
    2690:	3b01      	subs	r3, #1
    2692:	930a      	str	r3, [sp, #40]	; 0x28
    2694:	9b03      	ldr	r3, [sp, #12]
    2696:	4293      	cmp	r3, r2
    2698:	dbe6      	blt.n	2668 <_vprintk+0x1d8>
			if (padding == PAD_ZERO_BEFORE) {
    269a:	9b04      	ldr	r3, [sp, #16]
    269c:	2b01      	cmp	r3, #1
    269e:	d103      	bne.n	26a8 <_vprintk+0x218>
				out('0', ctx);
    26a0:	2030      	movs	r0, #48	; 0x30
    26a2:	9902      	ldr	r1, [sp, #8]
				out(' ', ctx);
    26a4:	47b8      	blx	r7
    26a6:	e7df      	b.n	2668 <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
    26a8:	9b04      	ldr	r3, [sp, #16]
    26aa:	2b02      	cmp	r3, #2
    26ac:	d1dc      	bne.n	2668 <_vprintk+0x1d8>
				out(' ', ctx);
    26ae:	9902      	ldr	r1, [sp, #8]
    26b0:	2020      	movs	r0, #32
    26b2:	e7f7      	b.n	26a4 <_vprintk+0x214>
					out((int)(*s++), ctx);
    26b4:	9902      	ldr	r1, [sp, #8]
    26b6:	3401      	adds	r4, #1
    26b8:	47b8      	blx	r7
    26ba:	e735      	b.n	2528 <_vprintk+0x98>
						out(' ', ctx);
    26bc:	9902      	ldr	r1, [sp, #8]
    26be:	2020      	movs	r0, #32
    26c0:	47b8      	blx	r7
    26c2:	3c01      	subs	r4, #1
    26c4:	e73b      	b.n	253e <_vprintk+0xae>
				out(c, ctx);
    26c6:	9902      	ldr	r1, [sp, #8]
    26c8:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    26ca:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    26cc:	47b8      	blx	r7
    26ce:	e739      	b.n	2544 <_vprintk+0xb4>
				min_width = -1;
    26d0:	2301      	movs	r3, #1
    26d2:	425b      	negs	r3, r3
				long_ctr = 0;
    26d4:	9605      	str	r6, [sp, #20]
				padding = PAD_NONE;
    26d6:	9604      	str	r6, [sp, #16]
				min_width = -1;
    26d8:	9303      	str	r3, [sp, #12]
				might_format = 1;
    26da:	2601      	movs	r6, #1
    26dc:	e6f2      	b.n	24c4 <_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
    26de:	2301      	movs	r3, #1
    26e0:	e738      	b.n	2554 <_vprintk+0xc4>
				char *s = va_arg(ap, char *);
    26e2:	002c      	movs	r4, r5
			might_format = 0;
    26e4:	0006      	movs	r6, r0
    26e6:	e6ed      	b.n	24c4 <_vprintk+0x34>

000026e8 <vprintk>:
{
    26e8:	b507      	push	{r0, r1, r2, lr}
    26ea:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    26ec:	2100      	movs	r1, #0
{
    26ee:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    26f0:	9101      	str	r1, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
    26f2:	4803      	ldr	r0, [pc, #12]	; (2700 <vprintk+0x18>)
    26f4:	a901      	add	r1, sp, #4
    26f6:	f7ff fecb 	bl	2490 <_vprintk>
}
    26fa:	9801      	ldr	r0, [sp, #4]
    26fc:	bd0e      	pop	{r1, r2, r3, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	00002395 	.word	0x00002395

00002704 <printk>:
{
    2704:	b40f      	push	{r0, r1, r2, r3}
    2706:	b507      	push	{r0, r1, r2, lr}
    2708:	a904      	add	r1, sp, #16
    270a:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
    270c:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    270e:	f7ff ffeb 	bl	26e8 <vprintk>
}
    2712:	b003      	add	sp, #12
    2714:	bc08      	pop	{r3}
    2716:	b004      	add	sp, #16
    2718:	4718      	bx	r3
	...

0000271c <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    271c:	b40c      	push	{r2, r3}
    271e:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    2720:	2500      	movs	r5, #0
{
    2722:	b085      	sub	sp, #20
    2724:	ab08      	add	r3, sp, #32
    2726:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    2728:	9001      	str	r0, [sp, #4]
    272a:	9102      	str	r1, [sp, #8]
{
    272c:	0004      	movs	r4, r0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    272e:	a901      	add	r1, sp, #4
    2730:	4807      	ldr	r0, [pc, #28]	; (2750 <snprintk+0x34>)
	va_start(ap, fmt);
    2732:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    2734:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2736:	f7ff feab 	bl	2490 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    273a:	9803      	ldr	r0, [sp, #12]
    273c:	9b02      	ldr	r3, [sp, #8]
    273e:	4298      	cmp	r0, r3
    2740:	da00      	bge.n	2744 <snprintk+0x28>
		str[ctx.count] = '\0';
    2742:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    2744:	b005      	add	sp, #20
    2746:	bc30      	pop	{r4, r5}
    2748:	bc08      	pop	{r3}
    274a:	b002      	add	sp, #8
    274c:	4718      	bx	r3
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	00002459 	.word	0x00002459

00002754 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2754:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    2756:	2500      	movs	r5, #0
{
    2758:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    275a:	9001      	str	r0, [sp, #4]
    275c:	9102      	str	r1, [sp, #8]
{
    275e:	0004      	movs	r4, r0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2760:	a901      	add	r1, sp, #4
    2762:	4805      	ldr	r0, [pc, #20]	; (2778 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    2764:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2766:	f7ff fe93 	bl	2490 <_vprintk>

	if (ctx.count < ctx.max) {
    276a:	9803      	ldr	r0, [sp, #12]
    276c:	9b02      	ldr	r3, [sp, #8]
    276e:	4298      	cmp	r0, r3
    2770:	da00      	bge.n	2774 <vsnprintk+0x20>
		str[ctx.count] = '\0';
    2772:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    2774:	b005      	add	sp, #20
    2776:	bd30      	pop	{r4, r5, pc}
    2778:	00002459 	.word	0x00002459

0000277c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 26);

GEN_ABS_SYM_END
    277c:	4770      	bx	lr
	...

00002780 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	0004      	movs	r4, r0
    2784:	4d07      	ldr	r5, [pc, #28]	; (27a4 <console_out+0x24>)
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2786:	280a      	cmp	r0, #10
    2788:	d104      	bne.n	2794 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    278a:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    278c:	210d      	movs	r1, #13
    278e:	6843      	ldr	r3, [r0, #4]
    2790:	685b      	ldr	r3, [r3, #4]
    2792:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    2794:	6828      	ldr	r0, [r5, #0]
    2796:	b2e1      	uxtb	r1, r4
    2798:	6843      	ldr	r3, [r0, #4]
    279a:	685b      	ldr	r3, [r3, #4]
    279c:	4798      	blx	r3

	return c;
}
    279e:	0020      	movs	r0, r4
    27a0:	bd70      	pop	{r4, r5, r6, pc}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	20000020 	.word	0x20000020

000027a8 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    27a8:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    27aa:	4c04      	ldr	r4, [pc, #16]	; (27bc <uart_console_hook_install+0x14>)
    27ac:	0020      	movs	r0, r4
    27ae:	f7ff fa75 	bl	1c9c <__stdout_hook_install>
	__printk_hook_install(console_out);
    27b2:	0020      	movs	r0, r4
    27b4:	f7ff fe66 	bl	2484 <__printk_hook_install>
}
    27b8:	bd10      	pop	{r4, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	00002781 	.word	0x00002781

000027c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    27c0:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    27c2:	4804      	ldr	r0, [pc, #16]	; (27d4 <uart_console_init+0x14>)
    27c4:	f008 fb2a 	bl	ae1c <device_get_binding>
    27c8:	4b03      	ldr	r3, [pc, #12]	; (27d8 <uart_console_init+0x18>)
    27ca:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    27cc:	f7ff ffec 	bl	27a8 <uart_console_hook_install>

	return 0;
}
    27d0:	2000      	movs	r0, #0
    27d2:	bd10      	pop	{r4, pc}
    27d4:	0000c6f7 	.word	0x0000c6f7
    27d8:	20000020 	.word	0x20000020

000027dc <reset_display>:
		gpio_port_write(disp->dev, val);
	}
}

static void reset_display(struct mb_display *disp)
{
    27dc:	b510      	push	{r4, lr}
    27de:	0004      	movs	r4, r0
	k_timer_stop(&disp->timer);
    27e0:	3004      	adds	r0, #4

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
    27e2:	f009 fbcb 	bl	bf7c <_impl_k_timer_stop>

	disp->str = NULL;
	disp->cur_img = 0;
    27e6:	0022      	movs	r2, r4
	disp->str = NULL;
    27e8:	2300      	movs	r3, #0
	disp->cur_img = 0;
    27ea:	3239      	adds	r2, #57	; 0x39
	disp->str = NULL;
    27ec:	6563      	str	r3, [r4, #84]	; 0x54
	disp->img = NULL;
	disp->img_count = 0;
    27ee:	3a01      	subs	r2, #1
	disp->cur_img = 0;
    27f0:	7053      	strb	r3, [r2, #1]
	disp->img_count = 0;
    27f2:	7013      	strb	r3, [r2, #0]
	disp->scroll = SCROLL_OFF;
    27f4:	2207      	movs	r2, #7
    27f6:	343a      	adds	r4, #58	; 0x3a
    27f8:	7823      	ldrb	r3, [r4, #0]
    27fa:	4393      	bics	r3, r2
    27fc:	7023      	strb	r3, [r4, #0]
}
    27fe:	bd10      	pop	{r4, pc}

00002800 <start_image>:
{
    2800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2802:	0002      	movs	r2, r0
    2804:	0004      	movs	r4, r0
    2806:	468c      	mov	ip, r1
	for (row = 0; row < DISPLAY_ROWS; row++) {
    2808:	2300      	movs	r3, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    280a:	2601      	movs	r6, #1
    280c:	323c      	adds	r2, #60	; 0x3c
    280e:	2709      	movs	r7, #9
		disp->row[row] = 0;
    2810:	2100      	movs	r1, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    2812:	435f      	muls	r7, r3
		disp->row[row] = 0;
    2814:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    2816:	000d      	movs	r5, r1
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    2818:	491d      	ldr	r1, [pc, #116]	; (2890 <start_image+0x90>)
    281a:	19c9      	adds	r1, r1, r7
    281c:	9101      	str	r1, [sp, #4]
    281e:	4667      	mov	r7, ip
    2820:	9901      	ldr	r1, [sp, #4]
    2822:	5d48      	ldrb	r0, [r1, r5]
    2824:	0901      	lsrs	r1, r0, #4
    2826:	5c79      	ldrb	r1, [r7, r1]
    2828:	0700      	lsls	r0, r0, #28
    282a:	0f00      	lsrs	r0, r0, #28
    282c:	40c1      	lsrs	r1, r0
    282e:	4231      	tst	r1, r6
    2830:	d006      	beq.n	2840 <start_image+0x40>
				disp->row[row] |= BIT(LED_COL1_GPIO_PIN + col);
    2832:	0030      	movs	r0, r6
    2834:	1d29      	adds	r1, r5, #4
    2836:	4088      	lsls	r0, r1
    2838:	0001      	movs	r1, r0
    283a:	6810      	ldr	r0, [r2, #0]
    283c:	4301      	orrs	r1, r0
    283e:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    2840:	3501      	adds	r5, #1
    2842:	2d09      	cmp	r5, #9
    2844:	d1eb      	bne.n	281e <start_image+0x1e>
		disp->row[row] = ~disp->row[row] & col_mask;
    2846:	6810      	ldr	r0, [r2, #0]
    2848:	4912      	ldr	r1, [pc, #72]	; (2894 <start_image+0x94>)
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    284a:	0035      	movs	r5, r6
		disp->row[row] = ~disp->row[row] & col_mask;
    284c:	4381      	bics	r1, r0
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    284e:	0018      	movs	r0, r3
    2850:	300d      	adds	r0, #13
    2852:	4085      	lsls	r5, r0
	for (row = 0; row < DISPLAY_ROWS; row++) {
    2854:	3301      	adds	r3, #1
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    2856:	4329      	orrs	r1, r5
    2858:	c202      	stmia	r2!, {r1}
	for (row = 0; row < DISPLAY_ROWS; row++) {
    285a:	2b03      	cmp	r3, #3
    285c:	d1d7      	bne.n	280e <start_image+0xe>
	disp->cur = 0;
    285e:	0023      	movs	r3, r4
    2860:	2200      	movs	r2, #0
    2862:	333b      	adds	r3, #59	; 0x3b
    2864:	701a      	strb	r2, [r3, #0]
	if (disp->duration == K_FOREVER) {
    2866:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2868:	3301      	adds	r3, #1
    286a:	d10a      	bne.n	2882 <start_image+0x82>
		disp->expiry = K_FOREVER;
    286c:	2201      	movs	r2, #1
    286e:	4252      	negs	r2, r2
    2870:	17d3      	asrs	r3, r2, #31
		disp->expiry = k_uptime_get() + disp->duration;
    2872:	64a2      	str	r2, [r4, #72]	; 0x48
    2874:	64e3      	str	r3, [r4, #76]	; 0x4c
	k_timer_start(&disp->timer, K_NO_WAIT, K_MSEC(4));
    2876:	1d20      	adds	r0, r4, #4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
    2878:	2204      	movs	r2, #4
    287a:	2100      	movs	r1, #0
    287c:	f009 fb5f 	bl	bf3e <_impl_k_timer_start>
}
    2880:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_TIMER_USER_DATA_SET, k_timer_user_data_set, struct k_timer *, timer, void *, user_data);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer);

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    2882:	f009 f85d 	bl	b940 <_impl_k_uptime_get>
		disp->expiry = k_uptime_get() + disp->duration;
    2886:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2888:	17d3      	asrs	r3, r2, #31
    288a:	1812      	adds	r2, r2, r0
    288c:	414b      	adcs	r3, r1
    288e:	e7f0      	b.n	2872 <start_image+0x72>
    2890:	0000c6fe 	.word	0x0000c6fe
    2894:	00001ff0 	.word	0x00001ff0

00002898 <gpio_pin_configure.constprop.4>:
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    2898:	b510      	push	{r4, lr}
	return api->config(port, access_op, pin, flags);
    289a:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    289c:	000a      	movs	r2, r1
	return api->config(port, access_op, pin, flags);
    289e:	681c      	ldr	r4, [r3, #0]
    28a0:	2100      	movs	r1, #0
    28a2:	2301      	movs	r3, #1
    28a4:	47a0      	blx	r4
}
    28a6:	bd10      	pop	{r4, pc}

000028a8 <mb_display_init>:
{
	return &display;
}

static int mb_display_init(struct device *dev)
{
    28a8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    28aa:	481b      	ldr	r0, [pc, #108]	; (2918 <mb_display_init+0x70>)
    28ac:	f008 fab6 	bl	ae1c <device_get_binding>
    28b0:	4c1a      	ldr	r4, [pc, #104]	; (291c <mb_display_init+0x74>)

	__ASSERT(dev, "No GPIO device found");

	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    28b2:	210d      	movs	r1, #13
	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    28b4:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    28b6:	f7ff ffef 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW2_GPIO_PIN, GPIO_DIR_OUT);
    28ba:	210e      	movs	r1, #14
    28bc:	6820      	ldr	r0, [r4, #0]
    28be:	f7ff ffeb 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW3_GPIO_PIN, GPIO_DIR_OUT);
    28c2:	210f      	movs	r1, #15
    28c4:	6820      	ldr	r0, [r4, #0]
    28c6:	f7ff ffe7 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL1_GPIO_PIN, GPIO_DIR_OUT);
    28ca:	2104      	movs	r1, #4
    28cc:	6820      	ldr	r0, [r4, #0]
    28ce:	f7ff ffe3 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL2_GPIO_PIN, GPIO_DIR_OUT);
    28d2:	2105      	movs	r1, #5
    28d4:	6820      	ldr	r0, [r4, #0]
    28d6:	f7ff ffdf 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL3_GPIO_PIN, GPIO_DIR_OUT);
    28da:	2106      	movs	r1, #6
    28dc:	6820      	ldr	r0, [r4, #0]
    28de:	f7ff ffdb 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL4_GPIO_PIN, GPIO_DIR_OUT);
    28e2:	2107      	movs	r1, #7
    28e4:	6820      	ldr	r0, [r4, #0]
    28e6:	f7ff ffd7 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL5_GPIO_PIN, GPIO_DIR_OUT);
    28ea:	2108      	movs	r1, #8
    28ec:	6820      	ldr	r0, [r4, #0]
    28ee:	f7ff ffd3 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL6_GPIO_PIN, GPIO_DIR_OUT);
    28f2:	2109      	movs	r1, #9
    28f4:	6820      	ldr	r0, [r4, #0]
    28f6:	f7ff ffcf 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL7_GPIO_PIN, GPIO_DIR_OUT);
    28fa:	210a      	movs	r1, #10
    28fc:	6820      	ldr	r0, [r4, #0]
    28fe:	f7ff ffcb 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL8_GPIO_PIN, GPIO_DIR_OUT);
    2902:	210b      	movs	r1, #11
    2904:	6820      	ldr	r0, [r4, #0]
    2906:	f7ff ffc7 	bl	2898 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL9_GPIO_PIN, GPIO_DIR_OUT);
    290a:	210c      	movs	r1, #12
    290c:	6820      	ldr	r0, [r4, #0]
    290e:	f7ff ffc3 	bl	2898 <gpio_pin_configure.constprop.4>

	return 0;
}
    2912:	2000      	movs	r0, #0
    2914:	bd10      	pop	{r4, pc}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	0000c464 	.word	0x0000c464
    291c:	200021b0 	.word	0x200021b0

00002920 <current_img>:
	if (disp->scroll && disp->first) {
    2920:	0002      	movs	r2, r0
    2922:	323a      	adds	r2, #58	; 0x3a
    2924:	7812      	ldrb	r2, [r2, #0]
{
    2926:	0003      	movs	r3, r0
	if (disp->scroll && disp->first) {
    2928:	0751      	lsls	r1, r2, #29
    292a:	d002      	beq.n	2932 <current_img+0x12>
		return get_font(' ');
    292c:	480c      	ldr	r0, [pc, #48]	; (2960 <current_img+0x40>)
	if (disp->scroll && disp->first) {
    292e:	0711      	lsls	r1, r2, #28
    2930:	d40e      	bmi.n	2950 <current_img+0x30>
    2932:	0019      	movs	r1, r3
    2934:	3139      	adds	r1, #57	; 0x39
	if (disp->text) {
    2936:	0692      	lsls	r2, r2, #26
    2938:	d50b      	bpl.n	2952 <current_img+0x32>
		return get_font(disp->str[disp->cur_img]);
    293a:	780a      	ldrb	r2, [r1, #0]
    293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    293e:	4808      	ldr	r0, [pc, #32]	; (2960 <current_img+0x40>)
    2940:	5c9b      	ldrb	r3, [r3, r2]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    2942:	3b20      	subs	r3, #32
    2944:	b2da      	uxtb	r2, r3
    2946:	2a5e      	cmp	r2, #94	; 0x5e
    2948:	d802      	bhi.n	2950 <current_img+0x30>
	return &mb_font[ch - MB_FONT_START];
    294a:	2205      	movs	r2, #5
    294c:	4353      	muls	r3, r2
    294e:	18c0      	adds	r0, r0, r3
}
    2950:	4770      	bx	lr
		return &disp->img[disp->cur_img];
    2952:	2005      	movs	r0, #5
    2954:	780a      	ldrb	r2, [r1, #0]
    2956:	4342      	muls	r2, r0
    2958:	6d58      	ldr	r0, [r3, #84]	; 0x54
    295a:	1880      	adds	r0, r0, r2
    295c:	e7f8      	b.n	2950 <current_img+0x30>
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	0000c719 	.word	0x0000c719

00002964 <start_single>:
	if (disp->text) {
    2964:	0003      	movs	r3, r0
	disp->duration = duration;
    2966:	6501      	str	r1, [r0, #80]	; 0x50
	if (disp->text) {
    2968:	333a      	adds	r3, #58	; 0x3a
    296a:	781b      	ldrb	r3, [r3, #0]
{
    296c:	b510      	push	{r4, lr}
	if (disp->text) {
    296e:	069b      	lsls	r3, r3, #26
    2970:	d50c      	bpl.n	298c <start_single+0x28>
		start_image(disp, get_font(disp->str[0]));
    2972:	6d43      	ldr	r3, [r0, #84]	; 0x54
    2974:	4906      	ldr	r1, [pc, #24]	; (2990 <start_single+0x2c>)
    2976:	781b      	ldrb	r3, [r3, #0]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    2978:	3b20      	subs	r3, #32
    297a:	b2da      	uxtb	r2, r3
    297c:	2a5e      	cmp	r2, #94	; 0x5e
    297e:	d802      	bhi.n	2986 <start_single+0x22>
	return &mb_font[ch - MB_FONT_START];
    2980:	2205      	movs	r2, #5
    2982:	4353      	muls	r3, r2
    2984:	18c9      	adds	r1, r1, r3
		start_image(disp, disp->img);
    2986:	f7ff ff3b 	bl	2800 <start_image>
}
    298a:	bd10      	pop	{r4, pc}
		start_image(disp, disp->img);
    298c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    298e:	e7fa      	b.n	2986 <start_single+0x22>
    2990:	0000c719 	.word	0x0000c719

00002994 <clear_display>:
{
    2994:	3804      	subs	r0, #4
    2996:	b510      	push	{r4, lr}
    2998:	6800      	ldr	r0, [r0, #0]
	return api->write(port, access_op, pin, value);
    299a:	2200      	movs	r2, #0
    299c:	6843      	ldr	r3, [r0, #4]
    299e:	2101      	movs	r1, #1
    29a0:	685c      	ldr	r4, [r3, #4]
    29a2:	4b01      	ldr	r3, [pc, #4]	; (29a8 <clear_display+0x14>)
    29a4:	47a0      	blx	r4
}
    29a6:	bd10      	pop	{r4, pc}
    29a8:	00001ff0 	.word	0x00001ff0

000029ac <show_row>:
{
    29ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ae:	0004      	movs	r4, r0
	update_pins(disp, disp->row[disp->cur]);
    29b0:	0026      	movs	r6, r4
    29b2:	3637      	adds	r6, #55	; 0x37
    29b4:	1f05      	subs	r5, r0, #4
    29b6:	7833      	ldrb	r3, [r6, #0]
    29b8:	6828      	ldr	r0, [r5, #0]
    29ba:	330e      	adds	r3, #14
    29bc:	6842      	ldr	r2, [r0, #4]
    29be:	009b      	lsls	r3, r3, #2
    29c0:	18eb      	adds	r3, r5, r3
    29c2:	6857      	ldr	r7, [r2, #4]
{
    29c4:	b087      	sub	sp, #28
    29c6:	685b      	ldr	r3, [r3, #4]
    29c8:	2200      	movs	r2, #0
    29ca:	2101      	movs	r1, #1
    29cc:	47b8      	blx	r7
	disp->cur = (disp->cur + 1) % DISPLAY_ROWS;
    29ce:	7830      	ldrb	r0, [r6, #0]
    29d0:	2103      	movs	r1, #3
    29d2:	3001      	adds	r0, #1
    29d4:	f7fd fc9c 	bl	310 <__aeabi_idivmod>
    29d8:	1e0f      	subs	r7, r1, #0
    29da:	7031      	strb	r1, [r6, #0]
	if (disp->cur == 0 && disp->expiry != K_FOREVER &&
    29dc:	d000      	beq.n	29e0 <show_row+0x34>
    29de:	e091      	b.n	2b04 <show_row+0x158>
    29e0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    29e2:	3301      	adds	r3, #1
    29e4:	d103      	bne.n	29ee <show_row+0x42>
    29e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    29e8:	3301      	adds	r3, #1
    29ea:	d100      	bne.n	29ee <show_row+0x42>
    29ec:	e08a      	b.n	2b04 <show_row+0x158>
    29ee:	f008 ffa7 	bl	b940 <_impl_k_uptime_get>
    29f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    29f4:	428b      	cmp	r3, r1
    29f6:	db05      	blt.n	2a04 <show_row+0x58>
    29f8:	d000      	beq.n	29fc <show_row+0x50>
    29fa:	e083      	b.n	2b04 <show_row+0x158>
    29fc:	6cab      	ldr	r3, [r5, #72]	; 0x48
    29fe:	4283      	cmp	r3, r0
    2a00:	d300      	bcc.n	2a04 <show_row+0x58>
    2a02:	e07f      	b.n	2b04 <show_row+0x158>
		if (disp->scroll) {
    2a04:	0021      	movs	r1, r4
    2a06:	3136      	adds	r1, #54	; 0x36
    2a08:	780a      	ldrb	r2, [r1, #0]
    2a0a:	0753      	lsls	r3, r2, #29
    2a0c:	d100      	bne.n	2a10 <show_row+0x64>
    2a0e:	e097      	b.n	2b40 <show_row+0x194>
	return 5 + disp->img_sep;
    2a10:	0653      	lsls	r3, r2, #25
    2a12:	0fdb      	lsrs	r3, r3, #31
    2a14:	3305      	adds	r3, #5
	if (disp->scroll < scroll_steps(disp)) {
    2a16:	0756      	lsls	r6, r2, #29
    2a18:	b2db      	uxtb	r3, r3
    2a1a:	0f76      	lsrs	r6, r6, #29
    2a1c:	9300      	str	r3, [sp, #0]
    2a1e:	429e      	cmp	r6, r3
    2a20:	da58      	bge.n	2ad4 <show_row+0x128>
	if (disp->text) {
    2a22:	2320      	movs	r3, #32
    2a24:	4013      	ands	r3, r2
    2a26:	9303      	str	r3, [sp, #12]
		if (disp->first) {
    2a28:	2308      	movs	r3, #8
    2a2a:	401a      	ands	r2, r3
    2a2c:	9201      	str	r2, [sp, #4]
			const struct mb_image *i1 = current_img(disp);
    2a2e:	0028      	movs	r0, r5
    2a30:	f7ff ff76 	bl	2920 <current_img>
	if (disp->text) {
    2a34:	9b03      	ldr	r3, [sp, #12]
			const struct mb_image *i1 = current_img(disp);
    2a36:	9002      	str	r0, [sp, #8]
    2a38:	1f22      	subs	r2, r4, #4
	if (disp->text) {
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d035      	beq.n	2aaa <show_row+0xfe>
		if (disp->first) {
    2a3e:	9b01      	ldr	r3, [sp, #4]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d023      	beq.n	2a8c <show_row+0xe0>
			return get_font(disp->str[0]);
    2a44:	6d53      	ldr	r3, [r2, #84]	; 0x54
    2a46:	781a      	ldrb	r2, [r3, #0]
    2a48:	4b4a      	ldr	r3, [pc, #296]	; (2b74 <show_row+0x1c8>)
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    2a4a:	3a20      	subs	r2, #32
    2a4c:	b2d1      	uxtb	r1, r2
    2a4e:	295e      	cmp	r1, #94	; 0x5e
    2a50:	d802      	bhi.n	2a58 <show_row+0xac>
	return &mb_font[ch - MB_FONT_START];
    2a52:	2105      	movs	r1, #5
    2a54:	434a      	muls	r2, r1
    2a56:	189b      	adds	r3, r3, r2
				      (i2->row[i] << (scroll_steps(disp) -
    2a58:	9a00      	ldr	r2, [sp, #0]
    2a5a:	5ddb      	ldrb	r3, [r3, r7]
    2a5c:	1b92      	subs	r2, r2, r6
    2a5e:	4093      	lsls	r3, r2
			img.row[i] = ((i1->row[i] >> disp->scroll) |
    2a60:	9a02      	ldr	r2, [sp, #8]
    2a62:	5dd2      	ldrb	r2, [r2, r7]
    2a64:	4132      	asrs	r2, r6
    2a66:	4313      	orrs	r3, r2
    2a68:	aa04      	add	r2, sp, #16
    2a6a:	54bb      	strb	r3, [r7, r2]
		for (i = 0; i < 5; i++) {
    2a6c:	3701      	adds	r7, #1
    2a6e:	2f05      	cmp	r7, #5
    2a70:	d1dd      	bne.n	2a2e <show_row+0x82>
		disp->scroll++;
    2a72:	2207      	movs	r2, #7
    2a74:	3436      	adds	r4, #54	; 0x36
    2a76:	7823      	ldrb	r3, [r4, #0]
    2a78:	3601      	adds	r6, #1
    2a7a:	4016      	ands	r6, r2
    2a7c:	4393      	bics	r3, r2
    2a7e:	431e      	orrs	r6, r3
    2a80:	7026      	strb	r6, [r4, #0]
		start_image(disp, &img);
    2a82:	a904      	add	r1, sp, #16
	start_image(disp, current_img(disp));
    2a84:	0028      	movs	r0, r5
    2a86:	f7ff febb 	bl	2800 <start_image>
}
    2a8a:	e03b      	b.n	2b04 <show_row+0x158>
		} else if (disp->str[disp->cur_img]) {
    2a8c:	0023      	movs	r3, r4
    2a8e:	3335      	adds	r3, #53	; 0x35
    2a90:	6d52      	ldr	r2, [r2, #84]	; 0x54
    2a92:	7819      	ldrb	r1, [r3, #0]
    2a94:	5c53      	ldrb	r3, [r2, r1]
    2a96:	469c      	mov	ip, r3
    2a98:	4660      	mov	r0, ip
			return get_font(' ');
    2a9a:	4b36      	ldr	r3, [pc, #216]	; (2b74 <show_row+0x1c8>)
		} else if (disp->str[disp->cur_img]) {
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d0db      	beq.n	2a58 <show_row+0xac>
			return get_font(disp->str[disp->cur_img + 1]);
    2aa0:	1852      	adds	r2, r2, r1
    2aa2:	7852      	ldrb	r2, [r2, #1]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    2aa4:	3a20      	subs	r2, #32
    2aa6:	b2d1      	uxtb	r1, r2
    2aa8:	e7d1      	b.n	2a4e <show_row+0xa2>
		if (disp->first) {
    2aaa:	9b01      	ldr	r3, [sp, #4]
    2aac:	2b00      	cmp	r3, #0
    2aae:	d001      	beq.n	2ab4 <show_row+0x108>
			return &disp->img[0];
    2ab0:	6d53      	ldr	r3, [r2, #84]	; 0x54
    2ab2:	e7d1      	b.n	2a58 <show_row+0xac>
		} else if (disp->cur_img < (disp->img_count - 1)) {
    2ab4:	0023      	movs	r3, r4
    2ab6:	3335      	adds	r3, #53	; 0x35
    2ab8:	7819      	ldrb	r1, [r3, #0]
    2aba:	3b01      	subs	r3, #1
    2abc:	781b      	ldrb	r3, [r3, #0]
    2abe:	3b01      	subs	r3, #1
    2ac0:	469c      	mov	ip, r3
			return get_font(' ');
    2ac2:	4b2c      	ldr	r3, [pc, #176]	; (2b74 <show_row+0x1c8>)
		} else if (disp->cur_img < (disp->img_count - 1)) {
    2ac4:	4561      	cmp	r1, ip
    2ac6:	dac7      	bge.n	2a58 <show_row+0xac>
			return &disp->img[disp->cur_img + 1];
    2ac8:	2305      	movs	r3, #5
    2aca:	3101      	adds	r1, #1
    2acc:	4359      	muls	r1, r3
    2ace:	6d53      	ldr	r3, [r2, #84]	; 0x54
    2ad0:	185b      	adds	r3, r3, r1
    2ad2:	e7c1      	b.n	2a58 <show_row+0xac>
    2ad4:	0020      	movs	r0, r4
		if (disp->first) {
    2ad6:	2308      	movs	r3, #8
    2ad8:	3035      	adds	r0, #53	; 0x35
    2ada:	421a      	tst	r2, r3
    2adc:	d014      	beq.n	2b08 <show_row+0x15c>
			disp->first = 0;
    2ade:	439a      	bics	r2, r3
    2ae0:	700a      	strb	r2, [r1, #0]
	if (disp->text) {
    2ae2:	2320      	movs	r3, #32
    2ae4:	780a      	ldrb	r2, [r1, #0]
    2ae6:	4013      	ands	r3, r2
    2ae8:	d012      	beq.n	2b10 <show_row+0x164>
		return (disp->str[disp->cur_img] == '\0');
    2aea:	7803      	ldrb	r3, [r0, #0]
    2aec:	6d6c      	ldr	r4, [r5, #84]	; 0x54
    2aee:	5ce4      	ldrb	r4, [r4, r3]
    2af0:	4263      	negs	r3, r4
    2af2:	4163      	adcs	r3, r4
		return (disp->cur_img >= disp->img_count);
    2af4:	b2db      	uxtb	r3, r3
		if (last_frame(disp)) {
    2af6:	2b00      	cmp	r3, #0
    2af8:	d016      	beq.n	2b28 <show_row+0x17c>
			if (!disp->loop) {
    2afa:	06d3      	lsls	r3, r2, #27
    2afc:	d40e      	bmi.n	2b1c <show_row+0x170>
			reset_display(disp);
    2afe:	0028      	movs	r0, r5
    2b00:	f7ff fe6c 	bl	27dc <reset_display>
}
    2b04:	b007      	add	sp, #28
    2b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			disp->cur_img++;
    2b08:	7803      	ldrb	r3, [r0, #0]
    2b0a:	3301      	adds	r3, #1
    2b0c:	7003      	strb	r3, [r0, #0]
    2b0e:	e7e8      	b.n	2ae2 <show_row+0x136>
		return (disp->cur_img >= disp->img_count);
    2b10:	3434      	adds	r4, #52	; 0x34
    2b12:	7806      	ldrb	r6, [r0, #0]
    2b14:	7824      	ldrb	r4, [r4, #0]
    2b16:	42a6      	cmp	r6, r4
    2b18:	415b      	adcs	r3, r3
    2b1a:	e7eb      	b.n	2af4 <show_row+0x148>
			disp->cur_img = 0;
    2b1c:	2300      	movs	r3, #0
    2b1e:	7003      	strb	r3, [r0, #0]
			disp->first = 1;
    2b20:	780a      	ldrb	r2, [r1, #0]
    2b22:	3308      	adds	r3, #8
    2b24:	4313      	orrs	r3, r2
    2b26:	700b      	strb	r3, [r1, #0]
		disp->scroll = SCROLL_START;
    2b28:	2207      	movs	r2, #7
    2b2a:	780b      	ldrb	r3, [r1, #0]
    2b2c:	4393      	bics	r3, r2
    2b2e:	001a      	movs	r2, r3
    2b30:	2301      	movs	r3, #1
    2b32:	4313      	orrs	r3, r2
		disp->cur_img = 0;
    2b34:	700b      	strb	r3, [r1, #0]
	start_image(disp, current_img(disp));
    2b36:	0028      	movs	r0, r5
    2b38:	f7ff fef2 	bl	2920 <current_img>
    2b3c:	0001      	movs	r1, r0
    2b3e:	e7a1      	b.n	2a84 <show_row+0xd8>
	disp->cur_img++;
    2b40:	0021      	movs	r1, r4
	if (disp->text) {
    2b42:	2320      	movs	r3, #32
	disp->cur_img++;
    2b44:	3135      	adds	r1, #53	; 0x35
    2b46:	7808      	ldrb	r0, [r1, #0]
	if (disp->text) {
    2b48:	4013      	ands	r3, r2
	disp->cur_img++;
    2b4a:	3001      	adds	r0, #1
    2b4c:	b2c0      	uxtb	r0, r0
    2b4e:	7008      	strb	r0, [r1, #0]
	if (disp->text) {
    2b50:	2b00      	cmp	r3, #0
    2b52:	d00a      	beq.n	2b6a <show_row+0x1be>
		return (disp->str[disp->cur_img] == '\0');
    2b54:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    2b56:	5c18      	ldrb	r0, [r3, r0]
    2b58:	4243      	negs	r3, r0
    2b5a:	4143      	adcs	r3, r0
		return (disp->cur_img >= disp->img_count);
    2b5c:	b2db      	uxtb	r3, r3
	if (last_frame(disp)) {
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d0e9      	beq.n	2b36 <show_row+0x18a>
		if (!disp->loop) {
    2b62:	06d3      	lsls	r3, r2, #27
    2b64:	d5cb      	bpl.n	2afe <show_row+0x152>
		disp->cur_img = 0;
    2b66:	2300      	movs	r3, #0
    2b68:	e7e4      	b.n	2b34 <show_row+0x188>
		return (disp->cur_img >= disp->img_count);
    2b6a:	3434      	adds	r4, #52	; 0x34
    2b6c:	7824      	ldrb	r4, [r4, #0]
    2b6e:	42a0      	cmp	r0, r4
    2b70:	415b      	adcs	r3, r3
    2b72:	e7f3      	b.n	2b5c <show_row+0x1b0>
    2b74:	0000c719 	.word	0x0000c719

00002b78 <mb_display_print>:
{
    2b78:	b408      	push	{r3}
    2b7a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    2b7c:	0004      	movs	r4, r0
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    2b7e:	0027      	movs	r7, r4
{
    2b80:	ad09      	add	r5, sp, #36	; 0x24
    2b82:	cd08      	ldmia	r5!, {r3}
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    2b84:	3758      	adds	r7, #88	; 0x58
{
    2b86:	9100      	str	r1, [sp, #0]
    2b88:	0016      	movs	r6, r2
    2b8a:	9301      	str	r3, [sp, #4]
	reset_display(disp);
    2b8c:	f7ff fe26 	bl	27dc <reset_display>
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    2b90:	002b      	movs	r3, r5
    2b92:	9a01      	ldr	r2, [sp, #4]
    2b94:	2128      	movs	r1, #40	; 0x28
    2b96:	0038      	movs	r0, r7
	va_start(ap, fmt);
    2b98:	9503      	str	r5, [sp, #12]
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    2b9a:	f7ff fddb 	bl	2754 <vsnprintk>
	if (disp->str_buf[0] == '\0') {
    2b9e:	783b      	ldrb	r3, [r7, #0]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d02a      	beq.n	2bfa <mb_display_print+0x82>
	disp->text = 1;
    2ba4:	0025      	movs	r5, r4
	disp->cur_img = 0;
    2ba6:	0022      	movs	r2, r4
    2ba8:	2100      	movs	r1, #0
	disp->str = disp->str_buf;
    2baa:	6567      	str	r7, [r4, #84]	; 0x54
	disp->text = 1;
    2bac:	353a      	adds	r5, #58	; 0x3a
	disp->cur_img = 0;
    2bae:	3239      	adds	r2, #57	; 0x39
	disp->text = 1;
    2bb0:	782b      	ldrb	r3, [r5, #0]
	disp->cur_img = 0;
    2bb2:	7011      	strb	r1, [r2, #0]
	disp->loop = !!(mode & MB_DISPLAY_FLAG_LOOP);
    2bb4:	9a00      	ldr	r2, [sp, #0]
    2bb6:	3160      	adds	r1, #96	; 0x60
    2bb8:	03d2      	lsls	r2, r2, #15
    2bba:	430b      	orrs	r3, r1
    2bbc:	0fd2      	lsrs	r2, r2, #31
    2bbe:	3950      	subs	r1, #80	; 0x50
    2bc0:	0112      	lsls	r2, r2, #4
    2bc2:	438b      	bics	r3, r1
    2bc4:	4313      	orrs	r3, r2
    2bc6:	702b      	strb	r3, [r5, #0]
	switch (mode & MODE_MASK) {
    2bc8:	466b      	mov	r3, sp
    2bca:	881b      	ldrh	r3, [r3, #0]
    2bcc:	2b01      	cmp	r3, #1
    2bce:	d01b      	beq.n	2c08 <mb_display_print+0x90>
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d001      	beq.n	2bd8 <mb_display_print+0x60>
    2bd4:	2b02      	cmp	r3, #2
    2bd6:	d110      	bne.n	2bfa <mb_display_print+0x82>
	if (duration) {
    2bd8:	2e00      	cmp	r6, #0
    2bda:	d012      	beq.n	2c02 <mb_display_print+0x8a>
		disp->duration = duration / scroll_steps(disp);
    2bdc:	2106      	movs	r1, #6
    2bde:	0030      	movs	r0, r6
    2be0:	f7fd fb40 	bl	264 <__aeabi_idiv>
    2be4:	6520      	str	r0, [r4, #80]	; 0x50
	disp->scroll = SCROLL_START;
    2be6:	2207      	movs	r2, #7
    2be8:	782b      	ldrb	r3, [r5, #0]
	start_image(disp, get_font(' '));
    2bea:	490a      	ldr	r1, [pc, #40]	; (2c14 <mb_display_print+0x9c>)
	disp->scroll = SCROLL_START;
    2bec:	4393      	bics	r3, r2
	disp->first = 1;
    2bee:	3202      	adds	r2, #2
    2bf0:	4313      	orrs	r3, r2
    2bf2:	702b      	strb	r3, [r5, #0]
	start_image(disp, get_font(' '));
    2bf4:	0020      	movs	r0, r4
    2bf6:	f7ff fe03 	bl	2800 <start_image>
}
    2bfa:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    2bfc:	bc08      	pop	{r3}
    2bfe:	b001      	add	sp, #4
    2c00:	4718      	bx	r3
		disp->duration = SCROLL_DEFAULT_DURATION;
    2c02:	2350      	movs	r3, #80	; 0x50
    2c04:	6523      	str	r3, [r4, #80]	; 0x50
    2c06:	e7ee      	b.n	2be6 <mb_display_print+0x6e>
		start_single(disp, duration);
    2c08:	0031      	movs	r1, r6
    2c0a:	0020      	movs	r0, r4
    2c0c:	f7ff feaa 	bl	2964 <start_single>
		break;
    2c10:	e7f3      	b.n	2bfa <mb_display_print+0x82>
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	0000c719 	.word	0x0000c719

00002c18 <mb_display_get>:
}
    2c18:	4800      	ldr	r0, [pc, #0]	; (2c1c <mb_display_get+0x4>)
    2c1a:	4770      	bx	lr
    2c1c:	200021b0 	.word	0x200021b0

00002c20 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    2c20:	b510      	push	{r4, lr}
    2c22:	f3ef 8210 	mrs	r2, PRIMASK
    2c26:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2c28:	4915      	ldr	r1, [pc, #84]	; (2c80 <_m16src_stop+0x60>)
    2c2a:	780b      	ldrb	r3, [r1, #0]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d105      	bne.n	2c3c <_m16src_stop+0x1c>
	if (key) {
    2c30:	2a00      	cmp	r2, #0
    2c32:	d100      	bne.n	2c36 <_m16src_stop+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    2c34:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    2c36:	2045      	movs	r0, #69	; 0x45
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    2c38:	4240      	negs	r0, r0
    2c3a:	e013      	b.n	2c64 <_m16src_stop+0x44>
	if (--m16src_ref) {
    2c3c:	3b01      	subs	r3, #1
    2c3e:	b2db      	uxtb	r3, r3
    2c40:	700b      	strb	r3, [r1, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d004      	beq.n	2c50 <_m16src_stop+0x30>
	if (key) {
    2c46:	2a00      	cmp	r2, #0
    2c48:	d100      	bne.n	2c4c <_m16src_stop+0x2c>
	__asm__ volatile("cpsie i" : : : "memory");
    2c4a:	b662      	cpsie	i
		return -EBUSY;
    2c4c:	2010      	movs	r0, #16
    2c4e:	e7f3      	b.n	2c38 <_m16src_stop+0x18>
	if (m16src_grd) {
    2c50:	4b0c      	ldr	r3, [pc, #48]	; (2c84 <_m16src_stop+0x64>)
    2c52:	2001      	movs	r0, #1
    2c54:	781c      	ldrb	r4, [r3, #0]
    2c56:	2c00      	cmp	r4, #0
    2c58:	d005      	beq.n	2c66 <_m16src_stop+0x46>
		m16src_ref++;
    2c5a:	7008      	strb	r0, [r1, #0]
	if (key) {
    2c5c:	2a00      	cmp	r2, #0
    2c5e:	d10d      	bne.n	2c7c <_m16src_stop+0x5c>
	__asm__ volatile("cpsie i" : : : "memory");
    2c60:	b662      	cpsie	i
		return -EAGAIN;
    2c62:	380c      	subs	r0, #12

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    2c64:	bd10      	pop	{r4, pc}
	m16src_grd = 1;
    2c66:	7018      	strb	r0, [r3, #0]
	if (key) {
    2c68:	2a00      	cmp	r2, #0
    2c6a:	d100      	bne.n	2c6e <_m16src_stop+0x4e>
	__asm__ volatile("cpsie i" : : : "memory");
    2c6c:	b662      	cpsie	i
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2c6e:	2280      	movs	r2, #128	; 0x80
    2c70:	2101      	movs	r1, #1
	m16src_grd = 0;
    2c72:	2000      	movs	r0, #0
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2c74:	05d2      	lsls	r2, r2, #23
    2c76:	6051      	str	r1, [r2, #4]
	m16src_grd = 0;
    2c78:	7018      	strb	r0, [r3, #0]
	return 0;
    2c7a:	e7f3      	b.n	2c64 <_m16src_stop+0x44>
		return -EAGAIN;
    2c7c:	200b      	movs	r0, #11
    2c7e:	e7db      	b.n	2c38 <_m16src_stop+0x18>
    2c80:	20000026 	.word	0x20000026
    2c84:	20000025 	.word	0x20000025

00002c88 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    2c88:	2200      	movs	r2, #0
{
    2c8a:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    2c8c:	0010      	movs	r0, r2
    2c8e:	2101      	movs	r1, #1
    2c90:	f7ff fa40 	bl	2114 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2c94:	2000      	movs	r0, #0
    2c96:	f7ff fa13 	bl	20c0 <_arch_irq_enable>

	return 0;
}
    2c9a:	2000      	movs	r0, #0
    2c9c:	bd10      	pop	{r4, pc}
	...

00002ca0 <_m16src_start>:
{
    2ca0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    2ca2:	f3ef 8310 	mrs	r3, PRIMASK
    2ca6:	b672      	cpsid	i
	if (m16src_ref++) {
    2ca8:	4a27      	ldr	r2, [pc, #156]	; (2d48 <_m16src_start+0xa8>)
    2caa:	7810      	ldrb	r0, [r2, #0]
    2cac:	1c44      	adds	r4, r0, #1
    2cae:	7014      	strb	r4, [r2, #0]
    2cb0:	2800      	cmp	r0, #0
    2cb2:	d00b      	beq.n	2ccc <_m16src_start+0x2c>
	if (key) {
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d100      	bne.n	2cba <_m16src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    2cb8:	b662      	cpsie	i
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2cba:	2280      	movs	r2, #128	; 0x80
    2cbc:	4b23      	ldr	r3, [pc, #140]	; (2d4c <_m16src_start+0xac>)
    2cbe:	05d2      	lsls	r2, r2, #23
    2cc0:	58d3      	ldr	r3, [r2, r3]
		return 0;
    2cc2:	2000      	movs	r0, #0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2cc4:	03db      	lsls	r3, r3, #15
    2cc6:	d400      	bmi.n	2cca <_m16src_start+0x2a>
		return -EINPROGRESS;
    2cc8:	3844      	subs	r0, #68	; 0x44
}
    2cca:	bd70      	pop	{r4, r5, r6, pc}
	if (m16src_grd) {
    2ccc:	4e20      	ldr	r6, [pc, #128]	; (2d50 <_m16src_start+0xb0>)
    2cce:	7834      	ldrb	r4, [r6, #0]
    2cd0:	2c00      	cmp	r4, #0
    2cd2:	d006      	beq.n	2ce2 <_m16src_start+0x42>
		m16src_ref--;
    2cd4:	7010      	strb	r0, [r2, #0]
	if (key) {
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d100      	bne.n	2cdc <_m16src_start+0x3c>
	__asm__ volatile("cpsie i" : : : "memory");
    2cda:	b662      	cpsie	i
		return -EAGAIN;
    2cdc:	200b      	movs	r0, #11
    2cde:	4240      	negs	r0, r0
    2ce0:	e7f3      	b.n	2cca <_m16src_start+0x2a>
	m16src_grd = 1;
    2ce2:	2201      	movs	r2, #1
    2ce4:	7032      	strb	r2, [r6, #0]
	if (key) {
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d100      	bne.n	2cec <_m16src_start+0x4c>
	__asm__ volatile("cpsie i" : : : "memory");
    2cea:	b662      	cpsie	i
    2cec:	2480      	movs	r4, #128	; 0x80
    2cee:	4d19      	ldr	r5, [pc, #100]	; (2d54 <_m16src_start+0xb4>)
    2cf0:	05e4      	lsls	r4, r4, #23
	if (blocking) {
    2cf2:	2900      	cmp	r1, #0
    2cf4:	d024      	beq.n	2d40 <_m16src_start+0xa0>
		irq_disable(POWER_CLOCK_IRQn);
    2cf6:	2000      	movs	r0, #0
    2cf8:	f7ff f9ee 	bl	20d8 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2cfc:	2300      	movs	r3, #0
		intenset = NRF_CLOCK->INTENSET;
    2cfe:	22c1      	movs	r2, #193	; 0xc1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2d00:	606b      	str	r3, [r5, #4]
		intenset = NRF_CLOCK->INTENSET;
    2d02:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2d04:	3301      	adds	r3, #1
		intenset = NRF_CLOCK->INTENSET;
    2d06:	58a1      	ldr	r1, [r4, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2d08:	50a3      	str	r3, [r4, r2]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2d0a:	6023      	str	r3, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2d0c:	686b      	ldr	r3, [r5, #4]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d012      	beq.n	2d38 <_m16src_start+0x98>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2d12:	2300      	movs	r3, #0
    2d14:	606b      	str	r3, [r5, #4]
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2d16:	3301      	adds	r3, #1
    2d18:	4219      	tst	r1, r3
    2d1a:	d102      	bne.n	2d22 <_m16src_start+0x82>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2d1c:	22c2      	movs	r2, #194	; 0xc2
    2d1e:	0092      	lsls	r2, r2, #2
    2d20:	50a3      	str	r3, [r4, r2]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2d22:	23c0      	movs	r3, #192	; 0xc0
    2d24:	2101      	movs	r1, #1
    2d26:	4a0c      	ldr	r2, [pc, #48]	; (2d58 <_m16src_start+0xb8>)
    2d28:	005b      	lsls	r3, r3, #1
    2d2a:	50d1      	str	r1, [r2, r3]
		irq_enable(POWER_CLOCK_IRQn);
    2d2c:	2000      	movs	r0, #0
    2d2e:	f7ff f9c7 	bl	20c0 <_arch_irq_enable>
	m16src_grd = 0;
    2d32:	2300      	movs	r3, #0
    2d34:	7033      	strb	r3, [r6, #0]
    2d36:	e7c0      	b.n	2cba <_m16src_start+0x1a>
			__WFE();
    2d38:	bf20      	wfe
			__SEV();
    2d3a:	bf40      	sev
			__WFE();
    2d3c:	bf20      	wfe
    2d3e:	e7e5      	b.n	2d0c <_m16src_start+0x6c>
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2d40:	2301      	movs	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2d42:	6069      	str	r1, [r5, #4]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2d44:	6023      	str	r3, [r4, #0]
    2d46:	e7f4      	b.n	2d32 <_m16src_start+0x92>
    2d48:	20000026 	.word	0x20000026
    2d4c:	0000040c 	.word	0x0000040c
    2d50:	20000025 	.word	0x20000025
    2d54:	400000fc 	.word	0x400000fc
    2d58:	e000e100 	.word	0xe000e100

00002d5c <_k32src_start>:
{
    2d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d5e:	0007      	movs	r7, r0
    2d60:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    2d62:	f3ef 8310 	mrs	r3, PRIMASK
    2d66:	b672      	cpsid	i
	if (k32src_initialized) {
    2d68:	4a2d      	ldr	r2, [pc, #180]	; (2e20 <_k32src_start+0xc4>)
    2d6a:	7811      	ldrb	r1, [r2, #0]
    2d6c:	2900      	cmp	r1, #0
    2d6e:	d00c      	beq.n	2d8a <_k32src_start+0x2e>
	if (key) {
    2d70:	2b00      	cmp	r3, #0
    2d72:	d100      	bne.n	2d76 <_k32src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    2d74:	b662      	cpsie	i
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2d76:	2383      	movs	r3, #131	; 0x83
    2d78:	2280      	movs	r2, #128	; 0x80
    2d7a:	00db      	lsls	r3, r3, #3
    2d7c:	05d2      	lsls	r2, r2, #23
    2d7e:	58d3      	ldr	r3, [r2, r3]
		return 0;
    2d80:	2000      	movs	r0, #0
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2d82:	03db      	lsls	r3, r3, #15
    2d84:	d400      	bmi.n	2d88 <_k32src_start+0x2c>
		return -EINPROGRESS;
    2d86:	3844      	subs	r0, #68	; 0x44
}
    2d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    2d8a:	2101      	movs	r1, #1
    2d8c:	7011      	strb	r1, [r2, #0]
	if (key) {
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d100      	bne.n	2d94 <_k32src_start+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    2d92:	b662      	cpsie	i
	irq_disable(POWER_CLOCK_IRQn);
    2d94:	2000      	movs	r0, #0
    2d96:	f7ff f99f 	bl	20d8 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2d9a:	2200      	movs	r2, #0
    2d9c:	4c21      	ldr	r4, [pc, #132]	; (2e24 <_k32src_start+0xc8>)
    2d9e:	2380      	movs	r3, #128	; 0x80
    2da0:	60a2      	str	r2, [r4, #8]
	intenset = NRF_CLOCK->INTENSET;
    2da2:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2da4:	2002      	movs	r0, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2da6:	05db      	lsls	r3, r3, #23
	intenset = NRF_CLOCK->INTENSET;
    2da8:	0092      	lsls	r2, r2, #2
    2daa:	5899      	ldr	r1, [r3, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2dac:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2dae:	22a3      	movs	r2, #163	; 0xa3
    2db0:	00d2      	lsls	r2, r2, #3
    2db2:	509d      	str	r5, [r3, r2]
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2db4:	2201      	movs	r2, #1
    2db6:	609a      	str	r2, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2db8:	68a2      	ldr	r2, [r4, #8]
    2dba:	2a00      	cmp	r2, #0
    2dbc:	d02c      	beq.n	2e18 <_k32src_start+0xbc>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2dbe:	2200      	movs	r2, #0
    2dc0:	60a2      	str	r2, [r4, #8]
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2dc2:	3202      	adds	r2, #2
    2dc4:	4211      	tst	r1, r2
    2dc6:	d102      	bne.n	2dce <_k32src_start+0x72>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2dc8:	21c2      	movs	r1, #194	; 0xc2
    2dca:	0089      	lsls	r1, r1, #2
    2dcc:	505a      	str	r2, [r3, r1]
    2dce:	23c0      	movs	r3, #192	; 0xc0
    2dd0:	2601      	movs	r6, #1
    2dd2:	4a15      	ldr	r2, [pc, #84]	; (2e28 <_k32src_start+0xcc>)
    2dd4:	005b      	lsls	r3, r3, #1
    2dd6:	50d6      	str	r6, [r2, r3]
	irq_enable(POWER_CLOCK_IRQn);
    2dd8:	2000      	movs	r0, #0
    2dda:	f7ff f971 	bl	20c0 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2dde:	2380      	movs	r3, #128	; 0x80
    2de0:	22c2      	movs	r2, #194	; 0xc2
    2de2:	2018      	movs	r0, #24
    2de4:	0092      	lsls	r2, r2, #2
    2de6:	05db      	lsls	r3, r3, #23
    2de8:	5098      	str	r0, [r3, r2]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2dea:	2103      	movs	r1, #3
	NRF_CLOCK->EVENTS_DONE = 0;
    2dec:	2200      	movs	r2, #0
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2dee:	4029      	ands	r1, r5
	NRF_CLOCK->EVENTS_DONE = 0;
    2df0:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    2df2:	6162      	str	r2, [r4, #20]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2df4:	4291      	cmp	r1, r2
    2df6:	d1be      	bne.n	2d76 <_k32src_start+0x1a>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2df8:	22a7      	movs	r2, #167	; 0xa7
    2dfa:	2410      	movs	r4, #16
    2dfc:	00d2      	lsls	r2, r2, #3
    2dfe:	509c      	str	r4, [r3, r2]
		NRF_CLOCK->INTENSET =
    2e00:	22c1      	movs	r2, #193	; 0xc1
    2e02:	0092      	lsls	r2, r2, #2
    2e04:	5098      	str	r0, [r3, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2e06:	509e      	str	r6, [r3, r2]
		err = _m16src_start(dev, false);
    2e08:	0038      	movs	r0, r7
    2e0a:	f7ff ff49 	bl	2ca0 <_m16src_start>
		if (!err) {
    2e0e:	2800      	cmp	r0, #0
    2e10:	d1b1      	bne.n	2d76 <_k32src_start+0x1a>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e12:	4b06      	ldr	r3, [pc, #24]	; (2e2c <_k32src_start+0xd0>)
    2e14:	605e      	str	r6, [r3, #4]
    2e16:	e7ae      	b.n	2d76 <_k32src_start+0x1a>
		__WFE();
    2e18:	bf20      	wfe
		__SEV();
    2e1a:	bf40      	sev
		__WFE();
    2e1c:	bf20      	wfe
    2e1e:	e7cb      	b.n	2db8 <_k32src_start+0x5c>
    2e20:	20000024 	.word	0x20000024
    2e24:	400000fc 	.word	0x400000fc
    2e28:	e000e100 	.word	0xe000e100
    2e2c:	e000e1fc 	.word	0xe000e1fc

00002e30 <_power_clock_isr>:
{
    2e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2e32:	4c24      	ldr	r4, [pc, #144]	; (2ec4 <_power_clock_isr+0x94>)
    2e34:	2380      	movs	r3, #128	; 0x80
    2e36:	68e2      	ldr	r2, [r4, #12]
    2e38:	05db      	lsls	r3, r3, #23
    2e3a:	4694      	mov	ip, r2
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2e3c:	22c1      	movs	r2, #193	; 0xc1
    2e3e:	0092      	lsls	r2, r2, #2
    2e40:	5899      	ldr	r1, [r3, r2]
    2e42:	2201      	movs	r2, #1
    2e44:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2e46:	4920      	ldr	r1, [pc, #128]	; (2ec8 <_power_clock_isr+0x98>)
{
    2e48:	0005      	movs	r5, r0
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2e4a:	585e      	ldr	r6, [r3, r1]
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2e4c:	9200      	str	r2, [sp, #0]
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2e4e:	6867      	ldr	r7, [r4, #4]
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2e50:	68a0      	ldr	r0, [r4, #8]
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2e52:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2e54:	6962      	ldr	r2, [r4, #20]
    2e56:	9201      	str	r2, [sp, #4]
	if (pof) {
    2e58:	4662      	mov	r2, ip
    2e5a:	2a00      	cmp	r2, #0
    2e5c:	d001      	beq.n	2e62 <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    2e5e:	2200      	movs	r2, #0
    2e60:	60e2      	str	r2, [r4, #12]
	if (hf) {
    2e62:	2f00      	cmp	r7, #0
    2e64:	d001      	beq.n	2e6a <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2e66:	2700      	movs	r7, #0
    2e68:	6067      	str	r7, [r4, #4]
	if (hf_intenset && hf_stat) {
    2e6a:	9a00      	ldr	r2, [sp, #0]
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d006      	beq.n	2e7e <_power_clock_isr+0x4e>
    2e70:	03f2      	lsls	r2, r6, #15
    2e72:	d504      	bpl.n	2e7e <_power_clock_isr+0x4e>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2e74:	26c2      	movs	r6, #194	; 0xc2
    2e76:	2201      	movs	r2, #1
    2e78:	00b6      	lsls	r6, r6, #2
    2e7a:	519a      	str	r2, [r3, r6]
		NRF_CLOCK->TASKS_CAL = 1;
    2e7c:	611a      	str	r2, [r3, #16]
	if (lf) {
    2e7e:	2800      	cmp	r0, #0
    2e80:	d001      	beq.n	2e86 <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2e82:	2300      	movs	r3, #0
    2e84:	60a3      	str	r3, [r4, #8]
	if (done) {
    2e86:	2900      	cmp	r1, #0
    2e88:	d008      	beq.n	2e9c <_power_clock_isr+0x6c>
		NRF_CLOCK->EVENTS_DONE = 0;
    2e8a:	2100      	movs	r1, #0
		err = _m16src_stop(dev, NULL);
    2e8c:	0028      	movs	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    2e8e:	6121      	str	r1, [r4, #16]
		err = _m16src_stop(dev, NULL);
    2e90:	f7ff fec6 	bl	2c20 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2e94:	2380      	movs	r3, #128	; 0x80
    2e96:	2201      	movs	r2, #1
    2e98:	05db      	lsls	r3, r3, #23
    2e9a:	615a      	str	r2, [r3, #20]
	if (ctto) {
    2e9c:	9b01      	ldr	r3, [sp, #4]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d00e      	beq.n	2ec0 <_power_clock_isr+0x90>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2ea2:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2ea4:	23c1      	movs	r3, #193	; 0xc1
    2ea6:	2280      	movs	r2, #128	; 0x80
		NRF_CLOCK->EVENTS_CTTO = 0;
    2ea8:	6161      	str	r1, [r4, #20]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2eaa:	2401      	movs	r4, #1
    2eac:	009b      	lsls	r3, r3, #2
    2eae:	05d2      	lsls	r2, r2, #23
    2eb0:	50d4      	str	r4, [r2, r3]
		err = _m16src_start(dev, false);
    2eb2:	0028      	movs	r0, r5
    2eb4:	f7ff fef4 	bl	2ca0 <_m16src_start>
		if (!err) {
    2eb8:	2800      	cmp	r0, #0
    2eba:	d101      	bne.n	2ec0 <_power_clock_isr+0x90>
    2ebc:	4b03      	ldr	r3, [pc, #12]	; (2ecc <_power_clock_isr+0x9c>)
    2ebe:	605c      	str	r4, [r3, #4]
}
    2ec0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	400000fc 	.word	0x400000fc
    2ec8:	0000040c 	.word	0x0000040c
    2ecc:	e000e1fc 	.word	0xe000e1fc

00002ed0 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2ed0:	6803      	ldr	r3, [r0, #0]
{
    2ed2:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2ed4:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2ed6:	2501      	movs	r5, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2ed8:	689a      	ldr	r2, [r3, #8]
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2eda:	261f      	movs	r6, #31
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2edc:	6883      	ldr	r3, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2ede:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2ee0:	68dc      	ldr	r4, [r3, #12]
    2ee2:	0023      	movs	r3, r4
    2ee4:	40c3      	lsrs	r3, r0
    2ee6:	422b      	tst	r3, r5
    2ee8:	d008      	beq.n	2efc <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2eea:	0003      	movs	r3, r0
    2eec:	3345      	adds	r3, #69	; 0x45
    2eee:	33ff      	adds	r3, #255	; 0xff
    2ef0:	009b      	lsls	r3, r3, #2
    2ef2:	589b      	ldr	r3, [r3, r2]
    2ef4:	0a1b      	lsrs	r3, r3, #8
    2ef6:	4033      	ands	r3, r6
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2ef8:	428b      	cmp	r3, r1
    2efa:	d003      	beq.n	2f04 <gpiote_find_channel+0x34>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2efc:	3001      	adds	r0, #1
    2efe:	2804      	cmp	r0, #4
    2f00:	d1ef      	bne.n	2ee2 <gpiote_find_channel+0x12>
			return i;
		}
	}

	return -ENODEV;
    2f02:	3817      	subs	r0, #23
}
    2f04:	bd70      	pop	{r4, r5, r6, pc}

00002f06 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
    2f06:	b530      	push	{r4, r5, lr}
    2f08:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2f0a:	6802      	ldr	r2, [r0, #0]
    2f0c:	20a2      	movs	r0, #162	; 0xa2
    2f0e:	6892      	ldr	r2, [r2, #8]
    2f10:	00c0      	lsls	r0, r0, #3
    2f12:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
    2f14:	5822      	ldr	r2, [r4, r0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2f16:	2900      	cmp	r1, #0
    2f18:	d102      	bne.n	2f20 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    2f1a:	40ea      	lsrs	r2, r5
    2f1c:	3101      	adds	r1, #1
    2f1e:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
    2f20:	2000      	movs	r0, #0
		*value = gpio->IN;
    2f22:	601a      	str	r2, [r3, #0]
}
    2f24:	bd30      	pop	{r4, r5, pc}
	...

00002f28 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2f28:	6800      	ldr	r0, [r0, #0]
    2f2a:	6880      	ldr	r0, [r0, #8]
    2f2c:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2f2e:	2900      	cmp	r1, #0
    2f30:	d10a      	bne.n	2f48 <gpio_nrf5_write+0x20>
    2f32:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    2f34:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    2f36:	2b00      	cmp	r3, #0
    2f38:	d004      	beq.n	2f44 <gpio_nrf5_write+0x1c>
			gpio->OUTSET = BIT(pin);
    2f3a:	23a1      	movs	r3, #161	; 0xa1
    2f3c:	00db      	lsls	r3, r3, #3
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    2f3e:	50c1      	str	r1, [r0, r3]
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    2f40:	2000      	movs	r0, #0
    2f42:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    2f44:	4b02      	ldr	r3, [pc, #8]	; (2f50 <gpio_nrf5_write+0x28>)
    2f46:	e7fa      	b.n	2f3e <gpio_nrf5_write+0x16>
		gpio->OUT = value;
    2f48:	4a02      	ldr	r2, [pc, #8]	; (2f54 <gpio_nrf5_write+0x2c>)
    2f4a:	5083      	str	r3, [r0, r2]
    2f4c:	e7f8      	b.n	2f40 <gpio_nrf5_write+0x18>
    2f4e:	46c0      	nop			; (mov r8, r8)
    2f50:	0000050c 	.word	0x0000050c
    2f54:	00000504 	.word	0x00000504

00002f58 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2f58:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2f5a:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2f5c:	2a00      	cmp	r2, #0
    2f5e:	d008      	beq.n	2f72 <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2f60:	681a      	ldr	r2, [r3, #0]
    2f62:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    2f64:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    2f66:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    2f68:	2a00      	cmp	r2, #0
    2f6a:	d100      	bne.n	2f6e <gpio_nrf5_manage_callback+0x16>
		list->tail = list->head;
    2f6c:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2f6e:	2000      	movs	r0, #0
    2f70:	bd10      	pop	{r4, pc}
    2f72:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2f74:	2800      	cmp	r0, #0
    2f76:	d0fa      	beq.n	2f6e <gpio_nrf5_manage_callback+0x16>
		if (test == node) {
    2f78:	4281      	cmp	r1, r0
    2f7a:	d10f      	bne.n	2f9c <gpio_nrf5_manage_callback+0x44>
    2f7c:	685c      	ldr	r4, [r3, #4]
    2f7e:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    2f80:	2a00      	cmp	r2, #0
    2f82:	d106      	bne.n	2f92 <gpio_nrf5_manage_callback+0x3a>
		list->head = node->next;
    2f84:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    2f86:	42a1      	cmp	r1, r4
    2f88:	d100      	bne.n	2f8c <gpio_nrf5_manage_callback+0x34>
			list->tail = list->head;
    2f8a:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    2f8c:	2300      	movs	r3, #0
    2f8e:	600b      	str	r3, [r1, #0]
    2f90:	e7ed      	b.n	2f6e <gpio_nrf5_manage_callback+0x16>
		prev_node->next = node->next;
    2f92:	6010      	str	r0, [r2, #0]
		if (list->tail == node) {
    2f94:	42a1      	cmp	r1, r4
    2f96:	d1f9      	bne.n	2f8c <gpio_nrf5_manage_callback+0x34>
			list->tail = prev_node;
    2f98:	605a      	str	r2, [r3, #4]
    2f9a:	e7f7      	b.n	2f8c <gpio_nrf5_manage_callback+0x34>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2f9c:	0002      	movs	r2, r0
    2f9e:	6800      	ldr	r0, [r0, #0]
    2fa0:	e7e8      	b.n	2f74 <gpio_nrf5_manage_callback+0x1c>

00002fa2 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2fa4:	6803      	ldr	r3, [r0, #0]
{
    2fa6:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2fa8:	689b      	ldr	r3, [r3, #8]
{
    2faa:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2fac:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2fae:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2fb0:	2900      	cmp	r1, #0
    2fb2:	d114      	bne.n	2fde <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    2fb4:	0011      	movs	r1, r2
    2fb6:	f7ff ff8b 	bl	2ed0 <gpiote_find_channel>
		if (i < 0) {
    2fba:	2800      	cmp	r0, #0
    2fbc:	db0e      	blt.n	2fdc <gpio_nrf5_enable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2fbe:	2301      	movs	r3, #1
    2fc0:	001a      	movs	r2, r3
    2fc2:	40ba      	lsls	r2, r7
    2fc4:	68b1      	ldr	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2fc6:	4083      	lsls	r3, r0
		data->pin_callback_enables |= BIT(pin);
    2fc8:	430a      	orrs	r2, r1
    2fca:	60b2      	str	r2, [r6, #8]
		gpiote->EVENTS_IN[i] = 0;
    2fcc:	0002      	movs	r2, r0
    2fce:	3240      	adds	r2, #64	; 0x40
    2fd0:	0092      	lsls	r2, r2, #2
    2fd2:	5154      	str	r4, [r2, r5]
		gpiote->INTENSET = BIT(i);
    2fd4:	22c1      	movs	r2, #193	; 0xc1
	} else {
		return -ENOTSUP;
	}

	return 0;
    2fd6:	0020      	movs	r0, r4
		gpiote->INTENSET = BIT(i);
    2fd8:	0092      	lsls	r2, r2, #2
    2fda:	50ab      	str	r3, [r5, r2]
}
    2fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2fde:	2023      	movs	r0, #35	; 0x23
    2fe0:	4240      	negs	r0, r0
    2fe2:	e7fb      	b.n	2fdc <gpio_nrf5_enable_callback+0x3a>

00002fe4 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2fe6:	6803      	ldr	r3, [r0, #0]
{
    2fe8:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2fea:	689b      	ldr	r3, [r3, #8]
{
    2fec:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2fee:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2ff0:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2ff2:	2900      	cmp	r1, #0
    2ff4:	d110      	bne.n	3018 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    2ff6:	0011      	movs	r1, r2
    2ff8:	f7ff ff6a 	bl	2ed0 <gpiote_find_channel>
		if (i < 0) {
    2ffc:	2800      	cmp	r0, #0
    2ffe:	db0a      	blt.n	3016 <gpio_nrf5_disable_callback+0x32>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    3000:	2301      	movs	r3, #1
    3002:	001a      	movs	r2, r3
    3004:	40b2      	lsls	r2, r6
    3006:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    3008:	4083      	lsls	r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    300a:	4391      	bics	r1, r2
		gpiote->INTENCLR = BIT(i);
    300c:	22c2      	movs	r2, #194	; 0xc2
	} else {
		return -ENOTSUP;
	}

	return 0;
    300e:	0020      	movs	r0, r4
		gpiote->INTENCLR = BIT(i);
    3010:	0092      	lsls	r2, r2, #2
		data->pin_callback_enables &= ~(BIT(pin));
    3012:	60a9      	str	r1, [r5, #8]
		gpiote->INTENCLR = BIT(i);
    3014:	50bb      	str	r3, [r7, r2]
}
    3016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    3018:	2023      	movs	r0, #35	; 0x23
    301a:	4240      	negs	r0, r0
    301c:	e7fb      	b.n	3016 <gpio_nrf5_disable_callback+0x32>

0000301e <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    301e:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    3020:	2200      	movs	r2, #0
    3022:	2101      	movs	r1, #1
    3024:	2006      	movs	r0, #6
    3026:	f7ff f875 	bl	2114 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    302a:	2006      	movs	r0, #6
    302c:	f7ff f848 	bl	20c0 <_arch_irq_enable>

	return 0;
}
    3030:	2000      	movs	r0, #0
    3032:	bd10      	pop	{r4, pc}

00003034 <gpio_nrf5_port_isr>:
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3034:	6803      	ldr	r3, [r0, #0]
{
    3036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3038:	689b      	ldr	r3, [r3, #8]
{
    303a:	0004      	movs	r4, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    303c:	689b      	ldr	r3, [r3, #8]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    303e:	2701      	movs	r7, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3040:	9301      	str	r3, [sp, #4]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    3042:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    3044:	001a      	movs	r2, r3
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    3046:	6885      	ldr	r5, [r0, #8]
    3048:	9801      	ldr	r0, [sp, #4]
    304a:	0099      	lsls	r1, r3, #2
    304c:	1841      	adds	r1, r0, r1
		if (gpiote->EVENTS_IN[i]) {
    304e:	0008      	movs	r0, r1
    3050:	30fc      	adds	r0, #252	; 0xfc
    3052:	6846      	ldr	r6, [r0, #4]
    3054:	2e00      	cmp	r6, #0
    3056:	d00a      	beq.n	306e <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    3058:	2600      	movs	r6, #0
    305a:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    305c:	20a2      	movs	r0, #162	; 0xa2
    305e:	00c0      	lsls	r0, r0, #3
    3060:	5809      	ldr	r1, [r1, r0]
    3062:	201f      	movs	r0, #31
    3064:	0a09      	lsrs	r1, r1, #8
    3066:	4001      	ands	r1, r0
    3068:	0038      	movs	r0, r7
    306a:	4088      	lsls	r0, r1
    306c:	4302      	orrs	r2, r0
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    306e:	3301      	adds	r3, #1
    3070:	2b04      	cmp	r3, #4
    3072:	d1e9      	bne.n	3048 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    3074:	68ae      	ldr	r6, [r5, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    3076:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    3078:	4016      	ands	r6, r2
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    307a:	f7ff f82d 	bl	20d8 <_arch_irq_disable>
    307e:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    3080:	2d00      	cmp	r5, #0
    3082:	d103      	bne.n	308c <gpio_nrf5_port_isr+0x58>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    3084:	2006      	movs	r0, #6
    3086:	f7ff f81b 	bl	20c0 <_arch_irq_enable>
}
    308a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    308c:	68ab      	ldr	r3, [r5, #8]
    308e:	4233      	tst	r3, r6
    3090:	d0f5      	beq.n	307e <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    3092:	0032      	movs	r2, r6
    3094:	0029      	movs	r1, r5
    3096:	0020      	movs	r0, r4
    3098:	686b      	ldr	r3, [r5, #4]
    309a:	4798      	blx	r3
    309c:	e7ef      	b.n	307e <gpio_nrf5_port_isr+0x4a>
	...

000030a0 <gpio_nrf5_config>:
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	0006      	movs	r6, r0
    30a4:	0014      	movs	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    30a6:	6802      	ldr	r2, [r0, #0]
{
    30a8:	b085      	sub	sp, #20
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    30aa:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    30ac:	68b5      	ldr	r5, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    30ae:	6890      	ldr	r0, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    30b0:	6817      	ldr	r7, [r2, #0]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    30b2:	9003      	str	r0, [sp, #12]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    30b4:	2900      	cmp	r1, #0
    30b6:	d002      	beq.n	30be <gpio_nrf5_config+0x1e>
		return -ENOTSUP;
    30b8:	2023      	movs	r0, #35	; 0x23
			return -EIO;
    30ba:	4240      	negs	r0, r0
    30bc:	e063      	b.n	3186 <gpio_nrf5_config+0xe6>
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    30be:	2203      	movs	r2, #3
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    30c0:	20c0      	movs	r0, #192	; 0xc0
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    30c2:	1319      	asrs	r1, r3, #12
    30c4:	4011      	ands	r1, r2
    30c6:	468c      	mov	ip, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    30c8:	1399      	asrs	r1, r3, #14
    30ca:	4011      	ands	r1, r2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    30cc:	0280      	lsls	r0, r0, #10
    30ce:	4018      	ands	r0, r3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    30d0:	9102      	str	r1, [sp, #8]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    30d2:	21c0      	movs	r1, #192	; 0xc0
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    30d4:	9001      	str	r0, [sp, #4]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    30d6:	2080      	movs	r0, #128	; 0x80
    30d8:	0089      	lsls	r1, r1, #2
    30da:	4019      	ands	r1, r3
			pull = GPIO_PULL_UP;
    30dc:	3209      	adds	r2, #9
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    30de:	0040      	lsls	r0, r0, #1
    30e0:	4281      	cmp	r1, r0
    30e2:	d004      	beq.n	30ee <gpio_nrf5_config+0x4e>
		u8_t pull = GPIO_PULL_DISABLE;
    30e4:	4a35      	ldr	r2, [pc, #212]	; (31bc <gpio_nrf5_config+0x11c>)
    30e6:	1889      	adds	r1, r1, r2
    30e8:	424a      	negs	r2, r1
    30ea:	414a      	adcs	r2, r1
    30ec:	0092      	lsls	r2, r2, #2
		if (sense == GPIO_SENSE_INVALID) {
    30ee:	2180      	movs	r1, #128	; 0x80
    30f0:	9801      	ldr	r0, [sp, #4]
    30f2:	0249      	lsls	r1, r1, #9
    30f4:	4288      	cmp	r0, r1
    30f6:	d101      	bne.n	30fc <gpio_nrf5_config+0x5c>
			sense = GPIO_SENSE_DISABLE;
    30f8:	2100      	movs	r1, #0
    30fa:	9101      	str	r1, [sp, #4]
    30fc:	4660      	mov	r0, ip
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    30fe:	2101      	movs	r1, #1
    3100:	0080      	lsls	r0, r0, #2
    3102:	4684      	mov	ip, r0
    3104:	420b      	tst	r3, r1
    3106:	d045      	beq.n	3194 <gpio_nrf5_config+0xf4>
			if (pull == GPIO_PULL_UP) {
    3108:	2a0c      	cmp	r2, #12
    310a:	d13e      	bne.n	318a <gpio_nrf5_config+0xea>
				gpio->OUTSET = BIT(pin);
    310c:	20a1      	movs	r0, #161	; 0xa1
    310e:	40a1      	lsls	r1, r4
    3110:	00c0      	lsls	r0, r0, #3
				gpio->OUTCLR = BIT(pin);
    3112:	5039      	str	r1, [r7, r0]
					      drive_strength[ds_low][ds_high] |
    3114:	9902      	ldr	r1, [sp, #8]
					      GPIO_INPUT_DISCONNECT |
    3116:	482a      	ldr	r0, [pc, #168]	; (31c0 <gpio_nrf5_config+0x120>)
					      drive_strength[ds_low][ds_high] |
    3118:	4461      	add	r1, ip
    311a:	0089      	lsls	r1, r1, #2
					      GPIO_INPUT_DISCONNECT |
    311c:	5808      	ldr	r0, [r1, r0]
    311e:	2103      	movs	r1, #3
    3120:	4301      	orrs	r1, r0
    3122:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    3124:	0021      	movs	r1, r4
    3126:	31c1      	adds	r1, #193	; 0xc1
    3128:	31ff      	adds	r1, #255	; 0xff
    312a:	0089      	lsls	r1, r1, #2
    312c:	51ca      	str	r2, [r1, r7]
	if (flags & GPIO_INT) {
    312e:	2002      	movs	r0, #2
    3130:	4018      	ands	r0, r3
    3132:	d028      	beq.n	3186 <gpio_nrf5_config+0xe6>
		if (flags & GPIO_INT_EDGE) {
    3134:	069a      	lsls	r2, r3, #26
    3136:	d5bf      	bpl.n	30b8 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    3138:	065a      	lsls	r2, r3, #25
    313a:	d439      	bmi.n	31b0 <gpio_nrf5_config+0x110>
				config |= GPIOTE_CFG_POL_L2H;
    313c:	2780      	movs	r7, #128	; 0x80
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    313e:	075b      	lsls	r3, r3, #29
    3140:	d438      	bmi.n	31b4 <gpio_nrf5_config+0x114>
				config |= GPIOTE_CFG_POL_TOGG;
    3142:	02bf      	lsls	r7, r7, #10
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    3144:	68e8      	ldr	r0, [r5, #12]
    3146:	f7fd f95b 	bl	400 <__popcountsi2>
    314a:	2804      	cmp	r0, #4
    314c:	d034      	beq.n	31b8 <gpio_nrf5_config+0x118>
		int i = gpiote_find_channel(dev, pin);
    314e:	0030      	movs	r0, r6
    3150:	0021      	movs	r1, r4
    3152:	f7ff febd 	bl	2ed0 <gpiote_find_channel>
    3156:	68ee      	ldr	r6, [r5, #12]
		if (i < 0) {
    3158:	2800      	cmp	r0, #0
    315a:	da03      	bge.n	3164 <gpio_nrf5_config+0xc4>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    315c:	43f0      	mvns	r0, r6
    315e:	f7fd f945 	bl	3ec <__ffssi2>
    3162:	3801      	subs	r0, #1
		data->gpiote_chan_mask |= BIT(i);
    3164:	2301      	movs	r3, #1
    3166:	001a      	movs	r2, r3
    3168:	4082      	lsls	r2, r0
    316a:	4316      	orrs	r6, r2
		config |= GPIOTE_CFG_PIN(pin);
    316c:	22f8      	movs	r2, #248	; 0xf8
    316e:	0224      	lsls	r4, r4, #8
    3170:	0152      	lsls	r2, r2, #5
    3172:	4014      	ands	r4, r2
		gpiote->CONFIG[i] = config;
    3174:	3045      	adds	r0, #69	; 0x45
		config |= GPIOTE_CFG_PIN(pin);
    3176:	431c      	orrs	r4, r3
		gpiote->CONFIG[i] = config;
    3178:	30ff      	adds	r0, #255	; 0xff
    317a:	9b03      	ldr	r3, [sp, #12]
    317c:	0080      	lsls	r0, r0, #2
		config |= GPIOTE_CFG_PIN(pin);
    317e:	4327      	orrs	r7, r4
		data->gpiote_chan_mask |= BIT(i);
    3180:	60ee      	str	r6, [r5, #12]
		gpiote->CONFIG[i] = config;
    3182:	50c7      	str	r7, [r0, r3]
	return 0;
    3184:	2000      	movs	r0, #0
}
    3186:	b005      	add	sp, #20
    3188:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if (pull == GPIO_PULL_DOWN) {
    318a:	2a04      	cmp	r2, #4
    318c:	d1c2      	bne.n	3114 <gpio_nrf5_config+0x74>
				gpio->OUTCLR = BIT(pin);
    318e:	40a1      	lsls	r1, r4
    3190:	480c      	ldr	r0, [pc, #48]	; (31c4 <gpio_nrf5_config+0x124>)
    3192:	e7be      	b.n	3112 <gpio_nrf5_config+0x72>
					      drive_strength[ds_low][ds_high] |
    3194:	9902      	ldr	r1, [sp, #8]
    3196:	480a      	ldr	r0, [pc, #40]	; (31c0 <gpio_nrf5_config+0x120>)
    3198:	4461      	add	r1, ip
    319a:	0089      	lsls	r1, r1, #2
    319c:	5809      	ldr	r1, [r1, r0]
    319e:	9801      	ldr	r0, [sp, #4]
    31a0:	430a      	orrs	r2, r1
    31a2:	4310      	orrs	r0, r2
			gpio->PIN_CNF[pin] = (sense |
    31a4:	0022      	movs	r2, r4
    31a6:	32c1      	adds	r2, #193	; 0xc1
    31a8:	32ff      	adds	r2, #255	; 0xff
    31aa:	0092      	lsls	r2, r2, #2
    31ac:	51d0      	str	r0, [r2, r7]
    31ae:	e7be      	b.n	312e <gpio_nrf5_config+0x8e>
				config |= GPIOTE_CFG_POL_TOGG;
    31b0:	27c0      	movs	r7, #192	; 0xc0
    31b2:	e7c6      	b.n	3142 <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_L2H;
    31b4:	027f      	lsls	r7, r7, #9
    31b6:	e7c5      	b.n	3144 <gpio_nrf5_config+0xa4>
			return -EIO;
    31b8:	2005      	movs	r0, #5
    31ba:	e77e      	b.n	30ba <gpio_nrf5_config+0x1a>
    31bc:	fffffe00 	.word	0xfffffe00
    31c0:	0000c924 	.word	0x0000c924
    31c4:	0000050c 	.word	0x0000050c

000031c8 <pwm_nrf5_sw_pin_set>:
	return i;
}

static int pwm_nrf5_sw_pin_set(struct device *dev, u32_t pwm,
			       u32_t period_cycles, u32_t pulse_cycles)
{
    31c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ca:	b087      	sub	sp, #28
    31cc:	9301      	str	r3, [sp, #4]
	u8_t ppi_index;
	u8_t channel;
	u16_t div;
	u32_t ret;

	config = (struct pwm_config *)dev->config->config_info;
    31ce:	6803      	ldr	r3, [r0, #0]
{
    31d0:	9200      	str	r2, [sp, #0]
	config = (struct pwm_config *)dev->config->config_info;
    31d2:	689e      	ldr	r6, [r3, #8]
	timer = config->timer;
	data = dev->driver_data;
    31d4:	6882      	ldr	r2, [r0, #8]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    31d6:	9801      	ldr	r0, [sp, #4]
{
    31d8:	9102      	str	r1, [sp, #8]

	/* check if requested period is allowed while other channels are
	 * active.
	 */
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    31da:	79b1      	ldrb	r1, [r6, #6]
    31dc:	1d13      	adds	r3, r2, #4
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    31de:	2800      	cmp	r0, #0
    31e0:	d009      	beq.n	31f6 <pwm_nrf5_sw_pin_set+0x2e>
    31e2:	9800      	ldr	r0, [sp, #0]
    31e4:	9c01      	ldr	r4, [sp, #4]
    31e6:	42a0      	cmp	r0, r4
    31e8:	d005      	beq.n	31f6 <pwm_nrf5_sw_pin_set+0x2e>
    31ea:	001c      	movs	r4, r3
    31ec:	00c8      	lsls	r0, r1, #3
    31ee:	3004      	adds	r0, #4
    31f0:	1810      	adds	r0, r2, r0
	for (i = 0; i < map_size; i++) {
    31f2:	4284      	cmp	r4, r0
    31f4:	d105      	bne.n	3202 <pwm_nrf5_sw_pin_set+0x3a>
{
    31f6:	2000      	movs	r0, #0
	for (i = 0; i < map_size; i++) {
    31f8:	4281      	cmp	r1, r0
    31fa:	d110      	bne.n	321e <pwm_nrf5_sw_pin_set+0x56>
    31fc:	1e4b      	subs	r3, r1, #1
    31fe:	b2db      	uxtb	r3, r3
    3200:	e01f      	b.n	3242 <pwm_nrf5_sw_pin_set+0x7a>
		if ((data->map[i].pwm != pwm) &&
    3202:	9d02      	ldr	r5, [sp, #8]
    3204:	6827      	ldr	r7, [r4, #0]
    3206:	42bd      	cmp	r5, r7
    3208:	d007      	beq.n	321a <pwm_nrf5_sw_pin_set+0x52>
    320a:	6865      	ldr	r5, [r4, #4]
    320c:	2d00      	cmp	r5, #0
    320e:	d004      	beq.n	321a <pwm_nrf5_sw_pin_set+0x52>
		    (data->map[i].pulse_cycles != 0) &&
    3210:	9d00      	ldr	r5, [sp, #0]
    3212:	6817      	ldr	r7, [r2, #0]
    3214:	42bd      	cmp	r5, r7
    3216:	d000      	beq.n	321a <pwm_nrf5_sw_pin_set+0x52>
    3218:	e0b7      	b.n	338a <pwm_nrf5_sw_pin_set+0x1c2>
    321a:	3408      	adds	r4, #8
    321c:	e7e9      	b.n	31f2 <pwm_nrf5_sw_pin_set+0x2a>
    321e:	3308      	adds	r3, #8
		if (pwm == data->map[i].pwm) {
    3220:	001c      	movs	r4, r3
    3222:	3c08      	subs	r4, #8
    3224:	6824      	ldr	r4, [r4, #0]
    3226:	9d02      	ldr	r5, [sp, #8]
    3228:	42a5      	cmp	r5, r4
    322a:	d044      	beq.n	32b6 <pwm_nrf5_sw_pin_set+0xee>
	for (i = 0; i < map_size; i++) {
    322c:	3001      	adds	r0, #1
    322e:	b2c0      	uxtb	r0, r0
    3230:	e7e2      	b.n	31f8 <pwm_nrf5_sw_pin_set+0x30>
		if (data->map[i].pulse_cycles == 0) {
    3232:	00dd      	lsls	r5, r3, #3
    3234:	1955      	adds	r5, r2, r5
    3236:	68ad      	ldr	r5, [r5, #8]
    3238:	1e5c      	subs	r4, r3, #1
    323a:	b2e4      	uxtb	r4, r4
    323c:	2d00      	cmp	r5, #0
    323e:	d004      	beq.n	324a <pwm_nrf5_sw_pin_set+0x82>
    3240:	0023      	movs	r3, r4
	while (i--) {
    3242:	2bff      	cmp	r3, #255	; 0xff
    3244:	d1f5      	bne.n	3232 <pwm_nrf5_sw_pin_set+0x6a>

	/* map pwm pin to GPIOTE config/channel */
	channel = pwm_channel_map(data, config->map_size, pwm);
	if (channel >= config->map_size) {
		SYS_LOG_ERR("No more channels available");
		return -ENOMEM;
    3246:	200c      	movs	r0, #12
    3248:	e0a0      	b.n	338c <pwm_nrf5_sw_pin_set+0x1c4>
	if (channel >= config->map_size) {
    324a:	4283      	cmp	r3, r0
    324c:	d2fb      	bcs.n	3246 <pwm_nrf5_sw_pin_set+0x7e>

	SYS_LOG_DBG("PWM %d, period %u, pulse %u", pwm,
			period_cycles, pulse_cycles);

	/* clear GPIOTE config */
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    324e:	7930      	ldrb	r0, [r6, #4]
    3250:	4d4f      	ldr	r5, [pc, #316]	; (3390 <pwm_nrf5_sw_pin_set+0x1c8>)
    3252:	18c0      	adds	r0, r0, r3
    3254:	0080      	lsls	r0, r0, #2
    3256:	1940      	adds	r0, r0, r5
    3258:	27a2      	movs	r7, #162	; 0xa2
    325a:	9004      	str	r0, [sp, #16]
    325c:	2000      	movs	r0, #0
    325e:	9d04      	ldr	r5, [sp, #16]
    3260:	00ff      	lsls	r7, r7, #3
	timer = config->timer;
    3262:	6834      	ldr	r4, [r6, #0]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    3264:	51e8      	str	r0, [r5, r7]

	/* clear PPI used */
	ppi_index = config->ppi_base + (channel << 1);
    3266:	7976      	ldrb	r6, [r6, #5]
    3268:	005d      	lsls	r5, r3, #1
    326a:	1975      	adds	r5, r6, r5
    326c:	b2ed      	uxtb	r5, r5
    326e:	46ac      	mov	ip, r5
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    3270:	2601      	movs	r6, #1
    3272:	3501      	adds	r5, #1
    3274:	40ae      	lsls	r6, r5
    3276:	4667      	mov	r7, ip
    3278:	2501      	movs	r5, #1
    327a:	40bd      	lsls	r5, r7
    327c:	27a1      	movs	r7, #161	; 0xa1
    327e:	432e      	orrs	r6, r5
    3280:	4d44      	ldr	r5, [pc, #272]	; (3394 <pwm_nrf5_sw_pin_set+0x1cc>)
    3282:	00ff      	lsls	r7, r7, #3
    3284:	9603      	str	r6, [sp, #12]
    3286:	51ee      	str	r6, [r5, r7]

	/* configure GPIO pin as output */
	NRF_GPIO->DIRSET = BIT(pwm);
    3288:	2601      	movs	r6, #1
    328a:	9d02      	ldr	r5, [sp, #8]
    328c:	3710      	adds	r7, #16
    328e:	40ae      	lsls	r6, r5
    3290:	25a0      	movs	r5, #160	; 0xa0
    3292:	05ed      	lsls	r5, r5, #23
    3294:	51ee      	str	r6, [r5, r7]
	if (pulse_cycles == 0) {
    3296:	9f01      	ldr	r7, [sp, #4]
    3298:	4287      	cmp	r7, r0
    329a:	d10e      	bne.n	32ba <pwm_nrf5_sw_pin_set+0xf2>
		/* 0% duty cycle, keep pin low */
		NRF_GPIO->OUTCLR = BIT(pwm);
    329c:	483e      	ldr	r0, [pc, #248]	; (3398 <pwm_nrf5_sw_pin_set+0x1d0>)

		goto pin_set_pwm_off;
	} else if (pulse_cycles == period_cycles) {
		/* 100% duty cycle, keep pin high */
		NRF_GPIO->OUTSET = BIT(pwm);
    329e:	502e      	str	r6, [r5, r0]
	data->map[channel].pulse_cycles = pulse_cycles;

	return 0;

pin_set_pwm_off:
	data->map[channel].pulse_cycles = 0;
    32a0:	2000      	movs	r0, #0
    32a2:	00db      	lsls	r3, r3, #3
    32a4:	18d3      	adds	r3, r2, r3
    32a6:	00c9      	lsls	r1, r1, #3
    32a8:	6098      	str	r0, [r3, #8]
    32aa:	1851      	adds	r1, r2, r1
	bool pwm_active = false;

	/* stop timer if all channels are inactive */
	for (channel = 0; channel < config->map_size; channel++) {
    32ac:	4291      	cmp	r1, r2
    32ae:	d165      	bne.n	337c <pwm_nrf5_sw_pin_set+0x1b4>
		}
	}

	if (!pwm_active) {
		/* No active PWM, stop timer */
		timer->TASKS_STOP = 1;
    32b0:	2301      	movs	r3, #1
    32b2:	6063      	str	r3, [r4, #4]
    32b4:	e067      	b.n	3386 <pwm_nrf5_sw_pin_set+0x1be>
		if (pwm == data->map[i].pwm) {
    32b6:	0003      	movs	r3, r0
    32b8:	e7c9      	b.n	324e <pwm_nrf5_sw_pin_set+0x86>
	} else if (pulse_cycles == period_cycles) {
    32ba:	9f00      	ldr	r7, [sp, #0]
    32bc:	9d01      	ldr	r5, [sp, #4]
    32be:	42af      	cmp	r7, r5
    32c0:	d104      	bne.n	32cc <pwm_nrf5_sw_pin_set+0x104>
		NRF_GPIO->OUTSET = BIT(pwm);
    32c2:	20a1      	movs	r0, #161	; 0xa1
    32c4:	25a0      	movs	r5, #160	; 0xa0
    32c6:	00c0      	lsls	r0, r0, #3
    32c8:	05ed      	lsls	r5, r5, #23
    32ca:	e7e8      	b.n	329e <pwm_nrf5_sw_pin_set+0xd6>
		NRF_GPIO->OUTCLR = BIT(pwm);
    32cc:	25a0      	movs	r5, #160	; 0xa0
    32ce:	4f32      	ldr	r7, [pc, #200]	; (3398 <pwm_nrf5_sw_pin_set+0x1d0>)
    32d0:	05ed      	lsls	r5, r5, #23
    32d2:	51ee      	str	r6, [r5, r7]
	timer->MODE = TIMER_MODE_MODE_Timer;
    32d4:	4d31      	ldr	r5, [pc, #196]	; (339c <pwm_nrf5_sw_pin_set+0x1d4>)
    32d6:	0089      	lsls	r1, r1, #2
    32d8:	5160      	str	r0, [r4, r5]
	timer->PRESCALER = 0;
    32da:	350c      	adds	r5, #12
    32dc:	5160      	str	r0, [r4, r5]
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    32de:	3d08      	subs	r5, #8
    32e0:	5160      	str	r0, [r4, r5]
    32e2:	009d      	lsls	r5, r3, #2
    32e4:	1967      	adds	r7, r4, r5
	timer->EVENTS_COMPARE[channel] = 0;
    32e6:	003d      	movs	r5, r7
    32e8:	1861      	adds	r1, r4, r1
    32ea:	35fc      	adds	r5, #252	; 0xfc
    32ec:	6468      	str	r0, [r5, #68]	; 0x44
	timer->EVENTS_COMPARE[config->map_size] = 0;
    32ee:	000d      	movs	r5, r1
    32f0:	35fc      	adds	r5, #252	; 0xfc
    32f2:	6468      	str	r0, [r5, #68]	; 0x44
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    32f4:	2580      	movs	r5, #128	; 0x80
    32f6:	2608      	movs	r6, #8
    32f8:	00ad      	lsls	r5, r5, #2
    32fa:	5166      	str	r6, [r4, r5]
	div = period_cycles >> 16;
    32fc:	9d00      	ldr	r5, [sp, #0]
    32fe:	9105      	str	r1, [sp, #20]
    3300:	0c2e      	lsrs	r6, r5, #16
	timer->CC[channel] = pulse_cycles >> div;
    3302:	9d01      	ldr	r5, [sp, #4]
    3304:	40f5      	lsrs	r5, r6
    3306:	0029      	movs	r1, r5
    3308:	25a8      	movs	r5, #168	; 0xa8
    330a:	00ed      	lsls	r5, r5, #3
    330c:	5179      	str	r1, [r7, r5]
	timer->CC[config->map_size] = period_cycles >> div;
    330e:	9f00      	ldr	r7, [sp, #0]
    3310:	9905      	ldr	r1, [sp, #20]
    3312:	40f7      	lsrs	r7, r6
    3314:	514f      	str	r7, [r1, r5]
	timer->TASKS_CLEAR = 1;
    3316:	2101      	movs	r1, #1
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    3318:	26a2      	movs	r6, #162	; 0xa2
	timer->TASKS_CLEAR = 1;
    331a:	60e1      	str	r1, [r4, #12]
							    (pwm << 8);
    331c:	9902      	ldr	r1, [sp, #8]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    331e:	00f6      	lsls	r6, r6, #3
							    (pwm << 8);
    3320:	020d      	lsls	r5, r1, #8
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    3322:	491f      	ldr	r1, [pc, #124]	; (33a0 <pwm_nrf5_sw_pin_set+0x1d8>)
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    3324:	27a3      	movs	r7, #163	; 0xa3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    3326:	4329      	orrs	r1, r5
    3328:	9d04      	ldr	r5, [sp, #16]
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    332a:	00ff      	lsls	r7, r7, #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    332c:	51a9      	str	r1, [r5, r6]
    332e:	4661      	mov	r1, ip
				     &(timer->EVENTS_COMPARE[channel]);
    3330:	001d      	movs	r5, r3
    3332:	4e18      	ldr	r6, [pc, #96]	; (3394 <pwm_nrf5_sw_pin_set+0x1cc>)
    3334:	00c9      	lsls	r1, r1, #3
    3336:	1989      	adds	r1, r1, r6
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    3338:	26a2      	movs	r6, #162	; 0xa2
				     &(timer->EVENTS_COMPARE[channel]);
    333a:	3550      	adds	r5, #80	; 0x50
    333c:	00ad      	lsls	r5, r5, #2
    333e:	1965      	adds	r5, r4, r5
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    3340:	00f6      	lsls	r6, r6, #3
    3342:	518d      	str	r5, [r1, r6]
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    3344:	4e12      	ldr	r6, [pc, #72]	; (3390 <pwm_nrf5_sw_pin_set+0x1c8>)
    3346:	009d      	lsls	r5, r3, #2
    3348:	46b4      	mov	ip, r6
    334a:	4e16      	ldr	r6, [pc, #88]	; (33a4 <pwm_nrf5_sw_pin_set+0x1dc>)
    334c:	4465      	add	r5, ip
    334e:	518d      	str	r5, [r1, r6]
					 &(timer->EVENTS_COMPARE[3]);
    3350:	0026      	movs	r6, r4
    3352:	364d      	adds	r6, #77	; 0x4d
    3354:	36ff      	adds	r6, #255	; 0xff
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    3356:	51ce      	str	r6, [r1, r7]
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    3358:	4e13      	ldr	r6, [pc, #76]	; (33a8 <pwm_nrf5_sw_pin_set+0x1e0>)
    335a:	00db      	lsls	r3, r3, #3
    335c:	518d      	str	r5, [r1, r6]
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    335e:	490d      	ldr	r1, [pc, #52]	; (3394 <pwm_nrf5_sw_pin_set+0x1cc>)
    3360:	4d0e      	ldr	r5, [pc, #56]	; (339c <pwm_nrf5_sw_pin_set+0x1d4>)
    3362:	9e03      	ldr	r6, [sp, #12]
    3364:	514e      	str	r6, [r1, r5]
	timer->TASKS_START = 1;
    3366:	2101      	movs	r1, #1
    3368:	6021      	str	r1, [r4, #0]
	data->period_cycles = period_cycles;
    336a:	9900      	ldr	r1, [sp, #0]
    336c:	6011      	str	r1, [r2, #0]
    336e:	18d2      	adds	r2, r2, r3
	data->map[channel].pwm = pwm;
    3370:	9b02      	ldr	r3, [sp, #8]
    3372:	6053      	str	r3, [r2, #4]
	data->map[channel].pulse_cycles = pulse_cycles;
    3374:	9b01      	ldr	r3, [sp, #4]
    3376:	6093      	str	r3, [r2, #8]
	}

	return 0;
}
    3378:	b007      	add	sp, #28
    337a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    337c:	3208      	adds	r2, #8
		if (data->map[channel].pulse_cycles) {
    337e:	6813      	ldr	r3, [r2, #0]
    3380:	2b00      	cmp	r3, #0
    3382:	d100      	bne.n	3386 <pwm_nrf5_sw_pin_set+0x1be>
    3384:	e792      	b.n	32ac <pwm_nrf5_sw_pin_set+0xe4>
	return 0;
    3386:	2000      	movs	r0, #0
    3388:	e7f6      	b.n	3378 <pwm_nrf5_sw_pin_set+0x1b0>
		return ret;
    338a:	2016      	movs	r0, #22
		return -ENOMEM;
    338c:	4240      	negs	r0, r0
    338e:	e7f3      	b.n	3378 <pwm_nrf5_sw_pin_set+0x1b0>
    3390:	40006000 	.word	0x40006000
    3394:	4001f000 	.word	0x4001f000
    3398:	0000050c 	.word	0x0000050c
    339c:	00000504 	.word	0x00000504
    33a0:	00130003 	.word	0x00130003
    33a4:	00000514 	.word	0x00000514
    33a8:	0000051c 	.word	0x0000051c

000033ac <pwm_nrf5_sw_get_cycles_per_sec>:
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;

	/* HF timer frequency is derived from 16MHz source and prescaler is 0 */
	*cycles = 16 * 1024 * 1024;
    33ac:	2080      	movs	r0, #128	; 0x80
    33ae:	2100      	movs	r1, #0
    33b0:	0440      	lsls	r0, r0, #17
    33b2:	6010      	str	r0, [r2, #0]
    33b4:	6051      	str	r1, [r2, #4]

	return 0;
}
    33b6:	2000      	movs	r0, #0
    33b8:	4770      	bx	lr

000033ba <pwm_nrf5_sw_init>:
};

static int pwm_nrf5_sw_init(struct device *dev)
{
	return 0;
}
    33ba:	2000      	movs	r0, #0
    33bc:	4770      	bx	lr
	...

000033c0 <temp_nrf5_channel_get>:
}

static int temp_nrf5_channel_get(struct device *dev,
				enum sensor_channel chan,
				struct sensor_value *val)
{
    33c0:	b570      	push	{r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->driver_data;
    33c2:	6883      	ldr	r3, [r0, #8]
{
    33c4:	0015      	movs	r5, r2
	s32_t uval;

	SYS_LOG_DBG("");

	if (chan != SENSOR_CHAN_TEMP) {
    33c6:	290c      	cmp	r1, #12
    33c8:	d10e      	bne.n	33e8 <temp_nrf5_channel_get+0x28>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    33ca:	699b      	ldr	r3, [r3, #24]
    33cc:	4c08      	ldr	r4, [pc, #32]	; (33f0 <temp_nrf5_channel_get+0x30>)
	val->val1 = uval / 1000000;
    33ce:	4909      	ldr	r1, [pc, #36]	; (33f4 <temp_nrf5_channel_get+0x34>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    33d0:	435c      	muls	r4, r3
	val->val1 = uval / 1000000;
    33d2:	0020      	movs	r0, r4
    33d4:	f7fc ff46 	bl	264 <__aeabi_idiv>
	val->val2 = uval % 1000000;
    33d8:	4906      	ldr	r1, [pc, #24]	; (33f4 <temp_nrf5_channel_get+0x34>)
	val->val1 = uval / 1000000;
    33da:	6028      	str	r0, [r5, #0]
	val->val2 = uval % 1000000;
    33dc:	0020      	movs	r0, r4
    33de:	f7fc ff97 	bl	310 <__aeabi_idivmod>

	return 0;
    33e2:	2000      	movs	r0, #0
	val->val2 = uval % 1000000;
    33e4:	6069      	str	r1, [r5, #4]
}
    33e6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    33e8:	2023      	movs	r0, #35	; 0x23
    33ea:	4240      	negs	r0, r0
    33ec:	e7fb      	b.n	33e6 <temp_nrf5_channel_get+0x26>
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	0003d090 	.word	0x0003d090
    33f4:	000f4240 	.word	0x000f4240

000033f8 <temp_nrf5_init>:
		    &temp_nrf5_driver, NULL,
		    POST_KERNEL,
		    CONFIG_SENSOR_INIT_PRIORITY, &temp_nrf5_driver_api);

static int temp_nrf5_init(struct device *dev)
{
    33f8:	b510      	push	{r4, lr}
	volatile NRF_TEMP_Type *temp = NRF_TEMP;
	struct temp_nrf5_data *data = dev->driver_data;
    33fa:	6884      	ldr	r4, [r0, #8]

	SYS_LOG_DBG("");

	data->clk_m16_dev =
		device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    33fc:	480c      	ldr	r0, [pc, #48]	; (3430 <temp_nrf5_init+0x38>)
    33fe:	f007 fd0d 	bl	ae1c <device_get_binding>

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3402:	2201      	movs	r2, #1
	data->clk_m16_dev =
    3404:	61e0      	str	r0, [r4, #28]
    3406:	4252      	negs	r2, r2
    3408:	0020      	movs	r0, r4
    340a:	2100      	movs	r1, #0
    340c:	f008 fa02 	bl	b814 <_impl_k_sem_init>
	__ASSERT_NO_MSG(data->clk_m16_dev);

	k_sem_init(&data->device_sync_sem, 0, UINT_MAX);
	IRQ_CONNECT(NRF5_IRQ_TEMP_IRQn, CONFIG_TEMP_NRF5_PRI,
    3410:	2200      	movs	r2, #0
    3412:	2101      	movs	r1, #1
    3414:	200c      	movs	r0, #12
    3416:	f7fe fe7d 	bl	2114 <_irq_priority_set>
		    temp_nrf5_isr, DEVICE_GET(temp_nrf5), 0);
	irq_enable(NRF5_IRQ_TEMP_IRQn);
    341a:	200c      	movs	r0, #12
    341c:	f7fe fe50 	bl	20c0 <_arch_irq_enable>

	temp->INTENSET = TEMP_INTENSET_DATARDY_Set;
    3420:	23c1      	movs	r3, #193	; 0xc1
    3422:	2101      	movs	r1, #1
    3424:	4a03      	ldr	r2, [pc, #12]	; (3434 <temp_nrf5_init+0x3c>)
    3426:	009b      	lsls	r3, r3, #2

	return 0;
}
    3428:	2000      	movs	r0, #0
	temp->INTENSET = TEMP_INTENSET_DATARDY_Set;
    342a:	50d1      	str	r1, [r2, r3]
}
    342c:	bd10      	pop	{r4, pc}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	0000c917 	.word	0x0000c917
    3434:	4000c000 	.word	0x4000c000

00003438 <temp_nrf5_isr>:
	temp->EVENTS_DATARDY = 0;
    3438:	2200      	movs	r2, #0
{
    343a:	b510      	push	{r4, lr}
	temp->EVENTS_DATARDY = 0;
    343c:	4b02      	ldr	r3, [pc, #8]	; (3448 <temp_nrf5_isr+0x10>)
	struct temp_nrf5_data *data = dev->driver_data;
    343e:	6880      	ldr	r0, [r0, #8]
	temp->EVENTS_DATARDY = 0;
    3440:	605a      	str	r2, [r3, #4]

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3442:	f008 f9f1 	bl	b828 <_impl_k_sem_give>
}
    3446:	bd10      	pop	{r4, pc}
    3448:	4000c0fc 	.word	0x4000c0fc

0000344c <temp_nrf5_sample_fetch>:
{
    344c:	b570      	push	{r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->driver_data;
    344e:	6884      	ldr	r4, [r0, #8]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_TEMP) {
    3450:	291e      	cmp	r1, #30
    3452:	d001      	beq.n	3458 <temp_nrf5_sample_fetch+0xc>
    3454:	290c      	cmp	r1, #12
    3456:	d118      	bne.n	348a <temp_nrf5_sample_fetch+0x3e>
	r = clock_control_on(data->clk_m16_dev, (void *)1);
    3458:	69e0      	ldr	r0, [r4, #28]
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    345a:	2101      	movs	r1, #1
    345c:	6843      	ldr	r3, [r0, #4]
	temp->TASKS_START = 1;
    345e:	2601      	movs	r6, #1
    3460:	681b      	ldr	r3, [r3, #0]
    3462:	4798      	blx	r3
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3464:	2101      	movs	r1, #1
    3466:	4d0a      	ldr	r5, [pc, #40]	; (3490 <temp_nrf5_sample_fetch+0x44>)
    3468:	4249      	negs	r1, r1
    346a:	602e      	str	r6, [r5, #0]
    346c:	0020      	movs	r0, r4
    346e:	f008 fa35 	bl	b8dc <_impl_k_sem_take>
	r = clock_control_off(data->clk_m16_dev, (void *)1);
    3472:	69e0      	ldr	r0, [r4, #28]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    3474:	0031      	movs	r1, r6
    3476:	6843      	ldr	r3, [r0, #4]
    3478:	685b      	ldr	r3, [r3, #4]
    347a:	4798      	blx	r3
	data->sample = temp->TEMP;
    347c:	23a1      	movs	r3, #161	; 0xa1
	return 0;
    347e:	2000      	movs	r0, #0
	data->sample = temp->TEMP;
    3480:	00db      	lsls	r3, r3, #3
    3482:	58eb      	ldr	r3, [r5, r3]
    3484:	61a3      	str	r3, [r4, #24]
	temp->TASKS_STOP = 1;
    3486:	606e      	str	r6, [r5, #4]
}
    3488:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    348a:	2023      	movs	r0, #35	; 0x23
    348c:	4240      	negs	r0, r0
    348e:	e7fb      	b.n	3488 <temp_nrf5_sample_fetch+0x3c>
    3490:	4000c000 	.word	0x4000c000

00003494 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3494:	6803      	ldr	r3, [r0, #0]
    3496:	689b      	ldr	r3, [r3, #8]
    3498:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    349a:	001a      	movs	r2, r3
    349c:	32fc      	adds	r2, #252	; 0xfc
    349e:	68d0      	ldr	r0, [r2, #12]
    34a0:	2800      	cmp	r0, #0
    34a2:	d006      	beq.n	34b2 <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    34a4:	2000      	movs	r0, #0
    34a6:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
    34a8:	22a3      	movs	r2, #163	; 0xa3
    34aa:	00d2      	lsls	r2, r2, #3
    34ac:	589b      	ldr	r3, [r3, r2]
    34ae:	700b      	strb	r3, [r1, #0]

	return 0;
}
    34b0:	4770      	bx	lr
		return -1;
    34b2:	2001      	movs	r0, #1
    34b4:	4240      	negs	r0, r0
    34b6:	e7fb      	b.n	34b0 <uart_nrf5_poll_in+0x1c>

000034b8 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    34b8:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    34ba:	4a06      	ldr	r2, [pc, #24]	; (34d4 <uart_nrf5_poll_out+0x1c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    34bc:	689b      	ldr	r3, [r3, #8]
    34be:	681b      	ldr	r3, [r3, #0]
	uart->TXD = (u8_t)c;
    34c0:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    34c2:	33fc      	adds	r3, #252	; 0xfc
    34c4:	6a1a      	ldr	r2, [r3, #32]
    34c6:	2a00      	cmp	r2, #0
    34c8:	d0fc      	beq.n	34c4 <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
    34ca:	2200      	movs	r2, #0

	return c;
}
    34cc:	0008      	movs	r0, r1
	uart->EVENTS_TXDRDY = 0;
    34ce:	621a      	str	r2, [r3, #32]
}
    34d0:	4770      	bx	lr
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	0000051c 	.word	0x0000051c

000034d8 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    34d8:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
    34da:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    34dc:	689b      	ldr	r3, [r3, #8]
    34de:	681b      	ldr	r3, [r3, #0]

	if (uart->EVENTS_ERROR) {
    34e0:	001a      	movs	r2, r3
    34e2:	32fc      	adds	r2, #252	; 0xfc
    34e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    34e6:	4282      	cmp	r2, r0
    34e8:	d003      	beq.n	34f2 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    34ea:	2290      	movs	r2, #144	; 0x90
    34ec:	00d2      	lsls	r2, r2, #3
    34ee:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
    34f0:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;
    34f2:	230f      	movs	r3, #15
    34f4:	4018      	ands	r0, r3

	return error;
}
    34f6:	4770      	bx	lr

000034f8 <uart_nrf5_init>:
{
    34f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    34fa:	6803      	ldr	r3, [r0, #0]
{
    34fc:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    34fe:	689b      	ldr	r3, [r3, #8]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    3500:	4818      	ldr	r0, [pc, #96]	; (3564 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    3502:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    3504:	f007 fc8a 	bl	ae1c <device_get_binding>
	return api->config(port, access_op, pin, flags);
    3508:	6843      	ldr	r3, [r0, #4]
    350a:	0006      	movs	r6, r0
    350c:	681f      	ldr	r7, [r3, #0]
    350e:	2302      	movs	r3, #2
    3510:	2218      	movs	r2, #24
    3512:	33ff      	adds	r3, #255	; 0xff
    3514:	2100      	movs	r1, #0
    3516:	47b8      	blx	r7
    3518:	6873      	ldr	r3, [r6, #4]
    351a:	0030      	movs	r0, r6
    351c:	681f      	ldr	r7, [r3, #0]
    351e:	2300      	movs	r3, #0
    3520:	2219      	movs	r2, #25
    3522:	0019      	movs	r1, r3
    3524:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    3526:	2218      	movs	r2, #24
    3528:	4b0f      	ldr	r3, [pc, #60]	; (3568 <uart_nrf5_init+0x70>)
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    352a:	21eb      	movs	r1, #235	; 0xeb
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    352c:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    352e:	4b0f      	ldr	r3, [pc, #60]	; (356c <uart_nrf5_init+0x74>)
    3530:	3201      	adds	r2, #1
    3532:	50e2      	str	r2, [r4, r3]
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    3534:	22e1      	movs	r2, #225	; 0xe1
    3536:	68ab      	ldr	r3, [r5, #8]
    3538:	0252      	lsls	r2, r2, #9
    353a:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    353c:	682b      	ldr	r3, [r5, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    353e:	0449      	lsls	r1, r1, #17
	volatile struct _uart *uart = UART_STRUCT(dev);
    3540:	689b      	ldr	r3, [r3, #8]
	uart->EVENTS_TXDRDY = 0;
    3542:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    3544:	681a      	ldr	r2, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    3546:	4b0a      	ldr	r3, [pc, #40]	; (3570 <uart_nrf5_init+0x78>)
    3548:	50d1      	str	r1, [r2, r3]
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    354a:	2204      	movs	r2, #4
    354c:	3b24      	subs	r3, #36	; 0x24
    354e:	50e2      	str	r2, [r4, r3]
	uart->EVENTS_TXDRDY = 0;
    3550:	0023      	movs	r3, r4
    3552:	33fc      	adds	r3, #252	; 0xfc
    3554:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
    3556:	60d8      	str	r0, [r3, #12]
	uart->TASKS_STARTTX = 1;
    3558:	2301      	movs	r3, #1
    355a:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    355c:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    355e:	4b05      	ldr	r3, [pc, #20]	; (3574 <uart_nrf5_init+0x7c>)
    3560:	606b      	str	r3, [r5, #4]
}
    3562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3564:	0000c464 	.word	0x0000c464
    3568:	0000050c 	.word	0x0000050c
    356c:	00000514 	.word	0x00000514
    3570:	00000524 	.word	0x00000524
    3574:	0000c9b4 	.word	0x0000c9b4

00003578 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    3578:	22a8      	movs	r2, #168	; 0xa8
    357a:	4b08      	ldr	r3, [pc, #32]	; (359c <rtc_compare_set+0x24>)
    357c:	00d2      	lsls	r2, r2, #3
    357e:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
    3580:	4a07      	ldr	r2, [pc, #28]	; (35a0 <rtc_compare_set+0x28>)
    3582:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    3584:	1ac0      	subs	r0, r0, r3
    3586:	0200      	lsls	r0, r0, #8
    3588:	0a00      	lsrs	r0, r0, #8
    358a:	4b06      	ldr	r3, [pc, #24]	; (35a4 <rtc_compare_set+0x2c>)
    358c:	3802      	subs	r0, #2
    358e:	4298      	cmp	r0, r3
    3590:	d903      	bls.n	359a <rtc_compare_set+0x22>
    3592:	2280      	movs	r2, #128	; 0x80
    3594:	4b04      	ldr	r3, [pc, #16]	; (35a8 <rtc_compare_set+0x30>)
    3596:	0292      	lsls	r2, r2, #10
    3598:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    359a:	4770      	bx	lr
    359c:	40011000 	.word	0x40011000
    35a0:	00000504 	.word	0x00000504
    35a4:	007ffffd 	.word	0x007ffffd
    35a8:	e000e1fc 	.word	0xe000e1fc

000035ac <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    35ac:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    35ae:	4b11      	ldr	r3, [pc, #68]	; (35f4 <rtc_announce_set_next+0x48>)
    35b0:	4a11      	ldr	r2, [pc, #68]	; (35f8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    35b2:	4c12      	ldr	r4, [pc, #72]	; (35fc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    35b4:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    35b6:	6825      	ldr	r5, [r4, #0]
    35b8:	1b40      	subs	r0, r0, r5
    35ba:	0200      	lsls	r0, r0, #8
    35bc:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    35be:	2882      	cmp	r0, #130	; 0x82
    35c0:	d912      	bls.n	35e8 <rtc_announce_set_next+0x3c>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    35c2:	2183      	movs	r1, #131	; 0x83
    35c4:	f7fc fe00 	bl	1c8 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
    35c8:	4b0d      	ldr	r3, [pc, #52]	; (3600 <rtc_announce_set_next+0x54>)
    35ca:	681a      	ldr	r2, [r3, #0]
    35cc:	4282      	cmp	r2, r0
    35ce:	d900      	bls.n	35d2 <rtc_announce_set_next+0x26>
    35d0:	0002      	movs	r2, r0
		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
    35d2:	2383      	movs	r3, #131	; 0x83
    35d4:	4353      	muls	r3, r2
		rtc_past = (rtc_past +
    35d6:	195b      	adds	r3, r3, r5
			   ) & RTC_MASK;
    35d8:	021b      	lsls	r3, r3, #8
    35da:	0a1b      	lsrs	r3, r3, #8
		rtc_past = (rtc_past +
    35dc:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    35de:	4b09      	ldr	r3, [pc, #36]	; (3604 <rtc_announce_set_next+0x58>)
		_sys_clock_tick_announce();
    35e0:	0010      	movs	r0, r2
		_sys_idle_elapsed_ticks = sys_elapsed;
    35e2:	601a      	str	r2, [r3, #0]
		_sys_clock_tick_announce();
    35e4:	f008 f9b4 	bl	b950 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    35e8:	6820      	ldr	r0, [r4, #0]
    35ea:	3083      	adds	r0, #131	; 0x83
    35ec:	f7ff ffc4 	bl	3578 <rtc_compare_set>
}
    35f0:	bd70      	pop	{r4, r5, r6, pc}
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	00000504 	.word	0x00000504
    35f8:	40011000 	.word	0x40011000
    35fc:	20000078 	.word	0x20000078
    3600:	20000074 	.word	0x20000074
    3604:	20002464 	.word	0x20002464

00003608 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    3608:	2200      	movs	r2, #0
{
    360a:	b510      	push	{r4, lr}
	RTC_CC_EVENT = 0;
    360c:	4b02      	ldr	r3, [pc, #8]	; (3618 <rtc1_nrf5_isr+0x10>)
    360e:	645a      	str	r2, [r3, #68]	; 0x44
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    3610:	f7ff ffcc 	bl	35ac <rtc_announce_set_next>
#ifdef CONFIG_EXECUTION_BENCHMARKING
	extern void read_timer_end_of_tick_handler(void);
	read_timer_end_of_tick_handler();
#endif

}
    3614:	bd10      	pop	{r4, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	400110fc 	.word	0x400110fc

0000361c <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    361c:	4a07      	ldr	r2, [pc, #28]	; (363c <_timer_idle_enter+0x20>)
{
    361e:	b510      	push	{r4, lr}
    3620:	0003      	movs	r3, r0
	if ((sys_ticks < 0) ||
    3622:	4290      	cmp	r0, r2
    3624:	d900      	bls.n	3628 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    3626:	0013      	movs	r3, r2
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    3628:	2083      	movs	r0, #131	; 0x83
	expected_sys_ticks = sys_ticks;
    362a:	4a05      	ldr	r2, [pc, #20]	; (3640 <_timer_idle_enter+0x24>)
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    362c:	4358      	muls	r0, r3
	expected_sys_ticks = sys_ticks;
    362e:	6013      	str	r3, [r2, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    3630:	4b04      	ldr	r3, [pc, #16]	; (3644 <_timer_idle_enter+0x28>)
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	18c0      	adds	r0, r0, r3
    3636:	f7ff ff9f 	bl	3578 <rtc_compare_set>
}
    363a:	bd10      	pop	{r4, pc}
    363c:	0000fa23 	.word	0x0000fa23
    3640:	20000074 	.word	0x20000074
    3644:	20000078 	.word	0x20000078

00003648 <_timer_idle_exit>:
	RTC_CC_EVENT = 0;
    3648:	2200      	movs	r2, #0
    364a:	4b07      	ldr	r3, [pc, #28]	; (3668 <_timer_idle_exit+0x20>)
{
    364c:	b510      	push	{r4, lr}
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    364e:	2180      	movs	r1, #128	; 0x80
	RTC_CC_EVENT = 0;
    3650:	645a      	str	r2, [r3, #68]	; 0x44
    3652:	23c0      	movs	r3, #192	; 0xc0
    3654:	4a05      	ldr	r2, [pc, #20]	; (366c <_timer_idle_exit+0x24>)
    3656:	005b      	lsls	r3, r3, #1
    3658:	0289      	lsls	r1, r1, #10
    365a:	50d1      	str	r1, [r2, r3]
	rtc_announce_set_next();
    365c:	f7ff ffa6 	bl	35ac <rtc_announce_set_next>
	expected_sys_ticks = 1;
    3660:	2201      	movs	r2, #1
    3662:	4b03      	ldr	r3, [pc, #12]	; (3670 <_timer_idle_exit+0x28>)
    3664:	601a      	str	r2, [r3, #0]
}
    3666:	bd10      	pop	{r4, pc}
    3668:	400110fc 	.word	0x400110fc
    366c:	e000e100 	.word	0xe000e100
    3670:	20000074 	.word	0x20000074

00003674 <_sys_clock_driver_init>:

int _sys_clock_driver_init(struct device *device)
{
    3674:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    3676:	481a      	ldr	r0, [pc, #104]	; (36e0 <_sys_clock_driver_init+0x6c>)
    3678:	f007 fbd0 	bl	ae1c <device_get_binding>
	if (!clock) {
    367c:	2800      	cmp	r0, #0
    367e:	d02b      	beq.n	36d8 <_sys_clock_driver_init+0x64>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    3680:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    3682:	2601      	movs	r6, #1
	return api->on(dev, sys);
    3684:	6843      	ldr	r3, [r0, #4]
    3686:	2100      	movs	r1, #0
    3688:	681b      	ldr	r3, [r3, #0]
    368a:	4798      	blx	r3
	rtc_past = 0;
    368c:	4b15      	ldr	r3, [pc, #84]	; (36e4 <_sys_clock_driver_init+0x70>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    368e:	2283      	movs	r2, #131	; 0x83
	rtc_past = 0;
    3690:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    3692:	4b15      	ldr	r3, [pc, #84]	; (36e8 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    3694:	4d15      	ldr	r5, [pc, #84]	; (36ec <_sys_clock_driver_init+0x78>)
	expected_sys_ticks = 1;
    3696:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->PRESCALER = 0;
    3698:	23a1      	movs	r3, #161	; 0xa1
    369a:	00db      	lsls	r3, r3, #3
    369c:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    369e:	3338      	adds	r3, #56	; 0x38
    36a0:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    36a2:	2380      	movs	r3, #128	; 0x80
    36a4:	22d1      	movs	r2, #209	; 0xd1
    36a6:	025b      	lsls	r3, r3, #9
    36a8:	0092      	lsls	r2, r2, #2
    36aa:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    36ac:	3a40      	subs	r2, #64	; 0x40
    36ae:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    36b0:	4b0f      	ldr	r3, [pc, #60]	; (36f0 <_sys_clock_driver_init+0x7c>)
    36b2:	2180      	movs	r1, #128	; 0x80
    36b4:	645c      	str	r4, [r3, #68]	; 0x44
    36b6:	23c0      	movs	r3, #192	; 0xc0
    36b8:	4a0e      	ldr	r2, [pc, #56]	; (36f4 <_sys_clock_driver_init+0x80>)
    36ba:	005b      	lsls	r3, r3, #1
    36bc:	0289      	lsls	r1, r1, #10
    36be:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    36c0:	2011      	movs	r0, #17
    36c2:	0022      	movs	r2, r4
    36c4:	0031      	movs	r1, r6
    36c6:	f7fe fd25 	bl	2114 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    36ca:	2011      	movs	r0, #17
    36cc:	f7fe fcf8 	bl	20c0 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    36d0:	0020      	movs	r0, r4
	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    36d2:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    36d4:	602e      	str	r6, [r5, #0]
}
    36d6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    36d8:	2001      	movs	r0, #1
    36da:	4240      	negs	r0, r0
    36dc:	e7fb      	b.n	36d6 <_sys_clock_driver_init+0x62>
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	0000c90c 	.word	0x0000c90c
    36e4:	20000078 	.word	0x20000078
    36e8:	20000074 	.word	0x20000074
    36ec:	40011000 	.word	0x40011000
    36f0:	400110fc 	.word	0x400110fc
    36f4:	e000e100 	.word	0xe000e100

000036f8 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	0006      	movs	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    36fc:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    36fe:	000d      	movs	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3700:	f007 fa72 	bl	abe8 <net_buf_pool_get>
    3704:	4b0e      	ldr	r3, [pc, #56]	; (3740 <hci_cmd_done.isra.9+0x48>)
    3706:	4298      	cmp	r0, r3
    3708:	d118      	bne.n	373c <hci_cmd_done.isra.9+0x44>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    370a:	0028      	movs	r0, r5
    370c:	f007 fa72 	bl	abf4 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    3710:	0028      	movs	r0, r5
    3712:	f007 fa6f 	bl	abf4 <net_buf_id>
    3716:	4c0b      	ldr	r4, [pc, #44]	; (3744 <hci_cmd_done.isra.9+0x4c>)
    3718:	00c0      	lsls	r0, r0, #3
    371a:	1820      	adds	r0, r4, r0
    371c:	6843      	ldr	r3, [r0, #4]
    371e:	2b00      	cmp	r3, #0
    3720:	d00c      	beq.n	373c <hci_cmd_done.isra.9+0x44>
		cmd(buf)->status = status;
    3722:	0028      	movs	r0, r5
    3724:	f007 fa66 	bl	abf4 <net_buf_id>
    3728:	00c0      	lsls	r0, r0, #3
    372a:	5506      	strb	r6, [r0, r4]
		k_sem_give(cmd(buf)->sync);
    372c:	0028      	movs	r0, r5
    372e:	f007 fa61 	bl	abf4 <net_buf_id>
    3732:	00c0      	lsls	r0, r0, #3
    3734:	1824      	adds	r4, r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3736:	6860      	ldr	r0, [r4, #4]
    3738:	f008 f876 	bl	b828 <_impl_k_sem_give>
	}
}
    373c:	bd70      	pop	{r4, r5, r6, pc}
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	20002540 	.word	0x20002540
    3744:	2000007c 	.word	0x2000007c

00003748 <atomic_test_bit.constprop.24>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
    3748:	b510      	push	{r4, lr}
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    374a:	0942      	lsrs	r2, r0, #5
static inline int atomic_test_bit(const atomic_t *target, int bit)
    374c:	0004      	movs	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    374e:	4806      	ldr	r0, [pc, #24]	; (3768 <atomic_test_bit.constprop.24+0x20>)
    3750:	0092      	lsls	r2, r2, #2
    3752:	3070      	adds	r0, #112	; 0x70
    3754:	1880      	adds	r0, r0, r2
    3756:	f008 fc55 	bl	c004 <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    375a:	231f      	movs	r3, #31
    375c:	401c      	ands	r4, r3
    375e:	4120      	asrs	r0, r4
    3760:	3b1e      	subs	r3, #30
    3762:	4018      	ands	r0, r3
}
    3764:	bd10      	pop	{r4, pc}
    3766:	46c0      	nop			; (mov r8, r8)
    3768:	20002238 	.word	0x20002238

0000376c <bt_hci_cmd_create>:
{
    376c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    376e:	9101      	str	r1, [sp, #4]
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3770:	2101      	movs	r1, #1
{
    3772:	0005      	movs	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3774:	4249      	negs	r1, r1
    3776:	4813      	ldr	r0, [pc, #76]	; (37c4 <bt_hci_cmd_create+0x58>)
    3778:	f007 fac8 	bl	ad0c <net_buf_alloc_fixed>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    377c:	0007      	movs	r7, r0
    377e:	3708      	adds	r7, #8
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3780:	0004      	movs	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3782:	2100      	movs	r1, #0
    3784:	0038      	movs	r0, r7
    3786:	f007 fac9 	bl	ad1c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    378a:	2300      	movs	r3, #0
	cmd(buf)->opcode = opcode;
    378c:	0020      	movs	r0, r4
    378e:	7523      	strb	r3, [r4, #20]
    3790:	f007 fa30 	bl	abf4 <net_buf_id>
    3794:	4e0c      	ldr	r6, [pc, #48]	; (37c8 <bt_hci_cmd_create+0x5c>)
    3796:	00c0      	lsls	r0, r0, #3
    3798:	1830      	adds	r0, r6, r0
    379a:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    379c:	0020      	movs	r0, r4
    379e:	f007 fa29 	bl	abf4 <net_buf_id>
    37a2:	2300      	movs	r3, #0
    37a4:	00c0      	lsls	r0, r0, #3
    37a6:	1836      	adds	r6, r6, r0
    37a8:	6073      	str	r3, [r6, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    37aa:	0038      	movs	r0, r7
    37ac:	2103      	movs	r1, #3
    37ae:	f007 fafd 	bl	adac <net_buf_simple_add>
	hdr->param_len = param_len;
    37b2:	466b      	mov	r3, sp
    37b4:	791b      	ldrb	r3, [r3, #4]
	hdr->opcode = sys_cpu_to_le16(opcode);
    37b6:	7005      	strb	r5, [r0, #0]
    37b8:	0a2d      	lsrs	r5, r5, #8
    37ba:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    37bc:	7083      	strb	r3, [r0, #2]
}
    37be:	0020      	movs	r0, r4
    37c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	20002540 	.word	0x20002540
    37c8:	2000007c 	.word	0x2000007c

000037cc <bt_hci_cmd_send_sync>:
{
    37cc:	b570      	push	{r4, r5, r6, lr}
    37ce:	000c      	movs	r4, r1
    37d0:	b086      	sub	sp, #24
    37d2:	0015      	movs	r5, r2
	if (!buf) {
    37d4:	2900      	cmp	r1, #0
    37d6:	d103      	bne.n	37e0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    37d8:	f7ff ffc8 	bl	376c <bt_hci_cmd_create>
    37dc:	1e04      	subs	r4, r0, #0
		if (!buf) {
    37de:	d02f      	beq.n	3840 <bt_hci_cmd_send_sync+0x74>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    37e0:	2201      	movs	r2, #1
    37e2:	2100      	movs	r1, #0
    37e4:	4668      	mov	r0, sp
    37e6:	f008 f815 	bl	b814 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    37ea:	0020      	movs	r0, r4
    37ec:	f007 fa02 	bl	abf4 <net_buf_id>
    37f0:	466b      	mov	r3, sp
    37f2:	4e14      	ldr	r6, [pc, #80]	; (3844 <bt_hci_cmd_send_sync+0x78>)
    37f4:	00c0      	lsls	r0, r0, #3
    37f6:	1830      	adds	r0, r6, r0
    37f8:	6043      	str	r3, [r0, #4]
	net_buf_ref(buf);
    37fa:	0020      	movs	r0, r4
    37fc:	f007 fad2 	bl	ada4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3800:	4811      	ldr	r0, [pc, #68]	; (3848 <bt_hci_cmd_send_sync+0x7c>)
    3802:	0021      	movs	r1, r4
    3804:	30b4      	adds	r0, #180	; 0xb4
    3806:	f007 fa8d 	bl	ad24 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    380a:	4910      	ldr	r1, [pc, #64]	; (384c <bt_hci_cmd_send_sync+0x80>)
    380c:	4668      	mov	r0, sp
    380e:	f008 f865 	bl	b8dc <_impl_k_sem_take>
	if (cmd(buf)->status) {
    3812:	0020      	movs	r0, r4
    3814:	f007 f9ee 	bl	abf4 <net_buf_id>
    3818:	00c0      	lsls	r0, r0, #3
    381a:	5d80      	ldrb	r0, [r0, r6]
    381c:	2800      	cmp	r0, #0
    381e:	d005      	beq.n	382c <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
    3820:	0020      	movs	r0, r4
    3822:	f007 fa8d 	bl	ad40 <net_buf_unref>
		err = -EIO;
    3826:	2005      	movs	r0, #5
			return -ENOBUFS;
    3828:	4240      	negs	r0, r0
    382a:	e002      	b.n	3832 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    382c:	2d00      	cmp	r5, #0
    382e:	d002      	beq.n	3836 <bt_hci_cmd_send_sync+0x6a>
			*rsp = buf;
    3830:	602c      	str	r4, [r5, #0]
}
    3832:	b006      	add	sp, #24
    3834:	bd70      	pop	{r4, r5, r6, pc}
			net_buf_unref(buf);
    3836:	0020      	movs	r0, r4
    3838:	f007 fa82 	bl	ad40 <net_buf_unref>
		err = 0;
    383c:	0028      	movs	r0, r5
    383e:	e7f8      	b.n	3832 <bt_hci_cmd_send_sync+0x66>
			return -ENOBUFS;
    3840:	2037      	movs	r0, #55	; 0x37
    3842:	e7f1      	b.n	3828 <bt_hci_cmd_send_sync+0x5c>
    3844:	2000007c 	.word	0x2000007c
    3848:	20002238 	.word	0x20002238
    384c:	00002710 	.word	0x00002710

00003850 <set_random_address>:
{
    3850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    3852:	4e14      	ldr	r6, [pc, #80]	; (38a4 <set_random_address+0x54>)
    3854:	2206      	movs	r2, #6
    3856:	0037      	movs	r7, r6
    3858:	3708      	adds	r7, #8
    385a:	0039      	movs	r1, r7
    385c:	0005      	movs	r5, r0
    385e:	f7fd fd9b 	bl	1398 <memcmp>
    3862:	1e04      	subs	r4, r0, #0
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    3864:	d018      	beq.n	3898 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    3866:	2106      	movs	r1, #6
    3868:	480f      	ldr	r0, [pc, #60]	; (38a8 <set_random_address+0x58>)
    386a:	f7ff ff7f 	bl	376c <bt_hci_cmd_create>
    386e:	1e04      	subs	r4, r0, #0
	if (!buf) {
    3870:	d014      	beq.n	389c <set_random_address+0x4c>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    3872:	2206      	movs	r2, #6
    3874:	0029      	movs	r1, r5
    3876:	3008      	adds	r0, #8
    3878:	f007 fa9f 	bl	adba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    387c:	0021      	movs	r1, r4
    387e:	2200      	movs	r2, #0
    3880:	4809      	ldr	r0, [pc, #36]	; (38a8 <set_random_address+0x58>)
    3882:	f7ff ffa3 	bl	37cc <bt_hci_cmd_send_sync>
    3886:	1e04      	subs	r4, r0, #0
	if (err) {
    3888:	d106      	bne.n	3898 <set_random_address+0x48>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    388a:	2206      	movs	r2, #6
    388c:	0029      	movs	r1, r5
    388e:	0038      	movs	r0, r7
    3890:	f7fd fda6 	bl	13e0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3894:	2301      	movs	r3, #1
    3896:	71f3      	strb	r3, [r6, #7]
}
    3898:	0020      	movs	r0, r4
    389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    389c:	2437      	movs	r4, #55	; 0x37
    389e:	4264      	negs	r4, r4
    38a0:	e7fa      	b.n	3898 <set_random_address+0x48>
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	20002238 	.word	0x20002238
    38a8:	00002005 	.word	0x00002005

000038ac <set_le_scan_enable>:
{
    38ac:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    38ae:	2102      	movs	r1, #2
{
    38b0:	0005      	movs	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    38b2:	4816      	ldr	r0, [pc, #88]	; (390c <set_le_scan_enable+0x60>)
    38b4:	f7ff ff5a 	bl	376c <bt_hci_cmd_create>
    38b8:	1e04      	subs	r4, r0, #0
	if (!buf) {
    38ba:	d023      	beq.n	3904 <set_le_scan_enable+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    38bc:	2102      	movs	r1, #2
    38be:	3008      	adds	r0, #8
    38c0:	f007 fa74 	bl	adac <net_buf_simple_add>
    38c4:	0006      	movs	r6, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    38c6:	2d01      	cmp	r5, #1
    38c8:	d114      	bne.n	38f4 <set_le_scan_enable+0x48>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    38ca:	200a      	movs	r0, #10
    38cc:	f7ff ff3c 	bl	3748 <atomic_test_bit.constprop.24>
    38d0:	7070      	strb	r0, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    38d2:	0021      	movs	r1, r4
	cp->enable = enable;
    38d4:	7035      	strb	r5, [r6, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    38d6:	2200      	movs	r2, #0
    38d8:	480c      	ldr	r0, [pc, #48]	; (390c <set_le_scan_enable+0x60>)
    38da:	f7ff ff77 	bl	37cc <bt_hci_cmd_send_sync>
    38de:	1e04      	subs	r4, r0, #0
	if (err) {
    38e0:	d106      	bne.n	38f0 <set_le_scan_enable+0x44>
    38e2:	480b      	ldr	r0, [pc, #44]	; (3910 <set_le_scan_enable+0x64>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    38e4:	3070      	adds	r0, #112	; 0x70
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    38e6:	2d01      	cmp	r5, #1
    38e8:	d107      	bne.n	38fa <set_le_scan_enable+0x4e>
    38ea:	2180      	movs	r1, #128	; 0x80
    38ec:	f008 fb96 	bl	c01c <atomic_or>
}
    38f0:	0020      	movs	r0, r4
    38f2:	bd70      	pop	{r4, r5, r6, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    38f4:	2300      	movs	r3, #0
    38f6:	7043      	strb	r3, [r0, #1]
    38f8:	e7eb      	b.n	38d2 <set_le_scan_enable+0x26>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    38fa:	2181      	movs	r1, #129	; 0x81
    38fc:	4249      	negs	r1, r1
    38fe:	f008 fb98 	bl	c032 <atomic_and>
    3902:	e7f5      	b.n	38f0 <set_le_scan_enable+0x44>
		return -ENOBUFS;
    3904:	2437      	movs	r4, #55	; 0x37
    3906:	4264      	negs	r4, r4
    3908:	e7f2      	b.n	38f0 <set_le_scan_enable+0x44>
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	0000200c 	.word	0x0000200c
    3910:	20002238 	.word	0x20002238

00003914 <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    3914:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3916:	2008      	movs	r0, #8
    3918:	f7ff ff16 	bl	3748 <atomic_test_bit.constprop.24>
    391c:	1e04      	subs	r4, r0, #0
    391e:	d001      	beq.n	3924 <bt_le_scan_update+0x10>
		return 0;
    3920:	2000      	movs	r0, #0

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    3922:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3924:	2007      	movs	r0, #7
    3926:	f7ff ff0f 	bl	3748 <atomic_test_bit.constprop.24>
    392a:	2800      	cmp	r0, #0
    392c:	d0f8      	beq.n	3920 <bt_le_scan_update+0xc>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    392e:	0020      	movs	r0, r4
    3930:	f7ff ffbc 	bl	38ac <set_le_scan_enable>
    3934:	e7f5      	b.n	3922 <bt_le_scan_update+0xe>

00003936 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    3936:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    3938:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    393a:	2106      	movs	r1, #6
{
    393c:	0004      	movs	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    393e:	7003      	strb	r3, [r0, #0]
	return bt_rand(addr->a.val, 6);
    3940:	18c0      	adds	r0, r0, r3
    3942:	f001 faf1 	bl	4f28 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    3946:	2800      	cmp	r0, #0
    3948:	d104      	bne.n	3954 <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    394a:	2340      	movs	r3, #64	; 0x40
    394c:	79a2      	ldrb	r2, [r4, #6]
    394e:	425b      	negs	r3, r3
    3950:	4313      	orrs	r3, r2
    3952:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    3954:	bd10      	pop	{r4, pc}
	...

00003958 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    3958:	b5f0      	push	{r4, r5, r6, r7, lr}
    395a:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    395c:	aa04      	add	r2, sp, #16
    395e:	2100      	movs	r1, #0
    3960:	48c5      	ldr	r0, [pc, #788]	; (3c78 <hci_init+0x320>)
    3962:	f7ff ff33 	bl	37cc <bt_hci_cmd_send_sync>
    3966:	1e04      	subs	r4, r0, #0
	if (err) {
    3968:	d000      	beq.n	396c <hci_init+0x14>
    396a:	e135      	b.n	3bd8 <hci_init+0x280>
	u8_t status = buf->data[0];
    396c:	9b04      	ldr	r3, [sp, #16]
    396e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    3970:	781b      	ldrb	r3, [r3, #0]
    3972:	2b00      	cmp	r3, #0
    3974:	d106      	bne.n	3984 <hci_init+0x2c>
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    3976:	48c1      	ldr	r0, [pc, #772]	; (3c7c <hci_init+0x324>)
	scan_dev_found_cb = NULL;
    3978:	4ac1      	ldr	r2, [pc, #772]	; (3c80 <hci_init+0x328>)
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    397a:	2101      	movs	r1, #1
    397c:	3070      	adds	r0, #112	; 0x70
	scan_dev_found_cb = NULL;
    397e:	6013      	str	r3, [r2, #0]
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    3980:	f008 fb42 	bl	c008 <atomic_set>
	net_buf_unref(rsp);
    3984:	9804      	ldr	r0, [sp, #16]
    3986:	f007 f9db 	bl	ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    398a:	aa04      	add	r2, sp, #16
    398c:	2100      	movs	r1, #0
    398e:	48bd      	ldr	r0, [pc, #756]	; (3c84 <hci_init+0x32c>)
    3990:	f7ff ff1c 	bl	37cc <bt_hci_cmd_send_sync>
    3994:	1e04      	subs	r4, r0, #0
	if (err) {
    3996:	d000      	beq.n	399a <hci_init+0x42>
    3998:	e11e      	b.n	3bd8 <hci_init+0x280>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    399a:	4db8      	ldr	r5, [pc, #736]	; (3c7c <hci_init+0x324>)
    399c:	9b04      	ldr	r3, [sp, #16]
    399e:	0028      	movs	r0, r5
    39a0:	6899      	ldr	r1, [r3, #8]
    39a2:	2208      	movs	r2, #8
    39a4:	3101      	adds	r1, #1
    39a6:	3016      	adds	r0, #22
    39a8:	f7fd fd1a 	bl	13e0 <memcpy>
	net_buf_unref(rsp);
    39ac:	9804      	ldr	r0, [sp, #16]
    39ae:	f007 f9c7 	bl	ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    39b2:	0021      	movs	r1, r4
    39b4:	aa04      	add	r2, sp, #16
    39b6:	48b4      	ldr	r0, [pc, #720]	; (3c88 <hci_init+0x330>)
    39b8:	f7ff ff08 	bl	37cc <bt_hci_cmd_send_sync>
    39bc:	1e04      	subs	r4, r0, #0
	if (err) {
    39be:	d000      	beq.n	39c2 <hci_init+0x6a>
    39c0:	e10a      	b.n	3bd8 <hci_init+0x280>
	read_local_ver_complete(rsp);
    39c2:	9804      	ldr	r0, [sp, #16]
    39c4:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    39c6:	785a      	ldrb	r2, [r3, #1]
    39c8:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    39ca:	78da      	ldrb	r2, [r3, #3]
    39cc:	7899      	ldrb	r1, [r3, #2]
    39ce:	0212      	lsls	r2, r2, #8
    39d0:	430a      	orrs	r2, r1
    39d2:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    39d4:	791a      	ldrb	r2, [r3, #4]
    39d6:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    39d8:	7a1a      	ldrb	r2, [r3, #8]
    39da:	79d9      	ldrb	r1, [r3, #7]
    39dc:	0212      	lsls	r2, r2, #8
    39de:	430a      	orrs	r2, r1
    39e0:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    39e2:	795a      	ldrb	r2, [r3, #5]
    39e4:	799b      	ldrb	r3, [r3, #6]
    39e6:	021b      	lsls	r3, r3, #8
    39e8:	4313      	orrs	r3, r2
    39ea:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    39ec:	f007 f9a8 	bl	ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    39f0:	0021      	movs	r1, r4
    39f2:	aa04      	add	r2, sp, #16
    39f4:	48a5      	ldr	r0, [pc, #660]	; (3c8c <hci_init+0x334>)
    39f6:	f7ff fee9 	bl	37cc <bt_hci_cmd_send_sync>
    39fa:	1e04      	subs	r4, r0, #0
	if (err) {
    39fc:	d000      	beq.n	3a00 <hci_init+0xa8>
    39fe:	e0eb      	b.n	3bd8 <hci_init+0x280>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    3a00:	9b04      	ldr	r3, [sp, #16]
    3a02:	2206      	movs	r2, #6
    3a04:	6899      	ldr	r1, [r3, #8]
    3a06:	1c68      	adds	r0, r5, #1
    3a08:	3101      	adds	r1, #1
    3a0a:	f7fd fce9 	bl	13e0 <memcpy>
	net_buf_unref(rsp);
    3a0e:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    3a10:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    3a12:	f007 f995 	bl	ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    3a16:	0021      	movs	r1, r4
    3a18:	aa04      	add	r2, sp, #16
    3a1a:	489d      	ldr	r0, [pc, #628]	; (3c90 <hci_init+0x338>)
    3a1c:	f7ff fed6 	bl	37cc <bt_hci_cmd_send_sync>
    3a20:	1e04      	subs	r4, r0, #0
	if (err) {
    3a22:	d000      	beq.n	3a26 <hci_init+0xce>
    3a24:	e0d8      	b.n	3bd8 <hci_init+0x280>
	memcpy(bt_dev.supported_commands, rp->commands,
    3a26:	0028      	movs	r0, r5
    3a28:	9b04      	ldr	r3, [sp, #16]
    3a2a:	2240      	movs	r2, #64	; 0x40
    3a2c:	6899      	ldr	r1, [r3, #8]
    3a2e:	301e      	adds	r0, #30
    3a30:	3101      	adds	r1, #1
    3a32:	f7fd fcd5 	bl	13e0 <memcpy>
	net_buf_unref(rsp);
    3a36:	9804      	ldr	r0, [sp, #16]
    3a38:	f007 f982 	bl	ad40 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    3a3c:	7eab      	ldrb	r3, [r5, #26]
    3a3e:	065b      	lsls	r3, r3, #25
    3a40:	d400      	bmi.n	3a44 <hci_init+0xec>
    3a42:	e157      	b.n	3cf4 <hci_init+0x39c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    3a44:	0021      	movs	r1, r4
    3a46:	aa04      	add	r2, sp, #16
    3a48:	4892      	ldr	r0, [pc, #584]	; (3c94 <hci_init+0x33c>)
    3a4a:	f7ff febf 	bl	37cc <bt_hci_cmd_send_sync>
    3a4e:	1e04      	subs	r4, r0, #0
	if (err) {
    3a50:	d000      	beq.n	3a54 <hci_init+0xfc>
    3a52:	e0c1      	b.n	3bd8 <hci_init+0x280>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3a54:	0028      	movs	r0, r5
    3a56:	9b04      	ldr	r3, [sp, #16]
    3a58:	2208      	movs	r2, #8
    3a5a:	6899      	ldr	r1, [r3, #8]
    3a5c:	3078      	adds	r0, #120	; 0x78
    3a5e:	3101      	adds	r1, #1
    3a60:	f7fd fcbe 	bl	13e0 <memcpy>
	net_buf_unref(rsp);
    3a64:	9804      	ldr	r0, [sp, #16]
    3a66:	f007 f96b 	bl	ad40 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3a6a:	7eab      	ldrb	r3, [r5, #26]
    3a6c:	069b      	lsls	r3, r3, #26
    3a6e:	d400      	bmi.n	3a72 <hci_init+0x11a>
    3a70:	e09a      	b.n	3ba8 <hci_init+0x250>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    3a72:	002b      	movs	r3, r5
    3a74:	333a      	adds	r3, #58	; 0x3a
    3a76:	781b      	ldrb	r3, [r3, #0]
    3a78:	071b      	lsls	r3, r3, #28
    3a7a:	d500      	bpl.n	3a7e <hci_init+0x126>
    3a7c:	e0af      	b.n	3bde <hci_init+0x286>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    3a7e:	2108      	movs	r1, #8
    3a80:	4885      	ldr	r0, [pc, #532]	; (3c98 <hci_init+0x340>)
    3a82:	f7ff fe73 	bl	376c <bt_hci_cmd_create>
    3a86:	1e04      	subs	r4, r0, #0
	if (!buf) {
    3a88:	d100      	bne.n	3a8c <hci_init+0x134>
    3a8a:	e093      	b.n	3bb4 <hci_init+0x25c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    3a8c:	2108      	movs	r1, #8
    3a8e:	1840      	adds	r0, r0, r1
    3a90:	f007 f98c 	bl	adac <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    3a94:	002b      	movs	r3, r5
    3a96:	3340      	adds	r3, #64	; 0x40
    3a98:	781a      	ldrb	r2, [r3, #0]
    3a9a:	2306      	movs	r3, #6
    3a9c:	401a      	ands	r2, r3
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;
    3a9e:	3b04      	subs	r3, #4
	if ((bt_dev.supported_commands[34] & 0x02) &&
    3aa0:	2a06      	cmp	r2, #6
    3aa2:	d101      	bne.n	3aa8 <hci_init+0x150>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    3aa4:	3381      	adds	r3, #129	; 0x81
    3aa6:	33ff      	adds	r3, #255	; 0xff
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    3aa8:	2200      	movs	r2, #0
    3aaa:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    3aac:	0a1b      	lsrs	r3, r3, #8
    3aae:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    3ab0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    3ab2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    3ab4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    3ab6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    3ab8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    3aba:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    3abc:	0021      	movs	r1, r4
    3abe:	4876      	ldr	r0, [pc, #472]	; (3c98 <hci_init+0x340>)
    3ac0:	f7ff fe84 	bl	37cc <bt_hci_cmd_send_sync>
    3ac4:	1e04      	subs	r4, r0, #0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    3ac6:	d000      	beq.n	3aca <hci_init+0x172>
    3ac8:	e086      	b.n	3bd8 <hci_init+0x280>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    3aca:	2108      	movs	r1, #8
    3acc:	4873      	ldr	r0, [pc, #460]	; (3c9c <hci_init+0x344>)
    3ace:	f7ff fe4d 	bl	376c <bt_hci_cmd_create>
    3ad2:	1e06      	subs	r6, r0, #0
	if (!buf) {
    3ad4:	d06e      	beq.n	3bb4 <hci_init+0x25c>
	ev = net_buf_add(buf, sizeof(*ev));
    3ad6:	2108      	movs	r1, #8
    3ad8:	3008      	adds	r0, #8
    3ada:	f007 f967 	bl	adac <net_buf_simple_add>
    3ade:	2380      	movs	r3, #128	; 0x80
    3ae0:	2702      	movs	r7, #2
    3ae2:	7043      	strb	r3, [r0, #1]
    3ae4:	3b60      	subs	r3, #96	; 0x60
	dst[0] = val;
    3ae6:	7004      	strb	r4, [r0, #0]
    3ae8:	7084      	strb	r4, [r0, #2]
    3aea:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    3aec:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    3aee:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    3af0:	70c7      	strb	r7, [r0, #3]
    3af2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    3af4:	0022      	movs	r2, r4
    3af6:	0031      	movs	r1, r6
    3af8:	4868      	ldr	r0, [pc, #416]	; (3c9c <hci_init+0x344>)
    3afa:	f7ff fe67 	bl	37cc <bt_hci_cmd_send_sync>
    3afe:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    3b00:	d16a      	bne.n	3bd8 <hci_init+0x280>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    3b02:	0001      	movs	r1, r0
    3b04:	aa04      	add	r2, sp, #16
    3b06:	4866      	ldr	r0, [pc, #408]	; (3ca0 <hci_init+0x348>)
    3b08:	f7ff fe60 	bl	37cc <bt_hci_cmd_send_sync>
	if (err) {
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d126      	bne.n	3b5e <hci_init+0x206>
	net_buf_unref(rsp);
    3b10:	9804      	ldr	r0, [sp, #16]
    3b12:	f007 f915 	bl	ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    3b16:	aa04      	add	r2, sp, #16
    3b18:	0021      	movs	r1, r4
    3b1a:	4862      	ldr	r0, [pc, #392]	; (3ca4 <hci_init+0x34c>)
    3b1c:	f7ff fe56 	bl	37cc <bt_hci_cmd_send_sync>
	if (err) {
    3b20:	2800      	cmp	r0, #0
    3b22:	d11c      	bne.n	3b5e <hci_init+0x206>
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    3b24:	0028      	movs	r0, r5
	rp.cmds = (void *)rsp->data;
    3b26:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    3b28:	003a      	movs	r2, r7
    3b2a:	6899      	ldr	r1, [r3, #8]
    3b2c:	305f      	adds	r0, #95	; 0x5f
    3b2e:	3101      	adds	r1, #1
    3b30:	f7fd fc56 	bl	13e0 <memcpy>
	net_buf_unref(rsp);
    3b34:	9804      	ldr	r0, [sp, #16]
    3b36:	f007 f903 	bl	ad40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    3b3a:	aa04      	add	r2, sp, #16
    3b3c:	0021      	movs	r1, r4
    3b3e:	485a      	ldr	r0, [pc, #360]	; (3ca8 <hci_init+0x350>)
    3b40:	f7ff fe44 	bl	37cc <bt_hci_cmd_send_sync>
	if (err) {
    3b44:	2800      	cmp	r0, #0
    3b46:	d10a      	bne.n	3b5e <hci_init+0x206>
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    3b48:	0028      	movs	r0, r5
	rp.feat = (void *)rsp->data;
    3b4a:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    3b4c:	305e      	adds	r0, #94	; 0x5e
    3b4e:	6899      	ldr	r1, [r3, #8]
    3b50:	2201      	movs	r2, #1
    3b52:	3101      	adds	r1, #1
    3b54:	f7fd fc44 	bl	13e0 <memcpy>
	net_buf_unref(rsp);
    3b58:	9804      	ldr	r0, [sp, #16]
    3b5a:	f007 f8f1 	bl	ad40 <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    3b5e:	2207      	movs	r2, #7
    3b60:	2100      	movs	r1, #0
    3b62:	a802      	add	r0, sp, #8
    3b64:	f7fd fc66 	bl	1434 <memset>
	return memcmp(a, b, sizeof(*a));
    3b68:	2207      	movs	r2, #7
    3b6a:	a902      	add	r1, sp, #8
    3b6c:	0028      	movs	r0, r5
    3b6e:	f7fd fc13 	bl	1398 <memcmp>
    3b72:	2800      	cmp	r0, #0
    3b74:	d157      	bne.n	3c26 <hci_init+0x2ce>
	if (bt_storage) {
    3b76:	4e4d      	ldr	r6, [pc, #308]	; (3cac <hci_init+0x354>)
    3b78:	6833      	ldr	r3, [r6, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d160      	bne.n	3c40 <hci_init+0x2e8>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    3b7e:	002b      	movs	r3, r5
    3b80:	2401      	movs	r4, #1
    3b82:	3360      	adds	r3, #96	; 0x60
    3b84:	781b      	ldrb	r3, [r3, #0]
    3b86:	4223      	tst	r3, r4
    3b88:	d000      	beq.n	3b8c <hci_init+0x234>
    3b8a:	e097      	b.n	3cbc <hci_init+0x364>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    3b8c:	0028      	movs	r0, r5
    3b8e:	f7ff fed2 	bl	3936 <bt_addr_le_create_static>
    3b92:	1e04      	subs	r4, r0, #0
	if (err) {
    3b94:	d120      	bne.n	3bd8 <hci_init+0x280>
	if (bt_storage) {
    3b96:	6833      	ldr	r3, [r6, #0]
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d05a      	beq.n	3c52 <hci_init+0x2fa>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    3b9c:	685e      	ldr	r6, [r3, #4]
    3b9e:	002a      	movs	r2, r5
    3ba0:	2307      	movs	r3, #7
    3ba2:	0001      	movs	r1, r0
    3ba4:	47b0      	blx	r6
    3ba6:	e054      	b.n	3c52 <hci_init+0x2fa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    3ba8:	2102      	movs	r1, #2
    3baa:	4841      	ldr	r0, [pc, #260]	; (3cb0 <hci_init+0x358>)
    3bac:	f7ff fdde 	bl	376c <bt_hci_cmd_create>
    3bb0:	1e06      	subs	r6, r0, #0
		if (!buf) {
    3bb2:	d102      	bne.n	3bba <hci_init+0x262>
		return -ENOBUFS;
    3bb4:	2437      	movs	r4, #55	; 0x37
		return -ENODEV;
    3bb6:	4264      	negs	r4, r4
    3bb8:	e00e      	b.n	3bd8 <hci_init+0x280>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    3bba:	2102      	movs	r1, #2
    3bbc:	3008      	adds	r0, #8
    3bbe:	f007 f8f5 	bl	adac <net_buf_simple_add>
		cp_le->le = 0x01;
    3bc2:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    3bc4:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    3bc6:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    3bc8:	0022      	movs	r2, r4
    3bca:	0031      	movs	r1, r6
    3bcc:	4838      	ldr	r0, [pc, #224]	; (3cb0 <hci_init+0x358>)
    3bce:	f7ff fdfd 	bl	37cc <bt_hci_cmd_send_sync>
    3bd2:	1e04      	subs	r4, r0, #0
		if (err) {
    3bd4:	d100      	bne.n	3bd8 <hci_init+0x280>
    3bd6:	e74c      	b.n	3a72 <hci_init+0x11a>
	}

	show_dev_info();

	return 0;
}
    3bd8:	0020      	movs	r0, r4
    3bda:	b007      	add	sp, #28
    3bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    3bde:	aa04      	add	r2, sp, #16
    3be0:	2100      	movs	r1, #0
    3be2:	4834      	ldr	r0, [pc, #208]	; (3cb4 <hci_init+0x35c>)
    3be4:	f7ff fdf2 	bl	37cc <bt_hci_cmd_send_sync>
    3be8:	1e04      	subs	r4, r0, #0
		if (err) {
    3bea:	d1f5      	bne.n	3bd8 <hci_init+0x280>
		le_read_supp_states_complete(rsp);
    3bec:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3bee:	6882      	ldr	r2, [r0, #8]
    3bf0:	1c53      	adds	r3, r2, #1
    3bf2:	7859      	ldrb	r1, [r3, #1]
    3bf4:	7852      	ldrb	r2, [r2, #1]
    3bf6:	0209      	lsls	r1, r1, #8
    3bf8:	4311      	orrs	r1, r2
    3bfa:	789a      	ldrb	r2, [r3, #2]
    3bfc:	791c      	ldrb	r4, [r3, #4]
    3bfe:	0412      	lsls	r2, r2, #16
    3c00:	4311      	orrs	r1, r2
    3c02:	78da      	ldrb	r2, [r3, #3]
    3c04:	0612      	lsls	r2, r2, #24
    3c06:	430a      	orrs	r2, r1
    3c08:	7959      	ldrb	r1, [r3, #5]
    3c0a:	0209      	lsls	r1, r1, #8
    3c0c:	430c      	orrs	r4, r1
    3c0e:	7999      	ldrb	r1, [r3, #6]
    3c10:	79db      	ldrb	r3, [r3, #7]
    3c12:	0409      	lsls	r1, r1, #16
    3c14:	4321      	orrs	r1, r4
    3c16:	061b      	lsls	r3, r3, #24
    3c18:	430b      	orrs	r3, r1
	bt_dev.le.states = sys_get_le64(rp->le_states);
    3c1a:	0029      	movs	r1, r5
    3c1c:	3180      	adds	r1, #128	; 0x80
    3c1e:	c10c      	stmia	r1!, {r2, r3}
		net_buf_unref(rsp);
    3c20:	f007 f88e 	bl	ad40 <net_buf_unref>
    3c24:	e72b      	b.n	3a7e <hci_init+0x126>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    3c26:	2207      	movs	r2, #7
    3c28:	4923      	ldr	r1, [pc, #140]	; (3cb8 <hci_init+0x360>)
    3c2a:	a804      	add	r0, sp, #16
    3c2c:	f7fd fbd8 	bl	13e0 <memcpy>
    3c30:	2207      	movs	r2, #7
    3c32:	a904      	add	r1, sp, #16
    3c34:	0028      	movs	r0, r5
    3c36:	f7fd fbaf 	bl	1398 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    3c3a:	2800      	cmp	r0, #0
    3c3c:	d09b      	beq.n	3b76 <hci_init+0x21e>
    3c3e:	e7cb      	b.n	3bd8 <hci_init+0x280>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    3c40:	2100      	movs	r1, #0
    3c42:	681c      	ldr	r4, [r3, #0]
    3c44:	002a      	movs	r2, r5
    3c46:	2307      	movs	r3, #7
    3c48:	0008      	movs	r0, r1
    3c4a:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    3c4c:	2807      	cmp	r0, #7
    3c4e:	d000      	beq.n	3c52 <hci_init+0x2fa>
    3c50:	e795      	b.n	3b7e <hci_init+0x226>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    3c52:	782b      	ldrb	r3, [r5, #0]
    3c54:	2b01      	cmp	r3, #1
    3c56:	d14b      	bne.n	3cf0 <hci_init+0x398>
    3c58:	223f      	movs	r2, #63	; 0x3f
    3c5a:	79ab      	ldrb	r3, [r5, #6]
    3c5c:	4393      	bics	r3, r2
    3c5e:	2bc0      	cmp	r3, #192	; 0xc0
    3c60:	d146      	bne.n	3cf0 <hci_init+0x398>
	err = set_random_address(&bt_dev.id_addr.a);
    3c62:	1c68      	adds	r0, r5, #1
    3c64:	f7ff fdf4 	bl	3850 <set_random_address>
    3c68:	1e04      	subs	r4, r0, #0
	if (err) {
    3c6a:	d1b5      	bne.n	3bd8 <hci_init+0x280>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c6c:	0028      	movs	r0, r5
    3c6e:	2104      	movs	r1, #4
    3c70:	3070      	adds	r0, #112	; 0x70
    3c72:	f008 f9d3 	bl	c01c <atomic_or>
    3c76:	e7af      	b.n	3bd8 <hci_init+0x280>
    3c78:	00000c03 	.word	0x00000c03
    3c7c:	20002238 	.word	0x20002238
    3c80:	200000d8 	.word	0x200000d8
    3c84:	00001003 	.word	0x00001003
    3c88:	00001001 	.word	0x00001001
    3c8c:	00001009 	.word	0x00001009
    3c90:	00001002 	.word	0x00001002
    3c94:	00002003 	.word	0x00002003
    3c98:	00002001 	.word	0x00002001
    3c9c:	00000c01 	.word	0x00000c01
    3ca0:	0000fc01 	.word	0x0000fc01
    3ca4:	0000fc02 	.word	0x0000fc02
    3ca8:	0000fc03 	.word	0x0000fc03
    3cac:	20000d00 	.word	0x20000d00
    3cb0:	00000c6d 	.word	0x00000c6d
    3cb4:	0000201c 	.word	0x0000201c
    3cb8:	0000c3dc 	.word	0x0000c3dc
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    3cbc:	aa01      	add	r2, sp, #4
    3cbe:	2100      	movs	r1, #0
    3cc0:	480d      	ldr	r0, [pc, #52]	; (3cf8 <hci_init+0x3a0>)
    3cc2:	f7ff fd83 	bl	37cc <bt_hci_cmd_send_sync>
		if (err) {
    3cc6:	2800      	cmp	r0, #0
    3cc8:	d000      	beq.n	3ccc <hci_init+0x374>
    3cca:	e75f      	b.n	3b8c <hci_init+0x234>
		rp = (void *)rsp->data;
    3ccc:	9801      	ldr	r0, [sp, #4]
    3cce:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    3cd0:	784b      	ldrb	r3, [r1, #1]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d009      	beq.n	3cea <hci_init+0x392>
			bt_addr_copy(&bt_dev.id_addr.a, &rp->a[0].bdaddr);
    3cd6:	3102      	adds	r1, #2
	memcpy(dst, src, sizeof(*dst));
    3cd8:	1c68      	adds	r0, r5, #1
    3cda:	2206      	movs	r2, #6
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    3cdc:	702c      	strb	r4, [r5, #0]
    3cde:	f7fd fb7f 	bl	13e0 <memcpy>
			net_buf_unref(rsp);
    3ce2:	9801      	ldr	r0, [sp, #4]
    3ce4:	f007 f82c 	bl	ad40 <net_buf_unref>
    3ce8:	e7b3      	b.n	3c52 <hci_init+0x2fa>
		net_buf_unref(rsp);
    3cea:	f007 f829 	bl	ad40 <net_buf_unref>
    3cee:	e74d      	b.n	3b8c <hci_init+0x234>
		return -EINVAL;
    3cf0:	2416      	movs	r4, #22
    3cf2:	e760      	b.n	3bb6 <hci_init+0x25e>
		return -ENODEV;
    3cf4:	2413      	movs	r4, #19
    3cf6:	e75e      	b.n	3bb6 <hci_init+0x25e>
    3cf8:	0000fc09 	.word	0x0000fc09

00003cfc <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    3cfc:	b510      	push	{r4, lr}
	err = hci_init();
    3cfe:	f7ff fe2b 	bl	3958 <hci_init>
    3d02:	1e04      	subs	r4, r0, #0
	if (err) {
    3d04:	d107      	bne.n	3d16 <init_work+0x1a>
    3d06:	4807      	ldr	r0, [pc, #28]	; (3d24 <init_work+0x28>)
    3d08:	2102      	movs	r1, #2
    3d0a:	3070      	adds	r0, #112	; 0x70
    3d0c:	f008 f986 	bl	c01c <atomic_or>
	bt_le_scan_update(false);
    3d10:	0020      	movs	r0, r4
    3d12:	f7ff fdff 	bl	3914 <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    3d16:	4b04      	ldr	r3, [pc, #16]	; (3d28 <init_work+0x2c>)
    3d18:	681b      	ldr	r3, [r3, #0]
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	d001      	beq.n	3d22 <init_work+0x26>
		ready_cb(err);
    3d1e:	0020      	movs	r0, r4
    3d20:	4798      	blx	r3
	}
}
    3d22:	bd10      	pop	{r4, pc}
    3d24:	20002238 	.word	0x20002238
    3d28:	200000d4 	.word	0x200000d4

00003d2c <bt_recv>:
{
    3d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    3d2e:	7d05      	ldrb	r5, [r0, #20]
{
    3d30:	b087      	sub	sp, #28
    3d32:	0004      	movs	r4, r0
	switch (bt_buf_get_type(buf)) {
    3d34:	2d01      	cmp	r5, #1
    3d36:	d13f      	bne.n	3db8 <bt_recv+0x8c>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3d38:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    3d3a:	783b      	ldrb	r3, [r7, #0]
    3d3c:	3b0e      	subs	r3, #14
    3d3e:	2b01      	cmp	r3, #1
    3d40:	d83f      	bhi.n	3dc2 <bt_recv+0x96>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    3d42:	b662      	cpsie	i
    3d44:	2004      	movs	r0, #4
    3d46:	df02      	svc	2
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d48:	2111      	movs	r1, #17
    3d4a:	4f4a      	ldr	r7, [pc, #296]	; (3e74 <bt_recv+0x148>)
    3d4c:	68a6      	ldr	r6, [r4, #8]
    3d4e:	3770      	adds	r7, #112	; 0x70
    3d50:	4249      	negs	r1, r1
    3d52:	0038      	movs	r0, r7
    3d54:	f008 f96d 	bl	c032 <atomic_and>
	if (!evt->status) {
    3d58:	7833      	ldrb	r3, [r6, #0]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d108      	bne.n	3d70 <bt_recv+0x44>
		memcpy(pub_key, evt->key, 64);
    3d5e:	1c71      	adds	r1, r6, #1
    3d60:	2240      	movs	r2, #64	; 0x40
    3d62:	4845      	ldr	r0, [pc, #276]	; (3e78 <bt_recv+0x14c>)
    3d64:	f7fd fb3c 	bl	13e0 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d68:	0029      	movs	r1, r5
    3d6a:	0038      	movs	r0, r7
    3d6c:	f008 f956 	bl	c01c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d70:	4b42      	ldr	r3, [pc, #264]	; (3e7c <bt_recv+0x150>)
    3d72:	681d      	ldr	r5, [r3, #0]
    3d74:	2d00      	cmp	r5, #0
    3d76:	d105      	bne.n	3d84 <bt_recv+0x58>
	net_buf_unref(buf);
    3d78:	0020      	movs	r0, r4
    3d7a:	f006 ffe1 	bl	ad40 <net_buf_unref>
		return 0;
    3d7e:	2000      	movs	r0, #0
}
    3d80:	b007      	add	sp, #28
    3d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : evt->key);
    3d84:	2000      	movs	r0, #0
    3d86:	7832      	ldrb	r2, [r6, #0]
    3d88:	682b      	ldr	r3, [r5, #0]
    3d8a:	4282      	cmp	r2, r0
    3d8c:	d100      	bne.n	3d90 <bt_recv+0x64>
    3d8e:	1c70      	adds	r0, r6, #1
    3d90:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d92:	686d      	ldr	r5, [r5, #4]
    3d94:	e7ee      	b.n	3d74 <bt_recv+0x48>
	if (dh_key_cb) {
    3d96:	4d3a      	ldr	r5, [pc, #232]	; (3e80 <bt_recv+0x154>)
    3d98:	68a2      	ldr	r2, [r4, #8]
    3d9a:	682b      	ldr	r3, [r5, #0]
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d0eb      	beq.n	3d78 <bt_recv+0x4c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3da0:	2000      	movs	r0, #0
    3da2:	7811      	ldrb	r1, [r2, #0]
    3da4:	4281      	cmp	r1, r0
    3da6:	d100      	bne.n	3daa <bt_recv+0x7e>
    3da8:	1c50      	adds	r0, r2, #1
    3daa:	4798      	blx	r3
		dh_key_cb = NULL;
    3dac:	2300      	movs	r3, #0
    3dae:	602b      	str	r3, [r5, #0]
    3db0:	e7e2      	b.n	3d78 <bt_recv+0x4c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3db2:	f7fd fb15 	bl	13e0 <memcpy>
    3db6:	e037      	b.n	3e28 <bt_recv+0xfc>
		net_buf_unref(buf);
    3db8:	f006 ffc2 	bl	ad40 <net_buf_unref>
		return -EINVAL;
    3dbc:	2016      	movs	r0, #22
    3dbe:	4240      	negs	r0, r0
    3dc0:	e7de      	b.n	3d80 <bt_recv+0x54>
	net_buf_pull(buf, sizeof(*hdr));
    3dc2:	0006      	movs	r6, r0
    3dc4:	3608      	adds	r6, #8
    3dc6:	2102      	movs	r1, #2
    3dc8:	0030      	movs	r0, r6
    3dca:	f007 f800 	bl	adce <net_buf_simple_pull>
	switch (hdr->evt) {
    3dce:	783b      	ldrb	r3, [r7, #0]
    3dd0:	2b3e      	cmp	r3, #62	; 0x3e
    3dd2:	d1d1      	bne.n	3d78 <bt_recv+0x4c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3dd4:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3dd6:	0029      	movs	r1, r5
    3dd8:	0030      	movs	r0, r6
    3dda:	f006 fff8 	bl	adce <net_buf_simple_pull>
	switch (evt->subevent) {
    3dde:	783d      	ldrb	r5, [r7, #0]
    3de0:	2d08      	cmp	r5, #8
    3de2:	d0b1      	beq.n	3d48 <bt_recv+0x1c>
    3de4:	2d09      	cmp	r5, #9
    3de6:	d0d6      	beq.n	3d96 <bt_recv+0x6a>
    3de8:	2d02      	cmp	r5, #2
    3dea:	d1c5      	bne.n	3d78 <bt_recv+0x4c>
	u8_t num_reports = net_buf_pull_u8(buf);
    3dec:	0030      	movs	r0, r6
    3dee:	f006 fff6 	bl	adde <net_buf_simple_pull_u8>
    3df2:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    3df4:	9b00      	ldr	r3, [sp, #0]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d0be      	beq.n	3d78 <bt_recv+0x4c>
		info = (void *)buf->data;
    3dfa:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3dfc:	2109      	movs	r1, #9
    3dfe:	0030      	movs	r0, r6
    3e00:	f006 ffe5 	bl	adce <net_buf_simple_pull>
		rssi = info->data[info->length];
    3e04:	7a2b      	ldrb	r3, [r5, #8]
    3e06:	1c69      	adds	r1, r5, #1
    3e08:	18eb      	adds	r3, r5, r3
    3e0a:	7a5b      	ldrb	r3, [r3, #9]
    3e0c:	2207      	movs	r2, #7
    3e0e:	9301      	str	r3, [sp, #4]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3e10:	786b      	ldrb	r3, [r5, #1]
    3e12:	a804      	add	r0, sp, #16
    3e14:	3b02      	subs	r3, #2
    3e16:	2b01      	cmp	r3, #1
    3e18:	d8cb      	bhi.n	3db2 <bt_recv+0x86>
    3e1a:	f7fd fae1 	bl	13e0 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3e1e:	ab04      	add	r3, sp, #16
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	aa04      	add	r2, sp, #16
    3e24:	3b02      	subs	r3, #2
    3e26:	7013      	strb	r3, [r2, #0]
		if (scan_dev_found_cb) {
    3e28:	4f16      	ldr	r7, [pc, #88]	; (3e84 <bt_recv+0x158>)
    3e2a:	683b      	ldr	r3, [r7, #0]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d017      	beq.n	3e60 <bt_recv+0x134>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3e30:	0030      	movs	r0, r6
    3e32:	f006 ffdc 	bl	adee <net_buf_simple_headroom>
	state->len = buf->len;
    3e36:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3e38:	9002      	str	r0, [sp, #8]
	state->len = buf->len;
    3e3a:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    3e3c:	7a2b      	ldrb	r3, [r5, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3e3e:	2104      	movs	r1, #4
			buf->len = info->length;
    3e40:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3e42:	466b      	mov	r3, sp
    3e44:	782a      	ldrb	r2, [r5, #0]
    3e46:	5659      	ldrsb	r1, [r3, r1]
    3e48:	683f      	ldr	r7, [r7, #0]
    3e4a:	0033      	movs	r3, r6
    3e4c:	a804      	add	r0, sp, #16
    3e4e:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3e50:	466b      	mov	r3, sp
    3e52:	6922      	ldr	r2, [r4, #16]
    3e54:	891b      	ldrh	r3, [r3, #8]
    3e56:	18d3      	adds	r3, r2, r3
    3e58:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3e5a:	466b      	mov	r3, sp
    3e5c:	899b      	ldrh	r3, [r3, #12]
    3e5e:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    3e60:	7a29      	ldrb	r1, [r5, #8]
    3e62:	0030      	movs	r0, r6
    3e64:	3101      	adds	r1, #1
    3e66:	f006 ffb2 	bl	adce <net_buf_simple_pull>
    3e6a:	9b00      	ldr	r3, [sp, #0]
    3e6c:	3b01      	subs	r3, #1
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	9300      	str	r3, [sp, #0]
    3e72:	e7bf      	b.n	3df4 <bt_recv+0xc8>
    3e74:	20002238 	.word	0x20002238
    3e78:	20000090 	.word	0x20000090
    3e7c:	200000d0 	.word	0x200000d0
    3e80:	2000008c 	.word	0x2000008c
    3e84:	200000d8 	.word	0x200000d8

00003e88 <bt_recv_prio>:
{
    3e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e8a:	7d03      	ldrb	r3, [r0, #20]
{
    3e8c:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3e8e:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e90:	2b01      	cmp	r3, #1
    3e92:	d002      	beq.n	3e9a <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3e94:	b662      	cpsie	i
    3e96:	2004      	movs	r0, #4
    3e98:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3e9a:	8983      	ldrh	r3, [r0, #12]
    3e9c:	2b01      	cmp	r3, #1
    3e9e:	d9f9      	bls.n	3e94 <bt_recv_prio+0xc>
    3ea0:	7833      	ldrb	r3, [r6, #0]
    3ea2:	3b0e      	subs	r3, #14
    3ea4:	2b01      	cmp	r3, #1
    3ea6:	d8f5      	bhi.n	3e94 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    3ea8:	0005      	movs	r5, r0
    3eaa:	3508      	adds	r5, #8
    3eac:	2102      	movs	r1, #2
    3eae:	0028      	movs	r0, r5
    3eb0:	f006 ff8d 	bl	adce <net_buf_simple_pull>
	switch (hdr->evt) {
    3eb4:	7833      	ldrb	r3, [r6, #0]
    3eb6:	2b0e      	cmp	r3, #14
    3eb8:	d005      	beq.n	3ec6 <bt_recv_prio+0x3e>
    3eba:	2b0f      	cmp	r3, #15
    3ebc:	d019      	beq.n	3ef2 <bt_recv_prio+0x6a>
		net_buf_unref(buf);
    3ebe:	0020      	movs	r0, r4
    3ec0:	f006 ff3e 	bl	ad40 <net_buf_unref>
    3ec4:	e7e6      	b.n	3e94 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    3ec6:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3ec8:	2103      	movs	r1, #3
    3eca:	0028      	movs	r0, r5
	u8_t status, ncmd = evt->ncmd;
    3ecc:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3ece:	f006 ff7e 	bl	adce <net_buf_simple_pull>
	hci_cmd_done(opcode, status, buf);
    3ed2:	68a3      	ldr	r3, [r4, #8]
    3ed4:	0021      	movs	r1, r4
    3ed6:	7818      	ldrb	r0, [r3, #0]
    3ed8:	f7ff fc0e 	bl	36f8 <hci_cmd_done.isra.9>
	if (ncmd) {
    3edc:	2e00      	cmp	r6, #0
    3ede:	d003      	beq.n	3ee8 <bt_recv_prio+0x60>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ee0:	480a      	ldr	r0, [pc, #40]	; (3f0c <bt_recv_prio+0x84>)
    3ee2:	3088      	adds	r0, #136	; 0x88
    3ee4:	f007 fca0 	bl	b828 <_impl_k_sem_give>
	net_buf_unref(buf);
    3ee8:	0020      	movs	r0, r4
    3eea:	f006 ff29 	bl	ad40 <net_buf_unref>
}
    3eee:	2000      	movs	r0, #0
    3ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3ef2:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3ef4:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    3ef6:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    3ef8:	0028      	movs	r0, r5
    3efa:	f006 ff68 	bl	adce <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3efe:	7830      	ldrb	r0, [r6, #0]
    3f00:	0021      	movs	r1, r4
    3f02:	f7ff fbf9 	bl	36f8 <hci_cmd_done.isra.9>
	if (ncmd) {
    3f06:	2f00      	cmp	r7, #0
    3f08:	d0ee      	beq.n	3ee8 <bt_recv_prio+0x60>
    3f0a:	e7e9      	b.n	3ee0 <bt_recv_prio+0x58>
    3f0c:	20002238 	.word	0x20002238

00003f10 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    3f10:	4a09      	ldr	r2, [pc, #36]	; (3f38 <bt_hci_driver_register+0x28>)
    3f12:	32c4      	adds	r2, #196	; 0xc4
    3f14:	6813      	ldr	r3, [r2, #0]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d108      	bne.n	3f2c <bt_hci_driver_register+0x1c>
	if (!drv->open || !drv->send) {
    3f1a:	6881      	ldr	r1, [r0, #8]
    3f1c:	2900      	cmp	r1, #0
    3f1e:	d008      	beq.n	3f32 <bt_hci_driver_register+0x22>
    3f20:	68c1      	ldr	r1, [r0, #12]
    3f22:	2900      	cmp	r1, #0
    3f24:	d005      	beq.n	3f32 <bt_hci_driver_register+0x22>
	bt_dev.drv = drv;
    3f26:	6010      	str	r0, [r2, #0]
	return 0;
    3f28:	0018      	movs	r0, r3
}
    3f2a:	4770      	bx	lr
		return -EALREADY;
    3f2c:	2045      	movs	r0, #69	; 0x45
		return -EINVAL;
    3f2e:	4240      	negs	r0, r0
    3f30:	e7fb      	b.n	3f2a <bt_hci_driver_register+0x1a>
    3f32:	2016      	movs	r0, #22
    3f34:	e7fb      	b.n	3f2e <bt_hci_driver_register+0x1e>
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	20002238 	.word	0x20002238

00003f3c <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3f3c:	b570      	push	{r4, r5, r6, lr}
    3f3e:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3f40:	4805      	ldr	r0, [pc, #20]	; (3f58 <bt_buf_get_rx+0x1c>)
    3f42:	f006 fee3 	bl	ad0c <net_buf_alloc_fixed>
    3f46:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    3f48:	d004      	beq.n	3f54 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3f4a:	2100      	movs	r1, #0
    3f4c:	3008      	adds	r0, #8
    3f4e:	f006 fee5 	bl	ad1c <net_buf_simple_reserve>
    3f52:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3f54:	0020      	movs	r0, r4
    3f56:	bd70      	pop	{r4, r5, r6, pc}
    3f58:	20002560 	.word	0x20002560

00003f5c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3f5c:	b510      	push	{r4, lr}
    3f5e:	0001      	movs	r1, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    3f60:	f3ef 8210 	mrs	r2, PRIMASK
    3f64:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    3f66:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    3f68:	4b0b      	ldr	r3, [pc, #44]	; (3f98 <bt_buf_get_cmd_complete+0x3c>)
    3f6a:	33a0      	adds	r3, #160	; 0xa0
    3f6c:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    3f6e:	6018      	str	r0, [r3, #0]
	if (key) {
    3f70:	4282      	cmp	r2, r0
    3f72:	d100      	bne.n	3f76 <bt_buf_get_cmd_complete+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    3f74:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3f76:	2c00      	cmp	r4, #0
    3f78:	d009      	beq.n	3f8e <bt_buf_get_cmd_complete+0x32>
    3f7a:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    3f7c:	2100      	movs	r1, #0
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3f7e:	0020      	movs	r0, r4
    3f80:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    3f82:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3f84:	3008      	adds	r0, #8
    3f86:	f006 fec9 	bl	ad1c <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    3f8a:	0020      	movs	r0, r4
    3f8c:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3f8e:	2001      	movs	r0, #1
    3f90:	f7ff ffd4 	bl	3f3c <bt_buf_get_rx>
    3f94:	0004      	movs	r4, r0
    3f96:	e7f8      	b.n	3f8a <bt_buf_get_cmd_complete+0x2e>
    3f98:	20002238 	.word	0x20002238

00003f9c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    3f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3f9e:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3fa0:	2203      	movs	r2, #3
{
    3fa2:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    3fa4:	6018      	str	r0, [r3, #0]
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3fa6:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3fa8:	1e60      	subs	r0, r4, #1
    3faa:	b280      	uxth	r0, r0
    3fac:	4348      	muls	r0, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3fae:	4393      	bics	r3, r2
    3fb0:	801c      	strh	r4, [r3, #0]
{
    3fb2:	000e      	movs	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3fb4:	1828      	adds	r0, r5, r0
    3fb6:	3201      	adds	r2, #1
    3fb8:	2100      	movs	r1, #0
    3fba:	f7fd fa3b 	bl	1434 <memset>
    3fbe:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    3fc0:	4b08      	ldr	r3, [pc, #32]	; (3fe4 <mem_init+0x48>)
    3fc2:	b2a4      	uxth	r4, r4
    3fc4:	429c      	cmp	r4, r3
    3fc6:	d100      	bne.n	3fca <mem_init+0x2e>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    3fc8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			       (mem_size * (mem_count + 1)));
    3fca:	1c60      	adds	r0, r4, #1
    3fcc:	4370      	muls	r0, r6
		next = (u32_t)((u8_t *) mem_pool +
    3fce:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3fd0:	1b80      	subs	r0, r0, r6
    3fd2:	1828      	adds	r0, r5, r0
    3fd4:	2204      	movs	r2, #4
    3fd6:	a901      	add	r1, sp, #4
		next = (u32_t)((u8_t *) mem_pool +
    3fd8:	9301      	str	r3, [sp, #4]
    3fda:	3c01      	subs	r4, #1
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3fdc:	f7fd fa00 	bl	13e0 <memcpy>
    3fe0:	e7ee      	b.n	3fc0 <mem_init+0x24>
    3fe2:	46c0      	nop			; (mov r8, r8)
    3fe4:	0000ffff 	.word	0x0000ffff

00003fe8 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    3fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    3fea:	6805      	ldr	r5, [r0, #0]
{
    3fec:	0006      	movs	r6, r0
	if (*mem_head) {
    3fee:	2d00      	cmp	r5, #0
    3ff0:	d011      	beq.n	4016 <__kernel_ram_size+0x16>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    3ff2:	2703      	movs	r7, #3
    3ff4:	1deb      	adds	r3, r5, #7
    3ff6:	43bb      	bics	r3, r7
    3ff8:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    3ffa:	2204      	movs	r2, #4
    3ffc:	0029      	movs	r1, r5
    3ffe:	a801      	add	r0, sp, #4
    4000:	f7fd f9ee 	bl	13e0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    4004:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    4006:	3c01      	subs	r4, #1
    4008:	b2a4      	uxth	r4, r4
		if (head) {
    400a:	2b00      	cmp	r3, #0
    400c:	d002      	beq.n	4014 <__kernel_ram_size+0x14>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    400e:	1dda      	adds	r2, r3, #7
    4010:	43ba      	bics	r2, r7
    4012:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    4014:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    4016:	0028      	movs	r0, r5
    4018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000401a <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    401a:	680b      	ldr	r3, [r1, #0]
{
    401c:	b570      	push	{r4, r5, r6, lr}
    401e:	0005      	movs	r5, r0
    4020:	000c      	movs	r4, r1
	u16_t free_count = 0;
    4022:	1e1e      	subs	r6, r3, #0
	if (*mem_head) {
    4024:	d003      	beq.n	402e <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    4026:	2203      	movs	r2, #3
    4028:	3307      	adds	r3, #7
    402a:	4393      	bics	r3, r2
    402c:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    402e:	0028      	movs	r0, r5
    4030:	2204      	movs	r2, #4
    4032:	0021      	movs	r1, r4
    4034:	f7fd f9d4 	bl	13e0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    4038:	2203      	movs	r2, #3
    403a:	1deb      	adds	r3, r5, #7
	free_count++;
    403c:	3601      	adds	r6, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    403e:	4393      	bics	r3, r2
    4040:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    4042:	6025      	str	r5, [r4, #0]
}
    4044:	bd70      	pop	{r4, r5, r6, pc}

00004046 <mem_get>:
	return free_count;
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    4046:	434a      	muls	r2, r1
    4048:	1880      	adds	r0, r0, r2
}
    404a:	4770      	bx	lr

0000404c <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    404c:	1a40      	subs	r0, r0, r1
{
    404e:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    4050:	b280      	uxth	r0, r0
    4052:	0011      	movs	r1, r2
    4054:	f7fc f8b8 	bl	1c8 <__aeabi_uidiv>
    4058:	b280      	uxth	r0, r0
}
    405a:	bd10      	pop	{r4, pc}

0000405c <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    405c:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    405e:	4b06      	ldr	r3, [pc, #24]	; (4078 <mem_rcopy+0x1c>)
	src += len;
    4060:	1889      	adds	r1, r1, r2
	while (len--) {
    4062:	3a01      	subs	r2, #1
    4064:	b292      	uxth	r2, r2
    4066:	429a      	cmp	r2, r3
    4068:	d100      	bne.n	406c <mem_rcopy+0x10>
		*dst++ = *--src;
	}
}
    406a:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    406c:	3901      	subs	r1, #1
    406e:	780c      	ldrb	r4, [r1, #0]
    4070:	7004      	strb	r4, [r0, #0]
    4072:	3001      	adds	r0, #1
    4074:	e7f5      	b.n	4062 <mem_rcopy+0x6>
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	0000ffff 	.word	0x0000ffff

0000407c <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    407c:	6010      	str	r0, [r2, #0]
    407e:	6008      	str	r0, [r1, #0]

	return link;
}
    4080:	4770      	bx	lr

00004082 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    4082:	6813      	ldr	r3, [r2, #0]
    4084:	6018      	str	r0, [r3, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    4086:	6813      	ldr	r3, [r2, #0]
    4088:	6059      	str	r1, [r3, #4]

	/* increment the tail! */
	*tail = link;
    408a:	6010      	str	r0, [r2, #0]

	return link;
}
    408c:	4770      	bx	lr

0000408e <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    408e:	4288      	cmp	r0, r1
    4090:	d004      	beq.n	409c <memq_peek+0xe>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    4092:	2a00      	cmp	r2, #0
    4094:	d001      	beq.n	409a <memq_peek+0xc>
		*mem = head->mem;
    4096:	6843      	ldr	r3, [r0, #4]
    4098:	6013      	str	r3, [r2, #0]
	}

	return head;
}
    409a:	4770      	bx	lr
		return NULL;
    409c:	2000      	movs	r0, #0
    409e:	e7fc      	b.n	409a <memq_peek+0xc>

000040a0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    40a0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    40a2:	4283      	cmp	r3, r0
    40a4:	d00a      	beq.n	40bc <memq_dequeue+0x1c>
	if (mem) {
    40a6:	2a00      	cmp	r2, #0
    40a8:	d004      	beq.n	40b4 <memq_dequeue+0x14>
		*mem = head->mem;
    40aa:	6858      	ldr	r0, [r3, #4]
    40ac:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    40ae:	681a      	ldr	r2, [r3, #0]
    40b0:	600a      	str	r2, [r1, #0]

	return link;
    40b2:	e001      	b.n	40b8 <memq_dequeue+0x18>
	if (!link) {
    40b4:	2b00      	cmp	r3, #0
    40b6:	d1fa      	bne.n	40ae <memq_dequeue+0xe>
}
    40b8:	0018      	movs	r0, r3
    40ba:	4770      	bx	lr
		return NULL;
    40bc:	2300      	movs	r3, #0
    40be:	e7fb      	b.n	40b8 <memq_dequeue+0x18>

000040c0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    40c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    40c2:	2404      	movs	r4, #4
    40c4:	2630      	movs	r6, #48	; 0x30
	while (callee_id--) {
    40c6:	3c01      	subs	r4, #1
    40c8:	b2e4      	uxtb	r4, r4
    40ca:	2cff      	cmp	r4, #255	; 0xff
    40cc:	d018      	beq.n	4100 <mayfly_init+0x40>
    40ce:	0033      	movs	r3, r6
    40d0:	4363      	muls	r3, r4
    40d2:	00a7      	lsls	r7, r4, #2
    40d4:	9301      	str	r3, [sp, #4]
    40d6:	2504      	movs	r5, #4
    40d8:	e00d      	b.n	40f6 <mayfly_init+0x36>
    40da:	210c      	movs	r1, #12
    40dc:	4369      	muls	r1, r5
    40de:	9b01      	ldr	r3, [sp, #4]
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    40e0:	4808      	ldr	r0, [pc, #32]	; (4104 <mayfly_init+0x44>)
    40e2:	18c9      	adds	r1, r1, r3
    40e4:	4b08      	ldr	r3, [pc, #32]	; (4108 <mayfly_init+0x48>)
    40e6:	1d0a      	adds	r2, r1, #4
    40e8:	189a      	adds	r2, r3, r2
    40ea:	1859      	adds	r1, r3, r1
    40ec:	197b      	adds	r3, r7, r5
    40ee:	00db      	lsls	r3, r3, #3
    40f0:	18c0      	adds	r0, r0, r3
    40f2:	f7ff ffc3 	bl	407c <memq_init>
		while (caller_id--) {
    40f6:	3d01      	subs	r5, #1
    40f8:	b2ed      	uxtb	r5, r5
    40fa:	2dff      	cmp	r5, #255	; 0xff
    40fc:	d1ed      	bne.n	40da <mayfly_init+0x1a>
    40fe:	e7e2      	b.n	40c6 <mayfly_init+0x6>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    4100:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4102:	46c0      	nop			; (mov r8, r8)
    4104:	200000dc 	.word	0x200000dc
    4108:	2000015c 	.word	0x2000015c

0000410c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    410c:	b570      	push	{r4, r5, r6, lr}
    410e:	4d10      	ldr	r5, [pc, #64]	; (4150 <mayfly_enable+0x44>)
    4110:	240c      	movs	r4, #12
    4112:	2630      	movs	r6, #48	; 0x30
	if (enable) {
    4114:	2a00      	cmp	r2, #0
    4116:	d00d      	beq.n	4134 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    4118:	0023      	movs	r3, r4
    411a:	434e      	muls	r6, r1
    411c:	4343      	muls	r3, r0
    411e:	199b      	adds	r3, r3, r6
    4120:	18eb      	adds	r3, r5, r3
    4122:	7a1d      	ldrb	r5, [r3, #8]
    4124:	7a5c      	ldrb	r4, [r3, #9]
    4126:	42ac      	cmp	r4, r5
    4128:	d101      	bne.n	412e <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    412a:	3401      	adds	r4, #1
    412c:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    412e:	f006 fccf 	bl	aad0 <mayfly_enable_cb>
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    4132:	bd70      	pop	{r4, r5, r6, pc}
		if (mft[callee_id][caller_id].disable_req ==
    4134:	4344      	muls	r4, r0
    4136:	434e      	muls	r6, r1
    4138:	19a4      	adds	r4, r4, r6
    413a:	192c      	adds	r4, r5, r4
    413c:	7aa2      	ldrb	r2, [r4, #10]
    413e:	7ae3      	ldrb	r3, [r4, #11]
    4140:	4293      	cmp	r3, r2
    4142:	d1f6      	bne.n	4132 <mayfly_enable+0x26>
			mft[callee_id][caller_id].disable_req++;
    4144:	3301      	adds	r3, #1
    4146:	72a3      	strb	r3, [r4, #10]
			mayfly_pend(caller_id, callee_id);
    4148:	f006 fcee 	bl	ab28 <mayfly_pend>
}
    414c:	e7f1      	b.n	4132 <mayfly_enable+0x26>
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	2000015c 	.word	0x2000015c

00004154 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    4154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4156:	0006      	movs	r6, r0
    4158:	000f      	movs	r7, r1
    415a:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    415c:	2a00      	cmp	r2, #0
    415e:	d014      	beq.n	418a <mayfly_enqueue+0x36>
    4160:	2101      	movs	r1, #1

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    4162:	2203      	movs	r2, #3
	ack = m->_ack;
    4164:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    4166:	7825      	ldrb	r5, [r4, #0]
    4168:	1aed      	subs	r5, r5, r3
    416a:	4015      	ands	r5, r2
	if (state != 0) {
    416c:	d02b      	beq.n	41c6 <mayfly_enqueue+0x72>
		if (chain) {
    416e:	2900      	cmp	r1, #0
    4170:	d022      	beq.n	41b8 <mayfly_enqueue+0x64>

				return 0;
			}

			/* already ready */
			return 1;
    4172:	2001      	movs	r0, #1
			if (state != 1) {
    4174:	4285      	cmp	r5, r0
    4176:	d007      	beq.n	4188 <mayfly_enqueue+0x34>
				m->_req = ack + 1;
    4178:	181b      	adds	r3, r3, r0
    417a:	b2db      	uxtb	r3, r3
    417c:	7023      	strb	r3, [r4, #0]
				mayfly_pend(caller_id, callee_id);
    417e:	0039      	movs	r1, r7
    4180:	0030      	movs	r0, r6
    4182:	f006 fcd1 	bl	ab28 <mayfly_pend>
	/* handle mayfly(s) that can be inline */
	if (!chain) {
		/* call fp */
		m->fp(m->param);

		return 0;
    4186:	2000      	movs	r0, #0

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
    4188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    418a:	f006 fcbe 	bl	ab0a <mayfly_prio_is_equal>
    418e:	2800      	cmp	r0, #0
    4190:	d0e6      	beq.n	4160 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    4192:	0039      	movs	r1, r7
    4194:	0030      	movs	r0, r6
    4196:	f006 fcaa 	bl	aaee <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    419a:	2800      	cmp	r0, #0
    419c:	d0e0      	beq.n	4160 <mayfly_enqueue+0xc>
		(mft[callee_id][caller_id].disable_req !=
    419e:	230c      	movs	r3, #12
    41a0:	2230      	movs	r2, #48	; 0x30
    41a2:	4373      	muls	r3, r6
    41a4:	437a      	muls	r2, r7
    41a6:	189b      	adds	r3, r3, r2
    41a8:	4a12      	ldr	r2, [pc, #72]	; (41f4 <mayfly_enqueue+0xa0>)
    41aa:	18d3      	adds	r3, r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    41ac:	7a9a      	ldrb	r2, [r3, #10]
    41ae:	7ad9      	ldrb	r1, [r3, #11]
    41b0:	1a51      	subs	r1, r2, r1
    41b2:	1e4a      	subs	r2, r1, #1
    41b4:	4191      	sbcs	r1, r2
    41b6:	e7d4      	b.n	4162 <mayfly_enqueue+0xe>
		m->_req = ack + 2;
    41b8:	3302      	adds	r3, #2
    41ba:	b2db      	uxtb	r3, r3
    41bc:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    41be:	68e3      	ldr	r3, [r4, #12]
    41c0:	68a0      	ldr	r0, [r4, #8]
    41c2:	4798      	blx	r3
    41c4:	e7df      	b.n	4186 <mayfly_enqueue+0x32>
	if (!chain) {
    41c6:	2900      	cmp	r1, #0
    41c8:	d0f9      	beq.n	41be <mayfly_enqueue+0x6a>
	m->_req = ack + 1;
    41ca:	3301      	adds	r3, #1
    41cc:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    41ce:	2230      	movs	r2, #48	; 0x30
	m->_req = ack + 1;
    41d0:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    41d2:	230c      	movs	r3, #12
    41d4:	437a      	muls	r2, r7
    41d6:	4373      	muls	r3, r6
    41d8:	3204      	adds	r2, #4
    41da:	18d2      	adds	r2, r2, r3
    41dc:	4b05      	ldr	r3, [pc, #20]	; (41f4 <mayfly_enqueue+0xa0>)
    41de:	0021      	movs	r1, r4
    41e0:	189a      	adds	r2, r3, r2
    41e2:	6860      	ldr	r0, [r4, #4]
    41e4:	f7ff ff4d 	bl	4082 <memq_enqueue>
	mayfly_pend(caller_id, callee_id);
    41e8:	0030      	movs	r0, r6
    41ea:	0039      	movs	r1, r7
    41ec:	f006 fc9c 	bl	ab28 <mayfly_pend>
	return 0;
    41f0:	0028      	movs	r0, r5
    41f2:	e7c9      	b.n	4188 <mayfly_enqueue+0x34>
    41f4:	2000015c 	.word	0x2000015c

000041f8 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    41f8:	2330      	movs	r3, #48	; 0x30
    41fa:	001a      	movs	r2, r3
    41fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    41fe:	4342      	muls	r2, r0
    4200:	b089      	sub	sp, #36	; 0x24
    4202:	9205      	str	r2, [sp, #20]
	u8_t disable = 0;
	u8_t enable = 0;
    4204:	2200      	movs	r2, #0
{
    4206:	0004      	movs	r4, r0
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    4208:	2604      	movs	r6, #4
	u8_t enable = 0;
    420a:	9202      	str	r2, [sp, #8]
	u8_t disable = 0;
    420c:	9203      	str	r2, [sp, #12]
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    420e:	9300      	str	r3, [sp, #0]
	while (caller_id--) {
    4210:	3e01      	subs	r6, #1
    4212:	b2f6      	uxtb	r6, r6
    4214:	2eff      	cmp	r6, #255	; 0xff
    4216:	d10b      	bne.n	4230 <mayfly_run+0x38>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    4218:	9b03      	ldr	r3, [sp, #12]
    421a:	2b00      	cmp	r3, #0
    421c:	d077      	beq.n	430e <mayfly_run+0x116>
    421e:	9b02      	ldr	r3, [sp, #8]
    4220:	2b00      	cmp	r3, #0
    4222:	d174      	bne.n	430e <mayfly_run+0x116>
		mayfly_enable_cb(callee_id, callee_id, 0);
    4224:	001a      	movs	r2, r3
    4226:	0021      	movs	r1, r4
    4228:	0020      	movs	r0, r4
    422a:	f006 fc51 	bl	aad0 <mayfly_enable_cb>
    422e:	e06e      	b.n	430e <mayfly_run+0x116>
		struct mayfly *m = 0;
    4230:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    4232:	250c      	movs	r5, #12
		struct mayfly *m = 0;
    4234:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    4236:	9b00      	ldr	r3, [sp, #0]
    4238:	4375      	muls	r5, r6
    423a:	4363      	muls	r3, r4
    423c:	4f35      	ldr	r7, [pc, #212]	; (4314 <mayfly_run+0x11c>)
    423e:	18eb      	adds	r3, r5, r3
    4240:	18f9      	adds	r1, r7, r3
    4242:	59d8      	ldr	r0, [r3, r7]
    4244:	aa07      	add	r2, sp, #28
    4246:	6849      	ldr	r1, [r1, #4]
    4248:	f7ff ff21 	bl	408e <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    424c:	9b05      	ldr	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    424e:	9001      	str	r0, [sp, #4]
				memq_dequeue(mft[callee_id][caller_id].tail,
    4250:	18ed      	adds	r5, r5, r3
    4252:	197b      	adds	r3, r7, r5
    4254:	9304      	str	r3, [sp, #16]
		while (link) {
    4256:	9b01      	ldr	r3, [sp, #4]
    4258:	2b00      	cmp	r3, #0
    425a:	d11b      	bne.n	4294 <mayfly_run+0x9c>
		if (mft[callee_id][caller_id].disable_req !=
    425c:	230c      	movs	r3, #12
    425e:	9900      	ldr	r1, [sp, #0]
    4260:	4373      	muls	r3, r6
    4262:	4361      	muls	r1, r4
    4264:	4a2b      	ldr	r2, [pc, #172]	; (4314 <mayfly_run+0x11c>)
    4266:	185b      	adds	r3, r3, r1
    4268:	18d3      	adds	r3, r2, r3
    426a:	7a99      	ldrb	r1, [r3, #10]
    426c:	7ad8      	ldrb	r0, [r3, #11]
    426e:	4288      	cmp	r0, r1
    4270:	d002      	beq.n	4278 <mayfly_run+0x80>
			mft[callee_id][caller_id].disable_ack =
    4272:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    4274:	2301      	movs	r3, #1
    4276:	9303      	str	r3, [sp, #12]
		if (mft[callee_id][caller_id].enable_req !=
    4278:	230c      	movs	r3, #12
    427a:	9900      	ldr	r1, [sp, #0]
    427c:	4373      	muls	r3, r6
    427e:	4361      	muls	r1, r4
    4280:	185b      	adds	r3, r3, r1
    4282:	18d3      	adds	r3, r2, r3
    4284:	7a1a      	ldrb	r2, [r3, #8]
    4286:	7a59      	ldrb	r1, [r3, #9]
    4288:	4291      	cmp	r1, r2
    428a:	d0c1      	beq.n	4210 <mayfly_run+0x18>
			mft[callee_id][caller_id].enable_ack =
    428c:	725a      	strb	r2, [r3, #9]
			enable = 1;
    428e:	2301      	movs	r3, #1
    4290:	9302      	str	r3, [sp, #8]
    4292:	e7bd      	b.n	4210 <mayfly_run+0x18>
			state = (req - m->_ack) & 0x03;
    4294:	2103      	movs	r1, #3
			req = m->_req;
    4296:	9b07      	ldr	r3, [sp, #28]
    4298:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    429a:	785a      	ldrb	r2, [r3, #1]
    429c:	1abf      	subs	r7, r7, r2
    429e:	400f      	ands	r7, r1
			if (state == 1) {
    42a0:	2f01      	cmp	r7, #1
    42a2:	d104      	bne.n	42ae <mayfly_run+0xb6>
				m->_ack--;
    42a4:	3a01      	subs	r2, #1
    42a6:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    42a8:	6898      	ldr	r0, [r3, #8]
    42aa:	68da      	ldr	r2, [r3, #12]
    42ac:	4790      	blx	r2
			if (((req - m->_ack) & 0x03) != 1) {
    42ae:	2203      	movs	r2, #3
			req = m->_req;
    42b0:	9b07      	ldr	r3, [sp, #28]
    42b2:	781d      	ldrb	r5, [r3, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    42b4:	785b      	ldrb	r3, [r3, #1]
			req = m->_req;
    42b6:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    42b8:	1aeb      	subs	r3, r5, r3
    42ba:	4013      	ands	r3, r2
    42bc:	2b01      	cmp	r3, #1
    42be:	d00f      	beq.n	42e0 <mayfly_run+0xe8>
				memq_dequeue(mft[callee_id][caller_id].tail,
    42c0:	230c      	movs	r3, #12
    42c2:	9a00      	ldr	r2, [sp, #0]
    42c4:	4373      	muls	r3, r6
    42c6:	4362      	muls	r2, r4
    42c8:	189b      	adds	r3, r3, r2
    42ca:	4a12      	ldr	r2, [pc, #72]	; (4314 <mayfly_run+0x11c>)
    42cc:	9904      	ldr	r1, [sp, #16]
    42ce:	18d3      	adds	r3, r2, r3
    42d0:	6858      	ldr	r0, [r3, #4]
    42d2:	2200      	movs	r2, #0
    42d4:	f7ff fee4 	bl	40a0 <memq_dequeue>
				m->_link = link;
    42d8:	9b07      	ldr	r3, [sp, #28]
    42da:	9a01      	ldr	r2, [sp, #4]
				m->_ack = req;
    42dc:	705d      	strb	r5, [r3, #1]
				m->_link = link;
    42de:	605a      	str	r2, [r3, #4]
			link = memq_peek(mft[callee_id][caller_id].head,
    42e0:	230c      	movs	r3, #12
    42e2:	9a00      	ldr	r2, [sp, #0]
    42e4:	4373      	muls	r3, r6
    42e6:	4362      	muls	r2, r4
    42e8:	480a      	ldr	r0, [pc, #40]	; (4314 <mayfly_run+0x11c>)
    42ea:	189b      	adds	r3, r3, r2
    42ec:	18c1      	adds	r1, r0, r3
    42ee:	aa07      	add	r2, sp, #28
    42f0:	6849      	ldr	r1, [r1, #4]
    42f2:	5818      	ldr	r0, [r3, r0]
    42f4:	f7ff fecb 	bl	408e <memq_peek>
    42f8:	9001      	str	r0, [sp, #4]
			if (state == 1) {
    42fa:	2f01      	cmp	r7, #1
    42fc:	d1ab      	bne.n	4256 <mayfly_run+0x5e>
				if (caller_id || link) {
    42fe:	2e00      	cmp	r6, #0
    4300:	d101      	bne.n	4306 <mayfly_run+0x10e>
    4302:	2800      	cmp	r0, #0
    4304:	d0aa      	beq.n	425c <mayfly_run+0x64>
					mayfly_pend(callee_id, callee_id);
    4306:	0021      	movs	r1, r4
    4308:	0020      	movs	r0, r4
    430a:	f006 fc0d 	bl	ab28 <mayfly_pend>
	}
}
    430e:	b009      	add	sp, #36	; 0x24
    4310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4312:	46c0      	nop			; (mov r8, r8)
    4314:	2000015c 	.word	0x2000015c

00004318 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    4318:	0002      	movs	r2, r0
    431a:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    431c:	2000      	movs	r0, #0
{
    431e:	b510      	push	{r4, lr}

	while (octets_len--) {
    4320:	428a      	cmp	r2, r1
    4322:	d100      	bne.n	4326 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    4324:	bd10      	pop	{r4, pc}
		bite = *octets;
    4326:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    4328:	2c00      	cmp	r4, #0
    432a:	d101      	bne.n	4330 <util_ones_count_get+0x18>
		octets++;
    432c:	3201      	adds	r2, #1
    432e:	e7f7      	b.n	4320 <util_ones_count_get+0x8>
			bite &= (bite - 1);
    4330:	1e63      	subs	r3, r4, #1
			one_count++;
    4332:	3001      	adds	r0, #1
			bite &= (bite - 1);
    4334:	401c      	ands	r4, r3
			one_count++;
    4336:	b2c0      	uxtb	r0, r0
    4338:	e7f6      	b.n	4328 <util_ones_count_get+0x10>

0000433a <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    433a:	2328      	movs	r3, #40	; 0x28
{
    433c:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
    433e:	7f45      	ldrb	r5, [r0, #29]
	total = 0;
    4340:	2400      	movs	r4, #0
	current = previous;
    4342:	002a      	movs	r2, r5
		ticker_current = &node[current];
    4344:	469c      	mov	ip, r3
	node = &instance->node[0];
    4346:	6806      	ldr	r6, [r0, #0]
	while (current != TICKER_NULL) {
    4348:	2aff      	cmp	r2, #255	; 0xff
    434a:	d101      	bne.n	4350 <ticker_dequeue+0x16>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    434c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    4350:	4663      	mov	r3, ip
    4352:	4353      	muls	r3, r2
    4354:	18f3      	adds	r3, r6, r3
    4356:	781f      	ldrb	r7, [r3, #0]
		if (current == id) {
    4358:	428a      	cmp	r2, r1
    435a:	d004      	beq.n	4366 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    435c:	689b      	ldr	r3, [r3, #8]
		current = ticker_current->next;
    435e:	0015      	movs	r5, r2
		total += ticker_current->ticks_to_expire;
    4360:	18e4      	adds	r4, r4, r3
		current = ticker_current->next;
    4362:	003a      	movs	r2, r7
    4364:	e7f0      	b.n	4348 <ticker_dequeue+0xe>
	if (previous == current) {
    4366:	4295      	cmp	r5, r2
    4368:	d100      	bne.n	436c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    436a:	7747      	strb	r7, [r0, #29]
	node[previous].next = ticker_current->next;
    436c:	2228      	movs	r2, #40	; 0x28
    436e:	4355      	muls	r5, r2
    4370:	7819      	ldrb	r1, [r3, #0]
	timeout = ticker_current->ticks_to_expire;
    4372:	6898      	ldr	r0, [r3, #8]
	node[previous].next = ticker_current->next;
    4374:	55a9      	strb	r1, [r5, r6]
	if (ticker_current->next != TICKER_NULL) {
    4376:	781b      	ldrb	r3, [r3, #0]
    4378:	2bff      	cmp	r3, #255	; 0xff
    437a:	d004      	beq.n	4386 <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    437c:	4353      	muls	r3, r2
    437e:	18f3      	adds	r3, r6, r3
    4380:	689a      	ldr	r2, [r3, #8]
    4382:	1812      	adds	r2, r2, r0
    4384:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    4386:	1820      	adds	r0, r4, r0
    4388:	e7e1      	b.n	434e <ticker_dequeue+0x14>

0000438a <ticks_to_expire_prep>:
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    438a:	1a53      	subs	r3, r2, r1
{
    438c:	b570      	push	{r4, r5, r6, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    438e:	6884      	ldr	r4, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    4390:	6945      	ldr	r5, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    4392:	021e      	lsls	r6, r3, #8
    4394:	d409      	bmi.n	43aa <ticks_to_expire_prep+0x20>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4396:	021b      	lsls	r3, r3, #8
    4398:	0a1b      	lsrs	r3, r3, #8
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    439a:	191b      	adds	r3, r3, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
    439c:	42ab      	cmp	r3, r5
    439e:	d90e      	bls.n	43be <ticks_to_expire_prep+0x34>
		ticks_to_expire -= ticks_to_expire_minus;
    43a0:	1b5b      	subs	r3, r3, r5
		ticks_to_expire_minus = 0;
    43a2:	2500      	movs	r5, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    43a4:	6145      	str	r5, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    43a6:	6083      	str	r3, [r0, #8]
}
    43a8:	bd70      	pop	{r4, r5, r6, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    43aa:	1a8b      	subs	r3, r1, r2
    43ac:	021b      	lsls	r3, r3, #8
    43ae:	0a1b      	lsrs	r3, r3, #8
		if (ticks_to_expire > delta_current_start) {
    43b0:	429c      	cmp	r4, r3
    43b2:	d901      	bls.n	43b8 <ticks_to_expire_prep+0x2e>
			ticks_to_expire -= delta_current_start;
    43b4:	1ae3      	subs	r3, r4, r3
    43b6:	e7f1      	b.n	439c <ticks_to_expire_prep+0x12>
    43b8:	18ed      	adds	r5, r5, r3
			ticks_to_expire = 0;
    43ba:	2300      	movs	r3, #0
			ticks_to_expire_minus +=
    43bc:	1b2d      	subs	r5, r5, r4
		ticks_to_expire_minus -= ticks_to_expire;
    43be:	1aed      	subs	r5, r5, r3
		ticks_to_expire = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	e7ef      	b.n	43a4 <ticks_to_expire_prep+0x1a>

000043c4 <ticker_job_op_cb>:
{
    43c4:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    43c6:	2200      	movs	r2, #0
    43c8:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    43ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    43cc:	b510      	push	{r4, lr}
    43ce:	0008      	movs	r0, r1
	user_op->status = status;
    43d0:	6259      	str	r1, [r3, #36]	; 0x24
	if (user_op->fp_op_func) {
    43d2:	2a00      	cmp	r2, #0
    43d4:	d001      	beq.n	43da <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    43d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    43d8:	4790      	blx	r2
}
    43da:	bd10      	pop	{r4, pc}

000043dc <ticker_worker>:
	instance->worker_trigger = 1;
    43dc:	2301      	movs	r3, #1
{
    43de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (instance->job_guard) {
    43e0:	7f86      	ldrb	r6, [r0, #30]
{
    43e2:	0004      	movs	r4, r0
	instance->worker_trigger = 1;
    43e4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    43e6:	2e00      	cmp	r6, #0
    43e8:	d103      	bne.n	43f2 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    43ea:	7f43      	ldrb	r3, [r0, #29]
    43ec:	2bff      	cmp	r3, #255	; 0xff
    43ee:	d101      	bne.n	43f4 <ticker_worker+0x18>
		instance->worker_trigger = 0;
    43f0:	77c6      	strb	r6, [r0, #31]
}
    43f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    43f4:	f005 fe9a 	bl	a12c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    43f8:	6963      	ldr	r3, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    43fa:	7f67      	ldrb	r7, [r4, #29]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    43fc:	1ac5      	subs	r5, r0, r3
    43fe:	022d      	lsls	r5, r5, #8
    4400:	0a2b      	lsrs	r3, r5, #8
    4402:	9300      	str	r3, [sp, #0]
	node = &instance->node[0];
    4404:	6823      	ldr	r3, [r4, #0]
    4406:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    4408:	2fff      	cmp	r7, #255	; 0xff
    440a:	d007      	beq.n	441c <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    440c:	2328      	movs	r3, #40	; 0x28
    440e:	435f      	muls	r7, r3
    4410:	9b01      	ldr	r3, [sp, #4]
		if (ticks_elapsed < ticks_to_expire) {
    4412:	9a00      	ldr	r2, [sp, #0]
		ticker = &node[ticker_id_head];
    4414:	19d9      	adds	r1, r3, r7
		ticks_to_expire = ticker->ticks_to_expire;
    4416:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    4418:	429a      	cmp	r2, r3
    441a:	d217      	bcs.n	444c <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    441c:	7aa2      	ldrb	r2, [r4, #10]
    441e:	7ae3      	ldrb	r3, [r4, #11]
    4420:	4293      	cmp	r3, r2
    4422:	d105      	bne.n	4430 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    4424:	3301      	adds	r3, #1
    4426:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    4428:	2b02      	cmp	r3, #2
    442a:	d100      	bne.n	442e <ticker_worker+0x52>
			last = 0;
    442c:	2300      	movs	r3, #0
		instance->ticks_elapsed_last = last;
    442e:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    4430:	7ae3      	ldrb	r3, [r4, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    4432:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    4434:	3302      	adds	r3, #2
    4436:	009b      	lsls	r3, r3, #2
    4438:	18e3      	adds	r3, r4, r3
    443a:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
    443c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    443e:	2201      	movs	r2, #1
	instance->worker_trigger = 0;
    4440:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    4442:	2104      	movs	r1, #4
    4444:	0023      	movs	r3, r4
    4446:	2003      	movs	r0, #3
    4448:	47a8      	blx	r5
    444a:	e7d2      	b.n	43f2 <ticker_worker+0x16>
		ticks_elapsed -= ticks_to_expire;
    444c:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    444e:	18f6      	adds	r6, r6, r3
		ticks_elapsed -= ticks_to_expire;
    4450:	1ad2      	subs	r2, r2, r3
    4452:	9200      	str	r2, [sp, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    4454:	788a      	ldrb	r2, [r1, #2]
    4456:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    4458:	780f      	ldrb	r7, [r1, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    445a:	1a9b      	subs	r3, r3, r2
    445c:	b2db      	uxtb	r3, r3
    445e:	2b01      	cmp	r3, #1
    4460:	d1d2      	bne.n	4408 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    4462:	68cb      	ldr	r3, [r1, #12]
		ticker->ack--;
    4464:	3a01      	subs	r2, #1
    4466:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    4468:	1e1d      	subs	r5, r3, #0
    446a:	d0cd      	beq.n	4408 <ticker_worker+0x2c>
					   ticks_expired -
    446c:	694b      	ldr	r3, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
    446e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    4470:	1af0      	subs	r0, r6, r3
    4472:	6963      	ldr	r3, [r4, #20]
    4474:	18c0      	adds	r0, r0, r3
			ticks_at_expire = (instance->ticks_current +
    4476:	0200      	lsls	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    4478:	690b      	ldr	r3, [r1, #16]
			ticks_at_expire = (instance->ticks_current +
    447a:	0a00      	lsrs	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    447c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    447e:	47a8      	blx	r5
    4480:	e7c2      	b.n	4408 <ticker_worker+0x2c>
	...

00004484 <ticker_job>:
{
    4484:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (instance->worker_trigger) {
    4486:	7fc2      	ldrb	r2, [r0, #31]
{
    4488:	b097      	sub	sp, #92	; 0x5c
    448a:	0007      	movs	r7, r0
	if (instance->worker_trigger) {
    448c:	2a00      	cmp	r2, #0
    448e:	d000      	beq.n	4492 <ticker_job+0xe>
    4490:	e080      	b.n	4594 <ticker_job+0x110>
	instance->job_guard = 1;
    4492:	2301      	movs	r3, #1
    4494:	7783      	strb	r3, [r0, #30]
	ticks_previous = instance->ticks_current;
    4496:	6943      	ldr	r3, [r0, #20]
    4498:	9308      	str	r3, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    449a:	7a83      	ldrb	r3, [r0, #10]
    449c:	7ac1      	ldrb	r1, [r0, #11]
    449e:	4299      	cmp	r1, r3
    44a0:	d100      	bne.n	44a4 <ticker_job+0x20>
    44a2:	e079      	b.n	4598 <ticker_job+0x114>
		first = instance->ticks_elapsed_first + 1;
    44a4:	3301      	adds	r3, #1
    44a6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    44a8:	2b02      	cmp	r3, #2
    44aa:	d100      	bne.n	44ae <ticker_job+0x2a>
			first = 0;
    44ac:	0013      	movs	r3, r2
		instance->ticks_elapsed_first = first;
    44ae:	72bb      	strb	r3, [r7, #10]
		ticks_elapsed =
    44b0:	3302      	adds	r3, #2
    44b2:	009b      	lsls	r3, r3, #2
    44b4:	18fb      	adds	r3, r7, r3
    44b6:	685b      	ldr	r3, [r3, #4]
    44b8:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    44ba:	9a00      	ldr	r2, [sp, #0]
    44bc:	9b08      	ldr	r3, [sp, #32]
    44be:	189b      	adds	r3, r3, r2
		instance->ticks_current &= 0x00FFFFFF;
    44c0:	021b      	lsls	r3, r3, #8
    44c2:	0a1b      	lsrs	r3, r3, #8
    44c4:	617b      	str	r3, [r7, #20]
		flag_elapsed = 1;
    44c6:	2301      	movs	r3, #1
    44c8:	9303      	str	r3, [sp, #12]
	ticker_id_old_head = instance->ticker_id_head;
    44ca:	7f7b      	ldrb	r3, [r7, #29]
    44cc:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    44ce:	683b      	ldr	r3, [r7, #0]
    44d0:	930d      	str	r3, [sp, #52]	; 0x34
	users = &instance->user[0];
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	930e      	str	r3, [sp, #56]	; 0x38
    44d6:	7a7b      	ldrb	r3, [r7, #9]
    44d8:	3b01      	subs	r3, #1
    44da:	b2db      	uxtb	r3, r3
    44dc:	9304      	str	r3, [sp, #16]
	pending = 0;
    44de:	2300      	movs	r3, #0
    44e0:	930c      	str	r3, [sp, #48]	; 0x30
	insert_head = TICKER_NULL;
    44e2:	33ff      	adds	r3, #255	; 0xff
    44e4:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    44e6:	9b04      	ldr	r3, [sp, #16]
    44e8:	2bff      	cmp	r3, #255	; 0xff
    44ea:	d158      	bne.n	459e <ticker_job+0x11a>
	if (instance->ticker_id_head != ticker_id_old_head) {
    44ec:	7f7b      	ldrb	r3, [r7, #29]
    44ee:	9a05      	ldr	r2, [sp, #20]
    44f0:	1a9b      	subs	r3, r3, r2
    44f2:	1e5a      	subs	r2, r3, #1
    44f4:	4193      	sbcs	r3, r2
	flag_compare_update = 0;
    44f6:	b2db      	uxtb	r3, r3
    44f8:	930b      	str	r3, [sp, #44]	; 0x2c
	if (flag_elapsed) {
    44fa:	9b03      	ldr	r3, [sp, #12]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d016      	beq.n	452e <ticker_job+0xaa>
	node = &instance->node[0];
    4500:	683b      	ldr	r3, [r7, #0]
    4502:	9307      	str	r3, [sp, #28]
	ticks_expired = 0;
    4504:	2300      	movs	r3, #0
    4506:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    4508:	7f7e      	ldrb	r6, [r7, #29]
    450a:	2eff      	cmp	r6, #255	; 0xff
    450c:	d00a      	beq.n	4524 <ticker_job+0xa0>
		ticker = &node[id_expired];
    450e:	2428      	movs	r4, #40	; 0x28
    4510:	4374      	muls	r4, r6
    4512:	9b07      	ldr	r3, [sp, #28]
    4514:	191c      	adds	r4, r3, r4
		ticks_to_expire = ticker->ticks_to_expire;
    4516:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    4518:	9b00      	ldr	r3, [sp, #0]
    451a:	429d      	cmp	r5, r3
    451c:	d800      	bhi.n	4520 <ticker_job+0x9c>
    451e:	e121      	b.n	4764 <ticker_job+0x2e0>
			ticker->ticks_to_expire -= ticks_elapsed;
    4520:	1aed      	subs	r5, r5, r3
    4522:	60a5      	str	r5, [r4, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
    4524:	9b05      	ldr	r3, [sp, #20]
    4526:	42b3      	cmp	r3, r6
    4528:	d001      	beq.n	452e <ticker_job+0xaa>
			flag_compare_update = 1;
    452a:	9b03      	ldr	r3, [sp, #12]
    452c:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->node[0];
    452e:	683b      	ldr	r3, [r7, #0]
    4530:	930e      	str	r3, [sp, #56]	; 0x38
	users = &instance->user[0];
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	9312      	str	r3, [sp, #72]	; 0x48
    4536:	7a7b      	ldrb	r3, [r7, #9]
    4538:	3b01      	subs	r3, #1
    453a:	b2db      	uxtb	r3, r3
    453c:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    453e:	9b06      	ldr	r3, [sp, #24]
    4540:	2bff      	cmp	r3, #255	; 0xff
    4542:	d000      	beq.n	4546 <ticker_job+0xc2>
    4544:	e159      	b.n	47fa <ticker_job+0x376>
	if (instance->ticker_id_head != ticker_id_old_head) {
    4546:	7f7b      	ldrb	r3, [r7, #29]
    4548:	9a05      	ldr	r2, [sp, #20]
    454a:	4293      	cmp	r3, r2
    454c:	d000      	beq.n	4550 <ticker_job+0xcc>
    454e:	e321      	b.n	4b94 <ticker_job+0x710>
	if (!pending) {
    4550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4552:	2b00      	cmp	r3, #0
    4554:	d107      	bne.n	4566 <ticker_job+0xe2>
	users = &instance->user[0];
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	9303      	str	r3, [sp, #12]
    455a:	7a7b      	ldrb	r3, [r7, #9]
    455c:	3b01      	subs	r3, #1
    455e:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    4560:	2dff      	cmp	r5, #255	; 0xff
    4562:	d000      	beq.n	4566 <ticker_job+0xe2>
    4564:	e287      	b.n	4a76 <ticker_job+0x5f2>
	instance->job_guard = 0;
    4566:	2300      	movs	r3, #0
    4568:	77bb      	strb	r3, [r7, #30]
	if (flag_compare_update) {
    456a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    456c:	2b00      	cmp	r3, #0
    456e:	d008      	beq.n	4582 <ticker_job+0xfe>
	if (instance->ticker_id_head == TICKER_NULL) {
    4570:	7f7b      	ldrb	r3, [r7, #29]
    4572:	2bff      	cmp	r3, #255	; 0xff
    4574:	d000      	beq.n	4578 <ticker_job+0xf4>
    4576:	e2d3      	b.n	4b20 <ticker_job+0x69c>
		if (cntr_stop() == 0) {
    4578:	f005 fdc2 	bl	a100 <cntr_stop>
    457c:	2800      	cmp	r0, #0
    457e:	d100      	bne.n	4582 <ticker_job+0xfe>
			instance->ticks_slot_previous = 0;
    4580:	61b8      	str	r0, [r7, #24]
	if (instance->worker_trigger) {
    4582:	7ffb      	ldrb	r3, [r7, #31]
    4584:	2b00      	cmp	r3, #0
    4586:	d005      	beq.n	4594 <ticker_job+0x110>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    4588:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    458a:	003b      	movs	r3, r7
    458c:	2201      	movs	r2, #1
    458e:	2103      	movs	r1, #3
    4590:	2004      	movs	r0, #4
    4592:	47a0      	blx	r4
}
    4594:	b017      	add	sp, #92	; 0x5c
    4596:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_elapsed = 0;
    4598:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    459a:	9200      	str	r2, [sp, #0]
    459c:	e795      	b.n	44ca <ticker_job+0x46>
		user = &users[count_user];
    459e:	9b04      	ldr	r3, [sp, #16]
    45a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    45a2:	00db      	lsls	r3, r3, #3
    45a4:	18d3      	adds	r3, r2, r3
    45a6:	9302      	str	r3, [sp, #8]
		user_ops = &user->user_op[0];
    45a8:	685b      	ldr	r3, [r3, #4]
    45aa:	930f      	str	r3, [sp, #60]	; 0x3c
		while (user->middle != user->last) {
    45ac:	9b02      	ldr	r3, [sp, #8]
    45ae:	78da      	ldrb	r2, [r3, #3]
    45b0:	9b02      	ldr	r3, [sp, #8]
    45b2:	789e      	ldrb	r6, [r3, #2]
    45b4:	4296      	cmp	r6, r2
    45b6:	d100      	bne.n	45ba <ticker_job+0x136>
    45b8:	e0cf      	b.n	475a <ticker_job+0x2d6>
			user_op = &user_ops[user->middle];
    45ba:	2530      	movs	r5, #48	; 0x30
    45bc:	4375      	muls	r5, r6
    45be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			if (middle == user->count_user_op) {
    45c0:	9902      	ldr	r1, [sp, #8]
			user_op = &user_ops[user->middle];
    45c2:	195d      	adds	r5, r3, r5
			if (middle == user->count_user_op) {
    45c4:	7809      	ldrb	r1, [r1, #0]
			middle = user->middle + 1;
    45c6:	1c73      	adds	r3, r6, #1
    45c8:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    45ca:	4299      	cmp	r1, r3
    45cc:	d100      	bne.n	45d0 <ticker_job+0x14c>
				middle = 0;
    45ce:	2300      	movs	r3, #0
			user->middle = middle;
    45d0:	9902      	ldr	r1, [sp, #8]
    45d2:	708b      	strb	r3, [r1, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    45d4:	782b      	ldrb	r3, [r5, #0]
    45d6:	2b03      	cmp	r3, #3
    45d8:	d9ea      	bls.n	45b0 <ticker_job+0x12c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    45da:	2b05      	cmp	r3, #5
    45dc:	d816      	bhi.n	460c <ticker_job+0x188>
			ticker = &node[user_op->id];
    45de:	2428      	movs	r4, #40	; 0x28
    45e0:	7869      	ldrb	r1, [r5, #1]
    45e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    45e4:	434c      	muls	r4, r1
    45e6:	1914      	adds	r4, r2, r4
			state = (ticker->req - ticker->ack) & 0xff;
    45e8:	7862      	ldrb	r2, [r4, #1]
    45ea:	78a0      	ldrb	r0, [r4, #2]
    45ec:	1a12      	subs	r2, r2, r0
    45ee:	b2d2      	uxtb	r2, r2
    45f0:	9206      	str	r2, [sp, #24]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    45f2:	2a00      	cmp	r2, #0
    45f4:	d00a      	beq.n	460c <ticker_job+0x188>
			    (state == 0) ||
    45f6:	2b04      	cmp	r3, #4
    45f8:	d10d      	bne.n	4616 <ticker_job+0x192>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    45fa:	686b      	ldr	r3, [r5, #4]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d10a      	bne.n	4616 <ticker_job+0x192>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    4600:	68ab      	ldr	r3, [r5, #8]
    4602:	2b00      	cmp	r3, #0
    4604:	d107      	bne.n	4616 <ticker_job+0x192>
			     (user_op->params.update.lazy == 0) &&
    4606:	68eb      	ldr	r3, [r5, #12]
    4608:	021b      	lsls	r3, r3, #8
    460a:	d104      	bne.n	4616 <ticker_job+0x192>
				ticker_job_op_cb(user_op,
    460c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    460e:	0028      	movs	r0, r5
    4610:	f7ff fed8 	bl	43c4 <ticker_job_op_cb>
    4614:	e7ca      	b.n	45ac <ticker_job+0x128>
			if (state == 1) {
    4616:	9b06      	ldr	r3, [sp, #24]
    4618:	2b01      	cmp	r3, #1
    461a:	d000      	beq.n	461e <ticker_job+0x19a>
    461c:	e093      	b.n	4746 <ticker_job+0x2c2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    461e:	0038      	movs	r0, r7
    4620:	f7ff fe8b 	bl	433a <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4624:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4626:	0006      	movs	r6, r0
    4628:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    462a:	2b04      	cmp	r3, #4
    462c:	d000      	beq.n	4630 <ticker_job+0x1ac>
    462e:	e07f      	b.n	4730 <ticker_job+0x2ac>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    4630:	697b      	ldr	r3, [r7, #20]
    4632:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    4634:	f005 fd7a 	bl	a12c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4638:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    463a:	900a      	str	r0, [sp, #40]	; 0x28
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    463c:	1a80      	subs	r0, r0, r2
    463e:	0200      	lsls	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4640:	9b00      	ldr	r3, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4642:	0a00      	lsrs	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4644:	18c0      	adds	r0, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
    4646:	4286      	cmp	r6, r0
    4648:	d93a      	bls.n	46c0 <ticker_job+0x23c>
		ticks_to_expire -= ticks_elapsed;
    464a:	1a30      	subs	r0, r6, r0
	if ((ticker->ticks_periodic != 0) &&
    464c:	6863      	ldr	r3, [r4, #4]
    464e:	469c      	mov	ip, r3
    4650:	2b00      	cmp	r3, #0
    4652:	d012      	beq.n	467a <ticker_job+0x1f6>
	    (user_op->params.update.lazy != 0)) {
    4654:	89ab      	ldrh	r3, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    4656:	2b00      	cmp	r3, #0
    4658:	d00f      	beq.n	467a <ticker_job+0x1f6>
		user_op->params.update.lazy--;
    465a:	3b01      	subs	r3, #1
    465c:	b29b      	uxth	r3, r3
    465e:	9307      	str	r3, [sp, #28]
    4660:	466b      	mov	r3, sp
    4662:	8b9b      	ldrh	r3, [r3, #28]
    4664:	81ab      	strh	r3, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    4666:	4584      	cmp	ip, r0
    4668:	d330      	bcc.n	46cc <ticker_job+0x248>
	if ((ticker->remainder_current < BIT(31)) &&
    466a:	4ed3      	ldr	r6, [pc, #844]	; (49b8 <ticker_job+0x534>)
		while (ticker->lazy_current < user_op->params.update.lazy) {
    466c:	8be1      	ldrh	r1, [r4, #30]
    466e:	9b07      	ldr	r3, [sp, #28]
    4670:	428b      	cmp	r3, r1
    4672:	d848      	bhi.n	4706 <ticker_job+0x282>
		ticker->lazy_periodic = user_op->params.update.lazy;
    4674:	466b      	mov	r3, sp
    4676:	8b9b      	ldrh	r3, [r3, #28]
    4678:	83a3      	strh	r3, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    467a:	88ab      	ldrh	r3, [r5, #4]
	ticker->ticks_to_expire_minus +=
    467c:	6962      	ldr	r2, [r4, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    467e:	1818      	adds	r0, r3, r0
    4680:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    4682:	88eb      	ldrh	r3, [r5, #6]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    4684:	9909      	ldr	r1, [sp, #36]	; 0x24
	ticker->ticks_to_expire_minus +=
    4686:	18d3      	adds	r3, r2, r3
    4688:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    468a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    468c:	0020      	movs	r0, r4
    468e:	f7ff fe7c 	bl	438a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    4692:	69a2      	ldr	r2, [r4, #24]
    4694:	892b      	ldrh	r3, [r5, #8]
    4696:	189b      	adds	r3, r3, r2
    4698:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    469a:	896a      	ldrh	r2, [r5, #10]
    469c:	4293      	cmp	r3, r2
    469e:	d945      	bls.n	472c <ticker_job+0x2a8>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    46a0:	1a9b      	subs	r3, r3, r2
		ticker->ticks_slot = 0;
    46a2:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    46a4:	7bab      	ldrb	r3, [r5, #14]
    46a6:	2b00      	cmp	r3, #0
    46a8:	d000      	beq.n	46ac <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    46aa:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    46ac:	466b      	mov	r3, sp
    46ae:	791b      	ldrb	r3, [r3, #4]
    46b0:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    46b2:	786b      	ldrb	r3, [r5, #1]
    46b4:	9301      	str	r3, [sp, #4]
		ticker->req++;
    46b6:	7863      	ldrb	r3, [r4, #1]
    46b8:	3301      	adds	r3, #1
    46ba:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    46bc:	2100      	movs	r1, #0
    46be:	e7a6      	b.n	460e <ticker_job+0x18a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    46c0:	6963      	ldr	r3, [r4, #20]
    46c2:	1b9e      	subs	r6, r3, r6
    46c4:	1830      	adds	r0, r6, r0
    46c6:	6160      	str	r0, [r4, #20]
		ticks_to_expire = 0;
    46c8:	2000      	movs	r0, #0
    46ca:	e7bf      	b.n	464c <ticker_job+0x1c8>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    46cc:	8be3      	ldrh	r3, [r4, #30]
    46ce:	930b      	str	r3, [sp, #44]	; 0x2c
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    46d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    46d2:	9b07      	ldr	r3, [sp, #28]
    46d4:	4293      	cmp	r3, r2
    46d6:	d2c8      	bcs.n	466a <ticker_job+0x1e6>
	if ((ticker->remainder_current >= BIT(31)) ||
    46d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    46da:	49b8      	ldr	r1, [pc, #736]	; (49bc <ticker_job+0x538>)
    46dc:	1871      	adds	r1, r6, r1
    46de:	000b      	movs	r3, r1
    46e0:	001a      	movs	r2, r3
    46e2:	4bb5      	ldr	r3, [pc, #724]	; (49b8 <ticker_job+0x534>)
	u8_t decrement = 0;
    46e4:	2100      	movs	r1, #0
	if ((ticker->remainder_current >= BIT(31)) ||
    46e6:	429a      	cmp	r2, r3
    46e8:	d903      	bls.n	46f2 <ticker_job+0x26e>
		ticker->remainder_current += 30517578UL;
    46ea:	4bb5      	ldr	r3, [pc, #724]	; (49c0 <ticker_job+0x53c>)
		decrement++;
    46ec:	9906      	ldr	r1, [sp, #24]
		ticker->remainder_current += 30517578UL;
    46ee:	18f6      	adds	r6, r6, r3
    46f0:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    46f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    46f4:	6a26      	ldr	r6, [r4, #32]
			ticker->lazy_current--;
    46f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	ticker->remainder_current -= ticker->remainder_periodic;
    46f8:	1b9e      	subs	r6, r3, r6
			ticks_to_expire -= ticker->ticks_periodic +
    46fa:	4461      	add	r1, ip
			ticker->lazy_current--;
    46fc:	3a01      	subs	r2, #1
	ticker->remainder_current -= ticker->remainder_periodic;
    46fe:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    4700:	1a40      	subs	r0, r0, r1
			ticker->lazy_current--;
    4702:	83e2      	strh	r2, [r4, #30]
    4704:	e7af      	b.n	4666 <ticker_job+0x1e2>
	ticker->remainder_current += ticker->remainder_periodic;
    4706:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4708:	6a22      	ldr	r2, [r4, #32]
    470a:	189a      	adds	r2, r3, r2
	if ((ticker->remainder_current < BIT(31)) &&
    470c:	4bab      	ldr	r3, [pc, #684]	; (49bc <ticker_job+0x538>)
    470e:	18d3      	adds	r3, r2, r3
    4710:	42b3      	cmp	r3, r6
    4712:	d906      	bls.n	4722 <ticker_job+0x29e>
	ticker->remainder_current += ticker->remainder_periodic;
    4714:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    4716:	2200      	movs	r2, #0
			ticks_to_expire += ticker->ticks_periodic +
    4718:	4462      	add	r2, ip
			ticker->lazy_current++;
    471a:	3101      	adds	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
    471c:	1880      	adds	r0, r0, r2
			ticker->lazy_current++;
    471e:	83e1      	strh	r1, [r4, #30]
    4720:	e7a4      	b.n	466c <ticker_job+0x1e8>
		ticker->remainder_current -= 30517578UL;
    4722:	4ba8      	ldr	r3, [pc, #672]	; (49c4 <ticker_job+0x540>)
    4724:	18d2      	adds	r2, r2, r3
    4726:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    4728:	9a06      	ldr	r2, [sp, #24]
    472a:	e7f5      	b.n	4718 <ticker_job+0x294>
		ticker->ticks_slot = 0;
    472c:	2300      	movs	r3, #0
    472e:	e7b8      	b.n	46a2 <ticker_job+0x21e>
		ticker->req = ticker->ack;
    4730:	78a3      	ldrb	r3, [r4, #2]
    4732:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    4734:	7f3a      	ldrb	r2, [r7, #28]
    4736:	786b      	ldrb	r3, [r5, #1]
    4738:	429a      	cmp	r2, r3
    473a:	d1bf      	bne.n	46bc <ticker_job+0x238>
			instance->ticker_id_slot_previous = TICKER_NULL;
    473c:	23ff      	movs	r3, #255	; 0xff
    473e:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    4740:	2300      	movs	r3, #0
    4742:	61bb      	str	r3, [r7, #24]
    4744:	e7ba      	b.n	46bc <ticker_job+0x238>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    4746:	2104      	movs	r1, #4
    4748:	003b      	movs	r3, r7
    474a:	2201      	movs	r2, #1
    474c:	0008      	movs	r0, r1
    474e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    4750:	47a0      	blx	r4
				user->middle = prev;
    4752:	9b02      	ldr	r3, [sp, #8]
    4754:	709e      	strb	r6, [r3, #2]
				pending = 1;
    4756:	2301      	movs	r3, #1
    4758:	930c      	str	r3, [sp, #48]	; 0x30
    475a:	9b04      	ldr	r3, [sp, #16]
    475c:	3b01      	subs	r3, #1
    475e:	b2db      	uxtb	r3, r3
    4760:	9304      	str	r3, [sp, #16]
    4762:	e6c0      	b.n	44e6 <ticker_job+0x62>
		ticks_expired += ticks_to_expire;
    4764:	9b02      	ldr	r3, [sp, #8]
    4766:	195b      	adds	r3, r3, r5
    4768:	9302      	str	r3, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    476a:	69bb      	ldr	r3, [r7, #24]
    476c:	429d      	cmp	r5, r3
    476e:	d237      	bcs.n	47e0 <ticker_job+0x35c>
			instance->ticks_slot_previous -= ticks_to_expire;
    4770:	1b5b      	subs	r3, r3, r5
			instance->ticks_slot_previous = 0;
    4772:	61bb      	str	r3, [r7, #24]
		if (ticker->ticks_slot != 0) {
    4774:	69a3      	ldr	r3, [r4, #24]
    4776:	2b00      	cmp	r3, #0
    4778:	d001      	beq.n	477e <ticker_job+0x2fa>
			instance->ticker_id_slot_previous = id_expired;
    477a:	773e      	strb	r6, [r7, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    477c:	61bb      	str	r3, [r7, #24]
		ticker->ticks_to_expire = 0;
    477e:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    4780:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0;
    4782:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    4784:	777b      	strb	r3, [r7, #29]
		if (ticker->ticks_periodic != 0) {
    4786:	6860      	ldr	r0, [r4, #4]
    4788:	4290      	cmp	r0, r2
    478a:	d032      	beq.n	47f2 <ticker_job+0x36e>
    478c:	8ba3      	ldrh	r3, [r4, #28]
    478e:	9306      	str	r3, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
    4790:	4b89      	ldr	r3, [pc, #548]	; (49b8 <ticker_job+0x534>)
    4792:	469c      	mov	ip, r3
	ticker->remainder_current += ticker->remainder_periodic;
    4794:	6a21      	ldr	r1, [r4, #32]
    4796:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4798:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    479a:	4988      	ldr	r1, [pc, #544]	; (49bc <ticker_job+0x538>)
    479c:	1859      	adds	r1, r3, r1
    479e:	4561      	cmp	r1, ip
    47a0:	d922      	bls.n	47e8 <ticker_job+0x364>
	ticker->remainder_current += ticker->remainder_periodic;
    47a2:	6263      	str	r3, [r4, #36]	; 0x24
	return 0;
    47a4:	2300      	movs	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    47a6:	181b      	adds	r3, r3, r0
    47a8:	18d2      	adds	r2, r2, r3
			while (count--) {
    47aa:	9b06      	ldr	r3, [sp, #24]
    47ac:	3b01      	subs	r3, #1
    47ae:	9306      	str	r3, [sp, #24]
    47b0:	d2f0      	bcs.n	4794 <ticker_job+0x310>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    47b2:	9b08      	ldr	r3, [sp, #32]
			ticker->ticks_to_expire = ticks_to_expire;
    47b4:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    47b6:	9a02      	ldr	r2, [sp, #8]
    47b8:	6979      	ldr	r1, [r7, #20]
    47ba:	189a      	adds	r2, r3, r2
    47bc:	0020      	movs	r0, r4
    47be:	f7ff fde4 	bl	438a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    47c2:	8ba3      	ldrh	r3, [r4, #28]
    47c4:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    47c6:	2300      	movs	r3, #0
    47c8:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    47ca:	466b      	mov	r3, sp
    47cc:	791b      	ldrb	r3, [r3, #4]
    47ce:	7023      	strb	r3, [r4, #0]
			ticker->req++;
    47d0:	7863      	ldrb	r3, [r4, #1]
    47d2:	3301      	adds	r3, #1
    47d4:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    47d6:	9b00      	ldr	r3, [sp, #0]
    47d8:	9601      	str	r6, [sp, #4]
    47da:	1b5b      	subs	r3, r3, r5
    47dc:	9300      	str	r3, [sp, #0]
    47de:	e693      	b.n	4508 <ticker_job+0x84>
			instance->ticker_id_slot_previous = TICKER_NULL;
    47e0:	23ff      	movs	r3, #255	; 0xff
    47e2:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    47e4:	2300      	movs	r3, #0
    47e6:	e7c4      	b.n	4772 <ticker_job+0x2ee>
		ticker->remainder_current -= 30517578UL;
    47e8:	4976      	ldr	r1, [pc, #472]	; (49c4 <ticker_job+0x540>)
    47ea:	185b      	adds	r3, r3, r1
    47ec:	6263      	str	r3, [r4, #36]	; 0x24
		return 1;
    47ee:	9b03      	ldr	r3, [sp, #12]
    47f0:	e7d9      	b.n	47a6 <ticker_job+0x322>
			ticker->req = ticker->ack;
    47f2:	78a3      	ldrb	r3, [r4, #2]
    47f4:	9e01      	ldr	r6, [sp, #4]
    47f6:	7063      	strb	r3, [r4, #1]
    47f8:	e7ed      	b.n	47d6 <ticker_job+0x352>
		user = &users[count_user];
    47fa:	9b06      	ldr	r3, [sp, #24]
    47fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    47fe:	00db      	lsls	r3, r3, #3
    4800:	18d3      	adds	r3, r2, r3
    4802:	9307      	str	r3, [sp, #28]
		user_ops = (void *)&user->user_op[0];
    4804:	685b      	ldr	r3, [r3, #4]
    4806:	9313      	str	r3, [sp, #76]	; 0x4c
		user_ops_first = user->first;
    4808:	9b07      	ldr	r3, [sp, #28]
    480a:	785b      	ldrb	r3, [r3, #1]
    480c:	9303      	str	r3, [sp, #12]
		while ((insert_head != TICKER_NULL) ||
    480e:	9b01      	ldr	r3, [sp, #4]
    4810:	2bff      	cmp	r3, #255	; 0xff
    4812:	d100      	bne.n	4816 <ticker_job+0x392>
    4814:	e083      	b.n	491e <ticker_job+0x49a>
				ticker = &node[id_insert];
    4816:	2428      	movs	r4, #40	; 0x28
    4818:	9b01      	ldr	r3, [sp, #4]
    481a:	435c      	muls	r4, r3
    481c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    481e:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    4820:	9b01      	ldr	r3, [sp, #4]
    4822:	9302      	str	r3, [sp, #8]
    4824:	7823      	ldrb	r3, [r4, #0]
    4826:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    4828:	2300      	movs	r3, #0
    482a:	9300      	str	r3, [sp, #0]
	struct ticker_node *node = &instance->node[0];
    482c:	683b      	ldr	r3, [r7, #0]
		skip = 0;
    482e:	2100      	movs	r1, #0
	struct ticker_node *node = &instance->node[0];
    4830:	9314      	str	r3, [sp, #80]	; 0x50
	ticker->next = TICKER_NULL;
    4832:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4834:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    4836:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4838:	8be3      	ldrh	r3, [r4, #30]
		skip = 0;
    483a:	910f      	str	r1, [sp, #60]	; 0x3c
	if (ticker->lazy_current > ticker->lazy_periodic) {
    483c:	4293      	cmp	r3, r2
    483e:	d902      	bls.n	4846 <ticker_job+0x3c2>
		skip = ticker->lazy_current -
    4840:	1a9b      	subs	r3, r3, r2
    4842:	b29b      	uxth	r3, r3
    4844:	930f      	str	r3, [sp, #60]	; 0x3c
	ticker_new = &node[id];
    4846:	2328      	movs	r3, #40	; 0x28
    4848:	9a02      	ldr	r2, [sp, #8]
    484a:	4353      	muls	r3, r2
    484c:	9315      	str	r3, [sp, #84]	; 0x54
	node = &instance->node[0];
    484e:	683b      	ldr	r3, [r7, #0]
	ticks_slot_previous = instance->ticks_slot_previous;
    4850:	69ba      	ldr	r2, [r7, #24]
	node = &instance->node[0];
    4852:	469c      	mov	ip, r3
	ticker_new = &node[id];
    4854:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4856:	4463      	add	r3, ip
    4858:	9308      	str	r3, [sp, #32]
	ticks_to_expire = ticker_new->ticks_to_expire;
    485a:	689e      	ldr	r6, [r3, #8]
	current = instance->ticker_id_head;
    485c:	7f7b      	ldrb	r3, [r7, #29]
	ticks_slot_previous = instance->ticks_slot_previous;
    485e:	9209      	str	r2, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    4860:	22ff      	movs	r2, #255	; 0xff
	previous = current;
    4862:	930d      	str	r3, [sp, #52]	; 0x34
	collide = ticker_id_slot_previous = TICKER_NULL;
    4864:	920a      	str	r2, [sp, #40]	; 0x28
	while ((current != TICKER_NULL) &&
    4866:	2bff      	cmp	r3, #255	; 0xff
    4868:	d006      	beq.n	4878 <ticker_job+0x3f4>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    486a:	2228      	movs	r2, #40	; 0x28
    486c:	435a      	muls	r2, r3
    486e:	4462      	add	r2, ip
		(ticks_to_expire_current =
    4870:	6890      	ldr	r0, [r2, #8]
	while ((current != TICKER_NULL) &&
    4872:	4286      	cmp	r6, r0
    4874:	d900      	bls.n	4878 <ticker_job+0x3f4>
    4876:	e0ab      	b.n	49d0 <ticker_job+0x54c>
	collide = ticker_by_slot_get(&node[0], current,
    4878:	001d      	movs	r5, r3
				     ticks_to_expire + ticker_new->ticks_slot);
    487a:	9a08      	ldr	r2, [sp, #32]
    487c:	6992      	ldr	r2, [r2, #24]
    487e:	9210      	str	r2, [sp, #64]	; 0x40
	collide = ticker_by_slot_get(&node[0], current,
    4880:	18b0      	adds	r0, r6, r2
	while (ticker_id_head != TICKER_NULL) {
    4882:	2dff      	cmp	r5, #255	; 0xff
    4884:	d000      	beq.n	4888 <ticker_job+0x404>
    4886:	e0b1      	b.n	49ec <ticker_job+0x568>
	if ((ticker_new->ticks_slot == 0) ||
    4888:	9a10      	ldr	r2, [sp, #64]	; 0x40
    488a:	2a00      	cmp	r2, #0
    488c:	d006      	beq.n	489c <ticker_job+0x418>
    488e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4890:	4296      	cmp	r6, r2
    4892:	d200      	bcs.n	4896 <ticker_job+0x412>
    4894:	e0c3      	b.n	4a1e <ticker_job+0x59a>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    4896:	2dff      	cmp	r5, #255	; 0xff
    4898:	d000      	beq.n	489c <ticker_job+0x418>
    489a:	e181      	b.n	4ba0 <ticker_job+0x71c>
		ticker_new->ticks_to_expire = ticks_to_expire;
    489c:	9a08      	ldr	r2, [sp, #32]
    489e:	6096      	str	r6, [r2, #8]
		ticker_new->next = current;
    48a0:	7013      	strb	r3, [r2, #0]
		if (previous == current) {
    48a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    48a4:	4293      	cmp	r3, r2
    48a6:	d000      	beq.n	48aa <ticker_job+0x426>
    48a8:	e0b1      	b.n	4a0e <ticker_job+0x58a>
			instance->ticker_id_head = id;
    48aa:	466a      	mov	r2, sp
    48ac:	7a12      	ldrb	r2, [r2, #8]
    48ae:	777a      	strb	r2, [r7, #29]
		if (current != TICKER_NULL) {
    48b0:	2bff      	cmp	r3, #255	; 0xff
    48b2:	d005      	beq.n	48c0 <ticker_job+0x43c>
			node[current].ticks_to_expire -= ticks_to_expire;
    48b4:	2228      	movs	r2, #40	; 0x28
    48b6:	4353      	muls	r3, r2
    48b8:	4463      	add	r3, ip
    48ba:	689a      	ldr	r2, [r3, #8]
    48bc:	1b92      	subs	r2, r2, r6
    48be:	609a      	str	r2, [r3, #8]
	return TICKER_STATUS_SUCCESS;
    48c0:	2100      	movs	r1, #0
	ticker->req = ticker->ack + 1;
    48c2:	78a3      	ldrb	r3, [r4, #2]
    48c4:	3301      	adds	r3, #1
    48c6:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    48c8:	9b00      	ldr	r3, [sp, #0]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d09f      	beq.n	480e <ticker_job+0x38a>
				ticker_job_op_cb(user_op, status);
    48ce:	0018      	movs	r0, r3
    48d0:	f7ff fd78 	bl	43c4 <ticker_job_op_cb>
    48d4:	e79b      	b.n	480e <ticker_job+0x38a>
				user_op = &user_ops[user_ops_first];
    48d6:	2330      	movs	r3, #48	; 0x30
    48d8:	9a03      	ldr	r2, [sp, #12]
    48da:	4353      	muls	r3, r2
    48dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    48de:	18d3      	adds	r3, r2, r3
    48e0:	9300      	str	r3, [sp, #0]
				first = user_ops_first + 1;
    48e2:	9b03      	ldr	r3, [sp, #12]
    48e4:	3301      	adds	r3, #1
    48e6:	b2db      	uxtb	r3, r3
    48e8:	9303      	str	r3, [sp, #12]
				if (first == user->count_user_op) {
    48ea:	9b07      	ldr	r3, [sp, #28]
    48ec:	9a03      	ldr	r2, [sp, #12]
    48ee:	781b      	ldrb	r3, [r3, #0]
    48f0:	4293      	cmp	r3, r2
    48f2:	d101      	bne.n	48f8 <ticker_job+0x474>
					first = 0;
    48f4:	2300      	movs	r3, #0
    48f6:	9303      	str	r3, [sp, #12]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    48f8:	9b00      	ldr	r3, [sp, #0]
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	2b03      	cmp	r3, #3
    48fe:	d10e      	bne.n	491e <ticker_job+0x49a>
				ticker = &node[id_insert];
    4900:	2428      	movs	r4, #40	; 0x28
				id_insert = user_op->id;
    4902:	9b00      	ldr	r3, [sp, #0]
    4904:	785b      	ldrb	r3, [r3, #1]
				ticker = &node[id_insert];
    4906:	435c      	muls	r4, r3
				id_insert = user_op->id;
    4908:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
    490a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    490c:	191c      	adds	r4, r3, r4
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    490e:	7862      	ldrb	r2, [r4, #1]
    4910:	78a3      	ldrb	r3, [r4, #2]
    4912:	429a      	cmp	r2, r3
    4914:	d00a      	beq.n	492c <ticker_job+0x4a8>
					ticker_job_op_cb(user_op,
    4916:	2101      	movs	r1, #1
    4918:	9800      	ldr	r0, [sp, #0]
    491a:	f7ff fd53 	bl	43c4 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    491e:	9b07      	ldr	r3, [sp, #28]
    4920:	9a03      	ldr	r2, [sp, #12]
    4922:	789b      	ldrb	r3, [r3, #2]
    4924:	4293      	cmp	r3, r2
    4926:	d1d6      	bne.n	48d6 <ticker_job+0x452>
    4928:	9b06      	ldr	r3, [sp, #24]
    492a:	e605      	b.n	4538 <ticker_job+0xb4>
	ticker->ticks_to_expire_minus = 0;
    492c:	2500      	movs	r5, #0
	ticker->ticks_periodic = start->ticks_periodic;
    492e:	9b00      	ldr	r3, [sp, #0]
				ticker_job_op_start(ticker, user_op,
    4930:	6979      	ldr	r1, [r7, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    4932:	68db      	ldr	r3, [r3, #12]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    4934:	0020      	movs	r0, r4
	ticker->ticks_periodic = start->ticks_periodic;
    4936:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    4938:	9b00      	ldr	r3, [sp, #0]
    493a:	691b      	ldr	r3, [r3, #16]
    493c:	9308      	str	r3, [sp, #32]
    493e:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    4940:	9b00      	ldr	r3, [sp, #0]
    4942:	8a9b      	ldrh	r3, [r3, #20]
    4944:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    4946:	9b00      	ldr	r3, [sp, #0]
    4948:	699b      	ldr	r3, [r3, #24]
    494a:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    494c:	9b00      	ldr	r3, [sp, #0]
    494e:	69db      	ldr	r3, [r3, #28]
    4950:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    4952:	9b00      	ldr	r3, [sp, #0]
    4954:	6a1b      	ldr	r3, [r3, #32]
    4956:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    4958:	9b00      	ldr	r3, [sp, #0]
    495a:	689b      	ldr	r3, [r3, #8]
	ticker->ticks_to_expire_minus = 0;
    495c:	6165      	str	r5, [r4, #20]
	ticker->ticks_to_expire = start->ticks_first;
    495e:	9308      	str	r3, [sp, #32]
    4960:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    4962:	9b00      	ldr	r3, [sp, #0]
    4964:	685a      	ldr	r2, [r3, #4]
    4966:	f7ff fd10 	bl	438a <ticks_to_expire_prep>
	ticker->force = 1;
    496a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    496c:	6265      	str	r5, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    496e:	83e5      	strh	r5, [r4, #30]
	ticker->force = 1;
    4970:	70e3      	strb	r3, [r4, #3]
    4972:	e75b      	b.n	482c <ticker_job+0x3a8>
		if (ticker->ticks_periodic != 0) {
    4974:	6863      	ldr	r3, [r4, #4]
    4976:	2b00      	cmp	r3, #0
    4978:	d100      	bne.n	497c <ticker_job+0x4f8>
    497a:	e07a      	b.n	4a72 <ticker_job+0x5ee>
	ticker->remainder_current += ticker->remainder_periodic;
    497c:	6a21      	ldr	r1, [r4, #32]
    497e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4980:	1852      	adds	r2, r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    4982:	490e      	ldr	r1, [pc, #56]	; (49bc <ticker_job+0x538>)
    4984:	1850      	adds	r0, r2, r1
    4986:	490c      	ldr	r1, [pc, #48]	; (49b8 <ticker_job+0x534>)
    4988:	4288      	cmp	r0, r1
    498a:	d910      	bls.n	49ae <ticker_job+0x52a>
	ticker->remainder_current += ticker->remainder_periodic;
    498c:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    498e:	2200      	movs	r2, #0
			ticker->ticks_to_expire += ticker->ticks_periodic +
    4990:	68a1      	ldr	r1, [r4, #8]
    4992:	185b      	adds	r3, r3, r1
    4994:	189b      	adds	r3, r3, r2
			ticker->lazy_current++;
    4996:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    4998:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    499a:	3201      	adds	r2, #1
    499c:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    499e:	6962      	ldr	r2, [r4, #20]
    49a0:	2100      	movs	r1, #0
			if (ticker->ticks_to_expire >
    49a2:	4293      	cmp	r3, r2
    49a4:	d910      	bls.n	49c8 <ticker_job+0x544>
				ticker->ticks_to_expire -=
    49a6:	1a9b      	subs	r3, r3, r2
    49a8:	60a3      	str	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    49aa:	6161      	str	r1, [r4, #20]
    49ac:	e74f      	b.n	484e <ticker_job+0x3ca>
		ticker->remainder_current -= 30517578UL;
    49ae:	4905      	ldr	r1, [pc, #20]	; (49c4 <ticker_job+0x540>)
    49b0:	1852      	adds	r2, r2, r1
    49b2:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    49b4:	2201      	movs	r2, #1
    49b6:	e7eb      	b.n	4990 <ticker_job+0x50c>
    49b8:	7f172b59 	.word	0x7f172b59
    49bc:	ff172b5a 	.word	0xff172b5a
    49c0:	01d1a94a 	.word	0x01d1a94a
    49c4:	fe2e56b6 	.word	0xfe2e56b6
				ticker->ticks_to_expire_minus -=
    49c8:	1ad3      	subs	r3, r2, r3
    49ca:	6163      	str	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    49cc:	60a1      	str	r1, [r4, #8]
    49ce:	e73e      	b.n	484e <ticker_job+0x3ca>
		if (ticker_current->ticks_slot != 0) {
    49d0:	6995      	ldr	r5, [r2, #24]
		ticks_to_expire -= ticks_to_expire_current;
    49d2:	1a36      	subs	r6, r6, r0
		if (ticker_current->ticks_slot != 0) {
    49d4:	2d00      	cmp	r5, #0
    49d6:	d107      	bne.n	49e8 <ticker_job+0x564>
			if (ticks_slot_previous > ticks_to_expire_current) {
    49d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    49da:	4288      	cmp	r0, r1
    49dc:	d200      	bcs.n	49e0 <ticker_job+0x55c>
				ticks_slot_previous -= ticks_to_expire_current;
    49de:	1a0d      	subs	r5, r1, r0
		current = ticker_current->next;
    49e0:	930d      	str	r3, [sp, #52]	; 0x34
    49e2:	9509      	str	r5, [sp, #36]	; 0x24
    49e4:	7813      	ldrb	r3, [r2, #0]
    49e6:	e73e      	b.n	4866 <ticker_job+0x3e2>
		if (ticker_current->ticks_slot != 0) {
    49e8:	930a      	str	r3, [sp, #40]	; 0x28
    49ea:	e7f9      	b.n	49e0 <ticker_job+0x55c>
		ticker = &node[ticker_id_head];
    49ec:	2228      	movs	r2, #40	; 0x28
    49ee:	436a      	muls	r2, r5
    49f0:	4462      	add	r2, ip
		ticks_to_expire = ticker->ticks_to_expire;
    49f2:	6891      	ldr	r1, [r2, #8]
    49f4:	9111      	str	r1, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    49f6:	4281      	cmp	r1, r0
    49f8:	d207      	bcs.n	4a0a <ticker_job+0x586>
		if (ticker->ticks_slot) {
    49fa:	6991      	ldr	r1, [r2, #24]
    49fc:	2900      	cmp	r1, #0
    49fe:	d000      	beq.n	4a02 <ticker_job+0x57e>
    4a00:	e742      	b.n	4888 <ticker_job+0x404>
		ticks_slot -= ticks_to_expire;
    4a02:	9911      	ldr	r1, [sp, #68]	; 0x44
		ticker_id_head = ticker->next;
    4a04:	7815      	ldrb	r5, [r2, #0]
		ticks_slot -= ticks_to_expire;
    4a06:	1a40      	subs	r0, r0, r1
    4a08:	e73b      	b.n	4882 <ticker_job+0x3fe>
			return TICKER_NULL;
    4a0a:	9d04      	ldr	r5, [sp, #16]
    4a0c:	e73c      	b.n	4888 <ticker_job+0x404>
			node[previous].next = id;
    4a0e:	2128      	movs	r1, #40	; 0x28
    4a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4a12:	4668      	mov	r0, sp
    4a14:	434a      	muls	r2, r1
    4a16:	4661      	mov	r1, ip
    4a18:	7a00      	ldrb	r0, [r0, #8]
    4a1a:	5450      	strb	r0, [r2, r1]
    4a1c:	e748      	b.n	48b0 <ticker_job+0x42c>
	while (id_insert !=
    4a1e:	9b02      	ldr	r3, [sp, #8]
    4a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a22:	4293      	cmp	r3, r2
    4a24:	d100      	bne.n	4a28 <ticker_job+0x5a4>
    4a26:	e74b      	b.n	48c0 <ticker_job+0x43c>
		if (id_collide != TICKER_NULL) {
    4a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a2a:	2bff      	cmp	r3, #255	; 0xff
    4a2c:	d0a2      	beq.n	4974 <ticker_job+0x4f0>
    4a2e:	001d      	movs	r5, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    4a30:	2628      	movs	r6, #40	; 0x28
    4a32:	436e      	muls	r6, r5
    4a34:	9b14      	ldr	r3, [sp, #80]	; 0x50
				skip_collide = 0;
    4a36:	2200      	movs	r2, #0
			struct ticker_node *ticker_collide = &node[id_collide];
    4a38:	199e      	adds	r6, r3, r6
			if (ticker_collide->lazy_current >
    4a3a:	8bf3      	ldrh	r3, [r6, #30]
			    ticker_collide->lazy_periodic) {
    4a3c:	8bb1      	ldrh	r1, [r6, #28]
			if (ticker_collide->lazy_current >
    4a3e:	428b      	cmp	r3, r1
    4a40:	d901      	bls.n	4a46 <ticker_job+0x5c2>
				skip_collide = ticker_collide->lazy_current -
    4a42:	1a5b      	subs	r3, r3, r1
    4a44:	b29a      	uxth	r2, r3
			if (ticker_collide->ticks_periodic &&
    4a46:	6873      	ldr	r3, [r6, #4]
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d093      	beq.n	4974 <ticker_job+0x4f0>
    4a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a4e:	429a      	cmp	r2, r3
    4a50:	d890      	bhi.n	4974 <ticker_job+0x4f0>
			    skip_collide <= skip &&
    4a52:	78f2      	ldrb	r2, [r6, #3]
    4a54:	78e3      	ldrb	r3, [r4, #3]
    4a56:	429a      	cmp	r2, r3
    4a58:	d28c      	bcs.n	4974 <ticker_job+0x4f0>
					ticker_dequeue(instance, id_collide);
    4a5a:	0029      	movs	r1, r5
    4a5c:	0038      	movs	r0, r7
    4a5e:	f7ff fc6c 	bl	433a <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    4a62:	78b3      	ldrb	r3, [r6, #2]
				ticker_collide->ticks_to_expire =
    4a64:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
    4a66:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
    4a68:	466b      	mov	r3, sp
    4a6a:	791b      	ldrb	r3, [r3, #4]
    4a6c:	9501      	str	r5, [sp, #4]
    4a6e:	7033      	strb	r3, [r6, #0]
    4a70:	e6ed      	b.n	484e <ticker_job+0x3ca>
			return TICKER_STATUS_FAILURE;
    4a72:	2101      	movs	r1, #1
    4a74:	e728      	b.n	48c8 <ticker_job+0x444>
		user = &users[count_user];
    4a76:	9b03      	ldr	r3, [sp, #12]
    4a78:	00ec      	lsls	r4, r5, #3
    4a7a:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    4a7c:	6863      	ldr	r3, [r4, #4]
    4a7e:	9304      	str	r3, [sp, #16]
		while (user->first != user->last) {
    4a80:	7863      	ldrb	r3, [r4, #1]
    4a82:	78e2      	ldrb	r2, [r4, #3]
    4a84:	429a      	cmp	r2, r3
    4a86:	d102      	bne.n	4a8e <ticker_job+0x60a>
    4a88:	3d01      	subs	r5, #1
    4a8a:	b2ed      	uxtb	r5, r5
    4a8c:	e568      	b.n	4560 <ticker_job+0xdc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    4a8e:	2230      	movs	r2, #48	; 0x30
    4a90:	4353      	muls	r3, r2
    4a92:	9a04      	ldr	r2, [sp, #16]
    4a94:	18d3      	adds	r3, r2, r3
	switch (uop->op) {
    4a96:	781a      	ldrb	r2, [r3, #0]
    4a98:	2a01      	cmp	r2, #1
    4a9a:	d026      	beq.n	4aea <ticker_job+0x666>
    4a9c:	2a02      	cmp	r2, #2
    4a9e:	d12b      	bne.n	4af8 <ticker_job+0x674>
		ticker_by_next_slot_get(instance,
    4aa0:	685a      	ldr	r2, [r3, #4]
    4aa2:	68d9      	ldr	r1, [r3, #12]
    4aa4:	4694      	mov	ip, r2
    4aa6:	9100      	str	r1, [sp, #0]
	node = instance->node;
    4aa8:	6839      	ldr	r1, [r7, #0]
		ticker_by_next_slot_get(instance,
    4aaa:	689a      	ldr	r2, [r3, #8]
	node = instance->node;
    4aac:	9101      	str	r1, [sp, #4]
	_ticker_id_head = *ticker_id_head;
    4aae:	4661      	mov	r1, ip
    4ab0:	7809      	ldrb	r1, [r1, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    4ab2:	29ff      	cmp	r1, #255	; 0xff
    4ab4:	d004      	beq.n	4ac0 <ticker_job+0x63c>
    4ab6:	6810      	ldr	r0, [r2, #0]
    4ab8:	0006      	movs	r6, r0
    4aba:	6978      	ldr	r0, [r7, #20]
    4abc:	4286      	cmp	r6, r0
    4abe:	d024      	beq.n	4b0a <ticker_job+0x686>
		*ticks_current = instance->ticks_current;
    4ac0:	6978      	ldr	r0, [r7, #20]
		_ticker_id_head = instance->ticker_id_head;
    4ac2:	7f79      	ldrb	r1, [r7, #29]
		*ticks_current = instance->ticks_current;
    4ac4:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    4ac6:	2200      	movs	r2, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    4ac8:	29ff      	cmp	r1, #255	; 0xff
    4aca:	d00a      	beq.n	4ae2 <ticker_job+0x65e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    4acc:	2028      	movs	r0, #40	; 0x28
    4ace:	4348      	muls	r0, r1
    4ad0:	9e01      	ldr	r6, [sp, #4]
    4ad2:	1830      	adds	r0, r6, r0
    4ad4:	6886      	ldr	r6, [r0, #8]
    4ad6:	9602      	str	r6, [sp, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    4ad8:	6986      	ldr	r6, [r0, #24]
    4ada:	2e00      	cmp	r6, #0
    4adc:	d01c      	beq.n	4b18 <ticker_job+0x694>
		_ticks_to_expire += ticker->ticks_to_expire;
    4ade:	9802      	ldr	r0, [sp, #8]
    4ae0:	1812      	adds	r2, r2, r0
	*ticker_id_head = _ticker_id_head;
    4ae2:	4660      	mov	r0, ip
    4ae4:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    4ae6:	9900      	ldr	r1, [sp, #0]
    4ae8:	600a      	str	r2, [r1, #0]
		uop->status = TICKER_STATUS_SUCCESS;
    4aea:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    4aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    4aee:	6258      	str	r0, [r3, #36]	; 0x24
	if (fp_op_func) {
    4af0:	4282      	cmp	r2, r0
    4af2:	d001      	beq.n	4af8 <ticker_job+0x674>
		fp_op_func(uop->status, uop->op_context);
    4af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4af6:	4790      	blx	r2
			first = user->first + 1;
    4af8:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    4afa:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    4afc:	3301      	adds	r3, #1
    4afe:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    4b00:	429a      	cmp	r2, r3
    4b02:	d100      	bne.n	4b06 <ticker_job+0x682>
				first = 0;
    4b04:	2300      	movs	r3, #0
			user->first = first;
    4b06:	7063      	strb	r3, [r4, #1]
    4b08:	e7ba      	b.n	4a80 <ticker_job+0x5fc>
		ticker = &node[_ticker_id_head];
    4b0a:	2028      	movs	r0, #40	; 0x28
    4b0c:	4341      	muls	r1, r0
	_ticks_to_expire = *ticks_to_expire;
    4b0e:	9a00      	ldr	r2, [sp, #0]
		_ticker_id_head = ticker->next;
    4b10:	9801      	ldr	r0, [sp, #4]
	_ticks_to_expire = *ticks_to_expire;
    4b12:	6812      	ldr	r2, [r2, #0]
		_ticker_id_head = ticker->next;
    4b14:	5c41      	ldrb	r1, [r0, r1]
    4b16:	e7d7      	b.n	4ac8 <ticker_job+0x644>
		_ticks_to_expire += ticker->ticks_to_expire;
    4b18:	9902      	ldr	r1, [sp, #8]
    4b1a:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    4b1c:	7801      	ldrb	r1, [r0, #0]
    4b1e:	e7d3      	b.n	4ac8 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
    4b20:	9b05      	ldr	r3, [sp, #20]
    4b22:	2bff      	cmp	r3, #255	; 0xff
    4b24:	d107      	bne.n	4b36 <ticker_job+0x6b2>
		ticks_current = cntr_cnt_get();
    4b26:	f005 fb01 	bl	a12c <cntr_cnt_get>
    4b2a:	0004      	movs	r4, r0
		if (cntr_start() == 0) {
    4b2c:	f005 fad8 	bl	a0e0 <cntr_start>
    4b30:	2800      	cmp	r0, #0
    4b32:	d100      	bne.n	4b36 <ticker_job+0x6b2>
			instance->ticks_current = ticks_current;
    4b34:	617c      	str	r4, [r7, #20]
	ticks_to_expire = ticker->ticks_to_expire;
    4b36:	2328      	movs	r3, #40	; 0x28
    4b38:	260a      	movs	r6, #10
	ticker = &instance->node[instance->ticker_id_head];
    4b3a:	7f7a      	ldrb	r2, [r7, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    4b3c:	4353      	muls	r3, r2
    4b3e:	683a      	ldr	r2, [r7, #0]
    4b40:	18d3      	adds	r3, r2, r3
    4b42:	689b      	ldr	r3, [r3, #8]
    4b44:	9300      	str	r3, [sp, #0]
		ctr = cntr_cnt_get();
    4b46:	f005 faf1 	bl	a12c <cntr_cnt_get>
		cc = instance->ticks_current;
    4b4a:	697b      	ldr	r3, [r7, #20]
		       ticks_to_expire : ticks_elapsed);
    4b4c:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4b4e:	1ac4      	subs	r4, r0, r3
    4b50:	0224      	lsls	r4, r4, #8
    4b52:	0a24      	lsrs	r4, r4, #8
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    4b54:	3403      	adds	r4, #3
		ctr = cntr_cnt_get();
    4b56:	0005      	movs	r5, r0
		       ticks_to_expire : ticks_elapsed);
    4b58:	4294      	cmp	r4, r2
    4b5a:	d200      	bcs.n	4b5e <ticker_job+0x6da>
    4b5c:	0014      	movs	r4, r2
		cc += ((ticks_elapsed < ticks_to_expire) ?
    4b5e:	191c      	adds	r4, r3, r4
		cc &= 0x00FFFFFF;
    4b60:	0224      	lsls	r4, r4, #8
    4b62:	0a24      	lsrs	r4, r4, #8
		instance->trigger_set_cb(cc);
    4b64:	0020      	movs	r0, r4
    4b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b68:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    4b6a:	f005 fadf 	bl	a12c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4b6e:	1b40      	subs	r0, r0, r5
    4b70:	0200      	lsls	r0, r0, #8
    4b72:	0a00      	lsrs	r0, r0, #8
    4b74:	1b64      	subs	r4, r4, r5
    4b76:	0224      	lsls	r4, r4, #8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    4b78:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4b7a:	0a24      	lsrs	r4, r4, #8
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    4b7c:	42a0      	cmp	r0, r4
    4b7e:	d800      	bhi.n	4b82 <ticker_job+0x6fe>
    4b80:	e4ff      	b.n	4582 <ticker_job+0xfe>
    4b82:	3e01      	subs	r6, #1
		LL_ASSERT(i);
    4b84:	2e00      	cmp	r6, #0
    4b86:	d1de      	bne.n	4b46 <ticker_job+0x6c2>
    4b88:	b662      	cpsie	i
    4b8a:	2004      	movs	r0, #4
    4b8c:	df02      	svc	2
	instance->job_guard = 0;
    4b8e:	2300      	movs	r3, #0
    4b90:	77bb      	strb	r3, [r7, #30]
    4b92:	e4ed      	b.n	4570 <ticker_job+0xec>
	if (!pending) {
    4b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b96:	2b00      	cmp	r3, #0
    4b98:	d1f9      	bne.n	4b8e <ticker_job+0x70a>
		flag_compare_update = 1;
    4b9a:	2301      	movs	r3, #1
    4b9c:	930b      	str	r3, [sp, #44]	; 0x2c
    4b9e:	e4da      	b.n	4556 <ticker_job+0xd2>
	while (id_insert !=
    4ba0:	9b02      	ldr	r3, [sp, #8]
    4ba2:	42ab      	cmp	r3, r5
    4ba4:	d000      	beq.n	4ba8 <ticker_job+0x724>
    4ba6:	e743      	b.n	4a30 <ticker_job+0x5ac>
    4ba8:	e68a      	b.n	48c0 <ticker_job+0x43c>
    4baa:	46c0      	nop			; (mov r8, r8)

00004bac <ticker_init>:
{
    4bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4bae:	0006      	movs	r6, r0
	instance->count_node = count_node;
    4bb0:	272c      	movs	r7, #44	; 0x2c
{
    4bb2:	ac08      	add	r4, sp, #32
    4bb4:	cc01      	ldmia	r4!, {r0}
	instance->count_node = count_node;
    4bb6:	4377      	muls	r7, r6
{
    4bb8:	7825      	ldrb	r5, [r4, #0]
	instance->count_node = count_node;
    4bba:	4c17      	ldr	r4, [pc, #92]	; (4c18 <ticker_init+0x6c>)
{
    4bbc:	9001      	str	r0, [sp, #4]
	instance->node = node;
    4bbe:	513a      	str	r2, [r7, r4]
	instance->count_node = count_node;
    4bc0:	19e0      	adds	r0, r4, r7
		user_op_ += users[count_user].count_user_op;
    4bc2:	2730      	movs	r7, #48	; 0x30
	instance->count_node = count_node;
    4bc4:	7201      	strb	r1, [r0, #8]
	instance->user = user;
    4bc6:	9901      	ldr	r1, [sp, #4]
	instance->count_user = count_user;
    4bc8:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    4bca:	6041      	str	r1, [r0, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
    4bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
	while (count_user--) {
    4bce:	3b01      	subs	r3, #1
    4bd0:	b2db      	uxtb	r3, r3
    4bd2:	2bff      	cmp	r3, #255	; 0xff
    4bd4:	d113      	bne.n	4bfe <ticker_init+0x52>
		return TICKER_STATUS_FAILURE;
    4bd6:	2001      	movs	r0, #1
	if (count_op) {
    4bd8:	2d00      	cmp	r5, #0
    4bda:	d10f      	bne.n	4bfc <ticker_init+0x50>
	instance->caller_id_get_cb = caller_id_get_cb;
    4bdc:	302b      	adds	r0, #43	; 0x2b
    4bde:	4370      	muls	r0, r6
    4be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4be2:	1820      	adds	r0, r4, r0
    4be4:	6202      	str	r2, [r0, #32]
	instance->sched_cb = sched_cb;
    4be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	instance->ticker_id_head = TICKER_NULL;
    4be8:	7743      	strb	r3, [r0, #29]
	instance->sched_cb = sched_cb;
    4bea:	6242      	str	r2, [r0, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    4bec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	instance->ticker_id_slot_previous = TICKER_NULL;
    4bee:	7703      	strb	r3, [r0, #28]
	instance->trigger_set_cb = trigger_set_cb;
    4bf0:	6282      	str	r2, [r0, #40]	; 0x28
	instance->ticks_slot_previous = 0;
    4bf2:	6185      	str	r5, [r0, #24]
	instance->ticks_current = 0;
    4bf4:	6145      	str	r5, [r0, #20]
	instance->ticks_elapsed_first = 0;
    4bf6:	7285      	strb	r5, [r0, #10]
	instance->ticks_elapsed_last = 0;
    4bf8:	72c5      	strb	r5, [r0, #11]
	return TICKER_STATUS_SUCCESS;
    4bfa:	0028      	movs	r0, r5
}
    4bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    4bfe:	9801      	ldr	r0, [sp, #4]
    4c00:	00da      	lsls	r2, r3, #3
    4c02:	1882      	adds	r2, r0, r2
		user_op_ += users[count_user].count_user_op;
    4c04:	0038      	movs	r0, r7
		users[count_user].user_op = user_op_;
    4c06:	6051      	str	r1, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    4c08:	7812      	ldrb	r2, [r2, #0]
    4c0a:	4350      	muls	r0, r2
    4c0c:	4684      	mov	ip, r0
		count_op -= users[count_user].count_user_op;
    4c0e:	1aad      	subs	r5, r5, r2
		user_op_ += users[count_user].count_user_op;
    4c10:	4461      	add	r1, ip
		count_op -= users[count_user].count_user_op;
    4c12:	b2ed      	uxtb	r5, r5
    4c14:	e7db      	b.n	4bce <ticker_init+0x22>
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	2000021c 	.word	0x2000021c

00004c1c <ticker_trigger>:
	instance = &_instance[instance_index];
    4c1c:	232c      	movs	r3, #44	; 0x2c
    4c1e:	4358      	muls	r0, r3
    4c20:	4b05      	ldr	r3, [pc, #20]	; (4c38 <ticker_trigger+0x1c>)
{
    4c22:	b510      	push	{r4, lr}
	instance = &_instance[instance_index];
    4c24:	181b      	adds	r3, r3, r0
	if (instance->sched_cb) {
    4c26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    4c28:	2c00      	cmp	r4, #0
    4c2a:	d003      	beq.n	4c34 <ticker_trigger+0x18>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    4c2c:	2201      	movs	r2, #1
    4c2e:	2103      	movs	r1, #3
    4c30:	2002      	movs	r0, #2
    4c32:	47a0      	blx	r4
}
    4c34:	bd10      	pop	{r4, pc}
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	2000021c 	.word	0x2000021c

00004c3c <ticker_start>:
{
    4c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    4c3e:	272c      	movs	r7, #44	; 0x2c
    4c40:	4378      	muls	r0, r7
    4c42:	4f1e      	ldr	r7, [pc, #120]	; (4cbc <ticker_start+0x80>)
{
    4c44:	ac0b      	add	r4, sp, #44	; 0x2c
	user = &instance->user[user_id];
    4c46:	183f      	adds	r7, r7, r0
{
    4c48:	8824      	ldrh	r4, [r4, #0]
	user = &instance->user[user_id];
    4c4a:	6878      	ldr	r0, [r7, #4]
    4c4c:	00cd      	lsls	r5, r1, #3
    4c4e:	1945      	adds	r5, r0, r5
{
    4c50:	9401      	str	r4, [sp, #4]
	last = user->last + 1;
    4c52:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    4c54:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    4c56:	1c66      	adds	r6, r4, #1
    4c58:	b2f6      	uxtb	r6, r6
		last = 0;
    4c5a:	4286      	cmp	r6, r0
    4c5c:	4180      	sbcs	r0, r0
    4c5e:	4006      	ands	r6, r0
	if (last == user->first) {
    4c60:	7868      	ldrb	r0, [r5, #1]
    4c62:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    4c64:	2001      	movs	r0, #1
	if (last == user->first) {
    4c66:	45b4      	cmp	ip, r6
    4c68:	d026      	beq.n	4cb8 <ticker_start+0x7c>
	user_op = &user->user_op[user->last];
    4c6a:	302f      	adds	r0, #47	; 0x2f
    4c6c:	4344      	muls	r4, r0
    4c6e:	6868      	ldr	r0, [r5, #4]
    4c70:	1904      	adds	r4, r0, r4
	user_op->params.start.ticks_at_start = ticks_anchor;
    4c72:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    4c74:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_START;
    4c76:	2003      	movs	r0, #3
	user_op->params.start.ticks_first = ticks_first;
    4c78:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    4c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->id = ticker_id;
    4c7c:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_periodic = ticks_periodic;
    4c7e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    4c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_START;
    4c82:	7020      	strb	r0, [r4, #0]
	user_op->params.start.remainder_periodic = remainder_periodic;
    4c84:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    4c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4c88:	0008      	movs	r0, r1
	user_op->params.start.ticks_slot = ticks_slot;
    4c8a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    4c8c:	466b      	mov	r3, sp
    4c8e:	889b      	ldrh	r3, [r3, #4]
    4c90:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    4c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c94:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    4c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c98:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4c9a:	2302      	movs	r3, #2
    4c9c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ca0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4ca6:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4ca8:	6a3b      	ldr	r3, [r7, #32]
    4caa:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    4cac:	4798      	blx	r3
    4cae:	003b      	movs	r3, r7
    4cb0:	2200      	movs	r2, #0
    4cb2:	2104      	movs	r1, #4
    4cb4:	47a8      	blx	r5
	return user_op->status;
    4cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    4cb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4cba:	46c0      	nop			; (mov r8, r8)
    4cbc:	2000021c 	.word	0x2000021c

00004cc0 <ticker_update>:
{
    4cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    4cc2:	262c      	movs	r6, #44	; 0x2c
{
    4cc4:	b087      	sub	sp, #28
    4cc6:	469c      	mov	ip, r3
    4cc8:	ab0c      	add	r3, sp, #48	; 0x30
    4cca:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    4ccc:	4370      	muls	r0, r6
{
    4cce:	9301      	str	r3, [sp, #4]
    4cd0:	ab0d      	add	r3, sp, #52	; 0x34
    4cd2:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    4cd4:	4e21      	ldr	r6, [pc, #132]	; (4d5c <ticker_update+0x9c>)
{
    4cd6:	9302      	str	r3, [sp, #8]
    4cd8:	ab0e      	add	r3, sp, #56	; 0x38
    4cda:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    4cdc:	1836      	adds	r6, r6, r0
{
    4cde:	9303      	str	r3, [sp, #12]
    4ce0:	ab0f      	add	r3, sp, #60	; 0x3c
    4ce2:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    4ce4:	00cd      	lsls	r5, r1, #3
{
    4ce6:	9304      	str	r3, [sp, #16]
    4ce8:	ab10      	add	r3, sp, #64	; 0x40
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	9305      	str	r3, [sp, #20]
	user = &instance->user[user_id];
    4cee:	6873      	ldr	r3, [r6, #4]
    4cf0:	195d      	adds	r5, r3, r5
	last = user->last + 1;
    4cf2:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    4cf4:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    4cf6:	1c63      	adds	r3, r4, #1
    4cf8:	b2db      	uxtb	r3, r3
		last = 0;
    4cfa:	4283      	cmp	r3, r0
    4cfc:	4180      	sbcs	r0, r0
	if (last == user->first) {
    4cfe:	786f      	ldrb	r7, [r5, #1]
		last = 0;
    4d00:	4003      	ands	r3, r0
		return TICKER_STATUS_FAILURE;
    4d02:	2001      	movs	r0, #1
	if (last == user->first) {
    4d04:	429f      	cmp	r7, r3
    4d06:	d027      	beq.n	4d58 <ticker_update+0x98>
	user_op = &user->user_op[user->last];
    4d08:	302f      	adds	r0, #47	; 0x2f
    4d0a:	4344      	muls	r4, r0
    4d0c:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    4d0e:	2704      	movs	r7, #4
	user_op = &user->user_op[user->last];
    4d10:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    4d12:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    4d14:	4662      	mov	r2, ip
    4d16:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    4d18:	466a      	mov	r2, sp
    4d1a:	8892      	ldrh	r2, [r2, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    4d1c:	7027      	strb	r7, [r4, #0]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    4d1e:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    4d20:	466a      	mov	r2, sp
    4d22:	8912      	ldrh	r2, [r2, #8]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4d24:	0008      	movs	r0, r1
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    4d26:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    4d28:	466a      	mov	r2, sp
    4d2a:	8992      	ldrh	r2, [r2, #12]
    4d2c:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    4d2e:	466a      	mov	r2, sp
    4d30:	8a12      	ldrh	r2, [r2, #16]
    4d32:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    4d34:	466a      	mov	r2, sp
    4d36:	7d12      	ldrb	r2, [r2, #20]
    4d38:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    4d3a:	2202      	movs	r2, #2
    4d3c:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4d40:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4d42:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4d44:	62e2      	str	r2, [r4, #44]	; 0x2c
	user->last = last;
    4d46:	70eb      	strb	r3, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4d48:	6a33      	ldr	r3, [r6, #32]
    4d4a:	6a75      	ldr	r5, [r6, #36]	; 0x24
    4d4c:	4798      	blx	r3
    4d4e:	0033      	movs	r3, r6
    4d50:	2200      	movs	r2, #0
    4d52:	0039      	movs	r1, r7
    4d54:	47a8      	blx	r5
	return user_op->status;
    4d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    4d58:	b007      	add	sp, #28
    4d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d5c:	2000021c 	.word	0x2000021c

00004d60 <ticker_stop>:
{
    4d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    4d62:	272c      	movs	r7, #44	; 0x2c
    4d64:	4378      	muls	r0, r7
    4d66:	4f14      	ldr	r7, [pc, #80]	; (4db8 <ticker_stop+0x58>)
    4d68:	00cd      	lsls	r5, r1, #3
    4d6a:	183f      	adds	r7, r7, r0
    4d6c:	6878      	ldr	r0, [r7, #4]
    4d6e:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    4d70:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    4d72:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    4d74:	1c46      	adds	r6, r0, #1
    4d76:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    4d78:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    4d7a:	b2f6      	uxtb	r6, r6
		last = 0;
    4d7c:	4286      	cmp	r6, r0
    4d7e:	4180      	sbcs	r0, r0
    4d80:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    4d82:	2001      	movs	r0, #1
	if (last == user->first) {
    4d84:	42b4      	cmp	r4, r6
    4d86:	d016      	beq.n	4db6 <ticker_stop+0x56>
	user_op = &user->user_op[user->last];
    4d88:	4660      	mov	r0, ip
    4d8a:	2430      	movs	r4, #48	; 0x30
    4d8c:	4344      	muls	r4, r0
    4d8e:	6868      	ldr	r0, [r5, #4]
    4d90:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    4d92:	7062      	strb	r2, [r4, #1]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4d94:	2005      	movs	r0, #5
	user_op->status = TICKER_STATUS_BUSY;
    4d96:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    4d98:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4d9a:	9b06      	ldr	r3, [sp, #24]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4d9c:	7020      	strb	r0, [r4, #0]
	user_op->status = TICKER_STATUS_BUSY;
    4d9e:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    4da0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4da2:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4da4:	0008      	movs	r0, r1
    4da6:	6a3b      	ldr	r3, [r7, #32]
    4da8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    4daa:	4798      	blx	r3
    4dac:	003b      	movs	r3, r7
    4dae:	2200      	movs	r2, #0
    4db0:	2104      	movs	r1, #4
    4db2:	47a8      	blx	r5
	return user_op->status;
    4db4:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    4db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4db8:	2000021c 	.word	0x2000021c

00004dbc <ticker_next_slot_get>:
{
    4dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    4dbe:	272c      	movs	r7, #44	; 0x2c
    4dc0:	4378      	muls	r0, r7
    4dc2:	4f18      	ldr	r7, [pc, #96]	; (4e24 <ticker_next_slot_get+0x68>)
    4dc4:	00cd      	lsls	r5, r1, #3
    4dc6:	183f      	adds	r7, r7, r0
    4dc8:	6878      	ldr	r0, [r7, #4]
{
    4dca:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    4dcc:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    4dce:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    4dd0:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    4dd2:	1c46      	adds	r6, r0, #1
    4dd4:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    4dd6:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    4dd8:	b2f6      	uxtb	r6, r6
		last = 0;
    4dda:	4286      	cmp	r6, r0
    4ddc:	4180      	sbcs	r0, r0
    4dde:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    4de0:	2001      	movs	r0, #1
	if (last == user->first) {
    4de2:	42b4      	cmp	r4, r6
    4de4:	d01c      	beq.n	4e20 <ticker_next_slot_get+0x64>
	user_op = &user->user_op[user->last];
    4de6:	4660      	mov	r0, ip
    4de8:	2430      	movs	r4, #48	; 0x30
	user_op->id = TICKER_NULL;
    4dea:	23ff      	movs	r3, #255	; 0xff
	user_op = &user->user_op[user->last];
    4dec:	4344      	muls	r4, r0
    4dee:	6868      	ldr	r0, [r5, #4]
    4df0:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    4df2:	2002      	movs	r0, #2
	user_op->id = TICKER_NULL;
    4df4:	7063      	strb	r3, [r4, #1]
	user_op->params.slot_get.ticks_current = ticks_current;
    4df6:	9b01      	ldr	r3, [sp, #4]
	user_op->params.slot_get.ticker_id = ticker_id;
    4df8:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    4dfa:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    4dfc:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    4dfe:	7020      	strb	r0, [r4, #0]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    4e00:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    4e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
    4e04:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4e06:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4e0a:	0008      	movs	r0, r1
	user_op->op_context = op_context;
    4e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4e0e:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4e10:	6a3b      	ldr	r3, [r7, #32]
    4e12:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    4e14:	4798      	blx	r3
    4e16:	003b      	movs	r3, r7
    4e18:	2200      	movs	r2, #0
    4e1a:	2104      	movs	r1, #4
    4e1c:	47a8      	blx	r5
	return user_op->status;
    4e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    4e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	2000021c 	.word	0x2000021c

00004e28 <ticker_job_idle_get>:
{
    4e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    4e2a:	272c      	movs	r7, #44	; 0x2c
    4e2c:	4378      	muls	r0, r7
    4e2e:	4f15      	ldr	r7, [pc, #84]	; (4e84 <ticker_job_idle_get+0x5c>)
    4e30:	00cd      	lsls	r5, r1, #3
    4e32:	183f      	adds	r7, r7, r0
    4e34:	6878      	ldr	r0, [r7, #4]
{
    4e36:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    4e38:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    4e3a:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    4e3c:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    4e3e:	1c46      	adds	r6, r0, #1
    4e40:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    4e42:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    4e44:	b2f6      	uxtb	r6, r6
		last = 0;
    4e46:	4286      	cmp	r6, r0
    4e48:	4180      	sbcs	r0, r0
    4e4a:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    4e4c:	2001      	movs	r0, #1
	if (last == user->first) {
    4e4e:	42b4      	cmp	r4, r6
    4e50:	d016      	beq.n	4e80 <ticker_job_idle_get+0x58>
	user_op = &user->user_op[user->last];
    4e52:	4663      	mov	r3, ip
    4e54:	2430      	movs	r4, #48	; 0x30
    4e56:	435c      	muls	r4, r3
    4e58:	686b      	ldr	r3, [r5, #4]
    4e5a:	191c      	adds	r4, r3, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    4e5c:	7020      	strb	r0, [r4, #0]
	user_op->op_context = op_context;
    4e5e:	9b01      	ldr	r3, [sp, #4]
	user_op->id = TICKER_NULL;
    4e60:	30fe      	adds	r0, #254	; 0xfe
    4e62:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4e64:	38fd      	subs	r0, #253	; 0xfd
    4e66:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4e68:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4e6c:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4e6e:	0008      	movs	r0, r1
    4e70:	6a3b      	ldr	r3, [r7, #32]
    4e72:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    4e74:	4798      	blx	r3
    4e76:	003b      	movs	r3, r7
    4e78:	2200      	movs	r2, #0
    4e7a:	2104      	movs	r1, #4
    4e7c:	47a8      	blx	r5
	return user_op->status;
    4e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    4e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	2000021c 	.word	0x2000021c

00004e88 <ticker_job_sched>:
{
    4e88:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4e8a:	242c      	movs	r4, #44	; 0x2c
    4e8c:	4360      	muls	r0, r4
    4e8e:	4c05      	ldr	r4, [pc, #20]	; (4ea4 <ticker_job_sched+0x1c>)
    4e90:	1824      	adds	r4, r4, r0
    4e92:	6a23      	ldr	r3, [r4, #32]
    4e94:	0008      	movs	r0, r1
    4e96:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4e98:	4798      	blx	r3
    4e9a:	0023      	movs	r3, r4
    4e9c:	2200      	movs	r2, #0
    4e9e:	2104      	movs	r1, #4
    4ea0:	47a8      	blx	r5
}
    4ea2:	bd70      	pop	{r4, r5, r6, pc}
    4ea4:	2000021c 	.word	0x2000021c

00004ea8 <ticker_ticks_now_get>:
{
    4ea8:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    4eaa:	f005 f93f 	bl	a12c <cntr_cnt_get>
}
    4eae:	bd10      	pop	{r4, pc}

00004eb0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4eb0:	1a40      	subs	r0, r0, r1
    4eb2:	0200      	lsls	r0, r0, #8
    4eb4:	0a00      	lsrs	r0, r0, #8
}
    4eb6:	4770      	bx	lr

00004eb8 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    4eb8:	0002      	movs	r2, r0
    4eba:	b510      	push	{r4, lr}
    4ebc:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
    4ebe:	2300      	movs	r3, #0
	if (addr_type > 1) {
    4ec0:	2a01      	cmp	r2, #1
    4ec2:	d80b      	bhi.n	4edc <ll_addr_get+0x24>
    4ec4:	4c06      	ldr	r4, [pc, #24]	; (4ee0 <ll_addr_get+0x28>)
	}

	if (addr_type) {
    4ec6:	429a      	cmp	r2, r3
    4ec8:	d100      	bne.n	4ecc <ll_addr_get+0x14>
    4eca:	4c06      	ldr	r4, [pc, #24]	; (4ee4 <ll_addr_get+0x2c>)

	if (bdaddr) {
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    4ecc:	0023      	movs	r3, r4
	if (bdaddr) {
    4ece:	2800      	cmp	r0, #0
    4ed0:	d004      	beq.n	4edc <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    4ed2:	2206      	movs	r2, #6
    4ed4:	0021      	movs	r1, r4
    4ed6:	f7fc fa83 	bl	13e0 <memcpy>
	return pub_addr;
    4eda:	0023      	movs	r3, r4
}
    4edc:	0018      	movs	r0, r3
    4ede:	bd10      	pop	{r4, pc}
    4ee0:	2000027a 	.word	0x2000027a
    4ee4:	20000274 	.word	0x20000274

00004ee8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    4ee8:	b570      	push	{r4, r5, r6, lr}
    4eea:	0006      	movs	r6, r0
    4eec:	000d      	movs	r5, r1
	if (ll_adv_is_enabled() ||
    4eee:	f004 fa65 	bl	93bc <ll_adv_is_enabled>
    4ef2:	1e04      	subs	r4, r0, #0
    4ef4:	d002      	beq.n	4efc <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    4ef6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    4ef8:	0020      	movs	r0, r4
    4efa:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    4efc:	f004 fa72 	bl	93e4 <ll_scan_is_enabled>
    4f00:	2206      	movs	r2, #6
	if (ll_adv_is_enabled() ||
    4f02:	4210      	tst	r0, r2
    4f04:	d1f7      	bne.n	4ef6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    4f06:	0029      	movs	r1, r5
    4f08:	4803      	ldr	r0, [pc, #12]	; (4f18 <ll_addr_set+0x30>)
	if (addr_type) {
    4f0a:	2e00      	cmp	r6, #0
    4f0c:	d100      	bne.n	4f10 <ll_addr_set+0x28>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    4f0e:	4803      	ldr	r0, [pc, #12]	; (4f1c <ll_addr_set+0x34>)
    4f10:	f7fc fa66 	bl	13e0 <memcpy>
    4f14:	e7f0      	b.n	4ef8 <ll_addr_set+0x10>
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	2000027a 	.word	0x2000027a
    4f1c:	20000274 	.word	0x20000274

00004f20 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    4f20:	2300      	movs	r3, #0
    4f22:	7003      	strb	r3, [r0, #0]
	*max = 0;
    4f24:	700b      	strb	r3, [r1, #0]
}
    4f26:	4770      	bx	lr

00004f28 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    4f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    4f2a:	2701      	movs	r7, #1
    4f2c:	0006      	movs	r6, r0
    4f2e:	000c      	movs	r4, r1
    4f30:	427f      	negs	r7, r7
	while (len) {
    4f32:	2c00      	cmp	r4, #0
    4f34:	d101      	bne.n	4f3a <bt_rand+0x12>
			cpu_sleep();
		}
	}

	return 0;
}
    4f36:	2000      	movs	r0, #0
    4f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f3a:	4d09      	ldr	r5, [pc, #36]	; (4f60 <bt_rand+0x38>)
    4f3c:	0039      	movs	r1, r7
    4f3e:	0028      	movs	r0, r5
    4f40:	f006 f904 	bl	b14c <_impl_k_mutex_lock>
		len = rand_get(len, buf);
    4f44:	0020      	movs	r0, r4
    4f46:	0031      	movs	r1, r6
    4f48:	f005 f9d2 	bl	a2f0 <rand_get>
    4f4c:	0004      	movs	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    4f4e:	0028      	movs	r0, r5
    4f50:	f006 f95e 	bl	b210 <_impl_k_mutex_unlock>
		if (len) {
    4f54:	2c00      	cmp	r4, #0
    4f56:	d0ee      	beq.n	4f36 <bt_rand+0xe>
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4f58:	bf20      	wfe
	__SEV();
    4f5a:	bf40      	sev
	__WFE();
    4f5c:	bf20      	wfe
    4f5e:	e7e8      	b.n	4f32 <bt_rand+0xa>
    4f60:	2000251c 	.word	0x2000251c

00004f64 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    4f64:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    4f66:	4802      	ldr	r0, [pc, #8]	; (4f70 <_hci_driver_init+0xc>)
    4f68:	f7fe ffd2 	bl	3f10 <bt_hci_driver_register>

	return 0;
}
    4f6c:	2000      	movs	r0, #0
    4f6e:	bd10      	pop	{r4, pc}
    4f70:	0000c9ec 	.word	0x0000c9ec

00004f74 <hci_driver_send>:
{
    4f74:	b510      	push	{r4, lr}
	if (!buf->len) {
    4f76:	8983      	ldrh	r3, [r0, #12]
{
    4f78:	0004      	movs	r4, r0
	if (!buf->len) {
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d00d      	beq.n	4f9a <hci_driver_send+0x26>
	switch (type) {
    4f7e:	7d03      	ldrb	r3, [r0, #20]
    4f80:	2b00      	cmp	r3, #0
    4f82:	d10a      	bne.n	4f9a <hci_driver_send+0x26>
	evt = hci_cmd_handle(buf);
    4f84:	f000 f978 	bl	5278 <hci_cmd_handle>
	if (evt) {
    4f88:	2800      	cmp	r0, #0
    4f8a:	d001      	beq.n	4f90 <hci_driver_send+0x1c>
		bt_recv_prio(evt);
    4f8c:	f7fe ff7c 	bl	3e88 <bt_recv_prio>
		net_buf_unref(buf);
    4f90:	0020      	movs	r0, r4
    4f92:	f005 fed5 	bl	ad40 <net_buf_unref>
	return err;
    4f96:	2000      	movs	r0, #0
}
    4f98:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4f9a:	2016      	movs	r0, #22
    4f9c:	4240      	negs	r0, r0
    4f9e:	e7fb      	b.n	4f98 <hci_driver_send+0x24>

00004fa0 <recv_thread>:
{
    4fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    4fa2:	2501      	movs	r5, #1
    4fa4:	426d      	negs	r5, r5
    4fa6:	0029      	movs	r1, r5
    4fa8:	4819      	ldr	r0, [pc, #100]	; (5010 <recv_thread+0x70>)
    4faa:	f006 f9fb 	bl	b3a4 <k_queue_get>
    4fae:	1e04      	subs	r4, r0, #0
		if (node_rx && !buf) {
    4fb0:	d025      	beq.n	4ffe <recv_thread+0x5e>
	s8_t class = hci_get_class(node_rx);
    4fb2:	f000 fd03 	bl	59bc <hci_get_class>
	switch (class) {
    4fb6:	b2c3      	uxtb	r3, r0
    4fb8:	9401      	str	r4, [sp, #4]
    4fba:	2b02      	cmp	r3, #2
    4fbc:	d822      	bhi.n	5004 <recv_thread+0x64>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    4fbe:	2100      	movs	r1, #0
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    4fc0:	2801      	cmp	r0, #1
    4fc2:	d001      	beq.n	4fc8 <recv_thread+0x28>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    4fc4:	0029      	movs	r1, r5
    4fc6:	2001      	movs	r0, #1
    4fc8:	f7fe ffb8 	bl	3f3c <bt_buf_get_rx>
    4fcc:	1e04      	subs	r4, r0, #0
		if (buf) {
    4fce:	d003      	beq.n	4fd8 <recv_thread+0x38>
			hci_evt_encode(node_rx, buf);
    4fd0:	0001      	movs	r1, r0
    4fd2:	9801      	ldr	r0, [sp, #4]
    4fd4:	f000 fc1e 	bl	5814 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4fd8:	9b01      	ldr	r3, [sp, #4]
    4fda:	2100      	movs	r1, #0
    4fdc:	88d8      	ldrh	r0, [r3, #6]
    4fde:	f004 facf 	bl	9580 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    4fe2:	2200      	movs	r2, #0
    4fe4:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    4fe6:	a801      	add	r0, sp, #4
	node_rx->hdr.onion.next = 0;
    4fe8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4fea:	f004 fa65 	bl	94b8 <ll_rx_mem_release>
		if (buf) {
    4fee:	2c00      	cmp	r4, #0
    4ff0:	d005      	beq.n	4ffe <recv_thread+0x5e>
			if (buf->len) {
    4ff2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    4ff4:	0020      	movs	r0, r4
			if (buf->len) {
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d007      	beq.n	500a <recv_thread+0x6a>
				bt_recv(buf);
    4ffa:	f7fe fe97 	bl	3d2c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4ffe:	f006 fb6f 	bl	b6e0 <_impl_k_yield>
    5002:	e7d0      	b.n	4fa6 <recv_thread+0x6>
		LL_ASSERT(0);
    5004:	b662      	cpsie	i
    5006:	2004      	movs	r0, #4
    5008:	df02      	svc	2
				net_buf_unref(buf);
    500a:	f005 fe99 	bl	ad40 <net_buf_unref>
    500e:	e7f6      	b.n	4ffe <recv_thread+0x5e>
    5010:	20002530 	.word	0x20002530

00005014 <prio_recv_thread>:
{
    5014:	b513      	push	{r0, r1, r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5016:	2401      	movs	r4, #1
    5018:	4264      	negs	r4, r4
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    501a:	466b      	mov	r3, sp
    501c:	a801      	add	r0, sp, #4
    501e:	1c99      	adds	r1, r3, #2
    5020:	f004 fa10 	bl	9444 <ll_rx_get>
    5024:	2800      	cmp	r0, #0
    5026:	d1f8      	bne.n	501a <prio_recv_thread+0x6>
		if (node_rx) {
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	2b00      	cmp	r3, #0
    502c:	d006      	beq.n	503c <prio_recv_thread+0x28>
			ll_rx_dequeue();
    502e:	f004 fc85 	bl	993c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    5032:	9901      	ldr	r1, [sp, #4]
    5034:	4804      	ldr	r0, [pc, #16]	; (5048 <prio_recv_thread+0x34>)
    5036:	f006 f98e 	bl	b356 <k_queue_append>
    503a:	e7ee      	b.n	501a <prio_recv_thread+0x6>
    503c:	0021      	movs	r1, r4
    503e:	4803      	ldr	r0, [pc, #12]	; (504c <prio_recv_thread+0x38>)
    5040:	f006 fc4c 	bl	b8dc <_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    5044:	e7e9      	b.n	501a <prio_recv_thread+0x6>
    5046:	46c0      	nop			; (mov r8, r8)
    5048:	20002530 	.word	0x20002530
    504c:	20002504 	.word	0x20002504

00005050 <hci_driver_open>:
{
    5050:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    5052:	4814      	ldr	r0, [pc, #80]	; (50a4 <hci_driver_open+0x54>)
{
    5054:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    5056:	f004 fd15 	bl	9a84 <ll_init>
    505a:	1e04      	subs	r4, r0, #0
	if (err) {
    505c:	d11f      	bne.n	509e <hci_driver_open+0x4e>
	hci_init(NULL);
    505e:	f000 fccd 	bl	59fc <hci_init>

    5062:	230a      	movs	r3, #10
    5064:	22e0      	movs	r2, #224	; 0xe0
    5066:	425b      	negs	r3, r3
    5068:	9303      	str	r3, [sp, #12]
    506a:	0052      	lsls	r2, r2, #1
    506c:	4b0e      	ldr	r3, [pc, #56]	; (50a8 <hci_driver_open+0x58>)
    506e:	490f      	ldr	r1, [pc, #60]	; (50ac <hci_driver_open+0x5c>)
    5070:	9405      	str	r4, [sp, #20]
    5072:	9404      	str	r4, [sp, #16]
    5074:	9402      	str	r4, [sp, #8]
    5076:	9401      	str	r4, [sp, #4]
    5078:	9400      	str	r4, [sp, #0]
    507a:	480d      	ldr	r0, [pc, #52]	; (50b0 <hci_driver_open+0x60>)
    507c:	f006 fdfe 	bl	bc7c <_impl_k_thread_create>
    5080:	2308      	movs	r3, #8
    5082:	2280      	movs	r2, #128	; 0x80
    5084:	425b      	negs	r3, r3
    5086:	9303      	str	r3, [sp, #12]
    5088:	9405      	str	r4, [sp, #20]
    508a:	9404      	str	r4, [sp, #16]
    508c:	9402      	str	r4, [sp, #8]
    508e:	9401      	str	r4, [sp, #4]
    5090:	9400      	str	r4, [sp, #0]
    5092:	4b08      	ldr	r3, [pc, #32]	; (50b4 <hci_driver_open+0x64>)
    5094:	00d2      	lsls	r2, r2, #3
    5096:	4908      	ldr	r1, [pc, #32]	; (50b8 <hci_driver_open+0x68>)
    5098:	4808      	ldr	r0, [pc, #32]	; (50bc <hci_driver_open+0x6c>)
    509a:	f006 fdef 	bl	bc7c <_impl_k_thread_create>
}
    509e:	0020      	movs	r0, r4
    50a0:	b006      	add	sp, #24
    50a2:	bd10      	pop	{r4, pc}
    50a4:	20002504 	.word	0x20002504
    50a8:	00005015 	.word	0x00005015
    50ac:	20001040 	.word	0x20001040
    50b0:	20000d64 	.word	0x20000d64
    50b4:	00004fa1 	.word	0x00004fa1
    50b8:	20001200 	.word	0x20001200
    50bc:	20000d04 	.word	0x20000d04

000050c0 <sys_put_le32>:
	dst[1] = val >> 8;
    50c0:	0a03      	lsrs	r3, r0, #8
	dst[0] = val;
    50c2:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    50c4:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    50c6:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    50c8:	0a00      	lsrs	r0, r0, #8
    50ca:	704b      	strb	r3, [r1, #1]
    50cc:	70c8      	strb	r0, [r1, #3]
}
    50ce:	4770      	bx	lr

000050d0 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    50d0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    50d2:	3008      	adds	r0, #8
{
    50d4:	000d      	movs	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    50d6:	2102      	movs	r1, #2
{
    50d8:	0014      	movs	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    50da:	f005 fe67 	bl	adac <net_buf_simple_add>
	hdr->evt = evt;
    50de:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    50e0:	7044      	strb	r4, [r0, #1]
}
    50e2:	bd70      	pop	{r4, r5, r6, pc}

000050e4 <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    50e4:	b570      	push	{r4, r5, r6, lr}
    50e6:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    50e8:	2001      	movs	r0, #1
{
    50ea:	000d      	movs	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    50ec:	4240      	negs	r0, r0
    50ee:	f7fe ff35 	bl	3f5c <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    50f2:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    50f4:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    50f6:	b2d2      	uxtb	r2, r2
    50f8:	210e      	movs	r1, #14
    50fa:	f7ff ffe9 	bl	50d0 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    50fe:	6820      	ldr	r0, [r4, #0]
    5100:	2103      	movs	r1, #3
    5102:	3008      	adds	r0, #8
    5104:	f005 fe52 	bl	adac <net_buf_simple_add>
	cc->ncmd = 1;
    5108:	2301      	movs	r3, #1
    510a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    510c:	4b05      	ldr	r3, [pc, #20]	; (5124 <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    510e:	0029      	movs	r1, r5
	cc->opcode = sys_cpu_to_le16(_opcode);
    5110:	781a      	ldrb	r2, [r3, #0]
    5112:	785b      	ldrb	r3, [r3, #1]
    5114:	7042      	strb	r2, [r0, #1]
    5116:	7083      	strb	r3, [r0, #2]
	return net_buf_add(*buf, plen);
    5118:	6820      	ldr	r0, [r4, #0]
    511a:	3008      	adds	r0, #8
    511c:	f005 fe46 	bl	adac <net_buf_simple_add>
}
    5120:	bd70      	pop	{r4, r5, r6, pc}
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	20000280 	.word	0x20000280

00005128 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    5128:	b570      	push	{r4, r5, r6, lr}
    512a:	0004      	movs	r4, r0
    512c:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    512e:	3201      	adds	r2, #1
{
    5130:	000e      	movs	r6, r1
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    5132:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    5134:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    5136:	213e      	movs	r1, #62	; 0x3e
    5138:	f7ff ffca 	bl	50d0 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    513c:	2101      	movs	r1, #1
    513e:	0020      	movs	r0, r4
    5140:	f005 fe34 	bl	adac <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    5144:	0029      	movs	r1, r5
	me->subevent = subevt;
    5146:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    5148:	0020      	movs	r0, r4
    514a:	f005 fe2f 	bl	adac <net_buf_simple_add>
}
    514e:	bd70      	pop	{r4, r5, r6, pc}

00005150 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    5150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5152:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5154:	4a10      	ldr	r2, [pc, #64]	; (5198 <le_remote_feat_complete+0x48>)
{
    5156:	0007      	movs	r7, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5158:	6852      	ldr	r2, [r2, #4]
{
    515a:	000e      	movs	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    515c:	0092      	lsls	r2, r2, #2
    515e:	d514      	bpl.n	518a <le_remote_feat_complete+0x3a>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    5160:	2508      	movs	r5, #8
    5162:	4a0e      	ldr	r2, [pc, #56]	; (519c <le_remote_feat_complete+0x4c>)
    5164:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5166:	422a      	tst	r2, r5
    5168:	d00f      	beq.n	518a <le_remote_feat_complete+0x3a>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    516a:	220b      	movs	r2, #11
    516c:	2104      	movs	r1, #4
    516e:	0018      	movs	r0, r3
    5170:	f7ff ffda 	bl	5128 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    5174:	7044      	strb	r4, [r0, #1]
    5176:	40ec      	lsrs	r4, r5
	sep->status = status;
    5178:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    517a:	7084      	strb	r4, [r0, #2]
    517c:	3003      	adds	r0, #3
	if (!status) {
    517e:	2f00      	cmp	r7, #0
    5180:	d104      	bne.n	518c <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->llctrl.feature_rsp.features[0],
    5182:	1d31      	adds	r1, r6, #4
		memcpy(&sep->features[0],
    5184:	002a      	movs	r2, r5
    5186:	f7fc f92b 	bl	13e0 <memcpy>
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    518c:	002a      	movs	r2, r5
    518e:	2100      	movs	r1, #0
    5190:	f7fc f950 	bl	1434 <memset>
    5194:	e7f9      	b.n	518a <le_remote_feat_complete+0x3a>
    5196:	46c0      	nop			; (mov r8, r8)
    5198:	20002300 	.word	0x20002300
    519c:	20002308 	.word	0x20002308

000051a0 <bt_addr_le_to_str.constprop.42>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    51a0:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    51a2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    51a4:	b08a      	sub	sp, #40	; 0x28
    51a6:	0004      	movs	r4, r0
    51a8:	000e      	movs	r6, r1
    51aa:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    51ac:	2b03      	cmp	r3, #3
    51ae:	d821      	bhi.n	51f4 <bt_addr_le_to_str.constprop.42+0x54>
    51b0:	0018      	movs	r0, r3
    51b2:	f7fa ffeb 	bl	18c <__gnu_thumb1_case_uqi>
    51b6:	1902      	.short	0x1902
    51b8:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    51ba:	4911      	ldr	r1, [pc, #68]	; (5200 <bt_addr_le_to_str.constprop.42+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    51bc:	0028      	movs	r0, r5
    51be:	f7fc f8c9 	bl	1354 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    51c2:	7862      	ldrb	r2, [r4, #1]
    51c4:	79a3      	ldrb	r3, [r4, #6]
    51c6:	9204      	str	r2, [sp, #16]
    51c8:	78a2      	ldrb	r2, [r4, #2]
    51ca:	9505      	str	r5, [sp, #20]
    51cc:	9203      	str	r2, [sp, #12]
    51ce:	78e2      	ldrb	r2, [r4, #3]
    51d0:	211b      	movs	r1, #27
    51d2:	9202      	str	r2, [sp, #8]
    51d4:	7922      	ldrb	r2, [r4, #4]
    51d6:	0030      	movs	r0, r6
    51d8:	9201      	str	r2, [sp, #4]
    51da:	7962      	ldrb	r2, [r4, #5]
    51dc:	9200      	str	r2, [sp, #0]
    51de:	4a09      	ldr	r2, [pc, #36]	; (5204 <bt_addr_le_to_str.constprop.42+0x64>)
    51e0:	f7fd fa9c 	bl	271c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    51e4:	b00a      	add	sp, #40	; 0x28
    51e6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    51e8:	4907      	ldr	r1, [pc, #28]	; (5208 <bt_addr_le_to_str.constprop.42+0x68>)
    51ea:	e7e7      	b.n	51bc <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "public id");
    51ec:	4907      	ldr	r1, [pc, #28]	; (520c <bt_addr_le_to_str.constprop.42+0x6c>)
    51ee:	e7e5      	b.n	51bc <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "random id");
    51f0:	4907      	ldr	r1, [pc, #28]	; (5210 <bt_addr_le_to_str.constprop.42+0x70>)
    51f2:	e7e3      	b.n	51bc <bt_addr_le_to_str.constprop.42+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    51f4:	4a07      	ldr	r2, [pc, #28]	; (5214 <bt_addr_le_to_str.constprop.42+0x74>)
    51f6:	210a      	movs	r1, #10
    51f8:	0028      	movs	r0, r5
    51fa:	f7fd fa8f 	bl	271c <snprintk>
    51fe:	e7e0      	b.n	51c2 <bt_addr_le_to_str.constprop.42+0x22>
    5200:	0000ca07 	.word	0x0000ca07
    5204:	0000ca30 	.word	0x0000ca30
    5208:	0000ca0e 	.word	0x0000ca0e
    520c:	0000ca15 	.word	0x0000ca15
    5210:	0000ca1f 	.word	0x0000ca1f
    5214:	0000ca29 	.word	0x0000ca29

00005218 <le_adv_ext_report.isra.37.part.38>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    5218:	b510      	push	{r4, lr}
		if (!p->ext_hdr_len) {
    521a:	7883      	ldrb	r3, [r0, #2]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    521c:	b08a      	sub	sp, #40	; 0x28
		if (!p->ext_hdr_len) {
    521e:	069b      	lsls	r3, r3, #26
    5220:	d011      	beq.n	5246 <le_adv_ext_report.isra.37.part.38+0x2e>
		if (h->adv_addr) {
    5222:	78c3      	ldrb	r3, [r0, #3]
    5224:	07db      	lsls	r3, r3, #31
    5226:	d50e      	bpl.n	5246 <le_adv_ext_report.isra.37.part.38+0x2e>
			addr.type = adv->tx_addr;
    5228:	7803      	ldrb	r3, [r0, #0]
    522a:	ac01      	add	r4, sp, #4
    522c:	065b      	lsls	r3, r3, #25
    522e:	0fdb      	lsrs	r3, r3, #31
    5230:	7023      	strb	r3, [r4, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    5232:	466b      	mov	r3, sp
		ptr = (u8_t *)h + sizeof(*h);
    5234:	1d01      	adds	r1, r0, #4
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    5236:	2206      	movs	r2, #6
    5238:	1d58      	adds	r0, r3, #5
    523a:	f7fc f8d1 	bl	13e0 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    523e:	a903      	add	r1, sp, #12
    5240:	0020      	movs	r0, r4
    5242:	f7ff ffad 	bl	51a0 <bt_addr_le_to_str.constprop.42>
}
    5246:	b00a      	add	sp, #40	; 0x28
    5248:	bd10      	pop	{r4, pc}

0000524a <sys_get_le64>:
{
    524a:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    524c:	785a      	ldrb	r2, [r3, #1]
    524e:	7800      	ldrb	r0, [r0, #0]
    5250:	0212      	lsls	r2, r2, #8
    5252:	4302      	orrs	r2, r0
    5254:	7898      	ldrb	r0, [r3, #2]
    5256:	7919      	ldrb	r1, [r3, #4]
    5258:	0400      	lsls	r0, r0, #16
    525a:	4302      	orrs	r2, r0
    525c:	78d8      	ldrb	r0, [r3, #3]
    525e:	0600      	lsls	r0, r0, #24
    5260:	4310      	orrs	r0, r2
    5262:	795a      	ldrb	r2, [r3, #5]
    5264:	0212      	lsls	r2, r2, #8
    5266:	430a      	orrs	r2, r1
    5268:	7999      	ldrb	r1, [r3, #6]
    526a:	0409      	lsls	r1, r1, #16
    526c:	430a      	orrs	r2, r1
    526e:	79d9      	ldrb	r1, [r3, #7]
    5270:	0609      	lsls	r1, r1, #24
    5272:	4311      	orrs	r1, r2
}
    5274:	4770      	bx	lr
	...

00005278 <hci_cmd_handle>:
{
    5278:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *evt = NULL;
    527a:	2600      	movs	r6, #0
{
    527c:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    527e:	960d      	str	r6, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    5280:	8981      	ldrh	r1, [r0, #12]
{
    5282:	0005      	movs	r5, r0
	if (cmd->len < sizeof(*chdr)) {
    5284:	2902      	cmp	r1, #2
    5286:	d802      	bhi.n	528e <hci_cmd_handle+0x16>
		return NULL;
    5288:	2000      	movs	r0, #0
}
    528a:	b019      	add	sp, #100	; 0x64
    528c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    528e:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    5290:	4cc0      	ldr	r4, [pc, #768]	; (5594 <hci_cmd_handle+0x31c>)
    5292:	7853      	ldrb	r3, [r2, #1]
    5294:	7810      	ldrb	r0, [r2, #0]
    5296:	021b      	lsls	r3, r3, #8
    5298:	4303      	orrs	r3, r0
    529a:	8023      	strh	r3, [r4, #0]
	if (cmd->len < chdr->param_len) {
    529c:	7893      	ldrb	r3, [r2, #2]
    529e:	428b      	cmp	r3, r1
    52a0:	d8f2      	bhi.n	5288 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    52a2:	0028      	movs	r0, r5
    52a4:	2103      	movs	r1, #3
    52a6:	3008      	adds	r0, #8
    52a8:	f005 fd91 	bl	adce <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    52ac:	8823      	ldrh	r3, [r4, #0]
    52ae:	059c      	lsls	r4, r3, #22
    52b0:	0da4      	lsrs	r4, r4, #22
	switch (BT_OGF(_opcode)) {
    52b2:	0a9b      	lsrs	r3, r3, #10
    52b4:	2b04      	cmp	r3, #4
    52b6:	d059      	beq.n	536c <hci_cmd_handle+0xf4>
    52b8:	d807      	bhi.n	52ca <hci_cmd_handle+0x52>
    52ba:	2b03      	cmp	r3, #3
    52bc:	d019      	beq.n	52f2 <hci_cmd_handle+0x7a>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    52be:	2101      	movs	r1, #1
    52c0:	a80d      	add	r0, sp, #52	; 0x34
    52c2:	f7ff ff0f 	bl	50e4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    52c6:	2301      	movs	r3, #1
    52c8:	e0da      	b.n	5480 <hci_cmd_handle+0x208>
	switch (BT_OGF(_opcode)) {
    52ca:	2b08      	cmp	r3, #8
    52cc:	d100      	bne.n	52d0 <hci_cmd_handle+0x58>
    52ce:	e0bd      	b.n	544c <hci_cmd_handle+0x1d4>
    52d0:	2b3f      	cmp	r3, #63	; 0x3f
    52d2:	d1f4      	bne.n	52be <hci_cmd_handle+0x46>
	switch (ocf) {
    52d4:	1e60      	subs	r0, r4, #1
    52d6:	2809      	cmp	r0, #9
    52d8:	d8f1      	bhi.n	52be <hci_cmd_handle+0x46>
    52da:	f7fa ff61 	bl	1a0 <__gnu_thumb1_case_shi>
    52de:	01ad      	.short	0x01ad
    52e0:	01d801c3 	.word	0x01d801c3
    52e4:	fff0fff0 	.word	0xfff0fff0
    52e8:	fff001f1 	.word	0xfff001f1
    52ec:	01f601e3 	.word	0x01f601e3
    52f0:	0228      	.short	0x0228
	switch (ocf) {
    52f2:	2c03      	cmp	r4, #3
    52f4:	d013      	beq.n	531e <hci_cmd_handle+0xa6>
    52f6:	d808      	bhi.n	530a <hci_cmd_handle+0x92>
    52f8:	2c01      	cmp	r4, #1
    52fa:	d1e0      	bne.n	52be <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    52fc:	68a8      	ldr	r0, [r5, #8]
    52fe:	f7ff ffa4 	bl	524a <sys_get_le64>
    5302:	4ba5      	ldr	r3, [pc, #660]	; (5598 <hci_cmd_handle+0x320>)
    5304:	6018      	str	r0, [r3, #0]
    5306:	6059      	str	r1, [r3, #4]
    5308:	e003      	b.n	5312 <hci_cmd_handle+0x9a>
	switch (ocf) {
    530a:	2c2d      	cmp	r4, #45	; 0x2d
    530c:	d015      	beq.n	533a <hci_cmd_handle+0xc2>
    530e:	2c63      	cmp	r4, #99	; 0x63
    5310:	d1d5      	bne.n	52be <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    5312:	2101      	movs	r1, #1
    5314:	a80d      	add	r0, sp, #52	; 0x34
    5316:	f7ff fee5 	bl	50e4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    531a:	7006      	strb	r6, [r0, #0]
    531c:	e024      	b.n	5368 <hci_cmd_handle+0xf0>
	event_mask = DEFAULT_EVENT_MASK;
    531e:	2001      	movs	r0, #1
    5320:	499e      	ldr	r1, [pc, #632]	; (559c <hci_cmd_handle+0x324>)
    5322:	4b9d      	ldr	r3, [pc, #628]	; (5598 <hci_cmd_handle+0x320>)
    5324:	4240      	negs	r0, r0
    5326:	6018      	str	r0, [r3, #0]
    5328:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    532a:	201f      	movs	r0, #31
    532c:	2100      	movs	r1, #0
    532e:	4b9c      	ldr	r3, [pc, #624]	; (55a0 <hci_cmd_handle+0x328>)
    5330:	6018      	str	r0, [r3, #0]
    5332:	6059      	str	r1, [r3, #4]
		ll_reset();
    5334:	f003 ffe0 	bl	92f8 <ll_reset>
    5338:	e7eb      	b.n	5312 <hci_cmd_handle+0x9a>
    533a:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    533c:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    533e:	785c      	ldrb	r4, [r3, #1]
    5340:	781a      	ldrb	r2, [r3, #0]
    5342:	0224      	lsls	r4, r4, #8
	rp = cmd_complete(evt, sizeof(*rp));
    5344:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    5346:	4314      	orrs	r4, r2
	type = cmd->type;
    5348:	789e      	ldrb	r6, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    534a:	f7ff fecb 	bl	50e4 <cmd_complete>
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    534e:	0031      	movs	r1, r6
	rp = cmd_complete(evt, sizeof(*rp));
    5350:	0005      	movs	r5, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    5352:	1cc2      	adds	r2, r0, #3
    5354:	0020      	movs	r0, r4
    5356:	f004 f869 	bl	942c <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    535a:	1e43      	subs	r3, r0, #1
    535c:	4198      	sbcs	r0, r3
	rp->handle = sys_cpu_to_le16(handle);
    535e:	706c      	strb	r4, [r5, #1]
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    5360:	0040      	lsls	r0, r0, #1
	rp->handle = sys_cpu_to_le16(handle);
    5362:	0a24      	lsrs	r4, r4, #8
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    5364:	7028      	strb	r0, [r5, #0]
	rp->handle = sys_cpu_to_le16(handle);
    5366:	70ac      	strb	r4, [r5, #2]
	return evt;
    5368:	980d      	ldr	r0, [sp, #52]	; 0x34
    536a:	e78e      	b.n	528a <hci_cmd_handle+0x12>
	switch (ocf) {
    536c:	1e60      	subs	r0, r4, #1
    536e:	2808      	cmp	r0, #8
    5370:	d8a5      	bhi.n	52be <hci_cmd_handle+0x46>
    5372:	f7fa ff01 	bl	178 <__gnu_thumb1_case_sqi>
    5376:	1805      	.short	0x1805
    5378:	a4a4a452 	.word	0xa4a4a452
    537c:	a4a4      	.short	0xa4a4
    537e:	60          	.byte	0x60
    537f:	00          	.byte	0x00
	rp = cmd_complete(evt, sizeof(*rp));
    5380:	2109      	movs	r1, #9
    5382:	a80d      	add	r0, sp, #52	; 0x34
    5384:	f7ff feae 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5388:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    538a:	2209      	movs	r2, #9
	rp->status = 0x00;
    538c:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    538e:	7083      	strb	r3, [r0, #2]
    5390:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    5392:	3b0f      	subs	r3, #15
    5394:	7143      	strb	r3, [r0, #5]
    5396:	3314      	adds	r3, #20
    5398:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    539a:	3b06      	subs	r3, #6
	rp->hci_version = BT_HCI_VERSION_5_0;
    539c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    539e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    53a0:	71c3      	strb	r3, [r0, #7]
    53a2:	7203      	strb	r3, [r0, #8]
    53a4:	e7e0      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    53a6:	2141      	movs	r1, #65	; 0x41
    53a8:	a80d      	add	r0, sp, #52	; 0x34
    53aa:	f7ff fe9b 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    53ae:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    53b0:	0004      	movs	r4, r0
	rp->status = 0x00;
    53b2:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    53b4:	2240      	movs	r2, #64	; 0x40
    53b6:	3001      	adds	r0, #1
    53b8:	f7fc f83c 	bl	1434 <memset>
	rp->commands[2] |= BIT(7);
    53bc:	2380      	movs	r3, #128	; 0x80
    53be:	78e2      	ldrb	r2, [r4, #3]
    53c0:	425b      	negs	r3, r3
    53c2:	431a      	orrs	r2, r3
    53c4:	70e2      	strb	r2, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    53c6:	2240      	movs	r2, #64	; 0x40
    53c8:	79a1      	ldrb	r1, [r4, #6]
    53ca:	4252      	negs	r2, r2
    53cc:	430a      	orrs	r2, r1
    53ce:	71a2      	strb	r2, [r4, #6]
	rp->commands[10] |= BIT(2);
    53d0:	2204      	movs	r2, #4
    53d2:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    53d4:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[10] |= BIT(2);
    53d6:	4311      	orrs	r1, r2
    53d8:	72e1      	strb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    53da:	2128      	movs	r1, #40	; 0x28
    53dc:	4301      	orrs	r1, r0
    53de:	73e1      	strb	r1, [r4, #15]
	rp->commands[15] |= BIT(1);
    53e0:	2102      	movs	r1, #2
    53e2:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    53e4:	7ea6      	ldrb	r6, [r4, #26]
	rp->commands[15] |= BIT(1);
    53e6:	4301      	orrs	r1, r0
    53e8:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
    53ea:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    53ec:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[22] |= BIT(2);
    53ee:	430a      	orrs	r2, r1
    53f0:	75e2      	strb	r2, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    53f2:	223d      	movs	r2, #61	; 0x3d
    53f4:	4252      	negs	r2, r2
    53f6:	4310      	orrs	r0, r2
    53f8:	7720      	strb	r0, [r4, #28]
	rp->commands[28] |= BIT(3);
    53fa:	2008      	movs	r0, #8
    53fc:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    53fe:	7ee5      	ldrb	r5, [r4, #27]
	rp->commands[28] |= BIT(3);
    5400:	4308      	orrs	r0, r1
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    5402:	2109      	movs	r1, #9
    5404:	4249      	negs	r1, r1
	rp->commands[26] |= BIT(0) | BIT(1);
    5406:	432a      	orrs	r2, r5
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    5408:	4331      	orrs	r1, r6
	rp->commands[28] |= BIT(3);
    540a:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    540c:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    540e:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    5410:	3408      	adds	r4, #8
    5412:	7fe2      	ldrb	r2, [r4, #31]
    5414:	4313      	orrs	r3, r2
    5416:	77e3      	strb	r3, [r4, #31]
    5418:	e7a6      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    541a:	2109      	movs	r1, #9
    541c:	a80d      	add	r0, sp, #52	; 0x34
    541e:	f7ff fe61 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5422:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5424:	0004      	movs	r4, r0
	rp->status = 0x00;
    5426:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5428:	2208      	movs	r2, #8
    542a:	3001      	adds	r0, #1
    542c:	f7fc f802 	bl	1434 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    5430:	2360      	movs	r3, #96	; 0x60
    5432:	7163      	strb	r3, [r4, #5]
    5434:	e798      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    5436:	2107      	movs	r1, #7
    5438:	a80d      	add	r0, sp, #52	; 0x34
    543a:	f7ff fe53 	bl	50e4 <cmd_complete>
    543e:	0001      	movs	r1, r0
	rp->status = 0x00;
    5440:	2000      	movs	r0, #0
    5442:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    5444:	3101      	adds	r1, #1
    5446:	f7ff fd37 	bl	4eb8 <ll_addr_get>
    544a:	e78d      	b.n	5368 <hci_cmd_handle+0xf0>
	switch (ocf) {
    544c:	2c0a      	cmp	r4, #10
    544e:	d100      	bne.n	5452 <hci_cmd_handle+0x1da>
    5450:	e0e4      	b.n	561c <hci_cmd_handle+0x3a4>
    5452:	d828      	bhi.n	54a6 <hci_cmd_handle+0x22e>
    5454:	2c05      	cmp	r4, #5
    5456:	d100      	bne.n	545a <hci_cmd_handle+0x1e2>
    5458:	e080      	b.n	555c <hci_cmd_handle+0x2e4>
    545a:	d813      	bhi.n	5484 <hci_cmd_handle+0x20c>
    545c:	2c02      	cmp	r4, #2
    545e:	d05f      	beq.n	5520 <hci_cmd_handle+0x2a8>
    5460:	2c03      	cmp	r4, #3
    5462:	d069      	beq.n	5538 <hci_cmd_handle+0x2c0>
    5464:	2c01      	cmp	r4, #1
    5466:	d000      	beq.n	546a <hci_cmd_handle+0x1f2>
    5468:	e729      	b.n	52be <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    546a:	68a8      	ldr	r0, [r5, #8]
    546c:	f7ff feed 	bl	524a <sys_get_le64>
    5470:	4b4b      	ldr	r3, [pc, #300]	; (55a0 <hci_cmd_handle+0x328>)
    5472:	6018      	str	r0, [r3, #0]
    5474:	6059      	str	r1, [r3, #4]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5476:	2101      	movs	r1, #1
    5478:	a80d      	add	r0, sp, #52	; 0x34
    547a:	f7ff fe33 	bl	50e4 <cmd_complete>
	ccst->status = 0x00;
    547e:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    5480:	7003      	strb	r3, [r0, #0]
    5482:	e771      	b.n	5368 <hci_cmd_handle+0xf0>
	switch (ocf) {
    5484:	2c07      	cmp	r4, #7
    5486:	d100      	bne.n	548a <hci_cmd_handle+0x212>
    5488:	e149      	b.n	571e <hci_cmd_handle+0x4a6>
    548a:	d200      	bcs.n	548e <hci_cmd_handle+0x216>
    548c:	e0a5      	b.n	55da <hci_cmd_handle+0x362>
    548e:	2c08      	cmp	r4, #8
    5490:	d100      	bne.n	5494 <hci_cmd_handle+0x21c>
    5492:	e0bd      	b.n	5610 <hci_cmd_handle+0x398>
    5494:	2c09      	cmp	r4, #9
    5496:	d000      	beq.n	549a <hci_cmd_handle+0x222>
    5498:	e711      	b.n	52be <hci_cmd_handle+0x46>
    549a:	68ab      	ldr	r3, [r5, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    549c:	1c59      	adds	r1, r3, #1
    549e:	7818      	ldrb	r0, [r3, #0]
    54a0:	f004 fcd4 	bl	9e4c <ll_scan_data_set>
    54a4:	e7e7      	b.n	5476 <hci_cmd_handle+0x1fe>
	switch (ocf) {
    54a6:	2c12      	cmp	r4, #18
    54a8:	d070      	beq.n	558c <hci_cmd_handle+0x314>
    54aa:	d810      	bhi.n	54ce <hci_cmd_handle+0x256>
    54ac:	2c10      	cmp	r4, #16
    54ae:	d060      	beq.n	5572 <hci_cmd_handle+0x2fa>
    54b0:	d868      	bhi.n	5584 <hci_cmd_handle+0x30c>
    54b2:	2c0f      	cmp	r4, #15
    54b4:	d000      	beq.n	54b8 <hci_cmd_handle+0x240>
    54b6:	e702      	b.n	52be <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    54b8:	2102      	movs	r1, #2
    54ba:	a80d      	add	r0, sp, #52	; 0x34
    54bc:	f7ff fe12 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    54c0:	2300      	movs	r3, #0
    54c2:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    54c4:	0004      	movs	r4, r0
	rp->wl_size = ll_wl_size_get();
    54c6:	f004 fd5d 	bl	9f84 <ll_wl_size_get>
    54ca:	7060      	strb	r0, [r4, #1]
    54cc:	e74c      	b.n	5368 <hci_cmd_handle+0xf0>
	switch (ocf) {
    54ce:	2c18      	cmp	r4, #24
    54d0:	d068      	beq.n	55a4 <hci_cmd_handle+0x32c>
    54d2:	d815      	bhi.n	5500 <hci_cmd_handle+0x288>
    54d4:	2c17      	cmp	r4, #23
    54d6:	d000      	beq.n	54da <hci_cmd_handle+0x262>
    54d8:	e6f1      	b.n	52be <hci_cmd_handle+0x46>
    54da:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    54dc:	2300      	movs	r3, #0
    54de:	0001      	movs	r1, r0
    54e0:	aa0e      	add	r2, sp, #56	; 0x38
    54e2:	3110      	adds	r1, #16
    54e4:	f004 ff62 	bl	a3ac <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    54e8:	2111      	movs	r1, #17
    54ea:	a80d      	add	r0, sp, #52	; 0x34
    54ec:	f7ff fdfa 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    54f0:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    54f2:	2210      	movs	r2, #16
	rp->status = 0x00;
    54f4:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    54f6:	3001      	adds	r0, #1
	memcpy(rp->info, build_info, sizeof(build_info));
    54f8:	a90e      	add	r1, sp, #56	; 0x38
    54fa:	f7fb ff71 	bl	13e0 <memcpy>
    54fe:	e733      	b.n	5368 <hci_cmd_handle+0xf0>
	switch (ocf) {
    5500:	2c1c      	cmp	r4, #28
    5502:	d05a      	beq.n	55ba <hci_cmd_handle+0x342>
    5504:	2c4b      	cmp	r4, #75	; 0x4b
    5506:	d000      	beq.n	550a <hci_cmd_handle+0x292>
    5508:	e6d9      	b.n	52be <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    550a:	2103      	movs	r1, #3
    550c:	a80d      	add	r0, sp, #52	; 0x34
    550e:	f7ff fde9 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5512:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    5514:	1c81      	adds	r1, r0, #2
	rp->status = 0x00;
    5516:	7003      	strb	r3, [r0, #0]
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    5518:	3001      	adds	r0, #1
    551a:	f7ff fd01 	bl	4f20 <ll_tx_pwr_get>
    551e:	e723      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    5520:	2104      	movs	r1, #4
    5522:	a80d      	add	r0, sp, #52	; 0x34
    5524:	f7ff fdde 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5528:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    552a:	211b      	movs	r1, #27
	rp->status = 0x00;
    552c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    552e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5530:	3302      	adds	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    5532:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5534:	70c3      	strb	r3, [r0, #3]
    5536:	e717      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    5538:	2109      	movs	r1, #9
    553a:	a80d      	add	r0, sp, #52	; 0x34
    553c:	f7ff fdd2 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5540:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5542:	0004      	movs	r4, r0
	rp->status = 0x00;
    5544:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5546:	2208      	movs	r2, #8
    5548:	3001      	adds	r0, #1
    554a:	f7fb ff73 	bl	1434 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    554e:	230c      	movs	r3, #12
    5550:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    5552:	3334      	adds	r3, #52	; 0x34
    5554:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    5556:	3b3f      	subs	r3, #63	; 0x3f
    5558:	70e3      	strb	r3, [r4, #3]
    555a:	e705      	b.n	5368 <hci_cmd_handle+0xf0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    555c:	68a9      	ldr	r1, [r5, #8]
    555e:	2001      	movs	r0, #1
    5560:	f7ff fcc2 	bl	4ee8 <ll_addr_set>
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    5564:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    5566:	2101      	movs	r1, #1
    5568:	a80d      	add	r0, sp, #52	; 0x34
    556a:	f7ff fdbb 	bl	50e4 <cmd_complete>
	ccst->status = status;
    556e:	7004      	strb	r4, [r0, #0]
    5570:	e6fa      	b.n	5368 <hci_cmd_handle+0xf0>
	ccst = cmd_complete(evt, sizeof(*ccst));
    5572:	2101      	movs	r1, #1
    5574:	a80d      	add	r0, sp, #52	; 0x34
    5576:	f7ff fdb5 	bl	50e4 <cmd_complete>
    557a:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    557c:	f004 fd04 	bl	9f88 <ll_wl_clear>
    5580:	7020      	strb	r0, [r4, #0]
    5582:	e6f1      	b.n	5368 <hci_cmd_handle+0xf0>
	status = ll_wl_add(&cmd->addr);
    5584:	68a8      	ldr	r0, [r5, #8]
    5586:	f004 fd15 	bl	9fb4 <ll_wl_add>
    558a:	e7eb      	b.n	5564 <hci_cmd_handle+0x2ec>
	status = ll_wl_remove(&cmd->addr);
    558c:	68a8      	ldr	r0, [r5, #8]
    558e:	f004 fd47 	bl	a020 <ll_wl_remove>
    5592:	e7e7      	b.n	5564 <hci_cmd_handle+0x2ec>
    5594:	20000280 	.word	0x20000280
    5598:	20002300 	.word	0x20002300
    559c:	00001fff 	.word	0x00001fff
    55a0:	20002308 	.word	0x20002308
	rp = cmd_complete(evt, sizeof(*rp));
    55a4:	2109      	movs	r1, #9
    55a6:	a80d      	add	r0, sp, #52	; 0x34
    55a8:	f7ff fd9c 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    55ac:	2300      	movs	r3, #0
	bt_rand(rp->rand, count);
    55ae:	2108      	movs	r1, #8
	rp->status = 0x00;
    55b0:	7003      	strb	r3, [r0, #0]
	bt_rand(rp->rand, count);
    55b2:	3001      	adds	r0, #1
    55b4:	f7ff fcb8 	bl	4f28 <bt_rand>
    55b8:	e6d6      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    55ba:	2109      	movs	r1, #9
    55bc:	a80d      	add	r0, sp, #52	; 0x34
    55be:	f7ff fd91 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    55c2:	2500      	movs	r5, #0
	sys_put_le64(states, rp->le_states);
    55c4:	1c41      	adds	r1, r0, #1
	rp = cmd_complete(evt, sizeof(*rp));
    55c6:	0004      	movs	r4, r0
	rp->status = 0x00;
    55c8:	7005      	strb	r5, [r0, #0]
	sys_put_le32(val, dst);
    55ca:	2003      	movs	r0, #3
    55cc:	f7ff fd78 	bl	50c0 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    55d0:	0028      	movs	r0, r5
    55d2:	1d61      	adds	r1, r4, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    55d4:	f7ff fd74 	bl	50c0 <sys_put_le32>
    55d8:	e6c6      	b.n	5368 <hci_cmd_handle+0xf0>
    55da:	68a9      	ldr	r1, [r5, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    55dc:	784a      	ldrb	r2, [r1, #1]
    55de:	7808      	ldrb	r0, [r1, #0]
    55e0:	0212      	lsls	r2, r2, #8
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    55e2:	4302      	orrs	r2, r0
    55e4:	2000      	movs	r0, #0
    55e6:	790b      	ldrb	r3, [r1, #4]
    55e8:	900a      	str	r0, [sp, #40]	; 0x28
    55ea:	9009      	str	r0, [sp, #36]	; 0x24
    55ec:	9008      	str	r0, [sp, #32]
    55ee:	9007      	str	r0, [sp, #28]
    55f0:	9006      	str	r0, [sp, #24]
    55f2:	9005      	str	r0, [sp, #20]
    55f4:	7b8c      	ldrb	r4, [r1, #14]
    55f6:	9404      	str	r4, [sp, #16]
    55f8:	7b4c      	ldrb	r4, [r1, #13]
    55fa:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    55fc:	1dcc      	adds	r4, r1, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    55fe:	9402      	str	r4, [sp, #8]
    5600:	798c      	ldrb	r4, [r1, #6]
    5602:	9401      	str	r4, [sp, #4]
    5604:	7949      	ldrb	r1, [r1, #5]
    5606:	9100      	str	r1, [sp, #0]
    5608:	0001      	movs	r1, r0
    560a:	f004 facd 	bl	9ba8 <ll_adv_params_set>
    560e:	e7a9      	b.n	5564 <hci_cmd_handle+0x2ec>
    5610:	68ab      	ldr	r3, [r5, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    5612:	1c59      	adds	r1, r3, #1
    5614:	7818      	ldrb	r0, [r3, #0]
    5616:	f004 fbc1 	bl	9d9c <ll_adv_data_set>
    561a:	e72c      	b.n	5476 <hci_cmd_handle+0x1fe>
	status = ll_adv_enable(cmd->enable);
    561c:	68ab      	ldr	r3, [r5, #8]
    561e:	7818      	ldrb	r0, [r3, #0]
    5620:	f004 fc50 	bl	9ec4 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    5624:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    5626:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    5628:	a80d      	add	r0, sp, #52	; 0x34
    562a:	f7ff fd5b 	bl	50e4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    562e:	2c00      	cmp	r4, #0
    5630:	d100      	bne.n	5634 <hci_cmd_handle+0x3bc>
    5632:	e672      	b.n	531a <hci_cmd_handle+0xa2>
    5634:	260c      	movs	r6, #12
    5636:	e670      	b.n	531a <hci_cmd_handle+0xa2>
	rp = cmd_complete(evt, sizeof(*rp));
    5638:	210d      	movs	r1, #13
    563a:	a80d      	add	r0, sp, #52	; 0x34
    563c:	f7ff fd52 	bl	50e4 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    5640:	2102      	movs	r1, #2
	rp->status = 0x00;
    5642:	2300      	movs	r3, #0
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    5644:	2201      	movs	r2, #1
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    5646:	7041      	strb	r1, [r0, #1]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5648:	210b      	movs	r1, #11
	rp->status = 0x00;
    564a:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    564c:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    564e:	70c2      	strb	r2, [r0, #3]
    5650:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    5652:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    5654:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5656:	71c1      	strb	r1, [r0, #7]
    5658:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    565a:	7243      	strb	r3, [r0, #9]
    565c:	7283      	strb	r3, [r0, #10]
    565e:	72c3      	strb	r3, [r0, #11]
    5660:	7303      	strb	r3, [r0, #12]
    5662:	e681      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    5664:	2141      	movs	r1, #65	; 0x41
    5666:	a80d      	add	r0, sp, #52	; 0x34
    5668:	f7ff fd3c 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    566c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    566e:	0004      	movs	r4, r0
	rp->status = 0x00;
    5670:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5672:	2240      	movs	r2, #64	; 0x40
    5674:	3001      	adds	r0, #1
    5676:	f7fb fedd 	bl	1434 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    567a:	2359      	movs	r3, #89	; 0x59
    567c:	7862      	ldrb	r2, [r4, #1]
    567e:	425b      	negs	r3, r3
    5680:	4313      	orrs	r3, r2
    5682:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    5684:	2303      	movs	r3, #3
    5686:	78a2      	ldrb	r2, [r4, #2]
    5688:	4313      	orrs	r3, r2
    568a:	70a3      	strb	r3, [r4, #2]
    568c:	e66c      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    568e:	2109      	movs	r1, #9
    5690:	a80d      	add	r0, sp, #52	; 0x34
    5692:	f7ff fd27 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5696:	2100      	movs	r1, #0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5698:	2208      	movs	r2, #8
	rp->status = 0x00;
    569a:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    569c:	3001      	adds	r0, #1
		memset(rp->er, 0x00, sizeof(rp->er));
    569e:	f7fb fec9 	bl	1434 <memset>
    56a2:	e661      	b.n	5368 <hci_cmd_handle+0xf0>
	const char build_info[] = HCI_VS_BUILD_INFO;
    56a4:	2227      	movs	r2, #39	; 0x27
    56a6:	494e      	ldr	r1, [pc, #312]	; (57e0 <hci_cmd_handle+0x568>)
    56a8:	a80e      	add	r0, sp, #56	; 0x38
    56aa:	f7fb fe99 	bl	13e0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    56ae:	2128      	movs	r1, #40	; 0x28
    56b0:	a80d      	add	r0, sp, #52	; 0x34
    56b2:	f7ff fd17 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    56b6:	2300      	movs	r3, #0
	memcpy(rp->info, build_info, sizeof(build_info));
    56b8:	2227      	movs	r2, #39	; 0x27
	rp->status = 0x00;
    56ba:	7003      	strb	r3, [r0, #0]
	memcpy(rp->info, build_info, sizeof(build_info));
    56bc:	3001      	adds	r0, #1
    56be:	e71b      	b.n	54f8 <hci_cmd_handle+0x280>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    56c0:	68a9      	ldr	r1, [r5, #8]
    56c2:	2000      	movs	r0, #0
    56c4:	f7ff fc10 	bl	4ee8 <ll_addr_set>
    56c8:	e6d5      	b.n	5476 <hci_cmd_handle+0x1fe>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    56ca:	4e46      	ldr	r6, [pc, #280]	; (57e4 <hci_cmd_handle+0x56c>)
    56cc:	6833      	ldr	r3, [r6, #0]
    56ce:	3301      	adds	r3, #1
    56d0:	d105      	bne.n	56de <hci_cmd_handle+0x466>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    56d2:	4b45      	ldr	r3, [pc, #276]	; (57e8 <hci_cmd_handle+0x570>)
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    56d4:	4a45      	ldr	r2, [pc, #276]	; (57ec <hci_cmd_handle+0x574>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    56da:	4293      	cmp	r3, r2
    56dc:	d01f      	beq.n	571e <hci_cmd_handle+0x4a6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    56de:	2701      	movs	r7, #1
    56e0:	4b43      	ldr	r3, [pc, #268]	; (57f0 <hci_cmd_handle+0x578>)
    56e2:	681b      	ldr	r3, [r3, #0]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    56e4:	423b      	tst	r3, r7
    56e6:	d01a      	beq.n	571e <hci_cmd_handle+0x4a6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    56e8:	2118      	movs	r1, #24
    56ea:	a80d      	add	r0, sp, #52	; 0x34
    56ec:	f7ff fcfa 	bl	50e4 <cmd_complete>
		rp->status = 0x00;
    56f0:	2500      	movs	r5, #0
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    56f2:	0004      	movs	r4, r0
		rp->status = 0x00;
    56f4:	7005      	strb	r5, [r0, #0]
		rp->num_addrs = 1;
    56f6:	7047      	strb	r7, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    56f8:	6830      	ldr	r0, [r6, #0]
    56fa:	1ca6      	adds	r6, r4, #2
    56fc:	0031      	movs	r1, r6
    56fe:	f7ff fcdf 	bl	50c0 <sys_put_le32>
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    5702:	2240      	movs	r2, #64	; 0x40
		memset(addr->ir, 0x00, sizeof(addr->ir));
    5704:	0020      	movs	r0, r4
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    5706:	4b38      	ldr	r3, [pc, #224]	; (57e8 <hci_cmd_handle+0x570>)
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    5708:	4252      	negs	r2, r2
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    570a:	681b      	ldr	r3, [r3, #0]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    570c:	3008      	adds	r0, #8
	dst[0] = val;
    570e:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    5710:	b29b      	uxth	r3, r3
    5712:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    5714:	4313      	orrs	r3, r2
    5716:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    5718:	3250      	adds	r2, #80	; 0x50
    571a:	0029      	movs	r1, r5
    571c:	e7bf      	b.n	569e <hci_cmd_handle+0x426>
	rp = cmd_complete(evt, sizeof(*rp));
    571e:	2102      	movs	r1, #2
    5720:	a80d      	add	r0, sp, #52	; 0x34
    5722:	f7ff fcdf 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5726:	2300      	movs	r3, #0
    5728:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    572a:	7043      	strb	r3, [r0, #1]
    572c:	e61c      	b.n	5368 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    572e:	2121      	movs	r1, #33	; 0x21
    5730:	a80d      	add	r0, sp, #52	; 0x34
    5732:	f7ff fcd7 	bl	50e4 <cmd_complete>
	rp->status = 0x00;
    5736:	2300      	movs	r3, #0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5738:	4a2e      	ldr	r2, [pc, #184]	; (57f4 <hci_cmd_handle+0x57c>)
	rp->status = 0x00;
    573a:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    573c:	6811      	ldr	r1, [r2, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    573e:	0004      	movs	r4, r0
    5740:	1c43      	adds	r3, r0, #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5742:	3101      	adds	r1, #1
    5744:	d041      	beq.n	57ca <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    5746:	4f2c      	ldr	r7, [pc, #176]	; (57f8 <hci_cmd_handle+0x580>)
    5748:	6839      	ldr	r1, [r7, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    574a:	3101      	adds	r1, #1
    574c:	d03d      	beq.n	57ca <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    574e:	4e2b      	ldr	r6, [pc, #172]	; (57fc <hci_cmd_handle+0x584>)
    5750:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    5752:	3101      	adds	r1, #1
    5754:	d039      	beq.n	57ca <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    5756:	4d2a      	ldr	r5, [pc, #168]	; (5800 <hci_cmd_handle+0x588>)
    5758:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    575a:	3101      	adds	r1, #1
    575c:	d035      	beq.n	57ca <hci_cmd_handle+0x552>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    575e:	6810      	ldr	r0, [r2, #0]
    5760:	0019      	movs	r1, r3
    5762:	f7ff fcad 	bl	50c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    5766:	6838      	ldr	r0, [r7, #0]
    5768:	1d61      	adds	r1, r4, #5
    576a:	f7ff fca9 	bl	50c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    576e:	0021      	movs	r1, r4
    5770:	6830      	ldr	r0, [r6, #0]
    5772:	3109      	adds	r1, #9
    5774:	f7ff fca4 	bl	50c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    5778:	0021      	movs	r1, r4
    577a:	6828      	ldr	r0, [r5, #0]
    577c:	310d      	adds	r1, #13
    577e:	f7ff fc9f 	bl	50c0 <sys_put_le32>
    5782:	0023      	movs	r3, r4
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5784:	4a1f      	ldr	r2, [pc, #124]	; (5804 <hci_cmd_handle+0x58c>)
    5786:	3311      	adds	r3, #17
    5788:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    578a:	3101      	adds	r1, #1
    578c:	d023      	beq.n	57d6 <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    578e:	4f1e      	ldr	r7, [pc, #120]	; (5808 <hci_cmd_handle+0x590>)
    5790:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5792:	3101      	adds	r1, #1
    5794:	d01f      	beq.n	57d6 <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5796:	4e1d      	ldr	r6, [pc, #116]	; (580c <hci_cmd_handle+0x594>)
    5798:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    579a:	3101      	adds	r1, #1
    579c:	d01b      	beq.n	57d6 <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    579e:	4d1c      	ldr	r5, [pc, #112]	; (5810 <hci_cmd_handle+0x598>)
    57a0:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    57a2:	3101      	adds	r1, #1
    57a4:	d017      	beq.n	57d6 <hci_cmd_handle+0x55e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    57a6:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    57a8:	0019      	movs	r1, r3
    57aa:	f7ff fc89 	bl	50c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    57ae:	0021      	movs	r1, r4
    57b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    57b2:	3115      	adds	r1, #21
    57b4:	f7ff fc84 	bl	50c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    57b8:	0021      	movs	r1, r4
    57ba:	6830      	ldr	r0, [r6, #0]
    57bc:	3119      	adds	r1, #25
    57be:	f7ff fc7f 	bl	50c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    57c2:	0021      	movs	r1, r4
    57c4:	6828      	ldr	r0, [r5, #0]
    57c6:	311d      	adds	r1, #29
    57c8:	e704      	b.n	55d4 <hci_cmd_handle+0x35c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    57ca:	2210      	movs	r2, #16
    57cc:	2100      	movs	r1, #0
    57ce:	0018      	movs	r0, r3
    57d0:	f7fb fe30 	bl	1434 <memset>
    57d4:	e7d5      	b.n	5782 <hci_cmd_handle+0x50a>
		memset(rp->er, 0x00, sizeof(rp->er));
    57d6:	2210      	movs	r2, #16
    57d8:	2100      	movs	r1, #0
    57da:	0018      	movs	r0, r3
    57dc:	e75f      	b.n	569e <hci_cmd_handle+0x426>
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	0000ca53 	.word	0x0000ca53
    57e4:	100000a4 	.word	0x100000a4
    57e8:	100000a8 	.word	0x100000a8
    57ec:	0000ffff 	.word	0x0000ffff
    57f0:	100000a0 	.word	0x100000a0
    57f4:	10000090 	.word	0x10000090
    57f8:	10000094 	.word	0x10000094
    57fc:	10000098 	.word	0x10000098
    5800:	1000009c 	.word	0x1000009c
    5804:	10000004 	.word	0x10000004
    5808:	10000008 	.word	0x10000008
    580c:	10000088 	.word	0x10000088
    5810:	1000008c 	.word	0x1000008c

00005814 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    5814:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;
    5816:	0007      	movs	r7, r0
{
    5818:	0004      	movs	r4, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    581a:	7900      	ldrb	r0, [r0, #4]
{
    581c:	b08d      	sub	sp, #52	; 0x34
    581e:	000e      	movs	r6, r1
	pdu_data = (void *)node_rx->pdu_data;
    5820:	3708      	adds	r7, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    5822:	2801      	cmp	r0, #1
    5824:	d100      	bne.n	5828 <hci_evt_encode+0x14>
    5826:	e088      	b.n	593a <hci_evt_encode+0x126>
	switch (node_rx->hdr.type) {
    5828:	3802      	subs	r0, #2
    582a:	2803      	cmp	r0, #3
    582c:	d900      	bls.n	5830 <hci_evt_encode+0x1c>
    582e:	e0be      	b.n	59ae <hci_evt_encode+0x19a>
    5830:	f7fa fcac 	bl	18c <__gnu_thumb1_case_uqi>
    5834:	584c4c02 	.word	0x584c4c02
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    5838:	2201      	movs	r2, #1
    583a:	2500      	movs	r5, #0
    583c:	2104      	movs	r1, #4
    583e:	ab05      	add	r3, sp, #20
    5840:	705a      	strb	r2, [r3, #1]
    5842:	3202      	adds	r2, #2
    5844:	709a      	strb	r2, [r3, #2]
    5846:	32fc      	adds	r2, #252	; 0xfc
    5848:	715a      	strb	r2, [r3, #5]
    584a:	70da      	strb	r2, [r3, #3]
    584c:	3afd      	subs	r2, #253	; 0xfd
    584e:	7119      	strb	r1, [r3, #4]
    5850:	719a      	strb	r2, [r3, #6]
    5852:	701d      	strb	r5, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    5854:	4b57      	ldr	r3, [pc, #348]	; (59b4 <hci_evt_encode+0x1a0>)
    5856:	685b      	ldr	r3, [r3, #4]
    5858:	009b      	lsls	r3, r3, #2
    585a:	d535      	bpl.n	58c8 <hci_evt_encode+0xb4>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    585c:	4b56      	ldr	r3, [pc, #344]	; (59b8 <hci_evt_encode+0x1a4>)
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	4213      	tst	r3, r2
    5862:	d031      	beq.n	58c8 <hci_evt_encode+0xb4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    5864:	230f      	movs	r3, #15
    5866:	7a22      	ldrb	r2, [r4, #8]
    5868:	401a      	ands	r2, r3
    586a:	7a63      	ldrb	r3, [r4, #9]
    586c:	2a01      	cmp	r2, #1
    586e:	d001      	beq.n	5874 <hci_evt_encode+0x60>
		data_len = (adv->len - BDADDR_SIZE);
    5870:	1f9d      	subs	r5, r3, #6
    5872:	b2ed      	uxtb	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    5874:	002a      	movs	r2, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5876:	18e3      	adds	r3, r4, r3
    5878:	7a9b      	ldrb	r3, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    587a:	320b      	adds	r2, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    587c:	425b      	negs	r3, r3
    587e:	b25b      	sxtb	r3, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    5880:	b2d2      	uxtb	r2, r2
    5882:	2102      	movs	r1, #2
    5884:	0030      	movs	r0, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5886:	9301      	str	r3, [sp, #4]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    5888:	f7ff fc4e 	bl	5128 <meta_evt>
	sep->num_reports = 1;
    588c:	2301      	movs	r3, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    588e:	0021      	movs	r1, r4
	sep->num_reports = 1;
    5890:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    5892:	7a23      	ldrb	r3, [r4, #8]
    5894:	aa05      	add	r2, sp, #20
    5896:	071b      	lsls	r3, r3, #28
    5898:	0f1b      	lsrs	r3, r3, #28
    589a:	5cd3      	ldrb	r3, [r2, r3]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    589c:	0006      	movs	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    589e:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    58a0:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    58a2:	310a      	adds	r1, #10
		adv_info->addr.type = adv->tx_addr;
    58a4:	065b      	lsls	r3, r3, #25
    58a6:	0fdb      	lsrs	r3, r3, #31
    58a8:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    58aa:	2206      	movs	r2, #6
    58ac:	3003      	adds	r0, #3
    58ae:	f7fb fd97 	bl	13e0 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    58b2:	0039      	movs	r1, r7
	adv_info->length = data_len;
    58b4:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    58b6:	360a      	adds	r6, #10
    58b8:	3108      	adds	r1, #8
    58ba:	002a      	movs	r2, r5
    58bc:	0030      	movs	r0, r6
    58be:	f7fb fd8f 	bl	13e0 <memcpy>
	*prssi = rssi;
    58c2:	466b      	mov	r3, sp
    58c4:	791b      	ldrb	r3, [r3, #4]
    58c6:	5573      	strb	r3, [r6, r5]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    58c8:	b00d      	add	sp, #52	; 0x34
    58ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    58cc:	220f      	movs	r2, #15
    58ce:	7a23      	ldrb	r3, [r4, #8]
    58d0:	4013      	ands	r3, r2
    58d2:	2b07      	cmp	r3, #7
    58d4:	d1f8      	bne.n	58c8 <hci_evt_encode+0xb4>
    58d6:	7a63      	ldrb	r3, [r4, #9]
    58d8:	2b00      	cmp	r3, #0
    58da:	d0f5      	beq.n	58c8 <hci_evt_encode+0xb4>
    58dc:	0038      	movs	r0, r7
    58de:	f7ff fc9b 	bl	5218 <le_adv_ext_report.isra.37.part.38>
    58e2:	e7f1      	b.n	58c8 <hci_evt_encode+0xb4>
    58e4:	0025      	movs	r5, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    58e6:	4b33      	ldr	r3, [pc, #204]	; (59b4 <hci_evt_encode+0x1a0>)
    58e8:	350a      	adds	r5, #10
    58ea:	685b      	ldr	r3, [r3, #4]
    58ec:	009b      	lsls	r3, r3, #2
    58ee:	d503      	bpl.n	58f8 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    58f0:	4b31      	ldr	r3, [pc, #196]	; (59b8 <hci_evt_encode+0x1a4>)
    58f2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    58f4:	035b      	lsls	r3, r3, #13
    58f6:	d40f      	bmi.n	5918 <hci_evt_encode+0x104>
		addr.type = adv->tx_addr;
    58f8:	7a23      	ldrb	r3, [r4, #8]
    58fa:	ae03      	add	r6, sp, #12
    58fc:	065b      	lsls	r3, r3, #25
    58fe:	0fdb      	lsrs	r3, r3, #31
    5900:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    5902:	ab02      	add	r3, sp, #8
    5904:	0029      	movs	r1, r5
    5906:	2206      	movs	r2, #6
    5908:	1d58      	adds	r0, r3, #5
    590a:	f7fb fd69 	bl	13e0 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    590e:	a905      	add	r1, sp, #20
    5910:	0030      	movs	r0, r6
    5912:	f7ff fc45 	bl	51a0 <bt_addr_le_to_str.constprop.42>
    5916:	e7d7      	b.n	58c8 <hci_evt_encode+0xb4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    5918:	2208      	movs	r2, #8
    591a:	2113      	movs	r1, #19
    591c:	0030      	movs	r0, r6
    591e:	f7ff fc03 	bl	5128 <meta_evt>
	sep->handle = 0;
    5922:	2300      	movs	r3, #0
    5924:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    5926:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    5928:	2206      	movs	r2, #6
	sep->addr.type = adv->tx_addr;
    592a:	065b      	lsls	r3, r3, #25
    592c:	0fdb      	lsrs	r3, r3, #31
    592e:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    5930:	0029      	movs	r1, r5
    5932:	3002      	adds	r0, #2
    5934:	f7fb fd54 	bl	13e0 <memcpy>
    5938:	e7c6      	b.n	58c8 <hci_evt_encode+0xb4>
	switch (pdu_data->llctrl.opcode) {
    593a:	7ae1      	ldrb	r1, [r4, #11]
    593c:	88e5      	ldrh	r5, [r4, #6]
    593e:	2909      	cmp	r1, #9
    5940:	d00b      	beq.n	595a <hci_evt_encode+0x146>
    5942:	290c      	cmp	r1, #12
    5944:	d010      	beq.n	5968 <hci_evt_encode+0x154>
    5946:	2907      	cmp	r1, #7
    5948:	d131      	bne.n	59ae <hci_evt_encode+0x19a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    594a:	7b23      	ldrb	r3, [r4, #12]
    594c:	2b0e      	cmp	r3, #14
    594e:	d1bb      	bne.n	58c8 <hci_evt_encode+0xb4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    5950:	0033      	movs	r3, r6
    5952:	002a      	movs	r2, r5
    5954:	2100      	movs	r1, #0
    5956:	201a      	movs	r0, #26
    5958:	e003      	b.n	5962 <hci_evt_encode+0x14e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    595a:	0033      	movs	r3, r6
    595c:	002a      	movs	r2, r5
    595e:	0039      	movs	r1, r7
    5960:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    5962:	f7ff fbf5 	bl	5150 <le_remote_feat_complete>
    5966:	e7af      	b.n	58c8 <hci_evt_encode+0xb4>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    5968:	4b12      	ldr	r3, [pc, #72]	; (59b4 <hci_evt_encode+0x1a0>)
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	051b      	lsls	r3, r3, #20
    596e:	d5ab      	bpl.n	58c8 <hci_evt_encode+0xb4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    5970:	2208      	movs	r2, #8
    5972:	0030      	movs	r0, r6
    5974:	f7ff fbac 	bl	50d0 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    5978:	0030      	movs	r0, r6
    597a:	2108      	movs	r1, #8
    597c:	3008      	adds	r0, #8
    597e:	f005 fa15 	bl	adac <net_buf_simple_add>
	ep->status = 0x00;
    5982:	2300      	movs	r3, #0
    5984:	7003      	strb	r3, [r0, #0]
	ep->version = ver_ind->version_number;
    5986:	7b23      	ldrb	r3, [r4, #12]
	ep->handle = sys_cpu_to_le16(handle);
    5988:	7045      	strb	r5, [r0, #1]
    598a:	0a2d      	lsrs	r5, r5, #8
	ep->version = ver_ind->version_number;
    598c:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    598e:	7085      	strb	r5, [r0, #2]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    5990:	7ba3      	ldrb	r3, [r4, #14]
    5992:	7b62      	ldrb	r2, [r4, #13]
    5994:	021b      	lsls	r3, r3, #8
    5996:	4313      	orrs	r3, r2
    5998:	7103      	strb	r3, [r0, #4]
    599a:	0a1b      	lsrs	r3, r3, #8
    599c:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    599e:	7c23      	ldrb	r3, [r4, #16]
    59a0:	7be2      	ldrb	r2, [r4, #15]
    59a2:	021b      	lsls	r3, r3, #8
    59a4:	4313      	orrs	r3, r2
    59a6:	7183      	strb	r3, [r0, #6]
    59a8:	0a1b      	lsrs	r3, r3, #8
    59aa:	71c3      	strb	r3, [r0, #7]
    59ac:	e78c      	b.n	58c8 <hci_evt_encode+0xb4>
		LL_ASSERT(0);
    59ae:	b662      	cpsie	i
    59b0:	2004      	movs	r0, #4
    59b2:	df02      	svc	2
    59b4:	20002300 	.word	0x20002300
    59b8:	20002308 	.word	0x20002308

000059bc <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    59bc:	7903      	ldrb	r3, [r0, #4]
    59be:	2b01      	cmp	r3, #1
    59c0:	d012      	beq.n	59e8 <hci_get_class+0x2c>
    59c2:	2b0a      	cmp	r3, #10
    59c4:	d818      	bhi.n	59f8 <hci_get_class+0x3c>
    59c6:	2201      	movs	r2, #1
    59c8:	0011      	movs	r1, r2
    59ca:	4099      	lsls	r1, r3
    59cc:	000b      	movs	r3, r1
    59ce:	21b0      	movs	r1, #176	; 0xb0
    59d0:	00c9      	lsls	r1, r1, #3
		case NODE_RX_TYPE_CHAN_SEL_ALGO:
#endif
#if defined(CONFIG_BT_CTLR_PHY)
		case NODE_RX_TYPE_PHY_UPDATE:
#endif /* CONFIG_BT_CTLR_PHY */
			return HCI_CLASS_EVT_CONNECTION;
    59d2:	2002      	movs	r0, #2
    59d4:	420b      	tst	r3, r1
    59d6:	d10e      	bne.n	59f6 <hci_get_class+0x3a>
    59d8:	213c      	movs	r1, #60	; 0x3c
			return HCI_CLASS_EVT_DISCARDABLE;
    59da:	0010      	movs	r0, r2
    59dc:	420b      	tst	r3, r1
    59de:	d10a      	bne.n	59f6 <hci_get_class+0x3a>
    59e0:	099b      	lsrs	r3, r3, #6
    59e2:	4398      	bics	r0, r3
		default:
			return -1;
    59e4:	4240      	negs	r0, r0
    59e6:	e006      	b.n	59f6 <hci_get_class+0x3a>
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    59e8:	2303      	movs	r3, #3
    59ea:	7a00      	ldrb	r0, [r0, #8]
    59ec:	4018      	ands	r0, r3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    59ee:	3803      	subs	r0, #3
    59f0:	1e43      	subs	r3, r0, #1
    59f2:	4198      	sbcs	r0, r3
    59f4:	3002      	adds	r0, #2
	}
}
    59f6:	4770      	bx	lr
			return -1;
    59f8:	2001      	movs	r0, #1
    59fa:	e7f3      	b.n	59e4 <hci_get_class+0x28>

000059fc <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    59fc:	2001      	movs	r0, #1
    59fe:	4b05      	ldr	r3, [pc, #20]	; (5a14 <hci_init+0x18>)
    5a00:	4905      	ldr	r1, [pc, #20]	; (5a18 <hci_init+0x1c>)
    5a02:	4240      	negs	r0, r0
    5a04:	6018      	str	r0, [r3, #0]
    5a06:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    5a08:	201f      	movs	r0, #31
    5a0a:	2100      	movs	r1, #0
    5a0c:	4b03      	ldr	r3, [pc, #12]	; (5a1c <hci_init+0x20>)
    5a0e:	6018      	str	r0, [r3, #0]
    5a10:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    5a12:	4770      	bx	lr
    5a14:	20002300 	.word	0x20002300
    5a18:	00001fff 	.word	0x00001fff
    5a1c:	20002308 	.word	0x20002308

00005a20 <cpu_sleep>:
	__WFE();
    5a20:	bf20      	wfe
	__SEV();
    5a22:	bf40      	sev
	__WFE();
    5a24:	bf20      	wfe
}
    5a26:	4770      	bx	lr

00005a28 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    5a28:	b570      	push	{r4, r5, r6, lr}
    5a2a:	0006      	movs	r6, r0
    5a2c:	000d      	movs	r5, r1
    5a2e:	b088      	sub	sp, #32
	const u8_t ctrl_len_lut[] = {
    5a30:	ac01      	add	r4, sp, #4
    5a32:	221a      	movs	r2, #26
    5a34:	4905      	ldr	r1, [pc, #20]	; (5a4c <pdu_len_cmp+0x24>)
    5a36:	0020      	movs	r0, r4
    5a38:	f7fb fcd2 	bl	13e0 <memcpy>
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    5a3c:	5da0      	ldrb	r0, [r4, r6]
    5a3e:	1b40      	subs	r0, r0, r5
    5a40:	4243      	negs	r3, r0
    5a42:	4158      	adcs	r0, r3
    5a44:	b2c0      	uxtb	r0, r0
}
    5a46:	b008      	add	sp, #32
    5a48:	bd70      	pop	{r4, r5, r6, pc}
    5a4a:	46c0      	nop			; (mov r8, r8)
    5a4c:	0000c3e3 	.word	0x0000c3e3

00005a50 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    5a50:	6008      	str	r0, [r1, #0]
}
    5a52:	4770      	bx	lr

00005a54 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5a54:	2800      	cmp	r0, #0
    5a56:	d104      	bne.n	5a62 <prepare_reduced+0xe>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    5a58:	2380      	movs	r3, #128	; 0x80
    5a5a:	680a      	ldr	r2, [r1, #0]
    5a5c:	061b      	lsls	r3, r3, #24
    5a5e:	4313      	orrs	r3, r2
    5a60:	600b      	str	r3, [r1, #0]
	}
}
    5a62:	4770      	bx	lr

00005a64 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5a64:	2800      	cmp	r0, #0
    5a66:	d103      	bne.n	5a70 <prepare_normal+0xc>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    5a68:	680b      	ldr	r3, [r1, #0]
    5a6a:	005b      	lsls	r3, r3, #1
    5a6c:	085b      	lsrs	r3, r3, #1
    5a6e:	600b      	str	r3, [r1, #0]
	}
}
    5a70:	4770      	bx	lr

00005a72 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    5a72:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a74:	0002      	movs	r2, r0
    5a76:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    5a78:	2701      	movs	r7, #1
	chan_next = 0;
    5a7a:	2000      	movs	r0, #0
	while (byte_count--) {
    5a7c:	42b2      	cmp	r2, r6
    5a7e:	d100      	bne.n	5a82 <chan_sel_remap+0x10>

		chan_map++;
	}

	return chan_next;
}
    5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a82:	0004      	movs	r4, r0
		bite = *chan_map;
    5a84:	7815      	ldrb	r5, [r2, #0]
    5a86:	3408      	adds	r4, #8
    5a88:	b2e4      	uxtb	r4, r4
		while (bit_count--) {
    5a8a:	42a0      	cmp	r0, r4
    5a8c:	d101      	bne.n	5a92 <chan_sel_remap+0x20>
		chan_map++;
    5a8e:	3201      	adds	r2, #1
    5a90:	e7f4      	b.n	5a7c <chan_sel_remap+0xa>
			if (bite & 0x01) {
    5a92:	423d      	tst	r5, r7
    5a94:	d003      	beq.n	5a9e <chan_sel_remap+0x2c>
				if (chan_index == 0) {
    5a96:	2900      	cmp	r1, #0
    5a98:	d0f2      	beq.n	5a80 <chan_sel_remap+0xe>
				chan_index--;
    5a9a:	3901      	subs	r1, #1
    5a9c:	b2c9      	uxtb	r1, r1
			chan_next++;
    5a9e:	3001      	adds	r0, #1
    5aa0:	b2c0      	uxtb	r0, r0
			bite >>= 1;
    5aa2:	086d      	lsrs	r5, r5, #1
    5aa4:	e7f1      	b.n	5a8a <chan_sel_remap+0x18>
	...

00005aa8 <packet_rx_reserve_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    5aa8:	239b      	movs	r3, #155	; 0x9b
	    _radio.packet_rx_last) {
    5aaa:	2136      	movs	r1, #54	; 0x36
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    5aac:	b530      	push	{r4, r5, lr}
	if (_radio.packet_rx_acquire >=
    5aae:	4a0d      	ldr	r2, [pc, #52]	; (5ae4 <packet_rx_reserve_get+0x3c>)
    5ab0:	005b      	lsls	r3, r3, #1
	    _radio.packet_rx_last) {
    5ab2:	31ff      	adds	r1, #255	; 0xff
	if (_radio.packet_rx_acquire >=
    5ab4:	5cd3      	ldrb	r3, [r2, r3]
	    _radio.packet_rx_last) {
    5ab6:	5c54      	ldrb	r4, [r2, r1]
	if (_radio.packet_rx_acquire >=
    5ab8:	42a3      	cmp	r3, r4
    5aba:	d30c      	bcc.n	5ad6 <packet_rx_reserve_get+0x2e>
			_radio.packet_rx_last);
    5abc:	5c54      	ldrb	r4, [r2, r1]
			_radio.packet_rx_last +
    5abe:	1b1b      	subs	r3, r3, r4
    5ac0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
		return 0;
    5ac2:	2400      	movs	r4, #0
	if (count > packet_rx_acquired_count_get()) {
    5ac4:	4298      	cmp	r0, r3
    5ac6:	d804      	bhi.n	5ad2 <packet_rx_reserve_get+0x2a>
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    5ac8:	5c53      	ldrb	r3, [r2, r1]
    5aca:	32fc      	adds	r2, #252	; 0xfc
    5acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
    5ace:	009b      	lsls	r3, r3, #2
    5ad0:	589c      	ldr	r4, [r3, r2]
}
    5ad2:	0020      	movs	r0, r4
    5ad4:	bd30      	pop	{r4, r5, pc}
		return (_radio.packet_rx_count -
    5ad6:	259a      	movs	r5, #154	; 0x9a
    5ad8:	006d      	lsls	r5, r5, #1
			_radio.packet_rx_last +
    5ada:	5d55      	ldrb	r5, [r2, r5]
    5adc:	5c54      	ldrb	r4, [r2, r1]
    5ade:	195b      	adds	r3, r3, r5
    5ae0:	e7ed      	b.n	5abe <packet_rx_reserve_get+0x16>
    5ae2:	46c0      	nop			; (mov r8, r8)
    5ae4:	20000284 	.word	0x20000284

00005ae8 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    5ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    5aea:	0003      	movs	r3, r0
    5aec:	0007      	movs	r7, r0
    5aee:	335c      	adds	r3, #92	; 0x5c
    5af0:	375d      	adds	r7, #93	; 0x5d
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	783d      	ldrb	r5, [r7, #0]
{
    5af6:	0004      	movs	r4, r0
		return 1;
    5af8:	2001      	movs	r0, #1
	if (conn->llcp_req != conn->llcp_ack) {
    5afa:	429d      	cmp	r5, r3
    5afc:	d128      	bne.n	5b50 <conn_update_req+0x68>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    5afe:	7f63      	ldrb	r3, [r4, #29]
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    5b00:	1800      	adds	r0, r0, r0
	if (!conn->role) {
    5b02:	2b7f      	cmp	r3, #127	; 0x7f
    5b04:	d824      	bhi.n	5b50 <conn_update_req+0x68>
		conn->llcp.conn_upd.win_size = 1;
    5b06:	0023      	movs	r3, r4
    5b08:	2601      	movs	r6, #1
    5b0a:	3370      	adds	r3, #112	; 0x70
    5b0c:	701e      	strb	r6, [r3, #0]
		conn->llcp.conn_upd.win_offset_us = 0;
    5b0e:	2300      	movs	r3, #0
    5b10:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5b12:	0023      	movs	r3, r4
    5b14:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    5b16:	3362      	adds	r3, #98	; 0x62
    5b18:	8018      	strh	r0, [r3, #0]
		conn->llcp.conn_upd.latency = conn->latency;
    5b1a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
					      125 / 1000;
    5b1c:	21fa      	movs	r1, #250	; 0xfa
		conn->llcp.conn_upd.latency = conn->latency;
    5b1e:	805a      	strh	r2, [r3, #2]
					      conn->supervision_reload *
    5b20:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
					      125 / 1000;
    5b22:	0089      	lsls	r1, r1, #2
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    5b24:	4358      	muls	r0, r3
					      conn->supervision_reload *
    5b26:	237d      	movs	r3, #125	; 0x7d
    5b28:	4358      	muls	r0, r3
					      125 / 1000;
    5b2a:	f7fa fb9b 	bl	264 <__aeabi_idiv>
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    5b2e:	0023      	movs	r3, r4
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5b30:	0022      	movs	r2, r4
    5b32:	2103      	movs	r1, #3
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    5b34:	3366      	adds	r3, #102	; 0x66
    5b36:	8018      	strh	r0, [r3, #0]
		return 0;
    5b38:	2000      	movs	r0, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5b3a:	3260      	adds	r2, #96	; 0x60
    5b3c:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    5b3e:	345e      	adds	r4, #94	; 0x5e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5b40:	438b      	bics	r3, r1
		conn->llcp.conn_upd.is_internal = 1;
    5b42:	4333      	orrs	r3, r6
    5b44:	1989      	adds	r1, r1, r6
    5b46:	430b      	orrs	r3, r1
		conn->llcp_ack--;
    5b48:	3d01      	subs	r5, #1
		conn->llcp.conn_upd.is_internal = 1;
    5b4a:	7013      	strb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    5b4c:	7026      	strb	r6, [r4, #0]
		conn->llcp_ack--;
    5b4e:	703d      	strb	r5, [r7, #0]
}
    5b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005b54 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    5b56:	780c      	ldrb	r4, [r1, #0]
{
    5b58:	b085      	sub	sp, #20
    5b5a:	9001      	str	r0, [sp, #4]
    5b5c:	9102      	str	r1, [sp, #8]
    5b5e:	9203      	str	r2, [sp, #12]
	if (_first == last) {
		return 0;
    5b60:	2500      	movs	r5, #0
	if (_first == last) {
    5b62:	4294      	cmp	r4, r2
    5b64:	d039      	beq.n	5bda <tx_cmplt_get+0x86>
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    5b66:	4e20      	ldr	r6, [pc, #128]	; (5be8 <tx_cmplt_get+0x94>)
    5b68:	00e3      	lsls	r3, r4, #3
    5b6a:	36fc      	adds	r6, #252	; 0xfc
    5b6c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    5b6e:	5a9b      	ldrh	r3, [r3, r2]
    5b70:	8003      	strh	r3, [r0, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    5b72:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    5b74:	00e3      	lsls	r3, r4, #3
    5b76:	18d3      	adds	r3, r2, r3
    5b78:	9a01      	ldr	r2, [sp, #4]
    5b7a:	8811      	ldrh	r1, [r2, #0]
    5b7c:	881a      	ldrh	r2, [r3, #0]
    5b7e:	4291      	cmp	r1, r2
    5b80:	d129      	bne.n	5bd6 <tx_cmplt_get+0x82>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    5b82:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (void *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (void *)1) ||
    5b84:	2801      	cmp	r0, #1
    5b86:	d90d      	bls.n	5ba4 <tx_cmplt_get+0x50>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    5b88:	2103      	movs	r1, #3
    5b8a:	0002      	movs	r2, r0
    5b8c:	438a      	bics	r2, r1
		if ((!node_tx) || (node_tx == (void *)1) ||
    5b8e:	d027      	beq.n	5be0 <tx_cmplt_get+0x8c>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    5b90:	1d02      	adds	r2, r0, #4
    5b92:	d025      	beq.n	5be0 <tx_cmplt_get+0x8c>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5b94:	7942      	ldrb	r2, [r0, #5]
    5b96:	2a00      	cmp	r2, #0
    5b98:	d022      	beq.n	5be0 <tx_cmplt_get+0x8c>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    5b9a:	7902      	ldrb	r2, [r0, #4]
    5b9c:	400a      	ands	r2, r1
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5b9e:	3a01      	subs	r2, #1
    5ba0:	2a01      	cmp	r2, #1
    5ba2:	d81d      	bhi.n	5be0 <tx_cmplt_get+0x8c>
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)1;
    5ba4:	2201      	movs	r2, #1

			cmplt++;
    5ba6:	18ad      	adds	r5, r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    5ba8:	605a      	str	r2, [r3, #4]
			cmplt++;
    5baa:	b2ed      	uxtb	r5, r5
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    5bac:	2303      	movs	r3, #3
    5bae:	0002      	movs	r2, r0
    5bb0:	4f0d      	ldr	r7, [pc, #52]	; (5be8 <tx_cmplt_get+0x94>)
    5bb2:	439a      	bics	r2, r3
    5bb4:	d004      	beq.n	5bc0 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5bb6:	0039      	movs	r1, r7
    5bb8:	3159      	adds	r1, #89	; 0x59
    5bba:	31ff      	adds	r1, #255	; 0xff
    5bbc:	f7fe fa2d 	bl	401a <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    5bc0:	23b4      	movs	r3, #180	; 0xb4
    5bc2:	005b      	lsls	r3, r3, #1
		_first = _first + 1;
    5bc4:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    5bc6:	5cfb      	ldrb	r3, [r7, r3]
		_first = _first + 1;
    5bc8:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    5bca:	42a3      	cmp	r3, r4
    5bcc:	d100      	bne.n	5bd0 <tx_cmplt_get+0x7c>
			_first = 0;
    5bce:	2400      	movs	r4, #0
		}

	} while (_first != last);
    5bd0:	9b03      	ldr	r3, [sp, #12]
    5bd2:	429c      	cmp	r4, r3
    5bd4:	d1cd      	bne.n	5b72 <tx_cmplt_get+0x1e>

	*first = _first;
    5bd6:	9b02      	ldr	r3, [sp, #8]
    5bd8:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    5bda:	0028      	movs	r0, r5
    5bdc:	b005      	add	sp, #20
    5bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    5be0:	2202      	movs	r2, #2
    5be2:	605a      	str	r2, [r3, #4]
    5be4:	e7e2      	b.n	5bac <tx_cmplt_get+0x58>
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	20000284 	.word	0x20000284

00005bec <connection_get>:
	if (handle < _radio.connection_count) {
    5bec:	4b0a      	ldr	r3, [pc, #40]	; (5c18 <connection_get+0x2c>)
{
    5bee:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    5bf0:	001a      	movs	r2, r3
    5bf2:	32ff      	adds	r2, #255	; 0xff
    5bf4:	7b52      	ldrb	r2, [r2, #13]
{
    5bf6:	0004      	movs	r4, r0
	if (handle < _radio.connection_count) {
    5bf8:	4282      	cmp	r2, r0
    5bfa:	d90b      	bls.n	5c14 <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    5bfc:	2182      	movs	r1, #130	; 0x82
    5bfe:	33fc      	adds	r3, #252	; 0xfc
    5c00:	0002      	movs	r2, r0
    5c02:	0049      	lsls	r1, r1, #1
    5c04:	6898      	ldr	r0, [r3, #8]
    5c06:	f7fe fa1e 	bl	4046 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    5c0a:	2800      	cmp	r0, #0
    5c0c:	d002      	beq.n	5c14 <connection_get+0x28>
    5c0e:	8c03      	ldrh	r3, [r0, #32]
    5c10:	42a3      	cmp	r3, r4
    5c12:	d000      	beq.n	5c16 <connection_get+0x2a>
	return 0;
    5c14:	2000      	movs	r0, #0
}
    5c16:	bd10      	pop	{r4, pc}
    5c18:	20000284 	.word	0x20000284

00005c1c <role_disable>:
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5c1c:	2302      	movs	r3, #2
{
    5c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c20:	b089      	sub	sp, #36	; 0x24
    5c22:	0004      	movs	r4, r0
    5c24:	000f      	movs	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5c26:	9304      	str	r3, [sp, #16]
	switch (ticker_id_primary) {
    5c28:	2805      	cmp	r0, #5
    5c2a:	d00f      	beq.n	5c4c <role_disable+0x30>
    5c2c:	2806      	cmp	r0, #6
    5c2e:	d100      	bne.n	5c32 <role_disable+0x16>
    5c30:	e090      	b.n	5d54 <role_disable+0x138>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5c32:	d800      	bhi.n	5c36 <role_disable+0x1a>
    5c34:	e08b      	b.n	5d4e <role_disable+0x132>
			conn_handle = ticker_id_primary -
    5c36:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    5c38:	b280      	uxth	r0, r0
    5c3a:	f7ff ffd7 	bl	5bec <connection_get>
			if (!conn) {
    5c3e:	2800      	cmp	r0, #0
    5c40:	d100      	bne.n	5c44 <role_disable+0x28>
    5c42:	e0df      	b.n	5e04 <role_disable+0x1e8>
			ticks_xtal_to_start =
    5c44:	6803      	ldr	r3, [r0, #0]
    5c46:	9303      	str	r3, [sp, #12]
			ticks_active_to_start =
    5c48:	6843      	ldr	r3, [r0, #4]
    5c4a:	e08a      	b.n	5d62 <role_disable+0x146>
		ticks_xtal_to_start =
    5c4c:	4b6e      	ldr	r3, [pc, #440]	; (5e08 <role_disable+0x1ec>)
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c4e:	2000      	movs	r0, #0
		ticks_xtal_to_start =
    5c50:	695a      	ldr	r2, [r3, #20]
		ticks_active_to_start =
    5c52:	699b      	ldr	r3, [r3, #24]
		ticks_xtal_to_start =
    5c54:	9203      	str	r2, [sp, #12]
		ticks_active_to_start =
    5c56:	9302      	str	r3, [sp, #8]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c58:	ab04      	add	r3, sp, #16
    5c5a:	9300      	str	r3, [sp, #0]
    5c5c:	000a      	movs	r2, r1
    5c5e:	4b6b      	ldr	r3, [pc, #428]	; (5e0c <role_disable+0x1f0>)
    5c60:	2103      	movs	r1, #3
    5c62:	f7ff f87d 	bl	4d60 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5c66:	2802      	cmp	r0, #2
    5c68:	d069      	beq.n	5d3e <role_disable+0x122>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5c6a:	9b04      	ldr	r3, [sp, #16]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d16a      	bne.n	5d46 <role_disable+0x12a>
	LL_ASSERT(!_radio.ticker_id_stop);
    5c70:	4d65      	ldr	r5, [pc, #404]	; (5e08 <role_disable+0x1ec>)
    5c72:	7ba8      	ldrb	r0, [r5, #14]
    5c74:	b2c0      	uxtb	r0, r0
    5c76:	2800      	cmp	r0, #0
    5c78:	d169      	bne.n	5d4e <role_disable+0x132>
	ret_cb = TICKER_STATUS_BUSY;
    5c7a:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c7c:	4e63      	ldr	r6, [pc, #396]	; (5e0c <role_disable+0x1f0>)
	_radio.ticker_id_stop = ticker_id_primary;
    5c7e:	73ac      	strb	r4, [r5, #14]
	ret_cb = TICKER_STATUS_BUSY;
    5c80:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c82:	ab04      	add	r3, sp, #16
    5c84:	9300      	str	r3, [sp, #0]
    5c86:	0022      	movs	r2, r4
    5c88:	0033      	movs	r3, r6
    5c8a:	2103      	movs	r1, #3
    5c8c:	f7ff f868 	bl	4d60 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5c90:	2802      	cmp	r0, #2
    5c92:	d100      	bne.n	5c96 <role_disable+0x7a>
    5c94:	e067      	b.n	5d66 <role_disable+0x14a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    5c96:	9b04      	ldr	r3, [sp, #16]
    5c98:	4d5b      	ldr	r5, [pc, #364]	; (5e08 <role_disable+0x1ec>)
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d148      	bne.n	5d30 <role_disable+0x114>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    5c9e:	7b2b      	ldrb	r3, [r5, #12]
    5ca0:	429c      	cmp	r4, r3
    5ca2:	d002      	beq.n	5caa <role_disable+0x8e>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    5ca4:	7b6b      	ldrb	r3, [r5, #13]
    5ca6:	429c      	cmp	r4, r3
    5ca8:	d13d      	bne.n	5d26 <role_disable+0x10a>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5caa:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5cac:	2200      	movs	r2, #0
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5cae:	9305      	str	r3, [sp, #20]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5cb0:	ab05      	add	r3, sp, #20
    5cb2:	9300      	str	r3, [sp, #0]
    5cb4:	2103      	movs	r1, #3
    5cb6:	0033      	movs	r3, r6
    5cb8:	0010      	movs	r0, r2
    5cba:	f7ff f851 	bl	4d60 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5cbe:	2802      	cmp	r0, #2
    5cc0:	d107      	bne.n	5cd2 <role_disable+0xb6>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5cc2:	2201      	movs	r2, #1
    5cc4:	0011      	movs	r1, r2
    5cc6:	1880      	adds	r0, r0, r2
    5cc8:	f7fe fa20 	bl	410c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    5ccc:	9b05      	ldr	r3, [sp, #20]
    5cce:	2b02      	cmp	r3, #2
    5cd0:	d03d      	beq.n	5d4e <role_disable+0x132>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5cd2:	9805      	ldr	r0, [sp, #20]
    5cd4:	2800      	cmp	r0, #0
    5cd6:	d162      	bne.n	5d9e <role_disable+0x182>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5cd8:	2302      	movs	r3, #2
    5cda:	9306      	str	r3, [sp, #24]
		LL_ASSERT(_radio.ticker_id_prepare);
    5cdc:	7b2b      	ldrb	r3, [r5, #12]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d035      	beq.n	5d4e <role_disable+0x132>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ce2:	ab06      	add	r3, sp, #24
		_radio.ticker_id_prepare = 0;
    5ce4:	7328      	strb	r0, [r5, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ce6:	2201      	movs	r2, #1
    5ce8:	9300      	str	r3, [sp, #0]
    5cea:	2103      	movs	r1, #3
    5cec:	0033      	movs	r3, r6
    5cee:	f7ff f837 	bl	4d60 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5cf2:	2802      	cmp	r0, #2
    5cf4:	d107      	bne.n	5d06 <role_disable+0xea>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5cf6:	2201      	movs	r2, #1
    5cf8:	0011      	movs	r1, r2
    5cfa:	1880      	adds	r0, r0, r2
    5cfc:	f7fe fa06 	bl	410c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    5d00:	9b06      	ldr	r3, [sp, #24]
    5d02:	2b02      	cmp	r3, #2
    5d04:	d023      	beq.n	5d4e <role_disable+0x132>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    5d06:	9906      	ldr	r1, [sp, #24]
    5d08:	2900      	cmp	r1, #0
    5d0a:	d13b      	bne.n	5d84 <role_disable+0x168>
			ticks_xtal_to_start &= ~XON_BITMASK;
    5d0c:	9b03      	ldr	r3, [sp, #12]
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5d0e:	9a02      	ldr	r2, [sp, #8]
			ticks_xtal_to_start &= ~XON_BITMASK;
    5d10:	005b      	lsls	r3, r3, #1
    5d12:	085b      	lsrs	r3, r3, #1
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5d14:	429a      	cmp	r2, r3
    5d16:	d940      	bls.n	5d9a <role_disable+0x17e>
				ret = mayfly_enqueue(
    5d18:	4b3d      	ldr	r3, [pc, #244]	; (5e10 <role_disable+0x1f4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5d1a:	000a      	movs	r2, r1
    5d1c:	2003      	movs	r0, #3
    5d1e:	f7fe fa19 	bl	4154 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5d22:	2800      	cmp	r0, #0
    5d24:	d113      	bne.n	5d4e <role_disable+0x132>
	if (!_radio.ticker_id_stop) {
    5d26:	7bab      	ldrb	r3, [r5, #14]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d101      	bne.n	5d30 <role_disable+0x114>
		ret_cb = TICKER_STATUS_FAILURE;
    5d2c:	3301      	adds	r3, #1
    5d2e:	9304      	str	r3, [sp, #16]
	_radio.ticker_id_stop = 0;
    5d30:	2300      	movs	r3, #0
    5d32:	73ab      	strb	r3, [r5, #14]
	return ret_cb;
    5d34:	9804      	ldr	r0, [sp, #16]
}
    5d36:	b009      	add	sp, #36	; 0x24
    5d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
				cpu_sleep();
    5d3a:	f7ff fe71 	bl	5a20 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5d3e:	9b04      	ldr	r3, [sp, #16]
    5d40:	2b02      	cmp	r3, #2
    5d42:	d0fa      	beq.n	5d3a <role_disable+0x11e>
    5d44:	e791      	b.n	5c6a <role_disable+0x4e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5d46:	9b04      	ldr	r3, [sp, #16]
    5d48:	2b01      	cmp	r3, #1
    5d4a:	d100      	bne.n	5d4e <role_disable+0x132>
    5d4c:	e790      	b.n	5c70 <role_disable+0x54>
		LL_ASSERT(0);
    5d4e:	b662      	cpsie	i
    5d50:	2004      	movs	r0, #4
    5d52:	df02      	svc	2
		ticks_xtal_to_start =
    5d54:	4b2c      	ldr	r3, [pc, #176]	; (5e08 <role_disable+0x1ec>)
    5d56:	001a      	movs	r2, r3
    5d58:	32cc      	adds	r2, #204	; 0xcc
    5d5a:	6812      	ldr	r2, [r2, #0]
		ticks_active_to_start =
    5d5c:	33d0      	adds	r3, #208	; 0xd0
    5d5e:	681b      	ldr	r3, [r3, #0]
		ticks_xtal_to_start =
    5d60:	9203      	str	r2, [sp, #12]
			ticks_active_to_start =
    5d62:	9302      	str	r3, [sp, #8]
		break;
    5d64:	e784      	b.n	5c70 <role_disable+0x54>
		if (_radio.ticker_id_event == ticker_id_primary) {
    5d66:	7b6b      	ldrb	r3, [r5, #13]
    5d68:	429c      	cmp	r4, r3
    5d6a:	d104      	bne.n	5d76 <role_disable+0x15a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5d6c:	2201      	movs	r2, #1
    5d6e:	2003      	movs	r0, #3
    5d70:	0011      	movs	r1, r2
    5d72:	f7fe f9cb 	bl	410c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    5d76:	9b04      	ldr	r3, [sp, #16]
    5d78:	2b02      	cmp	r3, #2
    5d7a:	d000      	beq.n	5d7e <role_disable+0x162>
    5d7c:	e78b      	b.n	5c96 <role_disable+0x7a>
			cpu_sleep();
    5d7e:	f7ff fe4f 	bl	5a20 <cpu_sleep>
    5d82:	e7f8      	b.n	5d76 <role_disable+0x15a>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5d84:	9b06      	ldr	r3, [sp, #24]
    5d86:	2b01      	cmp	r3, #1
    5d88:	d1e1      	bne.n	5d4e <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5d8a:	2200      	movs	r2, #0
    5d8c:	4b20      	ldr	r3, [pc, #128]	; (5e10 <role_disable+0x1f4>)
    5d8e:	0011      	movs	r1, r2
    5d90:	2003      	movs	r0, #3
    5d92:	f7fe f9df 	bl	4154 <mayfly_enqueue>
    5d96:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    5d98:	d1d9      	bne.n	5d4e <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5d9a:	4b1e      	ldr	r3, [pc, #120]	; (5e14 <role_disable+0x1f8>)
    5d9c:	e7bd      	b.n	5d1a <role_disable+0xfe>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5d9e:	9c05      	ldr	r4, [sp, #20]
    5da0:	2c01      	cmp	r4, #1
    5da2:	d1d4      	bne.n	5d4e <role_disable+0x132>
		if (ticker_id_stop != TICKER_NULL) {
    5da4:	2fff      	cmp	r7, #255	; 0xff
    5da6:	d019      	beq.n	5ddc <role_disable+0x1c0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    5da8:	2302      	movs	r3, #2
    5daa:	9307      	str	r3, [sp, #28]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5dac:	ab07      	add	r3, sp, #28
    5dae:	9300      	str	r3, [sp, #0]
    5db0:	003a      	movs	r2, r7
    5db2:	0033      	movs	r3, r6
    5db4:	2103      	movs	r1, #3
    5db6:	2000      	movs	r0, #0
    5db8:	f7fe ffd2 	bl	4d60 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    5dbc:	2802      	cmp	r0, #2
    5dbe:	d107      	bne.n	5dd0 <role_disable+0x1b4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5dc0:	0022      	movs	r2, r4
    5dc2:	0021      	movs	r1, r4
    5dc4:	3001      	adds	r0, #1
    5dc6:	f7fe f9a1 	bl	410c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    5dca:	9b07      	ldr	r3, [sp, #28]
    5dcc:	2b02      	cmp	r3, #2
    5dce:	d0be      	beq.n	5d4e <role_disable+0x132>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    5dd0:	9b07      	ldr	r3, [sp, #28]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d002      	beq.n	5ddc <role_disable+0x1c0>
    5dd6:	9b07      	ldr	r3, [sp, #28]
    5dd8:	2b01      	cmp	r3, #1
    5dda:	d1b8      	bne.n	5d4e <role_disable+0x132>
		if (_radio.role != ROLE_NONE) {
    5ddc:	7beb      	ldrb	r3, [r5, #15]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d0a1      	beq.n	5d26 <role_disable+0x10a>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5de2:	2204      	movs	r2, #4
    5de4:	4b0c      	ldr	r3, [pc, #48]	; (5e18 <role_disable+0x1fc>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5de6:	2003      	movs	r0, #3
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5de8:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5dea:	2200      	movs	r2, #0
    5dec:	0011      	movs	r1, r2
    5dee:	f7fe f9b1 	bl	4154 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5df2:	2800      	cmp	r0, #0
    5df4:	d1ab      	bne.n	5d4e <role_disable+0x132>
			while (_radio.role != ROLE_NONE) {
    5df6:	7beb      	ldrb	r3, [r5, #15]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d100      	bne.n	5dfe <role_disable+0x1e2>
    5dfc:	e793      	b.n	5d26 <role_disable+0x10a>
				cpu_sleep();
    5dfe:	f7ff fe0f 	bl	5a20 <cpu_sleep>
    5e02:	e7f8      	b.n	5df6 <role_disable+0x1da>
				return 1;
    5e04:	2001      	movs	r0, #1
    5e06:	e796      	b.n	5d36 <role_disable+0x11a>
    5e08:	20000284 	.word	0x20000284
    5e0c:	00005a51 	.word	0x00005a51
    5e10:	20002340 	.word	0x20002340
    5e14:	200023d0 	.word	0x200023d0
    5e18:	20002380 	.word	0x20002380

00005e1c <sched_after_mstr_free_slot_get>:
{
    5e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e1e:	b08f      	sub	sp, #60	; 0x3c
    5e20:	001f      	movs	r7, r3
    5e22:	9209      	str	r2, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5e24:	1d0b      	adds	r3, r1, #4
	ticker_id = ticker_id_prev = 0xff;
    5e26:	2217      	movs	r2, #23
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5e28:	2400      	movs	r4, #0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5e2a:	9308      	str	r3, [sp, #32]
	ticker_id = ticker_id_prev = 0xff;
    5e2c:	23ff      	movs	r3, #255	; 0xff
    5e2e:	a906      	add	r1, sp, #24
    5e30:	1852      	adds	r2, r2, r1
{
    5e32:	9007      	str	r0, [sp, #28]
	ticker_id = ticker_id_prev = 0xff;
    5e34:	7013      	strb	r3, [r2, #0]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5e36:	603c      	str	r4, [r7, #0]
    5e38:	940c      	str	r4, [sp, #48]	; 0x30
	ticker_id = ticker_id_prev = 0xff;
    5e3a:	9306      	str	r3, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5e3c:	9405      	str	r4, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5e3e:	2302      	movs	r3, #2
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5e40:	2517      	movs	r5, #23
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5e42:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5e44:	ab06      	add	r3, sp, #24
    5e46:	18ed      	adds	r5, r5, r3
    5e48:	ab0d      	add	r3, sp, #52	; 0x34
    5e4a:	9302      	str	r3, [sp, #8]
    5e4c:	4b36      	ldr	r3, [pc, #216]	; (5f28 <sched_after_mstr_free_slot_get+0x10c>)
    5e4e:	002a      	movs	r2, r5
    5e50:	9301      	str	r3, [sp, #4]
    5e52:	ab0c      	add	r3, sp, #48	; 0x30
    5e54:	9300      	str	r3, [sp, #0]
    5e56:	9907      	ldr	r1, [sp, #28]
    5e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e5a:	2000      	movs	r0, #0
    5e5c:	f7fe ffae 	bl	4dbc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5e60:	2802      	cmp	r0, #2
    5e62:	d009      	beq.n	5e78 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5e66:	2b00      	cmp	r3, #0
    5e68:	d00a      	beq.n	5e80 <sched_after_mstr_free_slot_get+0x64>
    5e6a:	b662      	cpsie	i
    5e6c:	2004      	movs	r0, #4
    5e6e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5e70:	9907      	ldr	r1, [sp, #28]
    5e72:	2000      	movs	r0, #0
    5e74:	f7ff f808 	bl	4e88 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5e7a:	2b02      	cmp	r3, #2
    5e7c:	d0f8      	beq.n	5e70 <sched_after_mstr_free_slot_get+0x54>
    5e7e:	e7f1      	b.n	5e64 <sched_after_mstr_free_slot_get+0x48>
		if (ticker_id == 0xff) {
    5e80:	782a      	ldrb	r2, [r5, #0]
    5e82:	2aff      	cmp	r2, #255	; 0xff
    5e84:	d04c      	beq.n	5f20 <sched_after_mstr_free_slot_get+0x104>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5e86:	2a06      	cmp	r2, #6
    5e88:	d9d9      	bls.n	5e3e <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    5e8a:	4b28      	ldr	r3, [pc, #160]	; (5f2c <sched_after_mstr_free_slot_get+0x110>)
    5e8c:	0019      	movs	r1, r3
    5e8e:	31ff      	adds	r1, #255	; 0xff
    5e90:	7b49      	ldrb	r1, [r1, #13]
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    5e92:	3107      	adds	r1, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5e94:	428a      	cmp	r2, r1
    5e96:	dad2      	bge.n	5e3e <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5e98:	2182      	movs	r1, #130	; 0x82
    5e9a:	3a07      	subs	r2, #7
    5e9c:	33fc      	adds	r3, #252	; 0xfc
    5e9e:	b292      	uxth	r2, r2
    5ea0:	0049      	lsls	r1, r1, #1
    5ea2:	6898      	ldr	r0, [r3, #8]
    5ea4:	f7fe f8cf 	bl	4046 <mem_get>
		if (conn && !conn->role) {
    5ea8:	2800      	cmp	r0, #0
    5eaa:	d0c8      	beq.n	5e3e <sched_after_mstr_free_slot_get+0x22>
    5eac:	7f43      	ldrb	r3, [r0, #29]
    5eae:	2b7f      	cmp	r3, #127	; 0x7f
    5eb0:	d8c5      	bhi.n	5e3e <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5eb2:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    5eb4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5eb6:	6842      	ldr	r2, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5eb8:	2b00      	cmp	r3, #0
    5eba:	da15      	bge.n	5ee8 <sched_after_mstr_free_slot_get+0xcc>
				ticks_slot_abs_curr =
    5ebc:	005b      	lsls	r3, r3, #1
    5ebe:	085d      	lsrs	r5, r3, #1
				u32_t ticks_prepare_to_start =
    5ec0:	6883      	ldr	r3, [r0, #8]
    5ec2:	4293      	cmp	r3, r2
    5ec4:	d200      	bcs.n	5ec8 <sched_after_mstr_free_slot_get+0xac>
    5ec6:	0013      	movs	r3, r2
    5ec8:	199e      	adds	r6, r3, r6
				ticks_to_expire_normal -=
    5eca:	1b76      	subs	r6, r6, r5
			ticks_slot_abs_curr +=
    5ecc:	68c3      	ldr	r3, [r0, #12]
    5ece:	3304      	adds	r3, #4
    5ed0:	195d      	adds	r5, r3, r5
			if ((ticker_id_prev != 0xFF) &&
    5ed2:	9b06      	ldr	r3, [sp, #24]
    5ed4:	2bff      	cmp	r3, #255	; 0xff
    5ed6:	d10c      	bne.n	5ef2 <sched_after_mstr_free_slot_get+0xd6>
			ticker_id_prev = ticker_id;
    5ed8:	2317      	movs	r3, #23
    5eda:	aa06      	add	r2, sp, #24
    5edc:	189b      	adds	r3, r3, r2
    5ede:	781b      	ldrb	r3, [r3, #0]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    5ee0:	002c      	movs	r4, r5
			ticker_id_prev = ticker_id;
    5ee2:	9306      	str	r3, [sp, #24]
			ticks_to_expire_prev = ticks_to_expire_normal;
    5ee4:	9605      	str	r6, [sp, #20]
    5ee6:	e7aa      	b.n	5e3e <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    5ee8:	0015      	movs	r5, r2
    5eea:	429a      	cmp	r2, r3
    5eec:	d2ee      	bcs.n	5ecc <sched_after_mstr_free_slot_get+0xb0>
    5eee:	001d      	movs	r5, r3
    5ef0:	e7ec      	b.n	5ecc <sched_after_mstr_free_slot_get+0xb0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    5ef2:	9905      	ldr	r1, [sp, #20]
    5ef4:	0030      	movs	r0, r6
    5ef6:	f7fe ffdb 	bl	4eb0 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    5efa:	9b08      	ldr	r3, [sp, #32]
    5efc:	18e3      	adds	r3, r4, r3
			if ((ticker_id_prev != 0xFF) &&
    5efe:	4298      	cmp	r0, r3
    5f00:	d9ea      	bls.n	5ed8 <sched_after_mstr_free_slot_get+0xbc>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5f02:	9b05      	ldr	r3, [sp, #20]
    5f04:	4a0a      	ldr	r2, [pc, #40]	; (5f30 <sched_after_mstr_free_slot_get+0x114>)
    5f06:	1918      	adds	r0, r3, r4
    5f08:	2100      	movs	r1, #0
    5f0a:	2307      	movs	r3, #7
    5f0c:	f7fa fa44 	bl	398 <__aeabi_lmul>
    5f10:	4a08      	ldr	r2, [pc, #32]	; (5f34 <sched_after_mstr_free_slot_get+0x118>)
    5f12:	2300      	movs	r3, #0
    5f14:	f7fa fa20 	bl	358 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    5f18:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5f1a:	6038      	str	r0, [r7, #0]
}
    5f1c:	b00f      	add	sp, #60	; 0x3c
    5f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ticker_id_prev != 0xff) {
    5f20:	9b06      	ldr	r3, [sp, #24]
    5f22:	2bff      	cmp	r3, #255	; 0xff
    5f24:	d1ed      	bne.n	5f02 <sched_after_mstr_free_slot_get+0xe6>
    5f26:	e7f9      	b.n	5f1c <sched_after_mstr_free_slot_get+0x100>
    5f28:	00005a51 	.word	0x00005a51
    5f2c:	20000284 	.word	0x20000284
    5f30:	1afd498d 	.word	0x1afd498d
    5f34:	3b9aca00 	.word	0x3b9aca00

00005f38 <isr_adv_ci_adva_check>:
{
    5f38:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    5f3a:	7804      	ldrb	r4, [r0, #0]
    5f3c:	780a      	ldrb	r2, [r1, #0]
    5f3e:	0665      	lsls	r5, r4, #25
    5f40:	0fed      	lsrs	r5, r5, #31
    5f42:	09d2      	lsrs	r2, r2, #7
    5f44:	2300      	movs	r3, #0
    5f46:	4295      	cmp	r5, r2
    5f48:	d10d      	bne.n	5f66 <isr_adv_ci_adva_check+0x2e>
    5f4a:	330f      	adds	r3, #15
    5f4c:	3108      	adds	r1, #8
    5f4e:	401c      	ands	r4, r3
    5f50:	000e      	movs	r6, r1
    5f52:	1c85      	adds	r5, r0, #2
    5f54:	2c01      	cmp	r4, #1
    5f56:	d008      	beq.n	5f6a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    5f58:	2206      	movs	r2, #6
    5f5a:	0031      	movs	r1, r6
    5f5c:	0028      	movs	r0, r5
    5f5e:	f7fb fa1b 	bl	1398 <memcmp>
	return (adv->tx_addr == ci->rx_addr) &&
    5f62:	4243      	negs	r3, r0
    5f64:	4143      	adcs	r3, r0
    5f66:	0018      	movs	r0, r3
}
    5f68:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    5f6a:	2206      	movs	r2, #6
    5f6c:	0028      	movs	r0, r5
    5f6e:	f7fb fa13 	bl	1398 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5f72:	2800      	cmp	r0, #0
    5f74:	d1f0      	bne.n	5f58 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    5f76:	0023      	movs	r3, r4
    5f78:	e7f5      	b.n	5f66 <isr_adv_ci_adva_check+0x2e>
	...

00005f7c <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    5f7c:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    5f7e:	21ba      	movs	r1, #186	; 0xba
    5f80:	2476      	movs	r4, #118	; 0x76
    5f82:	4a0b      	ldr	r2, [pc, #44]	; (5fb0 <rx_fc_lock+0x34>)
    5f84:	0049      	lsls	r1, r1, #1
    5f86:	34ff      	adds	r4, #255	; 0xff
    5f88:	5c53      	ldrb	r3, [r2, r1]
    5f8a:	5d14      	ldrb	r4, [r2, r4]
    5f8c:	429c      	cmp	r4, r3
    5f8e:	d10d      	bne.n	5fac <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    5f90:	5c53      	ldrb	r3, [r2, r1]
    5f92:	33b4      	adds	r3, #180	; 0xb4
    5f94:	005b      	lsls	r3, r3, #1
    5f96:	18d3      	adds	r3, r2, r3
    5f98:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
    5f9a:	5c53      	ldrb	r3, [r2, r1]
    5f9c:	3301      	adds	r3, #1
    5f9e:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
    5fa0:	2b03      	cmp	r3, #3
    5fa2:	d100      	bne.n	5fa6 <rx_fc_lock+0x2a>
			req = 0;
    5fa4:	2300      	movs	r3, #0
		}
		_radio.fc_req = req;
    5fa6:	21ba      	movs	r1, #186	; 0xba
    5fa8:	0049      	lsls	r1, r1, #1
    5faa:	5453      	strb	r3, [r2, r1]
	}
}
    5fac:	bd10      	pop	{r4, pc}
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	20000284 	.word	0x20000284

00005fb4 <ticker_job_disable>:
{
    5fb4:	b510      	push	{r4, lr}
	if (_radio.state != STATE_NONE) {
    5fb6:	4b05      	ldr	r3, [pc, #20]	; (5fcc <ticker_job_disable+0x18>)
    5fb8:	7c1b      	ldrb	r3, [r3, #16]
    5fba:	2b00      	cmp	r3, #0
    5fbc:	d004      	beq.n	5fc8 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    5fbe:	2101      	movs	r1, #1
    5fc0:	2200      	movs	r2, #0
    5fc2:	0008      	movs	r0, r1
    5fc4:	f7fe f8a2 	bl	410c <mayfly_enable>
}
    5fc8:	bd10      	pop	{r4, pc}
    5fca:	46c0      	nop			; (mov r8, r8)
    5fcc:	20000284 	.word	0x20000284

00005fd0 <hdr_conn_get>:
{
    5fd0:	b510      	push	{r4, lr}
    5fd2:	000c      	movs	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5fd4:	2806      	cmp	r0, #6
    5fd6:	d90a      	bls.n	5fee <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5fd8:	2182      	movs	r1, #130	; 0x82
    5fda:	4b0b      	ldr	r3, [pc, #44]	; (6008 <hdr_conn_get+0x38>)
    5fdc:	3807      	subs	r0, #7
    5fde:	33fc      	adds	r3, #252	; 0xfc
    5fe0:	b282      	uxth	r2, r0
    5fe2:	0049      	lsls	r1, r1, #1
    5fe4:	6898      	ldr	r0, [r3, #8]
    5fe6:	f7fe f82e 	bl	4046 <mem_get>
    5fea:	6020      	str	r0, [r4, #0]
}
    5fec:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    5fee:	2805      	cmp	r0, #5
    5ff0:	d003      	beq.n	5ffa <hdr_conn_get+0x2a>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    5ff2:	2806      	cmp	r0, #6
    5ff4:	d004      	beq.n	6000 <hdr_conn_get+0x30>
	return NULL;
    5ff6:	2000      	movs	r0, #0
    5ff8:	e7f8      	b.n	5fec <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    5ffa:	4803      	ldr	r0, [pc, #12]	; (6008 <hdr_conn_get+0x38>)
    5ffc:	3014      	adds	r0, #20
    5ffe:	e7f5      	b.n	5fec <hdr_conn_get+0x1c>
		return &_radio.scanner.hdr;
    6000:	4801      	ldr	r0, [pc, #4]	; (6008 <hdr_conn_get+0x38>)
    6002:	30cc      	adds	r0, #204	; 0xcc
    6004:	e7f2      	b.n	5fec <hdr_conn_get+0x1c>
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	20000284 	.word	0x20000284

0000600c <mayfly_xtal_retain.part.15>:
			s_xtal_retained = 0;
    600c:	2200      	movs	r2, #0
    600e:	4b09      	ldr	r3, [pc, #36]	; (6034 <mayfly_xtal_retain.part.15+0x28>)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    6010:	b510      	push	{r4, lr}
			s_xtal_retained = 0;
    6012:	701a      	strb	r2, [r3, #0]
    6014:	4b08      	ldr	r3, [pc, #32]	; (6038 <mayfly_xtal_retain.part.15+0x2c>)
			switch (caller_id) {
    6016:	4290      	cmp	r0, r2
    6018:	d002      	beq.n	6020 <mayfly_xtal_retain.part.15+0x14>
    601a:	2801      	cmp	r0, #1
    601c:	d106      	bne.n	602c <mayfly_xtal_retain.part.15+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    601e:	3310      	adds	r3, #16
			retval = mayfly_enqueue(caller_id,
    6020:	2200      	movs	r2, #0
    6022:	0011      	movs	r1, r2
    6024:	f7fe f896 	bl	4154 <mayfly_enqueue>
			LL_ASSERT(!retval);
    6028:	2800      	cmp	r0, #0
    602a:	d002      	beq.n	6032 <mayfly_xtal_retain.part.15+0x26>
    602c:	b662      	cpsie	i
    602e:	2004      	movs	r0, #4
    6030:	df02      	svc	2
}
    6032:	bd10      	pop	{r4, pc}
    6034:	20000488 	.word	0x20000488
    6038:	200023e0 	.word	0x200023e0

0000603c <rx_packet_set>:
{
    603c:	b570      	push	{r4, r5, r6, lr}
    603e:	000d      	movs	r5, r1
	radio_phy_set(phy, 0);
    6040:	2100      	movs	r1, #0
{
    6042:	0004      	movs	r4, r0
	radio_phy_set(phy, 0);
    6044:	0008      	movs	r0, r1
    6046:	f004 fa23 	bl	a490 <radio_phy_set>
	if (conn->enc_rx) {
    604a:	0023      	movs	r3, r4
    604c:	33a8      	adds	r3, #168	; 0xa8
    604e:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    6050:	2201      	movs	r2, #1
	if (conn->enc_rx) {
    6052:	06db      	lsls	r3, r3, #27
    6054:	d50c      	bpl.n	6070 <rx_packet_set+0x34>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    6056:	211f      	movs	r1, #31
    6058:	2008      	movs	r0, #8
    605a:	f004 fa67 	bl	a52c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    605e:	0020      	movs	r0, r4
    6060:	002a      	movs	r2, r5
    6062:	30a9      	adds	r0, #169	; 0xa9
    6064:	2100      	movs	r1, #0
    6066:	f004 fc75 	bl	a954 <radio_ccm_rx_pkt_set>
		radio_pkt_rx_set(pdu_data_rx);
    606a:	f004 fa85 	bl	a578 <radio_pkt_rx_set>
}
    606e:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    6070:	2008      	movs	r0, #8
    6072:	211b      	movs	r1, #27
    6074:	f004 fa5a 	bl	a52c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    6078:	0028      	movs	r0, r5
    607a:	e7f6      	b.n	606a <rx_packet_set+0x2e>

0000607c <tx_packet_set>:
{
    607c:	b570      	push	{r4, r5, r6, lr}
    607e:	000d      	movs	r5, r1
	radio_phy_set(phy, flags);
    6080:	2100      	movs	r1, #0
{
    6082:	0004      	movs	r4, r0
	radio_phy_set(phy, flags);
    6084:	0008      	movs	r0, r1
    6086:	f004 fa03 	bl	a490 <radio_phy_set>
	if (conn->enc_tx) {
    608a:	0023      	movs	r3, r4
    608c:	33a8      	adds	r3, #168	; 0xa8
    608e:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    6090:	2201      	movs	r2, #1
	if (conn->enc_tx) {
    6092:	069b      	lsls	r3, r3, #26
    6094:	d50b      	bpl.n	60ae <tx_packet_set+0x32>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    6096:	211f      	movs	r1, #31
    6098:	2008      	movs	r0, #8
    609a:	f004 fa47 	bl	a52c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    609e:	0020      	movs	r0, r4
    60a0:	0029      	movs	r1, r5
    60a2:	30ca      	adds	r0, #202	; 0xca
    60a4:	f004 fc94 	bl	a9d0 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    60a8:	f004 fa6e 	bl	a588 <radio_pkt_tx_set>
}
    60ac:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    60ae:	2008      	movs	r0, #8
    60b0:	211b      	movs	r1, #27
    60b2:	f004 fa3b 	bl	a52c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    60b6:	0028      	movs	r0, r5
    60b8:	e7f6      	b.n	60a8 <tx_packet_set+0x2c>
	...

000060bc <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    60bc:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    60be:	4e15      	ldr	r6, [pc, #84]	; (6114 <isr_scan_tgta_check.isra.30+0x58>)
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    60c0:	0005      	movs	r5, r0
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    60c2:	0033      	movs	r3, r6
    60c4:	33dd      	adds	r3, #221	; 0xdd
    60c6:	781a      	ldrb	r2, [r3, #0]
    60c8:	7803      	ldrb	r3, [r0, #0]
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    60ca:	000c      	movs	r4, r1
			BDADDR_SIZE) == 0))) ||
    60cc:	09d2      	lsrs	r2, r2, #7
    60ce:	09db      	lsrs	r3, r3, #7
    60d0:	429a      	cmp	r2, r3
    60d2:	d006      	beq.n	60e2 <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    60d4:	2302      	movs	r3, #2
    60d6:	36dd      	adds	r6, #221	; 0xdd
    60d8:	7830      	ldrb	r0, [r6, #0]
    60da:	0900      	lsrs	r0, r0, #4
    60dc:	4018      	ands	r0, r3
    60de:	d10b      	bne.n	60f8 <isr_scan_tgta_check.isra.30+0x3c>
}
    60e0:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    60e2:	0030      	movs	r0, r6
    60e4:	0029      	movs	r1, r5
    60e6:	30de      	adds	r0, #222	; 0xde
    60e8:	2206      	movs	r2, #6
    60ea:	3108      	adds	r1, #8
    60ec:	f7fb f954 	bl	1398 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    60f0:	2800      	cmp	r0, #0
    60f2:	d1ef      	bne.n	60d4 <isr_scan_tgta_check.isra.30+0x18>
			BDADDR_SIZE) == 0))) ||
    60f4:	2001      	movs	r0, #1
    60f6:	e7f3      	b.n	60e0 <isr_scan_tgta_check.isra.30+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    60f8:	782b      	ldrb	r3, [r5, #0]
			BDADDR_SIZE) == 0))) ||
    60fa:	2000      	movs	r0, #0
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    60fc:	2b7f      	cmp	r3, #127	; 0x7f
    60fe:	d9ef      	bls.n	60e0 <isr_scan_tgta_check.isra.30+0x24>
	    (pdu->rx_addr != 0) &&
    6100:	223f      	movs	r2, #63	; 0x3f
    6102:	7b6b      	ldrb	r3, [r5, #13]
    6104:	4393      	bics	r3, r2
    6106:	2b40      	cmp	r3, #64	; 0x40
    6108:	d1ea      	bne.n	60e0 <isr_scan_tgta_check.isra.30+0x24>
		if (dir_report) {
    610a:	4284      	cmp	r4, r0
    610c:	d0f2      	beq.n	60f4 <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    610e:	3001      	adds	r0, #1
    6110:	7020      	strb	r0, [r4, #0]
    6112:	e7e5      	b.n	60e0 <isr_scan_tgta_check.isra.30+0x24>
    6114:	20000284 	.word	0x20000284

00006118 <chan_set.part.23>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    6118:	b662      	cpsie	i
    611a:	2004      	movs	r0, #4
    611c:	df02      	svc	2
	...

00006120 <prepare_normal_set>:
{
    6120:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6122:	6803      	ldr	r3, [r0, #0]
{
    6124:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6126:	2b00      	cmp	r3, #0
    6128:	da19      	bge.n	615e <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    612a:	6845      	ldr	r5, [r0, #4]
    612c:	6884      	ldr	r4, [r0, #8]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    612e:	005b      	lsls	r3, r3, #1
    6130:	085b      	lsrs	r3, r3, #1
		u32_t ticks_prepare_to_start =
    6132:	42ac      	cmp	r4, r5
    6134:	d200      	bcs.n	6138 <prepare_normal_set+0x18>
    6136:	002c      	movs	r4, r5
		ticker_status =
    6138:	9006      	str	r0, [sp, #24]
    613a:	480a      	ldr	r0, [pc, #40]	; (6164 <prepare_normal_set+0x44>)
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    613c:	1b1b      	subs	r3, r3, r4
		ticker_status =
    613e:	9005      	str	r0, [sp, #20]
    6140:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6142:	b29b      	uxth	r3, r3
		ticker_status =
    6144:	9301      	str	r3, [sp, #4]
    6146:	9300      	str	r3, [sp, #0]
    6148:	9004      	str	r0, [sp, #16]
    614a:	0003      	movs	r3, r0
    614c:	9003      	str	r0, [sp, #12]
    614e:	9002      	str	r0, [sp, #8]
    6150:	f7fe fdb6 	bl	4cc0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6154:	2302      	movs	r3, #2
    6156:	4398      	bics	r0, r3
    6158:	d001      	beq.n	615e <prepare_normal_set+0x3e>
    615a:	f7ff ffdd 	bl	6118 <chan_set.part.23>
}
    615e:	b009      	add	sp, #36	; 0x24
    6160:	bd30      	pop	{r4, r5, pc}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	00005a65 	.word	0x00005a65

00006168 <terminate_ind_rx_enqueue>:
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6168:	0003      	movs	r3, r0
{
    616a:	b510      	push	{r4, lr}
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    616c:	339c      	adds	r3, #156	; 0x9c
{
    616e:	0002      	movs	r2, r0
	LL_ASSERT(node_rx->hdr.onion.link);
    6170:	6818      	ldr	r0, [r3, #0]
    6172:	2800      	cmp	r0, #0
    6174:	d101      	bne.n	617a <terminate_ind_rx_enqueue+0x12>
    6176:	f7ff ffcf 	bl	6118 <chan_set.part.23>
	node_rx->hdr.handle = conn->handle;
    617a:	8c12      	ldrh	r2, [r2, #32]
	*((u8_t *)node_rx->pdu_data) = reason;
    617c:	7219      	strb	r1, [r3, #8]
	node_rx->hdr.handle = conn->handle;
    617e:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6180:	2207      	movs	r2, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6182:	21b6      	movs	r1, #182	; 0xb6
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6184:	711a      	strb	r2, [r3, #4]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6186:	4a08      	ldr	r2, [pc, #32]	; (61a8 <terminate_ind_rx_enqueue+0x40>)
    6188:	0049      	lsls	r1, r1, #1
    618a:	5c51      	ldrb	r1, [r2, r1]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    618c:	3245      	adds	r2, #69	; 0x45
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    618e:	7019      	strb	r1, [r3, #0]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6190:	32ff      	adds	r2, #255	; 0xff
    6192:	0019      	movs	r1, r3
    6194:	f7fd ff75 	bl	4082 <memq_enqueue>
	LL_ASSERT(link);
    6198:	2800      	cmp	r0, #0
    619a:	d102      	bne.n	61a2 <terminate_ind_rx_enqueue+0x3a>
    619c:	b662      	cpsie	i
    619e:	2004      	movs	r0, #4
    61a0:	df02      	svc	2
	radio_event_callback();
    61a2:	f003 fc67 	bl	9a74 <radio_event_callback>
}
    61a6:	bd10      	pop	{r4, pc}
    61a8:	20000284 	.word	0x20000284

000061ac <packet_rx_enqueue>:
{
    61ac:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    61ae:	219b      	movs	r1, #155	; 0x9b
    61b0:	2436      	movs	r4, #54	; 0x36
    61b2:	4a15      	ldr	r2, [pc, #84]	; (6208 <packet_rx_enqueue+0x5c>)
    61b4:	34ff      	adds	r4, #255	; 0xff
    61b6:	0049      	lsls	r1, r1, #1
    61b8:	5d13      	ldrb	r3, [r2, r4]
    61ba:	5c51      	ldrb	r1, [r2, r1]
    61bc:	4299      	cmp	r1, r3
    61be:	d101      	bne.n	61c4 <packet_rx_enqueue+0x18>
    61c0:	f7ff ffaa 	bl	6118 <chan_set.part.23>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    61c4:	0011      	movs	r1, r2
    61c6:	5d13      	ldrb	r3, [r2, r4]
    61c8:	31fc      	adds	r1, #252	; 0xfc
    61ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
    61cc:	009b      	lsls	r3, r3, #2
    61ce:	5859      	ldr	r1, [r3, r1]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    61d0:	23b6      	movs	r3, #182	; 0xb6
	if (last == _radio.packet_rx_count) {
    61d2:	259a      	movs	r5, #154	; 0x9a
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    61d4:	005b      	lsls	r3, r3, #1
    61d6:	5cd3      	ldrb	r3, [r2, r3]
	link = node_rx->hdr.onion.link;
    61d8:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    61da:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    61dc:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    61de:	006d      	lsls	r5, r5, #1
	last = _radio.packet_rx_last + 1;
    61e0:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    61e2:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_rx_last + 1;
    61e4:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    61e6:	429d      	cmp	r5, r3
    61e8:	d100      	bne.n	61ec <packet_rx_enqueue+0x40>
		last = 0;
    61ea:	2300      	movs	r3, #0
	_radio.packet_rx_last = last;
    61ec:	5513      	strb	r3, [r2, r4]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    61ee:	3245      	adds	r2, #69	; 0x45
    61f0:	32ff      	adds	r2, #255	; 0xff
    61f2:	f7fd ff46 	bl	4082 <memq_enqueue>
	LL_ASSERT(link);
    61f6:	2800      	cmp	r0, #0
    61f8:	d102      	bne.n	6200 <packet_rx_enqueue+0x54>
    61fa:	b662      	cpsie	i
    61fc:	2004      	movs	r0, #4
    61fe:	df02      	svc	2
	radio_event_callback();
    6200:	f003 fc38 	bl	9a74 <radio_event_callback>
}
    6204:	bd70      	pop	{r4, r5, r6, pc}
    6206:	46c0      	nop			; (mov r8, r8)
    6208:	20000284 	.word	0x20000284

0000620c <mayfly_adv_stop>:
{
    620c:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    620e:	2001      	movs	r0, #1
    6210:	f7ff fc4a 	bl	5aa8 <packet_rx_reserve_get>
    6214:	1e04      	subs	r4, r0, #0
	LL_ASSERT(node_rx);
    6216:	d101      	bne.n	621c <mayfly_adv_stop+0x10>
    6218:	f7ff ff7e 	bl	6118 <chan_set.part.23>
	node_rx->hdr.handle = 0xffff;
    621c:	2301      	movs	r3, #1
    621e:	425b      	negs	r3, r3
    6220:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6222:	3307      	adds	r3, #7
    6224:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    6226:	2210      	movs	r2, #16
    6228:	2100      	movs	r1, #0
	radio_le_conn_cmplt = (void *)pdu_data_rx->lldata;
    622a:	300b      	adds	r0, #11
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    622c:	f7fb f902 	bl	1434 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    6230:	233c      	movs	r3, #60	; 0x3c
    6232:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
    6234:	f7ff ffba 	bl	61ac <packet_rx_enqueue>
}
    6238:	bd10      	pop	{r4, pc}
	...

0000623c <ticker_stop_adv_stop>:
{
    623c:	b530      	push	{r4, r5, lr}
    623e:	4c3f      	ldr	r4, [pc, #252]	; (633c <ticker_stop_adv_stop+0x100>)
    6240:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
    6242:	2800      	cmp	r0, #0
    6244:	d004      	beq.n	6250 <ticker_stop_adv_stop+0x14>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    6246:	7ba3      	ldrb	r3, [r4, #14]
    6248:	2b05      	cmp	r3, #5
    624a:	d074      	beq.n	6336 <ticker_stop_adv_stop+0xfa>
    624c:	f7ff ff64 	bl	6118 <chan_set.part.23>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6250:	7b23      	ldrb	r3, [r4, #12]
    6252:	2b05      	cmp	r3, #5
    6254:	d002      	beq.n	625c <ticker_stop_adv_stop+0x20>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    6256:	7b63      	ldrb	r3, [r4, #13]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6258:	2b05      	cmp	r3, #5
    625a:	d164      	bne.n	6326 <ticker_stop_adv_stop+0xea>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    625c:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    625e:	2200      	movs	r2, #0
    6260:	4d37      	ldr	r5, [pc, #220]	; (6340 <ticker_stop_adv_stop+0x104>)
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6262:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6264:	ab02      	add	r3, sp, #8
    6266:	9300      	str	r3, [sp, #0]
    6268:	2101      	movs	r1, #1
    626a:	002b      	movs	r3, r5
    626c:	0010      	movs	r0, r2
    626e:	f7fe fd77 	bl	4d60 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    6272:	2802      	cmp	r0, #2
    6274:	d00e      	beq.n	6294 <ticker_stop_adv_stop+0x58>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    6276:	9802      	ldr	r0, [sp, #8]
    6278:	2800      	cmp	r0, #0
    627a:	d018      	beq.n	62ae <ticker_stop_adv_stop+0x72>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    627c:	9802      	ldr	r0, [sp, #8]
    627e:	2801      	cmp	r0, #1
    6280:	d11a      	bne.n	62b8 <ticker_stop_adv_stop+0x7c>
		if (_radio.role != ROLE_NONE) {
    6282:	7be3      	ldrb	r3, [r4, #15]
    6284:	2b00      	cmp	r3, #0
    6286:	d04e      	beq.n	6326 <ticker_stop_adv_stop+0xea>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    6288:	2204      	movs	r2, #4
    628a:	4b2e      	ldr	r3, [pc, #184]	; (6344 <ticker_stop_adv_stop+0x108>)
    628c:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    628e:	2200      	movs	r2, #0
    6290:	0011      	movs	r1, r2
    6292:	e044      	b.n	631e <ticker_stop_adv_stop+0xe2>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6294:	2201      	movs	r2, #1
    6296:	0011      	movs	r1, r2
    6298:	0010      	movs	r0, r2
    629a:	f7fd ff37 	bl	410c <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    629e:	9b02      	ldr	r3, [sp, #8]
    62a0:	2b02      	cmp	r3, #2
    62a2:	d1e8      	bne.n	6276 <ticker_stop_adv_stop+0x3a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    62a4:	2101      	movs	r1, #1
    62a6:	2000      	movs	r0, #0
    62a8:	f7fe fdee 	bl	4e88 <ticker_job_sched>
    62ac:	e7f7      	b.n	629e <ticker_stop_adv_stop+0x62>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    62ae:	2302      	movs	r3, #2
    62b0:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    62b2:	7b23      	ldrb	r3, [r4, #12]
    62b4:	2b00      	cmp	r3, #0
    62b6:	d102      	bne.n	62be <ticker_stop_adv_stop+0x82>
	LL_ASSERT(!retval);
    62b8:	b662      	cpsie	i
    62ba:	2004      	movs	r0, #4
    62bc:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    62be:	2201      	movs	r2, #1
    62c0:	ab03      	add	r3, sp, #12
		_radio.ticker_id_prepare = 0;
    62c2:	7320      	strb	r0, [r4, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    62c4:	0011      	movs	r1, r2
    62c6:	9300      	str	r3, [sp, #0]
    62c8:	002b      	movs	r3, r5
    62ca:	f7fe fd49 	bl	4d60 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    62ce:	2802      	cmp	r0, #2
    62d0:	d00f      	beq.n	62f2 <ticker_stop_adv_stop+0xb6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    62d2:	9903      	ldr	r1, [sp, #12]
    62d4:	2900      	cmp	r1, #0
    62d6:	d019      	beq.n	630c <ticker_stop_adv_stop+0xd0>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    62d8:	9c03      	ldr	r4, [sp, #12]
    62da:	2c01      	cmp	r4, #1
    62dc:	d1ec      	bne.n	62b8 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    62de:	2200      	movs	r2, #0
    62e0:	4b19      	ldr	r3, [pc, #100]	; (6348 <ticker_stop_adv_stop+0x10c>)
    62e2:	0011      	movs	r1, r2
    62e4:	0020      	movs	r0, r4
    62e6:	f7fd ff35 	bl	4154 <mayfly_enqueue>
    62ea:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    62ec:	d1e4      	bne.n	62b8 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    62ee:	4b17      	ldr	r3, [pc, #92]	; (634c <ticker_stop_adv_stop+0x110>)
    62f0:	e013      	b.n	631a <ticker_stop_adv_stop+0xde>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    62f2:	2201      	movs	r2, #1
    62f4:	0011      	movs	r1, r2
    62f6:	0010      	movs	r0, r2
    62f8:	f7fd ff08 	bl	410c <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    62fc:	9b03      	ldr	r3, [sp, #12]
    62fe:	2b02      	cmp	r3, #2
    6300:	d1e7      	bne.n	62d2 <ticker_stop_adv_stop+0x96>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6302:	2101      	movs	r1, #1
    6304:	2000      	movs	r0, #0
    6306:	f7fe fdbf 	bl	4e88 <ticker_job_sched>
    630a:	e7f7      	b.n	62fc <ticker_stop_adv_stop+0xc0>
			ticks_xtal_to_start &= ~XON_BITMASK;
    630c:	6963      	ldr	r3, [r4, #20]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    630e:	69a2      	ldr	r2, [r4, #24]
			ticks_xtal_to_start &= ~XON_BITMASK;
    6310:	005b      	lsls	r3, r3, #1
    6312:	085b      	lsrs	r3, r3, #1
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6314:	4293      	cmp	r3, r2
    6316:	d2ea      	bcs.n	62ee <ticker_stop_adv_stop+0xb2>
				ret = mayfly_enqueue(
    6318:	4b0b      	ldr	r3, [pc, #44]	; (6348 <ticker_stop_adv_stop+0x10c>)
    631a:	000a      	movs	r2, r1
    631c:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    631e:	f7fd ff19 	bl	4154 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6322:	2800      	cmp	r0, #0
    6324:	d1c8      	bne.n	62b8 <ticker_stop_adv_stop+0x7c>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6326:	2200      	movs	r2, #0
    6328:	4b09      	ldr	r3, [pc, #36]	; (6350 <ticker_stop_adv_stop+0x114>)
    632a:	0011      	movs	r1, r2
    632c:	2001      	movs	r0, #1
    632e:	f7fd ff11 	bl	4154 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6332:	2800      	cmp	r0, #0
    6334:	d1c0      	bne.n	62b8 <ticker_stop_adv_stop+0x7c>
}
    6336:	b005      	add	sp, #20
    6338:	bd30      	pop	{r4, r5, pc}
    633a:	46c0      	nop			; (mov r8, r8)
    633c:	20000284 	.word	0x20000284
    6340:	00005a51 	.word	0x00005a51
    6344:	20002370 	.word	0x20002370
    6348:	20002330 	.word	0x20002330
    634c:	200023c0 	.word	0x200023c0
    6350:	20002310 	.word	0x20002310

00006354 <sched_after_mstr_free_offset_get>:
{
    6354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6356:	001c      	movs	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
    6358:	9201      	str	r2, [sp, #4]
{
    635a:	0005      	movs	r5, r0
    635c:	0017      	movs	r7, r2
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    635e:	3127      	adds	r1, #39	; 0x27
    6360:	aa01      	add	r2, sp, #4
    6362:	2001      	movs	r0, #1
    6364:	f7ff fd5a 	bl	5e1c <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    6368:	6823      	ldr	r3, [r4, #0]
    636a:	2b00      	cmp	r3, #0
    636c:	d01d      	beq.n	63aa <sched_after_mstr_free_offset_get+0x56>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    636e:	2380      	movs	r3, #128	; 0x80
    6370:	9801      	ldr	r0, [sp, #4]
    6372:	041b      	lsls	r3, r3, #16
    6374:	1bc6      	subs	r6, r0, r7
    6376:	401e      	ands	r6, r3
    6378:	d001      	beq.n	637e <sched_after_mstr_free_offset_get+0x2a>
    637a:	f7ff fecd 	bl	6118 <chan_set.part.23>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    637e:	0039      	movs	r1, r7
    6380:	f7fe fd96 	bl	4eb0 <ticker_ticks_diff_get>
    6384:	4a0b      	ldr	r2, [pc, #44]	; (63b4 <sched_after_mstr_free_offset_get+0x60>)
    6386:	2307      	movs	r3, #7
    6388:	0031      	movs	r1, r6
    638a:	f7fa f805 	bl	398 <__aeabi_lmul>
    638e:	2300      	movs	r3, #0
    6390:	4a09      	ldr	r2, [pc, #36]	; (63b8 <sched_after_mstr_free_offset_get+0x64>)
    6392:	f7f9 ffe1 	bl	358 <__aeabi_uldivmod>
    6396:	6823      	ldr	r3, [r4, #0]
    6398:	1818      	adds	r0, r3, r0
    639a:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    639c:	2800      	cmp	r0, #0
    639e:	db04      	blt.n	63aa <sched_after_mstr_free_offset_get+0x56>
		u32_t conn_interval_us = conn_interval * 1250;
    63a0:	4806      	ldr	r0, [pc, #24]	; (63bc <sched_after_mstr_free_offset_get+0x68>)
    63a2:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    63a4:	6823      	ldr	r3, [r4, #0]
    63a6:	4298      	cmp	r0, r3
    63a8:	d300      	bcc.n	63ac <sched_after_mstr_free_offset_get+0x58>
}
    63aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			*win_offset_us -= conn_interval_us;
    63ac:	1a1b      	subs	r3, r3, r0
    63ae:	6023      	str	r3, [r4, #0]
    63b0:	e7f8      	b.n	63a4 <sched_after_mstr_free_offset_get+0x50>
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	1afd498d 	.word	0x1afd498d
    63b8:	3b9aca00 	.word	0x3b9aca00
    63bc:	000004e2 	.word	0x000004e2

000063c0 <mayfly_sched_win_offset_use>:
{
    63c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    63c2:	0003      	movs	r3, r0
{
    63c4:	0004      	movs	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    63c6:	336c      	adds	r3, #108	; 0x6c
    63c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    63ca:	68e1      	ldr	r1, [r4, #12]
    63cc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    63ce:	f7ff ffc1 	bl	6354 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    63d2:	466b      	mov	r3, sp
    63d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    63d6:	4905      	ldr	r1, [pc, #20]	; (63ec <mayfly_sched_win_offset_use+0x2c>)
    63d8:	1d9d      	adds	r5, r3, #6
    63da:	f7f9 fef5 	bl	1c8 <__aeabi_uidiv>
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    63de:	0029      	movs	r1, r5
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    63e0:	8028      	strh	r0, [r5, #0]
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    63e2:	2202      	movs	r2, #2
    63e4:	6f60      	ldr	r0, [r4, #116]	; 0x74
    63e6:	f7fa fffb 	bl	13e0 <memcpy>
}
    63ea:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    63ec:	000004e2 	.word	0x000004e2

000063f0 <chan_set>:
{
    63f0:	b510      	push	{r4, lr}
    63f2:	0004      	movs	r4, r0
	switch (chan) {
    63f4:	2826      	cmp	r0, #38	; 0x26
    63f6:	d009      	beq.n	640c <chan_set+0x1c>
    63f8:	2827      	cmp	r0, #39	; 0x27
    63fa:	d00e      	beq.n	641a <chan_set+0x2a>
		radio_freq_chan_set(2);
    63fc:	2002      	movs	r0, #2
	switch (chan) {
    63fe:	2c25      	cmp	r4, #37	; 0x25
    6400:	d005      	beq.n	640e <chan_set+0x1e>
		if (chan < 11) {
    6402:	2c0a      	cmp	r4, #10
    6404:	d80b      	bhi.n	641e <chan_set+0x2e>
			radio_freq_chan_set(4 + (2 * chan));
    6406:	1ca0      	adds	r0, r4, #2
    6408:	0040      	lsls	r0, r0, #1
    640a:	e000      	b.n	640e <chan_set+0x1e>
		radio_freq_chan_set(26);
    640c:	201a      	movs	r0, #26
			radio_freq_chan_set(4 + (2 * chan));
    640e:	f004 f853 	bl	a4b8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    6412:	0020      	movs	r0, r4
    6414:	f004 f858 	bl	a4c8 <radio_whiten_iv_set>
}
    6418:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(80);
    641a:	2050      	movs	r0, #80	; 0x50
    641c:	e7f7      	b.n	640e <chan_set+0x1e>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    641e:	1ce0      	adds	r0, r4, #3
		} else if (chan < 40) {
    6420:	2c27      	cmp	r4, #39	; 0x27
    6422:	d9f1      	bls.n	6408 <chan_set+0x18>
    6424:	f7ff fe78 	bl	6118 <chan_set.part.23>

00006428 <adv_setup>:
{
    6428:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    642a:	4c2d      	ldr	r4, [pc, #180]	; (64e0 <adv_setup+0xb8>)
    642c:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    642e:	0022      	movs	r2, r4
	if (_radio.advertiser.adv_data.first !=
    6430:	3374      	adds	r3, #116	; 0x74
	    _radio.advertiser.adv_data.last) {
    6432:	3275      	adds	r2, #117	; 0x75
	if (_radio.advertiser.adv_data.first !=
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	7812      	ldrb	r2, [r2, #0]
    6438:	429a      	cmp	r2, r3
    643a:	d007      	beq.n	644c <adv_setup+0x24>
		first = _radio.advertiser.adv_data.first + 1;
    643c:	3301      	adds	r3, #1
    643e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    6440:	2b02      	cmp	r3, #2
    6442:	d100      	bne.n	6446 <adv_setup+0x1e>
			first = 0;
    6444:	2300      	movs	r3, #0
		_radio.advertiser.adv_data.first = first;
    6446:	0022      	movs	r2, r4
    6448:	3274      	adds	r2, #116	; 0x74
    644a:	7013      	strb	r3, [r2, #0]
	if (_radio.advertiser.scan_data.first != _radio.
    644c:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    644e:	0022      	movs	r2, r4
	if (_radio.advertiser.scan_data.first != _radio.
    6450:	33c4      	adds	r3, #196	; 0xc4
	    advertiser.scan_data.last) {
    6452:	32c5      	adds	r2, #197	; 0xc5
	if (_radio.advertiser.scan_data.first != _radio.
    6454:	781b      	ldrb	r3, [r3, #0]
    6456:	7812      	ldrb	r2, [r2, #0]
    6458:	429a      	cmp	r2, r3
    645a:	d007      	beq.n	646c <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    645c:	3301      	adds	r3, #1
    645e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    6460:	2b02      	cmp	r3, #2
    6462:	d100      	bne.n	6466 <adv_setup+0x3e>
			first = 0;
    6464:	2300      	movs	r3, #0
		_radio.advertiser.scan_data.first = first;
    6466:	0022      	movs	r2, r4
    6468:	32c4      	adds	r2, #196	; 0xc4
    646a:	7013      	strb	r3, [r2, #0]
					[_radio.advertiser.adv_data.first];
    646c:	0023      	movs	r3, r4
	pdu = (void *)_radio.advertiser.adv_data.data
    646e:	2527      	movs	r5, #39	; 0x27
					[_radio.advertiser.adv_data.first];
    6470:	3374      	adds	r3, #116	; 0x74
	pdu = (void *)_radio.advertiser.adv_data.data
    6472:	781b      	ldrb	r3, [r3, #0]
    6474:	435d      	muls	r5, r3
    6476:	3526      	adds	r5, #38	; 0x26
    6478:	1965      	adds	r5, r4, r5
	radio_pkt_tx_set(pdu);
    647a:	0028      	movs	r0, r5
    647c:	f004 f884 	bl	a588 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6480:	220f      	movs	r2, #15
    6482:	782b      	ldrb	r3, [r5, #0]
    6484:	4013      	ands	r3, r2
    6486:	2b02      	cmp	r3, #2
    6488:	d020      	beq.n	64cc <adv_setup+0xa4>
    648a:	2b07      	cmp	r3, #7
    648c:	d01e      	beq.n	64cc <adv_setup+0xa4>
		_radio.state = STATE_TX;
    648e:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    6490:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    6492:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    6494:	f004 f976 	bl	a784 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    6498:	2000      	movs	r0, #0
    649a:	f004 f8e1 	bl	a660 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    649e:	1d63      	adds	r3, r4, #5
    64a0:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    64a2:	2000      	movs	r0, #0
	bitmap = _radio.advertiser.chan_map_current;
    64a4:	075b      	lsls	r3, r3, #29
    64a6:	0f5a      	lsrs	r2, r3, #29
    64a8:	b2d3      	uxtb	r3, r2
    64aa:	0019      	movs	r1, r3
	while ((bitmap & 0x01) == 0) {
    64ac:	2501      	movs	r5, #1
    64ae:	4229      	tst	r1, r5
    64b0:	d011      	beq.n	64d6 <adv_setup+0xae>
	_radio.advertiser.chan_map_current &=
    64b2:	2107      	movs	r1, #7
    64b4:	3405      	adds	r4, #5
		(_radio.advertiser.chan_map_current - 1);
    64b6:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    64b8:	4013      	ands	r3, r2
    64ba:	7fe2      	ldrb	r2, [r4, #31]
    64bc:	400b      	ands	r3, r1
    64be:	438a      	bics	r2, r1
    64c0:	4313      	orrs	r3, r2
	chan_set(37 + chan);
    64c2:	3025      	adds	r0, #37	; 0x25
	_radio.advertiser.chan_map_current &=
    64c4:	77e3      	strb	r3, [r4, #31]
	chan_set(37 + chan);
    64c6:	f7ff ff93 	bl	63f0 <chan_set>
}
    64ca:	bd70      	pop	{r4, r5, r6, pc}
		_radio.state = STATE_CLOSE;
    64cc:	2303      	movs	r3, #3
    64ce:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    64d0:	f004 f8d6 	bl	a680 <radio_switch_complete_and_disable>
    64d4:	e7e3      	b.n	649e <adv_setup+0x76>
		chan++;
    64d6:	3001      	adds	r0, #1
    64d8:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    64da:	0849      	lsrs	r1, r1, #1
    64dc:	e7e7      	b.n	64ae <adv_setup+0x86>
    64de:	46c0      	nop			; (mov r8, r8)
    64e0:	20000284 	.word	0x20000284

000064e4 <pdu_node_tx_release>:
{
    64e4:	b570      	push	{r4, r5, r6, lr}
	last = _radio.packet_release_last + 1;
    64e6:	24b6      	movs	r4, #182	; 0xb6
	if (last == _radio.packet_tx_count) {
    64e8:	25b4      	movs	r5, #180	; 0xb4
	last = _radio.packet_release_last + 1;
    64ea:	4a0f      	ldr	r2, [pc, #60]	; (6528 <pdu_node_tx_release+0x44>)
    64ec:	0064      	lsls	r4, r4, #1
    64ee:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_tx_count) {
    64f0:	006d      	lsls	r5, r5, #1
	last = _radio.packet_release_last + 1;
    64f2:	3301      	adds	r3, #1
	if (last == _radio.packet_tx_count) {
    64f4:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_release_last + 1;
    64f6:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
    64f8:	429d      	cmp	r5, r3
    64fa:	d100      	bne.n	64fe <pdu_node_tx_release+0x1a>
		last = 0;
    64fc:	2300      	movs	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    64fe:	256c      	movs	r5, #108	; 0x6c
    6500:	35ff      	adds	r5, #255	; 0xff
    6502:	5d55      	ldrb	r5, [r2, r5]
    6504:	429d      	cmp	r5, r3
    6506:	d101      	bne.n	650c <pdu_node_tx_release+0x28>
    6508:	f7ff fe06 	bl	6118 <chan_set.part.23>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    650c:	0015      	movs	r5, r2
    650e:	5d16      	ldrb	r6, [r2, r4]
    6510:	35fc      	adds	r5, #252	; 0xfc
    6512:	6ead      	ldr	r5, [r5, #104]	; 0x68
    6514:	00f6      	lsls	r6, r6, #3
    6516:	5370      	strh	r0, [r6, r5]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    6518:	5d10      	ldrb	r0, [r2, r4]
    651a:	00c0      	lsls	r0, r0, #3
    651c:	182d      	adds	r5, r5, r0
    651e:	6069      	str	r1, [r5, #4]
	_radio.packet_release_last = last;
    6520:	5513      	strb	r3, [r2, r4]
	radio_event_callback();
    6522:	f003 faa7 	bl	9a74 <radio_event_callback>
}
    6526:	bd70      	pop	{r4, r5, r6, pc}
    6528:	20000284 	.word	0x20000284

0000652c <packet_tx_enqueue>:
{
    652c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    652e:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    6530:	9b01      	ldr	r3, [sp, #4]
    6532:	2b00      	cmp	r3, #0
    6534:	d008      	beq.n	6548 <packet_tx_enqueue+0x1c>
    6536:	266a      	movs	r6, #106	; 0x6a
    6538:	22b5      	movs	r2, #181	; 0xb5
    653a:	4d23      	ldr	r5, [pc, #140]	; (65c8 <packet_tx_enqueue+0x9c>)
    653c:	36ff      	adds	r6, #255	; 0xff
    653e:	0052      	lsls	r2, r2, #1
    6540:	5dab      	ldrb	r3, [r5, r6]
    6542:	5caa      	ldrb	r2, [r5, r2]
    6544:	429a      	cmp	r2, r3
    6546:	d100      	bne.n	654a <packet_tx_enqueue+0x1e>
}
    6548:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    654a:	002b      	movs	r3, r5
    654c:	5daf      	ldrb	r7, [r5, r6]
    654e:	33fc      	adds	r3, #252	; 0xfc
    6550:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    6552:	00ff      	lsls	r7, r7, #3
    6554:	19d7      	adds	r7, r2, r7
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6556:	2182      	movs	r1, #130	; 0x82
		node_tx_new->next = NULL;
    6558:	2200      	movs	r2, #0
		node_tx_new = pdu_data_q_tx->node_tx;
    655a:	687c      	ldr	r4, [r7, #4]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    655c:	6898      	ldr	r0, [r3, #8]
		node_tx_new->next = NULL;
    655e:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6560:	0049      	lsls	r1, r1, #1
    6562:	883a      	ldrh	r2, [r7, #0]
    6564:	f7fd fd6f 	bl	4046 <mem_get>
    6568:	0003      	movs	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    656a:	8838      	ldrh	r0, [r7, #0]
    656c:	8c1a      	ldrh	r2, [r3, #32]
    656e:	4282      	cmp	r2, r0
    6570:	d121      	bne.n	65b6 <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    6572:	0019      	movs	r1, r3
    6574:	001a      	movs	r2, r3
    6576:	31f8      	adds	r1, #248	; 0xf8
    6578:	6808      	ldr	r0, [r1, #0]
    657a:	32fc      	adds	r2, #252	; 0xfc
    657c:	2800      	cmp	r0, #0
    657e:	d106      	bne.n	658e <packet_tx_enqueue+0x62>
				if (conn->pkt_tx_head == 0) {
    6580:	33ec      	adds	r3, #236	; 0xec
				conn->pkt_tx_data = node_tx_new;
    6582:	600c      	str	r4, [r1, #0]
				if (conn->pkt_tx_head == 0) {
    6584:	6819      	ldr	r1, [r3, #0]
    6586:	2900      	cmp	r1, #0
    6588:	d101      	bne.n	658e <packet_tx_enqueue+0x62>
					conn->pkt_tx_head = node_tx_new;
    658a:	601c      	str	r4, [r3, #0]
					conn->pkt_tx_last = NULL;
    658c:	6011      	str	r1, [r2, #0]
			if (conn->pkt_tx_last) {
    658e:	6813      	ldr	r3, [r2, #0]
    6590:	2b00      	cmp	r3, #0
    6592:	d000      	beq.n	6596 <packet_tx_enqueue+0x6a>
				conn->pkt_tx_last->next = node_tx_new;
    6594:	601c      	str	r4, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
    6596:	6014      	str	r4, [r2, #0]
		if (first == _radio.packet_tx_count) {
    6598:	22b4      	movs	r2, #180	; 0xb4
		first = _radio.packet_tx_first + 1;
    659a:	5dab      	ldrb	r3, [r5, r6]
		if (first == _radio.packet_tx_count) {
    659c:	0052      	lsls	r2, r2, #1
		first = _radio.packet_tx_first + 1;
    659e:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    65a0:	5caa      	ldrb	r2, [r5, r2]
		first = _radio.packet_tx_first + 1;
    65a2:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    65a4:	429a      	cmp	r2, r3
    65a6:	d100      	bne.n	65aa <packet_tx_enqueue+0x7e>
			first = 0;
    65a8:	2300      	movs	r3, #0
		_radio.packet_tx_first = first;
    65aa:	55ab      	strb	r3, [r5, r6]
    65ac:	9e01      	ldr	r6, [sp, #4]
    65ae:	3e01      	subs	r6, #1
    65b0:	b2f3      	uxtb	r3, r6
    65b2:	9301      	str	r3, [sp, #4]
    65b4:	e7bc      	b.n	6530 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    65b6:	2203      	movs	r2, #3
    65b8:	7923      	ldrb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    65ba:	0021      	movs	r1, r4
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    65bc:	4393      	bics	r3, r2
    65be:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    65c0:	f7ff ff90 	bl	64e4 <pdu_node_tx_release>
    65c4:	e7e8      	b.n	6598 <packet_tx_enqueue+0x6c>
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	20000284 	.word	0x20000284

000065cc <connection_release>:
{
    65cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    65ce:	2201      	movs	r2, #1
{
    65d0:	0004      	movs	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    65d2:	0011      	movs	r1, r2
    65d4:	2000      	movs	r0, #0
    65d6:	f7fd fd99 	bl	410c <mayfly_enable>
	ticker_status =
    65da:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    65dc:	8c22      	ldrh	r2, [r4, #32]
	ticker_status =
    65de:	4f39      	ldr	r7, [pc, #228]	; (66c4 <connection_release+0xf8>)
    65e0:	4b39      	ldr	r3, [pc, #228]	; (66c8 <connection_release+0xfc>)
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    65e2:	3207      	adds	r2, #7
	ticker_status =
    65e4:	9300      	str	r3, [sp, #0]
    65e6:	b2d2      	uxtb	r2, r2
    65e8:	003b      	movs	r3, r7
    65ea:	0008      	movs	r0, r1
    65ec:	f7fe fbb8 	bl	4d60 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    65f0:	2602      	movs	r6, #2
    65f2:	43b0      	bics	r0, r6
    65f4:	d002      	beq.n	65fc <connection_release+0x30>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    65f6:	b662      	cpsie	i
    65f8:	2004      	movs	r0, #4
    65fa:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    65fc:	4d33      	ldr	r5, [pc, #204]	; (66cc <connection_release+0x100>)
    65fe:	7c2b      	ldrb	r3, [r5, #16]
    6600:	2b05      	cmp	r3, #5
    6602:	d117      	bne.n	6634 <connection_release+0x68>
					  conn->handle))) {
    6604:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    6606:	7b2a      	ldrb	r2, [r5, #12]
    6608:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
    660a:	429a      	cmp	r2, r3
    660c:	d112      	bne.n	6634 <connection_release+0x68>
		ticker_status =
    660e:	4b30      	ldr	r3, [pc, #192]	; (66d0 <connection_release+0x104>)
		_radio.ticker_id_prepare = 0;
    6610:	7328      	strb	r0, [r5, #12]
		ticker_status =
    6612:	2201      	movs	r2, #1
    6614:	9300      	str	r3, [sp, #0]
    6616:	0001      	movs	r1, r0
    6618:	003b      	movs	r3, r7
    661a:	f7fe fba1 	bl	4d60 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    661e:	43b0      	bics	r0, r6
    6620:	d1e9      	bne.n	65f6 <connection_release+0x2a>
		ticker_status =
    6622:	4b2c      	ldr	r3, [pc, #176]	; (66d4 <connection_release+0x108>)
    6624:	0002      	movs	r2, r0
    6626:	9300      	str	r3, [sp, #0]
    6628:	0001      	movs	r1, r0
    662a:	003b      	movs	r3, r7
    662c:	f7fe fb98 	bl	4d60 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6630:	43b0      	bics	r0, r6
    6632:	d1e0      	bne.n	65f6 <connection_release+0x2a>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    6634:	0026      	movs	r6, r4
    6636:	0027      	movs	r7, r4
    6638:	36ec      	adds	r6, #236	; 0xec
    663a:	37f0      	adds	r7, #240	; 0xf0
    663c:	6831      	ldr	r1, [r6, #0]
    663e:	683b      	ldr	r3, [r7, #0]
    6640:	4299      	cmp	r1, r3
    6642:	d004      	beq.n	664e <connection_release+0x82>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    6644:	0023      	movs	r3, r4
    6646:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	4299      	cmp	r1, r3
    664c:	d11a      	bne.n	6684 <connection_release+0xb8>
	while ((conn->pkt_tx_head) &&
    664e:	6830      	ldr	r0, [r6, #0]
    6650:	2800      	cmp	r0, #0
    6652:	d004      	beq.n	665e <connection_release+0x92>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    6654:	0023      	movs	r3, r4
    6656:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head) &&
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	4298      	cmp	r0, r3
    665c:	d11c      	bne.n	6698 <connection_release+0xcc>
	conn->pkt_tx_ctrl = NULL;
    665e:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    6660:	0022      	movs	r2, r4
	conn->pkt_tx_ctrl = NULL;
    6662:	603b      	str	r3, [r7, #0]
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    6664:	2703      	movs	r7, #3
	conn->pkt_tx_ctrl_last = NULL;
    6666:	32f4      	adds	r2, #244	; 0xf4
    6668:	6013      	str	r3, [r2, #0]
	while (conn->pkt_tx_head) {
    666a:	6831      	ldr	r1, [r6, #0]
    666c:	2900      	cmp	r1, #0
    666e:	d11c      	bne.n	66aa <connection_release+0xde>
	conn->handle = 0xffff;
    6670:	2301      	movs	r3, #1
    6672:	425b      	negs	r3, r3
    6674:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    6676:	337e      	adds	r3, #126	; 0x7e
    6678:	33ff      	adds	r3, #255	; 0xff
    667a:	58ea      	ldr	r2, [r5, r3]
    667c:	4294      	cmp	r4, r2
    667e:	d100      	bne.n	6682 <connection_release+0xb6>
		_radio.conn_upd = NULL;
    6680:	50e9      	str	r1, [r5, r3]
}
    6682:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    6684:	2203      	movs	r2, #3
    6686:	790b      	ldrb	r3, [r1, #4]
    6688:	4393      	bics	r3, r2
    668a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    668c:	680b      	ldr	r3, [r1, #0]
    668e:	6033      	str	r3, [r6, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    6690:	8c20      	ldrh	r0, [r4, #32]
    6692:	f7ff ff27 	bl	64e4 <pdu_node_tx_release>
    6696:	e7cd      	b.n	6634 <connection_release+0x68>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    6698:	0029      	movs	r1, r5
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    669a:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    669c:	3151      	adds	r1, #81	; 0x51
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    669e:	6033      	str	r3, [r6, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    66a0:	31ff      	adds	r1, #255	; 0xff
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    66a2:	603b      	str	r3, [r7, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    66a4:	f7fd fcb9 	bl	401a <mem_release>
    66a8:	e7d1      	b.n	664e <connection_release+0x82>
		conn->pkt_tx_data = conn->pkt_tx_head;
    66aa:	0022      	movs	r2, r4
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    66ac:	790b      	ldrb	r3, [r1, #4]
		conn->pkt_tx_data = conn->pkt_tx_head;
    66ae:	32f8      	adds	r2, #248	; 0xf8
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    66b0:	43bb      	bics	r3, r7
    66b2:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    66b4:	680b      	ldr	r3, [r1, #0]
    66b6:	6033      	str	r3, [r6, #0]
		conn->pkt_tx_data = conn->pkt_tx_head;
    66b8:	6013      	str	r3, [r2, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    66ba:	8c20      	ldrh	r0, [r4, #32]
    66bc:	f7ff ff12 	bl	64e4 <pdu_node_tx_release>
    66c0:	e7d3      	b.n	666a <connection_release+0x9e>
    66c2:	46c0      	nop			; (mov r8, r8)
    66c4:	00006809 	.word	0x00006809
    66c8:	00002308 	.word	0x00002308
    66cc:	20000284 	.word	0x20000284
    66d0:	00002319 	.word	0x00002319
    66d4:	00002320 	.word	0x00002320

000066d8 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    66d8:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    66da:	1f03      	subs	r3, r0, #4
{
    66dc:	b510      	push	{r4, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    66de:	2b01      	cmp	r3, #1
    66e0:	d901      	bls.n	66e6 <mayfly_radio_stop+0xe>
    66e2:	f7ff fd19 	bl	6118 <chan_set.part.23>
	radio_used = ((_radio.state != STATE_NONE) &&
    66e6:	4a08      	ldr	r2, [pc, #32]	; (6708 <mayfly_radio_stop+0x30>)
    66e8:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    66ea:	2b00      	cmp	r3, #0
    66ec:	d006      	beq.n	66fc <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    66ee:	3b04      	subs	r3, #4
    66f0:	2b01      	cmp	r3, #1
    66f2:	d903      	bls.n	66fc <mayfly_radio_stop+0x24>
			_radio.state = state;
    66f4:	7410      	strb	r0, [r2, #16]
		radio_disable();
    66f6:	f003 ff63 	bl	a5c0 <radio_disable>
}
    66fa:	bd10      	pop	{r4, pc}
	if (radio_used || !radio_is_idle()) {
    66fc:	f003 ff82 	bl	a604 <radio_is_idle>
    6700:	2800      	cmp	r0, #0
    6702:	d0f8      	beq.n	66f6 <mayfly_radio_stop+0x1e>
    6704:	e7f9      	b.n	66fa <mayfly_radio_stop+0x22>
    6706:	46c0      	nop			; (mov r8, r8)
    6708:	20000284 	.word	0x20000284

0000670c <mayfly_radio_active>:
{
    670c:	b510      	push	{r4, lr}
    670e:	4b0b      	ldr	r3, [pc, #44]	; (673c <mayfly_radio_active+0x30>)
	if ((u32_t)params) {
    6710:	2800      	cmp	r0, #0
    6712:	d006      	beq.n	6722 <mayfly_radio_active+0x16>
		if (s_active++) {
    6714:	781a      	ldrb	r2, [r3, #0]
		radio_active_callback(1);
    6716:	2001      	movs	r0, #1
		if (s_active++) {
    6718:	1c51      	adds	r1, r2, #1
    671a:	7019      	strb	r1, [r3, #0]
    671c:	2a00      	cmp	r2, #0
    671e:	d00a      	beq.n	6736 <mayfly_radio_active+0x2a>
}
    6720:	bd10      	pop	{r4, pc}
		LL_ASSERT(s_active);
    6722:	7818      	ldrb	r0, [r3, #0]
    6724:	2800      	cmp	r0, #0
    6726:	d101      	bne.n	672c <mayfly_radio_active+0x20>
    6728:	f7ff fcf6 	bl	6118 <chan_set.part.23>
		if (--s_active) {
    672c:	3801      	subs	r0, #1
    672e:	b2c0      	uxtb	r0, r0
    6730:	7018      	strb	r0, [r3, #0]
    6732:	2800      	cmp	r0, #0
    6734:	d1f4      	bne.n	6720 <mayfly_radio_active+0x14>
		radio_active_callback(0);
    6736:	f003 f99c 	bl	9a72 <radio_active_callback>
    673a:	e7f1      	b.n	6720 <mayfly_radio_active+0x14>
    673c:	20000434 	.word	0x20000434

00006740 <mayfly_radio_inactive>:
{
    6740:	b510      	push	{r4, lr}
	mayfly_radio_active(0);
    6742:	2000      	movs	r0, #0
    6744:	f7ff ffe2 	bl	670c <mayfly_radio_active>
}
    6748:	bd10      	pop	{r4, pc}
	...

0000674c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    674c:	2200      	movs	r2, #0
{
    674e:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6750:	4b04      	ldr	r3, [pc, #16]	; (6764 <event_xtal+0x18>)
    6752:	0011      	movs	r1, r2
    6754:	0010      	movs	r0, r2
    6756:	f7fd fcfd 	bl	4154 <mayfly_enqueue>
	LL_ASSERT(!retval);
    675a:	2800      	cmp	r0, #0
    675c:	d001      	beq.n	6762 <event_xtal+0x16>
    675e:	f7ff fcdb 	bl	6118 <chan_set.part.23>
}
    6762:	bd10      	pop	{r4, pc}
    6764:	200023a0 	.word	0x200023a0

00006768 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6768:	2200      	movs	r2, #0
{
    676a:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    676c:	4b04      	ldr	r3, [pc, #16]	; (6780 <event_active+0x18>)
    676e:	0011      	movs	r1, r2
    6770:	0010      	movs	r0, r2
    6772:	f7fd fcef 	bl	4154 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6776:	2800      	cmp	r0, #0
    6778:	d001      	beq.n	677e <event_active+0x16>
    677a:	f7ff fccd 	bl	6118 <chan_set.part.23>
}
    677e:	bd10      	pop	{r4, pc}
    6780:	20002320 	.word	0x20002320

00006784 <ticker_update_slave_assert>:
{
    6784:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    6786:	2800      	cmp	r0, #0
    6788:	d006      	beq.n	6798 <ticker_update_slave_assert+0x14>
    678a:	4b04      	ldr	r3, [pc, #16]	; (679c <ticker_update_slave_assert+0x18>)
    678c:	b2c9      	uxtb	r1, r1
    678e:	7b9b      	ldrb	r3, [r3, #14]
    6790:	4299      	cmp	r1, r3
    6792:	d001      	beq.n	6798 <ticker_update_slave_assert+0x14>
    6794:	f7ff fcc0 	bl	6118 <chan_set.part.23>
}
    6798:	bd10      	pop	{r4, pc}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	20000284 	.word	0x20000284

000067a0 <ticker_update_adv_assert>:
{
    67a0:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    67a2:	2800      	cmp	r0, #0
    67a4:	d005      	beq.n	67b2 <ticker_update_adv_assert+0x12>
    67a6:	4b03      	ldr	r3, [pc, #12]	; (67b4 <ticker_update_adv_assert+0x14>)
    67a8:	7b9b      	ldrb	r3, [r3, #14]
    67aa:	2b05      	cmp	r3, #5
    67ac:	d001      	beq.n	67b2 <ticker_update_adv_assert+0x12>
    67ae:	f7ff fcb3 	bl	6118 <chan_set.part.23>
}
    67b2:	bd10      	pop	{r4, pc}
    67b4:	20000284 	.word	0x20000284

000067b8 <ticker_stop_scan_assert>:
{
    67b8:	b510      	push	{r4, lr}
    67ba:	4b08      	ldr	r3, [pc, #32]	; (67dc <ticker_stop_scan_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    67bc:	2801      	cmp	r0, #1
    67be:	d107      	bne.n	67d0 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    67c0:	7b9a      	ldrb	r2, [r3, #14]
    67c2:	2a06      	cmp	r2, #6
    67c4:	d102      	bne.n	67cc <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    67c6:	2200      	movs	r2, #0
    67c8:	739a      	strb	r2, [r3, #14]
}
    67ca:	bd10      	pop	{r4, pc}
    67cc:	f7ff fca4 	bl	6118 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    67d0:	7b1b      	ldrb	r3, [r3, #12]
    67d2:	2b06      	cmp	r3, #6
    67d4:	d1f9      	bne.n	67ca <ticker_stop_scan_assert+0x12>
    67d6:	b662      	cpsie	i
    67d8:	2004      	movs	r0, #4
    67da:	df02      	svc	2
    67dc:	20000284 	.word	0x20000284

000067e0 <ticker_stop_adv_assert>:
{
    67e0:	b510      	push	{r4, lr}
    67e2:	4b08      	ldr	r3, [pc, #32]	; (6804 <ticker_stop_adv_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    67e4:	2801      	cmp	r0, #1
    67e6:	d107      	bne.n	67f8 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    67e8:	7b9a      	ldrb	r2, [r3, #14]
    67ea:	2a05      	cmp	r2, #5
    67ec:	d102      	bne.n	67f4 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    67ee:	2200      	movs	r2, #0
    67f0:	739a      	strb	r2, [r3, #14]
}
    67f2:	bd10      	pop	{r4, pc}
    67f4:	f7ff fc90 	bl	6118 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    67f8:	7b1b      	ldrb	r3, [r3, #12]
    67fa:	2b05      	cmp	r3, #5
    67fc:	d1f9      	bne.n	67f2 <ticker_stop_adv_assert+0x12>
    67fe:	b662      	cpsie	i
    6800:	2004      	movs	r0, #4
    6802:	df02      	svc	2
    6804:	20000284 	.word	0x20000284

00006808 <ticker_success_assert>:
{
    6808:	b510      	push	{r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    680a:	2800      	cmp	r0, #0
    680c:	d001      	beq.n	6812 <ticker_success_assert+0xa>
    680e:	f7ff fc83 	bl	6118 <chan_set.part.23>
}
    6812:	bd10      	pop	{r4, pc}

00006814 <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6814:	b570      	push	{r4, r5, r6, lr}
    6816:	0005      	movs	r5, r0
	node_rx = packet_rx_reserve_get(3);
    6818:	2003      	movs	r0, #3
    681a:	f7ff f945 	bl	5aa8 <packet_rx_reserve_get>
	if (node_rx == 0) {
    681e:	2800      	cmp	r0, #0
    6820:	d023      	beq.n	686a <isr_rx_scan_report.isra.37+0x56>
	node_rx->hdr.handle = 0xffff;
    6822:	2301      	movs	r3, #1
    6824:	425b      	negs	r3, r3
    6826:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    6828:	4b11      	ldr	r3, [pc, #68]	; (6870 <isr_rx_scan_report.isra.37+0x5c>)
    682a:	33dd      	adds	r3, #221	; 0xdd
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	075a      	lsls	r2, r3, #29
    6830:	d019      	beq.n	6866 <isr_rx_scan_report.isra.37+0x52>
		switch (_radio.scanner.phy) {
    6832:	075b      	lsls	r3, r3, #29
    6834:	0f5b      	lsrs	r3, r3, #29
    6836:	b2da      	uxtb	r2, r3
    6838:	2a01      	cmp	r2, #1
    683a:	d004      	beq.n	6846 <isr_rx_scan_report.isra.37+0x32>
    683c:	2a04      	cmp	r2, #4
    683e:	d003      	beq.n	6848 <isr_rx_scan_report.isra.37+0x34>
		LL_ASSERT(0);
    6840:	b662      	cpsie	i
    6842:	2004      	movs	r0, #4
    6844:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    6846:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    6848:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    684a:	7103      	strb	r3, [r0, #4]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    684c:	1904      	adds	r4, r0, r4
    684e:	340a      	adds	r4, #10
    6850:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    6852:	2d00      	cmp	r5, #0
    6854:	d002      	beq.n	685c <isr_rx_scan_report.isra.37+0x48>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    6856:	f003 ff27 	bl	a6a8 <radio_rssi_get>
			     pdu_adv_rx->len] =
    685a:	4006      	ands	r6, r0
    685c:	7026      	strb	r6, [r4, #0]
	packet_rx_enqueue();
    685e:	f7ff fca5 	bl	61ac <packet_rx_enqueue>
	return 0;
    6862:	2000      	movs	r0, #0
}
    6864:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6866:	2302      	movs	r3, #2
    6868:	e7ee      	b.n	6848 <isr_rx_scan_report.isra.37+0x34>
		return 1;
    686a:	2001      	movs	r0, #1
    686c:	e7fa      	b.n	6864 <isr_rx_scan_report.isra.37+0x50>
    686e:	46c0      	nop			; (mov r8, r8)
    6870:	20000284 	.word	0x20000284

00006874 <adv_scan_configure.constprop.47>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6874:	b513      	push	{r0, r1, r4, lr}
    6876:	0004      	movs	r4, r0
	u32_t aa = 0x8e89bed6;
    6878:	4b0d      	ldr	r3, [pc, #52]	; (68b0 <adv_scan_configure.constprop.47+0x3c>)
    687a:	9301      	str	r3, [sp, #4]
	radio_reset();
    687c:	f003 fdf8 	bl	a470 <radio_reset>
	radio_tx_power_set(0);
    6880:	2000      	movs	r0, #0
    6882:	f003 fe11 	bl	a4a8 <radio_tx_power_set>
	radio_isr_set(isr);
    6886:	480b      	ldr	r0, [pc, #44]	; (68b4 <adv_scan_configure.constprop.47+0x40>)
    6888:	f003 fdd8 	bl	a43c <radio_isr_set>
	radio_phy_set(phy, flags);
    688c:	2101      	movs	r1, #1
    688e:	0020      	movs	r0, r4
    6890:	f003 fdfe 	bl	a490 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    6894:	0064      	lsls	r4, r4, #1
	radio_aa_set((u8_t *)&aa);
    6896:	a801      	add	r0, sp, #4
    6898:	f003 fe2a 	bl	a4f0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    689c:	b2e2      	uxtb	r2, r4
    689e:	2125      	movs	r1, #37	; 0x25
    68a0:	2008      	movs	r0, #8
    68a2:	f003 fe43 	bl	a52c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    68a6:	4904      	ldr	r1, [pc, #16]	; (68b8 <adv_scan_configure.constprop.47+0x44>)
    68a8:	4804      	ldr	r0, [pc, #16]	; (68bc <adv_scan_configure.constprop.47+0x48>)
    68aa:	f003 feb5 	bl	a618 <radio_crc_configure>
}
    68ae:	bd13      	pop	{r0, r1, r4, pc}
    68b0:	8e89bed6 	.word	0x8e89bed6
    68b4:	00007835 	.word	0x00007835
    68b8:	00555555 	.word	0x00555555
    68bc:	0000065b 	.word	0x0000065b

000068c0 <event_stop.constprop.48>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    68c0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    68c2:	4b06      	ldr	r3, [pc, #24]	; (68dc <event_stop.constprop.48+0x1c>)
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    68c4:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    68c6:	0011      	movs	r1, r2
	s_mfy_radio_stop.param = context;
    68c8:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    68ca:	0010      	movs	r0, r2
    68cc:	f7fd fc42 	bl	4154 <mayfly_enqueue>
	LL_ASSERT(!retval);
    68d0:	2800      	cmp	r0, #0
    68d2:	d001      	beq.n	68d8 <event_stop.constprop.48+0x18>
    68d4:	f7ff fc20 	bl	6118 <chan_set.part.23>
}
    68d8:	bd10      	pop	{r4, pc}
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	20002360 	.word	0x20002360

000068e0 <event_common_prepare>:
{
    68e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68e2:	0016      	movs	r6, r2
    68e4:	b08f      	sub	sp, #60	; 0x3c
    68e6:	930b      	str	r3, [sp, #44]	; 0x2c
    68e8:	ab14      	add	r3, sp, #80	; 0x50
    68ea:	cb04      	ldmia	r3!, {r2}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    68ec:	6834      	ldr	r4, [r6, #0]
{
    68ee:	781b      	ldrb	r3, [r3, #0]
    68f0:	900a      	str	r0, [sp, #40]	; 0x28
    68f2:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    68f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
    68f6:	910d      	str	r1, [sp, #52]	; 0x34
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    68f8:	681f      	ldr	r7, [r3, #0]
	if (_ticks_xtal_to_start & XON_BITMASK) {
    68fa:	2c00      	cmp	r4, #0
    68fc:	da03      	bge.n	6906 <event_common_prepare+0x26>
		_ticks_xtal_to_start =
    68fe:	003c      	movs	r4, r7
    6900:	4297      	cmp	r7, r2
    6902:	d200      	bcs.n	6906 <event_common_prepare+0x26>
    6904:	0014      	movs	r4, r2
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    6906:	42bc      	cmp	r4, r7
    6908:	d800      	bhi.n	690c <event_common_prepare+0x2c>
    690a:	e06e      	b.n	69ea <event_common_prepare+0x10a>
		ticker_status =
    690c:	2000      	movs	r0, #0
    690e:	4b4d      	ldr	r3, [pc, #308]	; (6a44 <event_common_prepare+0x164>)
    6910:	9006      	str	r0, [sp, #24]
    6912:	9308      	str	r3, [sp, #32]
    6914:	4b4c      	ldr	r3, [pc, #304]	; (6a48 <event_common_prepare+0x168>)
    6916:	9004      	str	r0, [sp, #16]
    6918:	9307      	str	r3, [sp, #28]
    691a:	4b4c      	ldr	r3, [pc, #304]	; (6a4c <event_common_prepare+0x16c>)
    691c:	9003      	str	r0, [sp, #12]
    691e:	9305      	str	r3, [sp, #20]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    6920:	1be3      	subs	r3, r4, r7
		ticker_status =
    6922:	9300      	str	r3, [sp, #0]
    6924:	9002      	str	r0, [sp, #8]
    6926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6928:	9001      	str	r0, [sp, #4]
    692a:	2201      	movs	r2, #1
    692c:	0001      	movs	r1, r0
    692e:	f7fe f985 	bl	4c3c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6932:	2302      	movs	r3, #2
    6934:	4398      	bics	r0, r3
    6936:	d002      	beq.n	693e <event_common_prepare+0x5e>
		LL_ASSERT(!retval);
    6938:	b662      	cpsie	i
    693a:	2004      	movs	r0, #4
    693c:	df02      	svc	2
		event_xtal(0, 0, 0, NULL);
    693e:	0003      	movs	r3, r0
    6940:	0002      	movs	r2, r0
    6942:	0001      	movs	r1, r0
		event_xtal(0, 0, 0, NULL);
    6944:	f7ff ff02 	bl	674c <event_xtal>
	ticker_status =
    6948:	2000      	movs	r0, #0
	_radio.remainder_anchor = remainder;
    694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    694c:	4d40      	ldr	r5, [pc, #256]	; (6a50 <event_common_prepare+0x170>)
	ticker_status =
    694e:	0002      	movs	r2, r0
	_radio.remainder_anchor = remainder;
    6950:	60ab      	str	r3, [r5, #8]
	ticker_status =
    6952:	4b40      	ldr	r3, [pc, #256]	; (6a54 <event_common_prepare+0x174>)
    6954:	9004      	str	r0, [sp, #16]
    6956:	9308      	str	r3, [sp, #32]
    6958:	4b3b      	ldr	r3, [pc, #236]	; (6a48 <event_common_prepare+0x168>)
    695a:	9003      	str	r0, [sp, #12]
    695c:	9307      	str	r3, [sp, #28]
    695e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6960:	9002      	str	r0, [sp, #8]
    6962:	9306      	str	r3, [sp, #24]
    6964:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6966:	9001      	str	r0, [sp, #4]
    6968:	9305      	str	r3, [sp, #20]
    696a:	9400      	str	r4, [sp, #0]
    696c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    696e:	0001      	movs	r1, r0
    6970:	f7fe f964 	bl	4c3c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6974:	2302      	movs	r3, #2
    6976:	4398      	bics	r0, r3
    6978:	d1de      	bne.n	6938 <event_common_prepare+0x58>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    697a:	2005      	movs	r0, #5
    697c:	f7ff ffa0 	bl	68c0 <event_stop.constprop.48>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    6980:	002b      	movs	r3, r5
    6982:	33fc      	adds	r3, #252	; 0xfc
    6984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6986:	429f      	cmp	r7, r3
    6988:	d020      	beq.n	69cc <event_common_prepare+0xec>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    698a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    698c:	6013      	str	r3, [r2, #0]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    698e:	6833      	ldr	r3, [r6, #0]
    6990:	2b00      	cmp	r3, #0
    6992:	da02      	bge.n	699a <event_common_prepare+0xba>
			*ticks_xtal_to_start &= ~XON_BITMASK;
    6994:	005b      	lsls	r3, r3, #1
    6996:	085b      	lsrs	r3, r3, #1
    6998:	6033      	str	r3, [r6, #0]
				     _radio.ticks_active_to_start;
    699a:	35fc      	adds	r5, #252	; 0xfc
		ticks_to_start_new = (_radio.ticks_active_to_start <
    699c:	6831      	ldr	r1, [r6, #0]
    699e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    69a0:	b2a3      	uxth	r3, r4
		ticks_to_start_new = (_radio.ticks_active_to_start <
    69a2:	428a      	cmp	r2, r1
    69a4:	d200      	bcs.n	69a8 <event_common_prepare+0xc8>
    69a6:	000a      	movs	r2, r1
		ticker_status =
    69a8:	2000      	movs	r0, #0
    69aa:	492b      	ldr	r1, [pc, #172]	; (6a58 <event_common_prepare+0x178>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    69ac:	b292      	uxth	r2, r2
		ticker_status =
    69ae:	9106      	str	r1, [sp, #24]
    69b0:	4925      	ldr	r1, [pc, #148]	; (6a48 <event_common_prepare+0x168>)
    69b2:	9302      	str	r3, [sp, #8]
    69b4:	9105      	str	r1, [sp, #20]
    69b6:	9201      	str	r2, [sp, #4]
    69b8:	9200      	str	r2, [sp, #0]
    69ba:	9004      	str	r0, [sp, #16]
    69bc:	9003      	str	r0, [sp, #12]
    69be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    69c0:	0001      	movs	r1, r0
    69c2:	f7fe f97d 	bl	4cc0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    69c6:	2302      	movs	r3, #2
    69c8:	4398      	bics	r0, r3
    69ca:	d1b5      	bne.n	6938 <event_common_prepare+0x58>
	packet_tx_enqueue(0xFF);
    69cc:	20ff      	movs	r0, #255	; 0xff
    69ce:	f7ff fdad 	bl	652c <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    69d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    69d4:	4b21      	ldr	r3, [pc, #132]	; (6a5c <event_common_prepare+0x17c>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    69d6:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    69d8:	609a      	str	r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    69da:	2201      	movs	r2, #1
    69dc:	0011      	movs	r1, r2
    69de:	f7fd fbb9 	bl	4154 <mayfly_enqueue>
		LL_ASSERT(!retval);
    69e2:	2800      	cmp	r0, #0
    69e4:	d1a8      	bne.n	6938 <event_common_prepare+0x58>
}
    69e6:	b00f      	add	sp, #60	; 0x3c
    69e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    69ea:	42bc      	cmp	r4, r7
    69ec:	d21e      	bcs.n	6a2c <event_common_prepare+0x14c>
		event_active(0, 0, 0, NULL);
    69ee:	2300      	movs	r3, #0
    69f0:	001a      	movs	r2, r3
    69f2:	0019      	movs	r1, r3
    69f4:	0018      	movs	r0, r3
    69f6:	f7ff feb7 	bl	6768 <event_active>
		ticker_status =
    69fa:	2000      	movs	r0, #0
    69fc:	4b18      	ldr	r3, [pc, #96]	; (6a60 <event_common_prepare+0x180>)
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    69fe:	1b3c      	subs	r4, r7, r4
		ticker_status =
    6a00:	9308      	str	r3, [sp, #32]
    6a02:	4b11      	ldr	r3, [pc, #68]	; (6a48 <event_common_prepare+0x168>)
    6a04:	9006      	str	r0, [sp, #24]
    6a06:	9307      	str	r3, [sp, #28]
    6a08:	4b16      	ldr	r3, [pc, #88]	; (6a64 <event_common_prepare+0x184>)
    6a0a:	9004      	str	r0, [sp, #16]
    6a0c:	9305      	str	r3, [sp, #20]
    6a0e:	9003      	str	r0, [sp, #12]
    6a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a12:	9002      	str	r0, [sp, #8]
    6a14:	9001      	str	r0, [sp, #4]
    6a16:	9400      	str	r4, [sp, #0]
    6a18:	2201      	movs	r2, #1
    6a1a:	0001      	movs	r1, r0
    6a1c:	f7fe f90e 	bl	4c3c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6a20:	2302      	movs	r3, #2
    6a22:	4398      	bics	r0, r3
    6a24:	d000      	beq.n	6a28 <event_common_prepare+0x148>
    6a26:	e787      	b.n	6938 <event_common_prepare+0x58>
    6a28:	003c      	movs	r4, r7
    6a2a:	e78d      	b.n	6948 <event_common_prepare+0x68>
		event_active(0, 0, 0, NULL);
    6a2c:	2300      	movs	r3, #0
    6a2e:	001a      	movs	r2, r3
    6a30:	0019      	movs	r1, r3
    6a32:	0018      	movs	r0, r3
    6a34:	f7ff fe98 	bl	6768 <event_active>
		event_xtal(0, 0, 0, NULL);
    6a38:	2300      	movs	r3, #0
    6a3a:	001a      	movs	r2, r3
    6a3c:	0019      	movs	r1, r3
    6a3e:	0018      	movs	r0, r3
    6a40:	e780      	b.n	6944 <event_common_prepare+0x64>
    6a42:	46c0      	nop			; (mov r8, r8)
    6a44:	00001585 	.word	0x00001585
    6a48:	00006809 	.word	0x00006809
    6a4c:	00006769 	.word	0x00006769
    6a50:	20000284 	.word	0x20000284
    6a54:	000015b2 	.word	0x000015b2
    6a58:	000015e2 	.word	0x000015e2
    6a5c:	20002400 	.word	0x20002400
    6a60:	0000159a 	.word	0x0000159a
    6a64:	0000674d 	.word	0x0000674d

00006a68 <radio_event_adv_prepare>:
{
    6a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6a6a:	4c0b      	ldr	r4, [pc, #44]	; (6a98 <radio_event_adv_prepare+0x30>)
    6a6c:	7b25      	ldrb	r5, [r4, #12]
    6a6e:	b2ed      	uxtb	r5, r5
    6a70:	2d00      	cmp	r5, #0
    6a72:	d001      	beq.n	6a78 <radio_event_adv_prepare+0x10>
    6a74:	f7ff fb50 	bl	6118 <chan_set.part.23>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    6a78:	2605      	movs	r6, #5
	event_common_prepare(ticks_at_expire, remainder,
    6a7a:	0023      	movs	r3, r4
    6a7c:	0022      	movs	r2, r4
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    6a7e:	7326      	strb	r6, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
    6a80:	9503      	str	r5, [sp, #12]
    6a82:	4d06      	ldr	r5, [pc, #24]	; (6a9c <radio_event_adv_prepare+0x34>)
    6a84:	9601      	str	r6, [sp, #4]
    6a86:	9502      	str	r5, [sp, #8]
    6a88:	69e4      	ldr	r4, [r4, #28]
    6a8a:	3318      	adds	r3, #24
    6a8c:	3214      	adds	r2, #20
    6a8e:	9400      	str	r4, [sp, #0]
    6a90:	f7ff ff26 	bl	68e0 <event_common_prepare>
}
    6a94:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	20000284 	.word	0x20000284
    6a9c:	00006d19 	.word	0x00006d19

00006aa0 <event_adv_stop>:
{
    6aa0:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    6aa2:	2005      	movs	r0, #5
    6aa4:	f7ff ff0c 	bl	68c0 <event_stop.constprop.48>
	ticker_status =
    6aa8:	2100      	movs	r1, #0
    6aaa:	4b06      	ldr	r3, [pc, #24]	; (6ac4 <event_adv_stop+0x24>)
    6aac:	2205      	movs	r2, #5
    6aae:	9300      	str	r3, [sp, #0]
    6ab0:	0008      	movs	r0, r1
    6ab2:	4b05      	ldr	r3, [pc, #20]	; (6ac8 <event_adv_stop+0x28>)
    6ab4:	f7fe f954 	bl	4d60 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ab8:	2302      	movs	r3, #2
    6aba:	4398      	bics	r0, r3
    6abc:	d001      	beq.n	6ac2 <event_adv_stop+0x22>
    6abe:	f7ff fb2b 	bl	6118 <chan_set.part.23>
}
    6ac2:	bd07      	pop	{r0, r1, r2, pc}
    6ac4:	000018a6 	.word	0x000018a6
    6ac8:	0000623d 	.word	0x0000623d

00006acc <packet_rx_allocate.constprop.49>:
static void packet_rx_allocate(u8_t max)
    6acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (max > _radio.link_rx_data_quota) {
    6ace:	23a4      	movs	r3, #164	; 0xa4
    6ad0:	4d1f      	ldr	r5, [pc, #124]	; (6b50 <packet_rx_allocate.constprop.49+0x84>)
    6ad2:	005b      	lsls	r3, r3, #1
    6ad4:	5cee      	ldrb	r6, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    6ad6:	3b12      	subs	r3, #18
    6ad8:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    6ada:	3b02      	subs	r3, #2
	acquire = _radio.packet_rx_acquire + 1;
    6adc:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    6ade:	5ceb      	ldrb	r3, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    6ae0:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
    6ae2:	42a3      	cmp	r3, r4
    6ae4:	d100      	bne.n	6ae8 <packet_rx_allocate.constprop.49+0x1c>
		acquire = 0;
    6ae6:	2400      	movs	r4, #0
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    6ae8:	2e00      	cmp	r6, #0
    6aea:	d014      	beq.n	6b16 <packet_rx_allocate.constprop.49+0x4a>
    6aec:	2336      	movs	r3, #54	; 0x36
    6aee:	33ff      	adds	r3, #255	; 0xff
    6af0:	5ceb      	ldrb	r3, [r5, r3]
    6af2:	429c      	cmp	r4, r3
    6af4:	d00f      	beq.n	6b16 <packet_rx_allocate.constprop.49+0x4a>
		link = mem_acquire(&_radio.link_rx_free);
    6af6:	4817      	ldr	r0, [pc, #92]	; (6b54 <packet_rx_allocate.constprop.49+0x88>)
    6af8:	f7fd fa76 	bl	3fe8 <mem_acquire>
    6afc:	1e07      	subs	r7, r0, #0
		if (!link) {
    6afe:	d00a      	beq.n	6b16 <packet_rx_allocate.constprop.49+0x4a>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    6b00:	0028      	movs	r0, r5
    6b02:	3025      	adds	r0, #37	; 0x25
    6b04:	30ff      	adds	r0, #255	; 0xff
    6b06:	f7fd fa6f 	bl	3fe8 <mem_acquire>
		if (!node_rx) {
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d104      	bne.n	6b18 <packet_rx_allocate.constprop.49+0x4c>
			mem_release(link, &_radio.link_rx_free);
    6b0e:	4911      	ldr	r1, [pc, #68]	; (6b54 <packet_rx_allocate.constprop.49+0x88>)
    6b10:	0038      	movs	r0, r7
    6b12:	f7fd fa82 	bl	401a <mem_release>
}
    6b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    6b18:	239b      	movs	r3, #155	; 0x9b
    6b1a:	002a      	movs	r2, r5
		node_rx->hdr.onion.link = link;
    6b1c:	6007      	str	r7, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    6b1e:	005b      	lsls	r3, r3, #1
    6b20:	5ceb      	ldrb	r3, [r5, r3]
    6b22:	32fc      	adds	r2, #252	; 0xfc
    6b24:	6b52      	ldr	r2, [r2, #52]	; 0x34
    6b26:	009b      	lsls	r3, r3, #2
    6b28:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    6b2a:	239b      	movs	r3, #155	; 0x9b
    6b2c:	005b      	lsls	r3, r3, #1
    6b2e:	54ec      	strb	r4, [r5, r3]
		if (acquire == _radio.packet_rx_count) {
    6b30:	3b02      	subs	r3, #2
		acquire = _radio.packet_rx_acquire + 1;
    6b32:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    6b34:	5ceb      	ldrb	r3, [r5, r3]
		acquire = _radio.packet_rx_acquire + 1;
    6b36:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    6b38:	42a3      	cmp	r3, r4
    6b3a:	d100      	bne.n	6b3e <packet_rx_allocate.constprop.49+0x72>
			acquire = 0;
    6b3c:	2400      	movs	r4, #0
		_radio.link_rx_data_quota--;
    6b3e:	22a4      	movs	r2, #164	; 0xa4
    6b40:	0052      	lsls	r2, r2, #1
    6b42:	5cab      	ldrb	r3, [r5, r2]
    6b44:	3e01      	subs	r6, #1
    6b46:	3b01      	subs	r3, #1
    6b48:	54ab      	strb	r3, [r5, r2]
    6b4a:	b2f6      	uxtb	r6, r6
    6b4c:	e7cc      	b.n	6ae8 <packet_rx_allocate.constprop.49+0x1c>
    6b4e:	46c0      	nop			; (mov r8, r8)
    6b50:	20000284 	.word	0x20000284
    6b54:	200003c0 	.word	0x200003c0

00006b58 <common_init>:
{
    6b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.connection_count) {
    6b5a:	4c33      	ldr	r4, [pc, #204]	; (6c28 <common_init+0xd0>)
    6b5c:	0023      	movs	r3, r4
    6b5e:	0020      	movs	r0, r4
    6b60:	33ff      	adds	r3, #255	; 0xff
    6b62:	7b5a      	ldrb	r2, [r3, #13]
    6b64:	30fc      	adds	r0, #252	; 0xfc
    6b66:	2a00      	cmp	r2, #0
    6b68:	d043      	beq.n	6bf2 <common_init+0x9a>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    6b6a:	0023      	movs	r3, r4
    6b6c:	2182      	movs	r1, #130	; 0x82
    6b6e:	3309      	adds	r3, #9
    6b70:	33ff      	adds	r3, #255	; 0xff
    6b72:	b292      	uxth	r2, r2
    6b74:	0049      	lsls	r1, r1, #1
    6b76:	6880      	ldr	r0, [r0, #8]
    6b78:	f7fd fa10 	bl	3f9c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    6b7c:	0023      	movs	r3, r4
    6b7e:	2297      	movs	r2, #151	; 0x97
    6b80:	0021      	movs	r1, r4
    6b82:	0026      	movs	r6, r4
    6b84:	3325      	adds	r3, #37	; 0x25
    6b86:	36fc      	adds	r6, #252	; 0xfc
    6b88:	0052      	lsls	r2, r2, #1
    6b8a:	31fe      	adds	r1, #254	; 0xfe
    6b8c:	33ff      	adds	r3, #255	; 0xff
    6b8e:	5ca2      	ldrb	r2, [r4, r2]
    6b90:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
    6b92:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6b94:	f7fd fa02 	bl	3f9c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    6b98:	0025      	movs	r5, r4
    6b9a:	239a      	movs	r3, #154	; 0x9a
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    6b9c:	0027      	movs	r7, r4
		 (_radio.packet_rx_count + _radio.connection_count),
    6b9e:	005b      	lsls	r3, r3, #1
    6ba0:	35ff      	adds	r5, #255	; 0xff
    6ba2:	5ce2      	ldrb	r2, [r4, r3]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    6ba4:	373d      	adds	r7, #61	; 0x3d
		 (_radio.packet_rx_count + _radio.connection_count),
    6ba6:	7b6b      	ldrb	r3, [r5, #13]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    6ba8:	37ff      	adds	r7, #255	; 0xff
    6baa:	18d2      	adds	r2, r2, r3
    6bac:	2108      	movs	r1, #8
    6bae:	003b      	movs	r3, r7
    6bb0:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    6bb2:	f7fd f9f3 	bl	3f9c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    6bb6:	0023      	movs	r3, r4
    6bb8:	3351      	adds	r3, #81	; 0x51
    6bba:	33ff      	adds	r3, #255	; 0xff
    6bbc:	2202      	movs	r2, #2
    6bbe:	2124      	movs	r1, #36	; 0x24
    6bc0:	6d30      	ldr	r0, [r6, #80]	; 0x50
    6bc2:	f7fd f9eb 	bl	3f9c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    6bc6:	22b4      	movs	r2, #180	; 0xb4
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    6bc8:	0023      	movs	r3, r4
    6bca:	21ae      	movs	r1, #174	; 0xae
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    6bcc:	0052      	lsls	r2, r2, #1
    6bce:	5ca2      	ldrb	r2, [r4, r2]
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    6bd0:	3359      	adds	r3, #89	; 0x59
    6bd2:	3a01      	subs	r2, #1
    6bd4:	0049      	lsls	r1, r1, #1
    6bd6:	6db0      	ldr	r0, [r6, #88]	; 0x58
    6bd8:	33ff      	adds	r3, #255	; 0xff
    6bda:	b292      	uxth	r2, r2
    6bdc:	5a61      	ldrh	r1, [r4, r1]
    6bde:	f7fd f9dd 	bl	3f9c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    6be2:	0038      	movs	r0, r7
    6be4:	f7fd fa00 	bl	3fe8 <mem_acquire>
	LL_ASSERT(link);
    6be8:	2800      	cmp	r0, #0
    6bea:	d104      	bne.n	6bf6 <common_init+0x9e>
    6bec:	b662      	cpsie	i
    6bee:	2004      	movs	r0, #4
    6bf0:	df02      	svc	2
		_radio.conn_free = NULL;
    6bf2:	60c2      	str	r2, [r0, #12]
    6bf4:	e7c2      	b.n	6b7c <common_init+0x24>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    6bf6:	0022      	movs	r2, r4
    6bf8:	0021      	movs	r1, r4
    6bfa:	3245      	adds	r2, #69	; 0x45
    6bfc:	3141      	adds	r1, #65	; 0x41
    6bfe:	31ff      	adds	r1, #255	; 0xff
    6c00:	32ff      	adds	r2, #255	; 0xff
    6c02:	f7fd fa3b 	bl	407c <memq_init>
	_radio.advertiser.chan_map = 0x07;
    6c06:	2338      	movs	r3, #56	; 0x38
    6c08:	3406      	adds	r4, #6
    6c0a:	7fe2      	ldrb	r2, [r4, #31]
    6c0c:	4313      	orrs	r3, r2
    6c0e:	77e3      	strb	r3, [r4, #31]
	_radio.data_chan_map[0] = 0xFF;
    6c10:	23ff      	movs	r3, #255	; 0xff
    6c12:	75eb      	strb	r3, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    6c14:	762b      	strb	r3, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    6c16:	766b      	strb	r3, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    6c18:	76ab      	strb	r3, [r5, #26]
	_radio.data_chan_map[4] = 0x1F;
    6c1a:	3be0      	subs	r3, #224	; 0xe0
    6c1c:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    6c1e:	3306      	adds	r3, #6
    6c20:	772b      	strb	r3, [r5, #28]
	packet_rx_allocate(0xFF);
    6c22:	f7ff ff53 	bl	6acc <packet_rx_allocate.constprop.49>
}
    6c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c28:	20000284 	.word	0x20000284

00006c2c <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    6c2c:	4b03      	ldr	r3, [pc, #12]	; (6c3c <mayfly_xtal_start+0x10>)
{
    6c2e:	b510      	push	{r4, lr}
	clock_control_on(_radio.hf_clock, NULL);
    6c30:	6818      	ldr	r0, [r3, #0]
    6c32:	2100      	movs	r1, #0
    6c34:	6843      	ldr	r3, [r0, #4]
    6c36:	681b      	ldr	r3, [r3, #0]
    6c38:	4798      	blx	r3
}
    6c3a:	bd10      	pop	{r4, pc}
    6c3c:	20000284 	.word	0x20000284

00006c40 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    6c40:	4b03      	ldr	r3, [pc, #12]	; (6c50 <mayfly_xtal_stop+0x10>)
{
    6c42:	b510      	push	{r4, lr}
	clock_control_off(_radio.hf_clock, NULL);
    6c44:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
    6c46:	2100      	movs	r1, #0
    6c48:	6843      	ldr	r3, [r0, #4]
    6c4a:	685b      	ldr	r3, [r3, #4]
    6c4c:	4798      	blx	r3
}
    6c4e:	bd10      	pop	{r4, pc}
    6c50:	20000284 	.word	0x20000284

00006c54 <chan_sel_2>:
{
    6c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    6c56:	2703      	movs	r7, #3
		o |= (i & 1);
    6c58:	2401      	movs	r4, #1
{
    6c5a:	9200      	str	r2, [sp, #0]
    6c5c:	9301      	str	r3, [sp, #4]
	prn_e = counter ^ chan_id;
    6c5e:	4048      	eors	r0, r1
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6c60:	2608      	movs	r6, #8
	o = 0;
    6c62:	2200      	movs	r2, #0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6c64:	0a03      	lsrs	r3, r0, #8
		o |= (i & 1);
    6c66:	001d      	movs	r5, r3
		o <<= 1;
    6c68:	0052      	lsls	r2, r2, #1
		o |= (i & 1);
    6c6a:	4025      	ands	r5, r4
    6c6c:	3e01      	subs	r6, #1
    6c6e:	432a      	orrs	r2, r5
    6c70:	b2f6      	uxtb	r6, r6
    6c72:	b2d2      	uxtb	r2, r2
		i >>= 1;
    6c74:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    6c76:	2e00      	cmp	r6, #0
    6c78:	d1f5      	bne.n	6c66 <chan_sel_2+0x12>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6c7a:	b2c3      	uxtb	r3, r0
    6c7c:	2008      	movs	r0, #8
    6c7e:	0212      	lsls	r2, r2, #8
    6c80:	b212      	sxth	r2, r2
		o |= (i & 1);
    6c82:	001d      	movs	r5, r3
		o <<= 1;
    6c84:	0076      	lsls	r6, r6, #1
		o |= (i & 1);
    6c86:	4025      	ands	r5, r4
    6c88:	3801      	subs	r0, #1
    6c8a:	432e      	orrs	r6, r5
    6c8c:	b2c0      	uxtb	r0, r0
    6c8e:	b2f6      	uxtb	r6, r6
		i >>= 1;
    6c90:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    6c92:	2800      	cmp	r0, #0
    6c94:	d1f5      	bne.n	6c82 <chan_sel_2+0x2e>
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6c96:	2311      	movs	r3, #17
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6c98:	4316      	orrs	r6, r2
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6c9a:	435e      	muls	r6, r3
    6c9c:	3f01      	subs	r7, #1
    6c9e:	198e      	adds	r6, r1, r6
    6ca0:	b2ff      	uxtb	r7, r7
    6ca2:	b2b0      	uxth	r0, r6
	for (iterate = 0; iterate < 3; iterate++) {
    6ca4:	2f00      	cmp	r7, #0
    6ca6:	d1db      	bne.n	6c60 <chan_sel_2+0xc>
	prn_e ^= chan_id;
    6ca8:	4041      	eors	r1, r0
    6caa:	000e      	movs	r6, r1
	chan_next = prn_e % 37;
    6cac:	2125      	movs	r1, #37	; 0x25
    6cae:	0030      	movs	r0, r6
    6cb0:	f7f9 face 	bl	250 <__aeabi_uidivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cb4:	9a00      	ldr	r2, [sp, #0]
	chan_next = prn_e % 37;
    6cb6:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cb8:	08c3      	lsrs	r3, r0, #3
    6cba:	5cd3      	ldrb	r3, [r2, r3]
    6cbc:	2207      	movs	r2, #7
    6cbe:	4002      	ands	r2, r0
    6cc0:	4113      	asrs	r3, r2
    6cc2:	4223      	tst	r3, r4
    6cc4:	d105      	bne.n	6cd2 <chan_sel_2+0x7e>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    6cc6:	9901      	ldr	r1, [sp, #4]
		chan_next = chan_sel_remap(chan_map, chan_index);
    6cc8:	9800      	ldr	r0, [sp, #0]
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    6cca:	4371      	muls	r1, r6
		chan_next = chan_sel_remap(chan_map, chan_index);
    6ccc:	0c09      	lsrs	r1, r1, #16
    6cce:	f7fe fed0 	bl	5a72 <chan_sel_remap>
}
    6cd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006cd4 <preempt_calc>:
{
    6cd4:	b570      	push	{r4, r5, r6, lr}
    6cd6:	0014      	movs	r4, r2
    6cd8:	000e      	movs	r6, r1
    6cda:	0005      	movs	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6cdc:	f7fe f8e4 	bl	4ea8 <ticker_ticks_now_get>
	u32_t diff =
    6ce0:	0021      	movs	r1, r4
    6ce2:	f7fe f8e5 	bl	4eb0 <ticker_ticks_diff_get>
	diff += 3;
    6ce6:	1cc4      	adds	r4, r0, #3
	return 0;
    6ce8:	2000      	movs	r0, #0
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6cea:	2c09      	cmp	r4, #9
    6cec:	d910      	bls.n	6d10 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    6cee:	4b09      	ldr	r3, [pc, #36]	; (6d14 <preempt_calc+0x40>)
    6cf0:	781b      	ldrb	r3, [r3, #0]
    6cf2:	4283      	cmp	r3, r0
    6cf4:	d001      	beq.n	6cfa <preempt_calc+0x26>
    6cf6:	f7ff f989 	bl	600c <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6cfa:	0028      	movs	r0, r5
    6cfc:	0032      	movs	r2, r6
    6cfe:	2100      	movs	r1, #0
    6d00:	f7ff fa0e 	bl	6120 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6d04:	68ab      	ldr	r3, [r5, #8]
		return 1;
    6d06:	2001      	movs	r0, #1
		diff += hdr->ticks_preempt_to_start;
    6d08:	18e4      	adds	r4, r4, r3
		if (diff <
    6d0a:	2c26      	cmp	r4, #38	; 0x26
    6d0c:	d800      	bhi.n	6d10 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
    6d0e:	60ac      	str	r4, [r5, #8]
}
    6d10:	bd70      	pop	{r4, r5, r6, pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	20000488 	.word	0x20000488

00006d18 <event_adv>:
{
    6d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d1a:	4c27      	ldr	r4, [pc, #156]	; (6db8 <event_adv+0xa0>)
{
    6d1c:	0005      	movs	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d1e:	7be2      	ldrb	r2, [r4, #15]
    6d20:	b2d2      	uxtb	r2, r2
    6d22:	2a00      	cmp	r2, #0
    6d24:	d002      	beq.n	6d2c <event_adv+0x14>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6d26:	b662      	cpsie	i
    6d28:	2004      	movs	r0, #4
    6d2a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6d2c:	7b23      	ldrb	r3, [r4, #12]
    6d2e:	b2db      	uxtb	r3, r3
    6d30:	2b05      	cmp	r3, #5
    6d32:	d1f8      	bne.n	6d26 <event_adv+0xe>
	_radio.role = ROLE_ADV;
    6d34:	2701      	movs	r7, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6d36:	1da6      	adds	r6, r4, #6
	_radio.ticks_anchor = ticks_at_expire;
    6d38:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6d3a:	7ff0      	ldrb	r0, [r6, #31]
	_radio.role = ROLE_ADV;
    6d3c:	73e7      	strb	r7, [r4, #15]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6d3e:	0740      	lsls	r0, r0, #29
    6d40:	0f40      	lsrs	r0, r0, #29
	_radio.ticker_id_prepare = 0;
    6d42:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6d44:	7363      	strb	r3, [r4, #13]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6d46:	f7ff fd95 	bl	6874 <adv_scan_configure.constprop.47>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6d4a:	2007      	movs	r0, #7
    6d4c:	7ff3      	ldrb	r3, [r6, #31]
    6d4e:	1d61      	adds	r1, r4, #5
    6d50:	08db      	lsrs	r3, r3, #3
    6d52:	4003      	ands	r3, r0
    6d54:	001a      	movs	r2, r3
    6d56:	7fcb      	ldrb	r3, [r1, #31]
    6d58:	4383      	bics	r3, r0
    6d5a:	4313      	orrs	r3, r2
    6d5c:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    6d5e:	f7ff fb63 	bl	6428 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    6d62:	223f      	movs	r2, #63	; 0x3f
    6d64:	7ff3      	ldrb	r3, [r6, #31]
    6d66:	4393      	bics	r3, r2
    6d68:	d007      	beq.n	6d7a <event_adv+0x62>
		struct ll_filter *wl = ctrl_filter_get(true);
    6d6a:	0038      	movs	r0, r7
    6d6c:	f003 f900 	bl	9f70 <ctrl_filter_get>
				       (u8_t *)wl->bdaddr);
    6d70:	1c82      	adds	r2, r0, #2
		radio_filter_configure(wl->enable_bitmask,
    6d72:	7841      	ldrb	r1, [r0, #1]
    6d74:	7800      	ldrb	r0, [r0, #0]
    6d76:	f003 fcad 	bl	a6d4 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6d7a:	0029      	movs	r1, r5
    6d7c:	68a2      	ldr	r2, [r4, #8]
    6d7e:	3109      	adds	r1, #9
    6d80:	2001      	movs	r0, #1
    6d82:	f003 fd07 	bl	a794 <radio_tmr_start>
	radio_tmr_end_capture();
    6d86:	f003 fdbf 	bl	a908 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6d8a:	0020      	movs	r0, r4
    6d8c:	002a      	movs	r2, r5
    6d8e:	3014      	adds	r0, #20
    6d90:	2105      	movs	r1, #5
    6d92:	f7ff ff9f 	bl	6cd4 <preempt_calc>
    6d96:	2800      	cmp	r0, #0
    6d98:	d004      	beq.n	6da4 <event_adv+0x8c>
		_radio.state = STATE_STOP;
    6d9a:	2304      	movs	r3, #4
    6d9c:	7423      	strb	r3, [r4, #16]
		radio_disable();
    6d9e:	f003 fc0f 	bl	a5c0 <radio_disable>
}
    6da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ticker_status =
    6da4:	0003      	movs	r3, r0
    6da6:	4a05      	ldr	r2, [pc, #20]	; (6dbc <event_adv+0xa4>)
    6da8:	0001      	movs	r1, r0
    6daa:	f7fe f83d 	bl	4e28 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6dae:	2302      	movs	r3, #2
    6db0:	4398      	bics	r0, r3
    6db2:	d1b8      	bne.n	6d26 <event_adv+0xe>
    6db4:	e7f5      	b.n	6da2 <event_adv+0x8a>
    6db6:	46c0      	nop			; (mov r8, r8)
    6db8:	20000284 	.word	0x20000284
    6dbc:	00005fb5 	.word	0x00005fb5

00006dc0 <ctrl_tx_enqueue>:
	    !conn->empty &&
    6dc0:	0003      	movs	r3, r0
{
    6dc2:	b570      	push	{r4, r5, r6, lr}
    6dc4:	0004      	movs	r4, r0
	    !conn->empty &&
    6dc6:	33a8      	adds	r3, #168	; 0xa8
    6dc8:	781d      	ldrb	r5, [r3, #0]
    6dca:	34f0      	adds	r4, #240	; 0xf0
	if (
    6dcc:	b26a      	sxtb	r2, r5
    6dce:	334c      	adds	r3, #76	; 0x4c
    6dd0:	2a00      	cmp	r2, #0
    6dd2:	db1b      	blt.n	6e0c <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    6dd4:	0002      	movs	r2, r0
    6dd6:	32ec      	adds	r2, #236	; 0xec
    6dd8:	6812      	ldr	r2, [r2, #0]
	    !conn->empty &&
    6dda:	2a00      	cmp	r2, #0
    6ddc:	d016      	beq.n	6e0c <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    6dde:	072d      	lsls	r5, r5, #28
    6de0:	d414      	bmi.n	6e0c <ctrl_tx_enqueue+0x4c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6de2:	0005      	movs	r5, r0
    6de4:	35f8      	adds	r5, #248	; 0xf8
    6de6:	682e      	ldr	r6, [r5, #0]
    6de8:	42b2      	cmp	r2, r6
    6dea:	d101      	bne.n	6df0 <ctrl_tx_enqueue+0x30>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6dec:	6816      	ldr	r6, [r2, #0]
    6dee:	602e      	str	r6, [r5, #0]
		if (!conn->pkt_tx_ctrl) {
    6df0:	6825      	ldr	r5, [r4, #0]
    6df2:	2d00      	cmp	r5, #0
    6df4:	d110      	bne.n	6e18 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    6df6:	6815      	ldr	r5, [r2, #0]
    6df8:	600d      	str	r5, [r1, #0]
			conn->pkt_tx_head = node_tx;
    6dfa:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl = node_tx;
    6dfc:	6021      	str	r1, [r4, #0]
	conn->pkt_tx_ctrl_last = node_tx;
    6dfe:	6019      	str	r1, [r3, #0]
	if (node_tx->next == 0) {
    6e00:	680b      	ldr	r3, [r1, #0]
    6e02:	2b00      	cmp	r3, #0
    6e04:	d101      	bne.n	6e0a <ctrl_tx_enqueue+0x4a>
		conn->pkt_tx_last = node_tx;
    6e06:	30fc      	adds	r0, #252	; 0xfc
    6e08:	6001      	str	r1, [r0, #0]
}
    6e0a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->pkt_tx_ctrl) {
    6e0c:	6822      	ldr	r2, [r4, #0]
    6e0e:	2a00      	cmp	r2, #0
    6e10:	d102      	bne.n	6e18 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    6e12:	0002      	movs	r2, r0
    6e14:	32ec      	adds	r2, #236	; 0xec
    6e16:	e7ee      	b.n	6df6 <ctrl_tx_enqueue+0x36>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    6e18:	681a      	ldr	r2, [r3, #0]
    6e1a:	6814      	ldr	r4, [r2, #0]
    6e1c:	600c      	str	r4, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    6e1e:	6011      	str	r1, [r2, #0]
    6e20:	e7ed      	b.n	6dfe <ctrl_tx_enqueue+0x3e>

00006e22 <ctrl_tx_sec_enqueue>:
	if (conn->pause_tx) {
    6e22:	0003      	movs	r3, r0
    6e24:	33a8      	adds	r3, #168	; 0xa8
    6e26:	781b      	ldrb	r3, [r3, #0]
{
    6e28:	b510      	push	{r4, lr}
	if (conn->pause_tx) {
    6e2a:	071b      	lsls	r3, r3, #28
    6e2c:	d50f      	bpl.n	6e4e <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    6e2e:	0003      	movs	r3, r0
    6e30:	33f0      	adds	r3, #240	; 0xf0
    6e32:	681b      	ldr	r3, [r3, #0]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d104      	bne.n	6e42 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    6e38:	30ec      	adds	r0, #236	; 0xec
    6e3a:	6803      	ldr	r3, [r0, #0]
    6e3c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    6e3e:	6001      	str	r1, [r0, #0]
}
    6e40:	bd10      	pop	{r4, pc}
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    6e42:	30f4      	adds	r0, #244	; 0xf4
    6e44:	6803      	ldr	r3, [r0, #0]
    6e46:	681a      	ldr	r2, [r3, #0]
    6e48:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    6e4a:	6019      	str	r1, [r3, #0]
    6e4c:	e7f8      	b.n	6e40 <ctrl_tx_sec_enqueue+0x1e>
		ctrl_tx_enqueue(conn, node_tx);
    6e4e:	f7ff ffb7 	bl	6dc0 <ctrl_tx_enqueue>
}
    6e52:	e7f5      	b.n	6e40 <ctrl_tx_sec_enqueue+0x1e>

00006e54 <feature_rsp_send>:
{
    6e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6e56:	4f1f      	ldr	r7, [pc, #124]	; (6ed4 <feature_rsp_send+0x80>)
{
    6e58:	0005      	movs	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6e5a:	0038      	movs	r0, r7
    6e5c:	3051      	adds	r0, #81	; 0x51
    6e5e:	30ff      	adds	r0, #255	; 0xff
{
    6e60:	000e      	movs	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6e62:	f7fd f8c1 	bl	3fe8 <mem_acquire>
    6e66:	0004      	movs	r4, r0
		return 1;
    6e68:	2001      	movs	r0, #1
	if (!node_tx) {
    6e6a:	2c00      	cmp	r4, #0
    6e6c:	d030      	beq.n	6ed0 <feature_rsp_send+0x7c>
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6e6e:	37fc      	adds	r7, #252	; 0xfc
    6e70:	6979      	ldr	r1, [r7, #20]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6e72:	7932      	ldrb	r2, [r6, #4]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6e74:	0008      	movs	r0, r1
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6e76:	4b18      	ldr	r3, [pc, #96]	; (6ed8 <feature_rsp_send+0x84>)
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6e78:	308c      	adds	r0, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6e7a:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    6e7c:	7972      	ldrb	r2, [r6, #5]
	_radio.conn_curr->common.fex_valid = 1;
    6e7e:	3138      	adds	r1, #56	; 0x38
	       (features[1] << 8) | (features[2] << 16);
    6e80:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6e82:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    6e84:	79b2      	ldrb	r2, [r6, #6]
    6e86:	0412      	lsls	r2, r2, #16
    6e88:	431a      	orrs	r2, r3
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6e8a:	6803      	ldr	r3, [r0, #0]
    6e8c:	03db      	lsls	r3, r3, #15
    6e8e:	0bdb      	lsrs	r3, r3, #15
    6e90:	4013      	ands	r3, r2
    6e92:	6003      	str	r3, [r0, #0]
	_radio.conn_curr->common.fex_valid = 1;
    6e94:	2320      	movs	r3, #32
    6e96:	780a      	ldrb	r2, [r1, #0]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6e98:	0020      	movs	r0, r4
	_radio.conn_curr->common.fex_valid = 1;
    6e9a:	4313      	orrs	r3, r2
    6e9c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6e9e:	2303      	movs	r3, #3
    6ea0:	7922      	ldrb	r2, [r4, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6ea2:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6ea4:	4313      	orrs	r3, r2
    6ea6:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    6ea8:	2309      	movs	r3, #9
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6eaa:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    6eac:	7163      	strb	r3, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6eae:	71e3      	strb	r3, [r4, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6eb0:	3008      	adds	r0, #8
    6eb2:	f7fa fabf 	bl	1434 <memset>
		conn->llcp_features & 0xFF;
    6eb6:	002b      	movs	r3, r5
    6eb8:	338c      	adds	r3, #140	; 0x8c
    6eba:	681b      	ldr	r3, [r3, #0]
	ctrl_tx_sec_enqueue(conn, node_tx);
    6ebc:	0028      	movs	r0, r5
		(conn->llcp_features >> 8) & 0xFF;
    6ebe:	0a1a      	lsrs	r2, r3, #8
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6ec0:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 16) & 0xFF;
    6ec2:	0c1b      	lsrs	r3, r3, #16
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    6ec4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    6ec6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    6ec8:	0021      	movs	r1, r4
    6eca:	f7ff ffaa 	bl	6e22 <ctrl_tx_sec_enqueue>
	return 0;
    6ece:	2000      	movs	r0, #0
}
    6ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ed2:	46c0      	nop			; (mov r8, r8)
    6ed4:	20000284 	.word	0x20000284
    6ed8:	fffe30d0 	.word	0xfffe30d0

00006edc <event_connection_prepare>:
{
    6edc:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6ede:	4c75      	ldr	r4, [pc, #468]	; (70b4 <event_connection_prepare+0x1d8>)
{
    6ee0:	b091      	sub	sp, #68	; 0x44
    6ee2:	900c      	str	r0, [sp, #48]	; 0x30
    6ee4:	910e      	str	r1, [sp, #56]	; 0x38
    6ee6:	001f      	movs	r7, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    6ee8:	7b23      	ldrb	r3, [r4, #12]
    6eea:	2b00      	cmp	r3, #0
    6eec:	d002      	beq.n	6ef4 <event_connection_prepare+0x18>
			LL_ASSERT(0);
    6eee:	b662      	cpsie	i
    6ef0:	2004      	movs	r0, #4
    6ef2:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    6ef4:	8c3b      	ldrh	r3, [r7, #32]
    6ef6:	3307      	adds	r3, #7
    6ef8:	b2db      	uxtb	r3, r3
    6efa:	7323      	strb	r3, [r4, #12]
	if (conn->role) {
    6efc:	7f7b      	ldrb	r3, [r7, #29]
    6efe:	2b7f      	cmp	r3, #127	; 0x7f
    6f00:	d909      	bls.n	6f16 <event_connection_prepare+0x3a>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    6f02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6f04:	1c53      	adds	r3, r2, #1
    6f06:	434b      	muls	r3, r1
		conn->slave.window_widening_prepare_us +=
    6f08:	6c79      	ldr	r1, [r7, #68]	; 0x44
    6f0a:	185b      	adds	r3, r3, r1
		    conn->slave.window_widening_max_us) {
    6f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    6f0e:	647b      	str	r3, [r7, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    6f10:	428b      	cmp	r3, r1
    6f12:	d900      	bls.n	6f16 <event_connection_prepare+0x3a>
			conn->slave.window_widening_prepare_us =
    6f14:	6479      	str	r1, [r7, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    6f16:	003d      	movs	r5, r7
    6f18:	003e      	movs	r6, r7
	conn->latency_prepare += lazy;
    6f1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    6f1c:	355d      	adds	r5, #93	; 0x5d
	conn->latency_prepare += lazy;
    6f1e:	18d2      	adds	r2, r2, r3
	event_counter = conn->event_counter + conn->latency_prepare;
    6f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
	conn->latency_prepare += lazy;
    6f22:	b292      	uxth	r2, r2
    6f24:	853a      	strh	r2, [r7, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    6f26:	18d2      	adds	r2, r2, r3
    6f28:	b293      	uxth	r3, r2
    6f2a:	930a      	str	r3, [sp, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    6f2c:	365c      	adds	r6, #92	; 0x5c
    6f2e:	782a      	ldrb	r2, [r5, #0]
    6f30:	7833      	ldrb	r3, [r6, #0]
    6f32:	429a      	cmp	r2, r3
    6f34:	d100      	bne.n	6f38 <event_connection_prepare+0x5c>
    6f36:	e07f      	b.n	7038 <event_connection_prepare+0x15c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    6f38:	2005      	movs	r0, #5
    6f3a:	f7ff fcc1 	bl	68c0 <event_stop.constprop.48>
		switch (conn->llcp_type) {
    6f3e:	003b      	movs	r3, r7
    6f40:	335e      	adds	r3, #94	; 0x5e
    6f42:	7818      	ldrb	r0, [r3, #0]
    6f44:	3801      	subs	r0, #1
    6f46:	2803      	cmp	r0, #3
    6f48:	d8d1      	bhi.n	6eee <event_connection_prepare+0x12>
    6f4a:	f7f9 f933 	bl	1b4 <__gnu_thumb1_case_uhi>
    6f4e:	0004      	.short	0x0004
    6f50:	02a5023b 	.word	0x02a5023b
    6f54:	02d2      	.short	0x02d2
	conn_upd = _radio.conn_upd;
    6f56:	23be      	movs	r3, #190	; 0xbe
    6f58:	005b      	lsls	r3, r3, #1
	if (!conn_upd) {
    6f5a:	58e2      	ldr	r2, [r4, r3]
    6f5c:	2a00      	cmp	r2, #0
    6f5e:	d100      	bne.n	6f62 <event_connection_prepare+0x86>
		_radio.conn_upd = conn;
    6f60:	50e7      	str	r7, [r4, r3]
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    6f62:	003b      	movs	r3, r7
    6f64:	2603      	movs	r6, #3
    6f66:	3360      	adds	r3, #96	; 0x60
    6f68:	930d      	str	r3, [sp, #52]	; 0x34
    6f6a:	781b      	ldrb	r3, [r3, #0]
    6f6c:	4033      	ands	r3, r6
    6f6e:	d100      	bne.n	6f72 <event_connection_prepare+0x96>
    6f70:	e0ac      	b.n	70cc <event_connection_prepare+0x1f0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f72:	0020      	movs	r0, r4
    6f74:	3051      	adds	r0, #81	; 0x51
    6f76:	30ff      	adds	r0, #255	; 0xff
    6f78:	f7fd f836 	bl	3fe8 <mem_acquire>
    6f7c:	1e04      	subs	r4, r0, #0
		if (!node_tx) {
    6f7e:	d05b      	beq.n	7038 <event_connection_prepare+0x15c>
		switch (conn->llcp.conn_upd.state) {
    6f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6f82:	781b      	ldrb	r3, [r3, #0]
    6f84:	079a      	lsls	r2, r3, #30
    6f86:	0f92      	lsrs	r2, r2, #30
    6f88:	2a01      	cmp	r2, #1
    6f8a:	d1b0      	bne.n	6eee <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6f8e:	43b3      	bics	r3, r6
    6f90:	7013      	strb	r3, [r2, #0]
		event_counter + conn->latency + 6;
    6f92:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
    6f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6f96:	3506      	adds	r5, #6
    6f98:	195d      	adds	r5, r3, r5
	conn->llcp.conn_upd.instant =
    6f9a:	003b      	movs	r3, r7
		event_counter + conn->latency + 6;
    6f9c:	b2ad      	uxth	r5, r5
	conn->llcp.conn_upd.instant =
    6f9e:	3368      	adds	r3, #104	; 0x68
    6fa0:	801d      	strh	r5, [r3, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6fa2:	7903      	ldrb	r3, [r0, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6fa4:	4944      	ldr	r1, [pc, #272]	; (70b8 <event_connection_prepare+0x1dc>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6fa6:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    6fa8:	230c      	movs	r3, #12
    6faa:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    6fac:	2300      	movs	r3, #0
    6fae:	71c3      	strb	r3, [r0, #7]
		conn->llcp.conn_upd.win_size;
    6fb0:	003b      	movs	r3, r7
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6fb2:	7106      	strb	r6, [r0, #4]
		conn->llcp.conn_upd.win_size;
    6fb4:	3370      	adds	r3, #112	; 0x70
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    6fb6:	781b      	ldrb	r3, [r3, #0]
    6fb8:	7203      	strb	r3, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6fba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    6fbc:	f7f9 f904 	bl	1c8 <__aeabi_uidiv>
    6fc0:	0021      	movs	r1, r4
		conn->llcp.conn_upd.interval;
    6fc2:	003b      	movs	r3, r7
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6fc4:	b280      	uxth	r0, r0
    6fc6:	7260      	strb	r0, [r4, #9]
    6fc8:	3109      	adds	r1, #9
    6fca:	0a00      	lsrs	r0, r0, #8
    6fcc:	7048      	strb	r0, [r1, #1]
		conn->llcp.conn_upd.interval;
    6fce:	3362      	adds	r3, #98	; 0x62
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    6fd0:	781a      	ldrb	r2, [r3, #0]
    6fd2:	72e2      	strb	r2, [r4, #11]
    6fd4:	785b      	ldrb	r3, [r3, #1]
    6fd6:	7323      	strb	r3, [r4, #12]
		conn->llcp.conn_upd.latency;
    6fd8:	003b      	movs	r3, r7
    6fda:	3364      	adds	r3, #100	; 0x64
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    6fdc:	781a      	ldrb	r2, [r3, #0]
    6fde:	7362      	strb	r2, [r4, #13]
    6fe0:	785b      	ldrb	r3, [r3, #1]
    6fe2:	73a3      	strb	r3, [r4, #14]
		conn->llcp.conn_upd.timeout;
    6fe4:	003b      	movs	r3, r7
    6fe6:	3366      	adds	r3, #102	; 0x66
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    6fe8:	781a      	ldrb	r2, [r3, #0]
    6fea:	73e2      	strb	r2, [r4, #15]
    6fec:	785b      	ldrb	r3, [r3, #1]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    6fee:	7465      	strb	r5, [r4, #17]
    6ff0:	0a2d      	lsrs	r5, r5, #8
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    6ff2:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    6ff4:	74a5      	strb	r5, [r4, #18]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    6ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6ff8:	683a      	ldr	r2, [r7, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    6ffa:	67bb      	str	r3, [r7, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6ffc:	2a00      	cmp	r2, #0
    6ffe:	da0a      	bge.n	7016 <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    7000:	6878      	ldr	r0, [r7, #4]
    7002:	68bb      	ldr	r3, [r7, #8]
    7004:	4283      	cmp	r3, r0
    7006:	d200      	bcs.n	700a <event_connection_prepare+0x12e>
    7008:	0003      	movs	r3, r0
			conn->llcp.conn_upd.ticks_anchor -=
    700a:	980c      	ldr	r0, [sp, #48]	; 0x30
				(conn->hdr.ticks_xtal_to_start &
    700c:	0052      	lsls	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    700e:	181b      	adds	r3, r3, r0
				(conn->hdr.ticks_xtal_to_start &
    7010:	0852      	lsrs	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    7012:	1a9b      	subs	r3, r3, r2
    7014:	67bb      	str	r3, [r7, #120]	; 0x78
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    7016:	4b29      	ldr	r3, [pc, #164]	; (70bc <event_connection_prepare+0x1e0>)
    7018:	4a29      	ldr	r2, [pc, #164]	; (70c0 <event_connection_prepare+0x1e4>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    701a:	6779      	str	r1, [r7, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    701c:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    701e:	2201      	movs	r2, #1
    7020:	2000      	movs	r0, #0
    7022:	0011      	movs	r1, r2
		mayfly_sched_offset->param = (void *)conn;
    7024:	609f      	str	r7, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7026:	f7fd f895 	bl	4154 <mayfly_enqueue>
		LL_ASSERT(!retval);
    702a:	2800      	cmp	r0, #0
    702c:	d000      	beq.n	7030 <event_connection_prepare+0x154>
    702e:	e75e      	b.n	6eee <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    7030:	0021      	movs	r1, r4
    7032:	0038      	movs	r0, r7
    7034:	f7ff fec4 	bl	6dc0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    7038:	003c      	movs	r4, r7
    703a:	003d      	movs	r5, r7
    703c:	3499      	adds	r4, #153	; 0x99
    703e:	3598      	adds	r5, #152	; 0x98
    7040:	7822      	ldrb	r2, [r4, #0]
    7042:	782b      	ldrb	r3, [r5, #0]
    7044:	429a      	cmp	r2, r3
    7046:	d01e      	beq.n	7086 <event_connection_prepare+0x1aa>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7048:	2005      	movs	r0, #5
    704a:	f7ff fc39 	bl	68c0 <event_stop.constprop.48>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    704e:	4819      	ldr	r0, [pc, #100]	; (70b4 <event_connection_prepare+0x1d8>)
    7050:	3051      	adds	r0, #81	; 0x51
    7052:	30ff      	adds	r0, #255	; 0xff
    7054:	f7fc ffc8 	bl	3fe8 <mem_acquire>
    7058:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    705a:	d014      	beq.n	7086 <event_connection_prepare+0x1aa>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    705c:	782b      	ldrb	r3, [r5, #0]
    705e:	7023      	strb	r3, [r4, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7060:	2303      	movs	r3, #3
    7062:	7902      	ldrb	r2, [r0, #4]
    7064:	4313      	orrs	r3, r2
    7066:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7068:	2302      	movs	r3, #2
    706a:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    706c:	71c3      	strb	r3, [r0, #7]
				conn->llcp_terminate.reason_own;
    706e:	003b      	movs	r3, r7
    7070:	339a      	adds	r3, #154	; 0x9a
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    7072:	781b      	ldrb	r3, [r3, #0]
    7074:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    7076:	0038      	movs	r0, r7
    7078:	f7ff fea2 	bl	6dc0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    707c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    707e:	2b01      	cmp	r3, #1
    7080:	d800      	bhi.n	7084 <event_connection_prepare+0x1a8>
    7082:	e28b      	b.n	759c <event_connection_prepare+0x6c0>
				conn->procedure_expire++;
    7084:	86bb      	strh	r3, [r7, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    7086:	8c3a      	ldrh	r2, [r7, #32]
    7088:	7f7c      	ldrb	r4, [r7, #29]
    708a:	3207      	adds	r2, #7
    708c:	1d3b      	adds	r3, r7, #4
    708e:	68b9      	ldr	r1, [r7, #8]
    7090:	b2d2      	uxtb	r2, r2
    7092:	480c      	ldr	r0, [pc, #48]	; (70c4 <event_connection_prepare+0x1e8>)
    7094:	2c7f      	cmp	r4, #127	; 0x7f
    7096:	d800      	bhi.n	709a <event_connection_prepare+0x1be>
    7098:	480b      	ldr	r0, [pc, #44]	; (70c8 <event_connection_prepare+0x1ec>)
    709a:	9002      	str	r0, [sp, #8]
    709c:	9201      	str	r2, [sp, #4]
    709e:	9100      	str	r1, [sp, #0]
    70a0:	003a      	movs	r2, r7
    70a2:	9703      	str	r7, [sp, #12]
    70a4:	990e      	ldr	r1, [sp, #56]	; 0x38
    70a6:	980c      	ldr	r0, [sp, #48]	; 0x30
    70a8:	f7ff fc1a 	bl	68e0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    70ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    70ae:	3201      	adds	r2, #1
    70b0:	847a      	strh	r2, [r7, #34]	; 0x22
    70b2:	e162      	b.n	737a <event_connection_prepare+0x49e>
    70b4:	20000284 	.word	0x20000284
    70b8:	000004e2 	.word	0x000004e2
    70bc:	20002390 	.word	0x20002390
    70c0:	000063c1 	.word	0x000063c1
    70c4:	000075f1 	.word	0x000075f1
    70c8:	000090cd 	.word	0x000090cd
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    70cc:	003a      	movs	r2, r7
    70ce:	3268      	adds	r2, #104	; 0x68
    70d0:	8812      	ldrh	r2, [r2, #0]
    70d2:	990a      	ldr	r1, [sp, #40]	; 0x28
    70d4:	1a8a      	subs	r2, r1, r2
	} else if (instant_latency <= 0x7FFF) {
    70d6:	b296      	uxth	r6, r2
    70d8:	0412      	lsls	r2, r2, #16
    70da:	d4ad      	bmi.n	7038 <event_connection_prepare+0x15c>
		conn->llcp_ack = conn->llcp_req;
    70dc:	003a      	movs	r2, r7
    70de:	325c      	adds	r2, #92	; 0x5c
    70e0:	7812      	ldrb	r2, [r2, #0]
		_radio.ticker_id_prepare = 0;
    70e2:	7323      	strb	r3, [r4, #12]
		conn->llcp_ack = conn->llcp_req;
    70e4:	702a      	strb	r2, [r5, #0]
		if (_radio.conn_upd == conn) {
    70e6:	22be      	movs	r2, #190	; 0xbe
    70e8:	0052      	lsls	r2, r2, #1
    70ea:	58a1      	ldr	r1, [r4, r2]
    70ec:	428f      	cmp	r7, r1
    70ee:	d100      	bne.n	70f2 <event_connection_prepare+0x216>
			_radio.conn_upd = NULL;
    70f0:	50a3      	str	r3, [r4, r2]
		if ((conn->llcp.conn_upd.interval !=
    70f2:	003d      	movs	r5, r7
    70f4:	003c      	movs	r4, r7
    70f6:	3562      	adds	r5, #98	; 0x62
    70f8:	882b      	ldrh	r3, [r5, #0]
    70fa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    70fc:	3464      	adds	r4, #100	; 0x64
    70fe:	4299      	cmp	r1, r3
    7100:	d112      	bne.n	7128 <event_connection_prepare+0x24c>
		     conn->conn_interval) ||
    7102:	8822      	ldrh	r2, [r4, #0]
    7104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    7106:	429a      	cmp	r2, r3
    7108:	d10e      	bne.n	7128 <event_connection_prepare+0x24c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    710a:	4bd4      	ldr	r3, [pc, #848]	; (745c <event_connection_prepare+0x580>)
    710c:	4359      	muls	r1, r3
    710e:	003b      	movs	r3, r7
    7110:	3366      	adds	r3, #102	; 0x66
    7112:	8818      	ldrh	r0, [r3, #0]
    7114:	4bd2      	ldr	r3, [pc, #840]	; (7460 <event_connection_prepare+0x584>)
    7116:	4358      	muls	r0, r3
    7118:	1840      	adds	r0, r0, r1
    711a:	3801      	subs	r0, #1
    711c:	f7f9 f8a2 	bl	264 <__aeabi_idiv>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    7120:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    7122:	b280      	uxth	r0, r0
    7124:	4283      	cmp	r3, r0
    7126:	d01b      	beq.n	7160 <event_connection_prepare+0x284>
			node_rx = packet_rx_reserve_get(2);
    7128:	2002      	movs	r0, #2
    712a:	f7fe fcbd 	bl	5aa8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    712e:	2800      	cmp	r0, #0
    7130:	d100      	bne.n	7134 <event_connection_prepare+0x258>
    7132:	e6dc      	b.n	6eee <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    7134:	8c3b      	ldrh	r3, [r7, #32]
    7136:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    7138:	2308      	movs	r3, #8
    713a:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    713c:	2300      	movs	r3, #0
    713e:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    7140:	782b      	ldrb	r3, [r5, #0]
    7142:	7303      	strb	r3, [r0, #12]
    7144:	786b      	ldrb	r3, [r5, #1]
    7146:	7343      	strb	r3, [r0, #13]
			radio_le_conn_update_cmplt->latency =
    7148:	7823      	ldrb	r3, [r4, #0]
    714a:	7383      	strb	r3, [r0, #14]
    714c:	7863      	ldrb	r3, [r4, #1]
    714e:	73c3      	strb	r3, [r0, #15]
				conn->llcp.conn_upd.timeout;
    7150:	003b      	movs	r3, r7
    7152:	3366      	adds	r3, #102	; 0x66
			radio_le_conn_update_cmplt->timeout =
    7154:	781a      	ldrb	r2, [r3, #0]
    7156:	7402      	strb	r2, [r0, #16]
    7158:	785b      	ldrb	r3, [r3, #1]
    715a:	7443      	strb	r3, [r0, #17]
			packet_rx_enqueue();
    715c:	f7ff f826 	bl	61ac <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7160:	683b      	ldr	r3, [r7, #0]
    7162:	2b00      	cmp	r3, #0
    7164:	da0b      	bge.n	717e <event_connection_prepare+0x2a2>
			u32_t ticks_prepare_to_start =
    7166:	687a      	ldr	r2, [r7, #4]
    7168:	68b8      	ldr	r0, [r7, #8]
    716a:	4290      	cmp	r0, r2
    716c:	d200      	bcs.n	7170 <event_connection_prepare+0x294>
    716e:	0010      	movs	r0, r2
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7172:	005b      	lsls	r3, r3, #1
    7174:	085b      	lsrs	r3, r3, #1
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7176:	1810      	adds	r0, r2, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7178:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    717a:	1ac3      	subs	r3, r0, r3
    717c:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_old = instant_latency * conn->conn_interval;
    717e:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    7180:	882b      	ldrh	r3, [r5, #0]
		conn_interval_old = instant_latency * conn->conn_interval;
    7182:	4374      	muls	r4, r6
    7184:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    7186:	0019      	movs	r1, r3
    7188:	0020      	movs	r0, r4
			conn->llcp.conn_upd.interval;
    718a:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
    718c:	f7f9 f81c 	bl	1c8 <__aeabi_uidiv>
    7190:	b283      	uxth	r3, r0
		conn_interval_new = latency *
    7192:	980a      	ldr	r0, [sp, #40]	; 0x28
		latency = conn_interval_old /
    7194:	930d      	str	r3, [sp, #52]	; 0x34
		conn_interval_new = latency *
    7196:	4358      	muls	r0, r3
    7198:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    719a:	4284      	cmp	r4, r0
    719c:	d300      	bcc.n	71a0 <event_connection_prepare+0x2c4>
    719e:	e0ee      	b.n	737e <event_connection_prepare+0x4a2>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    71a0:	2324      	movs	r3, #36	; 0x24
    71a2:	1b00      	subs	r0, r0, r4
    71a4:	4aaf      	ldr	r2, [pc, #700]	; (7464 <event_connection_prepare+0x588>)
    71a6:	33ff      	adds	r3, #255	; 0xff
    71a8:	17c1      	asrs	r1, r0, #31
    71aa:	f7f9 f8f5 	bl	398 <__aeabi_lmul>
    71ae:	2307      	movs	r3, #7
    71b0:	4aad      	ldr	r2, [pc, #692]	; (7468 <event_connection_prepare+0x58c>)
    71b2:	f7f9 f8d1 	bl	358 <__aeabi_uldivmod>
    71b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71b8:	0200      	lsls	r0, r0, #8
    71ba:	0a00      	lsrs	r0, r0, #8
    71bc:	18c3      	adds	r3, r0, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    71be:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    71c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    71c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    71c4:	1b9b      	subs	r3, r3, r6
    71c6:	18d3      	adds	r3, r2, r3
    71c8:	853b      	strh	r3, [r7, #40]	; 0x28
		ticks_slot_offset =
    71ca:	687a      	ldr	r2, [r7, #4]
    71cc:	683b      	ldr	r3, [r7, #0]
    71ce:	920e      	str	r2, [sp, #56]	; 0x38
    71d0:	429a      	cmp	r2, r3
    71d2:	d200      	bcs.n	71d6 <event_connection_prepare+0x2fa>
    71d4:	930e      	str	r3, [sp, #56]	; 0x38
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    71d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71d8:	4da0      	ldr	r5, [pc, #640]	; (745c <event_connection_prepare+0x580>)
    71da:	435d      	muls	r5, r3
		if (conn->role) {
    71dc:	7f7b      	ldrb	r3, [r7, #29]
    71de:	2b7f      	cmp	r3, #127	; 0x7f
    71e0:	d800      	bhi.n	71e4 <event_connection_prepare+0x308>
    71e2:	e0e0      	b.n	73a6 <event_connection_prepare+0x4ca>
				conn->slave.window_widening_periodic_us *
    71e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				(((gc_lookup_ppm[_radio.sca] +
    71e6:	4aa1      	ldr	r2, [pc, #644]	; (746c <event_connection_prepare+0x590>)
				conn->slave.window_widening_periodic_us *
    71e8:	435e      	muls	r6, r3
			conn->slave.window_widening_prepare_us -=
    71ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    71ec:	49a0      	ldr	r1, [pc, #640]	; (7470 <event_connection_prepare+0x594>)
			conn->slave.window_widening_prepare_us -=
    71ee:	1b9e      	subs	r6, r3, r6
				(((gc_lookup_ppm[_radio.sca] +
    71f0:	4ba0      	ldr	r3, [pc, #640]	; (7474 <event_connection_prepare+0x598>)
    71f2:	33ff      	adds	r3, #255	; 0xff
    71f4:	7f5b      	ldrb	r3, [r3, #29]
    71f6:	005b      	lsls	r3, r3, #1
    71f8:	5a98      	ldrh	r0, [r3, r2]
				   gc_lookup_ppm[conn->slave.sca]) *
    71fa:	003b      	movs	r3, r7
    71fc:	3338      	adds	r3, #56	; 0x38
    71fe:	781b      	ldrb	r3, [r3, #0]
    7200:	06db      	lsls	r3, r3, #27
    7202:	0f5b      	lsrs	r3, r3, #29
    7204:	005b      	lsls	r3, r3, #1
    7206:	5a9b      	ldrh	r3, [r3, r2]
				(((gc_lookup_ppm[_radio.sca] +
    7208:	18c0      	adds	r0, r0, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    720a:	4368      	muls	r0, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    720c:	4b9a      	ldr	r3, [pc, #616]	; (7478 <event_connection_prepare+0x59c>)
    720e:	18c0      	adds	r0, r0, r3
    7210:	f7f8 ffda 	bl	1c8 <__aeabi_uidiv>
				conn->llcp.conn_upd.win_size * 1250;
    7214:	003a      	movs	r2, r7
				(conn_interval_us >> 1) - RADIO_TIFS;
    7216:	086b      	lsrs	r3, r5, #1
    7218:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_periodic_us =
    721a:	63f8      	str	r0, [r7, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    721c:	643b      	str	r3, [r7, #64]	; 0x40
				conn->llcp.conn_upd.win_size * 1250;
    721e:	3270      	adds	r2, #112	; 0x70
    7220:	7812      	ldrb	r2, [r2, #0]
    7222:	498e      	ldr	r1, [pc, #568]	; (745c <event_connection_prepare+0x580>)
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7224:	0004      	movs	r4, r0
				conn->llcp.conn_upd.win_size * 1250;
    7226:	434a      	muls	r2, r1
			conn->slave.window_size_prepare_us =
    7228:	64fa      	str	r2, [r7, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    722a:	2200      	movs	r2, #0
				conn->slave.window_widening_periodic_us *
    722c:	980d      	ldr	r0, [sp, #52]	; 0x34
			conn->slave.ticks_to_offset = 0;
    722e:	65ba      	str	r2, [r7, #88]	; 0x58
				conn->slave.window_widening_periodic_us *
    7230:	4360      	muls	r0, r4
			conn->slave.window_widening_prepare_us +=
    7232:	1836      	adds	r6, r6, r0
			if (conn->slave.window_widening_prepare_us >
    7234:	42b3      	cmp	r3, r6
    7236:	d200      	bcs.n	723a <event_connection_prepare+0x35e>
    7238:	e0b3      	b.n	73a2 <event_connection_prepare+0x4c6>
			conn->slave.window_widening_prepare_us +=
    723a:	647e      	str	r6, [r7, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    723c:	4a8f      	ldr	r2, [pc, #572]	; (747c <event_connection_prepare+0x5a0>)
    723e:	2300      	movs	r3, #0
    7240:	2100      	movs	r1, #0
    7242:	f7f9 f8a9 	bl	398 <__aeabi_lmul>
    7246:	4a88      	ldr	r2, [pc, #544]	; (7468 <event_connection_prepare+0x58c>)
    7248:	2307      	movs	r3, #7
    724a:	f7f9 f885 	bl	358 <__aeabi_uldivmod>
    724e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7250:	4982      	ldr	r1, [pc, #520]	; (745c <event_connection_prepare+0x580>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7252:	1a1b      	subs	r3, r3, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7254:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7256:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7258:	f7f8 ffb6 	bl	1c8 <__aeabi_uidiv>
    725c:	4b7f      	ldr	r3, [pc, #508]	; (745c <event_connection_prepare+0x580>)
    725e:	4a87      	ldr	r2, [pc, #540]	; (747c <event_connection_prepare+0x5a0>)
    7260:	4358      	muls	r0, r3
    7262:	2100      	movs	r1, #0
    7264:	2300      	movs	r3, #0
    7266:	f7f9 f897 	bl	398 <__aeabi_lmul>
    726a:	4a7f      	ldr	r2, [pc, #508]	; (7468 <event_connection_prepare+0x58c>)
    726c:	2307      	movs	r3, #7
    726e:	f7f9 f873 	bl	358 <__aeabi_uldivmod>
    7272:	0200      	lsls	r0, r0, #8
    7274:	0a06      	lsrs	r6, r0, #8
			periodic_us -= conn->slave.window_widening_periodic_us;
    7276:	1b2c      	subs	r4, r5, r4
		conn->conn_interval = conn->llcp.conn_upd.interval;
    7278:	466b      	mov	r3, sp
    727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    727c:	0029      	movs	r1, r5
		conn->conn_interval = conn->llcp.conn_upd.interval;
    727e:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
    7280:	003b      	movs	r3, r7
    7282:	3364      	adds	r3, #100	; 0x64
    7284:	881b      	ldrh	r3, [r3, #0]
    7286:	84fb      	strh	r3, [r7, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7288:	003b      	movs	r3, r7
    728a:	3366      	adds	r3, #102	; 0x66
    728c:	8818      	ldrh	r0, [r3, #0]
    728e:	4b74      	ldr	r3, [pc, #464]	; (7460 <event_connection_prepare+0x584>)
    7290:	4358      	muls	r0, r3
    7292:	1940      	adds	r0, r0, r5
    7294:	3801      	subs	r0, #1
    7296:	f7f8 ff97 	bl	1c8 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    729a:	4b79      	ldr	r3, [pc, #484]	; (7480 <event_connection_prepare+0x5a4>)
		conn->supervision_reload =
    729c:	85f8      	strh	r0, [r7, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    729e:	0029      	movs	r1, r5
    72a0:	18e8      	adds	r0, r5, r3
    72a2:	f7f8 ff91 	bl	1c8 <__aeabi_uidiv>
		if (!conn->llcp.conn_upd.is_internal) {
    72a6:	003b      	movs	r3, r7
    72a8:	2204      	movs	r2, #4
		conn->procedure_reload =
    72aa:	8678      	strh	r0, [r7, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    72ac:	3360      	adds	r3, #96	; 0x60
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	4013      	ands	r3, r2
    72b2:	d100      	bne.n	72b6 <event_connection_prepare+0x3da>
			conn->supervision_expire = 0;
    72b4:	863b      	strh	r3, [r7, #48]	; 0x30
		mayfly_was_enabled =
    72b6:	2101      	movs	r1, #1
    72b8:	2000      	movs	r0, #0
    72ba:	f003 fc18 	bl	aaee <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    72be:	2200      	movs	r2, #0
		mayfly_was_enabled =
    72c0:	900d      	str	r0, [sp, #52]	; 0x34
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    72c2:	2101      	movs	r1, #1
    72c4:	0010      	movs	r0, r2
    72c6:	f7fc ff21 	bl	410c <mayfly_enable>
		ticker_status =
    72ca:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    72cc:	8c3a      	ldrh	r2, [r7, #32]
		ticker_status =
    72ce:	4b6d      	ldr	r3, [pc, #436]	; (7484 <event_connection_prepare+0x5a8>)
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    72d0:	3207      	adds	r2, #7
		ticker_status =
    72d2:	9300      	str	r3, [sp, #0]
    72d4:	b2d2      	uxtb	r2, r2
    72d6:	4b6c      	ldr	r3, [pc, #432]	; (7488 <event_connection_prepare+0x5ac>)
    72d8:	0008      	movs	r0, r1
    72da:	f7fd fd41 	bl	4d60 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    72de:	2302      	movs	r3, #2
    72e0:	4398      	bics	r0, r3
    72e2:	1e05      	subs	r5, r0, #0
    72e4:	d000      	beq.n	72e8 <event_connection_prepare+0x40c>
    72e6:	e602      	b.n	6eee <event_connection_prepare+0x12>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72e8:	8c3b      	ldrh	r3, [r7, #32]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    72ea:	4a64      	ldr	r2, [pc, #400]	; (747c <event_connection_prepare+0x5a0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72ec:	3307      	adds	r3, #7
    72ee:	b2db      	uxtb	r3, r3
    72f0:	930f      	str	r3, [sp, #60]	; 0x3c
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    72f2:	0020      	movs	r0, r4
    72f4:	2300      	movs	r3, #0
    72f6:	0029      	movs	r1, r5
    72f8:	f7f9 f84e 	bl	398 <__aeabi_lmul>
    72fc:	4a5a      	ldr	r2, [pc, #360]	; (7468 <event_connection_prepare+0x58c>)
    72fe:	2307      	movs	r3, #7
    7300:	900a      	str	r0, [sp, #40]	; 0x28
    7302:	910b      	str	r1, [sp, #44]	; 0x2c
    7304:	f7f9 f828 	bl	358 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7308:	0204      	lsls	r4, r0, #8
    730a:	0a24      	lsrs	r4, r4, #8
				     HAL_TICKER_REMAINDER(periodic_us),
    730c:	4a56      	ldr	r2, [pc, #344]	; (7468 <event_connection_prepare+0x58c>)
    730e:	2307      	movs	r3, #7
    7310:	0020      	movs	r0, r4
    7312:	0029      	movs	r1, r5
    7314:	f7f9 f840 	bl	398 <__aeabi_lmul>
    7318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    731a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    731c:	1a12      	subs	r2, r2, r0
    731e:	418b      	sbcs	r3, r1
    7320:	0010      	movs	r0, r2
    7322:	22fa      	movs	r2, #250	; 0xfa
    7324:	0019      	movs	r1, r3
    7326:	0092      	lsls	r2, r2, #2
    7328:	2300      	movs	r3, #0
    732a:	f7f9 f815 	bl	358 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    732e:	68fa      	ldr	r2, [r7, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    7330:	0001      	movs	r1, r0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7332:	4694      	mov	ip, r2
    7334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7336:	7f78      	ldrb	r0, [r7, #29]
    7338:	4463      	add	r3, ip
    733a:	4a54      	ldr	r2, [pc, #336]	; (748c <event_connection_prepare+0x5b0>)
    733c:	287f      	cmp	r0, #127	; 0x7f
    733e:	d800      	bhi.n	7342 <event_connection_prepare+0x466>
    7340:	4a53      	ldr	r2, [pc, #332]	; (7490 <event_connection_prepare+0x5b4>)
		ticker_status =
    7342:	4854      	ldr	r0, [pc, #336]	; (7494 <event_connection_prepare+0x5b8>)
    7344:	9205      	str	r2, [sp, #20]
    7346:	9008      	str	r0, [sp, #32]
    7348:	484f      	ldr	r0, [pc, #316]	; (7488 <event_connection_prepare+0x5ac>)
    734a:	9304      	str	r3, [sp, #16]
    734c:	9007      	str	r0, [sp, #28]
    734e:	2000      	movs	r0, #0
    7350:	9102      	str	r1, [sp, #8]
    7352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7354:	9706      	str	r7, [sp, #24]
    7356:	9003      	str	r0, [sp, #12]
    7358:	9401      	str	r4, [sp, #4]
    735a:	9600      	str	r6, [sp, #0]
    735c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    735e:	0001      	movs	r1, r0
    7360:	f7fd fc6c 	bl	4c3c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7364:	2302      	movs	r3, #2
    7366:	4398      	bics	r0, r3
    7368:	d000      	beq.n	736c <event_connection_prepare+0x490>
    736a:	e5c0      	b.n	6eee <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    736c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    736e:	2b00      	cmp	r3, #0
    7370:	d003      	beq.n	737a <event_connection_prepare+0x49e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7372:	2201      	movs	r2, #1
    7374:	0011      	movs	r1, r2
    7376:	f7fc fec9 	bl	410c <mayfly_enable>
}
    737a:	b011      	add	sp, #68	; 0x44
    737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    737e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7380:	0020      	movs	r0, r4
    7382:	f7f8 ff65 	bl	250 <__aeabi_uidivmod>
    7386:	2324      	movs	r3, #36	; 0x24
    7388:	b288      	uxth	r0, r1
    738a:	4a36      	ldr	r2, [pc, #216]	; (7464 <event_connection_prepare+0x588>)
    738c:	33ff      	adds	r3, #255	; 0xff
    738e:	2100      	movs	r1, #0
    7390:	f7f9 f802 	bl	398 <__aeabi_lmul>
    7394:	2307      	movs	r3, #7
    7396:	4a34      	ldr	r2, [pc, #208]	; (7468 <event_connection_prepare+0x58c>)
    7398:	f7f8 ffde 	bl	358 <__aeabi_uldivmod>
    739c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    739e:	1a1b      	subs	r3, r3, r0
    73a0:	e70d      	b.n	71be <event_connection_prepare+0x2e2>
				conn->slave.window_widening_prepare_us =
    73a2:	647b      	str	r3, [r7, #68]	; 0x44
    73a4:	e74a      	b.n	723c <event_connection_prepare+0x360>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    73a6:	4a35      	ldr	r2, [pc, #212]	; (747c <event_connection_prepare+0x5a0>)
    73a8:	2300      	movs	r3, #0
    73aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    73ac:	2100      	movs	r1, #0
    73ae:	f7f8 fff3 	bl	398 <__aeabi_lmul>
    73b2:	4a2d      	ldr	r2, [pc, #180]	; (7468 <event_connection_prepare+0x58c>)
    73b4:	2307      	movs	r3, #7
    73b6:	f7f8 ffcf 	bl	358 <__aeabi_uldivmod>
    73ba:	0200      	lsls	r0, r0, #8
    73bc:	0a00      	lsrs	r0, r0, #8
			ticks_win_offset += 1;
    73be:	1c46      	adds	r6, r0, #1
		periodic_us = conn_interval_us;
    73c0:	002c      	movs	r4, r5
    73c2:	e759      	b.n	7278 <event_connection_prepare+0x39c>
	if (conn->llcp.chan_map.initiate) {
    73c4:	003b      	movs	r3, r7
    73c6:	3360      	adds	r3, #96	; 0x60
    73c8:	930d      	str	r3, [sp, #52]	; 0x34
    73ca:	781b      	ldrb	r3, [r3, #0]
    73cc:	2b00      	cmp	r3, #0
    73ce:	d024      	beq.n	741a <event_connection_prepare+0x53e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    73d0:	0020      	movs	r0, r4
    73d2:	3051      	adds	r0, #81	; 0x51
    73d4:	30ff      	adds	r0, #255	; 0xff
    73d6:	f7fc fe07 	bl	3fe8 <mem_acquire>
    73da:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    73dc:	d100      	bne.n	73e0 <event_connection_prepare+0x504>
    73de:	e62b      	b.n	7038 <event_connection_prepare+0x15c>
			conn->llcp.chan_map.initiate = 0;
    73e0:	2300      	movs	r3, #0
			conn->llcp.chan_map.instant =
    73e2:	003d      	movs	r5, r7
			conn->llcp.chan_map.initiate = 0;
    73e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			conn->llcp.chan_map.instant =
    73e6:	3566      	adds	r5, #102	; 0x66
			conn->llcp.chan_map.initiate = 0;
    73e8:	7013      	strb	r3, [r2, #0]
				event_counter + conn->latency + 6;
    73ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    73ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    73ee:	3306      	adds	r3, #6
    73f0:	18d3      	adds	r3, r2, r3
			conn->llcp.chan_map.instant =
    73f2:	802b      	strh	r3, [r5, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    73f4:	2303      	movs	r3, #3
    73f6:	7902      	ldrb	r2, [r0, #4]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    73f8:	0039      	movs	r1, r7
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    73fa:	4313      	orrs	r3, r2
    73fc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    73fe:	2308      	movs	r3, #8
    7400:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7402:	3b07      	subs	r3, #7
    7404:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7406:	2205      	movs	r2, #5
    7408:	3008      	adds	r0, #8
    740a:	3161      	adds	r1, #97	; 0x61
    740c:	f7f9 ffe8 	bl	13e0 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7410:	782b      	ldrb	r3, [r5, #0]
    7412:	7363      	strb	r3, [r4, #13]
    7414:	786b      	ldrb	r3, [r5, #1]
    7416:	73a3      	strb	r3, [r4, #14]
    7418:	e60a      	b.n	7030 <event_connection_prepare+0x154>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    741a:	003b      	movs	r3, r7
    741c:	3366      	adds	r3, #102	; 0x66
    741e:	881b      	ldrh	r3, [r3, #0]
    7420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7422:	1ad3      	subs	r3, r2, r3
    7424:	041b      	lsls	r3, r3, #16
    7426:	d500      	bpl.n	742a <event_connection_prepare+0x54e>
    7428:	e606      	b.n	7038 <event_connection_prepare+0x15c>
		memcpy(&conn->data_chan_map[0],
    742a:	003c      	movs	r4, r7
    742c:	0039      	movs	r1, r7
		conn->llcp_ack = conn->llcp_req;
    742e:	7833      	ldrb	r3, [r6, #0]
		memcpy(&conn->data_chan_map[0],
    7430:	3417      	adds	r4, #23
		conn->llcp_ack = conn->llcp_req;
    7432:	702b      	strb	r3, [r5, #0]
		memcpy(&conn->data_chan_map[0],
    7434:	2205      	movs	r2, #5
    7436:	3161      	adds	r1, #97	; 0x61
    7438:	0020      	movs	r0, r4
    743a:	f7f9 ffd1 	bl	13e0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    743e:	2105      	movs	r1, #5
    7440:	0020      	movs	r0, r4
    7442:	f7fc ff69 	bl	4318 <util_ones_count_get>
		conn->data_chan_count =
    7446:	223f      	movs	r2, #63	; 0x3f
    7448:	0003      	movs	r3, r0
    744a:	7f78      	ldrb	r0, [r7, #29]
    744c:	4013      	ands	r3, r2
    744e:	4390      	bics	r0, r2
    7450:	4318      	orrs	r0, r3
		conn->chm_update = 1;
    7452:	2301      	movs	r3, #1
		conn->data_chan_count =
    7454:	7778      	strb	r0, [r7, #29]
		conn->chm_update = 1;
    7456:	773b      	strb	r3, [r7, #28]
    7458:	e5ee      	b.n	7038 <event_connection_prepare+0x15c>
    745a:	46c0      	nop			; (mov r8, r8)
    745c:	000004e2 	.word	0x000004e2
    7460:	00002710 	.word	0x00002710
    7464:	09ce5400 	.word	0x09ce5400
    7468:	1afd498d 	.word	0x1afd498d
    746c:	0000ca7a 	.word	0x0000ca7a
    7470:	000f4240 	.word	0x000f4240
    7474:	20000284 	.word	0x20000284
    7478:	000f423f 	.word	0x000f423f
    747c:	3b9aca00 	.word	0x3b9aca00
    7480:	026259ff 	.word	0x026259ff
    7484:	00001aa1 	.word	0x00001aa1
    7488:	00006809 	.word	0x00006809
    748c:	000075ad 	.word	0x000075ad
    7490:	000075a5 	.word	0x000075a5
    7494:	00001ab1 	.word	0x00001ab1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7498:	0020      	movs	r0, r4
    749a:	3051      	adds	r0, #81	; 0x51
    749c:	30ff      	adds	r0, #255	; 0xff
    749e:	f7fc fda3 	bl	3fe8 <mem_acquire>
    74a2:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    74a4:	d100      	bne.n	74a8 <event_connection_prepare+0x5cc>
    74a6:	e5c7      	b.n	7038 <event_connection_prepare+0x15c>
		conn->llcp_ack = conn->llcp_req;
    74a8:	7833      	ldrb	r3, [r6, #0]
    74aa:	702b      	strb	r3, [r5, #0]
		conn->llcp_features = RADIO_BLE_FEAT;
    74ac:	003d      	movs	r5, r7
    74ae:	4b3c      	ldr	r3, [pc, #240]	; (75a0 <event_connection_prepare+0x6c4>)
    74b0:	358c      	adds	r5, #140	; 0x8c
    74b2:	602b      	str	r3, [r5, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    74b4:	2303      	movs	r3, #3
    74b6:	7902      	ldrb	r2, [r0, #4]
    74b8:	4313      	orrs	r3, r2
    74ba:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    74bc:	2309      	movs	r3, #9
		pdu_ctrl_tx->llctrl.opcode =
    74be:	7f7a      	ldrb	r2, [r7, #29]
		pdu_ctrl_tx->len =
    74c0:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    74c2:	3b01      	subs	r3, #1
    74c4:	2a7f      	cmp	r2, #127	; 0x7f
    74c6:	d900      	bls.n	74ca <event_connection_prepare+0x5ee>
    74c8:	3306      	adds	r3, #6
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    74ca:	0020      	movs	r0, r4
		pdu_ctrl_tx->llctrl.opcode =
    74cc:	71e3      	strb	r3, [r4, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    74ce:	2208      	movs	r2, #8
    74d0:	2100      	movs	r1, #0
    74d2:	3008      	adds	r0, #8
    74d4:	f7f9 ffae 	bl	1434 <memset>
		ctrl_tx_enqueue(conn, node_tx);
    74d8:	0021      	movs	r1, r4
			conn->llcp_features & 0xFF;
    74da:	682b      	ldr	r3, [r5, #0]
			(conn->llcp_features >> 8) & 0xFF;
    74dc:	0a1a      	lsrs	r2, r3, #8
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    74de:	7223      	strb	r3, [r4, #8]
			(conn->llcp_features >> 16) & 0xFF;
    74e0:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    74e2:	7262      	strb	r2, [r4, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    74e4:	72a3      	strb	r3, [r4, #10]
			ctrl_tx_enqueue(conn, node_tx);
    74e6:	0038      	movs	r0, r7
    74e8:	f7ff fc6a 	bl	6dc0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    74ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    74ee:	86bb      	strh	r3, [r7, #52]	; 0x34
    74f0:	e5a2      	b.n	7038 <event_connection_prepare+0x15c>
	if (conn->llcp_version.tx == 0) {
    74f2:	003b      	movs	r3, r7
    74f4:	2201      	movs	r2, #1
    74f6:	3390      	adds	r3, #144	; 0x90
    74f8:	930d      	str	r3, [sp, #52]	; 0x34
    74fa:	781b      	ldrb	r3, [r3, #0]
    74fc:	4213      	tst	r3, r2
    74fe:	d123      	bne.n	7548 <event_connection_prepare+0x66c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7500:	0020      	movs	r0, r4
    7502:	3051      	adds	r0, #81	; 0x51
    7504:	30ff      	adds	r0, #255	; 0xff
    7506:	f7fc fd6f 	bl	3fe8 <mem_acquire>
    750a:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    750c:	d100      	bne.n	7510 <event_connection_prepare+0x634>
    750e:	e593      	b.n	7038 <event_connection_prepare+0x15c>
			conn->llcp_ack = conn->llcp_req;
    7510:	003b      	movs	r3, r7
    7512:	335c      	adds	r3, #92	; 0x5c
    7514:	781a      	ldrb	r2, [r3, #0]
    7516:	705a      	strb	r2, [r3, #1]
			conn->llcp_version.tx = 1;
    7518:	2201      	movs	r2, #1
    751a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	4313      	orrs	r3, r2
    7520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7522:	7013      	strb	r3, [r2, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7524:	2303      	movs	r3, #3
    7526:	7902      	ldrb	r2, [r0, #4]
    7528:	4313      	orrs	r3, r2
    752a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    752c:	2306      	movs	r3, #6
    752e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7530:	18db      	adds	r3, r3, r3
    7532:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    7534:	3b03      	subs	r3, #3
    7536:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    7538:	3b18      	subs	r3, #24
    753a:	7243      	strb	r3, [r0, #9]
    753c:	3314      	adds	r3, #20
    753e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7540:	3b06      	subs	r3, #6
    7542:	72c3      	strb	r3, [r0, #11]
    7544:	7303      	strb	r3, [r0, #12]
    7546:	e7ce      	b.n	74e6 <event_connection_prepare+0x60a>
	} else if (conn->llcp_version.rx != 0) {
    7548:	2002      	movs	r0, #2
    754a:	4203      	tst	r3, r0
    754c:	d100      	bne.n	7550 <event_connection_prepare+0x674>
    754e:	e4ce      	b.n	6eee <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    7550:	7833      	ldrb	r3, [r6, #0]
    7552:	702b      	strb	r3, [r5, #0]
		node_rx = packet_rx_reserve_get(2);
    7554:	f7fe faa8 	bl	5aa8 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7558:	2800      	cmp	r0, #0
    755a:	d100      	bne.n	755e <event_connection_prepare+0x682>
    755c:	e4c7      	b.n	6eee <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    755e:	8c3b      	ldrh	r3, [r7, #32]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7560:	7a02      	ldrb	r2, [r0, #8]
		node_rx->hdr.handle = conn->handle;
    7562:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7564:	2301      	movs	r3, #1
    7566:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7568:	2303      	movs	r3, #3
    756a:	4313      	orrs	r3, r2
    756c:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    756e:	2306      	movs	r3, #6
    7570:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7572:	18db      	adds	r3, r3, r3
    7574:	72c3      	strb	r3, [r0, #11]
			conn->llcp_version.version_number;
    7576:	003b      	movs	r3, r7
    7578:	3391      	adds	r3, #145	; 0x91
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    757a:	781b      	ldrb	r3, [r3, #0]
    757c:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.company_id;
    757e:	003b      	movs	r3, r7
    7580:	3392      	adds	r3, #146	; 0x92
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7582:	781a      	ldrb	r2, [r3, #0]
    7584:	7342      	strb	r2, [r0, #13]
    7586:	785b      	ldrb	r3, [r3, #1]
    7588:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.sub_version_number;
    758a:	003b      	movs	r3, r7
    758c:	3394      	adds	r3, #148	; 0x94
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    758e:	781a      	ldrb	r2, [r3, #0]
    7590:	73c2      	strb	r2, [r0, #15]
    7592:	785b      	ldrb	r3, [r3, #1]
    7594:	7403      	strb	r3, [r0, #16]
		packet_rx_enqueue();
    7596:	f7fe fe09 	bl	61ac <packet_rx_enqueue>
    759a:	e54d      	b.n	7038 <event_connection_prepare+0x15c>
				conn->procedure_expire++;
    759c:	3301      	adds	r3, #1
    759e:	e571      	b.n	7084 <event_connection_prepare+0x1a8>
    75a0:	0001400c 	.word	0x0001400c

000075a4 <event_master_prepare>:
{
    75a4:	b510      	push	{r4, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    75a6:	f7ff fc99 	bl	6edc <event_connection_prepare>
}
    75aa:	bd10      	pop	{r4, pc}

000075ac <event_slave_prepare>:
    75ac:	b510      	push	{r4, lr}
    75ae:	f7ff fc95 	bl	6edc <event_connection_prepare>
    75b2:	bd10      	pop	{r4, pc}

000075b4 <connection_configure>:
{
    75b4:	b510      	push	{r4, lr}
    75b6:	0004      	movs	r4, r0
	radio_reset();
    75b8:	f002 ff5a 	bl	a470 <radio_reset>
	radio_tx_power_set(0);
    75bc:	2000      	movs	r0, #0
    75be:	f002 ff73 	bl	a4a8 <radio_tx_power_set>
	radio_isr_set(isr);
    75c2:	4809      	ldr	r0, [pc, #36]	; (75e8 <connection_configure+0x34>)
    75c4:	f002 ff3a 	bl	a43c <radio_isr_set>
	radio_aa_set(conn->access_addr);
    75c8:	0020      	movs	r0, r4
    75ca:	3010      	adds	r0, #16
    75cc:	f002 ff90 	bl	a4f0 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
    75d0:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    75d2:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    75d4:	0409      	lsls	r1, r1, #16
			     ((u32_t)conn->crc_init[1] << 8) |
    75d6:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    75d8:	4319      	orrs	r1, r3
			     ((u32_t)conn->crc_init[0])));
    75da:	7d23      	ldrb	r3, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    75dc:	4803      	ldr	r0, [pc, #12]	; (75ec <connection_configure+0x38>)
    75de:	4319      	orrs	r1, r3
    75e0:	f003 f81a 	bl	a618 <radio_crc_configure>
}
    75e4:	bd10      	pop	{r4, pc}
    75e6:	46c0      	nop			; (mov r8, r8)
    75e8:	00007835 	.word	0x00007835
    75ec:	0000065b 	.word	0x0000065b

000075f0 <event_slave>:
{
    75f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    75f2:	4e58      	ldr	r6, [pc, #352]	; (7754 <event_slave+0x164>)
{
    75f4:	9000      	str	r0, [sp, #0]
	LL_ASSERT(_radio.role == ROLE_NONE);
    75f6:	7bf5      	ldrb	r5, [r6, #15]
{
    75f8:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    75fa:	b2ed      	uxtb	r5, r5
    75fc:	2d00      	cmp	r5, #0
    75fe:	d002      	beq.n	7606 <event_slave+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7600:	b662      	cpsie	i
    7602:	2004      	movs	r0, #4
    7604:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    7606:	7b33      	ldrb	r3, [r6, #12]
    7608:	8c22      	ldrh	r2, [r4, #32]
    760a:	b2db      	uxtb	r3, r3
    760c:	3207      	adds	r2, #7
    760e:	4293      	cmp	r3, r2
    7610:	d1f6      	bne.n	7600 <event_slave+0x10>
	_radio.role = ROLE_SLAVE;
    7612:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7614:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    7616:	73f2      	strb	r2, [r6, #15]
	_radio.ticker_id_prepare = 0;
    7618:	7335      	strb	r5, [r6, #12]
	_radio.ticker_id_event =
    761a:	7373      	strb	r3, [r6, #13]
	_radio.ticks_anchor = ticks_at_expire;
    761c:	9b00      	ldr	r3, [sp, #0]
	_radio.conn_curr = conn;
    761e:	0037      	movs	r7, r6
	_radio.ticks_anchor = ticks_at_expire;
    7620:	6073      	str	r3, [r6, #4]
	_radio.packet_counter = 0;
    7622:	0033      	movs	r3, r6
	_radio.state = STATE_RX;
    7624:	3a02      	subs	r2, #2
	_radio.packet_counter = 0;
    7626:	33ff      	adds	r3, #255	; 0xff
	_radio.conn_curr = conn;
    7628:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
    762a:	7432      	strb	r2, [r6, #16]
	_radio.packet_counter = 0;
    762c:	755d      	strb	r5, [r3, #21]
	_radio.crc_expire = 0;
    762e:	759d      	strb	r5, [r3, #22]
	_radio.conn_curr = conn;
    7630:	617c      	str	r4, [r7, #20]
	conn->latency_event = conn->latency_prepare;
    7632:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	connection_configure(conn);
    7634:	0020      	movs	r0, r4
	conn->latency_event = conn->latency_prepare;
    7636:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    7638:	8525      	strh	r5, [r4, #40]	; 0x28
	connection_configure(conn);
    763a:	f7ff ffbb 	bl	75b4 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    763e:	2096      	movs	r0, #150	; 0x96
    7640:	f003 f8a0 	bl	a784 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    7644:	002b      	movs	r3, r5
    7646:	002a      	movs	r2, r5
    7648:	0029      	movs	r1, r5
    764a:	0028      	movs	r0, r5
    764c:	f003 f810 	bl	a670 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7650:	2336      	movs	r3, #54	; 0x36
    7652:	33ff      	adds	r3, #255	; 0xff
    7654:	5cf3      	ldrb	r3, [r6, r3]
    7656:	0026      	movs	r6, r4
    7658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    765a:	009b      	lsls	r3, r3, #2
    765c:	5899      	ldr	r1, [r3, r2]
	rx_packet_set(conn, (void *)
    765e:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7660:	3108      	adds	r1, #8
	rx_packet_set(conn, (void *)
    7662:	f7fe fceb 	bl	603c <rx_packet_set>
	if (conn->data_chan_sel) {
    7666:	7f63      	ldrb	r3, [r4, #29]
    7668:	3617      	adds	r6, #23
    766a:	069d      	lsls	r5, r3, #26
    766c:	065b      	lsls	r3, r3, #25
    766e:	d54a      	bpl.n	7706 <event_slave+0x116>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7670:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7672:	0eab      	lsrs	r3, r5, #26
    7674:	3801      	subs	r0, #1
    7676:	8be1      	ldrh	r1, [r4, #30]
    7678:	b280      	uxth	r0, r0
    767a:	0032      	movs	r2, r6
    767c:	f7ff faea 	bl	6c54 <chan_sel_2>
	chan_set(data_chan_use);
    7680:	f7fe feb6 	bl	63f0 <chan_set>
	conn->slave.window_widening_event_us +=
    7684:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7686:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7688:	189b      	adds	r3, r3, r2
	conn->slave.window_widening_prepare_us = 0;
    768a:	2200      	movs	r2, #0
    768c:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    768e:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    7690:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    7692:	4293      	cmp	r3, r2
    7694:	d900      	bls.n	7698 <event_slave+0xa8>
		conn->slave.window_widening_event_us =
    7696:	64a2      	str	r2, [r4, #72]	; 0x48
	conn->slave.window_size_prepare_us = 0;
    7698:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
    769a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    769c:	6d23      	ldr	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    769e:	4f2d      	ldr	r7, [pc, #180]	; (7754 <event_slave+0x164>)
    76a0:	9900      	ldr	r1, [sp, #0]
	conn->slave.window_size_event_us +=
    76a2:	189b      	adds	r3, r3, r2
    76a4:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    76a6:	68ba      	ldr	r2, [r7, #8]
    76a8:	3109      	adds	r1, #9
	conn->slave.window_size_prepare_us = 0;
    76aa:	64e5      	str	r5, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    76ac:	0028      	movs	r0, r5
    76ae:	f003 f871 	bl	a794 <radio_tmr_start>
    76b2:	9001      	str	r0, [sp, #4]
	radio_tmr_aa_capture();
    76b4:	f003 f8ea 	bl	a88c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    76b8:	0028      	movs	r0, r5
    76ba:	f003 f911 	bl	a8e0 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
    76be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    76c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    76c2:	005e      	lsls	r6, r3, #1
    76c4:	3078      	adds	r0, #120	; 0x78
    76c6:	1836      	adds	r6, r6, r0
	hcto += radio_rx_ready_delay_get(0, 0);
    76c8:	0029      	movs	r1, r5
    76ca:	0028      	movs	r0, r5
    76cc:	f002 ff68 	bl	a5a0 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    76d0:	9b01      	ldr	r3, [sp, #4]
	hcto += radio_rx_chain_delay_get(0, 0);
    76d2:	0029      	movs	r1, r5
	hcto += addr_us_get(0);
    76d4:	199e      	adds	r6, r3, r6
    76d6:	1836      	adds	r6, r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    76d8:	0028      	movs	r0, r5
    76da:	f002 ff63 	bl	a5a4 <radio_rx_chain_delay_get>
    76de:	1830      	adds	r0, r6, r0
	radio_tmr_hcto_configure(hcto);
    76e0:	f003 f8aa 	bl	a838 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    76e4:	8c21      	ldrh	r1, [r4, #32]
    76e6:	9a00      	ldr	r2, [sp, #0]
    76e8:	3107      	adds	r1, #7
    76ea:	b2c9      	uxtb	r1, r1
    76ec:	0020      	movs	r0, r4
    76ee:	f7ff faf1 	bl	6cd4 <preempt_calc>
    76f2:	42a8      	cmp	r0, r5
    76f4:	d023      	beq.n	773e <event_slave+0x14e>
		_radio.state = STATE_STOP;
    76f6:	2304      	movs	r3, #4
    76f8:	743b      	strb	r3, [r7, #16]
		radio_disable();
    76fa:	f002 ff61 	bl	a5c0 <radio_disable>
	packet_tx_enqueue(2);
    76fe:	2002      	movs	r0, #2
    7700:	f7fe ff14 	bl	652c <packet_tx_enqueue>
}
    7704:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    7708:	7fa0      	ldrb	r0, [r4, #30]
    770a:	3301      	adds	r3, #1
    770c:	4358      	muls	r0, r3
    770e:	7fe3      	ldrb	r3, [r4, #31]
    7710:	2125      	movs	r1, #37	; 0x25
    7712:	18c0      	adds	r0, r0, r3
    7714:	f7f8 fdfc 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7718:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    771a:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    771c:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    771e:	08c3      	lsrs	r3, r0, #3
    7720:	5cf3      	ldrb	r3, [r6, r3]
    7722:	4011      	ands	r1, r2
    7724:	410b      	asrs	r3, r1
    7726:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    7728:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    772a:	4213      	tst	r3, r2
    772c:	d1a8      	bne.n	7680 <event_slave+0x90>
		chan_index = chan_next % chan_count;
    772e:	0029      	movs	r1, r5
    7730:	f7f8 fd8e 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    7734:	0030      	movs	r0, r6
		chan_index = chan_next % chan_count;
    7736:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    7738:	f7fe f99b 	bl	5a72 <chan_sel_remap>
    773c:	e7a0      	b.n	7680 <event_slave+0x90>
		ticker_status =
    773e:	0003      	movs	r3, r0
    7740:	4a05      	ldr	r2, [pc, #20]	; (7758 <event_slave+0x168>)
    7742:	0001      	movs	r1, r0
    7744:	f7fd fb70 	bl	4e28 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7748:	2302      	movs	r3, #2
    774a:	4398      	bics	r0, r3
    774c:	d000      	beq.n	7750 <event_slave+0x160>
    774e:	e757      	b.n	7600 <event_slave+0x10>
    7750:	e7d5      	b.n	76fe <event_slave+0x10e>
    7752:	46c0      	nop			; (mov r8, r8)
    7754:	20000284 	.word	0x20000284
    7758:	00005fb5 	.word	0x00005fb5

0000775c <prepare_pdu_data_tx>:
	    conn->empty ||
    775c:	0003      	movs	r3, r0
{
    775e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7760:	0005      	movs	r5, r0
	    conn->empty ||
    7762:	33a8      	adds	r3, #168	; 0xa8
{
    7764:	9101      	str	r1, [sp, #4]
	    conn->empty ||
    7766:	7819      	ldrb	r1, [r3, #0]
    7768:	35ec      	adds	r5, #236	; 0xec
	if (/* empty packet */
    776a:	b24a      	sxtb	r2, r1
    776c:	2a00      	cmp	r2, #0
    776e:	db09      	blt.n	7784 <prepare_pdu_data_tx+0x28>
	    !conn->pkt_tx_head ||
    7770:	682a      	ldr	r2, [r5, #0]
	    conn->empty ||
    7772:	2a00      	cmp	r2, #0
    7774:	d006      	beq.n	7784 <prepare_pdu_data_tx+0x28>
    7776:	0006      	movs	r6, r0
    7778:	36f0      	adds	r6, #240	; 0xf0
	    !conn->pkt_tx_head ||
    777a:	0709      	lsls	r1, r1, #28
    777c:	d524      	bpl.n	77c8 <prepare_pdu_data_tx+0x6c>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    777e:	6831      	ldr	r1, [r6, #0]
    7780:	428a      	cmp	r2, r1
    7782:	d021      	beq.n	77c8 <prepare_pdu_data_tx+0x6c>
	conn->empty = 1;
    7784:	2280      	movs	r2, #128	; 0x80
    7786:	7819      	ldrb	r1, [r3, #0]
    7788:	4252      	negs	r2, r2
    778a:	430a      	orrs	r2, r1
    778c:	701a      	strb	r2, [r3, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    778e:	f002 ff5f 	bl	a650 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7792:	2103      	movs	r1, #3
    7794:	7802      	ldrb	r2, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    7796:	0003      	movs	r3, r0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7798:	438a      	bics	r2, r1
    779a:	0011      	movs	r1, r2
    779c:	2201      	movs	r2, #1
    779e:	430a      	orrs	r2, r1
	pdu_data_tx->len = 0;
    77a0:	2100      	movs	r1, #0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    77a2:	7002      	strb	r2, [r0, #0]
	pdu_data_tx->len = 0;
    77a4:	7041      	strb	r1, [r0, #1]
	if (conn->pkt_tx_head) {
    77a6:	6828      	ldr	r0, [r5, #0]
    77a8:	3110      	adds	r1, #16
    77aa:	2800      	cmp	r0, #0
    77ac:	d00a      	beq.n	77c4 <prepare_pdu_data_tx+0x68>
		pdu_data_tx->md = 1;
    77ae:	430a      	orrs	r2, r1
		pdu_data_tx->md = 0;
    77b0:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->rfu = 0;
    77b2:	211f      	movs	r1, #31
    77b4:	781a      	ldrb	r2, [r3, #0]
    77b6:	400a      	ands	r2, r1
    77b8:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->resv = 0;
    77ba:	2200      	movs	r2, #0
    77bc:	709a      	strb	r2, [r3, #2]
	*pdu_data_tx = _pdu_data_tx;
    77be:	9a01      	ldr	r2, [sp, #4]
    77c0:	6013      	str	r3, [r2, #0]
}
    77c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    77c4:	438a      	bics	r2, r1
    77c6:	e7f3      	b.n	77b0 <prepare_pdu_data_tx+0x54>
					conn->packet_tx_head_offset);
    77c8:	0005      	movs	r5, r0
    77ca:	35ff      	adds	r5, #255	; 0xff
    77cc:	78af      	ldrb	r7, [r5, #2]
		if (!conn->packet_tx_head_len) {
    77ce:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    77d0:	1d13      	adds	r3, r2, #4
    77d2:	19db      	adds	r3, r3, r7
		if (!conn->packet_tx_head_len) {
    77d4:	2900      	cmp	r1, #0
    77d6:	d101      	bne.n	77dc <prepare_pdu_data_tx+0x80>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    77d8:	7859      	ldrb	r1, [r3, #1]
    77da:	7069      	strb	r1, [r5, #1]
		if (conn->packet_tx_head_offset) {
    77dc:	2f00      	cmp	r7, #0
    77de:	d007      	beq.n	77f0 <prepare_pdu_data_tx+0x94>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    77e0:	2403      	movs	r4, #3
    77e2:	7819      	ldrb	r1, [r3, #0]
    77e4:	43a1      	bics	r1, r4
    77e6:	468c      	mov	ip, r1
    77e8:	2101      	movs	r1, #1
    77ea:	4664      	mov	r4, ip
    77ec:	4321      	orrs	r1, r4
    77ee:	7019      	strb	r1, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    77f0:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx->md = 0;
    77f2:	2510      	movs	r5, #16
		_pdu_data_tx->len = conn->packet_tx_head_len -
    77f4:	1bc9      	subs	r1, r1, r7
		_pdu_data_tx->md = 0;
    77f6:	781f      	ldrb	r7, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    77f8:	b2c9      	uxtb	r1, r1
		_pdu_data_tx->md = 0;
    77fa:	43af      	bics	r7, r5
		_pdu_data_tx->len = conn->packet_tx_head_len -
    77fc:	7059      	strb	r1, [r3, #1]
		_pdu_data_tx->md = 0;
    77fe:	701f      	strb	r7, [r3, #0]
		if (_pdu_data_tx->len > max_tx_octets) {
    7800:	291b      	cmp	r1, #27
    7802:	d904      	bls.n	780e <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->len = max_tx_octets;
    7804:	211b      	movs	r1, #27
    7806:	7059      	strb	r1, [r3, #1]
			_pdu_data_tx->md = 1;
    7808:	b2f9      	uxtb	r1, r7
    780a:	430d      	orrs	r5, r1
    780c:	701d      	strb	r5, [r3, #0]
		if (conn->pkt_tx_head->next) {
    780e:	6811      	ldr	r1, [r2, #0]
    7810:	2900      	cmp	r1, #0
    7812:	d003      	beq.n	781c <prepare_pdu_data_tx+0xc0>
			_pdu_data_tx->md = 1;
    7814:	2110      	movs	r1, #16
    7816:	781d      	ldrb	r5, [r3, #0]
    7818:	4329      	orrs	r1, r5
    781a:	7019      	strb	r1, [r3, #0]
		if (!conn->pkt_tx_ctrl &&
    781c:	6831      	ldr	r1, [r6, #0]
    781e:	2900      	cmp	r1, #0
    7820:	d1c7      	bne.n	77b2 <prepare_pdu_data_tx+0x56>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
    7822:	0001      	movs	r1, r0
    7824:	31f8      	adds	r1, #248	; 0xf8
		if (!conn->pkt_tx_ctrl &&
    7826:	6809      	ldr	r1, [r1, #0]
    7828:	428a      	cmp	r2, r1
    782a:	d0c2      	beq.n	77b2 <prepare_pdu_data_tx+0x56>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    782c:	30f4      	adds	r0, #244	; 0xf4
    782e:	6002      	str	r2, [r0, #0]
    7830:	6032      	str	r2, [r6, #0]
    7832:	e7be      	b.n	77b2 <prepare_pdu_data_tx+0x56>

00007834 <isr>:
{
    7834:	b5f0      	push	{r4, r5, r6, r7, lr}
    7836:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
    7838:	f002 fedc 	bl	a5f4 <radio_is_done>
    783c:	b2c7      	uxtb	r7, r0
	if (trx_done) {
    783e:	2f00      	cmp	r7, #0
    7840:	d026      	beq.n	7890 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    7842:	f002 fefb 	bl	a63c <radio_crc_is_valid>
    7846:	b2c3      	uxtb	r3, r0
    7848:	930e      	str	r3, [sp, #56]	; 0x38
		devmatch_ok = radio_filter_has_match();
    784a:	f002 ff7b 	bl	a744 <radio_filter_has_match>
    784e:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    7850:	f002 ff80 	bl	a754 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    7854:	f003 f928 	bl	aaa8 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    7858:	f003 f912 	bl	aa80 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    785c:	f002 ff32 	bl	a6c4 <radio_rssi_is_ready>
    7860:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    7862:	f002 feb7 	bl	a5d4 <radio_status_reset>
	radio_tmr_status_reset();
    7866:	f002 ff7d 	bl	a764 <radio_tmr_status_reset>
	radio_filter_status_reset();
    786a:	f002 ff65 	bl	a738 <radio_filter_status_reset>
	radio_ar_status_reset();
    786e:	f003 f90f 	bl	aa90 <radio_ar_status_reset>
	radio_rssi_status_reset();
    7872:	f002 ff21 	bl	a6b8 <radio_rssi_status_reset>
	switch (_radio.state) {
    7876:	4c69      	ldr	r4, [pc, #420]	; (7a1c <isr+0x1e8>)
    7878:	7c23      	ldrb	r3, [r4, #16]
    787a:	2b05      	cmp	r3, #5
    787c:	d82b      	bhi.n	78d6 <isr+0xa2>
    787e:	0018      	movs	r0, r3
    7880:	f7f8 fc98 	bl	1b4 <__gnu_thumb1_case_uhi>
    7884:	007b0058 	.word	0x007b0058
    7888:	096a000a 	.word	0x096a000a
    788c:	096a096a 	.word	0x096a096a
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    7890:	003d      	movs	r5, r7
    7892:	003e      	movs	r6, r7
    7894:	970e      	str	r7, [sp, #56]	; 0x38
    7896:	e7e4      	b.n	7862 <isr+0x2e>
	_radio.state = STATE_RX;
    7898:	2301      	movs	r3, #1
    789a:	7423      	strb	r3, [r4, #16]
	hcto = radio_tmr_tifs_base_get()
    789c:	f003 f852 	bl	a944 <radio_tmr_tifs_base_get>
    78a0:	0005      	movs	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    78a2:	2096      	movs	r0, #150	; 0x96
    78a4:	f002 ff6e 	bl	a784 <radio_tmr_tifs_set>
	switch (_radio.role) {
    78a8:	7be0      	ldrb	r0, [r4, #15]
    78aa:	3801      	subs	r0, #1
    78ac:	2803      	cmp	r0, #3
    78ae:	d812      	bhi.n	78d6 <isr+0xa2>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    78b0:	2300      	movs	r3, #0
    78b2:	35c3      	adds	r5, #195	; 0xc3
    78b4:	001a      	movs	r2, r3
    78b6:	0019      	movs	r1, r3
	switch (_radio.role) {
    78b8:	f7f8 fc68 	bl	18c <__gnu_thumb1_case_uqi>
    78bc:	3e3e1e02 	.word	0x3e3e1e02
		radio_switch_complete_and_tx(0, 0, 0, 0);
    78c0:	0018      	movs	r0, r3
    78c2:	f002 fed5 	bl	a670 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    78c6:	f002 fec7 	bl	a658 <radio_pkt_scratch_get>
    78ca:	f002 fe55 	bl	a578 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    78ce:	f002 fe89 	bl	a5e4 <radio_is_ready>
    78d2:	1e06      	subs	r6, r0, #0
    78d4:	d002      	beq.n	78dc <isr+0xa8>
		LL_ASSERT(0);
    78d6:	b662      	cpsie	i
    78d8:	2004      	movs	r0, #4
    78da:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    78dc:	0001      	movs	r1, r0
    78de:	f002 fe61 	bl	a5a4 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    78e2:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    78e4:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    78e6:	0030      	movs	r0, r6
    78e8:	f002 fe58 	bl	a59c <radio_tx_chain_delay_get>
    78ec:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    78ee:	f002 ffa3 	bl	a838 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    78f2:	f003 f809 	bl	a908 <radio_tmr_end_capture>
    78f6:	e01d      	b.n	7934 <isr+0x100>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    78f8:	0018      	movs	r0, r3
    78fa:	f002 feb9 	bl	a670 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    78fe:	2336      	movs	r3, #54	; 0x36
    7900:	33ff      	adds	r3, #255	; 0xff
    7902:	5ce3      	ldrb	r3, [r4, r3]
    7904:	34fc      	adds	r4, #252	; 0xfc
    7906:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7908:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    790a:	5898      	ldr	r0, [r3, r2]
    790c:	3008      	adds	r0, #8
    790e:	f002 fe33 	bl	a578 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    7912:	f002 fe67 	bl	a5e4 <radio_is_ready>
    7916:	1e06      	subs	r6, r0, #0
    7918:	d1dd      	bne.n	78d6 <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    791a:	0001      	movs	r1, r0
    791c:	f002 fe42 	bl	a5a4 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    7920:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    7922:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7924:	0030      	movs	r0, r6
    7926:	f002 fe39 	bl	a59c <radio_tx_chain_delay_get>
    792a:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    792c:	f002 ff84 	bl	a838 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    7930:	f002 feae 	bl	a690 <radio_rssi_measure>
}
    7934:	b015      	add	sp, #84	; 0x54
    7936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7938:	0018      	movs	r0, r3
    793a:	f002 fe99 	bl	a670 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    793e:	2336      	movs	r3, #54	; 0x36
    7940:	33ff      	adds	r3, #255	; 0xff
    7942:	5ce3      	ldrb	r3, [r4, r3]
    7944:	34fc      	adds	r4, #252	; 0xfc
    7946:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7948:	009b      	lsls	r3, r3, #2
    794a:	5899      	ldr	r1, [r3, r2]
		rx_packet_set(_radio.conn_curr,	(void *)
    794c:	6960      	ldr	r0, [r4, #20]
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    794e:	3108      	adds	r1, #8
		rx_packet_set(_radio.conn_curr,	(void *)
    7950:	f7fe fb74 	bl	603c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    7954:	f002 fe46 	bl	a5e4 <radio_is_ready>
    7958:	1e06      	subs	r6, r0, #0
    795a:	d1bc      	bne.n	78d6 <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    795c:	0001      	movs	r1, r0
    795e:	f002 fe21 	bl	a5a4 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    7962:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    7964:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7966:	0030      	movs	r0, r6
    7968:	f002 fe18 	bl	a59c <radio_tx_chain_delay_get>
    796c:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    796e:	f002 ff63 	bl	a838 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    7972:	2001      	movs	r0, #1
    7974:	f7fe fdda 	bl	652c <packet_tx_enqueue>
    7978:	e7dc      	b.n	7934 <isr+0x100>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    797a:	2f00      	cmp	r7, #0
    797c:	d104      	bne.n	7988 <isr+0x154>
		_radio.state = STATE_CLOSE;
    797e:	2303      	movs	r3, #3
    7980:	7423      	strb	r3, [r4, #16]
		radio_disable();
    7982:	f002 fe1d 	bl	a5c0 <radio_disable>
    7986:	e7d5      	b.n	7934 <isr+0x100>
	switch (_radio.role) {
    7988:	7be0      	ldrb	r0, [r4, #15]
    798a:	3801      	subs	r0, #1
    798c:	2803      	cmp	r0, #3
    798e:	d8a2      	bhi.n	78d6 <isr+0xa2>
    7990:	f7f8 fc10 	bl	1b4 <__gnu_thumb1_case_uhi>
    7994:	02300004 	.word	0x02300004
    7998:	04c504c5 	.word	0x04c504c5
		if (crc_ok) {
    799c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    799e:	2b00      	cmp	r3, #0
    79a0:	d0ed      	beq.n	797e <isr+0x14a>
	pdu_adv = (void *)radio_pkt_scratch_get();
    79a2:	f002 fe59 	bl	a658 <radio_pkt_scratch_get>
					[_radio.advertiser.adv_data.first][0];
    79a6:	0023      	movs	r3, r4
    79a8:	3374      	adds	r3, #116	; 0x74
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    79aa:	781a      	ldrb	r2, [r3, #0]
    79ac:	2327      	movs	r3, #39	; 0x27
    79ae:	4353      	muls	r3, r2
    79b0:	3326      	adds	r3, #38	; 0x26
    79b2:	18e3      	adds	r3, r4, r3
    79b4:	930c      	str	r3, [sp, #48]	; 0x30
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    79b6:	230f      	movs	r3, #15
    79b8:	7802      	ldrb	r2, [r0, #0]
	pdu_adv = (void *)radio_pkt_scratch_get();
    79ba:	0005      	movs	r5, r0
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    79bc:	4013      	ands	r3, r2
    79be:	2b03      	cmp	r3, #3
    79c0:	d12e      	bne.n	7a20 <isr+0x1ec>
    79c2:	7843      	ldrb	r3, [r0, #1]
    79c4:	2b0c      	cmp	r3, #12
    79c6:	d12b      	bne.n	7a20 <isr+0x1ec>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    79c8:	1da3      	adds	r3, r4, #6
    79ca:	7fdb      	ldrb	r3, [r3, #31]
		(devmatch_ok)) &&
    79cc:	065b      	lsls	r3, r3, #25
    79ce:	d501      	bpl.n	79d4 <isr+0x1a0>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    79d0:	2e00      	cmp	r6, #0
    79d2:	d025      	beq.n	7a20 <isr+0x1ec>
	return (adv->tx_addr == sr->rx_addr) &&
    79d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79d6:	09d2      	lsrs	r2, r2, #7
    79d8:	781b      	ldrb	r3, [r3, #0]
    79da:	065b      	lsls	r3, r3, #25
    79dc:	0fdb      	lsrs	r3, r3, #31
    79de:	4293      	cmp	r3, r2
    79e0:	d11e      	bne.n	7a20 <isr+0x1ec>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    79e2:	0029      	movs	r1, r5
    79e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79e6:	2206      	movs	r2, #6
    79e8:	1c98      	adds	r0, r3, #2
    79ea:	3108      	adds	r1, #8
    79ec:	f7f9 fcd4 	bl	1398 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    79f0:	2800      	cmp	r0, #0
    79f2:	d115      	bne.n	7a20 <isr+0x1ec>
		_radio.state = STATE_CLOSE;
    79f4:	2303      	movs	r3, #3
    79f6:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    79f8:	f002 fe42 	bl	a680 <radio_switch_complete_and_disable>
					[_radio.advertiser.scan_data.first][0]);
    79fc:	0023      	movs	r3, r4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    79fe:	2027      	movs	r0, #39	; 0x27
					[_radio.advertiser.scan_data.first][0]);
    7a00:	33c4      	adds	r3, #196	; 0xc4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    7a02:	781b      	ldrb	r3, [r3, #0]
    7a04:	4358      	muls	r0, r3
    7a06:	3076      	adds	r0, #118	; 0x76
    7a08:	1820      	adds	r0, r4, r0
    7a0a:	f002 fdbd 	bl	a588 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    7a0e:	f002 fde9 	bl	a5e4 <radio_is_ready>
    7a12:	2800      	cmp	r0, #0
    7a14:	d100      	bne.n	7a18 <isr+0x1e4>
    7a16:	e78d      	b.n	7934 <isr+0x100>
    7a18:	e75d      	b.n	78d6 <isr+0xa2>
    7a1a:	46c0      	nop			; (mov r8, r8)
    7a1c:	20000284 	.word	0x20000284
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    7a20:	210f      	movs	r1, #15
    7a22:	782a      	ldrb	r2, [r5, #0]
    7a24:	400a      	ands	r2, r1
    7a26:	2a05      	cmp	r2, #5
    7a28:	d1a9      	bne.n	797e <isr+0x14a>
    7a2a:	786b      	ldrb	r3, [r5, #1]
    7a2c:	2b22      	cmp	r3, #34	; 0x22
    7a2e:	d1a6      	bne.n	797e <isr+0x14a>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a32:	781b      	ldrb	r3, [r3, #0]
    7a34:	400b      	ands	r3, r1
    7a36:	2b01      	cmp	r3, #1
    7a38:	d000      	beq.n	7a3c <isr+0x208>
    7a3a:	e1ae      	b.n	7d9a <isr+0x566>
		       isr_adv_ci_adva_check(adv, ci) &&
    7a3c:	0029      	movs	r1, r5
    7a3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    7a40:	f7fe fa7a 	bl	5f38 <isr_adv_ci_adva_check>
    7a44:	2100      	movs	r1, #0
    7a46:	4288      	cmp	r0, r1
    7a48:	d00f      	beq.n	7a6a <isr+0x236>
	return (adv->rx_addr == ci->tx_addr) &&
    7a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a4c:	781a      	ldrb	r2, [r3, #0]
    7a4e:	782b      	ldrb	r3, [r5, #0]
    7a50:	09d2      	lsrs	r2, r2, #7
    7a52:	065b      	lsls	r3, r3, #25
    7a54:	0fdb      	lsrs	r3, r3, #31
    7a56:	429a      	cmp	r2, r3
    7a58:	d107      	bne.n	7a6a <isr+0x236>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    7a5a:	980c      	ldr	r0, [sp, #48]	; 0x30
    7a5c:	1ca9      	adds	r1, r5, #2
    7a5e:	2206      	movs	r2, #6
    7a60:	3008      	adds	r0, #8
    7a62:	f7f9 fc99 	bl	1398 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    7a66:	4241      	negs	r1, r0
    7a68:	4141      	adcs	r1, r0
		       isr_adv_ci_adva_check(adv, ci) &&
    7a6a:	0008      	movs	r0, r1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    7a6c:	2800      	cmp	r0, #0
    7a6e:	d086      	beq.n	797e <isr+0x14a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7a70:	23bb      	movs	r3, #187	; 0xbb
    7a72:	005b      	lsls	r3, r3, #1
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    7a74:	5ce3      	ldrb	r3, [r4, r3]
    7a76:	2b00      	cmp	r3, #0
    7a78:	d008      	beq.n	7a8c <isr+0x258>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7a7a:	23ba      	movs	r3, #186	; 0xba
    7a7c:	2276      	movs	r2, #118	; 0x76
    7a7e:	005b      	lsls	r3, r3, #1
    7a80:	32ff      	adds	r2, #255	; 0xff
    7a82:	5ce3      	ldrb	r3, [r4, r3]
    7a84:	5ca2      	ldrb	r2, [r4, r2]
    7a86:	429a      	cmp	r2, r3
    7a88:	d000      	beq.n	7a8c <isr+0x258>
    7a8a:	e778      	b.n	797e <isr+0x14a>
		   (_radio.advertiser.conn)) {
    7a8c:	0026      	movs	r6, r4
    7a8e:	36c8      	adds	r6, #200	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7a90:	6833      	ldr	r3, [r6, #0]
    7a92:	2b00      	cmp	r3, #0
    7a94:	d100      	bne.n	7a98 <isr+0x264>
    7a96:	e772      	b.n	797e <isr+0x14a>
			node_rx = packet_rx_reserve_get(4);
    7a98:	2004      	movs	r0, #4
    7a9a:	f7fe f805 	bl	5aa8 <packet_rx_reserve_get>
    7a9e:	900b      	str	r0, [sp, #44]	; 0x2c
		if (!node_rx) {
    7aa0:	2800      	cmp	r0, #0
    7aa2:	d100      	bne.n	7aa6 <isr+0x272>
    7aa4:	e76b      	b.n	797e <isr+0x14a>
		_radio.state = STATE_STOP;
    7aa6:	2304      	movs	r3, #4
    7aa8:	7423      	strb	r3, [r4, #16]
		radio_disable();
    7aaa:	f002 fd89 	bl	a5c0 <radio_disable>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7aae:	2282      	movs	r2, #130	; 0x82
		_radio.advertiser.conn = NULL;
    7ab0:	2300      	movs	r3, #0
		conn = _radio.advertiser.conn;
    7ab2:	6837      	ldr	r7, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7ab4:	34fc      	adds	r4, #252	; 0xfc
    7ab6:	68a1      	ldr	r1, [r4, #8]
    7ab8:	0052      	lsls	r2, r2, #1
    7aba:	0038      	movs	r0, r7
		_radio.advertiser.conn = NULL;
    7abc:	6033      	str	r3, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7abe:	f7fc fac5 	bl	404c <mem_index_get>
		memcpy(&conn->crc_init[0],
    7ac2:	0029      	movs	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7ac4:	8438      	strh	r0, [r7, #32]
		memcpy(&conn->crc_init[0],
    7ac6:	0038      	movs	r0, r7
    7ac8:	2203      	movs	r2, #3
    7aca:	3112      	adds	r1, #18
    7acc:	3014      	adds	r0, #20
		memcpy(&conn->access_addr[0],
    7ace:	003e      	movs	r6, r7
		memcpy(&conn->crc_init[0],
    7ad0:	f7f9 fc86 	bl	13e0 <memcpy>
		memcpy(&conn->access_addr[0],
    7ad4:	0029      	movs	r1, r5
    7ad6:	3610      	adds	r6, #16
    7ad8:	2204      	movs	r2, #4
    7ada:	310e      	adds	r1, #14
    7adc:	0030      	movs	r0, r6
		memcpy(&conn->data_chan_map[0],
    7ade:	003c      	movs	r4, r7
		memcpy(&conn->access_addr[0],
    7ae0:	f7f9 fc7e 	bl	13e0 <memcpy>
		memcpy(&conn->data_chan_map[0],
    7ae4:	0029      	movs	r1, r5
    7ae6:	3417      	adds	r4, #23
    7ae8:	2205      	movs	r2, #5
    7aea:	311e      	adds	r1, #30
    7aec:	0020      	movs	r0, r4
    7aee:	f7f9 fc77 	bl	13e0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7af2:	2105      	movs	r1, #5
    7af4:	0020      	movs	r0, r4
    7af6:	f7fc fc0f 	bl	4318 <util_ones_count_get>
		conn->data_chan_count =
    7afa:	223f      	movs	r2, #63	; 0x3f
    7afc:	0003      	movs	r3, r0
    7afe:	7f78      	ldrb	r0, [r7, #29]
    7b00:	4013      	ands	r3, r2
    7b02:	4390      	bics	r0, r2
    7b04:	4318      	orrs	r0, r3
    7b06:	7778      	strb	r0, [r7, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7b08:	0038      	movs	r0, r7
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    7b0a:	1d2b      	adds	r3, r5, #4
    7b0c:	7fdb      	ldrb	r3, [r3, #31]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7b0e:	0031      	movs	r1, r6
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    7b10:	06db      	lsls	r3, r3, #27
    7b12:	0edb      	lsrs	r3, r3, #27
    7b14:	77bb      	strb	r3, [r7, #30]
			pdu_adv->connect_ind.interval;
    7b16:	7e6b      	ldrb	r3, [r5, #25]
    7b18:	7e2a      	ldrb	r2, [r5, #24]
    7b1a:	021b      	lsls	r3, r3, #8
    7b1c:	4313      	orrs	r3, r2
			pdu_adv->connect_ind.interval * 1250;
    7b1e:	4aa7      	ldr	r2, [pc, #668]	; (7dbc <isr+0x588>)
		conn->conn_interval =
    7b20:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    7b22:	435a      	muls	r2, r3
    7b24:	920e      	str	r2, [sp, #56]	; 0x38
		conn->latency = pdu_adv->connect_ind.latency;
    7b26:	7eeb      	ldrb	r3, [r5, #27]
    7b28:	7eaa      	ldrb	r2, [r5, #26]
    7b2a:	021b      	lsls	r3, r3, #8
    7b2c:	4313      	orrs	r3, r2
    7b2e:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7b30:	2204      	movs	r2, #4
    7b32:	3054      	adds	r0, #84	; 0x54
    7b34:	f7f9 fc54 	bl	13e0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    7b38:	7f68      	ldrb	r0, [r5, #29]
    7b3a:	7f2b      	ldrb	r3, [r5, #28]
    7b3c:	0200      	lsls	r0, r0, #8
    7b3e:	4303      	orrs	r3, r0
    7b40:	489f      	ldr	r0, [pc, #636]	; (7dc0 <isr+0x58c>)
		radio_le_conn_cmplt->role = 0x01;
    7b42:	2601      	movs	r6, #1
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    7b44:	4358      	muls	r0, r3
    7b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b48:	18c0      	adds	r0, r0, r3
    7b4a:	0019      	movs	r1, r3
    7b4c:	3801      	subs	r0, #1
    7b4e:	f7f8 fb3b 	bl	1c8 <__aeabi_uidiv>
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    7b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b54:	4a9b      	ldr	r2, [pc, #620]	; (7dc4 <isr+0x590>)
    7b56:	0019      	movs	r1, r3
		conn->supervision_reload =
    7b58:	85f8      	strh	r0, [r7, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    7b5a:	1898      	adds	r0, r3, r2
    7b5c:	f7f8 fb34 	bl	1c8 <__aeabi_uidiv>
		node_rx->hdr.handle = conn->handle;
    7b60:	8c3b      	ldrh	r3, [r7, #32]
    7b62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    7b64:	8678      	strh	r0, [r7, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    7b66:	80d3      	strh	r3, [r2, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		radio_le_conn_cmplt->status = 0x00;
    7b6a:	2100      	movs	r1, #0
    7b6c:	001c      	movs	r4, r3
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7b6e:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7b70:	0020      	movs	r0, r4
		radio_le_conn_cmplt->status = 0x00;
    7b72:	72d9      	strb	r1, [r3, #11]
		radio_le_conn_cmplt->role = 0x01;
    7b74:	731e      	strb	r6, [r3, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7b76:	711a      	strb	r2, [r3, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7b78:	782b      	ldrb	r3, [r5, #0]
			       &pdu_adv->connect_ind.init_addr[0],
    7b7a:	1ca9      	adds	r1, r5, #2
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7b7c:	065b      	lsls	r3, r3, #25
    7b7e:	0fdb      	lsrs	r3, r3, #31
    7b80:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7b82:	300e      	adds	r0, #14
    7b84:	f7f9 fc2c 	bl	13e0 <memcpy>
			pdu_adv->connect_ind.interval;
    7b88:	7e6b      	ldrb	r3, [r5, #25]
    7b8a:	7e2a      	ldrb	r2, [r5, #24]
    7b8c:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->interval =
    7b8e:	4313      	orrs	r3, r2
    7b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7b92:	7513      	strb	r3, [r2, #20]
    7b94:	0a1b      	lsrs	r3, r3, #8
    7b96:	7553      	strb	r3, [r2, #21]
			pdu_adv->connect_ind.latency;
    7b98:	7eeb      	ldrb	r3, [r5, #27]
    7b9a:	7eaa      	ldrb	r2, [r5, #26]
    7b9c:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->latency =
    7b9e:	4313      	orrs	r3, r2
    7ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7ba2:	7593      	strb	r3, [r2, #22]
    7ba4:	0a1b      	lsrs	r3, r3, #8
    7ba6:	75d3      	strb	r3, [r2, #23]
			pdu_adv->connect_ind.timeout;
    7ba8:	7f6b      	ldrb	r3, [r5, #29]
    7baa:	7f2a      	ldrb	r2, [r5, #28]
    7bac:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->timeout =
    7bae:	4313      	orrs	r3, r2
    7bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7bb2:	7613      	strb	r3, [r2, #24]
    7bb4:	0a1b      	lsrs	r3, r3, #8
    7bb6:	7653      	strb	r3, [r2, #25]
			pdu_adv->connect_ind.sca;
    7bb8:	1d2b      	adds	r3, r5, #4
    7bba:	7fdb      	ldrb	r3, [r3, #31]
    7bbc:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    7bbe:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    7bc0:	8c38      	ldrh	r0, [r7, #32]
    7bc2:	f7fe f9db 	bl	5f7c <rx_fc_lock>
		packet_rx_enqueue();
    7bc6:	f7fe faf1 	bl	61ac <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    7bca:	2003      	movs	r0, #3
    7bcc:	f7fd ff6c 	bl	5aa8 <packet_rx_reserve_get>
    7bd0:	4b7a      	ldr	r3, [pc, #488]	; (7dbc <isr+0x588>)
    7bd2:	930b      	str	r3, [sp, #44]	; 0x2c
			LL_ASSERT(node_rx);
    7bd4:	2800      	cmp	r0, #0
    7bd6:	d100      	bne.n	7bda <isr+0x3a6>
    7bd8:	e67d      	b.n	78d6 <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    7bda:	8c3b      	ldrh	r3, [r7, #32]
			if (pdu_adv->chan_sel) {
    7bdc:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    7bde:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    7be0:	230a      	movs	r3, #10
    7be2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    7be4:	782b      	ldrb	r3, [r5, #0]
    7be6:	4013      	ands	r3, r2
    7be8:	d100      	bne.n	7bec <isr+0x3b8>
    7bea:	e0e5      	b.n	7db8 <isr+0x584>
					((u16_t)conn->access_addr[1] << 8) |
    7bec:	7c7b      	ldrb	r3, [r7, #17]
					conn->access_addr[0];
    7bee:	7c3a      	ldrb	r2, [r7, #16]
					((u16_t)conn->access_addr[1] << 8) |
    7bf0:	021b      	lsls	r3, r3, #8
				u16_t aa_ls =
    7bf2:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
    7bf4:	7cfa      	ldrb	r2, [r7, #19]
					 conn->access_addr[2];
    7bf6:	7cb9      	ldrb	r1, [r7, #18]
					((u16_t)conn->access_addr[3] << 8) |
    7bf8:	0212      	lsls	r2, r2, #8
				u16_t aa_ms =
    7bfa:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    7bfc:	2140      	movs	r1, #64	; 0x40
    7bfe:	7f7c      	ldrb	r4, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7c00:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    7c02:	4321      	orrs	r1, r4
    7c04:	7779      	strb	r1, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7c06:	83fb      	strh	r3, [r7, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    7c08:	72c6      	strb	r6, [r0, #11]
			packet_rx_enqueue();
    7c0a:	f7fe facf 	bl	61ac <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7c0e:	0039      	movs	r1, r7
    7c10:	241c      	movs	r4, #28
    7c12:	1d2b      	adds	r3, r5, #4
    7c14:	7fdb      	ldrb	r3, [r3, #31]
    7c16:	3138      	adds	r1, #56	; 0x38
    7c18:	780a      	ldrb	r2, [r1, #0]
    7c1a:	095b      	lsrs	r3, r3, #5
    7c1c:	0098      	lsls	r0, r3, #2
			(((gc_lookup_ppm[_radio.sca] +
    7c1e:	4e6a      	ldr	r6, [pc, #424]	; (7dc8 <isr+0x594>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7c20:	43a2      	bics	r2, r4
    7c22:	4302      	orrs	r2, r0
    7c24:	700a      	strb	r2, [r1, #0]
			(((gc_lookup_ppm[_radio.sca] +
    7c26:	0032      	movs	r2, r6
    7c28:	32ff      	adds	r2, #255	; 0xff
    7c2a:	7f52      	ldrb	r2, [r2, #29]
    7c2c:	4967      	ldr	r1, [pc, #412]	; (7dcc <isr+0x598>)
    7c2e:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->slave.sca]) *
    7c30:	005b      	lsls	r3, r3, #1
			(((gc_lookup_ppm[_radio.sca] +
    7c32:	5a50      	ldrh	r0, [r2, r1]
			   gc_lookup_ppm[conn->slave.sca]) *
    7c34:	5a5b      	ldrh	r3, [r3, r1]
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7c36:	4966      	ldr	r1, [pc, #408]	; (7dd0 <isr+0x59c>)
			(((gc_lookup_ppm[_radio.sca] +
    7c38:	18c0      	adds	r0, r0, r3
			   gc_lookup_ppm[conn->slave.sca]) *
    7c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_size_prepare_us = 0;
    7c3c:	2400      	movs	r4, #0
			   gc_lookup_ppm[conn->slave.sca]) *
    7c3e:	4358      	muls	r0, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7c40:	4b64      	ldr	r3, [pc, #400]	; (7dd4 <isr+0x5a0>)
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7c42:	36fc      	adds	r6, #252	; 0xfc
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7c44:	18c0      	adds	r0, r0, r3
    7c46:	f7f8 fabf 	bl	1c8 <__aeabi_uidiv>
			(conn_interval_us >> 1) - RADIO_TIFS;
    7c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_widening_periodic_us =
    7c4c:	63f8      	str	r0, [r7, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    7c4e:	085b      	lsrs	r3, r3, #1
    7c50:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    7c52:	643b      	str	r3, [r7, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    7c54:	7d6b      	ldrb	r3, [r5, #21]
    7c56:	4a59      	ldr	r2, [pc, #356]	; (7dbc <isr+0x588>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7c58:	0021      	movs	r1, r4
			pdu_adv->connect_ind.win_size * 1250;
    7c5a:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    7c5c:	64fc      	str	r4, [r7, #76]	; 0x4c
		conn->slave.window_size_event_us =
    7c5e:	653b      	str	r3, [r7, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7c60:	0020      	movs	r0, r4
    7c62:	f002 fc9d 	bl	a5a0 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7c66:	4a5c      	ldr	r2, [pc, #368]	; (7dd8 <isr+0x5a4>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7c68:	900f      	str	r0, [sp, #60]	; 0x3c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7c6a:	2300      	movs	r3, #0
    7c6c:	1880      	adds	r0, r0, r2
    7c6e:	0021      	movs	r1, r4
    7c70:	4a5a      	ldr	r2, [pc, #360]	; (7ddc <isr+0x5a8>)
    7c72:	f7f8 fb91 	bl	398 <__aeabi_lmul>
    7c76:	4a5a      	ldr	r2, [pc, #360]	; (7de0 <isr+0x5ac>)
    7c78:	2307      	movs	r3, #7
    7c7a:	f7f8 fb6d 	bl	358 <__aeabi_uldivmod>
		conn->hdr.ticks_xtal_to_start =
    7c7e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7c80:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7c82:	0200      	lsls	r0, r0, #8
    7c84:	0a00      	lsrs	r0, r0, #8
		conn->hdr.ticks_slot =
    7c86:	60f8      	str	r0, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7c88:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    7c8a:	603b      	str	r3, [r7, #0]
		conn->hdr.ticks_preempt_to_start =
    7c8c:	60bc      	str	r4, [r7, #8]
		ticks_slot_offset =
    7c8e:	920b      	str	r2, [sp, #44]	; 0x2c
    7c90:	429a      	cmp	r2, r3
    7c92:	d200      	bcs.n	7c96 <isr+0x462>
    7c94:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_us -=
    7c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
			((u64_t)pdu_adv->connect_ind.win_offset +
    7c9a:	2400      	movs	r4, #0
		conn_interval_us -=
    7c9c:	1a9b      	subs	r3, r3, r2
    7c9e:	930e      	str	r3, [sp, #56]	; 0x38
		conn_offset_us = radio_tmr_end_get();
    7ca0:	f002 fe48 	bl	a934 <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    7ca4:	7deb      	ldrb	r3, [r5, #23]
    7ca6:	7daa      	ldrb	r2, [r5, #22]
    7ca8:	021b      	lsls	r3, r3, #8
    7caa:	4313      	orrs	r3, r2
    7cac:	001d      	movs	r5, r3
		conn_offset_us +=
    7cae:	4b43      	ldr	r3, [pc, #268]	; (7dbc <isr+0x588>)
		conn_offset_us = radio_tmr_end_get();
    7cb0:	0006      	movs	r6, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7cb2:	0021      	movs	r1, r4
		conn_offset_us +=
    7cb4:	3501      	adds	r5, #1
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7cb6:	0020      	movs	r0, r4
		conn_offset_us +=
    7cb8:	435d      	muls	r5, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7cba:	f002 fc6f 	bl	a59c <radio_tx_chain_delay_get>
    7cbe:	3d30      	subs	r5, #48	; 0x30
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    7cc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7cc2:	1975      	adds	r5, r6, r5
    7cc4:	1a28      	subs	r0, r5, r0
    7cc6:	1ac3      	subs	r3, r0, r3
    7cc8:	930f      	str	r3, [sp, #60]	; 0x3c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7cca:	2390      	movs	r3, #144	; 0x90
    7ccc:	00db      	lsls	r3, r3, #3
    7cce:	2205      	movs	r2, #5
    7cd0:	9300      	str	r3, [sp, #0]
    7cd2:	0021      	movs	r1, r4
    7cd4:	4b43      	ldr	r3, [pc, #268]	; (7de4 <isr+0x5b0>)
    7cd6:	0020      	movs	r0, r4
    7cd8:	f7fd f842 	bl	4d60 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    7cdc:	4942      	ldr	r1, [pc, #264]	; (7de8 <isr+0x5b4>)
    7cde:	f7fe fd7f 	bl	67e0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7ce2:	220f      	movs	r2, #15
    7ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	4013      	ands	r3, r2
    7cea:	2b01      	cmp	r3, #1
    7cec:	d106      	bne.n	7cfc <isr+0x4c8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7cee:	9400      	str	r4, [sp, #0]
    7cf0:	0023      	movs	r3, r4
    7cf2:	3a0c      	subs	r2, #12
    7cf4:	0021      	movs	r1, r4
    7cf6:	0020      	movs	r0, r4
    7cf8:	f7fd f832 	bl	4d60 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7cfc:	2400      	movs	r4, #0
    7cfe:	4a37      	ldr	r2, [pc, #220]	; (7ddc <isr+0x5a8>)
    7d00:	2300      	movs	r3, #0
    7d02:	980e      	ldr	r0, [sp, #56]	; 0x38
    7d04:	0021      	movs	r1, r4
    7d06:	f7f8 fb47 	bl	398 <__aeabi_lmul>
    7d0a:	4a35      	ldr	r2, [pc, #212]	; (7de0 <isr+0x5ac>)
    7d0c:	2307      	movs	r3, #7
    7d0e:	900c      	str	r0, [sp, #48]	; 0x30
    7d10:	910d      	str	r1, [sp, #52]	; 0x34
    7d12:	f7f8 fb21 	bl	358 <__aeabi_uldivmod>
		     (_radio.ticks_anchor - ticks_slot_offset),
    7d16:	4b2c      	ldr	r3, [pc, #176]	; (7dc8 <isr+0x594>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d18:	8c3e      	ldrh	r6, [r7, #32]
    7d1a:	685d      	ldr	r5, [r3, #4]
    7d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d1e:	9706      	str	r7, [sp, #24]
    7d20:	1aed      	subs	r5, r5, r3
    7d22:	2393      	movs	r3, #147	; 0x93
    7d24:	00db      	lsls	r3, r3, #3
    7d26:	9308      	str	r3, [sp, #32]
    7d28:	4b30      	ldr	r3, [pc, #192]	; (7dec <isr+0x5b8>)
    7d2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7d2c:	9307      	str	r3, [sp, #28]
    7d2e:	4b30      	ldr	r3, [pc, #192]	; (7df0 <isr+0x5bc>)
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7d30:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d32:	9305      	str	r3, [sp, #20]
    7d34:	68fb      	ldr	r3, [r7, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7d36:	0207      	lsls	r7, r0, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d38:	18d3      	adds	r3, r2, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7d3a:	0a3f      	lsrs	r7, r7, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d3c:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7d3e:	4a28      	ldr	r2, [pc, #160]	; (7de0 <isr+0x5ac>)
    7d40:	2307      	movs	r3, #7
    7d42:	0038      	movs	r0, r7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d44:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7d46:	f7f8 fb27 	bl	398 <__aeabi_lmul>
    7d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d4e:	1a12      	subs	r2, r2, r0
    7d50:	418b      	sbcs	r3, r1
    7d52:	0010      	movs	r0, r2
    7d54:	22fa      	movs	r2, #250	; 0xfa
    7d56:	0019      	movs	r1, r3
    7d58:	0092      	lsls	r2, r2, #2
    7d5a:	2300      	movs	r3, #0
    7d5c:	f7f8 fafc 	bl	358 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7d60:	4a1e      	ldr	r2, [pc, #120]	; (7ddc <isr+0x5a8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d62:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7d64:	2300      	movs	r3, #0
    7d66:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7d68:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d6a:	9701      	str	r7, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7d6c:	f7f8 fb14 	bl	398 <__aeabi_lmul>
    7d70:	2307      	movs	r3, #7
    7d72:	4a1b      	ldr	r2, [pc, #108]	; (7de0 <isr+0x5ac>)
    7d74:	f7f8 faf0 	bl	358 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d78:	002b      	movs	r3, r5
    7d7a:	0200      	lsls	r0, r0, #8
    7d7c:	3607      	adds	r6, #7
    7d7e:	0a00      	lsrs	r0, r0, #8
    7d80:	b2f6      	uxtb	r6, r6
    7d82:	9000      	str	r0, [sp, #0]
		ticker_status =
    7d84:	0032      	movs	r2, r6
    7d86:	0021      	movs	r1, r4
    7d88:	0020      	movs	r0, r4
    7d8a:	f7fc ff57 	bl	4c3c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7d8e:	2302      	movs	r3, #2
    7d90:	4398      	bics	r0, r3
    7d92:	42a0      	cmp	r0, r4
    7d94:	d000      	beq.n	7d98 <isr+0x564>
    7d96:	e59e      	b.n	78d6 <isr+0xa2>
    7d98:	e5cc      	b.n	7934 <isr+0x100>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7d9a:	1da3      	adds	r3, r4, #6
    7d9c:	7fdb      	ldrb	r3, [r3, #31]
    7d9e:	099b      	lsrs	r3, r3, #6
		(devmatch_ok)) &&
    7da0:	079b      	lsls	r3, r3, #30
    7da2:	d502      	bpl.n	7daa <isr+0x576>
    7da4:	2000      	movs	r0, #0
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7da6:	4286      	cmp	r6, r0
    7da8:	d003      	beq.n	7db2 <isr+0x57e>
	       isr_adv_ci_adva_check(adv, ci);
    7daa:	0029      	movs	r1, r5
    7dac:	980c      	ldr	r0, [sp, #48]	; 0x30
    7dae:	f7fe f8c3 	bl	5f38 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    7db2:	2301      	movs	r3, #1
    7db4:	4018      	ands	r0, r3
    7db6:	e659      	b.n	7a6c <isr+0x238>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    7db8:	72c3      	strb	r3, [r0, #11]
    7dba:	e726      	b.n	7c0a <isr+0x3d6>
    7dbc:	000004e2 	.word	0x000004e2
    7dc0:	00002710 	.word	0x00002710
    7dc4:	026259ff 	.word	0x026259ff
    7dc8:	20000284 	.word	0x20000284
    7dcc:	0000ca7a 	.word	0x0000ca7a
    7dd0:	000f4240 	.word	0x000f4240
    7dd4:	000f423f 	.word	0x000f423f
    7dd8:	00000452 	.word	0x00000452
    7ddc:	3b9aca00 	.word	0x3b9aca00
    7de0:	1afd498d 	.word	0x1afd498d
    7de4:	000067e1 	.word	0x000067e1
    7de8:	00000481 	.word	0x00000481
    7dec:	00006809 	.word	0x00006809
    7df0:	000075ad 	.word	0x000075ad
		if (crc_ok &&
    7df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7df6:	2b00      	cmp	r3, #0
    7df8:	d100      	bne.n	7dfc <isr+0x5c8>
    7dfa:	e24b      	b.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    7dfc:	0023      	movs	r3, r4
    7dfe:	33dd      	adds	r3, #221	; 0xdd
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	06db      	lsls	r3, r3, #27
    7e04:	0fdb      	lsrs	r3, r3, #31
    7e06:	d002      	beq.n	7e0e <isr+0x5da>
		if (crc_ok &&
    7e08:	2e00      	cmp	r6, #0
    7e0a:	d100      	bne.n	7e0e <isr+0x5da>
    7e0c:	e242      	b.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
	bool dir_report = false;
    7e0e:	2100      	movs	r1, #0
    7e10:	aa13      	add	r2, sp, #76	; 0x4c
    7e12:	7011      	strb	r1, [r2, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    7e14:	2236      	movs	r2, #54	; 0x36
    7e16:	0021      	movs	r1, r4
    7e18:	32ff      	adds	r2, #255	; 0xff
    7e1a:	31fc      	adds	r1, #252	; 0xfc
    7e1c:	5ca2      	ldrb	r2, [r4, r2]
    7e1e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    7e20:	0092      	lsls	r2, r2, #2
    7e22:	5817      	ldr	r7, [r2, r0]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7e24:	680a      	ldr	r2, [r1, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    7e26:	003e      	movs	r6, r7
    7e28:	3608      	adds	r6, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7e2a:	2a00      	cmp	r2, #0
    7e2c:	d100      	bne.n	7e30 <isr+0x5fc>
    7e2e:	e1bf      	b.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    7e30:	22bb      	movs	r2, #187	; 0xbb
    7e32:	0052      	lsls	r2, r2, #1
    7e34:	5ca2      	ldrb	r2, [r4, r2]
    7e36:	2a00      	cmp	r2, #0
    7e38:	d008      	beq.n	7e4c <isr+0x618>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7e3a:	22ba      	movs	r2, #186	; 0xba
    7e3c:	2176      	movs	r1, #118	; 0x76
    7e3e:	0052      	lsls	r2, r2, #1
    7e40:	31ff      	adds	r1, #255	; 0xff
    7e42:	5ca2      	ldrb	r2, [r4, r2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7e44:	5c61      	ldrb	r1, [r4, r1]
    7e46:	4291      	cmp	r1, r2
    7e48:	d000      	beq.n	7e4c <isr+0x618>
    7e4a:	e1b1      	b.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d100      	bne.n	7e52 <isr+0x61e>
    7e50:	e19a      	b.n	8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    7e52:	220f      	movs	r2, #15
    7e54:	7a3b      	ldrb	r3, [r7, #8]
    7e56:	4013      	ands	r3, r2
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7e58:	d000      	beq.n	7e5c <isr+0x628>
    7e5a:	e1fb      	b.n	8254 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x254>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7e5c:	f002 fd6a 	bl	a934 <radio_tmr_end_get>
    7e60:	4bbb      	ldr	r3, [pc, #748]	; (8150 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150>)
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7e62:	4abc      	ldr	r2, [pc, #752]	; (8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>)
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7e64:	18c3      	adds	r3, r0, r3
    7e66:	930b      	str	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7e68:	0023      	movs	r3, r4
    7e6a:	33d8      	adds	r3, #216	; 0xd8
    7e6c:	6818      	ldr	r0, [r3, #0]
    7e6e:	2100      	movs	r1, #0
    7e70:	2307      	movs	r3, #7
    7e72:	f7f8 fa91 	bl	398 <__aeabi_lmul>
    7e76:	2300      	movs	r3, #0
    7e78:	4ab7      	ldr	r2, [pc, #732]	; (8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>)
    7e7a:	f7f8 fa6d 	bl	358 <__aeabi_uldivmod>
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    7e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7e80:	382d      	subs	r0, #45	; 0x2d
    7e82:	38ff      	subs	r0, #255	; 0xff
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    7e84:	4283      	cmp	r3, r0
    7e86:	d300      	bcc.n	7e8a <isr+0x656>
    7e88:	e192      	b.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
			node_rx = packet_rx_reserve_get(4);
    7e8a:	2004      	movs	r0, #4
    7e8c:	f7fd fe0c 	bl	5aa8 <packet_rx_reserve_get>
    7e90:	900b      	str	r0, [sp, #44]	; 0x2c
		if (node_rx == 0) {
    7e92:	2800      	cmp	r0, #0
    7e94:	d100      	bne.n	7e98 <isr+0x664>
    7e96:	e1fd      	b.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		_radio.state = STATE_STOP;
    7e98:	2304      	movs	r3, #4
    7e9a:	7423      	strb	r3, [r4, #16]
		conn = _radio.scanner.conn;
    7e9c:	0023      	movs	r3, r4
		_radio.scanner.conn = NULL;
    7e9e:	2200      	movs	r2, #0
		conn = _radio.scanner.conn;
    7ea0:	33fc      	adds	r3, #252	; 0xfc
    7ea2:	681d      	ldr	r5, [r3, #0]
		_radio.scanner.conn = NULL;
    7ea4:	601a      	str	r2, [r3, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7ea6:	f002 fbd7 	bl	a658 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    7eaa:	220f      	movs	r2, #15
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    7eac:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    7eae:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7eb0:	0006      	movs	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    7eb2:	4393      	bics	r3, r2
			pdu_adv_tx->chan_sel = 1;
    7eb4:	3216      	adds	r2, #22
    7eb6:	4313      	orrs	r3, r2
    7eb8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    7eba:	7a3b      	ldrb	r3, [r7, #8]
    7ebc:	7802      	ldrb	r2, [r0, #0]
    7ebe:	065b      	lsls	r3, r3, #25
    7ec0:	0fdb      	lsrs	r3, r3, #31
    7ec2:	400a      	ands	r2, r1
    7ec4:	01db      	lsls	r3, r3, #7
    7ec6:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    7ec8:	2222      	movs	r2, #34	; 0x22
    7eca:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7ecc:	0022      	movs	r2, r4
    7ece:	3140      	adds	r1, #64	; 0x40
    7ed0:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7ed2:	0021      	movs	r1, r4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7ed4:	32dd      	adds	r2, #221	; 0xdd
    7ed6:	7812      	ldrb	r2, [r2, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7ed8:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7eda:	09d2      	lsrs	r2, r2, #7
    7edc:	0192      	lsls	r2, r2, #6
    7ede:	4313      	orrs	r3, r2
    7ee0:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7ee2:	2206      	movs	r2, #6
    7ee4:	3002      	adds	r0, #2
    7ee6:	f7f9 fa7b 	bl	13e0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    7eea:	0033      	movs	r3, r6
    7eec:	0039      	movs	r1, r7
    7eee:	3308      	adds	r3, #8
    7ef0:	0018      	movs	r0, r3
    7ef2:	2206      	movs	r2, #6
    7ef4:	310a      	adds	r1, #10
    7ef6:	930e      	str	r3, [sp, #56]	; 0x38
    7ef8:	f7f9 fa72 	bl	13e0 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
    7efc:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.
    7efe:	0030      	movs	r0, r6
		       access_addr[0], &conn->access_addr[0], 4);
    7f00:	3110      	adds	r1, #16
		memcpy(&pdu_adv_tx->connect_ind.
    7f02:	2204      	movs	r2, #4
    7f04:	300e      	adds	r0, #14
    7f06:	f7f9 fa6b 	bl	13e0 <memcpy>
		       &conn->crc_init[0], 3);
    7f0a:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    7f0c:	0030      	movs	r0, r6
		       &conn->crc_init[0], 3);
    7f0e:	3114      	adds	r1, #20
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    7f10:	2203      	movs	r2, #3
    7f12:	3012      	adds	r0, #18
    7f14:	f7f9 fa64 	bl	13e0 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    7f18:	2301      	movs	r3, #1
    7f1a:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    7f1c:	0023      	movs	r3, r4
    7f1e:	33f0      	adds	r3, #240	; 0xf0
    7f20:	881b      	ldrh	r3, [r3, #0]
		conn_interval_us =
    7f22:	4a8e      	ldr	r2, [pc, #568]	; (815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>)
    7f24:	435a      	muls	r2, r3
    7f26:	920f      	str	r2, [sp, #60]	; 0x3c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7f28:	f002 fd04 	bl	a934 <radio_tmr_end_get>
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    7f2c:	4b8c      	ldr	r3, [pc, #560]	; (8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>)
		if (!_radio.remainder_anchor ||
    7f2e:	68a2      	ldr	r2, [r4, #8]
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    7f30:	18c3      	adds	r3, r0, r3
		if (!_radio.remainder_anchor ||
    7f32:	2a00      	cmp	r2, #0
    7f34:	dd02      	ble.n	7f3c <isr+0x708>
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7f36:	23db      	movs	r3, #219	; 0xdb
    7f38:	00db      	lsls	r3, r3, #3
    7f3a:	18c3      	adds	r3, r0, r3
		if (_radio.scanner.win_offset_us == 0) {
    7f3c:	4a89      	ldr	r2, [pc, #548]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
    7f3e:	32fc      	adds	r2, #252	; 0xfc
    7f40:	6854      	ldr	r4, [r2, #4]
    7f42:	2c00      	cmp	r4, #0
    7f44:	d000      	beq.n	7f48 <isr+0x714>
    7f46:	e190      	b.n	826a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26a>
			pdu_adv_tx->connect_ind.win_offset = 0;
    7f48:	75b4      	strb	r4, [r6, #22]
    7f4a:	75f4      	strb	r4, [r6, #23]
    7f4c:	001c      	movs	r4, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    7f4e:	2100      	movs	r1, #0
    7f50:	0008      	movs	r0, r1
    7f52:	f002 fb21 	bl	a598 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7f56:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    7f58:	1a24      	subs	r4, r4, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7f5a:	0008      	movs	r0, r1
    7f5c:	f002 fb1e 	bl	a59c <radio_tx_chain_delay_get>
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7f60:	0029      	movs	r1, r5
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7f62:	1a24      	subs	r4, r4, r0
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7f64:	0030      	movs	r0, r6
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    7f66:	341e      	adds	r4, #30
		pdu_adv_tx->connect_ind.interval =
    7f68:	4b7f      	ldr	r3, [pc, #508]	; (8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>)
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    7f6a:	9410      	str	r4, [sp, #64]	; 0x40
		pdu_adv_tx->connect_ind.interval =
    7f6c:	781b      	ldrb	r3, [r3, #0]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7f6e:	2205      	movs	r2, #5
		pdu_adv_tx->connect_ind.interval =
    7f70:	7633      	strb	r3, [r6, #24]
    7f72:	4b7d      	ldr	r3, [pc, #500]	; (8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>)
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7f74:	3117      	adds	r1, #23
		pdu_adv_tx->connect_ind.interval =
    7f76:	785b      	ldrb	r3, [r3, #1]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7f78:	301e      	adds	r0, #30
		pdu_adv_tx->connect_ind.interval =
    7f7a:	7673      	strb	r3, [r6, #25]
		pdu_adv_tx->connect_ind.latency =
    7f7c:	4b7b      	ldr	r3, [pc, #492]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
			_radio.scanner.conn_interval;
    7f7e:	4c79      	ldr	r4, [pc, #484]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
		pdu_adv_tx->connect_ind.latency =
    7f80:	781b      	ldrb	r3, [r3, #0]
    7f82:	76b3      	strb	r3, [r6, #26]
    7f84:	4b79      	ldr	r3, [pc, #484]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
    7f86:	785b      	ldrb	r3, [r3, #1]
    7f88:	76f3      	strb	r3, [r6, #27]
		pdu_adv_tx->connect_ind.timeout =
    7f8a:	4b79      	ldr	r3, [pc, #484]	; (8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>)
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	7733      	strb	r3, [r6, #28]
    7f90:	4b77      	ldr	r3, [pc, #476]	; (8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>)
    7f92:	785b      	ldrb	r3, [r3, #1]
    7f94:	7773      	strb	r3, [r6, #29]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7f96:	f7f9 fa23 	bl	13e0 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    7f9a:	211f      	movs	r1, #31
    7f9c:	1d33      	adds	r3, r6, #4
    7f9e:	9311      	str	r3, [sp, #68]	; 0x44
    7fa0:	1d32      	adds	r2, r6, #4
    7fa2:	7fab      	ldrb	r3, [r5, #30]
    7fa4:	7fd2      	ldrb	r2, [r2, #31]
    7fa6:	400b      	ands	r3, r1
    7fa8:	438a      	bics	r2, r1
    7faa:	431a      	orrs	r2, r3
    7fac:	1d33      	adds	r3, r6, #4
    7fae:	77da      	strb	r2, [r3, #31]
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    7fb0:	0023      	movs	r3, r4
    7fb2:	33ff      	adds	r3, #255	; 0xff
    7fb4:	7f5a      	ldrb	r2, [r3, #29]
    7fb6:	1d33      	adds	r3, r6, #4
    7fb8:	7fdb      	ldrb	r3, [r3, #31]
    7fba:	0152      	lsls	r2, r2, #5
    7fbc:	400b      	ands	r3, r1
    7fbe:	4313      	orrs	r3, r2
    7fc0:	1d32      	adds	r2, r6, #4
    7fc2:	77d3      	strb	r3, [r2, #31]
		radio_switch_complete_and_disable();
    7fc4:	f002 fb5c 	bl	a680 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    7fc8:	0030      	movs	r0, r6
    7fca:	f002 fadd 	bl	a588 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    7fce:	f002 fb09 	bl	a5e4 <radio_is_ready>
    7fd2:	900c      	str	r0, [sp, #48]	; 0x30
    7fd4:	2800      	cmp	r0, #0
    7fd6:	d000      	beq.n	7fda <isr+0x7a6>
    7fd8:	e47d      	b.n	78d6 <isr+0xa2>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7fda:	2282      	movs	r2, #130	; 0x82
    7fdc:	34fc      	adds	r4, #252	; 0xfc
    7fde:	68a1      	ldr	r1, [r4, #8]
    7fe0:	0052      	lsls	r2, r2, #1
    7fe2:	0028      	movs	r0, r5
    7fe4:	f7fc f832 	bl	404c <mem_index_get>
		node_rx->hdr.handle = conn->handle;
    7fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7fea:	8428      	strh	r0, [r5, #32]
		radio_le_conn_cmplt->status = 0x00;
    7fec:	4669      	mov	r1, sp
		node_rx->hdr.handle = conn->handle;
    7fee:	80d8      	strh	r0, [r3, #6]
		radio_le_conn_cmplt->status = 0x00;
    7ff0:	2030      	movs	r0, #48	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7ff2:	2206      	movs	r2, #6
		radio_le_conn_cmplt->status = 0x00;
    7ff4:	1809      	adds	r1, r1, r0
    7ff6:	7809      	ldrb	r1, [r1, #0]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7ff8:	711a      	strb	r2, [r3, #4]
		radio_le_conn_cmplt->status = 0x00;
    7ffa:	72d9      	strb	r1, [r3, #11]
    7ffc:	001c      	movs	r4, r3
		radio_le_conn_cmplt->role = 0x00;
    7ffe:	466b      	mov	r3, sp
    8000:	181b      	adds	r3, r3, r0
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8002:	0020      	movs	r0, r4
		radio_le_conn_cmplt->role = 0x00;
    8004:	781b      	ldrb	r3, [r3, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8006:	990e      	ldr	r1, [sp, #56]	; 0x38
		radio_le_conn_cmplt->role = 0x00;
    8008:	7323      	strb	r3, [r4, #12]
				pdu_adv_tx->rx_addr;
    800a:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    800c:	300e      	adds	r0, #14
				pdu_adv_tx->rx_addr;
    800e:	09db      	lsrs	r3, r3, #7
			radio_le_conn_cmplt->peer_addr_type =
    8010:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8012:	f7f9 f9e5 	bl	13e0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    8016:	4b54      	ldr	r3, [pc, #336]	; (8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>)
    8018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    801a:	781b      	ldrb	r3, [r3, #0]
    801c:	7513      	strb	r3, [r2, #20]
    801e:	4b52      	ldr	r3, [pc, #328]	; (8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>)
    8020:	785b      	ldrb	r3, [r3, #1]
    8022:	7553      	strb	r3, [r2, #21]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    8024:	4b51      	ldr	r3, [pc, #324]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
    8026:	781b      	ldrb	r3, [r3, #0]
    8028:	7593      	strb	r3, [r2, #22]
    802a:	4b50      	ldr	r3, [pc, #320]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
    802c:	785b      	ldrb	r3, [r3, #1]
    802e:	75d3      	strb	r3, [r2, #23]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    8030:	4b4f      	ldr	r3, [pc, #316]	; (8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>)
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	7613      	strb	r3, [r2, #24]
    8036:	4b4e      	ldr	r3, [pc, #312]	; (8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>)
    8038:	785b      	ldrb	r3, [r3, #1]
    803a:	7653      	strb	r3, [r2, #25]
			pdu_adv_tx->connect_ind.sca;
    803c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    803e:	7fdb      	ldrb	r3, [r3, #31]
    8040:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    8042:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    8044:	8c28      	ldrh	r0, [r5, #32]
    8046:	f7fd ff99 	bl	5f7c <rx_fc_lock>
		packet_rx_enqueue();
    804a:	f7fe f8af 	bl	61ac <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    804e:	2003      	movs	r0, #3
    8050:	f7fd fd2a 	bl	5aa8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    8054:	2800      	cmp	r0, #0
    8056:	d100      	bne.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
    8058:	e43d      	b.n	78d6 <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    805a:	8c2b      	ldrh	r3, [r5, #32]
			if (pdu_adv_rx->chan_sel) {
    805c:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    805e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8060:	230a      	movs	r3, #10
    8062:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    8064:	7a3b      	ldrb	r3, [r7, #8]
    8066:	4013      	ands	r3, r2
    8068:	d00e      	beq.n	8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>
					((u16_t)conn->access_addr[1] << 8) |
    806a:	7c6b      	ldrb	r3, [r5, #17]
					conn->access_addr[0];
    806c:	7c2a      	ldrb	r2, [r5, #16]
					((u16_t)conn->access_addr[1] << 8) |
    806e:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[3] << 8) |
    8070:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    8072:	4313      	orrs	r3, r2
					 conn->access_addr[2];
    8074:	7caa      	ldrb	r2, [r5, #18]
					((u16_t)conn->access_addr[3] << 8) |
    8076:	0209      	lsls	r1, r1, #8
				u16_t aa_ms =
    8078:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    807a:	2140      	movs	r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    807c:	4053      	eors	r3, r2
    807e:	83eb      	strh	r3, [r5, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8080:	2301      	movs	r3, #1
				conn->data_chan_sel = 1;
    8082:	7f6c      	ldrb	r4, [r5, #29]
    8084:	4321      	orrs	r1, r4
    8086:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8088:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    808a:	f7fe f88f 	bl	61ac <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    808e:	4b35      	ldr	r3, [pc, #212]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8090:	2100      	movs	r1, #0
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8092:	001a      	movs	r2, r3
    8094:	32fc      	adds	r2, #252	; 0xfc
    8096:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8098:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    809a:	33f8      	adds	r3, #248	; 0xf8
    809c:	681b      	ldr	r3, [r3, #0]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    809e:	6068      	str	r0, [r5, #4]
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    80a0:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    80a2:	60a9      	str	r1, [r5, #8]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    80a4:	60eb      	str	r3, [r5, #12]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    80a6:	900b      	str	r0, [sp, #44]	; 0x2c
    80a8:	4290      	cmp	r0, r2
    80aa:	d200      	bcs.n	80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
    80ac:	920b      	str	r2, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    80ae:	2100      	movs	r1, #0
    80b0:	4b30      	ldr	r3, [pc, #192]	; (8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>)
    80b2:	2206      	movs	r2, #6
    80b4:	9300      	str	r3, [sp, #0]
    80b6:	0008      	movs	r0, r1
    80b8:	4b2f      	ldr	r3, [pc, #188]	; (8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>)
    80ba:	f7fc fe51 	bl	4d60 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    80be:	21c7      	movs	r1, #199	; 0xc7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    80c0:	2400      	movs	r4, #0
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    80c2:	00c9      	lsls	r1, r1, #3
    80c4:	f7fe fb78 	bl	67b8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    80c8:	0023      	movs	r3, r4
    80ca:	2204      	movs	r2, #4
    80cc:	0021      	movs	r1, r4
    80ce:	9400      	str	r4, [sp, #0]
    80d0:	0020      	movs	r0, r4
    80d2:	f7fc fe45 	bl	4d60 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    80d6:	4a20      	ldr	r2, [pc, #128]	; (8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>)
    80d8:	2300      	movs	r3, #0
    80da:	980f      	ldr	r0, [sp, #60]	; 0x3c
    80dc:	0021      	movs	r1, r4
    80de:	f7f8 f95b 	bl	398 <__aeabi_lmul>
				     (_radio.ticks_anchor - ticks_slot_offset),
    80e2:	4b20      	ldr	r3, [pc, #128]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    80e4:	900c      	str	r0, [sp, #48]	; 0x30
    80e6:	910d      	str	r1, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    80e8:	685f      	ldr	r7, [r3, #4]
    80ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    80ec:	8c2e      	ldrh	r6, [r5, #32]
    80ee:	1aff      	subs	r7, r7, r3
		ticker_status =
    80f0:	4b22      	ldr	r3, [pc, #136]	; (817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>)
    80f2:	9506      	str	r5, [sp, #24]
    80f4:	9308      	str	r3, [sp, #32]
    80f6:	4b22      	ldr	r3, [pc, #136]	; (8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    80f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_status =
    80fa:	9307      	str	r3, [sp, #28]
    80fc:	4b21      	ldr	r3, [pc, #132]	; (8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    80fe:	3607      	adds	r6, #7
		ticker_status =
    8100:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8102:	68eb      	ldr	r3, [r5, #12]
		ticker_status =
    8104:	9403      	str	r4, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8106:	18d5      	adds	r5, r2, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    8108:	4a12      	ldr	r2, [pc, #72]	; (8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>)
    810a:	2307      	movs	r3, #7
		ticker_status =
    810c:	9504      	str	r5, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    810e:	f7f8 f923 	bl	358 <__aeabi_uldivmod>
    8112:	0010      	movs	r0, r2
    8114:	22fa      	movs	r2, #250	; 0xfa
    8116:	0019      	movs	r1, r3
    8118:	0092      	lsls	r2, r2, #2
    811a:	2300      	movs	r3, #0
    811c:	f7f8 f91c 	bl	358 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8120:	4a0c      	ldr	r2, [pc, #48]	; (8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8122:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8124:	2307      	movs	r3, #7
    8126:	980c      	ldr	r0, [sp, #48]	; 0x30
    8128:	990d      	ldr	r1, [sp, #52]	; 0x34
    812a:	f7f8 f915 	bl	358 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    812e:	4a0a      	ldr	r2, [pc, #40]	; (8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8130:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8132:	2300      	movs	r3, #0
    8134:	9810      	ldr	r0, [sp, #64]	; 0x40
    8136:	0021      	movs	r1, r4
    8138:	f7f8 f92e 	bl	398 <__aeabi_lmul>
    813c:	2307      	movs	r3, #7
    813e:	4a05      	ldr	r2, [pc, #20]	; (8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>)
    8140:	f7f8 f90a 	bl	358 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8144:	0200      	lsls	r0, r0, #8
    8146:	0a00      	lsrs	r0, r0, #8
		ticker_status =
    8148:	b2f6      	uxtb	r6, r6
    814a:	9000      	str	r0, [sp, #0]
    814c:	003b      	movs	r3, r7
    814e:	e619      	b.n	7d84 <isr+0x550>
    8150:	00000216 	.word	0x00000216
    8154:	1afd498d 	.word	0x1afd498d
    8158:	3b9aca00 	.word	0x3b9aca00
    815c:	000004e2 	.word	0x000004e2
    8160:	000006ba 	.word	0x000006ba
    8164:	20000284 	.word	0x20000284
    8168:	20000374 	.word	0x20000374
    816c:	20000376 	.word	0x20000376
    8170:	20000378 	.word	0x20000378
    8174:	00000637 	.word	0x00000637
    8178:	000067b9 	.word	0x000067b9
    817c:	0000064f 	.word	0x0000064f
    8180:	00006809 	.word	0x00006809
    8184:	000075a5 	.word	0x000075a5
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    8188:	0023      	movs	r3, r4
    818a:	33dd      	adds	r3, #221	; 0xdd
    818c:	781a      	ldrb	r2, [r3, #0]
    818e:	7a3b      	ldrb	r3, [r7, #8]
    8190:	0652      	lsls	r2, r2, #25
    8192:	065b      	lsls	r3, r3, #25
    8194:	0fd2      	lsrs	r2, r2, #31
    8196:	0fdb      	lsrs	r3, r3, #31
    8198:	429a      	cmp	r2, r3
    819a:	d109      	bne.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
		(memcmp(&_radio.scanner.adv_addr[0],
    819c:	0020      	movs	r0, r4
    819e:	0039      	movs	r1, r7
    81a0:	30e4      	adds	r0, #228	; 0xe4
    81a2:	2206      	movs	r2, #6
    81a4:	310a      	adds	r1, #10
    81a6:	f7f9 f8f7 	bl	1398 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    81aa:	2800      	cmp	r0, #0
    81ac:	d100      	bne.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    81ae:	e650      	b.n	7e52 <isr+0x61e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    81b0:	220f      	movs	r2, #15
    81b2:	7a3b      	ldrb	r3, [r7, #8]
    81b4:	4013      	ands	r3, r2
    81b6:	d001      	beq.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
    81b8:	2b06      	cmp	r3, #6
    81ba:	d177      	bne.n	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
		 (_radio.scanner.type != 0) &&
    81bc:	4ac8      	ldr	r2, [pc, #800]	; (84e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e0>)
    81be:	4cc9      	ldr	r4, [pc, #804]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    81c0:	7812      	ldrb	r2, [r2, #0]
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    81c2:	0712      	lsls	r2, r2, #28
    81c4:	d561      	bpl.n	828a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28a>
		 (_radio.scanner.conn == 0)) {
    81c6:	0022      	movs	r2, r4
    81c8:	32fc      	adds	r2, #252	; 0xfc
		 (_radio.scanner.type != 0) &&
    81ca:	6812      	ldr	r2, [r2, #0]
    81cc:	2a00      	cmp	r2, #0
    81ce:	d15c      	bne.n	828a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28a>
		err = isr_rx_scan_report(rssi_ready,
    81d0:	0028      	movs	r0, r5
    81d2:	f7fe fb1f 	bl	6814 <isr_rx_scan_report.isra.37>
    81d6:	1e06      	subs	r6, r0, #0
		if (err) {
    81d8:	d15c      	bne.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    81da:	f002 fa3d 	bl	a658 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    81de:	220f      	movs	r2, #15
    81e0:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    81e2:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    81e4:	4393      	bics	r3, r2
    81e6:	001a      	movs	r2, r3
    81e8:	2303      	movs	r3, #3
    81ea:	4313      	orrs	r3, r2
    81ec:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    81ee:	7a3b      	ldrb	r3, [r7, #8]
    81f0:	7802      	ldrb	r2, [r0, #0]
    81f2:	065b      	lsls	r3, r3, #25
    81f4:	0fdb      	lsrs	r3, r3, #31
    81f6:	400a      	ands	r2, r1
    81f8:	01db      	lsls	r3, r3, #7
    81fa:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    81fc:	220c      	movs	r2, #12
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    81fe:	3140      	adds	r1, #64	; 0x40
    8200:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8202:	0021      	movs	r1, r4
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8204:	0005      	movs	r5, r0
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    8206:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8208:	4ab5      	ldr	r2, [pc, #724]	; (84e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e0>)
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    820a:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    820c:	7812      	ldrb	r2, [r2, #0]
    820e:	09d2      	lsrs	r2, r2, #7
    8210:	0192      	lsls	r2, r2, #6
    8212:	4313      	orrs	r3, r2
    8214:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8216:	2206      	movs	r2, #6
    8218:	3002      	adds	r0, #2
    821a:	f7f9 f8e1 	bl	13e0 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    821e:	0039      	movs	r1, r7
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    8220:	0028      	movs	r0, r5
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    8222:	310a      	adds	r1, #10
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    8224:	2206      	movs	r2, #6
    8226:	3008      	adds	r0, #8
    8228:	f7f9 f8da 	bl	13e0 <memcpy>
		_radio.scanner.state = 1;
    822c:	0021      	movs	r1, r4
    822e:	2202      	movs	r2, #2
    8230:	31dc      	adds	r1, #220	; 0xdc
    8232:	780b      	ldrb	r3, [r1, #0]
		radio_tmr_tifs_set(RADIO_TIFS);
    8234:	2096      	movs	r0, #150	; 0x96
		_radio.scanner.state = 1;
    8236:	4313      	orrs	r3, r2
    8238:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    823a:	7422      	strb	r2, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    823c:	f002 faa2 	bl	a784 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8240:	0030      	movs	r0, r6
    8242:	f002 fa0d 	bl	a660 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    8246:	0028      	movs	r0, r5
    8248:	f002 f99e 	bl	a588 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    824c:	f002 fb5c 	bl	a908 <radio_tmr_end_capture>
    8250:	f7ff fbdd 	bl	7a0e <isr+0x1da>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8254:	2b01      	cmp	r3, #1
    8256:	d1af      	bne.n	81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    8258:	2100      	movs	r1, #0
    825a:	0030      	movs	r0, r6
    825c:	f7fd ff2e 	bl	60bc <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8260:	2800      	cmp	r0, #0
    8262:	d0a5      	beq.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    8264:	e5fa      	b.n	7e5c <isr+0x628>
				conn_space_us += conn_interval_us;
    8266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8268:	18a4      	adds	r4, r4, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    826a:	2c00      	cmp	r4, #0
    826c:	dbfb      	blt.n	8266 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x266>
    826e:	429c      	cmp	r4, r3
    8270:	d3f9      	bcc.n	8266 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x266>
				(conn_space_us - conn_offset_us) / 1250;
    8272:	1ae0      	subs	r0, r4, r3
    8274:	499c      	ldr	r1, [pc, #624]	; (84e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e8>)
    8276:	f7f7 ffa7 	bl	1c8 <__aeabi_uidiv>
			pdu_adv_tx->connect_ind.win_size++;
    827a:	7d73      	ldrb	r3, [r6, #21]
			pdu_adv_tx->connect_ind.win_offset =
    827c:	b280      	uxth	r0, r0
    827e:	75b0      	strb	r0, [r6, #22]
			pdu_adv_tx->connect_ind.win_size++;
    8280:	3301      	adds	r3, #1
			pdu_adv_tx->connect_ind.win_offset =
    8282:	0a00      	lsrs	r0, r0, #8
    8284:	75f0      	strb	r0, [r6, #23]
			pdu_adv_tx->connect_ind.win_size++;
    8286:	7573      	strb	r3, [r6, #21]
    8288:	e661      	b.n	7f4e <isr+0x71a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    828a:	2b00      	cmp	r3, #0
    828c:	d10e      	bne.n	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    828e:	7a7b      	ldrb	r3, [r7, #9]
    8290:	2b00      	cmp	r3, #0
    8292:	d13b      	bne.n	830c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30c>
			_radio.state = STATE_CLOSE;
    8294:	2303      	movs	r3, #3
    8296:	4c93      	ldr	r4, [pc, #588]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    8298:	7423      	strb	r3, [r4, #16]
			radio_disable();
    829a:	f002 f991 	bl	a5c0 <radio_disable>
			_radio.scanner.state = 0;
    829e:	2202      	movs	r2, #2
    82a0:	34dc      	adds	r4, #220	; 0xdc
    82a2:	7823      	ldrb	r3, [r4, #0]
    82a4:	4393      	bics	r3, r2
    82a6:	7023      	strb	r3, [r4, #0]
    82a8:	f7ff fb44 	bl	7934 <isr+0x100>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    82ac:	2b01      	cmp	r3, #1
    82ae:	d00e      	beq.n	82ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ce>
					&dir_report))) ||
    82b0:	230b      	movs	r3, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    82b2:	7a3a      	ldrb	r2, [r7, #8]
					&dir_report))) ||
    82b4:	4013      	ands	r3, r2
    82b6:	2b02      	cmp	r3, #2
    82b8:	d0e9      	beq.n	828e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    82ba:	230f      	movs	r3, #15
    82bc:	401a      	ands	r2, r3
    82be:	4b89      	ldr	r3, [pc, #548]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    82c0:	2a07      	cmp	r2, #7
    82c2:	d10b      	bne.n	82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    82c4:	33dd      	adds	r3, #221	; 0xdd
    82c6:	781b      	ldrb	r3, [r3, #0]
    82c8:	4213      	tst	r3, r2
    82ca:	d1e0      	bne.n	828e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28e>
    82cc:	e7e2      	b.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    82ce:	a913      	add	r1, sp, #76	; 0x4c
    82d0:	0030      	movs	r0, r6
    82d2:	f7fd fef3 	bl	60bc <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    82d6:	2800      	cmp	r0, #0
    82d8:	d1d9      	bne.n	828e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28e>
    82da:	e7e9      	b.n	82b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b0>
		   (_radio.scanner.phy)) ||
    82dc:	2a04      	cmp	r2, #4
    82de:	d1d9      	bne.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		   (_radio.scanner.state != 0) &&
    82e0:	33dc      	adds	r3, #220	; 0xdc
    82e2:	781b      	ldrb	r3, [r3, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    82e4:	079b      	lsls	r3, r3, #30
    82e6:	d5d5      	bpl.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    82e8:	f002 f9b6 	bl	a658 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    82ec:	7a3b      	ldrb	r3, [r7, #8]
    82ee:	7802      	ldrb	r2, [r0, #0]
    82f0:	065b      	lsls	r3, r3, #25
    82f2:	09d2      	lsrs	r2, r2, #7
    82f4:	0fdb      	lsrs	r3, r3, #31
    82f6:	429a      	cmp	r2, r3
    82f8:	d1cc      	bne.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		(memcmp(&sreq->scan_req.adv_addr[0],
    82fa:	0039      	movs	r1, r7
    82fc:	3008      	adds	r0, #8
    82fe:	2206      	movs	r2, #6
    8300:	310a      	adds	r1, #10
    8302:	f7f9 f849 	bl	1398 <memcmp>
		   (_radio.scanner.state != 0) &&
    8306:	2800      	cmp	r0, #0
    8308:	d0c1      	beq.n	828e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28e>
    830a:	e7c3      	b.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    830c:	4b75      	ldr	r3, [pc, #468]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    830e:	33fc      	adds	r3, #252	; 0xfc
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	2b00      	cmp	r3, #0
    8314:	d1be      	bne.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
		err = isr_rx_scan_report(rssi_ready,
    8316:	0028      	movs	r0, r5
    8318:	f7fe fa7c 	bl	6814 <isr_rx_scan_report.isra.37>
    831c:	e7ba      	b.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
	_radio.packet_counter++;
    831e:	0022      	movs	r2, r4
    8320:	32ff      	adds	r2, #255	; 0xff
    8322:	7d53      	ldrb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8324:	0020      	movs	r0, r4
	_radio.packet_counter++;
    8326:	3301      	adds	r3, #1
    8328:	7553      	strb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    832a:	2336      	movs	r3, #54	; 0x36
    832c:	33ff      	adds	r3, #255	; 0xff
    832e:	5ce3      	ldrb	r3, [r4, r3]
    8330:	30fc      	adds	r0, #252	; 0xfc
    8332:	6b41      	ldr	r1, [r0, #52]	; 0x34
    8334:	009b      	lsls	r3, r3, #2
    8336:	585f      	ldr	r7, [r3, r1]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8338:	2101      	movs	r1, #1
	if (crc_ok) {
    833a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    833c:	7139      	strb	r1, [r7, #4]
	if (crc_ok) {
    833e:	2b00      	cmp	r3, #0
    8340:	d100      	bne.n	8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>
    8342:	e3bc      	b.n	8abe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xabe>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8344:	6943      	ldr	r3, [r0, #20]
    8346:	7a3d      	ldrb	r5, [r7, #8]
    8348:	0018      	movs	r0, r3
    834a:	30a8      	adds	r0, #168	; 0xa8
    834c:	7806      	ldrb	r6, [r0, #0]
    834e:	076d      	lsls	r5, r5, #29
    8350:	07f2      	lsls	r2, r6, #31
    8352:	0fd2      	lsrs	r2, r2, #31
    8354:	0fed      	lsrs	r5, r5, #31
    8356:	4295      	cmp	r5, r2
    8358:	d100      	bne.n	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    835a:	e0ca      	b.n	84f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f2>
		_radio.conn_curr->sn++;
    835c:	1852      	adds	r2, r2, r1
    835e:	400a      	ands	r2, r1
    8360:	0015      	movs	r5, r2
    8362:	0032      	movs	r2, r6
    8364:	438a      	bics	r2, r1
    8366:	432a      	orrs	r2, r5
    8368:	7002      	strb	r2, [r0, #0]
		if (_radio.role == ROLE_SLAVE) {
    836a:	7be2      	ldrb	r2, [r4, #15]
    836c:	2a03      	cmp	r2, #3
    836e:	d104      	bne.n	837a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37a>
			_radio.conn_curr->slave.latency_enabled = 1;
    8370:	001a      	movs	r2, r3
    8372:	3238      	adds	r2, #56	; 0x38
    8374:	7814      	ldrb	r4, [r2, #0]
    8376:	4321      	orrs	r1, r4
    8378:	7011      	strb	r1, [r2, #0]
		if (_radio.conn_curr->empty == 0) {
    837a:	7802      	ldrb	r2, [r0, #0]
    837c:	b251      	sxtb	r1, r2
    837e:	2900      	cmp	r1, #0
    8380:	da00      	bge.n	8384 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x384>
    8382:	e0b3      	b.n	84ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ec>
			node_tx = _radio.conn_curr->pkt_tx_head;
    8384:	0019      	movs	r1, r3
    8386:	31ec      	adds	r1, #236	; 0xec
    8388:	6809      	ldr	r1, [r1, #0]
    838a:	910b      	str	r1, [sp, #44]	; 0x2c
			pdu_data_tx = (void *)(node_tx->pdu_data +
    838c:	1d0d      	adds	r5, r1, #4
				_radio.conn_curr->packet_tx_head_offset);
    838e:	0019      	movs	r1, r3
    8390:	31ff      	adds	r1, #255	; 0xff
    8392:	7889      	ldrb	r1, [r1, #2]
			pdu_data_tx = (void *)(node_tx->pdu_data +
    8394:	1869      	adds	r1, r5, r1
    8396:	910c      	str	r1, [sp, #48]	; 0x30
			pdu_data_tx_len = pdu_data_tx->len;
    8398:	784c      	ldrb	r4, [r1, #1]
			if (pdu_data_tx_len != 0) {
    839a:	2c00      	cmp	r4, #0
    839c:	d101      	bne.n	83a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a2>
	u8_t terminate = 0;
    839e:	2600      	movs	r6, #0
    83a0:	e03a      	b.n	8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
				if (_radio.conn_curr->enc_tx) {
    83a2:	0692      	lsls	r2, r2, #26
    83a4:	d51a      	bpl.n	83dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3dc>
					_radio.conn_curr->ccm_tx.counter++;
    83a6:	001a      	movs	r2, r3
    83a8:	0019      	movs	r1, r3
    83aa:	32dc      	adds	r2, #220	; 0xdc
    83ac:	31da      	adds	r1, #218	; 0xda
    83ae:	8812      	ldrh	r2, [r2, #0]
    83b0:	8808      	ldrh	r0, [r1, #0]
    83b2:	0412      	lsls	r2, r2, #16
    83b4:	4302      	orrs	r2, r0
    83b6:	0015      	movs	r5, r2
    83b8:	001a      	movs	r2, r3
    83ba:	33e0      	adds	r3, #224	; 0xe0
    83bc:	881b      	ldrh	r3, [r3, #0]
    83be:	32de      	adds	r2, #222	; 0xde
    83c0:	8812      	ldrh	r2, [r2, #0]
    83c2:	041b      	lsls	r3, r3, #16
    83c4:	4313      	orrs	r3, r2
    83c6:	001e      	movs	r6, r3
    83c8:	2201      	movs	r2, #1
    83ca:	2300      	movs	r3, #0
    83cc:	18ad      	adds	r5, r5, r2
    83ce:	415e      	adcs	r6, r3
    83d0:	0c2a      	lsrs	r2, r5, #16
    83d2:	0c33      	lsrs	r3, r6, #16
    83d4:	800d      	strh	r5, [r1, #0]
    83d6:	804a      	strh	r2, [r1, #2]
    83d8:	808e      	strh	r6, [r1, #4]
    83da:	80cb      	strh	r3, [r1, #6]
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    83dc:	2203      	movs	r2, #3
    83de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	4013      	ands	r3, r2
    83e4:	4293      	cmp	r3, r2
    83e6:	d1da      	bne.n	839e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39e>
	switch (pdu_data_tx->llctrl.opcode) {
    83e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    83ea:	78d2      	ldrb	r2, [r2, #3]
    83ec:	2a02      	cmp	r2, #2
    83ee:	d1d6      	bne.n	839e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39e>
		_radio.state = STATE_CLOSE;
    83f0:	4e3c      	ldr	r6, [pc, #240]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    83f2:	7433      	strb	r3, [r6, #16]
		radio_disable();
    83f4:	f002 f8e4 	bl	a5c0 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    83f8:	f002 f8f4 	bl	a5e4 <radio_is_ready>
    83fc:	2800      	cmp	r0, #0
    83fe:	d001      	beq.n	8404 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x404>
    8400:	f7ff fa69 	bl	78d6 <isr+0xa2>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    8404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		terminate_ind_rx_enqueue(_radio.conn_curr,
    8406:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    8408:	7919      	ldrb	r1, [r3, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    840a:	6970      	ldr	r0, [r6, #20]
    840c:	2913      	cmp	r1, #19
    840e:	d100      	bne.n	8412 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x412>
    8410:	3103      	adds	r1, #3
    8412:	f7fd fea9 	bl	6168 <terminate_ind_rx_enqueue>
		terminate = 1;
    8416:	2601      	movs	r6, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8418:	4b32      	ldr	r3, [pc, #200]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    841a:	33fc      	adds	r3, #252	; 0xfc
    841c:	695b      	ldr	r3, [r3, #20]
    841e:	001a      	movs	r2, r3
    8420:	32ff      	adds	r2, #255	; 0xff
    8422:	7891      	ldrb	r1, [r2, #2]
    8424:	1864      	adds	r4, r4, r1
			if (_radio.conn_curr->packet_tx_head_offset ==
    8426:	7851      	ldrb	r1, [r2, #1]
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8428:	b2e4      	uxtb	r4, r4
    842a:	7094      	strb	r4, [r2, #2]
			if (_radio.conn_curr->packet_tx_head_offset ==
    842c:	42a1      	cmp	r1, r4
    842e:	d11b      	bne.n	8468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x468>
	conn->packet_tx_head_len = 0;
    8430:	2100      	movs	r1, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8432:	0018      	movs	r0, r3
    8434:	001c      	movs	r4, r3
	conn->packet_tx_head_len = 0;
    8436:	7051      	strb	r1, [r2, #1]
	conn->packet_tx_head_offset = 0;
    8438:	7091      	strb	r1, [r2, #2]
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    843a:	30ec      	adds	r0, #236	; 0xec
    843c:	34f0      	adds	r4, #240	; 0xf0
    843e:	6802      	ldr	r2, [r0, #0]
    8440:	6825      	ldr	r5, [r4, #0]
    8442:	42aa      	cmp	r2, r5
    8444:	d115      	bne.n	8472 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x472>
		if (node_tx) {
    8446:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8448:	428d      	cmp	r5, r1
    844a:	d00d      	beq.n	8468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x468>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    844c:	6815      	ldr	r5, [r2, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    844e:	33f4      	adds	r3, #244	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8450:	6005      	str	r5, [r0, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8452:	6818      	ldr	r0, [r3, #0]
    8454:	4282      	cmp	r2, r0
    8456:	d10a      	bne.n	846e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46e>
				conn->pkt_tx_ctrl = NULL;
    8458:	6021      	str	r1, [r4, #0]
				conn->pkt_tx_ctrl_last = NULL;
    845a:	6019      	str	r1, [r3, #0]
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    845c:	4921      	ldr	r1, [pc, #132]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    845e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8460:	3151      	adds	r1, #81	; 0x51
    8462:	31ff      	adds	r1, #255	; 0xff
    8464:	f7fb fdd9 	bl	401a <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    8468:	2300      	movs	r3, #0
    846a:	930b      	str	r3, [sp, #44]	; 0x2c
    846c:	e008      	b.n	8480 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x480>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    846e:	6025      	str	r5, [r4, #0]
    8470:	e7f4      	b.n	845c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    8472:	33f8      	adds	r3, #248	; 0xf8
    8474:	681c      	ldr	r4, [r3, #0]
    8476:	6811      	ldr	r1, [r2, #0]
    8478:	42a2      	cmp	r2, r4
    847a:	d100      	bne.n	847e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    847c:	6019      	str	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    847e:	6001      	str	r1, [r0, #0]
	if (terminate) {
    8480:	2e00      	cmp	r6, #0
    8482:	d038      	beq.n	84f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f6>
		_radio.conn_curr = NULL;
    8484:	2400      	movs	r4, #0
		connection_release(_radio.conn_curr);
    8486:	4d17      	ldr	r5, [pc, #92]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    8488:	35fc      	adds	r5, #252	; 0xfc
    848a:	6968      	ldr	r0, [r5, #20]
    848c:	f7fe f89e 	bl	65cc <connection_release>
		_radio.conn_curr = NULL;
    8490:	616c      	str	r4, [r5, #20]
	if (!radio_tmr_aa_restore()) {
    8492:	f002 fa2b 	bl	a8ec <radio_tmr_aa_restore>
    8496:	2800      	cmp	r0, #0
    8498:	d103      	bne.n	84a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a2>
		radio_tmr_aa_save(radio_tmr_aa_get());
    849a:	f002 fa19 	bl	a8d0 <radio_tmr_aa_get>
    849e:	f002 fa1f 	bl	a8e0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    84a2:	4d10      	ldr	r5, [pc, #64]	; (84e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e4>)
    84a4:	002b      	movs	r3, r5
    84a6:	33fc      	adds	r3, #252	; 0xfc
    84a8:	695b      	ldr	r3, [r3, #20]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d101      	bne.n	84b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b2>
    84ae:	f7ff fa41 	bl	7934 <isr+0x100>
	if (tx_release) {
    84b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    84b4:	2a00      	cmp	r2, #0
    84b6:	d003      	beq.n	84c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c0>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    84b8:	8c18      	ldrh	r0, [r3, #32]
    84ba:	0011      	movs	r1, r2
    84bc:	f7fe f812 	bl	64e4 <pdu_node_tx_release>
	if (rx_enqueue) {
    84c0:	2c00      	cmp	r4, #0
    84c2:	d101      	bne.n	84c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c8>
    84c4:	f7ff fa36 	bl	7934 <isr+0x100>
		rx_fc_lock(_radio.conn_curr->handle);
    84c8:	35fc      	adds	r5, #252	; 0xfc
    84ca:	696b      	ldr	r3, [r5, #20]
    84cc:	8c18      	ldrh	r0, [r3, #32]
    84ce:	f7fd fd55 	bl	5f7c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    84d2:	696b      	ldr	r3, [r5, #20]
    84d4:	8c1b      	ldrh	r3, [r3, #32]
    84d6:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    84d8:	f7fd fe68 	bl	61ac <packet_rx_enqueue>
    84dc:	f7ff fa2a 	bl	7934 <isr+0x100>
    84e0:	20000361 	.word	0x20000361
    84e4:	20000284 	.word	0x20000284
    84e8:	000004e2 	.word	0x000004e2
			_radio.conn_curr->empty = 0;
    84ec:	237f      	movs	r3, #127	; 0x7f
    84ee:	4013      	ands	r3, r2
    84f0:	7003      	strb	r3, [r0, #0]
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    84f2:	2300      	movs	r3, #0
    84f4:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    84f6:	4e90      	ldr	r6, [pc, #576]	; (8738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x738>)
    84f8:	7a3a      	ldrb	r2, [r7, #8]
    84fa:	0034      	movs	r4, r6
    84fc:	34fc      	adds	r4, #252	; 0xfc
    84fe:	6963      	ldr	r3, [r4, #20]
    8500:	0712      	lsls	r2, r2, #28
    8502:	33a8      	adds	r3, #168	; 0xa8
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	0fd2      	lsrs	r2, r2, #31
    8508:	079b      	lsls	r3, r3, #30
    850a:	0fdb      	lsrs	r3, r3, #31
    850c:	429a      	cmp	r2, r3
    850e:	d041      	beq.n	8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>
	u8_t rx_enqueue = 0;
    8510:	2400      	movs	r4, #0
		_radio.crc_expire = 0;
    8512:	4b89      	ldr	r3, [pc, #548]	; (8738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x738>)
    8514:	2500      	movs	r5, #0
    8516:	001a      	movs	r2, r3
		_radio.conn_curr->supervision_expire = 0;
    8518:	33fc      	adds	r3, #252	; 0xfc
    851a:	695b      	ldr	r3, [r3, #20]
		_radio.crc_expire = 0;
    851c:	32ff      	adds	r2, #255	; 0xff
    851e:	7595      	strb	r5, [r2, #22]
		_radio.conn_curr->supervision_expire = 0;
    8520:	861d      	strh	r5, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8522:	4e85      	ldr	r6, [pc, #532]	; (8738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x738>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8524:	a913      	add	r1, sp, #76	; 0x4c
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8526:	0033      	movs	r3, r6
    8528:	33fc      	adds	r3, #252	; 0xfc
    852a:	6958      	ldr	r0, [r3, #20]
    852c:	0003      	movs	r3, r0
    852e:	33a8      	adds	r3, #168	; 0xa8
    8530:	781b      	ldrb	r3, [r3, #0]
    8532:	09db      	lsrs	r3, r3, #7
    8534:	930c      	str	r3, [sp, #48]	; 0x30
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8536:	f7ff f911 	bl	775c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    853a:	7c33      	ldrb	r3, [r6, #16]
    853c:	2b03      	cmp	r3, #3
    853e:	d014      	beq.n	856a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56a>
    8540:	2303      	movs	r3, #3
    8542:	2d00      	cmp	r5, #0
    8544:	d111      	bne.n	856a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56a>
    8546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8548:	2a00      	cmp	r2, #0
    854a:	d006      	beq.n	855a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55a>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    854c:	7a3a      	ldrb	r2, [r7, #8]
    854e:	06d2      	lsls	r2, r2, #27
    8550:	d403      	bmi.n	855a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55a>
    8552:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8554:	7852      	ldrb	r2, [r2, #1]
    8556:	2a00      	cmp	r2, #0
    8558:	d007      	beq.n	856a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    855a:	0033      	movs	r3, r6
    855c:	33fc      	adds	r3, #252	; 0xfc
    855e:	695b      	ldr	r3, [r3, #20]
    8560:	339b      	adds	r3, #155	; 0x9b
			 (pdu_data_tx->len == 0)) ||
    8562:	781b      	ldrb	r3, [r3, #0]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8564:	1e5a      	subs	r2, r3, #1
    8566:	4193      	sbcs	r3, r2
    8568:	3302      	adds	r3, #2
    856a:	7433      	strb	r3, [r6, #16]
	if (_radio.state == STATE_CLOSE) {
    856c:	2b03      	cmp	r3, #3
    856e:	d000      	beq.n	8572 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x572>
    8570:	e2e9      	b.n	8b46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb46>
		if (_radio.role == ROLE_MASTER) {
    8572:	7bf3      	ldrb	r3, [r6, #15]
    8574:	2b04      	cmp	r3, #4
    8576:	d000      	beq.n	857a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57a>
    8578:	e2c0      	b.n	8afc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xafc>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    857a:	217f      	movs	r1, #127	; 0x7f
    857c:	36fc      	adds	r6, #252	; 0xfc
    857e:	6972      	ldr	r2, [r6, #20]
    8580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8582:	32a8      	adds	r2, #168	; 0xa8
    8584:	7810      	ldrb	r0, [r2, #0]
    8586:	01db      	lsls	r3, r3, #7
    8588:	4001      	ands	r1, r0
    858a:	430b      	orrs	r3, r1
    858c:	7013      	strb	r3, [r2, #0]
			radio_disable();
    858e:	f002 f817 	bl	a5c0 <radio_disable>
    8592:	e77e      	b.n	8492 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x492>
	    (packet_rx_reserve_get(3) != 0) &&
    8594:	2003      	movs	r0, #3
    8596:	f7fd fa87 	bl	5aa8 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    859a:	2800      	cmp	r0, #0
    859c:	d0b8      	beq.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
	    ((_radio.fc_ena == 0) ||
    859e:	23bb      	movs	r3, #187	; 0xbb
    85a0:	005b      	lsls	r3, r3, #1
	    (packet_rx_reserve_get(3) != 0) &&
    85a2:	5cf3      	ldrb	r3, [r6, r3]
    85a4:	2b00      	cmp	r3, #0
    85a6:	d033      	beq.n	8610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x610>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    85a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    85aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	    ((_radio.fc_ena == 0) ||
    85ac:	429a      	cmp	r2, r3
    85ae:	d107      	bne.n	85c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c0>
	      (_radio.fc_req == _radio.fc_ack)) ||
    85b0:	23ba      	movs	r3, #186	; 0xba
    85b2:	2176      	movs	r1, #118	; 0x76
    85b4:	005b      	lsls	r3, r3, #1
    85b6:	31ff      	adds	r1, #255	; 0xff
    85b8:	5cf3      	ldrb	r3, [r6, r3]
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    85ba:	5c71      	ldrb	r1, [r6, r1]
    85bc:	4299      	cmp	r1, r3
    85be:	d027      	beq.n	8610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x610>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    85c0:	0033      	movs	r3, r6
    85c2:	33fc      	adds	r3, #252	; 0xfc
    85c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
	      (_radio.fc_req == _radio.fc_ack)) ||
    85c6:	428a      	cmp	r2, r1
    85c8:	d0a2      	beq.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
	      (_radio.fc_req != _radio.fc_ack) &&
    85ca:	22ba      	movs	r2, #186	; 0xba
    85cc:	2076      	movs	r0, #118	; 0x76
    85ce:	0052      	lsls	r2, r2, #1
    85d0:	30ff      	adds	r0, #255	; 0xff
    85d2:	5cb1      	ldrb	r1, [r6, r2]
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    85d4:	5c30      	ldrb	r0, [r6, r0]
    85d6:	4288      	cmp	r0, r1
    85d8:	d09a      	beq.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		(((_radio.fc_req == 0) &&
    85da:	5cb2      	ldrb	r2, [r6, r2]
	      (_radio.fc_req != _radio.fc_ack) &&
    85dc:	2a00      	cmp	r2, #0
    85de:	d106      	bne.n	85ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ee>
		   _radio.conn_curr->handle)) ||
    85e0:	695b      	ldr	r3, [r3, #20]
		(((_radio.fc_req == 0) &&
    85e2:	3273      	adds	r2, #115	; 0x73
    85e4:	32ff      	adds	r2, #255	; 0xff
    85e6:	5ab2      	ldrh	r2, [r6, r2]
    85e8:	8c1b      	ldrh	r3, [r3, #32]
    85ea:	429a      	cmp	r2, r3
    85ec:	d010      	beq.n	8610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x610>
		 ((_radio.fc_req != 0) &&
    85ee:	23ba      	movs	r3, #186	; 0xba
    85f0:	005b      	lsls	r3, r3, #1
    85f2:	5cf2      	ldrb	r2, [r6, r3]
		   _radio.conn_curr->handle)) ||
    85f4:	2a00      	cmp	r2, #0
    85f6:	d08b      	beq.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		   _radio.conn_curr->handle)))))) {
    85f8:	0032      	movs	r2, r6
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    85fa:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    85fc:	32fc      	adds	r2, #252	; 0xfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    85fe:	33b3      	adds	r3, #179	; 0xb3
		   _radio.conn_curr->handle)))))) {
    8600:	6951      	ldr	r1, [r2, #20]
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8602:	005b      	lsls	r3, r3, #1
    8604:	18f3      	adds	r3, r6, r3
		 ((_radio.fc_req != 0) &&
    8606:	88da      	ldrh	r2, [r3, #6]
    8608:	8c0b      	ldrh	r3, [r1, #32]
    860a:	429a      	cmp	r2, r3
    860c:	d000      	beq.n	8610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x610>
    860e:	e77f      	b.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		if (pdu_data_rx->len != 0) {
    8610:	7a7b      	ldrb	r3, [r7, #9]
    8612:	930c      	str	r3, [sp, #48]	; 0x30
    8614:	2b00      	cmp	r3, #0
    8616:	d100      	bne.n	861a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61a>
    8618:	e20f      	b.n	8a3a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3a>
			if (_radio.conn_curr->enc_rx) {
    861a:	0033      	movs	r3, r6
		u8_t ccm_rx_increment = 0;
    861c:	2200      	movs	r2, #0
			if (_radio.conn_curr->enc_rx) {
    861e:	33fc      	adds	r3, #252	; 0xfc
    8620:	695b      	ldr	r3, [r3, #20]
		u8_t ccm_rx_increment = 0;
    8622:	920c      	str	r2, [sp, #48]	; 0x30
			if (_radio.conn_curr->enc_rx) {
    8624:	33a8      	adds	r3, #168	; 0xa8
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	06db      	lsls	r3, r3, #27
    862a:	d507      	bpl.n	863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>
				done = radio_ccm_is_done();
    862c:	f002 f9fc 	bl	aa28 <radio_ccm_is_done>
				ccm_rx_increment = 1;
    8630:	2301      	movs	r3, #1
    8632:	930c      	str	r3, [sp, #48]	; 0x30
				LL_ASSERT(done);
    8634:	2800      	cmp	r0, #0
    8636:	d101      	bne.n	863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>
    8638:	f7ff f94d 	bl	78d6 <isr+0xa2>
			if ((_radio.conn_curr->enc_rx &&
    863c:	0033      	movs	r3, r6
    863e:	33fc      	adds	r3, #252	; 0xfc
    8640:	695b      	ldr	r3, [r3, #20]
    8642:	33a8      	adds	r3, #168	; 0xa8
    8644:	781b      	ldrb	r3, [r3, #0]
    8646:	06db      	lsls	r3, r3, #27
    8648:	d410      	bmi.n	866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>
			    (_radio.conn_curr->pause_rx &&
    864a:	0033      	movs	r3, r6
    864c:	33fc      	adds	r3, #252	; 0xfc
    864e:	695d      	ldr	r5, [r3, #20]
    8650:	002b      	movs	r3, r5
    8652:	33a8      	adds	r3, #168	; 0xa8
    8654:	781a      	ldrb	r2, [r3, #0]
			     !radio_ccm_mic_is_valid()) ||
    8656:	0753      	lsls	r3, r2, #29
    8658:	d420      	bmi.n	869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>
			switch (pdu_data_rx->ll_id) {
    865a:	7a3c      	ldrb	r4, [r7, #8]
    865c:	07a4      	lsls	r4, r4, #30
    865e:	0fa4      	lsrs	r4, r4, #30
    8660:	d100      	bne.n	8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>
    8662:	e0bf      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
    8664:	2c02      	cmp	r4, #2
    8666:	d842      	bhi.n	86ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ee>
				*rx_enqueue = 1;
    8668:	2401      	movs	r4, #1
    866a:	e0bb      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
			     !radio_ccm_mic_is_valid()) ||
    866c:	f002 f9fe 	bl	aa6c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    8670:	2800      	cmp	r0, #0
    8672:	d1ea      	bne.n	864a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64a>
				_radio.state = STATE_CLOSE;
    8674:	2303      	movs	r3, #3
    8676:	7433      	strb	r3, [r6, #16]
				radio_disable();
    8678:	f001 ffa2 	bl	a5c0 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    867c:	f001 ffb2 	bl	a5e4 <radio_is_ready>
    8680:	1e04      	subs	r4, r0, #0
    8682:	d001      	beq.n	8688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x688>
    8684:	f7ff f927 	bl	78d6 <isr+0xa2>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    8688:	36fc      	adds	r6, #252	; 0xfc
    868a:	213d      	movs	r1, #61	; 0x3d
    868c:	6970      	ldr	r0, [r6, #20]
    868e:	f7fd fd6b 	bl	6168 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    8692:	6970      	ldr	r0, [r6, #20]
    8694:	f7fd ff9a 	bl	65cc <connection_release>
				_radio.conn_curr = NULL;
    8698:	6174      	str	r4, [r6, #20]
    869a:	e6fa      	b.n	8492 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x492>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    869c:	7a3b      	ldrb	r3, [r7, #8]
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    869e:	43db      	mvns	r3, r3
    86a0:	079b      	lsls	r3, r3, #30
    86a2:	d1e7      	bne.n	8674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x674>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    86a4:	7f68      	ldrb	r0, [r5, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    86a6:	7afb      	ldrb	r3, [r7, #11]
    86a8:	2140      	movs	r1, #64	; 0x40
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    86aa:	287f      	cmp	r0, #127	; 0x7f
    86ac:	d812      	bhi.n	86d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d4>
	       (!conn->role &&
    86ae:	420a      	tst	r2, r1
    86b0:	d109      	bne.n	86c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c6>
		((!conn->refresh &&
    86b2:	2b02      	cmp	r3, #2
    86b4:	d0d1      	beq.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    86b6:	1f5a      	subs	r2, r3, #5
    86b8:	2a01      	cmp	r2, #1
    86ba:	d9ce      	bls.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    86bc:	22fb      	movs	r2, #251	; 0xfb
    86be:	3b0d      	subs	r3, #13
    86c0:	4213      	tst	r3, r2
    86c2:	d1d7      	bne.n	8674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x674>
    86c4:	e7c9      	b.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		 (conn->refresh &&
    86c6:	21fd      	movs	r1, #253	; 0xfd
    86c8:	1e9a      	subs	r2, r3, #2
    86ca:	420a      	tst	r2, r1
    86cc:	d0c5      	beq.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    86ce:	2b0b      	cmp	r3, #11
    86d0:	d1f1      	bne.n	86b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b6>
    86d2:	e7c2      	b.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
	       (conn->role &&
    86d4:	420a      	tst	r2, r1
    86d6:	d104      	bne.n	86e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e2>
		((!conn->refresh &&
    86d8:	2b02      	cmp	r3, #2
    86da:	d0be      	beq.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    86dc:	2b06      	cmp	r3, #6
    86de:	d1ed      	bne.n	86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>
    86e0:	e7bb      	b.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		 (conn->refresh &&
    86e2:	1e9a      	subs	r2, r3, #2
    86e4:	2a01      	cmp	r2, #1
    86e6:	d9b8      	bls.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    86e8:	2b0b      	cmp	r3, #11
    86ea:	d1f7      	bne.n	86dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6dc>
    86ec:	e7b5      	b.n	865a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65a>
	pdu_data_rx = (void *)node_rx->pdu_data;
    86ee:	003b      	movs	r3, r7
    86f0:	3308      	adds	r3, #8
    86f2:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (pdu_data_rx->llctrl.opcode) {
    86f4:	7afc      	ldrb	r4, [r7, #11]
    86f6:	2c19      	cmp	r4, #25
    86f8:	d900      	bls.n	86fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6fc>
    86fa:	e1a6      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
    86fc:	0020      	movs	r0, r4
    86fe:	f7f7 fd59 	bl	1b4 <__gnu_thumb1_case_uhi>
    8702:	001d      	.short	0x001d
    8704:	00e700b0 	.word	0x00e700b0
    8708:	01a401a4 	.word	0x01a401a4
    870c:	01a401a4 	.word	0x01a401a4
    8710:	00f2019e 	.word	0x00f2019e
    8714:	01a4010c 	.word	0x01a4010c
    8718:	012c01a4 	.word	0x012c01a4
    871c:	010501a4 	.word	0x010501a4
    8720:	01a401a4 	.word	0x01a401a4
    8724:	01a40196 	.word	0x01a40196
    8728:	01a401a4 	.word	0x01a401a4
    872c:	01a401a4 	.word	0x01a401a4
    8730:	01a401a4 	.word	0x01a401a4
    8734:	01b9      	.short	0x01b9
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	20000284 	.word	0x20000284
		if (!_radio.conn_curr->role ||
    873c:	7f6b      	ldrb	r3, [r5, #29]
    873e:	2b7f      	cmp	r3, #127	; 0x7f
    8740:	d800      	bhi.n	8744 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x744>
    8742:	e182      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    8744:	7a79      	ldrb	r1, [r7, #9]
    8746:	2000      	movs	r0, #0
    8748:	f7fd f96e 	bl	5a28 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    874c:	2800      	cmp	r0, #0
    874e:	d100      	bne.n	8752 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x752>
    8750:	e17b      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    8752:	7dbb      	ldrb	r3, [r7, #22]
    8754:	7d7a      	ldrb	r2, [r7, #21]
    8756:	021b      	lsls	r3, r3, #8
    8758:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    875a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    875c:	1a9a      	subs	r2, r3, r2
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    875e:	0412      	lsls	r2, r2, #16
    8760:	d500      	bpl.n	8764 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x764>
    8762:	e3a3      	b.n	8eac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeac>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8764:	002a      	movs	r2, r5
    8766:	325c      	adds	r2, #92	; 0x5c
    8768:	7811      	ldrb	r1, [r2, #0]
    876a:	3201      	adds	r2, #1
    876c:	7812      	ldrb	r2, [r2, #0]
    876e:	428a      	cmp	r2, r1
    8770:	d001      	beq.n	8776 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x776>
    8772:	f7ff f8b0 	bl	78d6 <isr+0xa2>
	if (_radio.conn_upd == 0) {
    8776:	22be      	movs	r2, #190	; 0xbe
    8778:	0052      	lsls	r2, r2, #1
    877a:	58b0      	ldr	r0, [r6, r2]
    877c:	2800      	cmp	r0, #0
    877e:	d100      	bne.n	8782 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x782>
		_radio.conn_upd = conn;
    8780:	50b5      	str	r5, [r6, r2]
	conn->llcp.conn_upd.win_size =
    8782:	002a      	movs	r2, r5
    8784:	7b38      	ldrb	r0, [r7, #12]
    8786:	3270      	adds	r2, #112	; 0x70
    8788:	7010      	strb	r0, [r2, #0]
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    878a:	7bba      	ldrb	r2, [r7, #14]
    878c:	7b78      	ldrb	r0, [r7, #13]
    878e:	0212      	lsls	r2, r2, #8
    8790:	4302      	orrs	r2, r0
    8792:	48d7      	ldr	r0, [pc, #860]	; (8af0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf0>)
			_radio.conn_curr->procedure_expire = 0;
    8794:	2400      	movs	r4, #0
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    8796:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    8798:	66ea      	str	r2, [r5, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    879a:	7c3a      	ldrb	r2, [r7, #16]
    879c:	7bf8      	ldrb	r0, [r7, #15]
    879e:	0212      	lsls	r2, r2, #8
    87a0:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.interval =
    87a2:	0028      	movs	r0, r5
    87a4:	3062      	adds	r0, #98	; 0x62
    87a6:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.latency;
    87a8:	7cba      	ldrb	r2, [r7, #18]
    87aa:	7c78      	ldrb	r0, [r7, #17]
    87ac:	0212      	lsls	r2, r2, #8
    87ae:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.latency =
    87b0:	0028      	movs	r0, r5
    87b2:	3064      	adds	r0, #100	; 0x64
    87b4:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    87b6:	7d3a      	ldrb	r2, [r7, #20]
    87b8:	7cf8      	ldrb	r0, [r7, #19]
    87ba:	0212      	lsls	r2, r2, #8
    87bc:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.timeout =
    87be:	0028      	movs	r0, r5
    87c0:	3066      	adds	r0, #102	; 0x66
    87c2:	8002      	strh	r2, [r0, #0]
	conn->llcp.conn_upd.instant =
    87c4:	002a      	movs	r2, r5
	conn->llcp.conn_upd.is_internal = 0;
    87c6:	20f8      	movs	r0, #248	; 0xf8
	conn->llcp.conn_upd.instant =
    87c8:	3268      	adds	r2, #104	; 0x68
    87ca:	8013      	strh	r3, [r2, #0]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    87cc:	3a08      	subs	r2, #8
    87ce:	7813      	ldrb	r3, [r2, #0]
	conn->llcp_ack--;
    87d0:	3901      	subs	r1, #1
	conn->llcp.conn_upd.is_internal = 0;
    87d2:	4003      	ands	r3, r0
    87d4:	7013      	strb	r3, [r2, #0]
	conn->llcp_type = LLCP_CONN_UPD;
    87d6:	002b      	movs	r3, r5
    87d8:	2201      	movs	r2, #1
    87da:	335e      	adds	r3, #94	; 0x5e
    87dc:	701a      	strb	r2, [r3, #0]
	conn->llcp_ack--;
    87de:	3b01      	subs	r3, #1
    87e0:	7019      	strb	r1, [r3, #0]
			_radio.conn_curr->procedure_expire = 0;
    87e2:	86ac      	strh	r4, [r5, #52]	; 0x34
			_radio.conn_curr->nesn++;
    87e4:	4bc3      	ldr	r3, [pc, #780]	; (8af4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf4>)
    87e6:	2102      	movs	r1, #2
    87e8:	33fc      	adds	r3, #252	; 0xfc
    87ea:	695d      	ldr	r5, [r3, #20]
    87ec:	002a      	movs	r2, r5
    87ee:	32a8      	adds	r2, #168	; 0xa8
    87f0:	7813      	ldrb	r3, [r2, #0]
    87f2:	404b      	eors	r3, r1
    87f4:	7013      	strb	r3, [r2, #0]
			if (ccm_rx_increment) {
    87f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    87f8:	2b00      	cmp	r3, #0
    87fa:	d100      	bne.n	87fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fe>
    87fc:	e689      	b.n	8512 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x512>
				_radio.conn_curr->ccm_rx.counter++;
    87fe:	002b      	movs	r3, r5
    8800:	002e      	movs	r6, r5
    8802:	33b8      	adds	r3, #184	; 0xb8
    8804:	36bc      	adds	r6, #188	; 0xbc
    8806:	681b      	ldr	r3, [r3, #0]
    8808:	7832      	ldrb	r2, [r6, #0]
    880a:	0a1b      	lsrs	r3, r3, #8
    880c:	0612      	lsls	r2, r2, #24
    880e:	431a      	orrs	r2, r3
    8810:	0010      	movs	r0, r2
    8812:	002a      	movs	r2, r5
    8814:	32c0      	adds	r2, #192	; 0xc0
    8816:	6833      	ldr	r3, [r6, #0]
    8818:	7812      	ldrb	r2, [r2, #0]
    881a:	0a1b      	lsrs	r3, r3, #8
    881c:	0612      	lsls	r2, r2, #24
    881e:	431a      	orrs	r2, r3
    8820:	0011      	movs	r1, r2
    8822:	2300      	movs	r3, #0
    8824:	2201      	movs	r2, #1
    8826:	1812      	adds	r2, r2, r0
    8828:	414b      	adcs	r3, r1
    882a:	920c      	str	r2, [sp, #48]	; 0x30
    882c:	930d      	str	r3, [sp, #52]	; 0x34
    882e:	2230      	movs	r2, #48	; 0x30
    8830:	466b      	mov	r3, sp
    8832:	189b      	adds	r3, r3, r2
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	35b9      	adds	r5, #185	; 0xb9
    8838:	702b      	strb	r3, [r5, #0]
    883a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    883c:	0a19      	lsrs	r1, r3, #8
    883e:	0e1a      	lsrs	r2, r3, #24
    8840:	7069      	strb	r1, [r5, #1]
    8842:	70ea      	strb	r2, [r5, #3]
    8844:	0c19      	lsrs	r1, r3, #16
    8846:	2234      	movs	r2, #52	; 0x34
    8848:	466b      	mov	r3, sp
    884a:	189b      	adds	r3, r3, r2
    884c:	781b      	ldrb	r3, [r3, #0]
    884e:	70a9      	strb	r1, [r5, #2]
    8850:	712b      	strb	r3, [r5, #4]
    8852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8854:	0a1a      	lsrs	r2, r3, #8
    8856:	716a      	strb	r2, [r5, #5]
    8858:	0c1a      	lsrs	r2, r3, #16
    885a:	0e1b      	lsrs	r3, r3, #24
    885c:	71aa      	strb	r2, [r5, #6]
    885e:	71eb      	strb	r3, [r5, #7]
    8860:	e657      	b.n	8512 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x512>
		if (!_radio.conn_curr->role ||
    8862:	7f6b      	ldrb	r3, [r5, #29]
    8864:	2b7f      	cmp	r3, #127	; 0x7f
    8866:	d800      	bhi.n	886a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86a>
    8868:	e0ef      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    886a:	7a79      	ldrb	r1, [r7, #9]
    886c:	2001      	movs	r0, #1
    886e:	f7fd f8db 	bl	5a28 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8872:	2800      	cmp	r0, #0
    8874:	d100      	bne.n	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    8876:	e0e8      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8878:	7cbb      	ldrb	r3, [r7, #18]
    887a:	7c7a      	ldrb	r2, [r7, #17]
    887c:	021b      	lsls	r3, r3, #8
    887e:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xffff) > 0x7fff) {
    8880:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    8882:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8884:	041b      	lsls	r3, r3, #16
    8886:	d500      	bpl.n	888a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88a>
    8888:	e310      	b.n	8eac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeac>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    888a:	002e      	movs	r6, r5
    888c:	002b      	movs	r3, r5
    888e:	365d      	adds	r6, #93	; 0x5d
    8890:	335c      	adds	r3, #92	; 0x5c
    8892:	781a      	ldrb	r2, [r3, #0]
    8894:	7833      	ldrb	r3, [r6, #0]
    8896:	429a      	cmp	r2, r3
    8898:	d001      	beq.n	889e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x89e>
    889a:	f7ff f81c 	bl	78d6 <isr+0xa2>
	memcpy(&conn->llcp.chan_map.chm[0],
    889e:	0028      	movs	r0, r5
    88a0:	0039      	movs	r1, r7
    88a2:	2205      	movs	r2, #5
    88a4:	3061      	adds	r0, #97	; 0x61
    88a6:	310c      	adds	r1, #12
    88a8:	f7f8 fd9a 	bl	13e0 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    88ac:	7cbb      	ldrb	r3, [r7, #18]
    88ae:	7c7a      	ldrb	r2, [r7, #17]
    88b0:	021b      	lsls	r3, r3, #8
    88b2:	4313      	orrs	r3, r2
	conn->llcp.chan_map.instant =
    88b4:	002a      	movs	r2, r5
    88b6:	3266      	adds	r2, #102	; 0x66
    88b8:	8013      	strh	r3, [r2, #0]
	conn->llcp.chan_map.initiate = 0;
    88ba:	002b      	movs	r3, r5
    88bc:	2400      	movs	r4, #0
    88be:	3360      	adds	r3, #96	; 0x60
    88c0:	701c      	strb	r4, [r3, #0]
			conn->llcp_type = LLCP_CHAN_MAP;
    88c2:	2302      	movs	r3, #2
    88c4:	355e      	adds	r5, #94	; 0x5e
    88c6:	702b      	strb	r3, [r5, #0]
			conn->llcp_ack--;
    88c8:	7833      	ldrb	r3, [r6, #0]
    88ca:	3b01      	subs	r3, #1
    88cc:	7033      	strb	r3, [r6, #0]
    88ce:	e789      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    88d0:	7a79      	ldrb	r1, [r7, #9]
    88d2:	2002      	movs	r0, #2
    88d4:	f7fd f8a8 	bl	5a28 <pdu_len_cmp>
    88d8:	2800      	cmp	r0, #0
    88da:	d100      	bne.n	88de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8de>
    88dc:	e0b5      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    88de:	7b3b      	ldrb	r3, [r7, #12]
    88e0:	359b      	adds	r5, #155	; 0x9b
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    88e2:	702b      	strb	r3, [r5, #0]
    88e4:	e0a9      	b.n	8a3a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3a>
		if (!_radio.conn_curr->role ||
    88e6:	7f6b      	ldrb	r3, [r5, #29]
    88e8:	2b7f      	cmp	r3, #127	; 0x7f
    88ea:	d800      	bhi.n	88ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ee>
    88ec:	e0ad      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    88ee:	2008      	movs	r0, #8
    88f0:	7a79      	ldrb	r1, [r7, #9]
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    88f2:	f7fd f899 	bl	5a28 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    88f6:	2800      	cmp	r0, #0
    88f8:	d100      	bne.n	88fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8fc>
    88fa:	e0a6      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    88fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    88fe:	0028      	movs	r0, r5
    8900:	f7fe faa8 	bl	6e54 <feature_rsp_send>
    8904:	1e04      	subs	r4, r0, #0
		if (!nack) {
    8906:	d000      	beq.n	890a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90a>
    8908:	e602      	b.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
    890a:	e76b      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
		if (_radio.conn_curr->role ||
    890c:	7f6b      	ldrb	r3, [r5, #29]
    890e:	2b7f      	cmp	r3, #127	; 0x7f
    8910:	d900      	bls.n	8914 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x914>
    8912:	e09a      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    8914:	7a79      	ldrb	r1, [r7, #9]
    8916:	200e      	movs	r0, #14
    8918:	e7eb      	b.n	88f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    891a:	7a79      	ldrb	r1, [r7, #9]
    891c:	2009      	movs	r0, #9
    891e:	f7fd f883 	bl	5a28 <pdu_len_cmp>
    8922:	2800      	cmp	r0, #0
    8924:	d100      	bne.n	8928 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x928>
    8926:	e090      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    8928:	0029      	movs	r1, r5
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    892a:	7b3a      	ldrb	r2, [r7, #12]
    892c:	4b72      	ldr	r3, [pc, #456]	; (8af8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf8>)
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    892e:	318c      	adds	r1, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8930:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    8932:	7b7a      	ldrb	r2, [r7, #13]
    8934:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8936:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    8938:	7bba      	ldrb	r2, [r7, #14]
    893a:	0412      	lsls	r2, r2, #16
    893c:	431a      	orrs	r2, r3
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	03db      	lsls	r3, r3, #15
    8942:	0bdb      	lsrs	r3, r3, #15
    8944:	4013      	ands	r3, r2
		_radio.conn_curr->common.fex_valid = 1;
    8946:	002a      	movs	r2, r5
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    8948:	600b      	str	r3, [r1, #0]
		_radio.conn_curr->common.fex_valid = 1;
    894a:	2320      	movs	r3, #32
    894c:	3238      	adds	r2, #56	; 0x38
    894e:	7811      	ldrb	r1, [r2, #0]
    8950:	430b      	orrs	r3, r1
    8952:	7013      	strb	r3, [r2, #0]
		_radio.conn_curr->procedure_expire = 0;
    8954:	2300      	movs	r3, #0
    8956:	86ab      	strh	r3, [r5, #52]	; 0x34
    8958:	e686      	b.n	8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    895a:	7a79      	ldrb	r1, [r7, #9]
    895c:	200c      	movs	r0, #12
    895e:	f7fd f863 	bl	5a28 <pdu_len_cmp>
    8962:	2800      	cmp	r0, #0
    8964:	d071      	beq.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
	if (!conn->llcp_version.tx) {
    8966:	002c      	movs	r4, r5
    8968:	3490      	adds	r4, #144	; 0x90
    896a:	7823      	ldrb	r3, [r4, #0]
    896c:	2601      	movs	r6, #1
    896e:	001a      	movs	r2, r3
    8970:	4032      	ands	r2, r6
    8972:	920f      	str	r2, [sp, #60]	; 0x3c
    8974:	d154      	bne.n	8a20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8976:	485f      	ldr	r0, [pc, #380]	; (8af4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf4>)
    8978:	3051      	adds	r0, #81	; 0x51
    897a:	30ff      	adds	r0, #255	; 0xff
    897c:	f7fb fb34 	bl	3fe8 <mem_acquire>
    8980:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    8982:	d100      	bne.n	8986 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x986>
    8984:	e5c4      	b.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		conn->llcp_version.tx = 1;
    8986:	7823      	ldrb	r3, [r4, #0]
    8988:	4333      	orrs	r3, r6
    898a:	7023      	strb	r3, [r4, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    898c:	2403      	movs	r4, #3
    898e:	7903      	ldrb	r3, [r0, #4]
    8990:	4323      	orrs	r3, r4
    8992:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    8994:	2306      	movs	r3, #6
    8996:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    8998:	18db      	adds	r3, r3, r3
    899a:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    899c:	3b03      	subs	r3, #3
    899e:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    89a0:	3b18      	subs	r3, #24
    89a2:	7243      	strb	r3, [r0, #9]
    89a4:	3314      	adds	r3, #20
    89a6:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    89a8:	3b06      	subs	r3, #6
    89aa:	72c3      	strb	r3, [r0, #11]
    89ac:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    89ae:	0028      	movs	r0, r5
    89b0:	f7fe fa37 	bl	6e22 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    89b4:	002a      	movs	r2, r5
    89b6:	2380      	movs	r3, #128	; 0x80
    89b8:	32a8      	adds	r2, #168	; 0xa8
    89ba:	7811      	ldrb	r1, [r2, #0]
    89bc:	425b      	negs	r3, r3
    89be:	430b      	orrs	r3, r1
    89c0:	7013      	strb	r3, [r2, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    89c2:	f001 fe45 	bl	a650 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    89c6:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    89c8:	223c      	movs	r2, #60	; 0x3c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    89ca:	43a3      	bics	r3, r4
    89cc:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    89ce:	466b      	mov	r3, sp
    89d0:	189b      	adds	r3, r3, r2
    89d2:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    89d4:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    89d6:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    89d8:	002b      	movs	r3, r5
    89da:	33ec      	adds	r3, #236	; 0xec
    89dc:	681c      	ldr	r4, [r3, #0]
    89de:	2310      	movs	r3, #16
    89e0:	2c00      	cmp	r4, #0
    89e2:	d01a      	beq.n	8a1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1a>
		pdu_data_tx->md = 1;
    89e4:	431e      	orrs	r6, r3
	u8_t rx_enqueue = 0;
    89e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
		pdu_data_tx->md = 1;
    89e8:	7006      	strb	r6, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    89ea:	002b      	movs	r3, r5
    89ec:	7b3a      	ldrb	r2, [r7, #12]
    89ee:	3391      	adds	r3, #145	; 0x91
    89f0:	701a      	strb	r2, [r3, #0]
	conn->llcp_version.company_id = v->company_id;
    89f2:	7bbb      	ldrb	r3, [r7, #14]
    89f4:	7b7a      	ldrb	r2, [r7, #13]
    89f6:	021b      	lsls	r3, r3, #8
    89f8:	4313      	orrs	r3, r2
    89fa:	002a      	movs	r2, r5
    89fc:	3292      	adds	r2, #146	; 0x92
    89fe:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.sub_version_number = v->sub_version_number;
    8a00:	7c3b      	ldrb	r3, [r7, #16]
    8a02:	7bfa      	ldrb	r2, [r7, #15]
    8a04:	021b      	lsls	r3, r3, #8
    8a06:	4313      	orrs	r3, r2
    8a08:	002a      	movs	r2, r5
    8a0a:	3294      	adds	r2, #148	; 0x94
    8a0c:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.rx = 1;
    8a0e:	2302      	movs	r3, #2
    8a10:	3590      	adds	r5, #144	; 0x90
    8a12:	782a      	ldrb	r2, [r5, #0]
    8a14:	4313      	orrs	r3, r2
    8a16:	702b      	strb	r3, [r5, #0]
    8a18:	e6e4      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
		pdu_data_tx->md = 0;
    8a1a:	439e      	bics	r6, r3
    8a1c:	7006      	strb	r6, [r0, #0]
    8a1e:	e7e4      	b.n	89ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ea>
	u8_t rx_enqueue = 0;
    8a20:	2400      	movs	r4, #0
	} else if (!conn->llcp_version.rx) {
    8a22:	079b      	lsls	r3, r3, #30
    8a24:	d500      	bpl.n	8a28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa28>
    8a26:	e6dd      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
		conn->procedure_expire = 0;
    8a28:	86ac      	strh	r4, [r5, #52]	; 0x34
		*rx_enqueue = 1;
    8a2a:	0034      	movs	r4, r6
    8a2c:	e7dd      	b.n	89ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ea>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    8a2e:	7a79      	ldrb	r1, [r7, #9]
    8a30:	2011      	movs	r0, #17
    8a32:	f7fc fff9 	bl	5a28 <pdu_len_cmp>
    8a36:	2800      	cmp	r0, #0
    8a38:	d007      	beq.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
	u8_t rx_enqueue = 0;
    8a3a:	2400      	movs	r4, #0
    8a3c:	e6d2      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    8a3e:	7a79      	ldrb	r1, [r7, #9]
    8a40:	2007      	movs	r0, #7
    8a42:	f7fc fff1 	bl	5a28 <pdu_len_cmp>
    8a46:	2800      	cmp	r0, #0
    8a48:	d184      	bne.n	8954 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x954>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8a4a:	0030      	movs	r0, r6
    8a4c:	3051      	adds	r0, #81	; 0x51
    8a4e:	30ff      	adds	r0, #255	; 0xff
    8a50:	f7fb faca 	bl	3fe8 <mem_acquire>
    8a54:	1e01      	subs	r1, r0, #0
	if (!node_tx) {
    8a56:	d100      	bne.n	8a5a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa5a>
    8a58:	e55a      	b.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8a5a:	2303      	movs	r3, #3
    8a5c:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    8a5e:	7204      	strb	r4, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8a60:	4313      	orrs	r3, r2
    8a62:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    8a64:	2302      	movs	r3, #2
    8a66:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    8a68:	3305      	adds	r3, #5
    8a6a:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    8a6c:	0028      	movs	r0, r5
    8a6e:	f7fe f9a7 	bl	6dc0 <ctrl_tx_enqueue>
    8a72:	e7e2      	b.n	8a3a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3a>
		if (_radio.conn_curr->role ||
    8a74:	7f6b      	ldrb	r3, [r5, #29]
    8a76:	2b7f      	cmp	r3, #127	; 0x7f
    8a78:	d8e7      	bhi.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    8a7a:	7a79      	ldrb	r1, [r7, #9]
    8a7c:	2019      	movs	r0, #25
    8a7e:	f7fc ffd3 	bl	5a28 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    8a82:	2800      	cmp	r0, #0
    8a84:	d0e1      	beq.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
			if (!(p->phys & 0x01)) {
    8a86:	2201      	movs	r2, #1
    8a88:	7b3b      	ldrb	r3, [r7, #12]
	u8_t rx_enqueue = 0;
    8a8a:	2400      	movs	r4, #0
			if (!(p->phys & 0x01)) {
    8a8c:	4213      	tst	r3, r2
    8a8e:	d100      	bne.n	8a92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa92>
    8a90:	e6a8      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
			if (conn->llcp_req != conn->llcp_ack) {
    8a92:	002e      	movs	r6, r5
    8a94:	002b      	movs	r3, r5
    8a96:	365d      	adds	r6, #93	; 0x5d
    8a98:	335c      	adds	r3, #92	; 0x5c
    8a9a:	781a      	ldrb	r2, [r3, #0]
    8a9c:	7833      	ldrb	r3, [r6, #0]
    8a9e:	429a      	cmp	r2, r3
    8aa0:	d000      	beq.n	8aa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa4>
    8aa2:	e69f      	b.n	87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
			memcpy(&conn->llcp.chan_map.chm[0],
    8aa4:	0028      	movs	r0, r5
    8aa6:	4913      	ldr	r1, [pc, #76]	; (8af4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf4>)
    8aa8:	2205      	movs	r2, #5
    8aaa:	3117      	adds	r1, #23
    8aac:	3061      	adds	r0, #97	; 0x61
    8aae:	31ff      	adds	r1, #255	; 0xff
    8ab0:	f7f8 fc96 	bl	13e0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    8ab4:	002b      	movs	r3, r5
    8ab6:	2201      	movs	r2, #1
    8ab8:	3360      	adds	r3, #96	; 0x60
    8aba:	701a      	strb	r2, [r3, #0]
    8abc:	e701      	b.n	88c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c2>
		if (_radio.crc_expire == 0) {
    8abe:	7d93      	ldrb	r3, [r2, #22]
    8ac0:	2b00      	cmp	r3, #0
    8ac2:	d101      	bne.n	8ac8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac8>
			_radio.crc_expire = 2;
    8ac4:	3302      	adds	r3, #2
    8ac6:	7593      	strb	r3, [r2, #22]
		_radio.crc_expire--;
    8ac8:	0023      	movs	r3, r4
    8aca:	33ff      	adds	r3, #255	; 0xff
    8acc:	7d9d      	ldrb	r5, [r3, #22]
		if (!_radio.conn_curr->supervision_expire) {
    8ace:	34fc      	adds	r4, #252	; 0xfc
		_radio.crc_expire--;
    8ad0:	3d01      	subs	r5, #1
    8ad2:	b2ea      	uxtb	r2, r5
    8ad4:	759a      	strb	r2, [r3, #22]
		crc_close = (_radio.crc_expire == 0);
    8ad6:	4255      	negs	r5, r2
    8ad8:	4155      	adcs	r5, r2
		if (!_radio.conn_curr->supervision_expire) {
    8ada:	6963      	ldr	r3, [r4, #20]
		crc_close = (_radio.crc_expire == 0);
    8adc:	b2ed      	uxtb	r5, r5
		if (!_radio.conn_curr->supervision_expire) {
    8ade:	8e1c      	ldrh	r4, [r3, #48]	; 0x30
    8ae0:	2c00      	cmp	r4, #0
    8ae2:	d103      	bne.n	8aec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaec>
			_radio.conn_curr->supervision_expire =
    8ae4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    8ae6:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    8ae8:	940b      	str	r4, [sp, #44]	; 0x2c
    8aea:	e51a      	b.n	8522 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x522>
	u8_t rx_enqueue = 0;
    8aec:	2400      	movs	r4, #0
    8aee:	e7fb      	b.n	8ae8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae8>
    8af0:	000004e2 	.word	0x000004e2
    8af4:	20000284 	.word	0x20000284
    8af8:	fffe30d0 	.word	0xfffe30d0
			radio_switch_complete_and_disable();
    8afc:	f001 fdc0 	bl	a680 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    8b00:	36fc      	adds	r6, #252	; 0xfc
    8b02:	6970      	ldr	r0, [r6, #20]
    8b04:	2501      	movs	r5, #1
    8b06:	0006      	movs	r6, r0
    8b08:	36a8      	adds	r6, #168	; 0xa8
    8b0a:	7832      	ldrb	r2, [r6, #0]
    8b0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8b0e:	402a      	ands	r2, r5
    8b10:	00d3      	lsls	r3, r2, #3
    8b12:	930c      	str	r3, [sp, #48]	; 0x30
    8b14:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    8b16:	7836      	ldrb	r6, [r6, #0]
	pdu_data_tx->sn = _radio.conn_curr->sn;
    8b18:	001a      	movs	r2, r3
    8b1a:	2308      	movs	r3, #8
    8b1c:	439a      	bics	r2, r3
    8b1e:	0013      	movs	r3, r2
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    8b20:	40ee      	lsrs	r6, r5
    8b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b24:	402e      	ands	r6, r5
    8b26:	4313      	orrs	r3, r2
    8b28:	001d      	movs	r5, r3
    8b2a:	2304      	movs	r3, #4
    8b2c:	00b6      	lsls	r6, r6, #2
    8b2e:	439d      	bics	r5, r3
    8b30:	4335      	orrs	r5, r6
    8b32:	700d      	strb	r5, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    8b34:	f7fd faa2 	bl	607c <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    8b38:	f001 fd54 	bl	a5e4 <radio_is_ready>
    8b3c:	2800      	cmp	r0, #0
    8b3e:	d100      	bne.n	8b42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb42>
    8b40:	e4a7      	b.n	8492 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x492>
    8b42:	f7fe fec8 	bl	78d6 <isr+0xa2>
		radio_tmr_tifs_set(RADIO_TIFS);
    8b46:	2096      	movs	r0, #150	; 0x96
    8b48:	f001 fe1c 	bl	a784 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8b4c:	2000      	movs	r0, #0
    8b4e:	f001 fd87 	bl	a660 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    8b52:	f001 fed9 	bl	a908 <radio_tmr_end_capture>
    8b56:	e7d3      	b.n	8b00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb00>
	switch (_radio.role) {
    8b58:	7be0      	ldrb	r0, [r4, #15]
    8b5a:	b2c0      	uxtb	r0, r0
    8b5c:	2804      	cmp	r0, #4
    8b5e:	d901      	bls.n	8b64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb64>
    8b60:	f7fe feb9 	bl	78d6 <isr+0xa2>
    8b64:	f7f7 fb26 	bl	1b4 <__gnu_thumb1_case_uhi>
    8b68:	00050199 	.word	0x00050199
    8b6c:	008f0064 	.word	0x008f0064
    8b70:	008f      	.short	0x008f
	if ((_radio.state == STATE_CLOSE) &&
    8b72:	2b03      	cmp	r3, #3
    8b74:	d109      	bne.n	8b8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8a>
	    (_radio.advertiser.chan_map_current != 0)) {
    8b76:	1d63      	adds	r3, r4, #5
    8b78:	7fdb      	ldrb	r3, [r3, #31]
	if ((_radio.state == STATE_CLOSE) &&
    8b7a:	075b      	lsls	r3, r3, #29
    8b7c:	d005      	beq.n	8b8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8a>
		adv_setup();
    8b7e:	f7fd fc53 	bl	6428 <adv_setup>
		radio_tx_enable();
    8b82:	f001 fd17 	bl	a5b4 <radio_tx_enable>
    8b86:	f7fe feb4 	bl	78f2 <isr+0xbe>
		radio_filter_disable();
    8b8a:	f001 fdcb 	bl	a724 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    8b8e:	7c23      	ldrb	r3, [r4, #16]
    8b90:	2b03      	cmp	r3, #3
    8b92:	d130      	bne.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
		    (!_radio.advertiser.is_hdcd)) {
    8b94:	1d63      	adds	r3, r4, #5
    8b96:	7fdd      	ldrb	r5, [r3, #31]
		if ((_radio.state == STATE_CLOSE) &&
    8b98:	2340      	movs	r3, #64	; 0x40
    8b9a:	401d      	ands	r5, r3
    8b9c:	d12b      	bne.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
			rand_isr_get(sizeof(random_delay), &random_delay);
    8b9e:	ae13      	add	r6, sp, #76	; 0x4c
    8ba0:	0031      	movs	r1, r6
    8ba2:	2001      	movs	r0, #1
    8ba4:	f001 fbae 	bl	a304 <rand_isr_get>
			random_delay %= 10;
    8ba8:	7830      	ldrb	r0, [r6, #0]
    8baa:	210a      	movs	r1, #10
    8bac:	f7f7 fb50 	bl	250 <__aeabi_uidivmod>
			random_delay += 1;
    8bb0:	3101      	adds	r1, #1
    8bb2:	b2c8      	uxtb	r0, r1
					HAL_TICKER_US_TO_TICKS(random_delay *
    8bb4:	4abf      	ldr	r2, [pc, #764]	; (8eb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb4>)
    8bb6:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    8bb8:	7030      	strb	r0, [r6, #0]
					HAL_TICKER_US_TO_TICKS(random_delay *
    8bba:	0029      	movs	r1, r5
    8bbc:	f7f7 fbec 	bl	398 <__aeabi_lmul>
    8bc0:	4abd      	ldr	r2, [pc, #756]	; (8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>)
    8bc2:	2307      	movs	r3, #7
    8bc4:	f7f7 fbc8 	bl	358 <__aeabi_uldivmod>
			ticker_status =
    8bc8:	4abc      	ldr	r2, [pc, #752]	; (8ebc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xebc>)
    8bca:	b283      	uxth	r3, r0
    8bcc:	9206      	str	r2, [sp, #24]
    8bce:	4abc      	ldr	r2, [pc, #752]	; (8ec0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec0>)
    8bd0:	9504      	str	r5, [sp, #16]
    8bd2:	9205      	str	r2, [sp, #20]
    8bd4:	9503      	str	r5, [sp, #12]
    8bd6:	9502      	str	r5, [sp, #8]
    8bd8:	9501      	str	r5, [sp, #4]
    8bda:	9500      	str	r5, [sp, #0]
    8bdc:	2205      	movs	r2, #5
    8bde:	0029      	movs	r1, r5
    8be0:	0028      	movs	r0, r5
    8be2:	f7fc f86d 	bl	4cc0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8be6:	2302      	movs	r3, #2
    8be8:	4398      	bics	r0, r3
    8bea:	d004      	beq.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
    8bec:	7ba3      	ldrb	r3, [r4, #14]
    8bee:	2b05      	cmp	r3, #5
    8bf0:	d001      	beq.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
    8bf2:	f7fe fe70 	bl	78d6 <isr+0xa2>
	_radio.role = ROLE_NONE;
    8bf6:	2400      	movs	r4, #0
    8bf8:	4db2      	ldr	r5, [pc, #712]	; (8ec4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec4>)
    8bfa:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    8bfc:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    8bfe:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    8c00:	f001 fe12 	bl	a828 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8c04:	0022      	movs	r2, r4
    8c06:	0021      	movs	r1, r4
    8c08:	0020      	movs	r0, r4
    8c0a:	4baf      	ldr	r3, [pc, #700]	; (8ec8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec8>)
    8c0c:	f7fb faa2 	bl	4154 <mayfly_enqueue>
    8c10:	1e04      	subs	r4, r0, #0
	LL_ASSERT(!retval);
    8c12:	d001      	beq.n	8c18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc18>
    8c14:	f7fe fe5f 	bl	78d6 <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    8c18:	6828      	ldr	r0, [r5, #0]
    8c1a:	0021      	movs	r1, r4
    8c1c:	6843      	ldr	r3, [r0, #4]
    8c1e:	685b      	ldr	r3, [r3, #4]
    8c20:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    8c22:	2201      	movs	r2, #1
    8c24:	0020      	movs	r0, r4
    8c26:	0011      	movs	r1, r2
    8c28:	f7fb fa70 	bl	410c <mayfly_enable>
    8c2c:	f7fe fe82 	bl	7934 <isr+0x100>
	if (_radio.state == STATE_CLOSE) {
    8c30:	2b03      	cmp	r3, #3
    8c32:	d11b      	bne.n	8c6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc6c>
		radio_tmr_tifs_set(RADIO_TIFS);
    8c34:	2096      	movs	r0, #150	; 0x96
    8c36:	f001 fda5 	bl	a784 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8c3a:	2300      	movs	r3, #0
    8c3c:	0019      	movs	r1, r3
    8c3e:	001a      	movs	r2, r3
    8c40:	0018      	movs	r0, r3
    8c42:	f001 fd15 	bl	a670 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8c46:	2336      	movs	r3, #54	; 0x36
    8c48:	0022      	movs	r2, r4
    8c4a:	33ff      	adds	r3, #255	; 0xff
    8c4c:	5ce3      	ldrb	r3, [r4, r3]
    8c4e:	32fc      	adds	r2, #252	; 0xfc
    8c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8c52:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    8c54:	5898      	ldr	r0, [r3, r2]
    8c56:	3008      	adds	r0, #8
    8c58:	f001 fc8e 	bl	a578 <radio_pkt_rx_set>
		radio_rssi_measure();
    8c5c:	f001 fd18 	bl	a690 <radio_rssi_measure>
		_radio.state = STATE_RX;
    8c60:	2301      	movs	r3, #1
    8c62:	7423      	strb	r3, [r4, #16]
		radio_rx_enable();
    8c64:	f001 fca0 	bl	a5a8 <radio_rx_enable>
    8c68:	f7fe fe43 	bl	78f2 <isr+0xbe>
		radio_filter_disable();
    8c6c:	f001 fd5a 	bl	a724 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    8c70:	7c23      	ldrb	r3, [r4, #16]
    8c72:	2b05      	cmp	r3, #5
    8c74:	d1bf      	bne.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c76:	2000      	movs	r0, #0
    8c78:	2204      	movs	r2, #4
    8c7a:	9000      	str	r0, [sp, #0]
    8c7c:	0003      	movs	r3, r0
    8c7e:	0001      	movs	r1, r0
    8c80:	f7fc f86e 	bl	4d60 <ticker_stop>
    8c84:	e7b7      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
	if (_radio.conn_curr == 0) {
    8c86:	0023      	movs	r3, r4
    8c88:	33fc      	adds	r3, #252	; 0xfc
    8c8a:	6958      	ldr	r0, [r3, #20]
    8c8c:	2800      	cmp	r0, #0
    8c8e:	d0b2      	beq.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    8c90:	0003      	movs	r3, r0
    8c92:	339b      	adds	r3, #155	; 0x9b
    8c94:	7819      	ldrb	r1, [r3, #0]
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    8c96:	2900      	cmp	r1, #0
    8c98:	d010      	beq.n	8cbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcbc>
    8c9a:	7be3      	ldrb	r3, [r4, #15]
    8c9c:	2b03      	cmp	r3, #3
    8c9e:	d004      	beq.n	8caa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcaa>
    8ca0:	0003      	movs	r3, r0
    8ca2:	3338      	adds	r3, #56	; 0x38
    8ca4:	781b      	ldrb	r3, [r3, #0]
    8ca6:	07db      	lsls	r3, r3, #31
    8ca8:	d508      	bpl.n	8cbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcbc>
			connection_release(_radio.conn_curr);
    8caa:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8cac:	f7fd fa5c 	bl	6168 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8cb0:	6960      	ldr	r0, [r4, #20]
    8cb2:	f7fd fc8b 	bl	65cc <connection_release>
			_radio.conn_curr = NULL;
    8cb6:	2300      	movs	r3, #0
    8cb8:	6163      	str	r3, [r4, #20]
    8cba:	e79c      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
	latency_event = _radio.conn_curr->latency_event;
    8cbc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    8cbe:	930b      	str	r3, [sp, #44]	; 0x2c
	elapsed_event = latency_event + 1;
    8cc0:	1c5e      	adds	r6, r3, #1
	if (_radio.packet_counter &&
    8cc2:	0023      	movs	r3, r4
    8cc4:	33ff      	adds	r3, #255	; 0xff
    8cc6:	7d5f      	ldrb	r7, [r3, #21]
	elapsed_event = latency_event + 1;
    8cc8:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    8cca:	2f00      	cmp	r7, #0
    8ccc:	d07b      	beq.n	8dc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc6>
		if (_radio.role == ROLE_SLAVE) {
    8cce:	7be3      	ldrb	r3, [r4, #15]
    8cd0:	2b03      	cmp	r3, #3
    8cd2:	d16e      	bne.n	8db2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdb2>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    8cd4:	f001 fe0a 	bl	a8ec <radio_tmr_aa_restore>
    8cd8:	0007      	movs	r7, r0
						     radio_tmr_ready_get();
    8cda:	f001 fe0d 	bl	a8f8 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    8cde:	34fc      	adds	r4, #252	; 0xfc
    8ce0:	6964      	ldr	r4, [r4, #20]
			start_to_address_actual_us = radio_tmr_aa_restore() -
    8ce2:	1a3f      	subs	r7, r7, r0
			window_widening_event_us =
    8ce4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8ce6:	4a79      	ldr	r2, [pc, #484]	; (8ecc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xecc>)
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    8ce8:	0003      	movs	r3, r0
    8cea:	3358      	adds	r3, #88	; 0x58
    8cec:	930c      	str	r3, [sp, #48]	; 0x30
			if (start_to_address_actual_us <=
    8cee:	429f      	cmp	r7, r3
    8cf0:	d84c      	bhi.n	8d8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8cf2:	2300      	movs	r3, #0
    8cf4:	2100      	movs	r1, #0
    8cf6:	f7f7 fb4f 	bl	398 <__aeabi_lmul>
    8cfa:	4a6f      	ldr	r2, [pc, #444]	; (8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>)
    8cfc:	2307      	movs	r3, #7
    8cfe:	f7f7 fb2b 	bl	358 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8d04:	4a71      	ldr	r2, [pc, #452]	; (8ecc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xecc>)
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8d06:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8d08:	2100      	movs	r1, #0
    8d0a:	1bd8      	subs	r0, r3, r7
    8d0c:	2300      	movs	r3, #0
    8d0e:	f7f7 fb43 	bl	398 <__aeabi_lmul>
    8d12:	4a69      	ldr	r2, [pc, #420]	; (8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>)
    8d14:	2307      	movs	r3, #7
    8d16:	f7f7 fb1f 	bl	358 <__aeabi_uldivmod>
    8d1a:	b281      	uxth	r1, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    8d1c:	2300      	movs	r3, #0
    8d1e:	64a3      	str	r3, [r4, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    8d20:	6523      	str	r3, [r4, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    8d22:	0023      	movs	r3, r4
    8d24:	33ec      	adds	r3, #236	; 0xec
    8d26:	681b      	ldr	r3, [r3, #0]
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d03b      	beq.n	8da4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda4>
				if (pdu_data_tx->len ||
    8d2c:	795b      	ldrb	r3, [r3, #5]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d104      	bne.n	8d3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd3c>
				    _radio.conn_curr->packet_tx_head_offset) {
    8d32:	0023      	movs	r3, r4
    8d34:	33ff      	adds	r3, #255	; 0xff
				if (pdu_data_tx->len ||
    8d36:	789b      	ldrb	r3, [r3, #2]
    8d38:	2b00      	cmp	r3, #0
    8d3a:	d001      	beq.n	8d40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd40>
					_radio.conn_curr->latency_event = 0;
    8d3c:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    8d3e:	8563      	strh	r3, [r4, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    8d40:	2200      	movs	r2, #0
    8d42:	4b60      	ldr	r3, [pc, #384]	; (8ec4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec4>)
    8d44:	33fc      	adds	r3, #252	; 0xfc
    8d46:	695b      	ldr	r3, [r3, #20]
    8d48:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    8d4a:	4c5e      	ldr	r4, [pc, #376]	; (8ec4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec4>)
    8d4c:	0027      	movs	r7, r4
    8d4e:	37fc      	adds	r7, #252	; 0xfc
    8d50:	6978      	ldr	r0, [r7, #20]
    8d52:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    8d54:	2b00      	cmp	r3, #0
    8d56:	d017      	beq.n	8d88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd88>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    8d58:	429e      	cmp	r6, r3
    8d5a:	d300      	bcc.n	8d5e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd5e>
    8d5c:	e092      	b.n	8e84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe84>
			_radio.conn_curr->latency_event = 0;
    8d5e:	2200      	movs	r2, #0
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8d60:	1b9b      	subs	r3, r3, r6
    8d62:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    8d64:	8542      	strh	r2, [r0, #42]	; 0x2a
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8d66:	8603      	strh	r3, [r0, #48]	; 0x30
				force = 1;
    8d68:	3201      	adds	r2, #1
			if (_radio.conn_curr->supervision_expire <= 6) {
    8d6a:	2b06      	cmp	r3, #6
    8d6c:	d949      	bls.n	8e02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe02>
			else if (_radio.role == ROLE_SLAVE) {
    8d6e:	7be3      	ldrb	r3, [r4, #15]
    8d70:	2b03      	cmp	r3, #3
    8d72:	d109      	bne.n	8d88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd88>
				if (latency_event != 0) {
    8d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d76:	0017      	movs	r7, r2
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d142      	bne.n	8e02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe02>
					force = _radio.conn_curr->slave.force & 0x01;
    8d7c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    8d7e:	401a      	ands	r2, r3
					_radio.conn_curr->slave.force >>= 1;
    8d80:	40fb      	lsrs	r3, r7
					if (force) {
    8d82:	2a00      	cmp	r2, #0
    8d84:	d139      	bne.n	8dfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdfa>
					_radio.conn_curr->slave.force >>= 1;
    8d86:	6543      	str	r3, [r0, #84]	; 0x54
	force = 0;
    8d88:	2200      	movs	r2, #0
    8d8a:	e03a      	b.n	8e02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe02>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8d8c:	2300      	movs	r3, #0
    8d8e:	0038      	movs	r0, r7
    8d90:	2100      	movs	r1, #0
    8d92:	f7f7 fb01 	bl	398 <__aeabi_lmul>
    8d96:	4a48      	ldr	r2, [pc, #288]	; (8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>)
    8d98:	2307      	movs	r3, #7
    8d9a:	f7f7 fadd 	bl	358 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8d9e:	2102      	movs	r1, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8da0:	b285      	uxth	r5, r0
    8da2:	e7bb      	b.n	8d1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd1c>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    8da4:	0023      	movs	r3, r4
    8da6:	3338      	adds	r3, #56	; 0x38
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	07db      	lsls	r3, r3, #31
    8dac:	d5c8      	bpl.n	8d40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd40>
				_radio.conn_curr->latency_event =
    8dae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8db0:	e7c5      	b.n	8d3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd3e>
		} else if (reason_peer) {
    8db2:	2900      	cmp	r1, #0
    8db4:	d005      	beq.n	8dc2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc2>
			_radio.conn_curr->master.terminate_ack = 1;
    8db6:	2301      	movs	r3, #1
	ticks_drift_minus = 0;
    8db8:	2100      	movs	r1, #0
			_radio.conn_curr->master.terminate_ack = 1;
    8dba:	3038      	adds	r0, #56	; 0x38
    8dbc:	7802      	ldrb	r2, [r0, #0]
    8dbe:	4313      	orrs	r3, r2
    8dc0:	7003      	strb	r3, [r0, #0]
	ticks_drift_plus = 0;
    8dc2:	000d      	movs	r5, r1
    8dc4:	e7bc      	b.n	8d40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd40>
	else if (_radio.conn_curr->connect_expire) {
    8dc6:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    8dc8:	2d00      	cmp	r5, #0
    8dca:	d00f      	beq.n	8dec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdec>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    8dcc:	42ae      	cmp	r6, r5
    8dce:	d204      	bcs.n	8dda <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdda>
			_radio.conn_curr->connect_expire -= elapsed_event;
    8dd0:	1bad      	subs	r5, r5, r6
    8dd2:	8585      	strh	r5, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    8dd4:	003d      	movs	r5, r7
    8dd6:	0029      	movs	r1, r5
    8dd8:	e7b7      	b.n	8d4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    8dda:	213e      	movs	r1, #62	; 0x3e
			connection_release(_radio.conn_curr);
    8ddc:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    8dde:	f7fd f9c3 	bl	6168 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8de2:	6960      	ldr	r0, [r4, #20]
    8de4:	f7fd fbf2 	bl	65cc <connection_release>
			_radio.conn_curr = NULL;
    8de8:	6167      	str	r7, [r4, #20]
    8dea:	e704      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
		if (!_radio.conn_curr->supervision_expire) {
    8dec:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    8dee:	2900      	cmp	r1, #0
    8df0:	d1f1      	bne.n	8dd6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdd6>
			_radio.conn_curr->supervision_expire =
    8df2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
	ticks_drift_plus = 0;
    8df4:	000d      	movs	r5, r1
			_radio.conn_curr->supervision_expire =
    8df6:	8603      	strh	r3, [r0, #48]	; 0x30
    8df8:	e7a7      	b.n	8d4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4a>
						_radio.conn_curr->slave.force |=
    8dfa:	2780      	movs	r7, #128	; 0x80
    8dfc:	063f      	lsls	r7, r7, #24
    8dfe:	433b      	orrs	r3, r7
    8e00:	6543      	str	r3, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    8e02:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    8e04:	2b00      	cmp	r3, #0
    8e06:	d003      	beq.n	8e10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe10>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    8e08:	429e      	cmp	r6, r3
    8e0a:	d244      	bcs.n	8e96 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe96>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    8e0c:	1b9e      	subs	r6, r3, r6
    8e0e:	8686      	strh	r6, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    8e10:	0003      	movs	r3, r0
    8e12:	335d      	adds	r3, #93	; 0x5d
    8e14:	781e      	ldrb	r6, [r3, #0]
    8e16:	3b01      	subs	r3, #1
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	429e      	cmp	r6, r3
    8e1c:	d007      	beq.n	8e2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2e>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    8e1e:	0003      	movs	r3, r0
    8e20:	335e      	adds	r3, #94	; 0x5e
    8e22:	781b      	ldrb	r3, [r3, #0]
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    8e24:	3b01      	subs	r3, #1
    8e26:	2b01      	cmp	r3, #1
    8e28:	d801      	bhi.n	8e2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2e>
		_radio.conn_curr->latency_event = 0;
    8e2a:	2300      	movs	r3, #0
    8e2c:	8543      	strh	r3, [r0, #42]	; 0x2a
    8e2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    8e30:	2a00      	cmp	r2, #0
    8e32:	d103      	bne.n	8e3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe3c>
    8e34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	lazy = 0;
    8e36:	0017      	movs	r7, r2
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    8e38:	42b3      	cmp	r3, r6
    8e3a:	d001      	beq.n	8e40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe40>
		lazy = _radio.conn_curr->latency_event + 1;
    8e3c:	3301      	adds	r3, #1
    8e3e:	b29f      	uxth	r7, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    8e40:	002b      	movs	r3, r5
    8e42:	430b      	orrs	r3, r1
    8e44:	433b      	orrs	r3, r7
    8e46:	d102      	bne.n	8e4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4e>
	    (lazy != 0) || (force != 0)) {
    8e48:	2a00      	cmp	r2, #0
    8e4a:	d100      	bne.n	8e4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4e>
    8e4c:	e6d3      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8e4e:	8c06      	ldrh	r6, [r0, #32]
		ticker_status =
    8e50:	2000      	movs	r0, #0
    8e52:	4b1f      	ldr	r3, [pc, #124]	; (8ed0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xed0>)
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8e54:	3607      	adds	r6, #7
    8e56:	b2f6      	uxtb	r6, r6
		ticker_status =
    8e58:	9305      	str	r3, [sp, #20]
    8e5a:	9204      	str	r2, [sp, #16]
    8e5c:	9100      	str	r1, [sp, #0]
    8e5e:	002b      	movs	r3, r5
				      (void *)(u32_t)ticker_id);
    8e60:	9606      	str	r6, [sp, #24]
		ticker_status =
    8e62:	9703      	str	r7, [sp, #12]
    8e64:	9002      	str	r0, [sp, #8]
    8e66:	9001      	str	r0, [sp, #4]
    8e68:	0032      	movs	r2, r6
    8e6a:	0001      	movs	r1, r0
    8e6c:	f7fb ff28 	bl	4cc0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8e70:	2302      	movs	r3, #2
    8e72:	4398      	bics	r0, r3
    8e74:	d100      	bne.n	8e78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe78>
    8e76:	e6be      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
    8e78:	7ba3      	ldrb	r3, [r4, #14]
    8e7a:	429e      	cmp	r6, r3
    8e7c:	d100      	bne.n	8e80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe80>
    8e7e:	e6ba      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
    8e80:	f7fe fd29 	bl	78d6 <isr+0xa2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    8e84:	2108      	movs	r1, #8
    8e86:	f7fd f96f 	bl	6168 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8e8a:	6978      	ldr	r0, [r7, #20]
    8e8c:	f7fd fb9e 	bl	65cc <connection_release>
			_radio.conn_curr = NULL;
    8e90:	2300      	movs	r3, #0
    8e92:	617b      	str	r3, [r7, #20]
    8e94:	e6af      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8e96:	2122      	movs	r1, #34	; 0x22
    8e98:	e707      	b.n	8caa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcaa>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    8e9a:	3b04      	subs	r3, #4
    8e9c:	2b01      	cmp	r3, #1
    8e9e:	d901      	bls.n	8ea4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea4>
    8ea0:	f7fe fd19 	bl	78d6 <isr+0xa2>
		_radio.state = STATE_NONE;
    8ea4:	2300      	movs	r3, #0
    8ea6:	7423      	strb	r3, [r4, #16]
    8ea8:	f7fe fd44 	bl	7934 <isr+0x100>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    8eac:	359b      	adds	r5, #155	; 0x9b
    8eae:	2328      	movs	r3, #40	; 0x28
    8eb0:	e517      	b.n	88e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e2>
    8eb2:	46c0      	nop			; (mov r8, r8)
    8eb4:	d4a51000 	.word	0xd4a51000
    8eb8:	1afd498d 	.word	0x1afd498d
    8ebc:	00000f48 	.word	0x00000f48
    8ec0:	000067a1 	.word	0x000067a1
    8ec4:	20000284 	.word	0x20000284
    8ec8:	20002350 	.word	0x20002350
    8ecc:	3b9aca00 	.word	0x3b9aca00
    8ed0:	00006785 	.word	0x00006785

00008ed4 <mayfly_xtal_stop_calc>:
{
    8ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8ed6:	2302      	movs	r3, #2
	ticker_id_next = 0xff;
    8ed8:	2523      	movs	r5, #35	; 0x23
{
    8eda:	b091      	sub	sp, #68	; 0x44
	ticker_id_next = 0xff;
    8edc:	aa02      	add	r2, sp, #8
    8ede:	18ad      	adds	r5, r5, r2
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8ee0:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    8ee2:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    8ee4:	2300      	movs	r3, #0
{
    8ee6:	0004      	movs	r4, r0
	struct connection *conn_curr = NULL;
    8ee8:	930c      	str	r3, [sp, #48]	; 0x30
	struct connection *conn_next = NULL;
    8eea:	930d      	str	r3, [sp, #52]	; 0x34
	ticker_id_next = 0xff;
    8eec:	702a      	strb	r2, [r5, #0]
	ticks_to_expire = 0;
    8eee:	930e      	str	r3, [sp, #56]	; 0x38
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ef0:	ab0b      	add	r3, sp, #44	; 0x2c
    8ef2:	9302      	str	r3, [sp, #8]
    8ef4:	4b6e      	ldr	r3, [pc, #440]	; (90b0 <mayfly_xtal_stop_calc+0x1dc>)
    8ef6:	002a      	movs	r2, r5
    8ef8:	9301      	str	r3, [sp, #4]
    8efa:	ab0e      	add	r3, sp, #56	; 0x38
    8efc:	9300      	str	r3, [sp, #0]
    8efe:	2101      	movs	r1, #1
    8f00:	ab0f      	add	r3, sp, #60	; 0x3c
    8f02:	2000      	movs	r0, #0
    8f04:	f7fb ff5a 	bl	4dbc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8f08:	2802      	cmp	r0, #2
    8f0a:	d009      	beq.n	8f20 <mayfly_xtal_stop_calc+0x4c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d00a      	beq.n	8f28 <mayfly_xtal_stop_calc+0x54>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8f12:	b662      	cpsie	i
    8f14:	2004      	movs	r0, #4
    8f16:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8f18:	2101      	movs	r1, #1
    8f1a:	2000      	movs	r0, #0
    8f1c:	f7fb ffb4 	bl	4e88 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f22:	2b02      	cmp	r3, #2
    8f24:	d0f8      	beq.n	8f18 <mayfly_xtal_stop_calc+0x44>
    8f26:	e7f1      	b.n	8f0c <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    8f28:	782b      	ldrb	r3, [r5, #0]
				    _radio.connection_count));
    8f2a:	2bff      	cmp	r3, #255	; 0xff
    8f2c:	d005      	beq.n	8f3a <mayfly_xtal_stop_calc+0x66>
    8f2e:	4a61      	ldr	r2, [pc, #388]	; (90b4 <mayfly_xtal_stop_calc+0x1e0>)
    8f30:	32ff      	adds	r2, #255	; 0xff
    8f32:	7b52      	ldrb	r2, [r2, #13]
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8f34:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    8f36:	4293      	cmp	r3, r2
    8f38:	dada      	bge.n	8ef0 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    8f3a:	1f5a      	subs	r2, r3, #5
    8f3c:	b2d2      	uxtb	r2, r2
    8f3e:	4f5e      	ldr	r7, [pc, #376]	; (90b8 <mayfly_xtal_stop_calc+0x1e4>)
    8f40:	2af9      	cmp	r2, #249	; 0xf9
    8f42:	d805      	bhi.n	8f50 <mayfly_xtal_stop_calc+0x7c>
				_radio.connection_count))) {
    8f44:	4a5b      	ldr	r2, [pc, #364]	; (90b4 <mayfly_xtal_stop_calc+0x1e0>)
    8f46:	32ff      	adds	r2, #255	; 0xff
    8f48:	7b52      	ldrb	r2, [r2, #13]
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8f4a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    8f4c:	4293      	cmp	r3, r2
    8f4e:	db07      	blt.n	8f60 <mayfly_xtal_stop_calc+0x8c>
		if (s_xtal_retained) {
    8f50:	783b      	ldrb	r3, [r7, #0]
    8f52:	2b00      	cmp	r3, #0
    8f54:	d002      	beq.n	8f5c <mayfly_xtal_stop_calc+0x88>
    8f56:	2001      	movs	r0, #1
    8f58:	f7fd f858 	bl	600c <mayfly_xtal_retain.part.15>
}
    8f5c:	b011      	add	sp, #68	; 0x44
    8f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    8f60:	b2e0      	uxtb	r0, r4
    8f62:	a90c      	add	r1, sp, #48	; 0x30
    8f64:	f7fd f834 	bl	5fd0 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    8f68:	2800      	cmp	r0, #0
    8f6a:	d0d2      	beq.n	8f12 <mayfly_xtal_stop_calc+0x3e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    8f6c:	6802      	ldr	r2, [r0, #0]
    8f6e:	6841      	ldr	r1, [r0, #4]
    8f70:	2a00      	cmp	r2, #0
    8f72:	da2b      	bge.n	8fcc <mayfly_xtal_stop_calc+0xf8>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    8f74:	6883      	ldr	r3, [r0, #8]
    8f76:	428b      	cmp	r3, r1
    8f78:	d200      	bcs.n	8f7c <mayfly_xtal_stop_calc+0xa8>
    8f7a:	000b      	movs	r3, r1
	ticks_slot_abs += hdr_curr->ticks_slot;
    8f7c:	68c2      	ldr	r2, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8f7e:	a90d      	add	r1, sp, #52	; 0x34
	ticks_slot_abs += hdr_curr->ticks_slot;
    8f80:	189b      	adds	r3, r3, r2
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8f82:	7828      	ldrb	r0, [r5, #0]
	ticks_slot_abs += hdr_curr->ticks_slot;
    8f84:	9309      	str	r3, [sp, #36]	; 0x24
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8f86:	f7fd f823 	bl	5fd0 <hdr_conn_get>
    8f8a:	1e04      	subs	r4, r0, #0
	LL_ASSERT(hdr_next);
    8f8c:	d0c1      	beq.n	8f12 <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    8f8e:	6843      	ldr	r3, [r0, #4]
    8f90:	6886      	ldr	r6, [r0, #8]
    8f92:	429e      	cmp	r6, r3
    8f94:	d200      	bcs.n	8f98 <mayfly_xtal_stop_calc+0xc4>
    8f96:	001e      	movs	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    8f98:	6823      	ldr	r3, [r4, #0]
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	da05      	bge.n	8faa <mayfly_xtal_stop_calc+0xd6>
		ticks_to_expire -=
    8f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			(hdr_next->ticks_xtal_to_start &
    8fa0:	005b      	lsls	r3, r3, #1
		ticks_to_expire -=
    8fa2:	18b2      	adds	r2, r6, r2
			(hdr_next->ticks_xtal_to_start &
    8fa4:	085b      	lsrs	r3, r3, #1
		ticks_to_expire -=
    8fa6:	1ad3      	subs	r3, r2, r3
    8fa8:	930e      	str	r3, [sp, #56]	; 0x38
	if (ticks_to_expire >
    8faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8fae:	3331      	adds	r3, #49	; 0x31
    8fb0:	4293      	cmp	r3, r2
    8fb2:	d210      	bcs.n	8fd6 <mayfly_xtal_stop_calc+0x102>
		if (s_xtal_retained) {
    8fb4:	783b      	ldrb	r3, [r7, #0]
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	d002      	beq.n	8fc0 <mayfly_xtal_stop_calc+0xec>
    8fba:	2001      	movs	r0, #1
    8fbc:	f7fd f826 	bl	600c <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    8fc0:	782a      	ldrb	r2, [r5, #0]
    8fc2:	2101      	movs	r1, #1
    8fc4:	0020      	movs	r0, r4
    8fc6:	f7fd f8ab 	bl	6120 <prepare_normal_set>
    8fca:	e7c7      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    8fcc:	000b      	movs	r3, r1
    8fce:	4291      	cmp	r1, r2
    8fd0:	d2d4      	bcs.n	8f7c <mayfly_xtal_stop_calc+0xa8>
    8fd2:	0013      	movs	r3, r2
    8fd4:	e7d2      	b.n	8f7c <mayfly_xtal_stop_calc+0xa8>
		if (!s_xtal_retained) {
    8fd6:	7839      	ldrb	r1, [r7, #0]
    8fd8:	2900      	cmp	r1, #0
    8fda:	d108      	bne.n	8fee <mayfly_xtal_stop_calc+0x11a>
			s_xtal_retained = 1;
    8fdc:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    8fde:	4b37      	ldr	r3, [pc, #220]	; (90bc <mayfly_xtal_stop_calc+0x1e8>)
    8fe0:	000a      	movs	r2, r1
			s_xtal_retained = 1;
    8fe2:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    8fe4:	f7fb f8b6 	bl	4154 <mayfly_enqueue>
			LL_ASSERT(!retval);
    8fe8:	2800      	cmp	r0, #0
    8fea:	d000      	beq.n	8fee <mayfly_xtal_stop_calc+0x11a>
    8fec:	e791      	b.n	8f12 <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    8fee:	6823      	ldr	r3, [r4, #0]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	db14      	blt.n	901e <mayfly_xtal_stop_calc+0x14a>
    8ff4:	429e      	cmp	r6, r3
    8ff6:	d212      	bcs.n	901e <mayfly_xtal_stop_calc+0x14a>
			ticker_status =
    8ff8:	2000      	movs	r0, #0
    8ffa:	4931      	ldr	r1, [pc, #196]	; (90c0 <mayfly_xtal_stop_calc+0x1ec>)
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    8ffc:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ffe:	b29b      	uxth	r3, r3
			ticker_status =
    9000:	782a      	ldrb	r2, [r5, #0]
    9002:	9105      	str	r1, [sp, #20]
    9004:	9302      	str	r3, [sp, #8]
    9006:	9406      	str	r4, [sp, #24]
    9008:	9004      	str	r0, [sp, #16]
    900a:	9003      	str	r0, [sp, #12]
    900c:	9001      	str	r0, [sp, #4]
    900e:	9000      	str	r0, [sp, #0]
    9010:	2101      	movs	r1, #1
    9012:	f7fb fe55 	bl	4cc0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9016:	2302      	movs	r3, #2
    9018:	4398      	bics	r0, r3
    901a:	d000      	beq.n	901e <mayfly_xtal_stop_calc+0x14a>
    901c:	e779      	b.n	8f12 <mayfly_xtal_stop_calc+0x3e>
		if (!conn_curr || !conn_next) {
    901e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9020:	2d00      	cmp	r5, #0
    9022:	d09b      	beq.n	8f5c <mayfly_xtal_stop_calc+0x88>
    9024:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9026:	2c00      	cmp	r4, #0
    9028:	d098      	beq.n	8f5c <mayfly_xtal_stop_calc+0x88>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    902a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    902c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    902e:	4298      	cmp	r0, r3
    9030:	d000      	beq.n	9034 <mayfly_xtal_stop_calc+0x160>
    9032:	e793      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    9034:	2324      	movs	r3, #36	; 0x24
    9036:	4a23      	ldr	r2, [pc, #140]	; (90c4 <mayfly_xtal_stop_calc+0x1f0>)
    9038:	33ff      	adds	r3, #255	; 0xff
    903a:	2100      	movs	r1, #0
    903c:	f7f7 f9ac 	bl	398 <__aeabi_lmul>
    9040:	4a21      	ldr	r2, [pc, #132]	; (90c8 <mayfly_xtal_stop_calc+0x1f4>)
    9042:	2307      	movs	r3, #7
    9044:	f7f7 f988 	bl	358 <__aeabi_uldivmod>
			while (ticks_to_expire > ticks_conn_interval) {
    9048:	2200      	movs	r2, #0
    904a:	2101      	movs	r1, #1
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    904c:	0200      	lsls	r0, r0, #8
    904e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9050:	0a00      	lsrs	r0, r0, #8
			while (ticks_to_expire > ticks_conn_interval) {
    9052:	4298      	cmp	r0, r3
    9054:	d318      	bcc.n	9088 <mayfly_xtal_stop_calc+0x1b4>
    9056:	2a00      	cmp	r2, #0
    9058:	d000      	beq.n	905c <mayfly_xtal_stop_calc+0x188>
    905a:	930e      	str	r3, [sp, #56]	; 0x38
			if (conn_curr->role && !conn_next->role &&
    905c:	7f69      	ldrb	r1, [r5, #29]
    905e:	7f62      	ldrb	r2, [r4, #29]
    9060:	297f      	cmp	r1, #127	; 0x7f
    9062:	d914      	bls.n	908e <mayfly_xtal_stop_calc+0x1ba>
    9064:	2a7f      	cmp	r2, #127	; 0x7f
    9066:	d900      	bls.n	906a <mayfly_xtal_stop_calc+0x196>
    9068:	e778      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
			     (ticks_slot_abs +
    906a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    906c:	3214      	adds	r2, #20
			if (conn_curr->role && !conn_next->role &&
    906e:	429a      	cmp	r2, r3
    9070:	d800      	bhi.n	9074 <mayfly_xtal_stop_calc+0x1a0>
    9072:	e773      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_curr);
    9074:	0028      	movs	r0, r5
    9076:	f7fc fd37 	bl	5ae8 <conn_update_req>
				if (status == 2) {
    907a:	2802      	cmp	r0, #2
    907c:	d000      	beq.n	9080 <mayfly_xtal_stop_calc+0x1ac>
    907e:	e76d      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_next);
    9080:	980d      	ldr	r0, [sp, #52]	; 0x34
					conn_update_req(conn_curr);
    9082:	f7fc fd31 	bl	5ae8 <conn_update_req>
    9086:	e769      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
				ticks_to_expire -= ticks_conn_interval;
    9088:	1a1b      	subs	r3, r3, r0
    908a:	000a      	movs	r2, r1
    908c:	e7e1      	b.n	9052 <mayfly_xtal_stop_calc+0x17e>
			} else if (!conn_curr->role && conn_next->role &&
    908e:	2a7f      	cmp	r2, #127	; 0x7f
    9090:	d800      	bhi.n	9094 <mayfly_xtal_stop_calc+0x1c0>
    9092:	e763      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
				    (ticks_slot_abs +
    9094:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9096:	3214      	adds	r2, #20
			} else if (!conn_curr->role && conn_next->role &&
    9098:	429a      	cmp	r2, r3
    909a:	d800      	bhi.n	909e <mayfly_xtal_stop_calc+0x1ca>
    909c:	e75e      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_next);
    909e:	0020      	movs	r0, r4
    90a0:	f7fc fd22 	bl	5ae8 <conn_update_req>
				if (status == 2) {
    90a4:	2802      	cmp	r0, #2
    90a6:	d000      	beq.n	90aa <mayfly_xtal_stop_calc+0x1d6>
    90a8:	e758      	b.n	8f5c <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_curr);
    90aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    90ac:	e7e9      	b.n	9082 <mayfly_xtal_stop_calc+0x1ae>
    90ae:	46c0      	nop			; (mov r8, r8)
    90b0:	00005a51 	.word	0x00005a51
    90b4:	20000284 	.word	0x20000284
    90b8:	20000488 	.word	0x20000488
    90bc:	200023b0 	.word	0x200023b0
    90c0:	00005a55 	.word	0x00005a55
    90c4:	09ce5400 	.word	0x09ce5400
    90c8:	1afd498d 	.word	0x1afd498d

000090cc <event_master>:
{
    90cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    90ce:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    90d0:	4b49      	ldr	r3, [pc, #292]	; (91f8 <event_master+0x12c>)
{
    90d2:	0006      	movs	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    90d4:	7bdd      	ldrb	r5, [r3, #15]
    90d6:	b2ed      	uxtb	r5, r5
    90d8:	2d00      	cmp	r5, #0
    90da:	d002      	beq.n	90e2 <event_master+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    90dc:	b662      	cpsie	i
    90de:	2004      	movs	r0, #4
    90e0:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    90e2:	7b1a      	ldrb	r2, [r3, #12]
    90e4:	8c21      	ldrh	r1, [r4, #32]
    90e6:	b2d2      	uxtb	r2, r2
    90e8:	3107      	adds	r1, #7
    90ea:	428a      	cmp	r2, r1
    90ec:	d1f6      	bne.n	90dc <event_master+0x10>
	_radio.role = ROLE_MASTER;
    90ee:	2704      	movs	r7, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    90f0:	b2d2      	uxtb	r2, r2
	_radio.role = ROLE_MASTER;
    90f2:	73df      	strb	r7, [r3, #15]
	_radio.state = STATE_TX;
    90f4:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    90f6:	731d      	strb	r5, [r3, #12]
	_radio.ticker_id_event =
    90f8:	735a      	strb	r2, [r3, #13]
	_radio.packet_counter = 0;
    90fa:	001a      	movs	r2, r3
	_radio.state = STATE_TX;
    90fc:	7418      	strb	r0, [r3, #16]
	_radio.packet_counter = 0;
    90fe:	32ff      	adds	r2, #255	; 0xff
	_radio.ticks_anchor = ticks_at_expire;
    9100:	605e      	str	r6, [r3, #4]
	_radio.conn_curr = conn;
    9102:	33fc      	adds	r3, #252	; 0xfc
	_radio.packet_counter = 0;
    9104:	7555      	strb	r5, [r2, #21]
	_radio.crc_expire = 0;
    9106:	7595      	strb	r5, [r2, #22]
	_radio.conn_curr = conn;
    9108:	615c      	str	r4, [r3, #20]
	conn->latency_event = conn->latency_prepare;
    910a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    910c:	8525      	strh	r5, [r4, #40]	; 0x28
	conn->latency_event = conn->latency_prepare;
    910e:	8563      	strh	r3, [r4, #42]	; 0x2a
	packet_tx_enqueue(2);
    9110:	f7fd fa0c 	bl	652c <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    9114:	a901      	add	r1, sp, #4
    9116:	0020      	movs	r0, r4
    9118:	f7fe fb20 	bl	775c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    911c:	0021      	movs	r1, r4
    911e:	2201      	movs	r2, #1
    9120:	31a8      	adds	r1, #168	; 0xa8
    9122:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    9124:	7809      	ldrb	r1, [r1, #0]
	pdu_data_tx->sn = conn->sn;
    9126:	4013      	ands	r3, r2
    9128:	00d8      	lsls	r0, r3, #3
    912a:	9b01      	ldr	r3, [sp, #4]
    912c:	3207      	adds	r2, #7
    912e:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
    9130:	0849      	lsrs	r1, r1, #1
	pdu_data_tx->sn = conn->sn;
    9132:	4393      	bics	r3, r2
	pdu_data_tx->nesn = conn->nesn;
    9134:	4303      	orrs	r3, r0
    9136:	43bb      	bics	r3, r7
    9138:	0027      	movs	r7, r4
    913a:	3a07      	subs	r2, #7
    913c:	4011      	ands	r1, r2
    913e:	0089      	lsls	r1, r1, #2
    9140:	9a01      	ldr	r2, [sp, #4]
    9142:	430b      	orrs	r3, r1
    9144:	7013      	strb	r3, [r2, #0]
	connection_configure(conn);
    9146:	0020      	movs	r0, r4
    9148:	f7fe fa34 	bl	75b4 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    914c:	2096      	movs	r0, #150	; 0x96
    914e:	f001 fb19 	bl	a784 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    9152:	0028      	movs	r0, r5
    9154:	f001 fa84 	bl	a660 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    9158:	9901      	ldr	r1, [sp, #4]
    915a:	0020      	movs	r0, r4
    915c:	f7fc ff8e 	bl	607c <tx_packet_set>
	if (conn->data_chan_sel) {
    9160:	7f63      	ldrb	r3, [r4, #29]
    9162:	3717      	adds	r7, #23
    9164:	069d      	lsls	r5, r3, #26
    9166:	065b      	lsls	r3, r3, #25
    9168:	d520      	bpl.n	91ac <event_master+0xe0>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    916a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    916c:	0eab      	lsrs	r3, r5, #26
    916e:	3801      	subs	r0, #1
    9170:	8be1      	ldrh	r1, [r4, #30]
    9172:	b280      	uxth	r0, r0
    9174:	003a      	movs	r2, r7
    9176:	f7fd fd6d 	bl	6c54 <chan_sel_2>
	chan_set(data_chan_use);
    917a:	f7fd f939 	bl	63f0 <chan_set>
		remainder_us = radio_tmr_start(1,
    917e:	0031      	movs	r1, r6
    9180:	4d1d      	ldr	r5, [pc, #116]	; (91f8 <event_master+0x12c>)
    9182:	3109      	adds	r1, #9
    9184:	68aa      	ldr	r2, [r5, #8]
    9186:	2001      	movs	r0, #1
    9188:	f001 fb04 	bl	a794 <radio_tmr_start>
		radio_tmr_end_capture();
    918c:	f001 fbbc 	bl	a908 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    9190:	8c21      	ldrh	r1, [r4, #32]
    9192:	0032      	movs	r2, r6
    9194:	3107      	adds	r1, #7
    9196:	b2c9      	uxtb	r1, r1
    9198:	0020      	movs	r0, r4
    919a:	f7fd fd9b 	bl	6cd4 <preempt_calc>
	if (0 !=
    919e:	2800      	cmp	r0, #0
    91a0:	d020      	beq.n	91e4 <event_master+0x118>
		_radio.state = STATE_STOP;
    91a2:	2304      	movs	r3, #4
    91a4:	742b      	strb	r3, [r5, #16]
		radio_disable();
    91a6:	f001 fa0b 	bl	a5c0 <radio_disable>
}
    91aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    91ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    91ae:	7fa0      	ldrb	r0, [r4, #30]
    91b0:	3301      	adds	r3, #1
    91b2:	4358      	muls	r0, r3
    91b4:	7fe3      	ldrb	r3, [r4, #31]
    91b6:	2125      	movs	r1, #37	; 0x25
    91b8:	18c0      	adds	r0, r0, r3
    91ba:	f7f7 f8a9 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    91be:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    91c0:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    91c2:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    91c4:	08c3      	lsrs	r3, r0, #3
    91c6:	5cfb      	ldrb	r3, [r7, r3]
    91c8:	4011      	ands	r1, r2
    91ca:	410b      	asrs	r3, r1
    91cc:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    91ce:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    91d0:	4213      	tst	r3, r2
    91d2:	d1d2      	bne.n	917a <event_master+0xae>
		chan_index = chan_next % chan_count;
    91d4:	0029      	movs	r1, r5
    91d6:	f7f7 f83b 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    91da:	0038      	movs	r0, r7
		chan_index = chan_next % chan_count;
    91dc:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    91de:	f7fc fc48 	bl	5a72 <chan_sel_remap>
    91e2:	e7ca      	b.n	917a <event_master+0xae>
		ticker_status =
    91e4:	0003      	movs	r3, r0
    91e6:	4a05      	ldr	r2, [pc, #20]	; (91fc <event_master+0x130>)
    91e8:	0001      	movs	r1, r0
    91ea:	f7fb fe1d 	bl	4e28 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    91ee:	2302      	movs	r3, #2
    91f0:	4398      	bics	r0, r3
    91f2:	d000      	beq.n	91f6 <event_master+0x12a>
    91f4:	e772      	b.n	90dc <event_master+0x10>
    91f6:	e7d8      	b.n	91aa <event_master+0xde>
    91f8:	20000284 	.word	0x20000284
    91fc:	00005fb5 	.word	0x00005fb5

00009200 <radio_init>:
{
    9200:	b5f0      	push	{r4, r5, r6, r7, lr}
    9202:	b087      	sub	sp, #28
    9204:	9201      	str	r2, [sp, #4]
    9206:	aa0c      	add	r2, sp, #48	; 0x30
    9208:	7816      	ldrb	r6, [r2, #0]
    920a:	aa0d      	add	r2, sp, #52	; 0x34
    920c:	8817      	ldrh	r7, [r2, #0]
    920e:	aa0e      	add	r2, sp, #56	; 0x38
    9210:	8812      	ldrh	r2, [r2, #0]
    9212:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9214:	9205      	str	r2, [sp, #20]
    9216:	aa10      	add	r2, sp, #64	; 0x40
    9218:	8812      	ldrh	r2, [r2, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    921a:	2482      	movs	r4, #130	; 0x82
{
    921c:	9202      	str	r2, [sp, #8]
	_radio.hf_clock = hf_clock;
    921e:	4a35      	ldr	r2, [pc, #212]	; (92f4 <radio_init+0xf4>)
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9220:	0064      	lsls	r4, r4, #1
	_radio.hf_clock = hf_clock;
    9222:	6010      	str	r0, [r2, #0]
	_radio.sca = sca;
    9224:	0010      	movs	r0, r2
    9226:	30ff      	adds	r0, #255	; 0xff
    9228:	7741      	strb	r1, [r0, #29]
	mem_radio_end = mem_radio + mem_size;
    922a:	9902      	ldr	r1, [sp, #8]
    922c:	1869      	adds	r1, r5, r1
    922e:	9103      	str	r1, [sp, #12]
	_radio.connection_count = connection_count_max;
    9230:	4669      	mov	r1, sp
    9232:	7909      	ldrb	r1, [r1, #4]
    9234:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
    9236:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9238:	9901      	ldr	r1, [sp, #4]
	_radio.conn_pool = mem_radio;
    923a:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    923c:	434c      	muls	r4, r1
	_radio.conn_pool = mem_radio;
    923e:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9240:	192c      	adds	r4, r5, r4
	tx_count_max += 1;
    9242:	1c75      	adds	r5, r6, #1
	rx_count_max += 3;
    9244:	1cd9      	adds	r1, r3, #3
	tx_count_max += 1;
    9246:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
    9248:	3304      	adds	r3, #4
	tx_count_max += 1;
    924a:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
    924c:	b2dd      	uxtb	r5, r3
    924e:	239a      	movs	r3, #154	; 0x9a
	_radio.packet_tx_count = (tx_count_max + 1);
    9250:	3602      	adds	r6, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    9252:	005b      	lsls	r3, r3, #1
    9254:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    9256:	b2f6      	uxtb	r6, r6
    9258:	3334      	adds	r3, #52	; 0x34
    925a:	54d6      	strb	r6, [r2, r3]
	rx_count_max += 3;
    925c:	b2c9      	uxtb	r1, r1
	_radio.link_rx_data_quota = rx_count_max;
    925e:	3b20      	subs	r3, #32
    9260:	54d1      	strb	r1, [r2, r3]
		(sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);
    9262:	00ab      	lsls	r3, r5, #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9264:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx = (void *)mem_radio;
    9266:	6344      	str	r4, [r0, #52]	; 0x34
	mem_radio +=
    9268:	18e4      	adds	r4, r4, r3
	_radio.pkt_tx = (void *)mem_radio;
    926a:	6644      	str	r4, [r0, #100]	; 0x64
	_radio.packet_data_octets_max = packet_data_octets_max;
    926c:	32fe      	adds	r2, #254	; 0xfe
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    926e:	19a4      	adds	r4, r4, r6
	    (offsetof(struct pdu_data, lldata) +
    9270:	1cfb      	adds	r3, r7, #3
	_radio.pkt_release = (void *)mem_radio;
    9272:	6684      	str	r4, [r0, #104]	; 0x68
	_radio.packet_data_octets_max = packet_data_octets_max;
    9274:	8557      	strh	r7, [r2, #42]	; 0x2a
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9276:	19a4      	adds	r4, r4, r6
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    9278:	2b28      	cmp	r3, #40	; 0x28
    927a:	d92f      	bls.n	92dc <radio_init+0xdc>
		_radio.packet_rx_data_pool_size =
    927c:	2303      	movs	r3, #3
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    927e:	370e      	adds	r7, #14
		_radio.packet_rx_data_pool_size =
    9280:	439f      	bics	r7, r3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9282:	4e1c      	ldr	r6, [pc, #112]	; (92f4 <radio_init+0xf4>)
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9284:	4379      	muls	r1, r7
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9286:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
    9288:	8591      	strh	r1, [r2, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    928a:	2130      	movs	r1, #48	; 0x30
    928c:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    928e:	8d9f      	ldrh	r7, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9290:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9292:	0038      	movs	r0, r7
    9294:	f7f6 ff98 	bl	1c8 <__aeabi_uidiv>
    9298:	2397      	movs	r3, #151	; 0x97
	_radio.pkt_rx_data_pool = mem_radio;
    929a:	0032      	movs	r2, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    929c:	005b      	lsls	r3, r3, #1
    929e:	54f0      	strb	r0, [r6, r3]
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    92a0:	9b01      	ldr	r3, [sp, #4]
	_radio.pkt_rx_data_pool = mem_radio;
    92a2:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    92a4:	18ed      	adds	r5, r5, r3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92a6:	2303      	movs	r3, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    92a8:	00ed      	lsls	r5, r5, #3
	_radio.pkt_rx_data_pool = mem_radio;
    92aa:	6254      	str	r4, [r2, #36]	; 0x24
	mem_radio += _radio.packet_rx_data_pool_size;
    92ac:	19e4      	adds	r4, r4, r7
	_radio.link_rx_pool = mem_radio;
    92ae:	63d4      	str	r4, [r2, #60]	; 0x3c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    92b0:	1964      	adds	r4, r4, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92b2:	9d05      	ldr	r5, [sp, #20]
	_radio.pkt_tx_ctrl_pool = mem_radio;
    92b4:	6514      	str	r4, [r2, #80]	; 0x50
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92b6:	350a      	adds	r5, #10
    92b8:	439d      	bics	r5, r3
	_radio.packet_tx_data_size =
    92ba:	335a      	adds	r3, #90	; 0x5a
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92bc:	b2ad      	uxth	r5, r5
	_radio.packet_tx_data_size =
    92be:	33ff      	adds	r3, #255	; 0xff
    92c0:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    92c2:	9b04      	ldr	r3, [sp, #16]
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    92c4:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    92c6:	436b      	muls	r3, r5
    92c8:	18e5      	adds	r5, r4, r3
	retcode = (mem_radio - mem_radio_end);
    92ca:	9b03      	ldr	r3, [sp, #12]
	_radio.pkt_tx_data_pool = mem_radio;
    92cc:	6594      	str	r4, [r2, #88]	; 0x58
	retcode = (mem_radio - mem_radio_end);
    92ce:	1aed      	subs	r5, r5, r3
	if (retcode) {
    92d0:	d006      	beq.n	92e0 <radio_init+0xe0>
		return (retcode + mem_size);
    92d2:	9b02      	ldr	r3, [sp, #8]
    92d4:	18ed      	adds	r5, r5, r3
}
    92d6:	0028      	movs	r0, r5
    92d8:	b007      	add	sp, #28
    92da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    92dc:	2730      	movs	r7, #48	; 0x30
    92de:	e7d0      	b.n	9282 <radio_init+0x82>
	_radio.fc_ena = 1;
    92e0:	23bb      	movs	r3, #187	; 0xbb
    92e2:	2201      	movs	r2, #1
    92e4:	005b      	lsls	r3, r3, #1
    92e6:	54f2      	strb	r2, [r6, r3]
	common_init();
    92e8:	f7fd fc36 	bl	6b58 <common_init>
	radio_setup();
    92ec:	f001 f8be 	bl	a46c <radio_setup>
	return retcode;
    92f0:	e7f1      	b.n	92d6 <radio_init+0xd6>
    92f2:	46c0      	nop			; (mov r8, r8)
    92f4:	20000284 	.word	0x20000284

000092f8 <ll_reset>:
{
    92f8:	b570      	push	{r4, r5, r6, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    92fa:	2103      	movs	r1, #3
    92fc:	2005      	movs	r0, #5
    92fe:	f7fc fc8d 	bl	5c1c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    9302:	2104      	movs	r1, #4
    9304:	2006      	movs	r0, #6
    9306:	f7fc fc89 	bl	5c1c <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    930a:	4c25      	ldr	r4, [pc, #148]	; (93a0 <ll_reset+0xa8>)
    930c:	2500      	movs	r5, #0
    930e:	0026      	movs	r6, r4
    9310:	36ff      	adds	r6, #255	; 0xff
    9312:	7b73      	ldrb	r3, [r6, #13]
    9314:	42ab      	cmp	r3, r5
    9316:	d83b      	bhi.n	9390 <ll_reset+0x98>
	_radio.advertiser.is_enabled = 0;
    9318:	217f      	movs	r1, #127	; 0x7f
    931a:	1d62      	adds	r2, r4, #5
    931c:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    931e:	2500      	movs	r5, #0
	_radio.advertiser.is_enabled = 0;
    9320:	400b      	ands	r3, r1
    9322:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    9324:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    9326:	0022      	movs	r2, r4
	_radio.advertiser.conn = NULL;
    9328:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
    932a:	32dc      	adds	r2, #220	; 0xdc
	_radio.advertiser.conn = NULL;
    932c:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
    932e:	7813      	ldrb	r3, [r2, #0]
    9330:	397e      	subs	r1, #126	; 0x7e
    9332:	438b      	bics	r3, r1
    9334:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
    9336:	0023      	movs	r3, r4
    9338:	33fc      	adds	r3, #252	; 0xfc
    933a:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    933c:	0023      	movs	r3, r4
    933e:	312f      	adds	r1, #47	; 0x2f
    9340:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9342:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9344:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9346:	f7f6 ff3f 	bl	1c8 <__aeabi_uidiv>
    934a:	2397      	movs	r3, #151	; 0x97
    934c:	005b      	lsls	r3, r3, #1
    934e:	54e0      	strb	r0, [r4, r3]
	_radio.packet_rx_last = 0;
    9350:	2336      	movs	r3, #54	; 0x36
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9352:	22a4      	movs	r2, #164	; 0xa4
	_radio.packet_rx_last = 0;
    9354:	33ff      	adds	r3, #255	; 0xff
    9356:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    9358:	3301      	adds	r3, #1
    935a:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    935c:	3b02      	subs	r3, #2
    935e:	5ce3      	ldrb	r3, [r4, r3]
    9360:	0052      	lsls	r2, r2, #1
    9362:	3b01      	subs	r3, #1
    9364:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    9366:	236a      	movs	r3, #106	; 0x6a
    9368:	33ff      	adds	r3, #255	; 0xff
    936a:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    936c:	3301      	adds	r3, #1
    936e:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    9370:	236c      	movs	r3, #108	; 0x6c
    9372:	33ff      	adds	r3, #255	; 0xff
    9374:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;
    9376:	3301      	adds	r3, #1
    9378:	54e5      	strb	r5, [r4, r3]
	_radio.fc_ack = _radio.fc_req;
    937a:	3308      	adds	r3, #8
    937c:	5ce2      	ldrb	r2, [r4, r3]
    937e:	2376      	movs	r3, #118	; 0x76
	ll_filter_reset(false);
    9380:	0028      	movs	r0, r5
	_radio.fc_ack = _radio.fc_req;
    9382:	33ff      	adds	r3, #255	; 0xff
    9384:	54e2      	strb	r2, [r4, r3]
	ll_filter_reset(false);
    9386:	f000 fe8f 	bl	a0a8 <ll_filter_reset>
	common_init();
    938a:	f7fd fbe5 	bl	6b58 <common_init>
}
    938e:	bd70      	pop	{r4, r5, r6, pc}
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9390:	1de8      	adds	r0, r5, #7
    9392:	b2c0      	uxtb	r0, r0
    9394:	21ff      	movs	r1, #255	; 0xff
	     conn_handle++) {
    9396:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9398:	f7fc fc40 	bl	5c1c <role_disable>
	     conn_handle++) {
    939c:	b2ad      	uxth	r5, r5
    939e:	e7b8      	b.n	9312 <ll_reset+0x1a>
    93a0:	20000284 	.word	0x20000284

000093a4 <radio_adv_data_get>:
	return &_radio.advertiser.adv_data;
    93a4:	4801      	ldr	r0, [pc, #4]	; (93ac <radio_adv_data_get+0x8>)
}
    93a6:	3026      	adds	r0, #38	; 0x26
    93a8:	4770      	bx	lr
    93aa:	46c0      	nop			; (mov r8, r8)
    93ac:	20000284 	.word	0x20000284

000093b0 <radio_scan_data_get>:
	return &_radio.advertiser.scan_data;
    93b0:	4801      	ldr	r0, [pc, #4]	; (93b8 <radio_scan_data_get+0x8>)
}
    93b2:	3076      	adds	r0, #118	; 0x76
    93b4:	4770      	bx	lr
    93b6:	46c0      	nop			; (mov r8, r8)
    93b8:	20000284 	.word	0x20000284

000093bc <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    93bc:	4b02      	ldr	r3, [pc, #8]	; (93c8 <ll_adv_is_enabled+0xc>)
    93be:	3305      	adds	r3, #5
    93c0:	7fd8      	ldrb	r0, [r3, #31]
    93c2:	09c0      	lsrs	r0, r0, #7
}
    93c4:	4770      	bx	lr
    93c6:	46c0      	nop			; (mov r8, r8)
    93c8:	20000284 	.word	0x20000284

000093cc <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    93cc:	4b04      	ldr	r3, [pc, #16]	; (93e0 <radio_adv_filter_pol_get+0x14>)
    93ce:	2000      	movs	r0, #0
    93d0:	1d5a      	adds	r2, r3, #5
    93d2:	7fd2      	ldrb	r2, [r2, #31]
    93d4:	2a7f      	cmp	r2, #127	; 0x7f
    93d6:	d902      	bls.n	93de <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
    93d8:	3306      	adds	r3, #6
    93da:	7fd8      	ldrb	r0, [r3, #31]
    93dc:	0980      	lsrs	r0, r0, #6
}
    93de:	4770      	bx	lr
    93e0:	20000284 	.word	0x20000284

000093e4 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    93e4:	4a09      	ldr	r2, [pc, #36]	; (940c <ll_scan_is_enabled+0x28>)
    93e6:	0013      	movs	r3, r2
    93e8:	33dc      	adds	r3, #220	; 0xdc
    93ea:	7818      	ldrb	r0, [r3, #0]
    93ec:	0013      	movs	r3, r2
    93ee:	33dd      	adds	r3, #221	; 0xdd
    93f0:	781b      	ldrb	r3, [r3, #0]
    93f2:	07c0      	lsls	r0, r0, #31
    93f4:	071b      	lsls	r3, r3, #28
    93f6:	0fdb      	lsrs	r3, r3, #31
    93f8:	0fc0      	lsrs	r0, r0, #31
    93fa:	4098      	lsls	r0, r3
	       (_radio.scanner.conn ? BIT(2) : 0);
    93fc:	32fc      	adds	r2, #252	; 0xfc
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    93fe:	0003      	movs	r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    9400:	6810      	ldr	r0, [r2, #0]
    9402:	1e42      	subs	r2, r0, #1
    9404:	4190      	sbcs	r0, r2
    9406:	0080      	lsls	r0, r0, #2
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9408:	4318      	orrs	r0, r3
}
    940a:	4770      	bx	lr
    940c:	20000284 	.word	0x20000284

00009410 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    9410:	4b05      	ldr	r3, [pc, #20]	; (9428 <radio_scan_filter_pol_get+0x18>)
    9412:	2000      	movs	r0, #0
    9414:	001a      	movs	r2, r3
    9416:	32dc      	adds	r2, #220	; 0xdc
    9418:	7812      	ldrb	r2, [r2, #0]
    941a:	07d2      	lsls	r2, r2, #31
    941c:	d503      	bpl.n	9426 <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
    941e:	33dd      	adds	r3, #221	; 0xdd
    9420:	7818      	ldrb	r0, [r3, #0]
    9422:	0680      	lsls	r0, r0, #26
    9424:	0f80      	lsrs	r0, r0, #30
}
    9426:	4770      	bx	lr
    9428:	20000284 	.word	0x20000284

0000942c <ll_tx_pwr_lvl_get>:
{
    942c:	b510      	push	{r4, lr}
    942e:	0014      	movs	r4, r2
	conn = connection_get(handle);
    9430:	f7fc fbdc 	bl	5bec <connection_get>
    9434:	0003      	movs	r3, r0
		return 1;
    9436:	2001      	movs	r0, #1
	if (!conn) {
    9438:	2b00      	cmp	r3, #0
    943a:	d001      	beq.n	9440 <ll_tx_pwr_lvl_get+0x14>
	*tx_pwr_lvl = 0;
    943c:	2000      	movs	r0, #0
    943e:	7020      	strb	r0, [r4, #0]
}
    9440:	bd10      	pop	{r4, pc}
	...

00009444 <ll_rx_get>:
{
    9444:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9446:	4d1b      	ldr	r5, [pc, #108]	; (94b4 <ll_rx_get+0x70>)
{
    9448:	0006      	movs	r6, r0
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    944a:	002a      	movs	r2, r5
{
    944c:	0008      	movs	r0, r1
    944e:	0029      	movs	r1, r5
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9450:	32fc      	adds	r2, #252	; 0xfc
    9452:	6c53      	ldr	r3, [r2, #68]	; 0x44
    9454:	6c92      	ldr	r2, [r2, #72]	; 0x48
    9456:	316c      	adds	r1, #108	; 0x6c
{
    9458:	b085      	sub	sp, #20
    945a:	31ff      	adds	r1, #255	; 0xff
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    945c:	4293      	cmp	r3, r2
    945e:	d020      	beq.n	94a2 <ll_rx_get+0x5e>
		_node_rx = _radio.link_rx_head->mem;
    9460:	685b      	ldr	r3, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9462:	781a      	ldrb	r2, [r3, #0]
		_node_rx = _radio.link_rx_head->mem;
    9464:	9301      	str	r3, [sp, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9466:	f7fc fb75 	bl	5b54 <tx_cmplt_get>
    946a:	1e04      	subs	r4, r0, #0
		if (!cmplt) {
    946c:	d120      	bne.n	94b0 <ll_rx_get+0x6c>
			first = _radio.packet_release_first;
    946e:	ab02      	add	r3, sp, #8
    9470:	1d5f      	adds	r7, r3, #5
    9472:	236c      	movs	r3, #108	; 0x6c
    9474:	33ff      	adds	r3, #255	; 0xff
    9476:	5ceb      	ldrb	r3, [r5, r3]
    9478:	703b      	strb	r3, [r7, #0]
				cmplt_curr = tx_cmplt_get(&h, &first,
    947a:	23b6      	movs	r3, #182	; 0xb6
    947c:	005b      	lsls	r3, r3, #1
    947e:	5cea      	ldrb	r2, [r5, r3]
    9480:	ab02      	add	r3, sp, #8
    9482:	b2d2      	uxtb	r2, r2
    9484:	0039      	movs	r1, r7
    9486:	1d98      	adds	r0, r3, #6
    9488:	f7fc fb64 	bl	5b54 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    948c:	2c00      	cmp	r4, #0
    948e:	d106      	bne.n	949e <ll_rx_get+0x5a>
			} while ((cmplt_prev != 0) ||
    9490:	2800      	cmp	r0, #0
    9492:	d104      	bne.n	949e <ll_rx_get+0x5a>
			*node_rx = _node_rx;
    9494:	9b01      	ldr	r3, [sp, #4]
}
    9496:	0020      	movs	r0, r4
		*node_rx = NULL;
    9498:	6033      	str	r3, [r6, #0]
}
    949a:	b005      	add	sp, #20
    949c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    949e:	0004      	movs	r4, r0
    94a0:	e7eb      	b.n	947a <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    94a2:	23b6      	movs	r3, #182	; 0xb6
    94a4:	005b      	lsls	r3, r3, #1
    94a6:	5cea      	ldrb	r2, [r5, r3]
    94a8:	b2d2      	uxtb	r2, r2
    94aa:	f7fc fb53 	bl	5b54 <tx_cmplt_get>
    94ae:	0004      	movs	r4, r0
		*node_rx = NULL;
    94b0:	2300      	movs	r3, #0
    94b2:	e7f0      	b.n	9496 <ll_rx_get+0x52>
    94b4:	20000284 	.word	0x20000284

000094b8 <ll_rx_mem_release>:
{
    94b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94ba:	2680      	movs	r6, #128	; 0x80
    94bc:	0005      	movs	r5, r0
	_node_rx = *node_rx;
    94be:	6800      	ldr	r0, [r0, #0]
	while (_node_rx) {
    94c0:	2800      	cmp	r0, #0
    94c2:	d103      	bne.n	94cc <ll_rx_mem_release+0x14>
	*node_rx = _node_rx;
    94c4:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    94c6:	f7fd fb01 	bl	6acc <packet_rx_allocate.constprop.49>
}
    94ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (_node_rx_free->hdr.type) {
    94cc:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    94ce:	6807      	ldr	r7, [r0, #0]
    94d0:	2b0a      	cmp	r3, #10
    94d2:	d808      	bhi.n	94e6 <ll_rx_mem_release+0x2e>
    94d4:	2201      	movs	r2, #1
    94d6:	409a      	lsls	r2, r3
    94d8:	0013      	movs	r3, r2
    94da:	4a0d      	ldr	r2, [pc, #52]	; (9510 <ll_rx_mem_release+0x58>)
    94dc:	4c0d      	ldr	r4, [pc, #52]	; (9514 <ll_rx_mem_release+0x5c>)
    94de:	4213      	tst	r3, r2
    94e0:	d104      	bne.n	94ec <ll_rx_mem_release+0x34>
    94e2:	4233      	tst	r3, r6
    94e4:	d109      	bne.n	94fa <ll_rx_mem_release+0x42>
			LL_ASSERT(0);
    94e6:	b662      	cpsie	i
    94e8:	2004      	movs	r0, #4
    94ea:	df02      	svc	2
			mem_release(_node_rx_free,
    94ec:	0021      	movs	r1, r4
    94ee:	3125      	adds	r1, #37	; 0x25
			mem_release(conn, &_radio.conn_free);
    94f0:	31ff      	adds	r1, #255	; 0xff
    94f2:	f7fa fd92 	bl	401a <mem_release>
{
    94f6:	0038      	movs	r0, r7
    94f8:	e7e2      	b.n	94c0 <ll_rx_mem_release+0x8>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    94fa:	0023      	movs	r3, r4
    94fc:	2182      	movs	r1, #130	; 0x82
    94fe:	33fc      	adds	r3, #252	; 0xfc
    9500:	88c2      	ldrh	r2, [r0, #6]
    9502:	0049      	lsls	r1, r1, #1
    9504:	6898      	ldr	r0, [r3, #8]
    9506:	f7fa fd9e 	bl	4046 <mem_get>
			mem_release(conn, &_radio.conn_free);
    950a:	0021      	movs	r1, r4
    950c:	3109      	adds	r1, #9
    950e:	e7ef      	b.n	94f0 <ll_rx_mem_release+0x38>
    9510:	0000077e 	.word	0x0000077e
    9514:	20000284 	.word	0x20000284

00009518 <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    9518:	b570      	push	{r4, r5, r6, lr}
    951a:	4b18      	ldr	r3, [pc, #96]	; (957c <do_radio_rx_fc_set+0x64>)
    951c:	0004      	movs	r4, r0
	if (req == ack) {
    951e:	4291      	cmp	r1, r2
    9520:	d11c      	bne.n	955c <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    9522:	0018      	movs	r0, r3
    9524:	30fc      	adds	r0, #252	; 0xfc
    9526:	6c85      	ldr	r5, [r0, #72]	; 0x48
    9528:	6c46      	ldr	r6, [r0, #68]	; 0x44
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    952a:	2001      	movs	r0, #1
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    952c:	42ae      	cmp	r6, r5
    952e:	d114      	bne.n	955a <do_radio_rx_fc_set+0x42>
			if (ack1 == 0) {
    9530:	1e08      	subs	r0, r1, #0
    9532:	d100      	bne.n	9536 <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
    9534:	2003      	movs	r0, #3
			_radio.fc_handle[--ack1] = handle;
    9536:	3801      	subs	r0, #1
    9538:	b2c0      	uxtb	r0, r0
    953a:	0005      	movs	r5, r0
    953c:	35b4      	adds	r5, #180	; 0xb4
    953e:	006d      	lsls	r5, r5, #1
    9540:	195d      	adds	r5, r3, r5
    9542:	80ec      	strh	r4, [r5, #6]
			_radio.fc_ack = ack1;
    9544:	2476      	movs	r4, #118	; 0x76
    9546:	34ff      	adds	r4, #255	; 0xff
    9548:	5518      	strb	r0, [r3, r4]
			if (req != _radio.fc_req) {
    954a:	20ba      	movs	r0, #186	; 0xba
    954c:	0040      	lsls	r0, r0, #1
    954e:	5c1d      	ldrb	r5, [r3, r0]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    9550:	2000      	movs	r0, #0
			if (req != _radio.fc_req) {
    9552:	42a9      	cmp	r1, r5
    9554:	d001      	beq.n	955a <do_radio_rx_fc_set+0x42>
				_radio.fc_ack = ack;
    9556:	551a      	strb	r2, [r3, r4]
				return 1;
    9558:	3001      	adds	r0, #1
}
    955a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (((req == 0) &&
    955c:	2900      	cmp	r1, #0
    955e:	d107      	bne.n	9570 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    9560:	22b9      	movs	r2, #185	; 0xb9
    9562:	0052      	lsls	r2, r2, #1
	} else if (((req == 0) &&
    9564:	5a98      	ldrh	r0, [r3, r2]
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9566:	1b00      	subs	r0, r0, r4
    9568:	1e43      	subs	r3, r0, #1
    956a:	4198      	sbcs	r0, r3
				return 1;
    956c:	b2c0      	uxtb	r0, r0
    956e:	e7f4      	b.n	955a <do_radio_rx_fc_set+0x42>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9570:	31b3      	adds	r1, #179	; 0xb3
    9572:	0049      	lsls	r1, r1, #1
    9574:	1859      	adds	r1, r3, r1
    9576:	88c8      	ldrh	r0, [r1, #6]
    9578:	e7f5      	b.n	9566 <do_radio_rx_fc_set+0x4e>
    957a:	46c0      	nop			; (mov r8, r8)
    957c:	20000284 	.word	0x20000284

00009580 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    9580:	22bb      	movs	r2, #187	; 0xbb
{
    9582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    9584:	4b15      	ldr	r3, [pc, #84]	; (95dc <radio_rx_fc_set+0x5c>)
    9586:	0052      	lsls	r2, r2, #1
    9588:	5c9a      	ldrb	r2, [r3, r2]
{
    958a:	0005      	movs	r5, r0
    958c:	0008      	movs	r0, r1
	if (_radio.fc_ena) {
    958e:	2a00      	cmp	r2, #0
    9590:	d101      	bne.n	9596 <radio_rx_fc_set+0x16>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    9592:	2000      	movs	r0, #0
}
    9594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		u8_t req = _radio.fc_req;
    9596:	22ba      	movs	r2, #186	; 0xba
		u8_t ack = _radio.fc_ack;
    9598:	2476      	movs	r4, #118	; 0x76
		u8_t req = _radio.fc_req;
    959a:	0052      	lsls	r2, r2, #1
    959c:	5c99      	ldrb	r1, [r3, r2]
		u8_t ack = _radio.fc_ack;
    959e:	34ff      	adds	r4, #255	; 0xff
		u8_t req = _radio.fc_req;
    95a0:	b2c9      	uxtb	r1, r1
		u8_t ack = _radio.fc_ack;
    95a2:	5d1a      	ldrb	r2, [r3, r4]
		if (fc) {
    95a4:	2800      	cmp	r0, #0
    95a6:	d006      	beq.n	95b6 <radio_rx_fc_set+0x36>
			if (handle != 0xffff) {
    95a8:	4b0d      	ldr	r3, [pc, #52]	; (95e0 <radio_rx_fc_set+0x60>)
    95aa:	429d      	cmp	r5, r3
    95ac:	d0f1      	beq.n	9592 <radio_rx_fc_set+0x12>
				return do_radio_rx_fc_set(handle, req, ack);
    95ae:	0028      	movs	r0, r5
    95b0:	f7ff ffb2 	bl	9518 <do_radio_rx_fc_set>
    95b4:	e7ee      	b.n	9594 <radio_rx_fc_set+0x14>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    95b6:	001d      	movs	r5, r3
    95b8:	35fc      	adds	r5, #252	; 0xfc
    95ba:	6c6f      	ldr	r7, [r5, #68]	; 0x44
    95bc:	6cae      	ldr	r6, [r5, #72]	; 0x48
    95be:	42b7      	cmp	r7, r6
    95c0:	d1e7      	bne.n	9592 <radio_rx_fc_set+0x12>
    95c2:	4291      	cmp	r1, r2
    95c4:	d0e5      	beq.n	9592 <radio_rx_fc_set+0x12>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    95c6:	6cad      	ldr	r5, [r5, #72]	; 0x48
			_radio.fc_ack = req;
    95c8:	5519      	strb	r1, [r3, r4]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    95ca:	42af      	cmp	r7, r5
    95cc:	d0e1      	beq.n	9592 <radio_rx_fc_set+0x12>
			    (req == _radio.fc_req)) {
    95ce:	25ba      	movs	r5, #186	; 0xba
    95d0:	006d      	lsls	r5, r5, #1
    95d2:	5d5d      	ldrb	r5, [r3, r5]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    95d4:	42a9      	cmp	r1, r5
    95d6:	d1dc      	bne.n	9592 <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
    95d8:	551a      	strb	r2, [r3, r4]
    95da:	e7db      	b.n	9594 <radio_rx_fc_set+0x14>
    95dc:	20000284 	.word	0x20000284
    95e0:	0000ffff 	.word	0x0000ffff

000095e4 <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    95e4:	4770      	bx	lr
	...

000095e8 <radio_adv_enable>:
{
    95e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    95ea:	b093      	sub	sp, #76	; 0x4c
    95ec:	930e      	str	r3, [sp, #56]	; 0x38
    95ee:	232f      	movs	r3, #47	; 0x2f
    95f0:	910c      	str	r1, [sp, #48]	; 0x30
    95f2:	a904      	add	r1, sp, #16
    95f4:	185b      	adds	r3, r3, r1
    95f6:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    95f8:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
    95fa:	4dac      	ldr	r5, [pc, #688]	; (98ac <radio_adv_enable+0x2c4>)
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    95fc:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
    95fe:	1d6b      	adds	r3, r5, #5
    9600:	7fdb      	ldrb	r3, [r3, #31]
{
    9602:	900d      	str	r0, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    9604:	2b7f      	cmp	r3, #127	; 0x7f
    9606:	d901      	bls.n	960c <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    9608:	260c      	movs	r6, #12
    960a:	e023      	b.n	9654 <radio_adv_enable+0x6c>
					[_radio.advertiser.adv_data.last][0];
    960c:	002b      	movs	r3, r5
    960e:	3375      	adds	r3, #117	; 0x75
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9610:	781a      	ldrb	r2, [r3, #0]
    9612:	2327      	movs	r3, #39	; 0x27
    9614:	4353      	muls	r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9616:	220f      	movs	r2, #15
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9618:	3326      	adds	r3, #38	; 0x26
    961a:	18eb      	adds	r3, r5, r3
    961c:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    961e:	781b      	ldrb	r3, [r3, #0]
		conn = NULL;
    9620:	2700      	movs	r7, #0
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9622:	4013      	ands	r3, r2
    9624:	2b01      	cmp	r3, #1
    9626:	d864      	bhi.n	96f2 <radio_adv_enable+0x10a>
		if (_radio.advertiser.conn) {
    9628:	4ba1      	ldr	r3, [pc, #644]	; (98b0 <radio_adv_enable+0x2c8>)
    962a:	681c      	ldr	r4, [r3, #0]
    962c:	42bc      	cmp	r4, r7
    962e:	d1eb      	bne.n	9608 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    9630:	48a0      	ldr	r0, [pc, #640]	; (98b4 <radio_adv_enable+0x2cc>)
    9632:	f7fa fcd9 	bl	3fe8 <mem_acquire>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9636:	2607      	movs	r6, #7
		link = mem_acquire(&_radio.link_rx_free);
    9638:	900a      	str	r0, [sp, #40]	; 0x28
		if (!link) {
    963a:	42b8      	cmp	r0, r7
    963c:	d00a      	beq.n	9654 <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    963e:	0028      	movs	r0, r5
    9640:	3009      	adds	r0, #9
    9642:	30ff      	adds	r0, #255	; 0xff
    9644:	f7fa fcd0 	bl	3fe8 <mem_acquire>
    9648:	1e07      	subs	r7, r0, #0
		if (!conn) {
    964a:	d106      	bne.n	965a <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
    964c:	4999      	ldr	r1, [pc, #612]	; (98b4 <radio_adv_enable+0x2cc>)
    964e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9650:	f7fa fce3 	bl	401a <mem_release>
}
    9654:	0030      	movs	r0, r6
    9656:	b013      	add	sp, #76	; 0x4c
    9658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->handle = 0xFFFF;
    965a:	2301      	movs	r3, #1
    965c:	425b      	negs	r3, r3
    965e:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    9660:	0003      	movs	r3, r0
    9662:	4a95      	ldr	r2, [pc, #596]	; (98b8 <radio_adv_enable+0x2d0>)
    9664:	338c      	adds	r3, #140	; 0x8c
    9666:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
    9668:	2140      	movs	r1, #64	; 0x40
		conn->role = 1;
    966a:	2380      	movs	r3, #128	; 0x80
		conn->data_chan_sel = 0;
    966c:	7f42      	ldrb	r2, [r0, #29]
		conn->role = 1;
    966e:	425b      	negs	r3, r3
    9670:	438a      	bics	r2, r1
    9672:	4313      	orrs	r3, r2
    9674:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    9676:	2306      	movs	r3, #6
		conn->common.fex_valid = 0;
    9678:	0002      	movs	r2, r0
		conn->data_chan_use = 0;
    967a:	77c4      	strb	r4, [r0, #31]
		conn->event_counter = 0;
    967c:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    967e:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    9680:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->connect_expire = 6;
    9682:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    9684:	2020      	movs	r0, #32
		conn->slave.latency_enabled = 0;
    9686:	2501      	movs	r5, #1
		conn->slave.latency_cancel = 0;
    9688:	2602      	movs	r6, #2
		conn->common.fex_valid = 0;
    968a:	3238      	adds	r2, #56	; 0x38
    968c:	7813      	ldrb	r3, [r2, #0]
		conn->slave.latency_enabled = 0;
    968e:	4383      	bics	r3, r0
		conn->slave.latency_cancel = 0;
    9690:	43ab      	bics	r3, r5
    9692:	43b3      	bics	r3, r6
    9694:	7013      	strb	r3, [r2, #0]
		conn->llcp_req = 0;
    9696:	003b      	movs	r3, r7
    9698:	335c      	adds	r3, #92	; 0x5c
		conn->slave.window_widening_prepare_us = 0;
    969a:	647c      	str	r4, [r7, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    969c:	64bc      	str	r4, [r7, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    969e:	65bc      	str	r4, [r7, #88]	; 0x58
		conn->supervision_expire = 0;
    96a0:	863c      	strh	r4, [r7, #48]	; 0x30
		conn->procedure_expire = 0;
    96a2:	86bc      	strh	r4, [r7, #52]	; 0x34
		conn->llcp_version.tx = 0;
    96a4:	3258      	adds	r2, #88	; 0x58
		conn->llcp_req = 0;
    96a6:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    96a8:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    96aa:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    96ac:	43ab      	bics	r3, r5
    96ae:	43b3      	bics	r3, r6
    96b0:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    96b2:	003b      	movs	r3, r7
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    96b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		conn->llcp_terminate.req = 0;
    96b6:	3398      	adds	r3, #152	; 0x98
    96b8:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    96ba:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
    96bc:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    96be:	3304      	adds	r3, #4
    96c0:	601a      	str	r2, [r3, #0]
		conn->sn = 0;
    96c2:	003a      	movs	r2, r7
    96c4:	32a8      	adds	r2, #168	; 0xa8
    96c6:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    96c8:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
    96ca:	0035      	movs	r5, r6
    96cc:	43b3      	bics	r3, r6
		conn->enc_tx = 0;
    96ce:	35e1      	adds	r5, #225	; 0xe1
    96d0:	402b      	ands	r3, r5
		conn->refresh = 0;
    96d2:	4383      	bics	r3, r0
		conn->empty = 0;
    96d4:	438b      	bics	r3, r1
    96d6:	313f      	adds	r1, #63	; 0x3f
    96d8:	400b      	ands	r3, r1
    96da:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    96dc:	003b      	movs	r3, r7
    96de:	33ec      	adds	r3, #236	; 0xec
    96e0:	601c      	str	r4, [r3, #0]
		conn->pkt_tx_ctrl = NULL;
    96e2:	605c      	str	r4, [r3, #4]
		conn->pkt_tx_ctrl_last = NULL;
    96e4:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_data = NULL;
    96e6:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_last = NULL;
    96e8:	611c      	str	r4, [r3, #16]
		conn->packet_tx_head_len = 0;
    96ea:	751c      	strb	r4, [r3, #20]
		conn->packet_tx_head_offset = 0;
    96ec:	755c      	strb	r4, [r3, #21]
		_radio.advertiser.conn = conn;
    96ee:	4b70      	ldr	r3, [pc, #448]	; (98b0 <radio_adv_enable+0x2c8>)
    96f0:	601f      	str	r7, [r3, #0]
	_radio.advertiser.chan_map = chan_map;
    96f2:	202f      	movs	r0, #47	; 0x2f
	_radio.advertiser.phy_p = phy_p;
    96f4:	2107      	movs	r1, #7
    96f6:	4d6d      	ldr	r5, [pc, #436]	; (98ac <radio_adv_enable+0x2c4>)
    96f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    96fa:	1dac      	adds	r4, r5, #6
    96fc:	7fe3      	ldrb	r3, [r4, #31]
	_radio.advertiser.chan_map = chan_map;
    96fe:	aa04      	add	r2, sp, #16
    9700:	1880      	adds	r0, r0, r2
    9702:	7802      	ldrb	r2, [r0, #0]
	_radio.advertiser.phy_p = phy_p;
    9704:	400e      	ands	r6, r1
    9706:	438b      	bics	r3, r1
	_radio.advertiser.chan_map = chan_map;
    9708:	4333      	orrs	r3, r6
    970a:	4011      	ands	r1, r2
    970c:	001a      	movs	r2, r3
    970e:	2338      	movs	r3, #56	; 0x38
    9710:	439a      	bics	r2, r3
	_radio.advertiser.filter_policy = filter_policy;
    9712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	_radio.advertiser.chan_map = chan_map;
    9714:	00c9      	lsls	r1, r1, #3
	_radio.advertiser.filter_policy = filter_policy;
    9716:	019e      	lsls	r6, r3, #6
    9718:	233f      	movs	r3, #63	; 0x3f
    971a:	430a      	orrs	r2, r1
    971c:	401a      	ands	r2, r3
		_radio.ticks_active_to_start;
    971e:	002b      	movs	r3, r5
	_radio.advertiser.filter_policy = filter_policy;
    9720:	4332      	orrs	r2, r6
    9722:	77e2      	strb	r2, [r4, #31]
		_radio.ticks_active_to_start;
    9724:	33fc      	adds	r3, #252	; 0xfc
	_radio.advertiser.hdr.ticks_active_to_start =
    9726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9728:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_active_to_start =
    972a:	61ab      	str	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    972c:	2327      	movs	r3, #39	; 0x27
    972e:	616b      	str	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9730:	2300      	movs	r3, #0
    9732:	61eb      	str	r3, [r5, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9734:	f7fa fdf0 	bl	4318 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    973a:	781e      	ldrb	r6, [r3, #0]
    973c:	230f      	movs	r3, #15
    973e:	401e      	ands	r6, r3
    9740:	2e01      	cmp	r6, #1
    9742:	d16e      	bne.n	9822 <radio_adv_enable+0x23a>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    9744:	23a7      	movs	r3, #167	; 0xa7
    9746:	009b      	lsls	r3, r3, #2
    9748:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    974a:	3039      	adds	r0, #57	; 0x39
    974c:	30ff      	adds	r0, #255	; 0xff
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    974e:	4a5b      	ldr	r2, [pc, #364]	; (98bc <radio_adv_enable+0x2d4>)
    9750:	2300      	movs	r3, #0
    9752:	2100      	movs	r1, #0
    9754:	f7f6 fe20 	bl	398 <__aeabi_lmul>
    9758:	4a59      	ldr	r2, [pc, #356]	; (98c0 <radio_adv_enable+0x2d8>)
    975a:	2307      	movs	r3, #7
    975c:	f7f6 fdfc 	bl	358 <__aeabi_uldivmod>
	ticks_slot_offset =
    9760:	69aa      	ldr	r2, [r5, #24]
    9762:	696b      	ldr	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9764:	6228      	str	r0, [r5, #32]
	ticks_slot_offset =
    9766:	920a      	str	r2, [sp, #40]	; 0x28
    9768:	429a      	cmp	r2, r3
    976a:	d200      	bcs.n	976e <radio_adv_enable+0x186>
    976c:	930a      	str	r3, [sp, #40]	; 0x28
    976e:	2400      	movs	r4, #0
	_radio.advertiser.is_hdcd = !interval &&
    9770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9772:	42a3      	cmp	r3, r4
    9774:	d103      	bne.n	977e <radio_adv_enable+0x196>
    9776:	3e01      	subs	r6, #1
    9778:	4273      	negs	r3, r6
    977a:	4173      	adcs	r3, r6
    977c:	b2dc      	uxtb	r4, r3
    977e:	2240      	movs	r2, #64	; 0x40
    9780:	1d6b      	adds	r3, r5, #5
    9782:	01a6      	lsls	r6, r4, #6
    9784:	7fdc      	ldrb	r4, [r3, #31]
    9786:	4394      	bics	r4, r2
    9788:	4334      	orrs	r4, r6
    978a:	77dc      	strb	r4, [r3, #31]
    978c:	ae11      	add	r6, sp, #68	; 0x44
	if (_radio.advertiser.is_hdcd) {
    978e:	4014      	ands	r4, r2
    9790:	d055      	beq.n	983e <radio_adv_enable+0x256>
		u32_t ticks_now = ticker_ticks_now_get();
    9792:	f7fb fb89 	bl	4ea8 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9796:	6a29      	ldr	r1, [r5, #32]
    9798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    979a:	468c      	mov	ip, r1
    979c:	4463      	add	r3, ip
    979e:	001a      	movs	r2, r3
		u32_t ticks_now = ticker_ticks_now_get();
    97a0:	0004      	movs	r4, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    97a2:	2000      	movs	r0, #0
    97a4:	4b47      	ldr	r3, [pc, #284]	; (98c4 <radio_adv_enable+0x2dc>)
    97a6:	9204      	str	r2, [sp, #16]
    97a8:	9307      	str	r3, [sp, #28]
    97aa:	4b47      	ldr	r3, [pc, #284]	; (98c8 <radio_adv_enable+0x2e0>)
    97ac:	9201      	str	r2, [sp, #4]
    97ae:	9305      	str	r3, [sp, #20]
    97b0:	9608      	str	r6, [sp, #32]
    97b2:	9006      	str	r0, [sp, #24]
    97b4:	9003      	str	r0, [sp, #12]
    97b6:	9002      	str	r0, [sp, #8]
    97b8:	9000      	str	r0, [sp, #0]
    97ba:	0023      	movs	r3, r4
    97bc:	2205      	movs	r2, #5
    97be:	2103      	movs	r1, #3
    97c0:	f7fb fa3c 	bl	4c3c <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    97c4:	2802      	cmp	r0, #2
    97c6:	d036      	beq.n	9836 <radio_adv_enable+0x24e>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    97c8:	9811      	ldr	r0, [sp, #68]	; 0x44
    97ca:	2800      	cmp	r0, #0
    97cc:	d117      	bne.n	97fe <radio_adv_enable+0x216>
		ret_cb = TICKER_STATUS_BUSY;
    97ce:	2302      	movs	r3, #2
		ret =
    97d0:	2203      	movs	r2, #3
		ret_cb = TICKER_STATUS_BUSY;
    97d2:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    97d4:	4b3b      	ldr	r3, [pc, #236]	; (98c4 <radio_adv_enable+0x2dc>)
    97d6:	0011      	movs	r1, r2
    97d8:	9307      	str	r3, [sp, #28]
    97da:	4b3c      	ldr	r3, [pc, #240]	; (98cc <radio_adv_enable+0x2e4>)
    97dc:	9608      	str	r6, [sp, #32]
    97de:	9305      	str	r3, [sp, #20]
    97e0:	4b3b      	ldr	r3, [pc, #236]	; (98d0 <radio_adv_enable+0x2e8>)
    97e2:	9006      	str	r0, [sp, #24]
    97e4:	9300      	str	r3, [sp, #0]
    97e6:	0023      	movs	r3, r4
    97e8:	9004      	str	r0, [sp, #16]
    97ea:	9003      	str	r0, [sp, #12]
    97ec:	9002      	str	r0, [sp, #8]
    97ee:	9001      	str	r0, [sp, #4]
		ret =
    97f0:	f7fb fa24 	bl	4c3c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    97f4:	2802      	cmp	r0, #2
    97f6:	d045      	beq.n	9884 <radio_adv_enable+0x29c>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    97f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
    97fa:	2e00      	cmp	r6, #0
    97fc:	d046      	beq.n	988c <radio_adv_enable+0x2a4>
	if (conn) {
    97fe:	2f00      	cmp	r7, #0
    9800:	d100      	bne.n	9804 <radio_adv_enable+0x21c>
    9802:	e701      	b.n	9608 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    9804:	0029      	movs	r1, r5
    9806:	003b      	movs	r3, r7
    9808:	313d      	adds	r1, #61	; 0x3d
    980a:	339c      	adds	r3, #156	; 0x9c
    980c:	6818      	ldr	r0, [r3, #0]
    980e:	31ff      	adds	r1, #255	; 0xff
    9810:	f7fa fc03 	bl	401a <mem_release>
		mem_release(conn, &_radio.conn_free);
    9814:	0029      	movs	r1, r5
    9816:	3109      	adds	r1, #9
    9818:	31ff      	adds	r1, #255	; 0xff
    981a:	0038      	movs	r0, r7
    981c:	f7fa fbfd 	bl	401a <mem_release>
    9820:	e6f2      	b.n	9608 <radio_adv_enable+0x20>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    9822:	2e02      	cmp	r6, #2
    9824:	d103      	bne.n	982e <radio_adv_enable+0x246>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    9826:	23a9      	movs	r3, #169	; 0xa9
    9828:	009b      	lsls	r3, r3, #2
			   152 + 376) * chan_cnt;
    982a:	4358      	muls	r0, r3
    982c:	e78f      	b.n	974e <radio_adv_enable+0x166>
    982e:	4b29      	ldr	r3, [pc, #164]	; (98d4 <radio_adv_enable+0x2ec>)
    9830:	e7fb      	b.n	982a <radio_adv_enable+0x242>
				cpu_sleep();
    9832:	f7fc f8f5 	bl	5a20 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9836:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9838:	2b02      	cmp	r3, #2
    983a:	d0fa      	beq.n	9832 <radio_adv_enable+0x24a>
    983c:	e7c4      	b.n	97c8 <radio_adv_enable+0x1e0>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    983e:	f7fb fb33 	bl	4ea8 <ticker_ticks_now_get>
		ret =
    9842:	4b20      	ldr	r3, [pc, #128]	; (98c4 <radio_adv_enable+0x2dc>)
    9844:	9608      	str	r6, [sp, #32]
    9846:	9307      	str	r3, [sp, #28]
    9848:	4b1f      	ldr	r3, [pc, #124]	; (98c8 <radio_adv_enable+0x2e0>)
    984a:	9406      	str	r4, [sp, #24]
    984c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    984e:	6a2a      	ldr	r2, [r5, #32]
    9850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9852:	4694      	mov	ip, r2
    9854:	4463      	add	r3, ip
    9856:	900b      	str	r0, [sp, #44]	; 0x2c
		ret =
    9858:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    985a:	4a1f      	ldr	r2, [pc, #124]	; (98d8 <radio_adv_enable+0x2f0>)
    985c:	2391      	movs	r3, #145	; 0x91
    985e:	980c      	ldr	r0, [sp, #48]	; 0x30
    9860:	0021      	movs	r1, r4
		ret =
    9862:	9403      	str	r4, [sp, #12]
    9864:	9402      	str	r4, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    9866:	f7f6 fd97 	bl	398 <__aeabi_lmul>
    986a:	4a15      	ldr	r2, [pc, #84]	; (98c0 <radio_adv_enable+0x2d8>)
    986c:	2307      	movs	r3, #7
    986e:	f7f6 fd73 	bl	358 <__aeabi_uldivmod>
		ret =
    9872:	9400      	str	r4, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    9874:	9001      	str	r0, [sp, #4]
		ret =
    9876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9878:	2205      	movs	r2, #5
    987a:	2103      	movs	r1, #3
    987c:	0020      	movs	r0, r4
    987e:	e7b7      	b.n	97f0 <radio_adv_enable+0x208>
			cpu_sleep();
    9880:	f7fc f8ce 	bl	5a20 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9884:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9886:	2b02      	cmp	r3, #2
    9888:	d0fa      	beq.n	9880 <radio_adv_enable+0x298>
    988a:	e7b5      	b.n	97f8 <radio_adv_enable+0x210>
		_radio.advertiser.is_enabled = 1;
    988c:	2380      	movs	r3, #128	; 0x80
		if (!_radio.scanner.is_enabled) {
    988e:	2001      	movs	r0, #1
		_radio.advertiser.is_enabled = 1;
    9890:	1d6a      	adds	r2, r5, #5
    9892:	7fd1      	ldrb	r1, [r2, #31]
    9894:	425b      	negs	r3, r3
    9896:	430b      	orrs	r3, r1
		if (!_radio.scanner.is_enabled) {
    9898:	35dc      	adds	r5, #220	; 0xdc
		_radio.advertiser.is_enabled = 1;
    989a:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    989c:	782b      	ldrb	r3, [r5, #0]
    989e:	4203      	tst	r3, r0
    98a0:	d000      	beq.n	98a4 <radio_adv_enable+0x2bc>
    98a2:	e6d7      	b.n	9654 <radio_adv_enable+0x6c>
			ll_adv_scan_state_cb(BIT(0));
    98a4:	f7ff fe9e 	bl	95e4 <ll_adv_scan_state_cb>
    98a8:	e6d4      	b.n	9654 <radio_adv_enable+0x6c>
    98aa:	46c0      	nop			; (mov r8, r8)
    98ac:	20000284 	.word	0x20000284
    98b0:	2000034c 	.word	0x2000034c
    98b4:	200003c0 	.word	0x200003c0
    98b8:	0001400c 	.word	0x0001400c
    98bc:	3b9aca00 	.word	0x3b9aca00
    98c0:	1afd498d 	.word	0x1afd498d
    98c4:	00005a51 	.word	0x00005a51
    98c8:	00006a69 	.word	0x00006a69
    98cc:	00006aa1 	.word	0x00006aa1
    98d0:	0000a3fe 	.word	0x0000a3fe
    98d4:	000005fc 	.word	0x000005fc
    98d8:	84e72a00 	.word	0x84e72a00

000098dc <radio_adv_disable>:
{
    98dc:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    98de:	2103      	movs	r1, #3
    98e0:	2005      	movs	r0, #5
    98e2:	f7fc f99b 	bl	5c1c <role_disable>
    98e6:	1e05      	subs	r5, r0, #0
	if (!status) {
    98e8:	d123      	bne.n	9932 <radio_adv_disable+0x56>
		_radio.advertiser.is_enabled = 0;
    98ea:	217f      	movs	r1, #127	; 0x7f
    98ec:	4c12      	ldr	r4, [pc, #72]	; (9938 <radio_adv_disable+0x5c>)
    98ee:	1d62      	adds	r2, r4, #5
    98f0:	7fd3      	ldrb	r3, [r2, #31]
    98f2:	400b      	ands	r3, r1
    98f4:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    98f6:	0023      	movs	r3, r4
    98f8:	33dc      	adds	r3, #220	; 0xdc
    98fa:	781b      	ldrb	r3, [r3, #0]
    98fc:	07db      	lsls	r3, r3, #31
    98fe:	d401      	bmi.n	9904 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    9900:	f7ff fe70 	bl	95e4 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    9904:	0023      	movs	r3, r4
    9906:	33c8      	adds	r3, #200	; 0xc8
    9908:	681e      	ldr	r6, [r3, #0]
		if (conn) {
    990a:	2e00      	cmp	r6, #0
    990c:	d00f      	beq.n	992e <radio_adv_disable+0x52>
			_radio.advertiser.conn = NULL;
    990e:	2200      	movs	r2, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    9910:	0021      	movs	r1, r4
			_radio.advertiser.conn = NULL;
    9912:	601a      	str	r2, [r3, #0]
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    9914:	0033      	movs	r3, r6
    9916:	313d      	adds	r1, #61	; 0x3d
    9918:	339c      	adds	r3, #156	; 0x9c
    991a:	31ff      	adds	r1, #255	; 0xff
    991c:	6818      	ldr	r0, [r3, #0]
    991e:	f7fa fb7c 	bl	401a <mem_release>
			mem_release(conn, &_radio.conn_free);
    9922:	0021      	movs	r1, r4
    9924:	3109      	adds	r1, #9
    9926:	31ff      	adds	r1, #255	; 0xff
    9928:	0030      	movs	r0, r6
    992a:	f7fa fb76 	bl	401a <mem_release>
}
    992e:	0028      	movs	r0, r5
    9930:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    9932:	250c      	movs	r5, #12
    9934:	e7fb      	b.n	992e <radio_adv_disable+0x52>
    9936:	46c0      	nop			; (mov r8, r8)
    9938:	20000284 	.word	0x20000284

0000993c <ll_rx_dequeue>:
	struct radio_pdu_node_rx *node_rx = NULL;
    993c:	2300      	movs	r3, #0
{
    993e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9940:	4c35      	ldr	r4, [pc, #212]	; (9a18 <ll_rx_dequeue+0xdc>)
	struct radio_pdu_node_rx *node_rx = NULL;
    9942:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9944:	0021      	movs	r1, r4
    9946:	0023      	movs	r3, r4
    9948:	3141      	adds	r1, #65	; 0x41
    994a:	33fc      	adds	r3, #252	; 0xfc
    994c:	6c98      	ldr	r0, [r3, #72]	; 0x48
    994e:	31ff      	adds	r1, #255	; 0xff
    9950:	aa01      	add	r2, sp, #4
    9952:	f7fa fba5 	bl	40a0 <memq_dequeue>
	LL_ASSERT(link);
    9956:	2800      	cmp	r0, #0
    9958:	d102      	bne.n	9960 <ll_rx_dequeue+0x24>
			LL_ASSERT(_radio.scanner.is_enabled);
    995a:	b662      	cpsie	i
    995c:	2004      	movs	r0, #4
    995e:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    9960:	0021      	movs	r1, r4
    9962:	313d      	adds	r1, #61	; 0x3d
    9964:	31ff      	adds	r1, #255	; 0xff
    9966:	f7fa fb58 	bl	401a <mem_release>
	switch (node_rx->hdr.type) {
    996a:	9a01      	ldr	r2, [sp, #4]
    996c:	7911      	ldrb	r1, [r2, #4]
    996e:	290a      	cmp	r1, #10
    9970:	d8f3      	bhi.n	995a <ll_rx_dequeue+0x1e>
    9972:	2301      	movs	r3, #1
    9974:	408b      	lsls	r3, r1
    9976:	4829      	ldr	r0, [pc, #164]	; (9a1c <ll_rx_dequeue+0xe0>)
    9978:	4203      	tst	r3, r0
    997a:	d114      	bne.n	99a6 <ll_rx_dequeue+0x6a>
    997c:	061b      	lsls	r3, r3, #24
    997e:	d5ec      	bpl.n	995a <ll_rx_dequeue+0x1e>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    9980:	2906      	cmp	r1, #6
    9982:	d137      	bne.n	99f4 <ll_rx_dequeue+0xb8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    9984:	0013      	movs	r3, r2
    9986:	7ad2      	ldrb	r2, [r2, #11]
    9988:	330b      	adds	r3, #11
    998a:	2a3c      	cmp	r2, #60	; 0x3c
    998c:	d017      	beq.n	99be <ll_rx_dequeue+0x82>
    998e:	785b      	ldrb	r3, [r3, #1]
    9990:	2b00      	cmp	r3, #0
    9992:	d130      	bne.n	99f6 <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    9994:	0022      	movs	r2, r4
    9996:	2101      	movs	r1, #1
    9998:	32dc      	adds	r2, #220	; 0xdc
    999a:	7813      	ldrb	r3, [r2, #0]
    999c:	420b      	tst	r3, r1
    999e:	d0dc      	beq.n	995a <ll_rx_dequeue+0x1e>
			_radio.scanner.is_enabled = 0;
    99a0:	438b      	bics	r3, r1
    99a2:	7013      	strb	r3, [r2, #0]
    99a4:	e019      	b.n	99da <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    99a6:	209a      	movs	r0, #154	; 0x9a
    99a8:	25a4      	movs	r5, #164	; 0xa4
    99aa:	0040      	lsls	r0, r0, #1
    99ac:	006d      	lsls	r5, r5, #1
    99ae:	5c20      	ldrb	r0, [r4, r0]
    99b0:	5d63      	ldrb	r3, [r4, r5]
    99b2:	3801      	subs	r0, #1
    99b4:	4283      	cmp	r3, r0
    99b6:	dad0      	bge.n	995a <ll_rx_dequeue+0x1e>
		_radio.link_rx_data_quota++;
    99b8:	3301      	adds	r3, #1
    99ba:	5563      	strb	r3, [r4, r5]
		break;
    99bc:	e7e0      	b.n	9980 <ll_rx_dequeue+0x44>
				conn = _radio.advertiser.conn;
    99be:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    99c0:	2200      	movs	r2, #0
				conn = _radio.advertiser.conn;
    99c2:	33c8      	adds	r3, #200	; 0xc8
    99c4:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
    99c6:	601a      	str	r2, [r3, #0]
			LL_ASSERT(_radio.advertiser.is_enabled);
    99c8:	1d62      	adds	r2, r4, #5
    99ca:	7fd3      	ldrb	r3, [r2, #31]
    99cc:	2b7f      	cmp	r3, #127	; 0x7f
    99ce:	d9c4      	bls.n	995a <ll_rx_dequeue+0x1e>
			_radio.advertiser.is_enabled = 0;
    99d0:	217f      	movs	r1, #127	; 0x7f
    99d2:	400b      	ands	r3, r1
    99d4:	77d3      	strb	r3, [r2, #31]
		if (conn) {
    99d6:	2d00      	cmp	r5, #0
    99d8:	d10f      	bne.n	99fa <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    99da:	0023      	movs	r3, r4
    99dc:	33dc      	adds	r3, #220	; 0xdc
    99de:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
    99e0:	3405      	adds	r4, #5
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    99e2:	07c0      	lsls	r0, r0, #31
		     _radio.advertiser.is_enabled;
    99e4:	7fe3      	ldrb	r3, [r4, #31]
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    99e6:	0fc0      	lsrs	r0, r0, #31
    99e8:	0040      	lsls	r0, r0, #1
    99ea:	09db      	lsrs	r3, r3, #7
		if (!bm) {
    99ec:	4318      	orrs	r0, r3
    99ee:	d101      	bne.n	99f4 <ll_rx_dequeue+0xb8>
			ll_adv_scan_state_cb(0);
    99f0:	f7ff fdf8 	bl	95e4 <ll_adv_scan_state_cb>
}
    99f4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		struct connection *conn = NULL;
    99f6:	2500      	movs	r5, #0
    99f8:	e7e6      	b.n	99c8 <ll_rx_dequeue+0x8c>
			mem_release(node_rx->hdr.onion.link,
    99fa:	0021      	movs	r1, r4
    99fc:	002b      	movs	r3, r5
    99fe:	313d      	adds	r1, #61	; 0x3d
    9a00:	339c      	adds	r3, #156	; 0x9c
    9a02:	6818      	ldr	r0, [r3, #0]
    9a04:	31ff      	adds	r1, #255	; 0xff
    9a06:	f7fa fb08 	bl	401a <mem_release>
			mem_release(conn, &_radio.conn_free);
    9a0a:	0021      	movs	r1, r4
    9a0c:	3109      	adds	r1, #9
    9a0e:	31ff      	adds	r1, #255	; 0xff
    9a10:	0028      	movs	r0, r5
    9a12:	f7fa fb02 	bl	401a <mem_release>
    9a16:	e7e0      	b.n	99da <ll_rx_dequeue+0x9e>
    9a18:	20000284 	.word	0x20000284
    9a1c:	0000077e 	.word	0x0000077e

00009a20 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    9a20:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    9a22:	4c0a      	ldr	r4, [pc, #40]	; (9a4c <rtc0_nrf5_isr+0x2c>)
    9a24:	6c62      	ldr	r2, [r4, #68]	; 0x44
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    9a26:	6ca5      	ldr	r5, [r4, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    9a28:	2a00      	cmp	r2, #0
    9a2a:	d003      	beq.n	9a34 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    9a2c:	2000      	movs	r0, #0
    9a2e:	6460      	str	r0, [r4, #68]	; 0x44

		ticker_trigger(0);
    9a30:	f7fb f8f4 	bl	4c1c <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    9a34:	2d00      	cmp	r5, #0
    9a36:	d004      	beq.n	9a42 <rtc0_nrf5_isr+0x22>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    9a38:	2300      	movs	r3, #0

		ticker_trigger(1);
    9a3a:	2001      	movs	r0, #1
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    9a3c:	64a3      	str	r3, [r4, #72]	; 0x48
		ticker_trigger(1);
    9a3e:	f7fb f8ed 	bl	4c1c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    9a42:	2000      	movs	r0, #0
    9a44:	f7fa fbd8 	bl	41f8 <mayfly_run>
}
    9a48:	bd70      	pop	{r4, r5, r6, pc}
    9a4a:	46c0      	nop			; (mov r8, r8)
    9a4c:	4000b0fc 	.word	0x4000b0fc

00009a50 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    9a50:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    9a52:	2001      	movs	r0, #1
    9a54:	f7fa fbd0 	bl	41f8 <mayfly_run>
}
    9a58:	bd10      	pop	{r4, pc}

00009a5a <rng_nrf5_isr>:
{
    9a5a:	b510      	push	{r4, lr}
	isr_rand(arg);
    9a5c:	f000 fc5c 	bl	a318 <isr_rand>
}
    9a60:	bd10      	pop	{r4, pc}

00009a62 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    9a62:	b510      	push	{r4, lr}
	isr_radio();
    9a64:	f000 fce0 	bl	a428 <isr_radio>
	ISR_DIRECT_PM();
    9a68:	f7f8 fb8a 	bl	2180 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    9a6c:	f7f8 fa76 	bl	1f5c <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    9a70:	bd10      	pop	{r4, pc}

00009a72 <radio_active_callback>:
}
    9a72:	4770      	bx	lr

00009a74 <radio_event_callback>:
{
    9a74:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    9a76:	4b02      	ldr	r3, [pc, #8]	; (9a80 <radio_event_callback+0xc>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9a78:	6818      	ldr	r0, [r3, #0]
    9a7a:	f001 fed5 	bl	b828 <_impl_k_sem_give>
}
    9a7e:	bd10      	pop	{r4, pc}
    9a80:	20000a44 	.word	0x20000a44

00009a84 <ll_init>:

int ll_init(struct k_sem *sem_rx)
{
    9a84:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    9a86:	4b3c      	ldr	r3, [pc, #240]	; (9b78 <ll_init+0xf4>)
{
    9a88:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    9a8a:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
    9a8c:	2204      	movs	r2, #4
    9a8e:	2109      	movs	r1, #9
    9a90:	483a      	ldr	r0, [pc, #232]	; (9b7c <ll_init+0xf8>)
    9a92:	f000 fc19 	bl	a2c8 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
    9a96:	483a      	ldr	r0, [pc, #232]	; (9b80 <ll_init+0xfc>)
    9a98:	220c      	movs	r2, #12
    9a9a:	2111      	movs	r1, #17
    9a9c:	f000 fc1e 	bl	a2dc <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    9aa0:	4838      	ldr	r0, [pc, #224]	; (9b84 <ll_init+0x100>)
    9aa2:	f001 f9bb 	bl	ae1c <device_get_binding>
	if (!clk_k32) {
    9aa6:	2800      	cmp	r0, #0
    9aa8:	d102      	bne.n	9ab0 <ll_init+0x2c>
		return -ENODEV;
    9aaa:	2013      	movs	r0, #19
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
    9aac:	4240      	negs	r0, r0
    9aae:	e05e      	b.n	9b6e <ll_init+0xea>
	return api->on(dev, sys);
    9ab0:	6843      	ldr	r3, [r0, #4]
    9ab2:	2100      	movs	r1, #0
    9ab4:	681b      	ldr	r3, [r3, #0]
    9ab6:	4798      	blx	r3
	cntr_init();
    9ab8:	f000 fb02 	bl	a0c0 <cntr_init>
	mayfly_init();
    9abc:	f7fa fb00 	bl	40c0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    9ac0:	2208      	movs	r2, #8
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    9ac2:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    9ac4:	2402      	movs	r4, #2
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ac6:	250d      	movs	r5, #13
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    9ac8:	4b2f      	ldr	r3, [pc, #188]	; (9b88 <ll_init+0x104>)
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9aca:	2107      	movs	r1, #7
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    9acc:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    9ace:	3a05      	subs	r2, #5
    9ad0:	721a      	strb	r2, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ad2:	4a2e      	ldr	r2, [pc, #184]	; (9b8c <ll_init+0x108>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    9ad4:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    9ad6:	761c      	strb	r4, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ad8:	9205      	str	r2, [sp, #20]
    9ada:	4a2d      	ldr	r2, [pc, #180]	; (9b90 <ll_init+0x10c>)
    9adc:	9300      	str	r3, [sp, #0]
    9ade:	9204      	str	r2, [sp, #16]
    9ae0:	4a2c      	ldr	r2, [pc, #176]	; (9b94 <ll_init+0x110>)
    9ae2:	9501      	str	r5, [sp, #4]
    9ae4:	9203      	str	r2, [sp, #12]
    9ae6:	4a2c      	ldr	r2, [pc, #176]	; (9b98 <ll_init+0x114>)
    9ae8:	2304      	movs	r3, #4
    9aea:	9202      	str	r2, [sp, #8]
    9aec:	4a2b      	ldr	r2, [pc, #172]	; (9b9c <ll_init+0x118>)
    9aee:	f7fb f85d 	bl	4bac <ticker_init>
    9af2:	1e06      	subs	r6, r0, #0
	LL_ASSERT(!err);
    9af4:	d002      	beq.n	9afc <ll_init+0x78>
    9af6:	b662      	cpsie	i
    9af8:	2004      	movs	r0, #4
    9afa:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    9afc:	4828      	ldr	r0, [pc, #160]	; (9ba0 <ll_init+0x11c>)
    9afe:	f001 f98d 	bl	ae1c <device_get_binding>
	if (!clk_m16) {
    9b02:	2800      	cmp	r0, #0
    9b04:	d0d1      	beq.n	9aaa <ll_init+0x26>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    9b06:	23f8      	movs	r3, #248	; 0xf8
    9b08:	005b      	lsls	r3, r3, #1
    9b0a:	9304      	str	r3, [sp, #16]
    9b0c:	4b25      	ldr	r3, [pc, #148]	; (9ba4 <ll_init+0x120>)
    9b0e:	9400      	str	r4, [sp, #0]
    9b10:	9303      	str	r3, [sp, #12]
    9b12:	231b      	movs	r3, #27
    9b14:	9302      	str	r3, [sp, #8]
    9b16:	9301      	str	r3, [sp, #4]
    9b18:	3b1a      	subs	r3, #26
    9b1a:	0032      	movs	r2, r6
    9b1c:	0019      	movs	r1, r3
    9b1e:	f7ff fb6f 	bl	9200 <radio_init>
    9b22:	1e04      	subs	r4, r0, #0
	if (err) {
    9b24:	d125      	bne.n	9b72 <ll_init+0xee>
	}

	ll_filter_reset(true);
    9b26:	2001      	movs	r0, #1
    9b28:	f000 fabe 	bl	a0a8 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9b2c:	0022      	movs	r2, r4
    9b2e:	0021      	movs	r1, r4
    9b30:	2001      	movs	r0, #1
    9b32:	f7f8 faef 	bl	2114 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9b36:	0022      	movs	r2, r4
    9b38:	0021      	movs	r1, r4
    9b3a:	200b      	movs	r0, #11
    9b3c:	f7f8 faea 	bl	2114 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    9b40:	0022      	movs	r2, r4
    9b42:	0021      	movs	r1, r4
    9b44:	2018      	movs	r0, #24
    9b46:	f7f8 fae5 	bl	2114 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    9b4a:	0022      	movs	r2, r4
    9b4c:	2101      	movs	r1, #1
    9b4e:	0028      	movs	r0, r5
    9b50:	f7f8 fae0 	bl	2114 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    9b54:	2001      	movs	r0, #1
    9b56:	f7f8 fab3 	bl	20c0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    9b5a:	200b      	movs	r0, #11
    9b5c:	f7f8 fab0 	bl	20c0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    9b60:	2018      	movs	r0, #24
    9b62:	f7f8 faad 	bl	20c0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    9b66:	0028      	movs	r0, r5
    9b68:	f7f8 faaa 	bl	20c0 <_arch_irq_enable>

	return 0;
    9b6c:	0020      	movs	r0, r4
}
    9b6e:	b006      	add	sp, #24
    9b70:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    9b72:	200c      	movs	r0, #12
    9b74:	e79a      	b.n	9aac <ll_init+0x28>
    9b76:	46c0      	nop			; (mov r8, r8)
    9b78:	20000a44 	.word	0x20000a44
    9b7c:	20000a24 	.word	0x20000a24
    9b80:	20000a30 	.word	0x20000a30
    9b84:	0000c90c 	.word	0x0000c90c
    9b88:	20000a04 	.word	0x20000a04
    9b8c:	0000abd9 	.word	0x0000abd9
    9b90:	0000ab65 	.word	0x0000ab65
    9b94:	0000ab4d 	.word	0x0000ab4d
    9b98:	20000794 	.word	0x20000794
    9b9c:	2000067c 	.word	0x2000067c
    9ba0:	0000c917 	.word	0x0000c917
    9ba4:	2000048c 	.word	0x2000048c

00009ba8 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    9ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9baa:	b08b      	sub	sp, #44	; 0x2c
    9bac:	9201      	str	r2, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9bae:	2200      	movs	r2, #0
{
    9bb0:	001d      	movs	r5, r3
    9bb2:	ab10      	add	r3, sp, #64	; 0x40
    9bb4:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9bb6:	2601      	movs	r6, #1
{
    9bb8:	9302      	str	r3, [sp, #8]
    9bba:	ab11      	add	r3, sp, #68	; 0x44
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	000f      	movs	r7, r1
    9bc0:	9303      	str	r3, [sp, #12]
    9bc2:	ab13      	add	r3, sp, #76	; 0x4c
    9bc4:	781b      	ldrb	r3, [r3, #0]
    9bc6:	9304      	str	r3, [sp, #16]
    9bc8:	ab14      	add	r3, sp, #80	; 0x50
    9bca:	781b      	ldrb	r3, [r3, #0]
    9bcc:	9305      	str	r3, [sp, #20]
    9bce:	ab16      	add	r3, sp, #88	; 0x58
    9bd0:	781b      	ldrb	r3, [r3, #0]
    9bd2:	9300      	str	r3, [sp, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9bd4:	ab08      	add	r3, sp, #32
    9bd6:	701a      	strb	r2, [r3, #0]
    9bd8:	3206      	adds	r2, #6
    9bda:	709a      	strb	r2, [r3, #2]
    9bdc:	3a04      	subs	r2, #4
    9bde:	70da      	strb	r2, [r3, #3]
    9be0:	2207      	movs	r2, #7
    9be2:	705e      	strb	r6, [r3, #1]
    9be4:	711e      	strb	r6, [r3, #4]
    9be6:	715a      	strb	r2, [r3, #5]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    9be8:	f7ff fbe8 	bl	93bc <ll_adv_is_enabled>
    9bec:	1e04      	subs	r4, r0, #0
    9bee:	d000      	beq.n	9bf2 <ll_adv_params_set+0x4a>
    9bf0:	e0ce      	b.n	9d90 <ll_adv_params_set+0x1e8>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    9bf2:	201f      	movs	r0, #31
    9bf4:	2320      	movs	r3, #32
    9bf6:	4a68      	ldr	r2, [pc, #416]	; (9d98 <ll_adv_params_set+0x1f0>)
    9bf8:	7811      	ldrb	r1, [r2, #0]
    9bfa:	4001      	ands	r1, r0
    9bfc:	430b      	orrs	r3, r1
    9bfe:	7013      	strb	r3, [r2, #0]

	/* extended */
	if (adv_type > 0x04) {
    9c00:	2d04      	cmp	r5, #4
    9c02:	d967      	bls.n	9cd4 <ll_adv_params_set+0x12c>
    9c04:	2303      	movs	r3, #3
		/* legacy */
		if (evt_prop & BIT(4)) {
    9c06:	06f9      	lsls	r1, r7, #27
    9c08:	d50e      	bpl.n	9c28 <ll_adv_params_set+0x80>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    9c0a:	2104      	movs	r1, #4
    9c0c:	aa07      	add	r2, sp, #28
    9c0e:	7051      	strb	r1, [r2, #1]
    9c10:	3902      	subs	r1, #2
    9c12:	7013      	strb	r3, [r2, #0]
    9c14:	7091      	strb	r1, [r2, #2]
    9c16:	70d4      	strb	r4, [r2, #3]

			adv_type = leg_adv_type[evt_prop & 0x03];
    9c18:	403b      	ands	r3, r7
    9c1a:	5cd5      	ldrb	r5, [r2, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    9c1c:	073b      	lsls	r3, r7, #28
    9c1e:	d559      	bpl.n	9cd4 <ll_adv_params_set+0x12c>
				adv_type = 0x01;
    9c20:	0035      	movs	r5, r6
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    9c22:	2200      	movs	r2, #0
    9c24:	4b5c      	ldr	r3, [pc, #368]	; (9d98 <ll_adv_params_set+0x1f0>)
    9c26:	e011      	b.n	9c4c <ll_adv_params_set+0xa4>
			if (((evt_prop & 0x03) == 0x03) ||
    9c28:	403b      	ands	r3, r7
    9c2a:	2b03      	cmp	r3, #3
    9c2c:	d100      	bne.n	9c30 <ll_adv_params_set+0x88>
    9c2e:	e0b1      	b.n	9d94 <ll_adv_params_set+0x1ec>
    9c30:	230c      	movs	r3, #12
    9c32:	403b      	ands	r3, r7
    9c34:	2b0c      	cmp	r3, #12
    9c36:	d100      	bne.n	9c3a <ll_adv_params_set+0x92>
    9c38:	e0ac      	b.n	9d94 <ll_adv_params_set+0x1ec>
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    9c3a:	2505      	movs	r5, #5
			ll_adv.phy_p = phy_p;
    9c3c:	9b00      	ldr	r3, [sp, #0]
    9c3e:	0159      	lsls	r1, r3, #5
    9c40:	7813      	ldrb	r3, [r2, #0]
    9c42:	4003      	ands	r3, r0
    9c44:	430b      	orrs	r3, r1
    9c46:	7013      	strb	r3, [r2, #0]
		ll_adv.interval = interval;
    9c48:	4b53      	ldr	r3, [pc, #332]	; (9d98 <ll_adv_params_set+0x1f0>)
    9c4a:	9a01      	ldr	r2, [sp, #4]
	}
	ll_adv.chan_map = chan_map;
    9c4c:	2107      	movs	r1, #7
		ll_adv.interval = 0;
    9c4e:	605a      	str	r2, [r3, #4]
	ll_adv.chan_map = chan_map;
    9c50:	4a51      	ldr	r2, [pc, #324]	; (9d98 <ll_adv_params_set+0x1f0>)
    9c52:	9804      	ldr	r0, [sp, #16]
    9c54:	7813      	ldrb	r3, [r2, #0]
    9c56:	4008      	ands	r0, r1
    9c58:	438b      	bics	r3, r1
	ll_adv.filter_policy = filter_policy;
    9c5a:	4303      	orrs	r3, r0
    9c5c:	2018      	movs	r0, #24
    9c5e:	9e05      	ldr	r6, [sp, #20]
    9c60:	3904      	subs	r1, #4
    9c62:	400e      	ands	r6, r1
    9c64:	00f1      	lsls	r1, r6, #3
    9c66:	4383      	bics	r3, r0
    9c68:	430b      	orrs	r3, r1
    9c6a:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    9c6c:	f7ff fb9a 	bl	93a4 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9c70:	0003      	movs	r3, r0
    9c72:	2627      	movs	r6, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
    9c74:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9c76:	334f      	adds	r3, #79	; 0x4f
    9c78:	781b      	ldrb	r3, [r3, #0]
    9c7a:	435e      	muls	r6, r3
	pdu->type = pdu_adv_type[adv_type];
    9c7c:	ab08      	add	r3, sp, #32
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9c7e:	1986      	adds	r6, r0, r6
	pdu->type = pdu_adv_type[adv_type];
    9c80:	5d59      	ldrb	r1, [r3, r5]
    9c82:	7833      	ldrb	r3, [r6, #0]
    9c84:	4011      	ands	r1, r2
    9c86:	4393      	bics	r3, r2
	pdu->rfu = 0;
    9c88:	430b      	orrs	r3, r1
    9c8a:	2110      	movs	r1, #16
    9c8c:	438b      	bics	r3, r1
    9c8e:	7033      	strb	r3, [r6, #0]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    9c90:	401a      	ands	r2, r3
    9c92:	1849      	adds	r1, r1, r1
    9c94:	2a01      	cmp	r2, #1
    9c96:	d820      	bhi.n	9cda <ll_adv_params_set+0x132>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    9c98:	430b      	orrs	r3, r1
	} else {
		pdu->chan_sel = 0;
    9c9a:	7033      	strb	r3, [r6, #0]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    9c9c:	2301      	movs	r3, #1
    9c9e:	2040      	movs	r0, #64	; 0x40
    9ca0:	9d02      	ldr	r5, [sp, #8]
    9ca2:	401d      	ands	r5, r3
    9ca4:	7833      	ldrb	r3, [r6, #0]
    9ca6:	01a9      	lsls	r1, r5, #6
    9ca8:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    9caa:	430b      	orrs	r3, r1
    9cac:	217f      	movs	r1, #127	; 0x7f
    9cae:	400b      	ands	r3, r1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    9cb0:	3970      	subs	r1, #112	; 0x70
	pdu->rx_addr = 0;
    9cb2:	7033      	strb	r3, [r6, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    9cb4:	4019      	ands	r1, r3
    9cb6:	2901      	cmp	r1, #1
    9cb8:	d111      	bne.n	9cde <ll_adv_params_set+0x136>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9cba:	0030      	movs	r0, r6
		pdu->rx_addr = direct_addr_type;
    9cbc:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9cbe:	3008      	adds	r0, #8
		pdu->rx_addr = direct_addr_type;
    9cc0:	01d2      	lsls	r2, r2, #7
    9cc2:	4313      	orrs	r3, r2
    9cc4:	7033      	strb	r3, [r6, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9cc6:	2206      	movs	r2, #6
    9cc8:	9912      	ldr	r1, [sp, #72]	; 0x48
    9cca:	f7f7 fb89 	bl	13e0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    9cce:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    9cd0:	7073      	strb	r3, [r6, #1]
    9cd2:	e039      	b.n	9d48 <ll_adv_params_set+0x1a0>
	if (adv_type != 0x01) {
    9cd4:	2d01      	cmp	r5, #1
    9cd6:	d1b7      	bne.n	9c48 <ll_adv_params_set+0xa0>
    9cd8:	e7a3      	b.n	9c22 <ll_adv_params_set+0x7a>
		pdu->chan_sel = 0;
    9cda:	438b      	bics	r3, r1
    9cdc:	e7dd      	b.n	9c9a <ll_adv_params_set+0xf2>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    9cde:	2907      	cmp	r1, #7
    9ce0:	d151      	bne.n	9d86 <ll_adv_params_set+0x1de>
		p->adv_mode = evt_prop & 0x03;
    9ce2:	01b9      	lsls	r1, r7, #6
    9ce4:	70b1      	strb	r1, [r6, #2]
		*(u8_t *)h = 0;
    9ce6:	2100      	movs	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    9ce8:	1cb0      	adds	r0, r6, #2
		ptr = (u8_t *)h + sizeof(*h);
    9cea:	1d33      	adds	r3, r6, #4
		*(u8_t *)h = 0;
    9cec:	70f1      	strb	r1, [r6, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    9cee:	06ba      	lsls	r2, r7, #26
    9cf0:	d40a      	bmi.n	9d08 <ll_adv_params_set+0x160>
    9cf2:	223f      	movs	r2, #63	; 0x3f
    9cf4:	78b1      	ldrb	r1, [r6, #2]
    9cf6:	4391      	bics	r1, r2
    9cf8:	d106      	bne.n	9d08 <ll_adv_params_set+0x160>
    9cfa:	9a00      	ldr	r2, [sp, #0]
    9cfc:	2a04      	cmp	r2, #4
    9cfe:	d003      	beq.n	9d08 <ll_adv_params_set+0x160>
			h->adv_addr = 1;
    9d00:	2301      	movs	r3, #1
    9d02:	70f3      	strb	r3, [r6, #3]
			ptr += BDADDR_SIZE;
    9d04:	0033      	movs	r3, r6
    9d06:	330a      	adds	r3, #10
		if (evt_prop & BIT(6)) {
    9d08:	2140      	movs	r1, #64	; 0x40
    9d0a:	420f      	tst	r7, r1
    9d0c:	d003      	beq.n	9d16 <ll_adv_params_set+0x16e>
			h->tx_pwr = 1;
    9d0e:	78f2      	ldrb	r2, [r6, #3]
			ptr++;
    9d10:	3301      	adds	r3, #1
			h->tx_pwr = 1;
    9d12:	4311      	orrs	r1, r2
    9d14:	70f1      	strb	r1, [r6, #3]
		len = ptr - (u8_t *)p;
    9d16:	1a1a      	subs	r2, r3, r0
    9d18:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    9d1a:	2a02      	cmp	r2, #2
    9d1c:	d931      	bls.n	9d82 <ll_adv_params_set+0x1da>
			p->ext_hdr_len = len -
    9d1e:	273f      	movs	r7, #63	; 0x3f
    9d20:	78b1      	ldrb	r1, [r6, #2]
    9d22:	1e50      	subs	r0, r2, #1
    9d24:	4038      	ands	r0, r7
    9d26:	43b9      	bics	r1, r7
    9d28:	4301      	orrs	r1, r0
    9d2a:	70b1      	strb	r1, [r6, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9d2c:	7072      	strb	r2, [r6, #1]
		if (h->tx_pwr) {
    9d2e:	78f2      	ldrb	r2, [r6, #3]
    9d30:	0652      	lsls	r2, r2, #25
    9d32:	d509      	bpl.n	9d48 <ll_adv_params_set+0x1a0>
			_tx_pwr = 0;
    9d34:	9a15      	ldr	r2, [sp, #84]	; 0x54
			if (tx_pwr) {
    9d36:	1e11      	subs	r1, r2, #0
    9d38:	d004      	beq.n	9d44 <ll_adv_params_set+0x19c>
				if (*tx_pwr != 0x7F) {
    9d3a:	7812      	ldrb	r2, [r2, #0]
    9d3c:	2a7f      	cmp	r2, #127	; 0x7f
    9d3e:	d101      	bne.n	9d44 <ll_adv_params_set+0x19c>
					*tx_pwr = _tx_pwr;
    9d40:	2200      	movs	r2, #0
    9d42:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    9d44:	3b01      	subs	r3, #1
    9d46:	701a      	strb	r2, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    9d48:	f7ff fb32 	bl	93b0 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9d4c:	0003      	movs	r3, r0
    9d4e:	334f      	adds	r3, #79	; 0x4f
    9d50:	781a      	ldrb	r2, [r3, #0]
    9d52:	2327      	movs	r3, #39	; 0x27
    9d54:	4353      	muls	r3, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9d56:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9d58:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9d5a:	7803      	ldrb	r3, [r0, #0]
    9d5c:	4393      	bics	r3, r2
    9d5e:	001a      	movs	r2, r3
	pdu->rfu = 0;
    9d60:	2304      	movs	r3, #4
    9d62:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    9d64:	01aa      	lsls	r2, r5, #6
    9d66:	258f      	movs	r5, #143	; 0x8f
    9d68:	401d      	ands	r5, r3
	pdu->rx_addr = 0;
    9d6a:	237f      	movs	r3, #127	; 0x7f
    9d6c:	4315      	orrs	r5, r2
    9d6e:	401d      	ands	r5, r3
	if (pdu->len == 0) {
    9d70:	7843      	ldrb	r3, [r0, #1]
	pdu->rx_addr = 0;
    9d72:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
    9d74:	2b00      	cmp	r3, #0
    9d76:	d101      	bne.n	9d7c <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
    9d78:	3306      	adds	r3, #6
    9d7a:	7043      	strb	r3, [r0, #1]
	}

	return 0;
}
    9d7c:	0020      	movs	r0, r4
    9d7e:	b00b      	add	sp, #44	; 0x2c
    9d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9d82:	2201      	movs	r2, #1
    9d84:	e7d2      	b.n	9d2c <ll_adv_params_set+0x184>
	} else if (pdu->len == 0) {
    9d86:	7873      	ldrb	r3, [r6, #1]
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d1dd      	bne.n	9d48 <ll_adv_params_set+0x1a0>
		pdu->len = BDADDR_SIZE;
    9d8c:	3306      	adds	r3, #6
    9d8e:	e79f      	b.n	9cd0 <ll_adv_params_set+0x128>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9d90:	240c      	movs	r4, #12
    9d92:	e7f3      	b.n	9d7c <ll_adv_params_set+0x1d4>
				return 0x12; /* invalid HCI cmd param */
    9d94:	2412      	movs	r4, #18
    9d96:	e7f1      	b.n	9d7c <ll_adv_params_set+0x1d4>
    9d98:	20000a48 	.word	0x20000a48

00009d9c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    9d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d9e:	0007      	movs	r7, r0
    9da0:	9100      	str	r1, [sp, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    9da2:	f7ff faff 	bl	93a4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9da6:	0003      	movs	r3, r0
    9da8:	2127      	movs	r1, #39	; 0x27
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    9daa:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9dac:	334f      	adds	r3, #79	; 0x4f
    9dae:	781d      	ldrb	r5, [r3, #0]
	radio_adv_data = radio_adv_data_get();
    9db0:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9db2:	4369      	muls	r1, r5
    9db4:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    9db6:	780b      	ldrb	r3, [r1, #0]
    9db8:	401a      	ands	r2, r3
    9dba:	2a01      	cmp	r2, #1
    9dbc:	d045      	beq.n	9e4a <ll_adv_data_set+0xae>
    9dbe:	2a07      	cmp	r2, #7
    9dc0:	d043      	beq.n	9e4a <ll_adv_data_set+0xae>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    9dc2:	0002      	movs	r2, r0
    9dc4:	324e      	adds	r2, #78	; 0x4e
    9dc6:	7812      	ldrb	r2, [r2, #0]
    9dc8:	42aa      	cmp	r2, r5
    9dca:	d104      	bne.n	9dd6 <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
    9dcc:	3501      	adds	r5, #1
    9dce:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    9dd0:	2d02      	cmp	r5, #2
    9dd2:	d100      	bne.n	9dd6 <ll_adv_data_set+0x3a>
			last = 0;
    9dd4:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    9dd6:	200f      	movs	r0, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    9dd8:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
    9dda:	4003      	ands	r3, r0
    9ddc:	001a      	movs	r2, r3
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    9dde:	436c      	muls	r4, r5
    9de0:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
    9de2:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    9de4:	364f      	adds	r6, #79	; 0x4f
	pdu->type = prev->type;
    9de6:	4383      	bics	r3, r0
	pdu->rfu = 0;
    9de8:	4313      	orrs	r3, r2
    9dea:	2210      	movs	r2, #16
    9dec:	4393      	bics	r3, r2
    9dee:	7023      	strb	r3, [r4, #0]
		pdu->chan_sel = prev->chan_sel;
    9df0:	780a      	ldrb	r2, [r1, #0]
    9df2:	380e      	subs	r0, #14
    9df4:	0952      	lsrs	r2, r2, #5
    9df6:	4002      	ands	r2, r0
    9df8:	0153      	lsls	r3, r2, #5
    9dfa:	9301      	str	r3, [sp, #4]
    9dfc:	7823      	ldrb	r3, [r4, #0]
    9dfe:	001a      	movs	r2, r3
    9e00:	2320      	movs	r3, #32
    9e02:	439a      	bics	r2, r3
    9e04:	0013      	movs	r3, r2
    9e06:	9a01      	ldr	r2, [sp, #4]
    9e08:	431a      	orrs	r2, r3
    9e0a:	7022      	strb	r2, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
    9e0c:	780b      	ldrb	r3, [r1, #0]
    9e0e:	b2d2      	uxtb	r2, r2
    9e10:	099b      	lsrs	r3, r3, #6
    9e12:	4003      	ands	r3, r0
    9e14:	303f      	adds	r0, #63	; 0x3f
    9e16:	4382      	bics	r2, r0
    9e18:	019b      	lsls	r3, r3, #6
    9e1a:	4313      	orrs	r3, r2
    9e1c:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
    9e1e:	780b      	ldrb	r3, [r1, #0]
    9e20:	303f      	adds	r0, #63	; 0x3f
    9e22:	09db      	lsrs	r3, r3, #7
    9e24:	01da      	lsls	r2, r3, #7
    9e26:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    9e28:	3102      	adds	r1, #2
	pdu->rx_addr = prev->rx_addr;
    9e2a:	4003      	ands	r3, r0
    9e2c:	4313      	orrs	r3, r2
    9e2e:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    9e30:	2206      	movs	r2, #6
    9e32:	1ca0      	adds	r0, r4, #2
    9e34:	f7f7 fad4 	bl	13e0 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    9e38:	0020      	movs	r0, r4
    9e3a:	003a      	movs	r2, r7
    9e3c:	3008      	adds	r0, #8
    9e3e:	9900      	ldr	r1, [sp, #0]
    9e40:	f7f7 face 	bl	13e0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    9e44:	1dbb      	adds	r3, r7, #6
    9e46:	7063      	strb	r3, [r4, #1]
	radio_adv_data->last = last;
    9e48:	7035      	strb	r5, [r6, #0]
}
    9e4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00009e4c <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    9e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e4e:	0007      	movs	r7, r0
    9e50:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    9e52:	f7ff faad 	bl	93b0 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    9e56:	0003      	movs	r3, r0
    9e58:	334f      	adds	r3, #79	; 0x4f
    9e5a:	7819      	ldrb	r1, [r3, #0]
    9e5c:	3b01      	subs	r3, #1
    9e5e:	781b      	ldrb	r3, [r3, #0]
	radio_scan_data = radio_scan_data_get();
    9e60:	0005      	movs	r5, r0
    9e62:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
    9e64:	428b      	cmp	r3, r1
    9e66:	d104      	bne.n	9e72 <ll_scan_data_set+0x26>
		last = radio_scan_data->last + 1;
    9e68:	1c4e      	adds	r6, r1, #1
    9e6a:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    9e6c:	2e02      	cmp	r6, #2
    9e6e:	d100      	bne.n	9e72 <ll_scan_data_set+0x26>
			last = 0;
    9e70:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    9e72:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9e74:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)
    9e76:	4361      	muls	r1, r4
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    9e78:	4374      	muls	r4, r6
    9e7a:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9e7c:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    9e7e:	2040      	movs	r0, #64	; 0x40
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9e80:	4393      	bics	r3, r2
    9e82:	001a      	movs	r2, r3
	pdu->rfu = 0;
    9e84:	2304      	movs	r3, #4
    9e86:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
    9e88:	22cf      	movs	r2, #207	; 0xcf
    9e8a:	4013      	ands	r3, r2
    9e8c:	7023      	strb	r3, [r4, #0]
	prev = (struct pdu_adv *)
    9e8e:	1869      	adds	r1, r5, r1
	pdu->tx_addr = prev->tx_addr;
    9e90:	780b      	ldrb	r3, [r1, #0]
    9e92:	3a8f      	subs	r2, #143	; 0x8f
    9e94:	401a      	ands	r2, r3
    9e96:	7823      	ldrb	r3, [r4, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    9e98:	3102      	adds	r1, #2
	pdu->tx_addr = prev->tx_addr;
    9e9a:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    9e9c:	4313      	orrs	r3, r2
    9e9e:	227f      	movs	r2, #127	; 0x7f
    9ea0:	4013      	ands	r3, r2
    9ea2:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    9ea4:	1dbb      	adds	r3, r7, #6
    9ea6:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    9ea8:	1ca0      	adds	r0, r4, #2
    9eaa:	3a79      	subs	r2, #121	; 0x79
    9eac:	f7f7 fa98 	bl	13e0 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    9eb0:	0020      	movs	r0, r4
    9eb2:	003a      	movs	r2, r7

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    9eb4:	354f      	adds	r5, #79	; 0x4f
	memcpy(&pdu->scan_rsp.data[0], data, len);
    9eb6:	9901      	ldr	r1, [sp, #4]
    9eb8:	3008      	adds	r0, #8
    9eba:	f7f7 fa91 	bl	13e0 <memcpy>
	radio_scan_data->last = last;
    9ebe:	702e      	strb	r6, [r5, #0]
}
    9ec0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00009ec4 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    9ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec6:	b085      	sub	sp, #20
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    9ec8:	2800      	cmp	r0, #0
    9eca:	d103      	bne.n	9ed4 <ll_adv_enable+0x10>
		return radio_adv_disable();
    9ecc:	f7ff fd06 	bl	98dc <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    9ed0:	b005      	add	sp, #20
    9ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ll_adv_is_enabled()) {
    9ed4:	f7ff fa72 	bl	93bc <ll_adv_is_enabled>
    9ed8:	0007      	movs	r7, r0
		return 0;
    9eda:	2000      	movs	r0, #0
	} else if (ll_adv_is_enabled()) {
    9edc:	4287      	cmp	r7, r0
    9ede:	d1f7      	bne.n	9ed0 <ll_adv_enable+0xc>
	radio_adv_data = radio_adv_data_get();
    9ee0:	f7ff fa60 	bl	93a4 <radio_adv_data_get>
    9ee4:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
    9ee6:	f7ff fa63 	bl	93b0 <radio_scan_data_get>
			[radio_adv_data->last][0];
    9eea:	0023      	movs	r3, r4
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9eec:	2627      	movs	r6, #39	; 0x27
			[radio_adv_data->last][0];
    9eee:	334f      	adds	r3, #79	; 0x4f
	radio_scan_data = radio_scan_data_get();
    9ef0:	0005      	movs	r5, r0
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9ef2:	7818      	ldrb	r0, [r3, #0]
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9ef4:	230f      	movs	r3, #15
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9ef6:	4370      	muls	r0, r6
    9ef8:	1824      	adds	r4, r4, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9efa:	7820      	ldrb	r0, [r4, #0]
    9efc:	4003      	ands	r3, r0
    9efe:	2b07      	cmp	r3, #7
    9f00:	d11a      	bne.n	9f38 <ll_adv_enable+0x74>
		if (h->adv_addr) {
    9f02:	78e3      	ldrb	r3, [r4, #3]
    9f04:	07db      	lsls	r3, r3, #31
    9f06:	d509      	bpl.n	9f1c <ll_adv_enable+0x58>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    9f08:	0640      	lsls	r0, r0, #25
    9f0a:	0039      	movs	r1, r7
    9f0c:	0fc0      	lsrs	r0, r0, #31
    9f0e:	f7fa ffd3 	bl	4eb8 <ll_addr_get>
    9f12:	0001      	movs	r1, r0
		ptr = (u8_t *)h + sizeof(*h);
    9f14:	1d20      	adds	r0, r4, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9f16:	2206      	movs	r2, #6
    9f18:	f7f7 fa62 	bl	13e0 <memcpy>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    9f1c:	24ff      	movs	r4, #255	; 0xff
				  ll_adv.chan_map, ll_adv.filter_policy,
    9f1e:	4913      	ldr	r1, [pc, #76]	; (9f6c <ll_adv_enable+0xa8>)
    9f20:	7808      	ldrb	r0, [r1, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    9f22:	6849      	ldr	r1, [r1, #4]
				  ll_adv.chan_map, ll_adv.filter_policy,
    9f24:	06c3      	lsls	r3, r0, #27
    9f26:	0742      	lsls	r2, r0, #29
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    9f28:	0f9b      	lsrs	r3, r3, #30
    9f2a:	0f52      	lsrs	r2, r2, #29
    9f2c:	b289      	uxth	r1, r1
    9f2e:	9400      	str	r4, [sp, #0]
    9f30:	0940      	lsrs	r0, r0, #5
    9f32:	f7ff fb59 	bl	95e8 <radio_adv_enable>
	return status;
    9f36:	e7cb      	b.n	9ed0 <ll_adv_enable+0xc>
			[radio_scan_data->last][0];
    9f38:	002b      	movs	r3, r5
    9f3a:	334f      	adds	r3, #79	; 0x4f
    9f3c:	781b      	ldrb	r3, [r3, #0]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9f3e:	0640      	lsls	r0, r0, #25
    9f40:	0039      	movs	r1, r7
    9f42:	0fc0      	lsrs	r0, r0, #31
			[radio_scan_data->last][0];
    9f44:	9303      	str	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9f46:	f7fa ffb7 	bl	4eb8 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    9f4a:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9f4c:	0001      	movs	r1, r0
			memcpy(&pdu_adv->adv_ind.addr[0],
    9f4e:	1ca0      	adds	r0, r4, #2
    9f50:	f7f7 fa46 	bl	13e0 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9f54:	7820      	ldrb	r0, [r4, #0]
    9f56:	0039      	movs	r1, r7
    9f58:	0640      	lsls	r0, r0, #25
    9f5a:	0fc0      	lsrs	r0, r0, #31
    9f5c:	f7fa ffac 	bl	4eb8 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9f60:	9b03      	ldr	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9f62:	0001      	movs	r1, r0
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9f64:	435e      	muls	r6, r3
    9f66:	19ad      	adds	r5, r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9f68:	1ca8      	adds	r0, r5, #2
    9f6a:	e7d4      	b.n	9f16 <ll_adv_enable+0x52>
    9f6c:	20000a48 	.word	0x20000a48

00009f70 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    9f70:	2800      	cmp	r0, #0
    9f72:	d102      	bne.n	9f7a <ctrl_filter_get+0xa>
    9f74:	b662      	cpsie	i
    9f76:	2004      	movs	r0, #4
    9f78:	df02      	svc	2
	return &wl_filter;
#endif
}
    9f7a:	4801      	ldr	r0, [pc, #4]	; (9f80 <ctrl_filter_get+0x10>)
    9f7c:	4770      	bx	lr
    9f7e:	46c0      	nop			; (mov r8, r8)
    9f80:	20000a50 	.word	0x20000a50

00009f84 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    9f84:	2008      	movs	r0, #8
    9f86:	4770      	bx	lr

00009f88 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    9f88:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9f8a:	f7ff fa1f 	bl	93cc <radio_adv_filter_pol_get>
    9f8e:	1e04      	subs	r4, r0, #0
    9f90:	d002      	beq.n	9f98 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9f92:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    9f94:	0020      	movs	r0, r4
    9f96:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9f98:	f7ff fa3a 	bl	9410 <radio_scan_filter_pol_get>
    9f9c:	07c3      	lsls	r3, r0, #31
    9f9e:	d4f8      	bmi.n	9f92 <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    9fa0:	4b02      	ldr	r3, [pc, #8]	; (9fac <ll_wl_clear+0x24>)
    9fa2:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    9fa4:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    9fa6:	4b02      	ldr	r3, [pc, #8]	; (9fb0 <ll_wl_clear+0x28>)
    9fa8:	701c      	strb	r4, [r3, #0]
	return 0;
    9faa:	e7f3      	b.n	9f94 <ll_wl_clear+0xc>
    9fac:	20000a50 	.word	0x20000a50
    9fb0:	20000dc4 	.word	0x20000dc4

00009fb4 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    9fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fb6:	0005      	movs	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9fb8:	f7ff fa08 	bl	93cc <radio_adv_filter_pol_get>
    9fbc:	1e04      	subs	r4, r0, #0
    9fbe:	d002      	beq.n	9fc6 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9fc0:	240c      	movs	r4, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    9fc2:	0020      	movs	r0, r4
    9fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9fc6:	f7ff fa23 	bl	9410 <radio_scan_filter_pol_get>
    9fca:	2101      	movs	r1, #1
    9fcc:	4208      	tst	r0, r1
    9fce:	d1f7      	bne.n	9fc0 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    9fd0:	782a      	ldrb	r2, [r5, #0]
    9fd2:	2aff      	cmp	r2, #255	; 0xff
    9fd4:	d102      	bne.n	9fdc <ll_wl_add+0x28>
		wl_anon = 1;
    9fd6:	4b10      	ldr	r3, [pc, #64]	; (a018 <ll_wl_add+0x64>)
    9fd8:	7019      	strb	r1, [r3, #0]
		return 0;
    9fda:	e7f2      	b.n	9fc2 <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    9fdc:	480f      	ldr	r0, [pc, #60]	; (a01c <ll_wl_add+0x68>)
    9fde:	0023      	movs	r3, r4
    9fe0:	7806      	ldrb	r6, [r0, #0]
    9fe2:	2eff      	cmp	r6, #255	; 0xff
    9fe4:	d102      	bne.n	9fec <ll_wl_add+0x38>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9fe6:	2407      	movs	r4, #7
    9fe8:	e7eb      	b.n	9fc2 <ll_wl_add+0xe>
	     index++) {
    9fea:	3301      	adds	r3, #1
	     (filter->enable_bitmask & BIT(index));
    9fec:	0037      	movs	r7, r6
    9fee:	40df      	lsrs	r7, r3
	for (index = 0;
    9ff0:	420f      	tst	r7, r1
    9ff2:	d1fa      	bne.n	9fea <ll_wl_add+0x36>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9ff4:	400a      	ands	r2, r1
    9ff6:	409a      	lsls	r2, r3
	filter->enable_bitmask |= BIT(index);
    9ff8:	000f      	movs	r7, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9ffa:	7841      	ldrb	r1, [r0, #1]
	filter->enable_bitmask |= BIT(index);
    9ffc:	409f      	lsls	r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9ffe:	430a      	orrs	r2, r1
    a000:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    a002:	2206      	movs	r2, #6
    a004:	4353      	muls	r3, r2
	filter->enable_bitmask |= BIT(index);
    a006:	433e      	orrs	r6, r7
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    a008:	3302      	adds	r3, #2
	filter->enable_bitmask |= BIT(index);
    a00a:	7006      	strb	r6, [r0, #0]
	return filter_add(&wl_filter, addr->type, addr->a.val);
    a00c:	1c69      	adds	r1, r5, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    a00e:	18c0      	adds	r0, r0, r3
    a010:	f7f7 f9e6 	bl	13e0 <memcpy>
    a014:	e7d5      	b.n	9fc2 <ll_wl_add+0xe>
    a016:	46c0      	nop			; (mov r8, r8)
    a018:	20000dc4 	.word	0x20000dc4
    a01c:	20000a50 	.word	0x20000a50

0000a020 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    a020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a022:	9001      	str	r0, [sp, #4]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a024:	f7ff f9d2 	bl	93cc <radio_adv_filter_pol_get>
    a028:	1e07      	subs	r7, r0, #0
    a02a:	d002      	beq.n	a032 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a02c:	270c      	movs	r7, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    a02e:	0038      	movs	r0, r7
    a030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a032:	f7ff f9ed 	bl	9410 <radio_scan_filter_pol_get>
    a036:	2401      	movs	r4, #1
    a038:	4220      	tst	r0, r4
    a03a:	d1f7      	bne.n	a02c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    a03c:	9b01      	ldr	r3, [sp, #4]
    a03e:	781b      	ldrb	r3, [r3, #0]
    a040:	9300      	str	r3, [sp, #0]
    a042:	2bff      	cmp	r3, #255	; 0xff
    a044:	d102      	bne.n	a04c <ll_wl_remove+0x2c>
		wl_anon = 0;
    a046:	4b16      	ldr	r3, [pc, #88]	; (a0a0 <ll_wl_remove+0x80>)
    a048:	701f      	strb	r7, [r3, #0]
		return 0;
    a04a:	e7f0      	b.n	a02e <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
    a04c:	4b15      	ldr	r3, [pc, #84]	; (a0a4 <ll_wl_remove+0x84>)
    a04e:	2508      	movs	r5, #8
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	2b00      	cmp	r3, #0
    a054:	d101      	bne.n	a05a <ll_wl_remove+0x3a>
		return BT_HCI_ERR_INVALID_PARAM;
    a056:	2712      	movs	r7, #18
    a058:	e7e9      	b.n	a02e <ll_wl_remove+0xe>
	while (index--) {
    a05a:	3d01      	subs	r5, #1
    a05c:	d3fb      	bcc.n	a056 <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
    a05e:	4e11      	ldr	r6, [pc, #68]	; (a0a4 <ll_wl_remove+0x84>)
    a060:	7833      	ldrb	r3, [r6, #0]
    a062:	40eb      	lsrs	r3, r5
    a064:	4223      	tst	r3, r4
    a066:	d0f8      	beq.n	a05a <ll_wl_remove+0x3a>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    a068:	7873      	ldrb	r3, [r6, #1]
    a06a:	9a00      	ldr	r2, [sp, #0]
    a06c:	412b      	asrs	r3, r5
    a06e:	4053      	eors	r3, r2
		if ((filter->enable_bitmask & BIT(index)) &&
    a070:	4223      	tst	r3, r4
    a072:	d1f2      	bne.n	a05a <ll_wl_remove+0x3a>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    a074:	2006      	movs	r0, #6
    a076:	4368      	muls	r0, r5
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    a078:	9b01      	ldr	r3, [sp, #4]
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    a07a:	3002      	adds	r0, #2
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    a07c:	1c59      	adds	r1, r3, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    a07e:	1830      	adds	r0, r6, r0
    a080:	2206      	movs	r2, #6
    a082:	f7f7 f989 	bl	1398 <memcmp>
		     (addr_type & 0x01)) &&
    a086:	2800      	cmp	r0, #0
    a088:	d1e7      	bne.n	a05a <ll_wl_remove+0x3a>
			filter->enable_bitmask &= ~BIT(index);
    a08a:	40ac      	lsls	r4, r5
    a08c:	43e4      	mvns	r4, r4
    a08e:	7833      	ldrb	r3, [r6, #0]
    a090:	b2e4      	uxtb	r4, r4
    a092:	4023      	ands	r3, r4
    a094:	7033      	strb	r3, [r6, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    a096:	7873      	ldrb	r3, [r6, #1]
    a098:	401c      	ands	r4, r3
    a09a:	7074      	strb	r4, [r6, #1]
    a09c:	e7c7      	b.n	a02e <ll_wl_remove+0xe>
    a09e:	46c0      	nop			; (mov r8, r8)
    a0a0:	20000dc4 	.word	0x20000dc4
    a0a4:	20000a50 	.word	0x20000a50

0000a0a8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    a0a8:	2300      	movs	r3, #0
    a0aa:	4a03      	ldr	r2, [pc, #12]	; (a0b8 <ll_filter_reset+0x10>)
    a0ac:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    a0ae:	4a03      	ldr	r2, [pc, #12]	; (a0bc <ll_filter_reset+0x14>)
    a0b0:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    a0b2:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    a0b4:	4770      	bx	lr
    a0b6:	46c0      	nop			; (mov r8, r8)
    a0b8:	20000dc4 	.word	0x20000dc4
    a0bc:	20000a50 	.word	0x20000a50

0000a0c0 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    a0c0:	22a1      	movs	r2, #161	; 0xa1
    a0c2:	2100      	movs	r1, #0
    a0c4:	4b05      	ldr	r3, [pc, #20]	; (a0dc <cntr_init+0x1c>)
    a0c6:	00d2      	lsls	r2, r2, #3
    a0c8:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    a0ca:	22c0      	movs	r2, #192	; 0xc0
    a0cc:	21d1      	movs	r1, #209	; 0xd1
    a0ce:	0292      	lsls	r2, r2, #10
    a0d0:	0089      	lsls	r1, r1, #2
    a0d2:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    a0d4:	3940      	subs	r1, #64	; 0x40
    a0d6:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif
}
    a0d8:	4770      	bx	lr
    a0da:	46c0      	nop			; (mov r8, r8)
    a0dc:	4000b000 	.word	0x4000b000

0000a0e0 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    a0e0:	4a05      	ldr	r2, [pc, #20]	; (a0f8 <cntr_start+0x18>)
    a0e2:	2001      	movs	r0, #1
    a0e4:	7813      	ldrb	r3, [r2, #0]
    a0e6:	1c59      	adds	r1, r3, #1
    a0e8:	7011      	strb	r1, [r2, #0]
    a0ea:	2b00      	cmp	r3, #0
    a0ec:	d102      	bne.n	a0f4 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    a0ee:	4a03      	ldr	r2, [pc, #12]	; (a0fc <cntr_start+0x1c>)
    a0f0:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    a0f2:	0018      	movs	r0, r3
}
    a0f4:	4770      	bx	lr
    a0f6:	46c0      	nop			; (mov r8, r8)
    a0f8:	20000a82 	.word	0x20000a82
    a0fc:	4000b000 	.word	0x4000b000

0000a100 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    a100:	4a08      	ldr	r2, [pc, #32]	; (a124 <cntr_stop+0x24>)
    a102:	7813      	ldrb	r3, [r2, #0]
    a104:	2b00      	cmp	r3, #0
    a106:	d102      	bne.n	a10e <cntr_stop+0xe>
    a108:	b662      	cpsie	i
    a10a:	2004      	movs	r0, #4
    a10c:	df02      	svc	2

	if (--_refcount) {
    a10e:	3b01      	subs	r3, #1
    a110:	b2db      	uxtb	r3, r3
    a112:	7013      	strb	r3, [r2, #0]
    a114:	2001      	movs	r0, #1
    a116:	2b00      	cmp	r3, #0
    a118:	d102      	bne.n	a120 <cntr_stop+0x20>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    a11a:	4a03      	ldr	r2, [pc, #12]	; (a128 <cntr_stop+0x28>)
    a11c:	6050      	str	r0, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    a11e:	0018      	movs	r0, r3
}
    a120:	4770      	bx	lr
    a122:	46c0      	nop			; (mov r8, r8)
    a124:	20000a82 	.word	0x20000a82
    a128:	4000b000 	.word	0x4000b000

0000a12c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    a12c:	4b01      	ldr	r3, [pc, #4]	; (a134 <cntr_cnt_get+0x8>)
    a12e:	4a02      	ldr	r2, [pc, #8]	; (a138 <cntr_cnt_get+0xc>)
    a130:	58d0      	ldr	r0, [r2, r3]
}
    a132:	4770      	bx	lr
    a134:	00000504 	.word	0x00000504
    a138:	4000b000 	.word	0x4000b000

0000a13c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    a13c:	3051      	adds	r0, #81	; 0x51
    a13e:	4b02      	ldr	r3, [pc, #8]	; (a148 <cntr_cmp_set+0xc>)
    a140:	30ff      	adds	r0, #255	; 0xff
    a142:	0080      	lsls	r0, r0, #2
    a144:	50c1      	str	r1, [r0, r3]
}
    a146:	4770      	bx	lr
    a148:	4000b000 	.word	0x4000b000

0000a14c <isr>:
{
	return get(rng_isr, octets, rand);
}

static int isr(struct rand *rng, bool store)
{
    a14c:	b570      	push	{r4, r5, r6, lr}
	u8_t last;

	if (!rng) {
    a14e:	2800      	cmp	r0, #0
    a150:	d01d      	beq.n	a18e <isr+0x42>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    a152:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    a154:	7805      	ldrb	r5, [r0, #0]
	last = rng->last + 1;
    a156:	1c53      	adds	r3, r2, #1
    a158:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    a15a:	42ab      	cmp	r3, r5
    a15c:	d100      	bne.n	a160 <isr+0x14>
		last = 0;
    a15e:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
    a160:	7884      	ldrb	r4, [r0, #2]
    a162:	42a3      	cmp	r3, r4
    a164:	d013      	beq.n	a18e <isr+0x42>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    a166:	2900      	cmp	r1, #0
    a168:	d00e      	beq.n	a188 <isr+0x3c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    a16a:	21a1      	movs	r1, #161	; 0xa1
    a16c:	4e09      	ldr	r6, [pc, #36]	; (a194 <isr+0x48>)
    a16e:	00c9      	lsls	r1, r1, #3
    a170:	5871      	ldr	r1, [r6, r1]
    a172:	1882      	adds	r2, r0, r2
    a174:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    a176:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    a178:	3301      	adds	r3, #1
    a17a:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    a17c:	429d      	cmp	r5, r3
    a17e:	d100      	bne.n	a182 <isr+0x36>
		last = 0;
    a180:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
		return 0;
    a182:	2000      	movs	r0, #0
	if (last == rng->first) {
    a184:	42a3      	cmp	r3, r4
    a186:	d001      	beq.n	a18c <isr+0x40>
	}

	return -EBUSY;
    a188:	2010      	movs	r0, #16
		return -ENOBUFS;
    a18a:	4240      	negs	r0, r0
}
    a18c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    a18e:	2037      	movs	r0, #55	; 0x37
    a190:	e7fb      	b.n	a18a <isr+0x3e>
    a192:	46c0      	nop			; (mov r8, r8)
    a194:	4000d000 	.word	0x4000d000

0000a198 <get>:
{
    a198:	b5f0      	push	{r4, r5, r6, r7, lr}
    a19a:	b085      	sub	sp, #20
	LL_ASSERT(rng);
    a19c:	2800      	cmp	r0, #0
    a19e:	d102      	bne.n	a1a6 <get+0xe>
    a1a0:	b662      	cpsie	i
    a1a2:	2004      	movs	r0, #4
    a1a4:	df02      	svc	2
	first = rng->first;
    a1a6:	7884      	ldrb	r4, [r0, #2]
	last = rng->last;
    a1a8:	78c3      	ldrb	r3, [r0, #3]
    a1aa:	1852      	adds	r2, r2, r1
    a1ac:	1d25      	adds	r5, r4, #4
    a1ae:	4694      	mov	ip, r2
		s = &rng->rand[first];
    a1b0:	1945      	adds	r5, r0, r5
	if (first <= last) {
    a1b2:	429c      	cmp	r4, r3
    a1b4:	d81d      	bhi.n	a1f2 <get+0x5a>
		avail = last - first;
    a1b6:	1b1b      	subs	r3, r3, r4
    a1b8:	b2db      	uxtb	r3, r3
			remaining = 0;
    a1ba:	2700      	movs	r7, #0
		if (octets < avail) {
    a1bc:	4299      	cmp	r1, r3
    a1be:	d203      	bcs.n	a1c8 <get+0x30>
			remaining = avail - octets;
    a1c0:	b2ce      	uxtb	r6, r1
    a1c2:	1b9b      	subs	r3, r3, r6
    a1c4:	b2df      	uxtb	r7, r3
			avail = octets;
    a1c6:	0033      	movs	r3, r6
		first += avail;
    a1c8:	191c      	adds	r4, r3, r4
		octets -= avail;
    a1ca:	1ac9      	subs	r1, r1, r3
		first += avail;
    a1cc:	b2e4      	uxtb	r4, r4
    a1ce:	18eb      	adds	r3, r5, r3
		while (avail--) {
    a1d0:	42ab      	cmp	r3, r5
    a1d2:	d109      	bne.n	a1e8 <get+0x50>
	if (remaining < rng->threshold) {
    a1d4:	7843      	ldrb	r3, [r0, #1]
		rng->first = first;
    a1d6:	7084      	strb	r4, [r0, #2]
	if (remaining < rng->threshold) {
    a1d8:	42bb      	cmp	r3, r7
    a1da:	d902      	bls.n	a1e2 <get+0x4a>
		NRF_RNG->TASKS_START = 1;
    a1dc:	2201      	movs	r2, #1
    a1de:	4b23      	ldr	r3, [pc, #140]	; (a26c <get+0xd4>)
    a1e0:	601a      	str	r2, [r3, #0]
}
    a1e2:	0008      	movs	r0, r1
    a1e4:	b005      	add	sp, #20
    a1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*(--d) = *s++;
    a1e8:	782e      	ldrb	r6, [r5, #0]
    a1ea:	3a01      	subs	r2, #1
    a1ec:	7016      	strb	r6, [r2, #0]
    a1ee:	3501      	adds	r5, #1
    a1f0:	e7ee      	b.n	a1d0 <get+0x38>
		avail = rng->count - first;
    a1f2:	7802      	ldrb	r2, [r0, #0]
    a1f4:	1b12      	subs	r2, r2, r4
    a1f6:	b2d2      	uxtb	r2, r2
		if (octets < avail) {
    a1f8:	4291      	cmp	r1, r2
    a1fa:	d225      	bcs.n	a248 <get+0xb0>
			remaining = avail + last - octets;
    a1fc:	b2ce      	uxtb	r6, r1
    a1fe:	1b9f      	subs	r7, r3, r6
    a200:	19d7      	adds	r7, r2, r7
			avail = octets;
    a202:	0032      	movs	r2, r6
			first += avail;
    a204:	19a4      	adds	r4, r4, r6
			remaining = avail + last - octets;
    a206:	b2ff      	uxtb	r7, r7
			first += avail;
    a208:	b2e4      	uxtb	r4, r4
    a20a:	18ae      	adds	r6, r5, r2
    a20c:	9501      	str	r5, [sp, #4]
		d = &rand[octets];
    a20e:	4665      	mov	r5, ip
		octets -= avail;
    a210:	1a89      	subs	r1, r1, r2
    a212:	9603      	str	r6, [sp, #12]
		d = &rand[octets];
    a214:	9502      	str	r5, [sp, #8]
		while (avail--) {
    a216:	9e03      	ldr	r6, [sp, #12]
    a218:	9d01      	ldr	r5, [sp, #4]
    a21a:	42b5      	cmp	r5, r6
    a21c:	d117      	bne.n	a24e <get+0xb6>
    a21e:	4665      	mov	r5, ip
    a220:	1aaa      	subs	r2, r5, r2
		if (octets && last) {
    a222:	2900      	cmp	r1, #0
    a224:	d0d6      	beq.n	a1d4 <get+0x3c>
    a226:	2b00      	cmp	r3, #0
    a228:	d0d4      	beq.n	a1d4 <get+0x3c>
			s = &rng->rand[0];
    a22a:	1d05      	adds	r5, r0, #4
			if (octets < last) {
    a22c:	4299      	cmp	r1, r3
    a22e:	d219      	bcs.n	a264 <get+0xcc>
				remaining = last - octets;
    a230:	b2cc      	uxtb	r4, r1
    a232:	1b1b      	subs	r3, r3, r4
    a234:	b2df      	uxtb	r7, r3
			octets -= last;
    a236:	1b09      	subs	r1, r1, r4
    a238:	192b      	adds	r3, r5, r4
			while (last--) {
    a23a:	429d      	cmp	r5, r3
    a23c:	d0ca      	beq.n	a1d4 <get+0x3c>
				*(--d) = *s++;
    a23e:	782e      	ldrb	r6, [r5, #0]
    a240:	3a01      	subs	r2, #1
    a242:	7016      	strb	r6, [r2, #0]
    a244:	3501      	adds	r5, #1
    a246:	e7f8      	b.n	a23a <get+0xa2>
    a248:	001f      	movs	r7, r3
			first = 0;
    a24a:	2400      	movs	r4, #0
    a24c:	e7dd      	b.n	a20a <get+0x72>
			*(--d) = *s++;
    a24e:	9e02      	ldr	r6, [sp, #8]
    a250:	9d01      	ldr	r5, [sp, #4]
    a252:	3e01      	subs	r6, #1
    a254:	9602      	str	r6, [sp, #8]
    a256:	782e      	ldrb	r6, [r5, #0]
    a258:	9d02      	ldr	r5, [sp, #8]
    a25a:	702e      	strb	r6, [r5, #0]
    a25c:	9e01      	ldr	r6, [sp, #4]
    a25e:	3601      	adds	r6, #1
    a260:	9601      	str	r6, [sp, #4]
    a262:	e7d8      	b.n	a216 <get+0x7e>
    a264:	001c      	movs	r4, r3
				remaining = 0;
    a266:	2700      	movs	r7, #0
    a268:	e7e5      	b.n	a236 <get+0x9e>
    a26a:	46c0      	nop			; (mov r8, r8)
    a26c:	4000d000 	.word	0x4000d000

0000a270 <init>:
{
    a270:	b510      	push	{r4, lr}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    a272:	1d1c      	adds	r4, r3, #4
    a274:	42a2      	cmp	r2, r4
    a276:	d802      	bhi.n	a27e <init+0xe>
    a278:	b662      	cpsie	i
    a27a:	2004      	movs	r0, #4
    a27c:	df02      	svc	2
	*rng = (struct rand *)context;
    a27e:	6001      	str	r1, [r0, #0]
	p->threshold = threshold;
    a280:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    a282:	2300      	movs	r3, #0
	p->count = len - offsetof(struct rand, rand);
    a284:	3a04      	subs	r2, #4
	p->first = p->last = 0;
    a286:	70cb      	strb	r3, [r1, #3]
    a288:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    a28a:	4b0a      	ldr	r3, [pc, #40]	; (a2b4 <init+0x44>)
	p->count = len - offsetof(struct rand, rand);
    a28c:	700a      	strb	r2, [r1, #0]
	if (!rng_isr || !rng_thr) {
    a28e:	681b      	ldr	r3, [r3, #0]
    a290:	2b00      	cmp	r3, #0
    a292:	d003      	beq.n	a29c <init+0x2c>
    a294:	4b08      	ldr	r3, [pc, #32]	; (a2b8 <init+0x48>)
    a296:	681b      	ldr	r3, [r3, #0]
    a298:	2b00      	cmp	r3, #0
    a29a:	d10a      	bne.n	a2b2 <init+0x42>
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a29c:	2201      	movs	r2, #1
		NRF_RNG->EVENTS_VALRDY = 0;
    a29e:	2000      	movs	r0, #0
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a2a0:	4b06      	ldr	r3, [pc, #24]	; (a2bc <init+0x4c>)
    a2a2:	4907      	ldr	r1, [pc, #28]	; (a2c0 <init+0x50>)
    a2a4:	505a      	str	r2, [r3, r1]
		NRF_RNG->EVENTS_VALRDY = 0;
    a2a6:	4907      	ldr	r1, [pc, #28]	; (a2c4 <init+0x54>)
    a2a8:	6048      	str	r0, [r1, #4]
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    a2aa:	21c1      	movs	r1, #193	; 0xc1
    a2ac:	0089      	lsls	r1, r1, #2
    a2ae:	505a      	str	r2, [r3, r1]
		NRF_RNG->TASKS_START = 1;
    a2b0:	601a      	str	r2, [r3, #0]
}
    a2b2:	bd10      	pop	{r4, pc}
    a2b4:	20000a84 	.word	0x20000a84
    a2b8:	20000a88 	.word	0x20000a88
    a2bc:	4000d000 	.word	0x4000d000
    a2c0:	00000504 	.word	0x00000504
    a2c4:	4000d0fc 	.word	0x4000d0fc

0000a2c8 <rand_init>:
{
    a2c8:	b510      	push	{r4, lr}
    a2ca:	0013      	movs	r3, r2
	init(&rng_thr, context, context_len, threshold);
    a2cc:	000a      	movs	r2, r1
    a2ce:	0001      	movs	r1, r0
    a2d0:	4801      	ldr	r0, [pc, #4]	; (a2d8 <rand_init+0x10>)
    a2d2:	f7ff ffcd 	bl	a270 <init>
}
    a2d6:	bd10      	pop	{r4, pc}
    a2d8:	20000a88 	.word	0x20000a88

0000a2dc <rand_isr_init>:
{
    a2dc:	b510      	push	{r4, lr}
    a2de:	0013      	movs	r3, r2
	init(&rng_isr, context, context_len, threshold);
    a2e0:	000a      	movs	r2, r1
    a2e2:	0001      	movs	r1, r0
    a2e4:	4801      	ldr	r0, [pc, #4]	; (a2ec <rand_isr_init+0x10>)
    a2e6:	f7ff ffc3 	bl	a270 <init>
}
    a2ea:	bd10      	pop	{r4, pc}
    a2ec:	20000a84 	.word	0x20000a84

0000a2f0 <rand_get>:
{
    a2f0:	b510      	push	{r4, lr}
	return get(rng_thr, octets, rand);
    a2f2:	4b03      	ldr	r3, [pc, #12]	; (a300 <rand_get+0x10>)
{
    a2f4:	000a      	movs	r2, r1
	return get(rng_thr, octets, rand);
    a2f6:	0001      	movs	r1, r0
    a2f8:	6818      	ldr	r0, [r3, #0]
    a2fa:	f7ff ff4d 	bl	a198 <get>
}
    a2fe:	bd10      	pop	{r4, pc}
    a300:	20000a88 	.word	0x20000a88

0000a304 <rand_isr_get>:
{
    a304:	b510      	push	{r4, lr}
	return get(rng_isr, octets, rand);
    a306:	4b03      	ldr	r3, [pc, #12]	; (a314 <rand_isr_get+0x10>)
{
    a308:	000a      	movs	r2, r1
	return get(rng_isr, octets, rand);
    a30a:	0001      	movs	r1, r0
    a30c:	6818      	ldr	r0, [r3, #0]
    a30e:	f7ff ff43 	bl	a198 <get>
}
    a312:	bd10      	pop	{r4, pc}
    a314:	20000a84 	.word	0x20000a84

0000a318 <isr_rand>:

void isr_rand(void *param)
{
    a318:	b510      	push	{r4, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    a31a:	4c0e      	ldr	r4, [pc, #56]	; (a354 <isr_rand+0x3c>)
    a31c:	6863      	ldr	r3, [r4, #4]
    a31e:	2b00      	cmp	r3, #0
    a320:	d016      	beq.n	a350 <isr_rand+0x38>
		int ret;

		ret = isr(rng_isr, true);
    a322:	4b0d      	ldr	r3, [pc, #52]	; (a358 <isr_rand+0x40>)
    a324:	2101      	movs	r1, #1
    a326:	6818      	ldr	r0, [r3, #0]
    a328:	f7ff ff10 	bl	a14c <isr>
		if (ret != -EBUSY) {
    a32c:	0003      	movs	r3, r0
    a32e:	3310      	adds	r3, #16
    a330:	d007      	beq.n	a342 <isr_rand+0x2a>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    a332:	3037      	adds	r0, #55	; 0x37
    a334:	4241      	negs	r1, r0
    a336:	4141      	adcs	r1, r0
    a338:	4b08      	ldr	r3, [pc, #32]	; (a35c <isr_rand+0x44>)
    a33a:	b2c9      	uxtb	r1, r1
    a33c:	6818      	ldr	r0, [r3, #0]
    a33e:	f7ff ff05 	bl	a14c <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    a342:	2300      	movs	r3, #0
    a344:	6063      	str	r3, [r4, #4]

		if (ret != -EBUSY) {
    a346:	3010      	adds	r0, #16
    a348:	d002      	beq.n	a350 <isr_rand+0x38>
			NRF_RNG->TASKS_STOP = 1;
    a34a:	2201      	movs	r2, #1
    a34c:	4b04      	ldr	r3, [pc, #16]	; (a360 <isr_rand+0x48>)
    a34e:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
			NRF_RNG_regw_sideeffects();
#endif
		}
	}
}
    a350:	bd10      	pop	{r4, pc}
    a352:	46c0      	nop			; (mov r8, r8)
    a354:	4000d0fc 	.word	0x4000d0fc
    a358:	20000a84 	.word	0x20000a84
    a35c:	20000a88 	.word	0x20000a88
    a360:	4000d000 	.word	0x4000d000

0000a364 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    a364:	b570      	push	{r4, r5, r6, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    a366:	2401      	movs	r4, #1
    a368:	4b0d      	ldr	r3, [pc, #52]	; (a3a0 <do_ecb+0x3c>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    a36a:	4a0e      	ldr	r2, [pc, #56]	; (a3a4 <do_ecb+0x40>)
		NRF_ECB->EVENTS_ENDECB = 0;
    a36c:	2500      	movs	r5, #0
    a36e:	490e      	ldr	r1, [pc, #56]	; (a3a8 <do_ecb+0x44>)
		NRF_ECB->TASKS_STOPECB = 1;
    a370:	605c      	str	r4, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    a372:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    a374:	604d      	str	r5, [r1, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    a376:	608d      	str	r5, [r1, #8]
    a378:	000d      	movs	r5, r1
		NRF_ECB->TASKS_STARTECB = 1;
    a37a:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    a37c:	686e      	ldr	r6, [r5, #4]
    a37e:	2e00      	cmp	r6, #0
    a380:	d105      	bne.n	a38e <do_ecb+0x2a>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    a382:	68ae      	ldr	r6, [r5, #8]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    a384:	2e00      	cmp	r6, #0
    a386:	d102      	bne.n	a38e <do_ecb+0x2a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    a388:	589e      	ldr	r6, [r3, r2]
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    a38a:	2e00      	cmp	r6, #0
    a38c:	d1f6      	bne.n	a37c <do_ecb+0x18>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    a38e:	605c      	str	r4, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    a390:	6889      	ldr	r1, [r1, #8]
    a392:	2900      	cmp	r1, #0
    a394:	d1ea      	bne.n	a36c <do_ecb+0x8>
    a396:	589d      	ldr	r5, [r3, r2]
    a398:	2d00      	cmp	r5, #0
    a39a:	d0e7      	beq.n	a36c <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    a39c:	5099      	str	r1, [r3, r2]
}
    a39e:	bd70      	pop	{r4, r5, r6, pc}
    a3a0:	4000e000 	.word	0x4000e000
    a3a4:	00000504 	.word	0x00000504
    a3a8:	4000e0fc 	.word	0x4000e0fc

0000a3ac <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    a3ac:	b570      	push	{r4, r5, r6, lr}
    a3ae:	000e      	movs	r6, r1
    a3b0:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a3b2:	0001      	movs	r1, r0
{
    a3b4:	0015      	movs	r5, r2
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a3b6:	4668      	mov	r0, sp
    a3b8:	2210      	movs	r2, #16
{
    a3ba:	001c      	movs	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a3bc:	f7f9 fe4e 	bl	405c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    a3c0:	a804      	add	r0, sp, #16
    a3c2:	2210      	movs	r2, #16
    a3c4:	0031      	movs	r1, r6
    a3c6:	f7f9 fe49 	bl	405c <mem_rcopy>

	do_ecb(&ecb);
    a3ca:	4668      	mov	r0, sp
    a3cc:	f7ff ffca 	bl	a364 <do_ecb>

	if (cipher_text_le) {
    a3d0:	2d00      	cmp	r5, #0
    a3d2:	d004      	beq.n	a3de <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    a3d4:	2210      	movs	r2, #16
    a3d6:	a908      	add	r1, sp, #32
    a3d8:	0028      	movs	r0, r5
    a3da:	f7f9 fe3f 	bl	405c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    a3de:	2c00      	cmp	r4, #0
    a3e0:	d004      	beq.n	a3ec <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    a3e2:	2210      	movs	r2, #16
    a3e4:	a908      	add	r1, sp, #32
    a3e6:	0020      	movs	r0, r4
    a3e8:	f7f6 fffa 	bl	13e0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    a3ec:	b00c      	add	sp, #48	; 0x30
    a3ee:	bd70      	pop	{r4, r5, r6, pc}

0000a3f0 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    a3f0:	22a2      	movs	r2, #162	; 0xa2
    a3f2:	4b07      	ldr	r3, [pc, #28]	; (a410 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    a3f4:	4907      	ldr	r1, [pc, #28]	; (a414 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    a3f6:	00d2      	lsls	r2, r2, #3
    a3f8:	5099      	str	r1, [r3, r2]
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d106      	bne.n	a40c <hal_radio_enable_on_tick_ppi_config_and_enable+0x1c>
    a3fe:	4a06      	ldr	r2, [pc, #24]	; (a418 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    a400:	4906      	ldr	r1, [pc, #24]	; (a41c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    a402:	505a      	str	r2, [r3, r1]
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    a404:	2101      	movs	r1, #1
    a406:	4a06      	ldr	r2, [pc, #24]	; (a420 <hal_radio_enable_on_tick_ppi_config_and_enable+0x30>)
    a408:	5099      	str	r1, [r3, r2]
}
    a40a:	4770      	bx	lr
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    a40c:	4a05      	ldr	r2, [pc, #20]	; (a424 <hal_radio_enable_on_tick_ppi_config_and_enable+0x34>)
    a40e:	e7f7      	b.n	a400 <hal_radio_enable_on_tick_ppi_config_and_enable+0x10>
    a410:	4001f000 	.word	0x4001f000
    a414:	40008140 	.word	0x40008140
    a418:	40001004 	.word	0x40001004
    a41c:	00000514 	.word	0x00000514
    a420:	00000504 	.word	0x00000504
    a424:	40001000 	.word	0x40001000

0000a428 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    a428:	4b03      	ldr	r3, [pc, #12]	; (a438 <isr_radio+0x10>)
{
    a42a:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    a42c:	681b      	ldr	r3, [r3, #0]
    a42e:	2b00      	cmp	r3, #0
    a430:	d000      	beq.n	a434 <isr_radio+0xc>
		sfp_radio_isr();
    a432:	4798      	blx	r3
	}
}
    a434:	bd10      	pop	{r4, pc}
    a436:	46c0      	nop			; (mov r8, r8)
    a438:	20000ae8 	.word	0x20000ae8

0000a43c <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a43c:	4b08      	ldr	r3, [pc, #32]	; (a460 <radio_isr_set+0x24>)
{
    a43e:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a440:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    a442:	23c1      	movs	r3, #193	; 0xc1
    a444:	2110      	movs	r1, #16
    a446:	4a07      	ldr	r2, [pc, #28]	; (a464 <radio_isr_set+0x28>)
    a448:	009b      	lsls	r3, r3, #2
    a44a:	50d1      	str	r1, [r2, r3]
    a44c:	4a06      	ldr	r2, [pc, #24]	; (a468 <radio_isr_set+0x2c>)
    a44e:	3b85      	subs	r3, #133	; 0x85
    a450:	390e      	subs	r1, #14
    a452:	3bff      	subs	r3, #255	; 0xff
    a454:	50d1      	str	r1, [r2, r3]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_INTENSET();
#endif
	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    a456:	2001      	movs	r0, #1
    a458:	f7f7 fe32 	bl	20c0 <_arch_irq_enable>
}
    a45c:	bd10      	pop	{r4, pc}
    a45e:	46c0      	nop			; (mov r8, r8)
    a460:	20000ae8 	.word	0x20000ae8
    a464:	40001000 	.word	0x40001000
    a468:	e000e100 	.word	0xe000e100

0000a46c <radio_setup>:

	radio_gpio_lna_off();
#endif /* CONFIG_BT_CTLR_GPIO_LNA_PIN */

	hal_radio_ram_prio_setup();
}
    a46c:	4770      	bx	lr
	...

0000a470 <radio_reset>:

void radio_reset(void)
{
    a470:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    a472:	2001      	movs	r0, #1
    a474:	f7f7 fe30 	bl	20d8 <_arch_irq_disable>

	NRF_RADIO->POWER =
    a478:	2100      	movs	r1, #0
    a47a:	4a03      	ldr	r2, [pc, #12]	; (a488 <radio_reset+0x18>)
    a47c:	4b03      	ldr	r3, [pc, #12]	; (a48c <radio_reset+0x1c>)
    a47e:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif
	NRF_RADIO->POWER =
    a480:	3101      	adds	r1, #1
    a482:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif

	hal_radio_reset();
}
    a484:	bd10      	pop	{r4, pc}
    a486:	46c0      	nop			; (mov r8, r8)
    a488:	40001000 	.word	0x40001000
    a48c:	00000ffc 	.word	0x00000ffc

0000a490 <radio_phy_set>:
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    a490:	2301      	movs	r3, #1
	switch (phy) {
    a492:	2802      	cmp	r0, #2
    a494:	d000      	beq.n	a498 <radio_phy_set+0x8>
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    a496:	3302      	adds	r3, #2
{
	u32_t mode;

	mode = hal_radio_phy_mode_get(phy, flags);

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    a498:	22a2      	movs	r2, #162	; 0xa2
    a49a:	4902      	ldr	r1, [pc, #8]	; (a4a4 <radio_phy_set+0x14>)
    a49c:	00d2      	lsls	r2, r2, #3
    a49e:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BT_CTLR_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BT_CTLR_RADIO_ENABLE_FAST */
}
    a4a0:	4770      	bx	lr
    a4a2:	46c0      	nop			; (mov r8, r8)
    a4a4:	40001000 	.word	0x40001000

0000a4a8 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    a4a8:	4b01      	ldr	r3, [pc, #4]	; (a4b0 <radio_tx_power_set+0x8>)
    a4aa:	4a02      	ldr	r2, [pc, #8]	; (a4b4 <radio_tx_power_set+0xc>)
    a4ac:	50d0      	str	r0, [r2, r3]
}
    a4ae:	4770      	bx	lr
    a4b0:	0000050c 	.word	0x0000050c
    a4b4:	40001000 	.word	0x40001000

0000a4b8 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    a4b8:	23a1      	movs	r3, #161	; 0xa1
    a4ba:	4a02      	ldr	r2, [pc, #8]	; (a4c4 <radio_freq_chan_set+0xc>)
    a4bc:	00db      	lsls	r3, r3, #3
    a4be:	50d0      	str	r0, [r2, r3]
}
    a4c0:	4770      	bx	lr
    a4c2:	46c0      	nop			; (mov r8, r8)
    a4c4:	40001000 	.word	0x40001000

0000a4c8 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    a4c8:	4b06      	ldr	r3, [pc, #24]	; (a4e4 <radio_whiten_iv_set+0x1c>)
    a4ca:	4a07      	ldr	r2, [pc, #28]	; (a4e8 <radio_whiten_iv_set+0x20>)
    a4cc:	5098      	str	r0, [r3, r2]

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    a4ce:	3a3c      	subs	r2, #60	; 0x3c
    a4d0:	5899      	ldr	r1, [r3, r2]
    a4d2:	4806      	ldr	r0, [pc, #24]	; (a4ec <radio_whiten_iv_set+0x24>)
    a4d4:	4001      	ands	r1, r0
    a4d6:	5099      	str	r1, [r3, r2]
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    a4d8:	2180      	movs	r1, #128	; 0x80
    a4da:	5898      	ldr	r0, [r3, r2]
    a4dc:	0489      	lsls	r1, r1, #18
    a4de:	4301      	orrs	r1, r0
    a4e0:	5099      	str	r1, [r3, r2]
			    RADIO_PCNF1_WHITEEN_Msk;
}
    a4e2:	4770      	bx	lr
    a4e4:	40001000 	.word	0x40001000
    a4e8:	00000554 	.word	0x00000554
    a4ec:	fdffffff 	.word	0xfdffffff

0000a4f0 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    a4f0:	2100      	movs	r1, #0
    a4f2:	4a0a      	ldr	r2, [pc, #40]	; (a51c <radio_aa_set+0x2c>)
    a4f4:	4b0a      	ldr	r3, [pc, #40]	; (a520 <radio_aa_set+0x30>)
    a4f6:	50d1      	str	r1, [r2, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    a4f8:	3101      	adds	r1, #1
    a4fa:	3304      	adds	r3, #4
    a4fc:	50d1      	str	r1, [r2, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    a4fe:	78c1      	ldrb	r1, [r0, #3]
    a500:	4b08      	ldr	r3, [pc, #32]	; (a524 <radio_aa_set+0x34>)
    a502:	50d1      	str	r1, [r2, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    a504:	7883      	ldrb	r3, [r0, #2]
    a506:	7841      	ldrb	r1, [r0, #1]
    a508:	061b      	lsls	r3, r3, #24
    a50a:	0409      	lsls	r1, r1, #16
    a50c:	430b      	orrs	r3, r1
    a50e:	7801      	ldrb	r1, [r0, #0]
    a510:	0209      	lsls	r1, r1, #8
    a512:	430b      	orrs	r3, r1
    a514:	4904      	ldr	r1, [pc, #16]	; (a528 <radio_aa_set+0x38>)
    a516:	5053      	str	r3, [r2, r1]
}
    a518:	4770      	bx	lr
    a51a:	46c0      	nop			; (mov r8, r8)
    a51c:	40001000 	.word	0x40001000
    a520:	0000052c 	.word	0x0000052c
    a524:	00000524 	.word	0x00000524
    a528:	0000051c 	.word	0x0000051c

0000a52c <radio_pkt_configure>:

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    a52c:	b510      	push	{r4, lr}
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DATA_LENGTH_CLEAR) && dc) {
    a52e:	07d3      	lsls	r3, r2, #31
    a530:	d500      	bpl.n	a534 <radio_pkt_configure+0x8>
		bits_len = 5;
    a532:	2005      	movs	r0, #5

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a534:	2308      	movs	r3, #8
    a536:	22f0      	movs	r2, #240	; 0xf0
    a538:	1a1b      	subs	r3, r3, r0
    a53a:	0312      	lsls	r2, r2, #12
    a53c:	041b      	lsls	r3, r3, #16
    a53e:	4013      	ands	r3, r2
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    a540:	220f      	movs	r2, #15
    a542:	4010      	ands	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    a544:	32f1      	adds	r2, #241	; 0xf1
    a546:	4310      	orrs	r0, r2
    a548:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a54a:	4a08      	ldr	r2, [pc, #32]	; (a56c <radio_pkt_configure+0x40>)
    a54c:	4b08      	ldr	r3, [pc, #32]	; (a570 <radio_pkt_configure+0x44>)
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    a54e:	4c09      	ldr	r4, [pc, #36]	; (a574 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a550:	5098      	str	r0, [r3, r2]
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    a552:	20a3      	movs	r0, #163	; 0xa3
    a554:	00c0      	lsls	r0, r0, #3
    a556:	581a      	ldr	r2, [r3, r0]
    a558:	4022      	ands	r2, r4
    a55a:	501a      	str	r2, [r3, r0]
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    a55c:	22c0      	movs	r2, #192	; 0xc0
    a55e:	581c      	ldr	r4, [r3, r0]
    a560:	0292      	lsls	r2, r2, #10
    a562:	4322      	orrs	r2, r4
    a564:	4311      	orrs	r1, r2
    a566:	5019      	str	r1, [r3, r0]
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    a568:	bd10      	pop	{r4, pc}
    a56a:	46c0      	nop			; (mov r8, r8)
    a56c:	00000514 	.word	0x00000514
    a570:	40001000 	.word	0x40001000
    a574:	fef80000 	.word	0xfef80000

0000a578 <radio_pkt_rx_set>:
    a578:	4b01      	ldr	r3, [pc, #4]	; (a580 <radio_pkt_rx_set+0x8>)
    a57a:	4a02      	ldr	r2, [pc, #8]	; (a584 <radio_pkt_rx_set+0xc>)
    a57c:	50d0      	str	r0, [r2, r3]
    a57e:	4770      	bx	lr
    a580:	00000504 	.word	0x00000504
    a584:	40001000 	.word	0x40001000

0000a588 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    a588:	4b01      	ldr	r3, [pc, #4]	; (a590 <radio_pkt_tx_set+0x8>)
    a58a:	4a02      	ldr	r2, [pc, #8]	; (a594 <radio_pkt_tx_set+0xc>)
    a58c:	50d0      	str	r0, [r2, r3]
}
    a58e:	4770      	bx	lr
    a590:	00000504 	.word	0x00000504
    a594:	40001000 	.word	0x40001000

0000a598 <radio_tx_ready_delay_get>:

u32_t radio_tx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_ready_delay_us_get(phy, flags);
}
    a598:	208c      	movs	r0, #140	; 0x8c
    a59a:	4770      	bx	lr

0000a59c <radio_tx_chain_delay_get>:

u32_t radio_tx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_chain_delay_us_get(phy, flags);
}
    a59c:	2001      	movs	r0, #1
    a59e:	4770      	bx	lr

0000a5a0 <radio_rx_ready_delay_get>:

u32_t radio_rx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_ready_delay_us_get(phy, flags);
}
    a5a0:	208a      	movs	r0, #138	; 0x8a
    a5a2:	4770      	bx	lr

0000a5a4 <radio_rx_chain_delay_get>:

u32_t radio_rx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_chain_delay_us_get(phy, flags);
}
    a5a4:	2003      	movs	r0, #3
    a5a6:	4770      	bx	lr

0000a5a8 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    a5a8:	2201      	movs	r2, #1
    a5aa:	4b01      	ldr	r3, [pc, #4]	; (a5b0 <radio_rx_enable+0x8>)
    a5ac:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_RXEN();
#endif
}
    a5ae:	4770      	bx	lr
    a5b0:	40001000 	.word	0x40001000

0000a5b4 <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    a5b4:	2201      	movs	r2, #1
    a5b6:	4b01      	ldr	r3, [pc, #4]	; (a5bc <radio_tx_enable+0x8>)
    a5b8:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_TXEN();
#endif
}
    a5ba:	4770      	bx	lr
    a5bc:	40001000 	.word	0x40001000

0000a5c0 <radio_disable>:
	NRF_PPI_regw_sideeffects_CHEN();
	NRF_PPI_tasw_sideeffects();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    a5c0:	2280      	movs	r2, #128	; 0x80
    a5c2:	2100      	movs	r1, #0
    a5c4:	4b02      	ldr	r3, [pc, #8]	; (a5d0 <radio_disable+0x10>)
    a5c6:	0092      	lsls	r2, r2, #2
    a5c8:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    a5ca:	2201      	movs	r2, #1
    a5cc:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_DISABLE();
#endif
}
    a5ce:	4770      	bx	lr
    a5d0:	40001000 	.word	0x40001000

0000a5d4 <radio_status_reset>:
	/* NOTE: Only EVENTS_* registers read (checked) by software needs reset
	 *       between Radio IRQs. In PPI use, irrespective of stored EVENT_*
	 *       register value, PPI task will be triggered. Hence, other
	 *       EVENT_* registers are not reset to save code and CPU time.
	 */
	NRF_RADIO->EVENTS_READY = 0;
    a5d4:	2200      	movs	r2, #0
    a5d6:	4b02      	ldr	r3, [pc, #8]	; (a5e0 <radio_status_reset+0xc>)
    a5d8:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_END = 0;
    a5da:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    a5dc:	615a      	str	r2, [r3, #20]
}
    a5de:	4770      	bx	lr
    a5e0:	400010fc 	.word	0x400010fc

0000a5e4 <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    a5e4:	4b02      	ldr	r3, [pc, #8]	; (a5f0 <radio_is_ready+0xc>)
    a5e6:	6858      	ldr	r0, [r3, #4]
    a5e8:	1e43      	subs	r3, r0, #1
    a5ea:	4198      	sbcs	r0, r3
}
    a5ec:	4770      	bx	lr
    a5ee:	46c0      	nop			; (mov r8, r8)
    a5f0:	400010fc 	.word	0x400010fc

0000a5f4 <radio_is_done>:
}

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    a5f4:	4b02      	ldr	r3, [pc, #8]	; (a600 <radio_is_done+0xc>)
    a5f6:	6918      	ldr	r0, [r3, #16]
    a5f8:	1e43      	subs	r3, r0, #1
    a5fa:	4198      	sbcs	r0, r3
}
    a5fc:	4770      	bx	lr
    a5fe:	46c0      	nop			; (mov r8, r8)
    a600:	400010fc 	.word	0x400010fc

0000a604 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    a604:	23aa      	movs	r3, #170	; 0xaa
    a606:	4a03      	ldr	r2, [pc, #12]	; (a614 <radio_is_idle+0x10>)
    a608:	00db      	lsls	r3, r3, #3
    a60a:	58d0      	ldr	r0, [r2, r3]
    a60c:	4243      	negs	r3, r0
    a60e:	4158      	adcs	r0, r3
}
    a610:	4770      	bx	lr
    a612:	46c0      	nop			; (mov r8, r8)
    a614:	40001000 	.word	0x40001000

0000a618 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    a618:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    a61a:	2404      	movs	r4, #4
    a61c:	4b04      	ldr	r3, [pc, #16]	; (a630 <radio_crc_configure+0x18>)
    a61e:	4a05      	ldr	r2, [pc, #20]	; (a634 <radio_crc_configure+0x1c>)
    a620:	34ff      	adds	r4, #255	; 0xff
    a622:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    a624:	3204      	adds	r2, #4
    a626:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    a628:	4a03      	ldr	r2, [pc, #12]	; (a638 <radio_crc_configure+0x20>)
    a62a:	5099      	str	r1, [r3, r2]
}
    a62c:	bd10      	pop	{r4, pc}
    a62e:	46c0      	nop			; (mov r8, r8)
    a630:	40001000 	.word	0x40001000
    a634:	00000534 	.word	0x00000534
    a638:	0000053c 	.word	0x0000053c

0000a63c <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    a63c:	2380      	movs	r3, #128	; 0x80
    a63e:	4a03      	ldr	r2, [pc, #12]	; (a64c <radio_crc_is_valid+0x10>)
    a640:	00db      	lsls	r3, r3, #3
    a642:	58d0      	ldr	r0, [r2, r3]
    a644:	1e43      	subs	r3, r0, #1
    a646:	4198      	sbcs	r0, r3
}
    a648:	4770      	bx	lr
    a64a:	46c0      	nop			; (mov r8, r8)
    a64c:	40001000 	.word	0x40001000

0000a650 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    a650:	4800      	ldr	r0, [pc, #0]	; (a654 <radio_pkt_empty_get+0x4>)
    a652:	4770      	bx	lr
    a654:	20000ab8 	.word	0x20000ab8

0000a658 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    a658:	4800      	ldr	r0, [pc, #0]	; (a65c <radio_pkt_scratch_get+0x4>)
    a65a:	4770      	bx	lr
    a65c:	20000abc 	.word	0x20000abc

0000a660 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a660:	2380      	movs	r3, #128	; 0x80
    a662:	210b      	movs	r1, #11
    a664:	4a01      	ldr	r2, [pc, #4]	; (a66c <radio_switch_complete_and_rx+0xc>)
    a666:	009b      	lsls	r3, r3, #2
    a668:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a66a:	4770      	bx	lr
    a66c:	40001000 	.word	0x40001000

0000a670 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a670:	2380      	movs	r3, #128	; 0x80
    a672:	2107      	movs	r1, #7
    a674:	4a01      	ldr	r2, [pc, #4]	; (a67c <radio_switch_complete_and_tx+0xc>)
    a676:	009b      	lsls	r3, r3, #2
    a678:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a67a:	4770      	bx	lr
    a67c:	40001000 	.word	0x40001000

0000a680 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    a680:	2380      	movs	r3, #128	; 0x80
    a682:	2103      	movs	r1, #3
    a684:	4a01      	ldr	r2, [pc, #4]	; (a68c <radio_switch_complete_and_disable+0xc>)
    a686:	009b      	lsls	r3, r3, #2
    a688:	50d1      	str	r1, [r2, r3]
			   HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a68a:	4770      	bx	lr
    a68c:	40001000 	.word	0x40001000

0000a690 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    a690:	2280      	movs	r2, #128	; 0x80
    a692:	2388      	movs	r3, #136	; 0x88
    a694:	4903      	ldr	r1, [pc, #12]	; (a6a4 <radio_rssi_measure+0x14>)
    a696:	0092      	lsls	r2, r2, #2
    a698:	5888      	ldr	r0, [r1, r2]
    a69a:	005b      	lsls	r3, r3, #1
    a69c:	4303      	orrs	r3, r0
    a69e:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    a6a0:	4770      	bx	lr
    a6a2:	46c0      	nop			; (mov r8, r8)
    a6a4:	40001000 	.word	0x40001000

0000a6a8 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    a6a8:	23a9      	movs	r3, #169	; 0xa9
    a6aa:	4a02      	ldr	r2, [pc, #8]	; (a6b4 <radio_rssi_get+0xc>)
    a6ac:	00db      	lsls	r3, r3, #3
    a6ae:	58d0      	ldr	r0, [r2, r3]
}
    a6b0:	4770      	bx	lr
    a6b2:	46c0      	nop			; (mov r8, r8)
    a6b4:	40001000 	.word	0x40001000

0000a6b8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    a6b8:	2200      	movs	r2, #0
    a6ba:	4b01      	ldr	r3, [pc, #4]	; (a6c0 <radio_rssi_status_reset+0x8>)
    a6bc:	621a      	str	r2, [r3, #32]
}
    a6be:	4770      	bx	lr
    a6c0:	400010fc 	.word	0x400010fc

0000a6c4 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    a6c4:	4b02      	ldr	r3, [pc, #8]	; (a6d0 <radio_rssi_is_ready+0xc>)
    a6c6:	6a18      	ldr	r0, [r3, #32]
    a6c8:	1e43      	subs	r3, r0, #1
    a6ca:	4198      	sbcs	r0, r3
}
    a6cc:	4770      	bx	lr
    a6ce:	46c0      	nop			; (mov r8, r8)
    a6d0:	400010fc 	.word	0x400010fc

0000a6d4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a6d6:	27c0      	movs	r7, #192	; 0xc0
{
    a6d8:	2400      	movs	r4, #0
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a6da:	00ff      	lsls	r7, r7, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    a6dc:	7855      	ldrb	r5, [r2, #1]
    a6de:	7813      	ldrb	r3, [r2, #0]
    a6e0:	022d      	lsls	r5, r5, #8
    a6e2:	431d      	orrs	r5, r3
    a6e4:	7893      	ldrb	r3, [r2, #2]
    a6e6:	4e0e      	ldr	r6, [pc, #56]	; (a720 <radio_filter_configure+0x4c>)
    a6e8:	041b      	lsls	r3, r3, #16
    a6ea:	431d      	orrs	r5, r3
    a6ec:	78d3      	ldrb	r3, [r2, #3]
    a6ee:	061b      	lsls	r3, r3, #24
    a6f0:	432b      	orrs	r3, r5
    a6f2:	00a5      	lsls	r5, r4, #2
    a6f4:	19ad      	adds	r5, r5, r6
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a6f6:	51eb      	str	r3, [r5, r7]
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a6f8:	7913      	ldrb	r3, [r2, #4]
    a6fa:	3401      	adds	r4, #1
    a6fc:	469c      	mov	ip, r3
    a6fe:	4666      	mov	r6, ip
    a700:	7953      	ldrb	r3, [r2, #5]
		bdaddr += 6;
    a702:	3206      	adds	r2, #6
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a704:	021b      	lsls	r3, r3, #8
    a706:	4333      	orrs	r3, r6
    a708:	26c4      	movs	r6, #196	; 0xc4
    a70a:	00f6      	lsls	r6, r6, #3
    a70c:	51ab      	str	r3, [r5, r6]
	for (index = 0; index < 8; index++) {
    a70e:	2c08      	cmp	r4, #8
    a710:	d1e4      	bne.n	a6dc <radio_filter_configure+0x8>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    a712:	23c8      	movs	r3, #200	; 0xc8
    a714:	0209      	lsls	r1, r1, #8
    a716:	4a02      	ldr	r2, [pc, #8]	; (a720 <radio_filter_configure+0x4c>)
    a718:	4308      	orrs	r0, r1
    a71a:	00db      	lsls	r3, r3, #3
    a71c:	50d0      	str	r0, [r2, r3]
}
    a71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a720:	40001000 	.word	0x40001000

0000a724 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    a724:	22c8      	movs	r2, #200	; 0xc8
    a726:	20ff      	movs	r0, #255	; 0xff
    a728:	4902      	ldr	r1, [pc, #8]	; (a734 <radio_filter_disable+0x10>)
    a72a:	00d2      	lsls	r2, r2, #3
    a72c:	588b      	ldr	r3, [r1, r2]
    a72e:	4383      	bics	r3, r0
    a730:	508b      	str	r3, [r1, r2]
}
    a732:	4770      	bx	lr
    a734:	40001000 	.word	0x40001000

0000a738 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    a738:	2200      	movs	r2, #0
    a73a:	4b01      	ldr	r3, [pc, #4]	; (a740 <radio_filter_status_reset+0x8>)
    a73c:	619a      	str	r2, [r3, #24]
}
    a73e:	4770      	bx	lr
    a740:	400010fc 	.word	0x400010fc

0000a744 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    a744:	4b02      	ldr	r3, [pc, #8]	; (a750 <radio_filter_has_match+0xc>)
    a746:	6998      	ldr	r0, [r3, #24]
    a748:	1e43      	subs	r3, r0, #1
    a74a:	4198      	sbcs	r0, r3
}
    a74c:	4770      	bx	lr
    a74e:	46c0      	nop			; (mov r8, r8)
    a750:	400010fc 	.word	0x400010fc

0000a754 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    a754:	2382      	movs	r3, #130	; 0x82
    a756:	4a02      	ldr	r2, [pc, #8]	; (a760 <radio_filter_match_get+0xc>)
    a758:	00db      	lsls	r3, r3, #3
    a75a:	58d0      	ldr	r0, [r2, r3]
}
    a75c:	4770      	bx	lr
    a75e:	46c0      	nop			; (mov r8, r8)
    a760:	40001000 	.word	0x40001000

0000a764 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    a764:	2180      	movs	r1, #128	; 0x80
    a766:	23d2      	movs	r3, #210	; 0xd2
    a768:	4a04      	ldr	r2, [pc, #16]	; (a77c <radio_tmr_status_reset+0x18>)
    a76a:	02c9      	lsls	r1, r1, #11
    a76c:	009b      	lsls	r3, r3, #2
    a76e:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    a770:	217f      	movs	r1, #127	; 0x7f
    a772:	4a03      	ldr	r2, [pc, #12]	; (a780 <radio_tmr_status_reset+0x1c>)
    a774:	33c1      	adds	r3, #193	; 0xc1
    a776:	33ff      	adds	r3, #255	; 0xff
    a778:	50d1      	str	r1, [r2, r3]
			HAL_TRIGGER_CRYPT_PPI_DISABLE;

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
}
    a77a:	4770      	bx	lr
    a77c:	4000b000 	.word	0x4000b000
    a780:	4001f000 	.word	0x4001f000

0000a784 <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    a784:	4b01      	ldr	r3, [pc, #4]	; (a78c <radio_tmr_tifs_set+0x8>)
    a786:	4a02      	ldr	r2, [pc, #8]	; (a790 <radio_tmr_tifs_set+0xc>)
    a788:	50d0      	str	r0, [r2, r3]
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a78a:	4770      	bx	lr
    a78c:	00000544 	.word	0x00000544
    a790:	40001000 	.word	0x40001000

0000a794 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a796:	4b1a      	ldr	r3, [pc, #104]	; (a800 <radio_tmr_start+0x6c>)
{
    a798:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a79a:	18d1      	adds	r1, r2, r3
    a79c:	4b19      	ldr	r3, [pc, #100]	; (a804 <radio_tmr_start+0x70>)
{
    a79e:	0005      	movs	r5, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a7a0:	4299      	cmp	r1, r3
    a7a2:	d902      	bls.n	a7aa <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    a7a4:	4b18      	ldr	r3, [pc, #96]	; (a808 <radio_tmr_start+0x74>)
		ticks_start--;
    a7a6:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    a7a8:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    a7aa:	4918      	ldr	r1, [pc, #96]	; (a80c <radio_tmr_start+0x78>)
    a7ac:	0010      	movs	r0, r2
    a7ae:	f7f5 fd0b 	bl	1c8 <__aeabi_uidiv>

	EVENT_TIMER->TASKS_CLEAR = 1;
    a7b2:	2201      	movs	r2, #1
    a7b4:	4b16      	ldr	r3, [pc, #88]	; (a810 <radio_tmr_start+0x7c>)
	EVENT_TIMER->MODE = 0;
    a7b6:	4917      	ldr	r1, [pc, #92]	; (a814 <radio_tmr_start+0x80>)
	EVENT_TIMER->TASKS_CLEAR = 1;
    a7b8:	60da      	str	r2, [r3, #12]
	EVENT_TIMER->MODE = 0;
    a7ba:	2200      	movs	r2, #0
    a7bc:	505a      	str	r2, [r3, r1]
	EVENT_TIMER->PRESCALER = 4;
    a7be:	22a2      	movs	r2, #162	; 0xa2
	remainder /= 1000000UL;
    a7c0:	0006      	movs	r6, r0
	EVENT_TIMER->PRESCALER = 4;
    a7c2:	2004      	movs	r0, #4

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    a7c4:	27a9      	movs	r7, #169	; 0xa9
	EVENT_TIMER->PRESCALER = 4;
    a7c6:	00d2      	lsls	r2, r2, #3
    a7c8:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    a7ca:	3802      	subs	r0, #2
    a7cc:	3a08      	subs	r2, #8
    a7ce:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->CC[0] = remainder;
    a7d0:	3238      	adds	r2, #56	; 0x38
    a7d2:	509e      	str	r6, [r3, r2]
	NRF_RTC0->CC[2] = ticks_start;
    a7d4:	4a10      	ldr	r2, [pc, #64]	; (a818 <radio_tmr_start+0x84>)
    a7d6:	00ff      	lsls	r7, r7, #3
    a7d8:	51d4      	str	r4, [r2, r7]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    a7da:	2780      	movs	r7, #128	; 0x80
    a7dc:	24d1      	movs	r4, #209	; 0xd1
    a7de:	02ff      	lsls	r7, r7, #11
    a7e0:	00a4      	lsls	r4, r4, #2
    a7e2:	5117      	str	r7, [r2, r4]

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    a7e4:	4a0d      	ldr	r2, [pc, #52]	; (a81c <radio_tmr_start+0x88>)
    a7e6:	4f0e      	ldr	r7, [pc, #56]	; (a820 <radio_tmr_start+0x8c>)
    a7e8:	34d5      	adds	r4, #213	; 0xd5
    a7ea:	34ff      	adds	r4, #255	; 0xff
    a7ec:	5117      	str	r7, [r2, r4]
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    a7ee:	4c0d      	ldr	r4, [pc, #52]	; (a824 <radio_tmr_start+0x90>)
    a7f0:	5113      	str	r3, [r2, r4]
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    a7f2:	5050      	str	r0, [r2, r1]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    a7f4:	0028      	movs	r0, r5
    a7f6:	f7ff fdfb 	bl	a3f0 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    a7fa:	0030      	movs	r0, r6
    a7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7fe:	46c0      	nop			; (mov r8, r8)
    a800:	fff0bdc0 	.word	0xfff0bdc0
    a804:	7ff0bdbf 	.word	0x7ff0bdbf
    a808:	01d1a94a 	.word	0x01d1a94a
    a80c:	000f4240 	.word	0x000f4240
    a810:	40008000 	.word	0x40008000
    a814:	00000504 	.word	0x00000504
    a818:	4000b000 	.word	0x4000b000
    a81c:	4001f000 	.word	0x4001f000
    a820:	4000b148 	.word	0x4000b148
    a824:	0000051c 	.word	0x0000051c

0000a828 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    a828:	2201      	movs	r2, #1
    a82a:	4b02      	ldr	r3, [pc, #8]	; (a834 <radio_tmr_stop+0xc>)
    a82c:	605a      	str	r2, [r3, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    a82e:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_STOP(SW_SWITCH_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a830:	4770      	bx	lr
    a832:	46c0      	nop			; (mov r8, r8)
    a834:	40008000 	.word	0x40008000

0000a838 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    a838:	4b0a      	ldr	r3, [pc, #40]	; (a864 <radio_tmr_hcto_configure+0x2c>)
    a83a:	4a0b      	ldr	r2, [pc, #44]	; (a868 <radio_tmr_hcto_configure+0x30>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a83c:	490b      	ldr	r1, [pc, #44]	; (a86c <radio_tmr_hcto_configure+0x34>)
	EVENT_TIMER->CC[1] = hcto;
    a83e:	50d0      	str	r0, [r2, r3]
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a840:	22a5      	movs	r2, #165	; 0xa5
    a842:	4b0b      	ldr	r3, [pc, #44]	; (a870 <radio_tmr_hcto_configure+0x38>)
    a844:	00d2      	lsls	r2, r2, #3
    a846:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    a848:	490a      	ldr	r1, [pc, #40]	; (a874 <radio_tmr_hcto_configure+0x3c>)
    a84a:	4a0b      	ldr	r2, [pc, #44]	; (a878 <radio_tmr_hcto_configure+0x40>)
    a84c:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    a84e:	490b      	ldr	r1, [pc, #44]	; (a87c <radio_tmr_hcto_configure+0x44>)
    a850:	3204      	adds	r2, #4
    a852:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    a854:	490a      	ldr	r1, [pc, #40]	; (a880 <radio_tmr_hcto_configure+0x48>)
    a856:	4a0b      	ldr	r2, [pc, #44]	; (a884 <radio_tmr_hcto_configure+0x4c>)
    a858:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    a85a:	2118      	movs	r1, #24
    a85c:	4a0a      	ldr	r2, [pc, #40]	; (a888 <radio_tmr_hcto_configure+0x50>)
    a85e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
		HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    a860:	4770      	bx	lr
    a862:	46c0      	nop			; (mov r8, r8)
    a864:	00000544 	.word	0x00000544
    a868:	40008000 	.word	0x40008000
    a86c:	40001104 	.word	0x40001104
    a870:	4001f000 	.word	0x4001f000
    a874:	40008044 	.word	0x40008044
    a878:	0000052c 	.word	0x0000052c
    a87c:	40008144 	.word	0x40008144
    a880:	40001010 	.word	0x40001010
    a884:	00000534 	.word	0x00000534
    a888:	00000504 	.word	0x00000504

0000a88c <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    a88c:	22a4      	movs	r2, #164	; 0xa4
    a88e:	4b08      	ldr	r3, [pc, #32]	; (a8b0 <radio_tmr_aa_capture+0x24>)
    a890:	4908      	ldr	r1, [pc, #32]	; (a8b4 <radio_tmr_aa_capture+0x28>)
    a892:	00d2      	lsls	r2, r2, #3
    a894:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    a896:	4908      	ldr	r1, [pc, #32]	; (a8b8 <radio_tmr_aa_capture+0x2c>)
    a898:	4a08      	ldr	r2, [pc, #32]	; (a8bc <radio_tmr_aa_capture+0x30>)
    a89a:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a89c:	4908      	ldr	r1, [pc, #32]	; (a8c0 <radio_tmr_aa_capture+0x34>)
    a89e:	3204      	adds	r2, #4
    a8a0:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    a8a2:	4908      	ldr	r1, [pc, #32]	; (a8c4 <radio_tmr_aa_capture+0x38>)
    a8a4:	4a08      	ldr	r2, [pc, #32]	; (a8c8 <radio_tmr_aa_capture+0x3c>)
    a8a6:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    a8a8:	210c      	movs	r1, #12
    a8aa:	4a08      	ldr	r2, [pc, #32]	; (a8cc <radio_tmr_aa_capture+0x40>)
    a8ac:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    a8ae:	4770      	bx	lr
    a8b0:	4001f000 	.word	0x4001f000
    a8b4:	40001100 	.word	0x40001100
    a8b8:	40008040 	.word	0x40008040
    a8bc:	00000524 	.word	0x00000524
    a8c0:	40001104 	.word	0x40001104
    a8c4:	40008044 	.word	0x40008044
    a8c8:	0000052c 	.word	0x0000052c
    a8cc:	00000504 	.word	0x00000504

0000a8d0 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    a8d0:	4b01      	ldr	r3, [pc, #4]	; (a8d8 <radio_tmr_aa_get+0x8>)
    a8d2:	4a02      	ldr	r2, [pc, #8]	; (a8dc <radio_tmr_aa_get+0xc>)
    a8d4:	58d0      	ldr	r0, [r2, r3]
}
    a8d6:	4770      	bx	lr
    a8d8:	00000544 	.word	0x00000544
    a8dc:	40008000 	.word	0x40008000

0000a8e0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    a8e0:	4b01      	ldr	r3, [pc, #4]	; (a8e8 <radio_tmr_aa_save+0x8>)
    a8e2:	6018      	str	r0, [r3, #0]
}
    a8e4:	4770      	bx	lr
    a8e6:	46c0      	nop			; (mov r8, r8)
    a8e8:	20000ae4 	.word	0x20000ae4

0000a8ec <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
    a8ec:	4b01      	ldr	r3, [pc, #4]	; (a8f4 <radio_tmr_aa_restore+0x8>)
    a8ee:	6818      	ldr	r0, [r3, #0]
}
    a8f0:	4770      	bx	lr
    a8f2:	46c0      	nop			; (mov r8, r8)
    a8f4:	20000ae4 	.word	0x20000ae4

0000a8f8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    a8f8:	23a8      	movs	r3, #168	; 0xa8
    a8fa:	4a02      	ldr	r2, [pc, #8]	; (a904 <radio_tmr_ready_get+0xc>)
    a8fc:	00db      	lsls	r3, r3, #3
    a8fe:	58d0      	ldr	r0, [r2, r3]
}
    a900:	4770      	bx	lr
    a902:	46c0      	nop			; (mov r8, r8)
    a904:	40008000 	.word	0x40008000

0000a908 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    a908:	22a7      	movs	r2, #167	; 0xa7
    a90a:	4b05      	ldr	r3, [pc, #20]	; (a920 <radio_tmr_end_capture+0x18>)
    a90c:	4905      	ldr	r1, [pc, #20]	; (a924 <radio_tmr_end_capture+0x1c>)
    a90e:	00d2      	lsls	r2, r2, #3
    a910:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    a912:	4905      	ldr	r1, [pc, #20]	; (a928 <radio_tmr_end_capture+0x20>)
    a914:	4a05      	ldr	r2, [pc, #20]	; (a92c <radio_tmr_end_capture+0x24>)
    a916:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    a918:	2120      	movs	r1, #32
    a91a:	4a05      	ldr	r2, [pc, #20]	; (a930 <radio_tmr_end_capture+0x28>)
    a91c:	5099      	str	r1, [r3, r2]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    a91e:	4770      	bx	lr
    a920:	4001f000 	.word	0x4001f000
    a924:	4000110c 	.word	0x4000110c
    a928:	40008048 	.word	0x40008048
    a92c:	0000053c 	.word	0x0000053c
    a930:	00000504 	.word	0x00000504

0000a934 <radio_tmr_end_get>:
    a934:	23a9      	movs	r3, #169	; 0xa9
    a936:	4a02      	ldr	r2, [pc, #8]	; (a940 <radio_tmr_end_get+0xc>)
    a938:	00db      	lsls	r3, r3, #3
    a93a:	58d0      	ldr	r0, [r2, r3]
    a93c:	4770      	bx	lr
    a93e:	46c0      	nop			; (mov r8, r8)
    a940:	40008000 	.word	0x40008000

0000a944 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    a944:	23a9      	movs	r3, #169	; 0xa9
    a946:	4a02      	ldr	r2, [pc, #8]	; (a950 <radio_tmr_tifs_base_get+0xc>)
    a948:	00db      	lsls	r3, r3, #3
    a94a:	58d0      	ldr	r0, [r2, r3]
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    a94c:	4770      	bx	lr
    a94e:	46c0      	nop			; (mov r8, r8)
    a950:	40008000 	.word	0x40008000

0000a954 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    a954:	b570      	push	{r4, r5, r6, lr}

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a956:	24a0      	movs	r4, #160	; 0xa0
    a958:	2100      	movs	r1, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a95a:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a95c:	4b12      	ldr	r3, [pc, #72]	; (a9a8 <radio_ccm_rx_pkt_set+0x54>)
    a95e:	00e4      	lsls	r4, r4, #3
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a960:	26a1      	movs	r6, #161	; 0xa1
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a962:	5119      	str	r1, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a964:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE = mode;
    a966:	2401      	movs	r4, #1
    a968:	4d10      	ldr	r5, [pc, #64]	; (a9ac <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a96a:	00f6      	lsls	r6, r6, #3
	NRF_CCM->MODE = mode;
    a96c:	515c      	str	r4, [r3, r5]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a96e:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    a970:	480f      	ldr	r0, [pc, #60]	; (a9b0 <radio_ccm_rx_pkt_set+0x5c>)
    a972:	4e10      	ldr	r6, [pc, #64]	; (a9b4 <radio_ccm_rx_pkt_set+0x60>)
    a974:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    a976:	3604      	adds	r6, #4
    a978:	519a      	str	r2, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a97a:	4e0f      	ldr	r6, [pc, #60]	; (a9b8 <radio_ccm_rx_pkt_set+0x64>)
    a97c:	4a0f      	ldr	r2, [pc, #60]	; (a9bc <radio_ccm_rx_pkt_set+0x68>)
    a97e:	509e      	str	r6, [r3, r2]
	NRF_CCM->SHORTS = 0;
    a980:	2280      	movs	r2, #128	; 0x80
    a982:	0092      	lsls	r2, r2, #2
    a984:	5099      	str	r1, [r3, r2]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a986:	001a      	movs	r2, r3
    a988:	32fc      	adds	r2, #252	; 0xfc
    a98a:	6091      	str	r1, [r2, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    a98c:	60d1      	str	r1, [r2, #12]

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    a98e:	21a8      	movs	r1, #168	; 0xa8
    a990:	4a0b      	ldr	r2, [pc, #44]	; (a9c0 <radio_ccm_rx_pkt_set+0x6c>)
    a992:	4e0c      	ldr	r6, [pc, #48]	; (a9c4 <radio_ccm_rx_pkt_set+0x70>)
    a994:	00c9      	lsls	r1, r1, #3
    a996:	5056      	str	r6, [r2, r1]
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    a998:	4e0b      	ldr	r6, [pc, #44]	; (a9c8 <radio_ccm_rx_pkt_set+0x74>)
    a99a:	490c      	ldr	r1, [pc, #48]	; (a9cc <radio_ccm_rx_pkt_set+0x78>)
    a99c:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    a99e:	2140      	movs	r1, #64	; 0x40
    a9a0:	5151      	str	r1, [r2, r5]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    a9a2:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    a9a4:	bd70      	pop	{r4, r5, r6, pc}
    a9a6:	46c0      	nop			; (mov r8, r8)
    a9a8:	4000f000 	.word	0x4000f000
    a9ac:	00000504 	.word	0x00000504
    a9b0:	20000abc 	.word	0x20000abc
    a9b4:	0000050c 	.word	0x0000050c
    a9b8:	20000a8c 	.word	0x20000a8c
    a9bc:	00000514 	.word	0x00000514
    a9c0:	4001f000 	.word	0x4001f000
    a9c4:	40001104 	.word	0x40001104
    a9c8:	4000f004 	.word	0x4000f004
    a9cc:	00000544 	.word	0x00000544

0000a9d0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    a9d0:	b530      	push	{r4, r5, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a9d2:	24a0      	movs	r4, #160	; 0xa0
    a9d4:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a9d6:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a9d8:	4b0d      	ldr	r3, [pc, #52]	; (aa10 <radio_ccm_tx_pkt_set+0x40>)
    a9da:	00e4      	lsls	r4, r4, #3
    a9dc:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a9de:	511d      	str	r5, [r3, r4]
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    a9e0:	4c0c      	ldr	r4, [pc, #48]	; (aa14 <radio_ccm_tx_pkt_set+0x44>)
    a9e2:	511a      	str	r2, [r3, r4]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a9e4:	3404      	adds	r4, #4
    a9e6:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    a9e8:	480b      	ldr	r0, [pc, #44]	; (aa18 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a9ea:	4c0c      	ldr	r4, [pc, #48]	; (aa1c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (u32_t)pkt;
    a9ec:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    a9ee:	21a2      	movs	r1, #162	; 0xa2
    a9f0:	480b      	ldr	r0, [pc, #44]	; (aa20 <radio_ccm_tx_pkt_set+0x50>)
    a9f2:	00c9      	lsls	r1, r1, #3
    a9f4:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a9f6:	490b      	ldr	r1, [pc, #44]	; (aa24 <radio_ccm_tx_pkt_set+0x54>)
    a9f8:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    a9fa:	2480      	movs	r4, #128	; 0x80
    a9fc:	2101      	movs	r1, #1
    a9fe:	00a4      	lsls	r4, r4, #2
    aa00:	5119      	str	r1, [r3, r4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    aa02:	001c      	movs	r4, r3
    aa04:	34fc      	adds	r4, #252	; 0xfc
    aa06:	60a2      	str	r2, [r4, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    aa08:	60e2      	str	r2, [r4, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    aa0a:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    aa0c:	bd30      	pop	{r4, r5, pc}
    aa0e:	46c0      	nop			; (mov r8, r8)
    aa10:	4000f000 	.word	0x4000f000
    aa14:	00000504 	.word	0x00000504
    aa18:	0000050c 	.word	0x0000050c
    aa1c:	20000a8c 	.word	0x20000a8c
    aa20:	20000abc 	.word	0x20000abc
    aa24:	00000514 	.word	0x00000514

0000aa28 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    aa28:	22c1      	movs	r2, #193	; 0xc1
    aa2a:	2102      	movs	r1, #2
    aa2c:	4b0c      	ldr	r3, [pc, #48]	; (aa60 <radio_ccm_is_done+0x38>)
    aa2e:	0092      	lsls	r2, r2, #2
    aa30:	5099      	str	r1, [r3, r2]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    aa32:	4a0c      	ldr	r2, [pc, #48]	; (aa64 <radio_ccm_is_done+0x3c>)
    aa34:	6891      	ldr	r1, [r2, #8]
    aa36:	2900      	cmp	r1, #0
    aa38:	d00d      	beq.n	aa56 <radio_ccm_is_done+0x2e>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    aa3a:	21c2      	movs	r1, #194	; 0xc2
    aa3c:	2002      	movs	r0, #2
    aa3e:	0089      	lsls	r1, r1, #2
    aa40:	5058      	str	r0, [r3, r1]
    aa42:	2080      	movs	r0, #128	; 0x80
    aa44:	23c0      	movs	r3, #192	; 0xc0
    aa46:	4908      	ldr	r1, [pc, #32]	; (aa68 <radio_ccm_is_done+0x40>)
    aa48:	005b      	lsls	r3, r3, #1
    aa4a:	0200      	lsls	r0, r0, #8
    aa4c:	50c8      	str	r0, [r1, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    aa4e:	68d0      	ldr	r0, [r2, #12]
    aa50:	4243      	negs	r3, r0
    aa52:	4158      	adcs	r0, r3
}
    aa54:	4770      	bx	lr
		__WFE();
    aa56:	bf20      	wfe
		__SEV();
    aa58:	bf40      	sev
		__WFE();
    aa5a:	bf20      	wfe
    aa5c:	e7ea      	b.n	aa34 <radio_ccm_is_done+0xc>
    aa5e:	46c0      	nop			; (mov r8, r8)
    aa60:	4000f000 	.word	0x4000f000
    aa64:	4000f0fc 	.word	0x4000f0fc
    aa68:	e000e100 	.word	0xe000e100

0000aa6c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    aa6c:	2380      	movs	r3, #128	; 0x80
    aa6e:	4a03      	ldr	r2, [pc, #12]	; (aa7c <radio_ccm_mic_is_valid+0x10>)
    aa70:	00db      	lsls	r3, r3, #3
    aa72:	58d0      	ldr	r0, [r2, r3]
    aa74:	1e43      	subs	r3, r0, #1
    aa76:	4198      	sbcs	r0, r3
}
    aa78:	4770      	bx	lr
    aa7a:	46c0      	nop			; (mov r8, r8)
    aa7c:	4000f000 	.word	0x4000f000

0000aa80 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    aa80:	2380      	movs	r3, #128	; 0x80
    aa82:	4a02      	ldr	r2, [pc, #8]	; (aa8c <radio_ar_match_get+0xc>)
    aa84:	00db      	lsls	r3, r3, #3
    aa86:	58d0      	ldr	r0, [r2, r3]
}
    aa88:	4770      	bx	lr
    aa8a:	46c0      	nop			; (mov r8, r8)
    aa8c:	4000f000 	.word	0x4000f000

0000aa90 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    aa90:	2300      	movs	r3, #0
    aa92:	4a03      	ldr	r2, [pc, #12]	; (aaa0 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    aa94:	4903      	ldr	r1, [pc, #12]	; (aaa4 <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
    aa96:	62d3      	str	r3, [r2, #44]	; 0x2c
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    aa98:	22a0      	movs	r2, #160	; 0xa0
    aa9a:	00d2      	lsls	r2, r2, #3
    aa9c:	508b      	str	r3, [r1, r2]
			  AAR_ENABLE_ENABLE_Msk;
}
    aa9e:	4770      	bx	lr
    aaa0:	400010fc 	.word	0x400010fc
    aaa4:	4000f000 	.word	0x4000f000

0000aaa8 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    aaa8:	2000      	movs	r0, #0
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    aaaa:	4b07      	ldr	r3, [pc, #28]	; (aac8 <radio_ar_has_match+0x20>)
    aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED &&
    aaae:	4283      	cmp	r3, r0
    aab0:	d009      	beq.n	aac6 <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_END &&
    aab2:	4b06      	ldr	r3, [pc, #24]	; (aacc <radio_ar_has_match+0x24>)
    aab4:	685a      	ldr	r2, [r3, #4]
	return (radio_bc_has_match() &&
    aab6:	4282      	cmp	r2, r0
    aab8:	d005      	beq.n	aac6 <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_RESOLVED &&
    aaba:	689a      	ldr	r2, [r3, #8]
		NRF_AAR->EVENTS_END &&
    aabc:	4282      	cmp	r2, r0
    aabe:	d002      	beq.n	aac6 <radio_ar_has_match+0x1e>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    aac0:	68d8      	ldr	r0, [r3, #12]
		NRF_AAR->EVENTS_RESOLVED &&
    aac2:	4243      	negs	r3, r0
    aac4:	4158      	adcs	r0, r3
}
    aac6:	4770      	bx	lr
    aac8:	400010fc 	.word	0x400010fc
    aacc:	4000f0fc 	.word	0x4000f0fc

0000aad0 <mayfly_enable_cb>:
#else
#error Unknown LL variant.
#endif

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    aad0:	b510      	push	{r4, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    aad2:	2901      	cmp	r1, #1
    aad4:	d002      	beq.n	aadc <mayfly_enable_cb+0xc>
    aad6:	b662      	cpsie	i
    aad8:	2004      	movs	r0, #4
    aada:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    aadc:	2018      	movs	r0, #24
	if (enable) {
    aade:	2a00      	cmp	r2, #0
    aae0:	d002      	beq.n	aae8 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    aae2:	f7f7 faed 	bl	20c0 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    aae6:	bd10      	pop	{r4, pc}
		irq_disable(SWI4_IRQn);
    aae8:	f7f7 faf6 	bl	20d8 <_arch_irq_disable>
}
    aaec:	e7fb      	b.n	aae6 <mayfly_enable_cb+0x16>

0000aaee <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    aaee:	b510      	push	{r4, lr}
	(void)caller_id;

	switch (callee_id) {
    aaf0:	2900      	cmp	r1, #0
    aaf2:	d004      	beq.n	aafe <mayfly_is_enabled+0x10>
    aaf4:	2901      	cmp	r1, #1
    aaf6:	d006      	beq.n	ab06 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    aaf8:	b662      	cpsie	i
    aafa:	2004      	movs	r0, #4
    aafc:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    aafe:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    ab00:	f7f7 fafa 	bl	20f8 <_arch_irq_is_enabled>
		break;
	}

	return 0;
}
    ab04:	bd10      	pop	{r4, pc}
		return irq_is_enabled(SWI4_IRQn);
    ab06:	2018      	movs	r0, #24
    ab08:	e7fa      	b.n	ab00 <mayfly_is_enabled+0x12>

0000ab0a <mayfly_prio_is_equal>:

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    ab0a:	0003      	movs	r3, r0
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    ab0c:	2001      	movs	r0, #1
    ab0e:	428b      	cmp	r3, r1
    ab10:	d008      	beq.n	ab24 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    ab12:	2b00      	cmp	r3, #0
    ab14:	d103      	bne.n	ab1e <mayfly_prio_is_equal+0x14>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    ab16:	3901      	subs	r1, #1
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    ab18:	4248      	negs	r0, r1
    ab1a:	4148      	adcs	r0, r1
    ab1c:	e002      	b.n	ab24 <mayfly_prio_is_equal+0x1a>
    ab1e:	2000      	movs	r0, #0
    ab20:	2b01      	cmp	r3, #1
    ab22:	d0f9      	beq.n	ab18 <mayfly_prio_is_equal+0xe>
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    ab24:	4770      	bx	lr
	...

0000ab28 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    ab28:	4b07      	ldr	r3, [pc, #28]	; (ab48 <mayfly_pend+0x20>)
	(void)caller_id;

	switch (callee_id) {
    ab2a:	2900      	cmp	r1, #0
    ab2c:	d004      	beq.n	ab38 <mayfly_pend+0x10>
    ab2e:	2901      	cmp	r1, #1
    ab30:	d006      	beq.n	ab40 <mayfly_pend+0x18>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    ab32:	b662      	cpsie	i
    ab34:	2004      	movs	r0, #4
    ab36:	df02      	svc	2
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ab38:	2280      	movs	r2, #128	; 0x80
    ab3a:	0112      	lsls	r2, r2, #4
    ab3c:	605a      	str	r2, [r3, #4]
		break;
	}
}
    ab3e:	4770      	bx	lr
    ab40:	2280      	movs	r2, #128	; 0x80
    ab42:	0452      	lsls	r2, r2, #17
    ab44:	e7fa      	b.n	ab3c <mayfly_pend+0x14>
    ab46:	46c0      	nop			; (mov r8, r8)
    ab48:	e000e1fc 	.word	0xe000e1fc

0000ab4c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    ab4c:	2803      	cmp	r0, #3
    ab4e:	d902      	bls.n	ab56 <hal_ticker_instance0_caller_id_get+0xa>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    ab50:	b662      	cpsie	i
    ab52:	2004      	movs	r0, #4
    ab54:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    ab56:	4b02      	ldr	r3, [pc, #8]	; (ab60 <hal_ticker_instance0_caller_id_get+0x14>)
    ab58:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    ab5a:	2800      	cmp	r0, #0
    ab5c:	d0f8      	beq.n	ab50 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    ab5e:	4770      	bx	lr
    ab60:	0000ca8a 	.word	0x0000ca8a

0000ab64 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    ab64:	3802      	subs	r0, #2
{
    ab66:	b510      	push	{r4, lr}
    ab68:	001c      	movs	r4, r3
	switch (caller_id) {
    ab6a:	2803      	cmp	r0, #3
    ab6c:	d817      	bhi.n	ab9e <hal_ticker_instance0_sched+0x3a>
    ab6e:	f7f5 fb0d 	bl	18c <__gnu_thumb1_case_uqi>
    ab72:	0902      	.short	0x0902
    ab74:	2212      	.short	0x2212
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    ab76:	2903      	cmp	r1, #3
    ab78:	d111      	bne.n	ab9e <hal_ticker_instance0_sched+0x3a>
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    ab7a:	2100      	movs	r1, #0
			m.param = instance;
    ab7c:	4b11      	ldr	r3, [pc, #68]	; (abc4 <hal_ticker_instance0_sched+0x60>)
    ab7e:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    ab80:	0008      	movs	r0, r1
    ab82:	e005      	b.n	ab90 <hal_ticker_instance0_sched+0x2c>
		switch (callee_id) {
    ab84:	2904      	cmp	r1, #4
    ab86:	d10a      	bne.n	ab9e <hal_ticker_instance0_sched+0x3a>
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    ab88:	2000      	movs	r0, #0
			m.param = instance;
    ab8a:	4b0f      	ldr	r3, [pc, #60]	; (abc8 <hal_ticker_instance0_sched+0x64>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    ab8c:	3903      	subs	r1, #3
			m.param = instance;
    ab8e:	609c      	str	r4, [r3, #8]
						  ticker_job};

			m.param = instance;

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    ab90:	f7f9 fae0 	bl	4154 <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    ab94:	bd10      	pop	{r4, pc}
		switch (callee_id) {
    ab96:	2903      	cmp	r1, #3
    ab98:	d004      	beq.n	aba4 <hal_ticker_instance0_sched+0x40>
    ab9a:	2904      	cmp	r1, #4
    ab9c:	d007      	beq.n	abae <hal_ticker_instance0_sched+0x4a>
		LL_ASSERT(0);
    ab9e:	b662      	cpsie	i
    aba0:	2004      	movs	r0, #4
    aba2:	df02      	svc	2
			m.param = instance;
    aba4:	4b09      	ldr	r3, [pc, #36]	; (abcc <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    aba6:	2100      	movs	r1, #0
			m.param = instance;
    aba8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    abaa:	2001      	movs	r0, #1
    abac:	e7f0      	b.n	ab90 <hal_ticker_instance0_sched+0x2c>
			m.param = instance;
    abae:	4b08      	ldr	r3, [pc, #32]	; (abd0 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    abb0:	2101      	movs	r1, #1
			m.param = instance;
    abb2:	609c      	str	r4, [r3, #8]
    abb4:	e7e4      	b.n	ab80 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    abb6:	2904      	cmp	r1, #4
    abb8:	d1f1      	bne.n	ab9e <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    abba:	4b06      	ldr	r3, [pc, #24]	; (abd4 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    abbc:	3903      	subs	r1, #3
			m.param = instance;
    abbe:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    abc0:	2003      	movs	r0, #3
    abc2:	e7e5      	b.n	ab90 <hal_ticker_instance0_sched+0x2c>
    abc4:	20002410 	.word	0x20002410
    abc8:	20002420 	.word	0x20002420
    abcc:	20002430 	.word	0x20002430
    abd0:	20002440 	.word	0x20002440
    abd4:	20002450 	.word	0x20002450

0000abd8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
    abd8:	b510      	push	{r4, lr}
    abda:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    abdc:	2000      	movs	r0, #0
    abde:	f7ff faad 	bl	a13c <cntr_cmp_set>
}
    abe2:	bd10      	pop	{r4, pc}

0000abe4 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    abe4:	4770      	bx	lr
	...

0000abe8 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
    abe8:	4b01      	ldr	r3, [pc, #4]	; (abf0 <net_buf_pool_get+0x8>)
    abea:	0140      	lsls	r0, r0, #5
    abec:	18c0      	adds	r0, r0, r3
}
    abee:	4770      	bx	lr
    abf0:	20002540 	.word	0x20002540

0000abf4 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    abf4:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    abf6:	4b04      	ldr	r3, [pc, #16]	; (ac08 <net_buf_id+0x14>)
    abf8:	0152      	lsls	r2, r2, #5
    abfa:	189b      	adds	r3, r3, r2
    abfc:	69db      	ldr	r3, [r3, #28]
    abfe:	1ac0      	subs	r0, r0, r3
    ac00:	4b02      	ldr	r3, [pc, #8]	; (ac0c <net_buf_id+0x18>)
    ac02:	10c0      	asrs	r0, r0, #3
    ac04:	4358      	muls	r0, r3
}
    ac06:	4770      	bx	lr
    ac08:	20002540 	.word	0x20002540
    ac0c:	aaaaaaab 	.word	0xaaaaaaab

0000ac10 <fixed_data_alloc>:
{
    ac10:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ac12:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ac14:	4b08      	ldr	r3, [pc, #32]	; (ac38 <fixed_data_alloc+0x28>)
    ac16:	0152      	lsls	r2, r2, #5
    ac18:	189b      	adds	r3, r3, r2
    ac1a:	699b      	ldr	r3, [r3, #24]
    ac1c:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    ac1e:	680b      	ldr	r3, [r1, #0]
    ac20:	6822      	ldr	r2, [r4, #0]
    ac22:	4293      	cmp	r3, r2
    ac24:	d900      	bls.n	ac28 <fixed_data_alloc+0x18>
    ac26:	0013      	movs	r3, r2
    ac28:	600b      	str	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    ac2a:	f7ff ffe3 	bl	abf4 <net_buf_id>
    ac2e:	6823      	ldr	r3, [r4, #0]
    ac30:	4343      	muls	r3, r0
    ac32:	6860      	ldr	r0, [r4, #4]
    ac34:	18c0      	adds	r0, r0, r3
}
    ac36:	bd10      	pop	{r4, pc}
    ac38:	20002540 	.word	0x20002540

0000ac3c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    ac3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac3e:	0005      	movs	r5, r0
    ac40:	9101      	str	r1, [sp, #4]
    ac42:	0016      	movs	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ac44:	f000 fe68 	bl	b918 <_impl_k_uptime_get_32>
    ac48:	9000      	str	r0, [sp, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    ac4a:	f3ef 8710 	mrs	r7, PRIMASK
    ac4e:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    ac50:	8a6b      	ldrh	r3, [r5, #18]
    ac52:	2b00      	cmp	r3, #0
    ac54:	d040      	beq.n	acd8 <net_buf_alloc_len+0x9c>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    ac56:	8a2a      	ldrh	r2, [r5, #16]
    ac58:	429a      	cmp	r2, r3
    ac5a:	d92c      	bls.n	acb6 <net_buf_alloc_len+0x7a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    ac5c:	2100      	movs	r1, #0
    ac5e:	0028      	movs	r0, r5
    ac60:	f000 fba0 	bl	b3a4 <k_queue_get>
    ac64:	1e04      	subs	r4, r0, #0
			if (buf) {
    ac66:	d026      	beq.n	acb6 <net_buf_alloc_len+0x7a>
	if (key) {
    ac68:	2f00      	cmp	r7, #0
    ac6a:	d100      	bne.n	ac6e <net_buf_alloc_len+0x32>
	__asm__ volatile("cpsie i" : : : "memory");
    ac6c:	b662      	cpsie	i
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    ac6e:	9b01      	ldr	r3, [sp, #4]
    ac70:	2b00      	cmp	r3, #0
    ac72:	d03c      	beq.n	acee <net_buf_alloc_len+0xb2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    ac74:	1c73      	adds	r3, r6, #1
    ac76:	2b01      	cmp	r3, #1
    ac78:	d907      	bls.n	ac8a <net_buf_alloc_len+0x4e>
    ac7a:	f000 fe4d 	bl	b918 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    ac7e:	9b00      	ldr	r3, [sp, #0]
    ac80:	1ac0      	subs	r0, r0, r3

			timeout -= min(timeout, diff);
    ac82:	42b0      	cmp	r0, r6
    ac84:	d900      	bls.n	ac88 <net_buf_alloc_len+0x4c>
    ac86:	0030      	movs	r0, r6
    ac88:	1a36      	subs	r6, r6, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ac8a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    ac8c:	4f1e      	ldr	r7, [pc, #120]	; (ad08 <net_buf_alloc_len+0xcc>)
    ac8e:	015b      	lsls	r3, r3, #5
    ac90:	18fb      	adds	r3, r7, r3
    ac92:	699b      	ldr	r3, [r3, #24]
    ac94:	0032      	movs	r2, r6
    ac96:	681b      	ldr	r3, [r3, #0]
    ac98:	a901      	add	r1, sp, #4
    ac9a:	681b      	ldr	r3, [r3, #0]
    ac9c:	0020      	movs	r0, r4
    ac9e:	4798      	blx	r3
    aca0:	1e05      	subs	r5, r0, #0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    aca2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    aca4:	d124      	bne.n	acf0 <net_buf_alloc_len+0xb4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    aca6:	79a0      	ldrb	r0, [r4, #6]
    aca8:	0021      	movs	r1, r4
    acaa:	0140      	lsls	r0, r0, #5
    acac:	19c0      	adds	r0, r0, r7
    acae:	f000 fb58 	bl	b362 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    acb2:	002c      	movs	r4, r5
    acb4:	e019      	b.n	acea <net_buf_alloc_len+0xae>
		uninit_count = pool->uninit_count--;
    acb6:	8a6b      	ldrh	r3, [r5, #18]
    acb8:	1e5a      	subs	r2, r3, #1
    acba:	826a      	strh	r2, [r5, #18]
	if (key) {
    acbc:	2f00      	cmp	r7, #0
    acbe:	d100      	bne.n	acc2 <net_buf_alloc_len+0x86>
	__asm__ volatile("cpsie i" : : : "memory");
    acc0:	b662      	cpsie	i
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    acc2:	8a2c      	ldrh	r4, [r5, #16]
    acc4:	1ae3      	subs	r3, r4, r3
    acc6:	2418      	movs	r4, #24
    acc8:	435c      	muls	r4, r3
    acca:	69eb      	ldr	r3, [r5, #28]
    accc:	191c      	adds	r4, r3, r4
	return pool - _net_buf_pool_list;
    acce:	4b0e      	ldr	r3, [pc, #56]	; (ad08 <net_buf_alloc_len+0xcc>)
    acd0:	1aed      	subs	r5, r5, r3
    acd2:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    acd4:	71a5      	strb	r5, [r4, #6]
		goto success;
    acd6:	e7ca      	b.n	ac6e <net_buf_alloc_len+0x32>
	if (key) {
    acd8:	2f00      	cmp	r7, #0
    acda:	d100      	bne.n	acde <net_buf_alloc_len+0xa2>
	__asm__ volatile("cpsie i" : : : "memory");
    acdc:	b662      	cpsie	i
	buf = k_lifo_get(&pool->free, timeout);
    acde:	0031      	movs	r1, r6
    ace0:	0028      	movs	r0, r5
    ace2:	f000 fb5f 	bl	b3a4 <k_queue_get>
    ace6:	1e04      	subs	r4, r0, #0
	if (!buf) {
    ace8:	d1c1      	bne.n	ac6e <net_buf_alloc_len+0x32>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    acea:	0020      	movs	r0, r4
    acec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		buf->__buf = NULL;
    acee:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    acf0:	2301      	movs	r3, #1
    acf2:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    acf4:	2300      	movs	r3, #0
	buf->size  = size;
    acf6:	466a      	mov	r2, sp
	buf->frags = NULL;
    acf8:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    acfa:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    acfc:	8892      	ldrh	r2, [r2, #4]
	buf->len  = 0;
    acfe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    ad00:	6923      	ldr	r3, [r4, #16]
    ad02:	81e2      	strh	r2, [r4, #14]
    ad04:	60a3      	str	r3, [r4, #8]
	return buf;
    ad06:	e7f0      	b.n	acea <net_buf_alloc_len+0xae>
    ad08:	20002540 	.word	0x20002540

0000ad0c <net_buf_alloc_fixed>:
	return net_buf_alloc_len_debug(pool, fixed->data_size, timeout, func,
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
    ad0c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ad0e:	6983      	ldr	r3, [r0, #24]
{
    ad10:	000a      	movs	r2, r1

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    ad12:	685b      	ldr	r3, [r3, #4]
    ad14:	6819      	ldr	r1, [r3, #0]
    ad16:	f7ff ff91 	bl	ac3c <net_buf_alloc_len>
}
    ad1a:	bd10      	pop	{r4, pc}

0000ad1c <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    ad1c:	6883      	ldr	r3, [r0, #8]
    ad1e:	1859      	adds	r1, r3, r1
    ad20:	6001      	str	r1, [r0, #0]
}
    ad22:	4770      	bx	lr

0000ad24 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    ad24:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    ad26:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
    ad28:	2501      	movs	r5, #1
	for (tail = buf; tail->frags; tail = tail->frags) {
    ad2a:	6814      	ldr	r4, [r2, #0]
    ad2c:	2c00      	cmp	r4, #0
    ad2e:	d102      	bne.n	ad36 <net_buf_put+0x12>
	}

	k_fifo_put_list(fifo, buf, tail);
    ad30:	f000 fb1d 	bl	b36e <k_queue_append_list>
}
    ad34:	bd70      	pop	{r4, r5, r6, pc}
		tail->flags |= NET_BUF_FRAGS;
    ad36:	7953      	ldrb	r3, [r2, #5]
    ad38:	432b      	orrs	r3, r5
    ad3a:	7153      	strb	r3, [r2, #5]
    ad3c:	0022      	movs	r2, r4
    ad3e:	e7f4      	b.n	ad2a <net_buf_put+0x6>

0000ad40 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad42:	0004      	movs	r4, r0
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ad44:	2502      	movs	r5, #2
	NET_BUF_ASSERT(buf);

	while (buf) {
    ad46:	2c00      	cmp	r4, #0
    ad48:	d100      	bne.n	ad4c <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    ad4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    ad4c:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    ad4e:	6826      	ldr	r6, [r4, #0]
		if (--buf->ref > 0) {
    ad50:	3b01      	subs	r3, #1
    ad52:	b2db      	uxtb	r3, r3
    ad54:	7123      	strb	r3, [r4, #4]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d1f7      	bne.n	ad4a <net_buf_unref+0xa>
		if (buf->__buf) {
    ad5a:	6921      	ldr	r1, [r4, #16]
    ad5c:	4f10      	ldr	r7, [pc, #64]	; (ada0 <net_buf_unref+0x60>)
    ad5e:	2900      	cmp	r1, #0
    ad60:	d00c      	beq.n	ad7c <net_buf_unref+0x3c>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ad62:	7963      	ldrb	r3, [r4, #5]
    ad64:	422b      	tst	r3, r5
    ad66:	d107      	bne.n	ad78 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ad68:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    ad6a:	0020      	movs	r0, r4
    ad6c:	015b      	lsls	r3, r3, #5
    ad6e:	18fb      	adds	r3, r7, r3
    ad70:	699b      	ldr	r3, [r3, #24]
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	689b      	ldr	r3, [r3, #8]
    ad76:	4798      	blx	r3
			buf->__buf = NULL;
    ad78:	2300      	movs	r3, #0
    ad7a:	6123      	str	r3, [r4, #16]
		buf->data = NULL;
    ad7c:	2300      	movs	r3, #0
		pool = net_buf_pool_get(buf->pool_id);
    ad7e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    ad80:	60a3      	str	r3, [r4, #8]
		if (pool->destroy) {
    ad82:	0140      	lsls	r0, r0, #5
		buf->frags = NULL;
    ad84:	6023      	str	r3, [r4, #0]
		if (pool->destroy) {
    ad86:	1838      	adds	r0, r7, r0
    ad88:	6943      	ldr	r3, [r0, #20]
    ad8a:	2b00      	cmp	r3, #0
    ad8c:	d003      	beq.n	ad96 <net_buf_unref+0x56>
			pool->destroy(buf);
    ad8e:	0020      	movs	r0, r4
    ad90:	4798      	blx	r3
{
    ad92:	0034      	movs	r4, r6
    ad94:	e7d7      	b.n	ad46 <net_buf_unref+0x6>
	k_lifo_put(&pool->free, buf);
    ad96:	0021      	movs	r1, r4
    ad98:	f000 fae3 	bl	b362 <k_queue_prepend>
    ad9c:	e7f9      	b.n	ad92 <net_buf_unref+0x52>
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	20002540 	.word	0x20002540

0000ada4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    ada4:	7903      	ldrb	r3, [r0, #4]
    ada6:	3301      	adds	r3, #1
    ada8:	7103      	strb	r3, [r0, #4]
	return buf;
}
    adaa:	4770      	bx	lr

0000adac <net_buf_simple_add>:
	return buf->data + buf->len;
    adac:	8883      	ldrh	r3, [r0, #4]
    adae:	6802      	ldr	r2, [r0, #0]
    adb0:	18d2      	adds	r2, r2, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    adb2:	185b      	adds	r3, r3, r1
    adb4:	8083      	strh	r3, [r0, #4]
	return tail;
}
    adb6:	0010      	movs	r0, r2
    adb8:	4770      	bx	lr

0000adba <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    adba:	b510      	push	{r4, lr}
    adbc:	0004      	movs	r4, r0
    adbe:	8883      	ldrh	r3, [r0, #4]
    adc0:	6800      	ldr	r0, [r0, #0]
    adc2:	18c0      	adds	r0, r0, r3
	buf->len += len;
    adc4:	189b      	adds	r3, r3, r2
    adc6:	80a3      	strh	r3, [r4, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    adc8:	f7f6 fb0a 	bl	13e0 <memcpy>
}
    adcc:	bd10      	pop	{r4, pc}

0000adce <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    adce:	8883      	ldrh	r3, [r0, #4]
    add0:	1a5b      	subs	r3, r3, r1
    add2:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    add4:	6803      	ldr	r3, [r0, #0]
    add6:	1859      	adds	r1, r3, r1
    add8:	6001      	str	r1, [r0, #0]
}
    adda:	0008      	movs	r0, r1
    addc:	4770      	bx	lr

0000adde <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    adde:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
    ade0:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    ade2:	2101      	movs	r1, #1
	val = buf->data[0];
    ade4:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
    ade6:	f7ff fff2 	bl	adce <net_buf_simple_pull>

	return val;
}
    adea:	0020      	movs	r0, r4
    adec:	bd10      	pop	{r4, pc}

0000adee <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    adee:	6803      	ldr	r3, [r0, #0]
    adf0:	6880      	ldr	r0, [r0, #8]
    adf2:	1a18      	subs	r0, r3, r0
}
    adf4:	4770      	bx	lr
	...

0000adf8 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    adf8:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    adfa:	4e07      	ldr	r6, [pc, #28]	; (ae18 <_sys_device_do_config_level+0x20>)
    adfc:	0083      	lsls	r3, r0, #2
    adfe:	599d      	ldr	r5, [r3, r6]
    ae00:	3001      	adds	r0, #1
    ae02:	0084      	lsls	r4, r0, #2
    ae04:	5933      	ldr	r3, [r6, r4]
    ae06:	429d      	cmp	r5, r3
    ae08:	d300      	bcc.n	ae0c <_sys_device_do_config_level+0x14>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    ae0a:	bd70      	pop	{r4, r5, r6, pc}
		device->init(info);
    ae0c:	682b      	ldr	r3, [r5, #0]
    ae0e:	0028      	movs	r0, r5
    ae10:	685b      	ldr	r3, [r3, #4]
    ae12:	4798      	blx	r3
								info++) {
    ae14:	350c      	adds	r5, #12
    ae16:	e7f5      	b.n	ae04 <_sys_device_do_config_level+0xc>
    ae18:	0000ca9c 	.word	0x0000ca9c

0000ae1c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    ae1c:	b570      	push	{r4, r5, r6, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    ae1e:	4c11      	ldr	r4, [pc, #68]	; (ae64 <device_get_binding+0x48>)
{
    ae20:	0006      	movs	r6, r0
    ae22:	0023      	movs	r3, r4
	for (info = __device_init_start; info != __device_init_end; info++) {
    ae24:	4d10      	ldr	r5, [pc, #64]	; (ae68 <device_get_binding+0x4c>)
    ae26:	42ac      	cmp	r4, r5
    ae28:	d104      	bne.n	ae34 <device_get_binding+0x18>
    ae2a:	001c      	movs	r4, r3
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    ae2c:	42ac      	cmp	r4, r5
    ae2e:	d10a      	bne.n	ae46 <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    ae30:	2400      	movs	r4, #0
    ae32:	e014      	b.n	ae5e <device_get_binding+0x42>
		if (info->driver_api != NULL && info->config->name == name) {
    ae34:	6862      	ldr	r2, [r4, #4]
    ae36:	2a00      	cmp	r2, #0
    ae38:	d003      	beq.n	ae42 <device_get_binding+0x26>
    ae3a:	6822      	ldr	r2, [r4, #0]
    ae3c:	6812      	ldr	r2, [r2, #0]
    ae3e:	42b2      	cmp	r2, r6
    ae40:	d00d      	beq.n	ae5e <device_get_binding+0x42>
	for (info = __device_init_start; info != __device_init_end; info++) {
    ae42:	340c      	adds	r4, #12
    ae44:	e7ef      	b.n	ae26 <device_get_binding+0xa>
		if (!info->driver_api) {
    ae46:	6863      	ldr	r3, [r4, #4]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d101      	bne.n	ae50 <device_get_binding+0x34>
	for (info = __device_init_start; info != __device_init_end; info++) {
    ae4c:	340c      	adds	r4, #12
    ae4e:	e7ed      	b.n	ae2c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    ae50:	6823      	ldr	r3, [r4, #0]
    ae52:	0030      	movs	r0, r6
    ae54:	6819      	ldr	r1, [r3, #0]
    ae56:	f7f6 fa93 	bl	1380 <strcmp>
    ae5a:	2800      	cmp	r0, #0
    ae5c:	d1f6      	bne.n	ae4c <device_get_binding+0x30>
}
    ae5e:	0020      	movs	r0, r4
    ae60:	bd70      	pop	{r4, r5, r6, pc}
    ae62:	46c0      	nop			; (mov r8, r8)
    ae64:	20002468 	.word	0x20002468
    ae68:	20002504 	.word	0x20002504

0000ae6c <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    ae6c:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    ae6e:	1c43      	adds	r3, r0, #1
    ae70:	d003      	beq.n	ae7a <_sys_power_save_idle_exit+0xe>
    ae72:	4b03      	ldr	r3, [pc, #12]	; (ae80 <_sys_power_save_idle_exit+0x14>)
    ae74:	681b      	ldr	r3, [r3, #0]
    ae76:	4298      	cmp	r0, r3
    ae78:	db01      	blt.n	ae7e <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    ae7a:	f7f8 fbe5 	bl	3648 <_timer_idle_exit>
	}
}
    ae7e:	bd10      	pop	{r4, pc}
    ae80:	20002460 	.word	0x20002460

0000ae84 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ae84:	b570      	push	{r4, r5, r6, lr}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ae86:	2601      	movs	r6, #1
    ae88:	4276      	negs	r6, r6
	__asm__ volatile("mrs %0, PRIMASK;"
    ae8a:	f3ef 8310 	mrs	r3, PRIMASK
    ae8e:	b672      	cpsid	i
	return list->head == list;
    ae90:	4d0b      	ldr	r5, [pc, #44]	; (aec0 <idle+0x3c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ae92:	4a0c      	ldr	r2, [pc, #48]	; (aec4 <idle+0x40>)
	return list->head == list;
    ae94:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ae96:	4293      	cmp	r3, r2
    ae98:	d00c      	beq.n	aeb4 <idle+0x30>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    ae9a:	2b00      	cmp	r3, #0
    ae9c:	d00a      	beq.n	aeb4 <idle+0x30>
    ae9e:	691c      	ldr	r4, [r3, #16]
	if (_must_enter_tickless_idle(ticks)) {
    aea0:	1c63      	adds	r3, r4, #1
    aea2:	d008      	beq.n	aeb6 <idle+0x32>
    aea4:	4b08      	ldr	r3, [pc, #32]	; (aec8 <idle+0x44>)
    aea6:	681b      	ldr	r3, [r3, #0]
    aea8:	42a3      	cmp	r3, r4
    aeaa:	dd04      	ble.n	aeb6 <idle+0x32>
	_kernel.idle = ticks;
    aeac:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    aeae:	f7f7 f9a5 	bl	21fc <k_cpu_idle>
    aeb2:	e7ea      	b.n	ae8a <idle+0x6>
    aeb4:	0034      	movs	r4, r6
		_timer_idle_enter(ticks);
    aeb6:	0020      	movs	r0, r4
    aeb8:	f7f8 fbb0 	bl	361c <_timer_idle_enter>
    aebc:	e7f6      	b.n	aeac <idle+0x28>
    aebe:	46c0      	nop			; (mov r8, r8)
    aec0:	20000bd4 	.word	0x20000bd4
    aec4:	20000be4 	.word	0x20000be4
    aec8:	20002460 	.word	0x20002460

0000aecc <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    aecc:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
    aece:	4803      	ldr	r0, [pc, #12]	; (aedc <_bss_zero+0x10>)
    aed0:	4a03      	ldr	r2, [pc, #12]	; (aee0 <_bss_zero+0x14>)
    aed2:	2100      	movs	r1, #0
    aed4:	1a12      	subs	r2, r2, r0
    aed6:	f7f6 faad 	bl	1434 <memset>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
    aeda:	bd10      	pop	{r4, pc}
    aedc:	20000000 	.word	0x20000000
    aee0:	20000e48 	.word	0x20000e48

0000aee4 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    aee4:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
    aee6:	4803      	ldr	r0, [pc, #12]	; (aef4 <_data_copy+0x10>)
    aee8:	4a03      	ldr	r2, [pc, #12]	; (aef8 <_data_copy+0x14>)
    aeea:	4904      	ldr	r1, [pc, #16]	; (aefc <_data_copy+0x18>)
    aeec:	1a12      	subs	r2, r2, r0
    aeee:	f7f6 fa77 	bl	13e0 <memcpy>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
    aef2:	bd10      	pop	{r4, pc}
    aef4:	20002180 	.word	0x20002180
    aef8:	20002580 	.word	0x20002580
    aefc:	0000cb00 	.word	0x0000cb00

0000af00 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    af00:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    af02:	2002      	movs	r0, #2
    af04:	f7ff ff78 	bl	adf8 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    af08:	4908      	ldr	r1, [pc, #32]	; (af2c <_main+0x2c>)
    af0a:	4809      	ldr	r0, [pc, #36]	; (af30 <_main+0x30>)
    af0c:	f7f7 fbfa 	bl	2704 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    af10:	2003      	movs	r0, #3
    af12:	f7ff ff71 	bl	adf8 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    af16:	f000 fef9 	bl	bd0c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    af1a:	f7f6 ff3b 	bl	1d94 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    af1e:	2101      	movs	r1, #1
    af20:	4a04      	ldr	r2, [pc, #16]	; (af34 <_main+0x34>)
    af22:	7a13      	ldrb	r3, [r2, #8]
    af24:	438b      	bics	r3, r1
    af26:	7213      	strb	r3, [r2, #8]
}
    af28:	bd10      	pop	{r4, pc}
    af2a:	46c0      	nop			; (mov r8, r8)
    af2c:	0000cab8 	.word	0x0000cab8
    af30:	0000cad4 	.word	0x0000cad4
    af34:	20000b74 	.word	0x20000b74

0000af38 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    af38:	b5f0      	push	{r4, r5, r6, r7, lr}
    af3a:	b087      	sub	sp, #28
    af3c:	af06      	add	r7, sp, #24
	_IntLibInit();
    af3e:	f7f7 f825 	bl	1f8c <_IntLibInit>
    af42:	4b30      	ldr	r3, [pc, #192]	; (b004 <_Cstart+0xcc>)
    af44:	4a30      	ldr	r2, [pc, #192]	; (b008 <_Cstart+0xd0>)
	list->head = (sys_dnode_t *)list;
    af46:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    af48:	605b      	str	r3, [r3, #4]
    af4a:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    af4c:	4293      	cmp	r3, r2
    af4e:	d1fa      	bne.n	af46 <_Cstart+0xe>
	_setup_new_thread(_main_thread, _main_stack,
    af50:	2400      	movs	r4, #0
    af52:	2301      	movs	r3, #1
    af54:	2280      	movs	r2, #128	; 0x80
	_ready_q.cache = _main_thread;
    af56:	4d2d      	ldr	r5, [pc, #180]	; (b00c <_Cstart+0xd4>)
    af58:	4e2d      	ldr	r6, [pc, #180]	; (b010 <_Cstart+0xd8>)
	_setup_new_thread(_main_thread, _main_stack,
    af5a:	492e      	ldr	r1, [pc, #184]	; (b014 <_Cstart+0xdc>)
	_ready_q.cache = _main_thread;
    af5c:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    af5e:	0028      	movs	r0, r5
    af60:	9304      	str	r3, [sp, #16]
    af62:	9403      	str	r4, [sp, #12]
    af64:	9402      	str	r4, [sp, #8]
    af66:	9401      	str	r4, [sp, #4]
    af68:	9400      	str	r4, [sp, #0]
    af6a:	4b2b      	ldr	r3, [pc, #172]	; (b018 <_Cstart+0xe0>)
    af6c:	00d2      	lsls	r2, r2, #3
    af6e:	f000 fe75 	bl	bc5c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    af72:	2204      	movs	r2, #4
    af74:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    af76:	0028      	movs	r0, r5
    af78:	4393      	bics	r3, r2
    af7a:	726b      	strb	r3, [r5, #9]
    af7c:	f000 fa5a 	bl	b434 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    af80:	2301      	movs	r3, #1
    af82:	2280      	movs	r2, #128	; 0x80
    af84:	9304      	str	r3, [sp, #16]
    af86:	330e      	adds	r3, #14
    af88:	9303      	str	r3, [sp, #12]
    af8a:	4924      	ldr	r1, [pc, #144]	; (b01c <_Cstart+0xe4>)
    af8c:	9402      	str	r4, [sp, #8]
    af8e:	9401      	str	r4, [sp, #4]
    af90:	9400      	str	r4, [sp, #0]
    af92:	4b23      	ldr	r3, [pc, #140]	; (b020 <_Cstart+0xe8>)
    af94:	0052      	lsls	r2, r2, #1
    af96:	4823      	ldr	r0, [pc, #140]	; (b024 <_Cstart+0xec>)
    af98:	f000 fe60 	bl	bc5c <_setup_new_thread>
    af9c:	2204      	movs	r2, #4
    af9e:	4b21      	ldr	r3, [pc, #132]	; (b024 <_Cstart+0xec>)
    afa0:	7a5b      	ldrb	r3, [r3, #9]
    afa2:	4393      	bics	r3, r2
    afa4:	4a1f      	ldr	r2, [pc, #124]	; (b024 <_Cstart+0xec>)
    afa6:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    afa8:	0010      	movs	r0, r2
    afaa:	f000 fa43 	bl	b434 <_add_thread_to_ready_q>
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    afae:	22a0      	movs	r2, #160	; 0xa0
	list->head = (sys_dnode_t *)list;
    afb0:	4b1d      	ldr	r3, [pc, #116]	; (b028 <_Cstart+0xf0>)
    afb2:	0092      	lsls	r2, r2, #2
    afb4:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    afb6:	6173      	str	r3, [r6, #20]
    afb8:	4b1c      	ldr	r3, [pc, #112]	; (b02c <_Cstart+0xf4>)
    afba:	189b      	adds	r3, r3, r2
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    afbc:	f383 8808 	msr	MSP, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    afc0:	491b      	ldr	r1, [pc, #108]	; (b030 <_Cstart+0xf8>)
    afc2:	4a1c      	ldr	r2, [pc, #112]	; (b034 <_Cstart+0xfc>)
    afc4:	6a0b      	ldr	r3, [r1, #32]
    afc6:	401a      	ands	r2, r3
    afc8:	23c0      	movs	r3, #192	; 0xc0
    afca:	041b      	lsls	r3, r3, #16
    afcc:	4313      	orrs	r3, r2
    afce:	620b      	str	r3, [r1, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    afd0:	f7f7 f874 	bl	20bc <_FaultInit>
	_CpuIdleInit();
    afd4:	f7f7 f90c 	bl	21f0 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    afd8:	0020      	movs	r0, r4
    afda:	f7ff ff0d 	bl	adf8 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    afde:	2001      	movs	r0, #1
    afe0:	f7ff ff0a 	bl	adf8 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    afe4:	2280      	movs	r2, #128	; 0x80
    afe6:	4b0b      	ldr	r3, [pc, #44]	; (b014 <_Cstart+0xdc>)
    afe8:	00d2      	lsls	r2, r2, #3
    afea:	189b      	adds	r3, r3, r2
    afec:	2207      	movs	r2, #7

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    afee:	490a      	ldr	r1, [pc, #40]	; (b018 <_Cstart+0xe0>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    aff0:	4393      	bics	r3, r2
	_current = main_thread;
    aff2:	60b5      	str	r5, [r6, #8]
	__asm__ __volatile__(
    aff4:	4a10      	ldr	r2, [pc, #64]	; (b038 <_Cstart+0x100>)
    aff6:	000c      	movs	r4, r1
    aff8:	f383 8809 	msr	PSP, r3
    affc:	b662      	cpsie	i
    affe:	1c20      	adds	r0, r4, #0
    b000:	4710      	bx	r2
    b002:	46c0      	nop			; (mov r8, r8)
    b004:	20000bf8 	.word	0x20000bf8
    b008:	20000cf8 	.word	0x20000cf8
    b00c:	20000b74 	.word	0x20000b74
    b010:	20000bd4 	.word	0x20000bd4
    b014:	20001600 	.word	0x20001600
    b018:	0000af01 	.word	0x0000af01
    b01c:	20001a00 	.word	0x20001a00
    b020:	0000ae85 	.word	0x0000ae85
    b024:	20000b14 	.word	0x20000b14
    b028:	20000be4 	.word	0x20000be4
    b02c:	20001b00 	.word	0x20001b00
    b030:	e000ed00 	.word	0xe000ed00
    b034:	ff00ffff 	.word	0xff00ffff
    b038:	0000bbf9 	.word	0x0000bbf9

0000b03c <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    b03c:	b570      	push	{r4, r5, r6, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    b03e:	7ac6      	ldrb	r6, [r0, #11]
    b040:	250c      	movs	r5, #12
    b042:	68c4      	ldr	r4, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    b044:	428e      	cmp	r6, r1
    b046:	db0b      	blt.n	b060 <get_bit_ptr+0x24>
    b048:	4369      	muls	r1, r5
    b04a:	1861      	adds	r1, r4, r1

	*word = &bitarray[bn / 32];
    b04c:	201f      	movs	r0, #31
    b04e:	17d4      	asrs	r4, r2, #31
    b050:	4004      	ands	r4, r0
    b052:	18a4      	adds	r4, r4, r2
    b054:	1164      	asrs	r4, r4, #5
    b056:	00a4      	lsls	r4, r4, #2
    b058:	190c      	adds	r4, r1, r4

	return bn & 0x1f;
    b05a:	4010      	ands	r0, r2
	*word = &bitarray[bn / 32];
    b05c:	601c      	str	r4, [r3, #0]
}
    b05e:	bd70      	pop	{r4, r5, r6, pc}
		&p->levels[level].bits : p->levels[level].bits_p;
    b060:	434d      	muls	r5, r1
    b062:	5961      	ldr	r1, [r4, r5]
    b064:	e7f2      	b.n	b04c <get_bit_ptr+0x10>

0000b066 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    b066:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    b068:	ab01      	add	r3, sp, #4
    b06a:	f7ff ffe7 	bl	b03c <get_bit_ptr>

	*word |= (1<<bit);
    b06e:	2301      	movs	r3, #1
    b070:	4083      	lsls	r3, r0
    b072:	9a01      	ldr	r2, [sp, #4]
    b074:	6811      	ldr	r1, [r2, #0]
    b076:	430b      	orrs	r3, r1
    b078:	6013      	str	r3, [r2, #0]
}
    b07a:	bd07      	pop	{r0, r1, r2, pc}

0000b07c <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    b07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    b07e:	4c26      	ldr	r4, [pc, #152]	; (b118 <init_static_pools+0x9c>)
    b080:	4b26      	ldr	r3, [pc, #152]	; (b11c <init_static_pools+0xa0>)
    b082:	429c      	cmp	r4, r3
    b084:	d301      	bcc.n	b08a <init_static_pools+0xe>
		init_mem_pool(p);
	}

	return 0;
}
    b086:	2000      	movs	r0, #0
    b088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    b08a:	6865      	ldr	r5, [r4, #4]
    b08c:	8923      	ldrh	r3, [r4, #8]
	for (i = 0; i < p->n_levels; i++) {
    b08e:	2600      	movs	r6, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    b090:	436b      	muls	r3, r5
    b092:	9301      	str	r3, [sp, #4]
	u32_t *bits = p->buf + buflen;
    b094:	9a01      	ldr	r2, [sp, #4]
    b096:	6823      	ldr	r3, [r4, #0]
    b098:	189f      	adds	r7, r3, r2
    b09a:	0023      	movs	r3, r4
    b09c:	3310      	adds	r3, #16
	list->head = (sys_dnode_t *)list;
    b09e:	6123      	str	r3, [r4, #16]
	list->tail = (sys_dnode_t *)list;
    b0a0:	6163      	str	r3, [r4, #20]
	for (i = 0; i < p->n_levels; i++) {
    b0a2:	7aa3      	ldrb	r3, [r4, #10]
    b0a4:	429e      	cmp	r6, r3
    b0a6:	db05      	blt.n	b0b4 <init_static_pools+0x38>
    b0a8:	2500      	movs	r5, #0
	for (i = 0; i < p->n_max; i++) {
    b0aa:	8923      	ldrh	r3, [r4, #8]
    b0ac:	429d      	cmp	r5, r3
    b0ae:	db20      	blt.n	b0f2 <init_static_pools+0x76>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    b0b0:	3418      	adds	r4, #24
    b0b2:	e7e5      	b.n	b080 <init_static_pools+0x4>
		int nblocks = buflen / sz;
    b0b4:	0029      	movs	r1, r5
    b0b6:	9801      	ldr	r0, [sp, #4]
    b0b8:	f7f5 f886 	bl	1c8 <__aeabi_uidiv>
		sys_dlist_init(&p->levels[i].free_list);
    b0bc:	230c      	movs	r3, #12
    b0be:	4373      	muls	r3, r6
    b0c0:	68e2      	ldr	r2, [r4, #12]
    b0c2:	18d3      	adds	r3, r2, r3
    b0c4:	1d1a      	adds	r2, r3, #4
	list->head = (sys_dnode_t *)list;
    b0c6:	605a      	str	r2, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    b0c8:	609a      	str	r2, [r3, #8]
		if (nblocks < 32) {
    b0ca:	281f      	cmp	r0, #31
    b0cc:	dc06      	bgt.n	b0dc <init_static_pools+0x60>
			p->max_inline_level = i;
    b0ce:	72e6      	strb	r6, [r4, #11]
		sz = _ALIGN4(sz / 4);
    b0d0:	2303      	movs	r3, #3
    b0d2:	08ad      	lsrs	r5, r5, #2
    b0d4:	3503      	adds	r5, #3
    b0d6:	439d      	bics	r5, r3
	for (i = 0; i < p->n_levels; i++) {
    b0d8:	3601      	adds	r6, #1
    b0da:	e7e2      	b.n	b0a2 <init_static_pools+0x26>
			p->levels[i].bits_p = bits;
    b0dc:	601f      	str	r7, [r3, #0]
			bits += (nblocks + 31)/32;
    b0de:	0003      	movs	r3, r0
    b0e0:	221f      	movs	r2, #31
    b0e2:	331f      	adds	r3, #31
    b0e4:	17d8      	asrs	r0, r3, #31
    b0e6:	4010      	ands	r0, r2
    b0e8:	18c0      	adds	r0, r0, r3
    b0ea:	1140      	asrs	r0, r0, #5
    b0ec:	0080      	lsls	r0, r0, #2
    b0ee:	183f      	adds	r7, r7, r0
    b0f0:	e7ee      	b.n	b0d0 <init_static_pools+0x54>
	return p->buf + lsz * block;
    b0f2:	6863      	ldr	r3, [r4, #4]
    b0f4:	6822      	ldr	r2, [r4, #0]
    b0f6:	436b      	muls	r3, r5
    b0f8:	18d3      	adds	r3, r2, r3
		sys_dlist_append(&p->levels[0].free_list, block);
    b0fa:	68e2      	ldr	r2, [r4, #12]
		set_free_bit(p, 0, i);
    b0fc:	0020      	movs	r0, r4
		sys_dlist_append(&p->levels[0].free_list, block);
    b0fe:	1d11      	adds	r1, r2, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    b100:	6019      	str	r1, [r3, #0]
	node->prev = list->tail;
    b102:	6891      	ldr	r1, [r2, #8]
    b104:	6059      	str	r1, [r3, #4]

	list->tail->next = node;
    b106:	6891      	ldr	r1, [r2, #8]
    b108:	600b      	str	r3, [r1, #0]
	list->tail = node;
    b10a:	6093      	str	r3, [r2, #8]
		set_free_bit(p, 0, i);
    b10c:	2100      	movs	r1, #0
    b10e:	002a      	movs	r2, r5
    b110:	f7ff ffa9 	bl	b066 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    b114:	3501      	adds	r5, #1
    b116:	e7c8      	b.n	b0aa <init_static_pools+0x2e>
    b118:	20002504 	.word	0x20002504
    b11c:	20002504 	.word	0x20002504

0000b120 <adjust_owner_prio.isra.7>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    b120:	230a      	movs	r3, #10
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    b122:	b570      	push	{r4, r5, r6, lr}
	if (mutex->owner->base.prio != new_prio) {
    b124:	56c3      	ldrsb	r3, [r0, r3]
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    b126:	0004      	movs	r4, r0
    b128:	000d      	movs	r5, r1
	if (mutex->owner->base.prio != new_prio) {
    b12a:	428b      	cmp	r3, r1
    b12c:	d00b      	beq.n	b146 <adjust_owner_prio.isra.7+0x26>
	return !(_is_thread_prevented_from_running(thread) ||
    b12e:	7a43      	ldrb	r3, [r0, #9]
    b130:	06db      	lsls	r3, r3, #27
    b132:	d109      	bne.n	b148 <adjust_owner_prio.isra.7+0x28>
    b134:	6a03      	ldr	r3, [r0, #32]
    b136:	3301      	adds	r3, #1
    b138:	d106      	bne.n	b148 <adjust_owner_prio.isra.7+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    b13a:	f000 fa03 	bl	b544 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
    b13e:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
    b140:	0020      	movs	r0, r4
    b142:	f000 f977 	bl	b434 <_add_thread_to_ready_q>
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    b146:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		thread->base.prio = prio;
    b148:	72a5      	strb	r5, [r4, #10]
    b14a:	e7fc      	b.n	b146 <adjust_owner_prio.isra.7+0x26>

0000b14c <_impl_k_mutex_lock>:

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    b14c:	b570      	push	{r4, r5, r6, lr}
	--_current->base.sched_locked;
    b14e:	4b2f      	ldr	r3, [pc, #188]	; (b20c <_impl_k_mutex_lock+0xc0>)
    b150:	000d      	movs	r5, r1
    b152:	6899      	ldr	r1, [r3, #8]
    b154:	0004      	movs	r4, r0
    b156:	7aca      	ldrb	r2, [r1, #11]
    b158:	3a01      	subs	r2, #1
    b15a:	72ca      	strb	r2, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    b15c:	68c2      	ldr	r2, [r0, #12]
    b15e:	2a00      	cmp	r2, #0
    b160:	d00a      	beq.n	b178 <_impl_k_mutex_lock+0x2c>
    b162:	6880      	ldr	r0, [r0, #8]
    b164:	6899      	ldr	r1, [r3, #8]
    b166:	4288      	cmp	r0, r1
    b168:	d012      	beq.n	b190 <_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    b16a:	2d00      	cmp	r5, #0
    b16c:	d112      	bne.n	b194 <_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    b16e:	f000 fa83 	bl	b678 <k_sched_unlock>
		return -EBUSY;
    b172:	2010      	movs	r0, #16
	adjust_owner_prio(mutex, new_prio);
	irq_unlock(key);

	k_sched_unlock();

	return -EAGAIN;
    b174:	4240      	negs	r0, r0
    b176:	e00a      	b.n	b18e <_impl_k_mutex_lock+0x42>
					_current->base.prio :
    b178:	6899      	ldr	r1, [r3, #8]
    b17a:	7a89      	ldrb	r1, [r1, #10]
    b17c:	b249      	sxtb	r1, r1
		mutex->owner = _current;
    b17e:	689b      	ldr	r3, [r3, #8]
		mutex->lock_count++;
    b180:	3201      	adds	r2, #1
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    b182:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    b184:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    b186:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    b188:	f000 fa76 	bl	b678 <k_sched_unlock>
		return 0;
    b18c:	2000      	movs	r0, #0
}
    b18e:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    b190:	6921      	ldr	r1, [r4, #16]
    b192:	e7f4      	b.n	b17e <_impl_k_mutex_lock+0x32>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b194:	230a      	movs	r3, #10
    b196:	7a89      	ldrb	r1, [r1, #10]
    b198:	56c3      	ldrsb	r3, [r0, r3]
    b19a:	b249      	sxtb	r1, r1
    b19c:	4299      	cmp	r1, r3
    b19e:	dd00      	ble.n	b1a2 <_impl_k_mutex_lock+0x56>
    b1a0:	0019      	movs	r1, r3
    b1a2:	43cb      	mvns	r3, r1
    b1a4:	17db      	asrs	r3, r3, #31
    b1a6:	4019      	ands	r1, r3
    b1a8:	f3ef 8610 	mrs	r6, PRIMASK
    b1ac:	b672      	cpsid	i
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b1ae:	230a      	movs	r3, #10
    b1b0:	68a0      	ldr	r0, [r4, #8]
    b1b2:	56c3      	ldrsb	r3, [r0, r3]
    b1b4:	4299      	cmp	r1, r3
    b1b6:	da01      	bge.n	b1bc <_impl_k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
    b1b8:	f7ff ffb2 	bl	b120 <adjust_owner_prio.isra.7>
	_pend_current_thread(&mutex->wait_q, timeout);
    b1bc:	0020      	movs	r0, r4
    b1be:	0029      	movs	r1, r5
    b1c0:	f000 fa1e 	bl	b600 <_pend_current_thread>
	_update_time_slice_before_swap();
    b1c4:	f000 fafa 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    b1c8:	0030      	movs	r0, r6
    b1ca:	f7f6 ff39 	bl	2040 <__swap>
	if (got_mutex == 0) {
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d0da      	beq.n	b188 <_impl_k_mutex_lock+0x3c>
	return list->head == list;
    b1d2:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b1d4:	429c      	cmp	r4, r3
    b1d6:	d100      	bne.n	b1da <_impl_k_mutex_lock+0x8e>
    b1d8:	2300      	movs	r3, #0
	new_prio = mutex->owner_orig_prio;
    b1da:	6921      	ldr	r1, [r4, #16]
						     new_prio) : new_prio;
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d007      	beq.n	b1f0 <_impl_k_mutex_lock+0xa4>
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    b1e0:	7a9b      	ldrb	r3, [r3, #10]
    b1e2:	b25b      	sxtb	r3, r3
    b1e4:	4299      	cmp	r1, r3
    b1e6:	dd00      	ble.n	b1ea <_impl_k_mutex_lock+0x9e>
    b1e8:	0019      	movs	r1, r3
    b1ea:	43cb      	mvns	r3, r1
    b1ec:	17db      	asrs	r3, r3, #31
    b1ee:	4019      	ands	r1, r3
    b1f0:	f3ef 8510 	mrs	r5, PRIMASK
    b1f4:	b672      	cpsid	i
	adjust_owner_prio(mutex, new_prio);
    b1f6:	68a0      	ldr	r0, [r4, #8]
    b1f8:	f7ff ff92 	bl	b120 <adjust_owner_prio.isra.7>
	if (key) {
    b1fc:	2d00      	cmp	r5, #0
    b1fe:	d100      	bne.n	b202 <_impl_k_mutex_lock+0xb6>
	__asm__ volatile("cpsie i" : : : "memory");
    b200:	b662      	cpsie	i
	k_sched_unlock();
    b202:	f000 fa39 	bl	b678 <k_sched_unlock>
	return -EAGAIN;
    b206:	200b      	movs	r0, #11
    b208:	e7b4      	b.n	b174 <_impl_k_mutex_lock+0x28>
    b20a:	46c0      	nop			; (mov r8, r8)
    b20c:	20000bd4 	.word	0x20000bd4

0000b210 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b212:	4f35      	ldr	r7, [pc, #212]	; (b2e8 <_impl_k_mutex_unlock+0xd8>)
    b214:	0005      	movs	r5, r0
    b216:	68ba      	ldr	r2, [r7, #8]
    b218:	7ad3      	ldrb	r3, [r2, #11]
    b21a:	3b01      	subs	r3, #1
    b21c:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    b21e:	68c3      	ldr	r3, [r0, #12]
    b220:	1e5c      	subs	r4, r3, #1
    b222:	60c4      	str	r4, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    b224:	2c00      	cmp	r4, #0
    b226:	d002      	beq.n	b22e <_impl_k_mutex_unlock+0x1e>
		k_sched_unlock();
    b228:	f000 fa26 	bl	b678 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    b22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    b22e:	f3ef 8610 	mrs	r6, PRIMASK
    b232:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b234:	6901      	ldr	r1, [r0, #16]
    b236:	6880      	ldr	r0, [r0, #8]
    b238:	f7ff ff72 	bl	b120 <adjust_owner_prio.isra.7>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    b23c:	4b2b      	ldr	r3, [pc, #172]	; (b2ec <_impl_k_mutex_unlock+0xdc>)
    b23e:	681a      	ldr	r2, [r3, #0]
    b240:	682b      	ldr	r3, [r5, #0]
    b242:	2a00      	cmp	r2, #0
    b244:	d012      	beq.n	b26c <_impl_k_mutex_unlock+0x5c>
    b246:	429d      	cmp	r5, r3
    b248:	d100      	bne.n	b24c <_impl_k_mutex_unlock+0x3c>
    b24a:	0023      	movs	r3, r4
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    b24c:	2b00      	cmp	r3, #0
    b24e:	d105      	bne.n	b25c <_impl_k_mutex_unlock+0x4c>
	if (key) {
    b250:	2e00      	cmp	r6, #0
    b252:	d100      	bne.n	b256 <_impl_k_mutex_unlock+0x46>
	__asm__ volatile("cpsie i" : : : "memory");
    b254:	b662      	cpsie	i
		mutex->owner = NULL;
    b256:	2300      	movs	r3, #0
    b258:	60ab      	str	r3, [r5, #8]
    b25a:	e7e5      	b.n	b228 <_impl_k_mutex_unlock+0x18>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    b25c:	6a1a      	ldr	r2, [r3, #32]
    b25e:	3202      	adds	r2, #2
    b260:	d108      	bne.n	b274 <_impl_k_mutex_unlock+0x64>
	return (node == list->tail) ? NULL : node->next;
    b262:	686a      	ldr	r2, [r5, #4]
    b264:	4293      	cmp	r3, r2
    b266:	d0f3      	beq.n	b250 <_impl_k_mutex_unlock+0x40>
    b268:	681b      	ldr	r3, [r3, #0]
    b26a:	e7ef      	b.n	b24c <_impl_k_mutex_unlock+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b26c:	429d      	cmp	r5, r3
    b26e:	d0ef      	beq.n	b250 <_impl_k_mutex_unlock+0x40>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    b270:	2b00      	cmp	r3, #0
    b272:	d0ed      	beq.n	b250 <_impl_k_mutex_unlock+0x40>
			if (_is_thread_timeout_expired(thread)) {
    b274:	001c      	movs	r4, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    b276:	685b      	ldr	r3, [r3, #4]
    b278:	6822      	ldr	r2, [r4, #0]
	return _abort_timeout(&thread->base.timeout);
    b27a:	0021      	movs	r1, r4
    b27c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b27e:	6822      	ldr	r2, [r4, #0]
    b280:	3110      	adds	r1, #16
    b282:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b284:	2202      	movs	r2, #2
    b286:	7a63      	ldrb	r3, [r4, #9]
    b288:	4393      	bics	r3, r2
    b28a:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b28c:	6a23      	ldr	r3, [r4, #32]
    b28e:	1c5a      	adds	r2, r3, #1
    b290:	d00e      	beq.n	b2b0 <_impl_k_mutex_unlock+0xa0>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b292:	697a      	ldr	r2, [r7, #20]
    b294:	4291      	cmp	r1, r2
    b296:	d003      	beq.n	b2a0 <_impl_k_mutex_unlock+0x90>
	return (node == list->tail) ? NULL : node->next;
    b298:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b29a:	6911      	ldr	r1, [r2, #16]
    b29c:	18cb      	adds	r3, r1, r3
    b29e:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    b2a0:	6963      	ldr	r3, [r4, #20]
    b2a2:	6922      	ldr	r2, [r4, #16]
    b2a4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b2a6:	6922      	ldr	r2, [r4, #16]
    b2a8:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b2aa:	2301      	movs	r3, #1
    b2ac:	425b      	negs	r3, r3
    b2ae:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b2b0:	7a63      	ldrb	r3, [r4, #9]
    b2b2:	2204      	movs	r2, #4
    b2b4:	0019      	movs	r1, r3
    b2b6:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    b2b8:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b2ba:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b2bc:	4213      	tst	r3, r2
    b2be:	d102      	bne.n	b2c6 <_impl_k_mutex_unlock+0xb6>
    b2c0:	6a23      	ldr	r3, [r4, #32]
    b2c2:	3301      	adds	r3, #1
    b2c4:	d00c      	beq.n	b2e0 <_impl_k_mutex_unlock+0xd0>
	if (key) {
    b2c6:	2e00      	cmp	r6, #0
    b2c8:	d100      	bne.n	b2cc <_impl_k_mutex_unlock+0xbc>
	__asm__ volatile("cpsie i" : : : "memory");
    b2ca:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b2cc:	2300      	movs	r3, #0
    b2ce:	65e3      	str	r3, [r4, #92]	; 0x5c
		mutex->lock_count++;
    b2d0:	68eb      	ldr	r3, [r5, #12]
		mutex->owner = new_owner;
    b2d2:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    b2d4:	3301      	adds	r3, #1
    b2d6:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    b2d8:	230a      	movs	r3, #10
    b2da:	56e3      	ldrsb	r3, [r4, r3]
    b2dc:	612b      	str	r3, [r5, #16]
    b2de:	e7a3      	b.n	b228 <_impl_k_mutex_unlock+0x18>
		_add_thread_to_ready_q(thread);
    b2e0:	0020      	movs	r0, r4
    b2e2:	f000 f8a7 	bl	b434 <_add_thread_to_ready_q>
    b2e6:	e7ee      	b.n	b2c6 <_impl_k_mutex_unlock+0xb6>
    b2e8:	20000bd4 	.word	0x20000bd4
    b2ec:	20000dc8 	.word	0x20000dc8

0000b2f0 <k_queue_init>:
	list->head = NULL;
    b2f0:	2300      	movs	r3, #0
    b2f2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    b2f4:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    b2f6:	0003      	movs	r3, r0
    b2f8:	3308      	adds	r3, #8
	list->head = (sys_dnode_t *)list;
    b2fa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    b2fc:	60c3      	str	r3, [r0, #12]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    b2fe:	4770      	bx	lr

0000b300 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    b300:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    b302:	f3ef 8410 	mrs	r4, PRIMASK
    b306:	b672      	cpsid	i
	if (!prev) {
    b308:	2900      	cmp	r1, #0
    b30a:	d107      	bne.n	b31c <k_queue_insert+0x1c>
	node->next = list->head;
    b30c:	6803      	ldr	r3, [r0, #0]
    b30e:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    b310:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    b312:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    b314:	2b00      	cmp	r3, #0
    b316:	d10a      	bne.n	b32e <k_queue_insert+0x2e>
		list->tail = node;
    b318:	6042      	str	r2, [r0, #4]
    b31a:	e008      	b.n	b32e <k_queue_insert+0x2e>
	} else if (!prev->next) {
    b31c:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    b31e:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    b320:	2b00      	cmp	r3, #0
    b322:	d112      	bne.n	b34a <k_queue_insert+0x4a>
	if (!list->tail) {
    b324:	6843      	ldr	r3, [r0, #4]
    b326:	2b00      	cmp	r3, #0
    b328:	d10d      	bne.n	b346 <k_queue_insert+0x46>
		list->tail = node;
    b32a:	6042      	str	r2, [r0, #4]
		list->head = node;
    b32c:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    b32e:	3008      	adds	r0, #8
    b330:	2104      	movs	r1, #4
    b332:	f000 ffed 	bl	c310 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    b336:	2800      	cmp	r0, #0
    b338:	d009      	beq.n	b34e <k_queue_insert+0x4e>
	_update_time_slice_before_swap();
    b33a:	f000 fa3f 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    b33e:	0020      	movs	r0, r4
    b340:	f7f6 fe7e 	bl	2040 <__swap>
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    b344:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    b346:	601a      	str	r2, [r3, #0]
    b348:	e7e6      	b.n	b318 <k_queue_insert+0x18>
		prev->next = node;
    b34a:	600a      	str	r2, [r1, #0]
    b34c:	e7ef      	b.n	b32e <k_queue_insert+0x2e>
	if (key) {
    b34e:	2c00      	cmp	r4, #0
    b350:	d1f8      	bne.n	b344 <k_queue_insert+0x44>
	__asm__ volatile("cpsie i" : : : "memory");
    b352:	b662      	cpsie	i
    b354:	e7f6      	b.n	b344 <k_queue_insert+0x44>

0000b356 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
    b356:	b510      	push	{r4, lr}
    b358:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
    b35a:	6841      	ldr	r1, [r0, #4]
    b35c:	f7ff ffd0 	bl	b300 <k_queue_insert>
}
    b360:	bd10      	pop	{r4, pc}

0000b362 <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
    b362:	b510      	push	{r4, lr}
    b364:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
    b366:	2100      	movs	r1, #0
    b368:	f7ff ffca 	bl	b300 <k_queue_insert>
}
    b36c:	bd10      	pop	{r4, pc}

0000b36e <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    b36e:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    b370:	f3ef 8410 	mrs	r4, PRIMASK
    b374:	b672      	cpsid	i
	if (!list->tail) {
    b376:	6843      	ldr	r3, [r0, #4]
    b378:	2b00      	cmp	r3, #0
    b37a:	d10d      	bne.n	b398 <k_queue_append_list+0x2a>
		list->head = (sys_snode_t *)head;
    b37c:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    b37e:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    b380:	2104      	movs	r1, #4
    b382:	3008      	adds	r0, #8
    b384:	f000 ffc4 	bl	c310 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    b388:	2800      	cmp	r0, #0
    b38a:	d007      	beq.n	b39c <k_queue_append_list+0x2e>
	_update_time_slice_before_swap();
    b38c:	f000 fa16 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    b390:	0020      	movs	r0, r4
    b392:	f7f6 fe55 	bl	2040 <__swap>
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    b396:	bd10      	pop	{r4, pc}
		list->tail->next = (sys_snode_t *)head;
    b398:	6019      	str	r1, [r3, #0]
    b39a:	e7f0      	b.n	b37e <k_queue_append_list+0x10>
	if (key) {
    b39c:	2c00      	cmp	r4, #0
    b39e:	d1fa      	bne.n	b396 <k_queue_append_list+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    b3a0:	b662      	cpsie	i
    b3a2:	e7f8      	b.n	b396 <k_queue_append_list+0x28>

0000b3a4 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    b3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3a6:	0004      	movs	r4, r0
    b3a8:	b087      	sub	sp, #28
    b3aa:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    b3ac:	f3ef 8310 	mrs	r3, PRIMASK
    b3b0:	b672      	cpsid	i
    b3b2:	6800      	ldr	r0, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    b3b4:	2800      	cmp	r0, #0
    b3b6:	d00a      	beq.n	b3ce <k_queue_get+0x2a>
	list->head = node->next;
    b3b8:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    b3ba:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    b3bc:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    b3be:	4288      	cmp	r0, r1
    b3c0:	d100      	bne.n	b3c4 <k_queue_get+0x20>
		list->tail = list->head;
    b3c2:	6062      	str	r2, [r4, #4]
	if (key) {
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d100      	bne.n	b3ca <k_queue_get+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    b3c8:	b662      	cpsie	i
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    b3ca:	b007      	add	sp, #28
    b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (timeout == K_NO_WAIT) {
    b3ce:	2900      	cmp	r1, #0
    b3d0:	d101      	bne.n	b3d6 <k_queue_get+0x32>
		return NULL;
    b3d2:	0008      	movs	r0, r1
    b3d4:	e7f6      	b.n	b3c4 <k_queue_get+0x20>
	if (key) {
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d100      	bne.n	b3dc <k_queue_get+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    b3da:	b662      	cpsie	i
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    b3dc:	ae01      	add	r6, sp, #4
    b3de:	0023      	movs	r3, r4
    b3e0:	2200      	movs	r2, #0
    b3e2:	2104      	movs	r1, #4
    b3e4:	0030      	movs	r0, r6
    b3e6:	f000 fee5 	bl	c1b4 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    b3ea:	270f      	movs	r7, #15
    b3ec:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    b3ee:	002a      	movs	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    b3f0:	403b      	ands	r3, r7
		err = k_poll(&event, 1, timeout);
    b3f2:	2101      	movs	r1, #1
    b3f4:	0030      	movs	r0, r6
		event.state = K_POLL_STATE_NOT_READY;
    b3f6:	7373      	strb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    b3f8:	f000 fef4 	bl	c1e4 <k_poll>
		if (err) {
    b3fc:	2800      	cmp	r0, #0
    b3fe:	d001      	beq.n	b404 <k_queue_get+0x60>
			return NULL;
    b400:	2000      	movs	r0, #0
    b402:	e7e2      	b.n	b3ca <k_queue_get+0x26>
	__asm__ volatile("mrs %0, PRIMASK;"
    b404:	f3ef 8310 	mrs	r3, PRIMASK
    b408:	b672      	cpsid	i
    b40a:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    b40c:	2800      	cmp	r0, #0
    b40e:	d008      	beq.n	b422 <k_queue_get+0x7e>
	list->head = node->next;
    b410:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    b412:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    b414:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    b416:	4288      	cmp	r0, r1
    b418:	d100      	bne.n	b41c <k_queue_get+0x78>
		list->tail = list->head;
    b41a:	6062      	str	r2, [r4, #4]
	if (key) {
    b41c:	2b00      	cmp	r3, #0
    b41e:	d002      	beq.n	b426 <k_queue_get+0x82>
    b420:	e7d3      	b.n	b3ca <k_queue_get+0x26>
    b422:	2b00      	cmp	r3, #0
    b424:	d102      	bne.n	b42c <k_queue_get+0x88>
	__asm__ volatile("cpsie i" : : : "memory");
    b426:	b662      	cpsie	i
	} while (!val && timeout == K_FOREVER);
    b428:	2800      	cmp	r0, #0
    b42a:	d1ce      	bne.n	b3ca <k_queue_get+0x26>
    b42c:	1c6b      	adds	r3, r5, #1
    b42e:	d0dd      	beq.n	b3ec <k_queue_get+0x48>
    b430:	e7e6      	b.n	b400 <k_queue_get+0x5c>
	...

0000b434 <_add_thread_to_ready_q>:
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b434:	230a      	movs	r3, #10
{
    b436:	b530      	push	{r4, r5, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b438:	56c3      	ldrsb	r3, [r0, r3]
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b43a:	251f      	movs	r5, #31
	return prio + _NUM_COOP_PRIO;
    b43c:	001c      	movs	r4, r3
    b43e:	3410      	adds	r4, #16
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b440:	4025      	ands	r5, r4
	return (prio + _NUM_COOP_PRIO) >> 5;
    b442:	1162      	asrs	r2, r4, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b444:	2401      	movs	r4, #1
    b446:	40ac      	lsls	r4, r5
	*bmap |= _get_ready_q_prio_bit(prio);
    b448:	490d      	ldr	r1, [pc, #52]	; (b480 <_add_thread_to_ready_q+0x4c>)
    b44a:	3206      	adds	r2, #6
    b44c:	0092      	lsls	r2, r2, #2
    b44e:	188a      	adds	r2, r1, r2
    b450:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b452:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    b454:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    b456:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    b458:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b45a:	1d1a      	adds	r2, r3, #4
    b45c:	188a      	adds	r2, r1, r2
	node->next = list;
    b45e:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    b460:	18cb      	adds	r3, r1, r3
    b462:	689a      	ldr	r2, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    b464:	240a      	movs	r4, #10
    b466:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    b468:	689a      	ldr	r2, [r3, #8]
    b46a:	6010      	str	r0, [r2, #0]
    b46c:	220a      	movs	r2, #10
	list->tail = node;
    b46e:	6098      	str	r0, [r3, #8]
    b470:	69cb      	ldr	r3, [r1, #28]
    b472:	5704      	ldrsb	r4, [r0, r4]
    b474:	569a      	ldrsb	r2, [r3, r2]
    b476:	4294      	cmp	r4, r2
    b478:	db00      	blt.n	b47c <_add_thread_to_ready_q+0x48>
    b47a:	0018      	movs	r0, r3
    b47c:	61c8      	str	r0, [r1, #28]
	_ready_q.prio_bmap[0] = 1;
# ifndef CONFIG_SMP
	_ready_q.cache = thread;
# endif
#endif
}
    b47e:	bd30      	pop	{r4, r5, pc}
    b480:	20000bd4 	.word	0x20000bd4

0000b484 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b484:	7a43      	ldrb	r3, [r0, #9]
    b486:	2204      	movs	r2, #4
    b488:	0019      	movs	r1, r3
    b48a:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    b48c:	221b      	movs	r2, #27
{
    b48e:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b490:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b492:	4213      	tst	r3, r2
    b494:	d104      	bne.n	b4a0 <_ready_thread+0x1c>
    b496:	6a03      	ldr	r3, [r0, #32]
    b498:	3301      	adds	r3, #1
    b49a:	d101      	bne.n	b4a0 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    b49c:	f7ff ffca 	bl	b434 <_add_thread_to_ready_q>
}
    b4a0:	bd10      	pop	{r4, pc}
	...

0000b4a4 <_add_timeout>:
{
    b4a4:	b510      	push	{r4, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    b4a6:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    b4a8:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    b4aa:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d123      	bne.n	b4f8 <_add_timeout+0x54>
	__asm__ volatile("mrs %0, PRIMASK;"
    b4b0:	f3ef 8410 	mrs	r4, PRIMASK
    b4b4:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    b4b6:	2201      	movs	r2, #1
    b4b8:	4252      	negs	r2, r2
    b4ba:	610a      	str	r2, [r1, #16]
	if (thread) {
    b4bc:	2800      	cmp	r0, #0
    b4be:	d012      	beq.n	b4e6 <_add_timeout+0x42>
	if (timeout_obj->wait_q) {
    b4c0:	68ca      	ldr	r2, [r1, #12]
    b4c2:	2a00      	cmp	r2, #0
    b4c4:	d009      	beq.n	b4da <_add_timeout+0x36>
	node->prev->next = node->next;
    b4c6:	6842      	ldr	r2, [r0, #4]
    b4c8:	6801      	ldr	r1, [r0, #0]
    b4ca:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    b4cc:	6801      	ldr	r1, [r0, #0]
    b4ce:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b4d0:	2102      	movs	r1, #2
    b4d2:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    b4d4:	61c3      	str	r3, [r0, #28]
    b4d6:	438a      	bics	r2, r1
    b4d8:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    b4da:	f7ff ffd3 	bl	b484 <_ready_thread>
	if (key) {
    b4de:	2c00      	cmp	r4, #0
    b4e0:	d100      	bne.n	b4e4 <_add_timeout+0x40>
	__asm__ volatile("cpsie i" : : : "memory");
    b4e2:	b662      	cpsie	i
}
    b4e4:	bd10      	pop	{r4, pc}
	if (key) {
    b4e6:	2c00      	cmp	r4, #0
    b4e8:	d100      	bne.n	b4ec <_add_timeout+0x48>
	__asm__ volatile("cpsie i" : : : "memory");
    b4ea:	b662      	cpsie	i
		if (timeout->func) {
    b4ec:	694b      	ldr	r3, [r1, #20]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d0f8      	beq.n	b4e4 <_add_timeout+0x40>
			timeout->func(timeout);
    b4f2:	0008      	movs	r0, r1
    b4f4:	4798      	blx	r3
    b4f6:	e7f5      	b.n	b4e4 <_add_timeout+0x40>
	return list->head == list;
    b4f8:	4a11      	ldr	r2, [pc, #68]	; (b540 <_add_timeout+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4fa:	0010      	movs	r0, r2
	return list->head == list;
    b4fc:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4fe:	3010      	adds	r0, #16
    b500:	4283      	cmp	r3, r0
    b502:	d10e      	bne.n	b522 <_add_timeout+0x7e>
	node->next = list;
    b504:	0013      	movs	r3, r2
    b506:	3310      	adds	r3, #16
    b508:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
    b50a:	6953      	ldr	r3, [r2, #20]
    b50c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    b50e:	6953      	ldr	r3, [r2, #20]
    b510:	6019      	str	r1, [r3, #0]
	list->tail = node;
    b512:	6151      	str	r1, [r2, #20]
    b514:	e7e6      	b.n	b4e4 <_add_timeout+0x40>
		*delta -= in_q->delta_ticks_from_prev;
    b516:	1b00      	subs	r0, r0, r4
    b518:	6108      	str	r0, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    b51a:	6950      	ldr	r0, [r2, #20]
    b51c:	4283      	cmp	r3, r0
    b51e:	d0f1      	beq.n	b504 <_add_timeout+0x60>
    b520:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b522:	2b00      	cmp	r3, #0
    b524:	d0ee      	beq.n	b504 <_add_timeout+0x60>
		if (*delta <= in_q->delta_ticks_from_prev) {
    b526:	6908      	ldr	r0, [r1, #16]
    b528:	691c      	ldr	r4, [r3, #16]
    b52a:	42a0      	cmp	r0, r4
    b52c:	dcf3      	bgt.n	b516 <_add_timeout+0x72>
		node->prev = insert_point->prev;
    b52e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b530:	1a20      	subs	r0, r4, r0
    b532:	6118      	str	r0, [r3, #16]
    b534:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    b536:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    b538:	685a      	ldr	r2, [r3, #4]
    b53a:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    b53c:	6059      	str	r1, [r3, #4]
    b53e:	e7d1      	b.n	b4e4 <_add_timeout+0x40>
    b540:	20000bd4 	.word	0x20000bd4

0000b544 <_remove_thread_from_ready_q>:
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b544:	230a      	movs	r3, #10
{
    b546:	b510      	push	{r4, lr}
	node->prev->next = node->next;
    b548:	6842      	ldr	r2, [r0, #4]
    b54a:	6801      	ldr	r1, [r0, #0]
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b54c:	56c3      	ldrsb	r3, [r0, r3]
    b54e:	6011      	str	r1, [r2, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b550:	4c12      	ldr	r4, [pc, #72]	; (b59c <_remove_thread_from_ready_q+0x58>)
	node->next->prev = node->prev;
    b552:	6801      	ldr	r1, [r0, #0]
    b554:	3314      	adds	r3, #20
    b556:	00db      	lsls	r3, r3, #3
    b558:	604a      	str	r2, [r1, #4]
    b55a:	1d1a      	adds	r2, r3, #4
	return list->head == list;
    b55c:	18e3      	adds	r3, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    b55e:	685b      	ldr	r3, [r3, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b560:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_empty(q)) {
    b562:	4293      	cmp	r3, r2
    b564:	d10d      	bne.n	b582 <_remove_thread_from_ready_q+0x3e>
		_clear_ready_q_prio_bit(thread->base.prio);
    b566:	220a      	movs	r2, #10
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b568:	211f      	movs	r1, #31
    b56a:	5682      	ldrsb	r2, [r0, r2]
	return (prio + _NUM_COOP_PRIO) >> 5;
    b56c:	3210      	adds	r2, #16
    b56e:	1153      	asrs	r3, r2, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b570:	400a      	ands	r2, r1
    b572:	391e      	subs	r1, #30
    b574:	4091      	lsls	r1, r2
	*bmap &= ~_get_ready_q_prio_bit(prio);
    b576:	3306      	adds	r3, #6
    b578:	009b      	lsls	r3, r3, #2
    b57a:	18e3      	adds	r3, r4, r3
    b57c:	689a      	ldr	r2, [r3, #8]
    b57e:	438a      	bics	r2, r1
    b580:	609a      	str	r2, [r3, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    b582:	69e3      	ldr	r3, [r4, #28]
    b584:	4298      	cmp	r0, r3
    b586:	d106      	bne.n	b596 <_remove_thread_from_ready_q+0x52>
	return __builtin_ffs(op);
    b588:	6a20      	ldr	r0, [r4, #32]
    b58a:	f7f4 ff2f 	bl	3ec <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    b58e:	3003      	adds	r0, #3
    b590:	00c0      	lsls	r0, r0, #3
    b592:	1820      	adds	r0, r4, r0
    b594:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    b596:	61e3      	str	r3, [r4, #28]
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
# endif
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    b598:	bd10      	pop	{r4, pc}
    b59a:	46c0      	nop			; (mov r8, r8)
    b59c:	20000bd4 	.word	0x20000bd4

0000b5a0 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    b5a0:	b570      	push	{r4, r5, r6, lr}
    b5a2:	680c      	ldr	r4, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b5a4:	42a1      	cmp	r1, r4
    b5a6:	d100      	bne.n	b5aa <_pend_thread+0xa>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    b5a8:	2400      	movs	r4, #0
    b5aa:	2c00      	cmp	r4, #0
    b5ac:	d021      	beq.n	b5f2 <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    b5ae:	250a      	movs	r5, #10
    b5b0:	230a      	movs	r3, #10
    b5b2:	5745      	ldrsb	r5, [r0, r5]
    b5b4:	56e3      	ldrsb	r3, [r4, r3]
    b5b6:	429d      	cmp	r5, r3
    b5b8:	da15      	bge.n	b5e6 <_pend_thread+0x46>
		node->prev = insert_point->prev;
    b5ba:	6863      	ldr	r3, [r4, #4]
		node->next = insert_point;
    b5bc:	6004      	str	r4, [r0, #0]
		node->prev = insert_point->prev;
    b5be:	6043      	str	r3, [r0, #4]
		insert_point->prev->next = node;
    b5c0:	6863      	ldr	r3, [r4, #4]
    b5c2:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    b5c4:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    b5c6:	2302      	movs	r3, #2
    b5c8:	7a44      	ldrb	r4, [r0, #9]
    b5ca:	4323      	orrs	r3, r4
    b5cc:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    b5ce:	1c53      	adds	r3, r2, #1
    b5d0:	d008      	beq.n	b5e4 <_pend_thread+0x44>
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    b5d2:	0004      	movs	r4, r0
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    b5d4:	1cd3      	adds	r3, r2, #3
    b5d6:	089b      	lsrs	r3, r3, #2
    b5d8:	3410      	adds	r4, #16
    b5da:	000a      	movs	r2, r1
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
    b5dc:	3301      	adds	r3, #1
    b5de:	0021      	movs	r1, r4
    b5e0:	f7ff ff60 	bl	b4a4 <_add_timeout>

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    b5e4:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    b5e6:	684b      	ldr	r3, [r1, #4]
    b5e8:	429c      	cmp	r4, r3
    b5ea:	d002      	beq.n	b5f2 <_pend_thread+0x52>
    b5ec:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    b5ee:	2c00      	cmp	r4, #0
    b5f0:	d1db      	bne.n	b5aa <_pend_thread+0xa>
	node->next = list;
    b5f2:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    b5f4:	684b      	ldr	r3, [r1, #4]
    b5f6:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    b5f8:	684b      	ldr	r3, [r1, #4]
    b5fa:	6018      	str	r0, [r3, #0]
	list->tail = node;
    b5fc:	6048      	str	r0, [r1, #4]
    b5fe:	e7e2      	b.n	b5c6 <_pend_thread+0x26>

0000b600 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    b600:	b570      	push	{r4, r5, r6, lr}
    b602:	000e      	movs	r6, r1
    b604:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
    b606:	4c05      	ldr	r4, [pc, #20]	; (b61c <_pend_current_thread+0x1c>)
    b608:	68a0      	ldr	r0, [r4, #8]
    b60a:	f7ff ff9b 	bl	b544 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    b60e:	0032      	movs	r2, r6
    b610:	0029      	movs	r1, r5
    b612:	68a0      	ldr	r0, [r4, #8]
    b614:	f7ff ffc4 	bl	b5a0 <_pend_thread>
}
    b618:	bd70      	pop	{r4, r5, r6, pc}
    b61a:	46c0      	nop			; (mov r8, r8)
    b61c:	20000bd4 	.word	0x20000bd4

0000b620 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    b620:	b510      	push	{r4, lr}
	ready_range = _ready_q.prio_bmap[0];
    b622:	4c07      	ldr	r4, [pc, #28]	; (b640 <__must_switch_threads+0x20>)
    b624:	6a20      	ldr	r0, [r4, #32]
    b626:	f7f4 fee1 	bl	3ec <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    b62a:	220a      	movs	r2, #10
    b62c:	68a3      	ldr	r3, [r4, #8]
    b62e:	569a      	ldrsb	r2, [r3, r2]
	return abs_prio - _NUM_COOP_PRIO;
    b630:	0003      	movs	r3, r0
    b632:	3b11      	subs	r3, #17
	return prio1 < prio2;
    b634:	2001      	movs	r0, #1
    b636:	429a      	cmp	r2, r3
    b638:	dc00      	bgt.n	b63c <__must_switch_threads+0x1c>
    b63a:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    b63c:	bd10      	pop	{r4, pc}
    b63e:	46c0      	nop			; (mov r8, r8)
    b640:	20000bd4 	.word	0x20000bd4

0000b644 <_reschedule_threads>:
{
    b644:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    b646:	4b0a      	ldr	r3, [pc, #40]	; (b670 <_reschedule_threads+0x2c>)
    b648:	0004      	movs	r4, r0
    b64a:	689b      	ldr	r3, [r3, #8]
    b64c:	895b      	ldrh	r3, [r3, #10]
    b64e:	2b7f      	cmp	r3, #127	; 0x7f
    b650:	d80a      	bhi.n	b668 <_reschedule_threads+0x24>
    b652:	f7ff ffe5 	bl	b620 <__must_switch_threads>
    b656:	2800      	cmp	r0, #0
    b658:	d006      	beq.n	b668 <_reschedule_threads+0x24>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    b65a:	2200      	movs	r2, #0
    b65c:	4b05      	ldr	r3, [pc, #20]	; (b674 <_reschedule_threads+0x30>)
    b65e:	0020      	movs	r0, r4
    b660:	601a      	str	r2, [r3, #0]
    b662:	f7f6 fced 	bl	2040 <__swap>
    b666:	e002      	b.n	b66e <_reschedule_threads+0x2a>
	if (key) {
    b668:	2c00      	cmp	r4, #0
    b66a:	d100      	bne.n	b66e <_reschedule_threads+0x2a>
	__asm__ volatile("cpsie i" : : : "memory");
    b66c:	b662      	cpsie	i
}
    b66e:	bd10      	pop	{r4, pc}
    b670:	20000bd4 	.word	0x20000bd4
    b674:	20000dcc 	.word	0x20000dcc

0000b678 <k_sched_unlock>:
{
    b678:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    b67a:	f3ef 8010 	mrs	r0, PRIMASK
    b67e:	b672      	cpsid	i
	++_current->base.sched_locked;
    b680:	4b03      	ldr	r3, [pc, #12]	; (b690 <k_sched_unlock+0x18>)
    b682:	689a      	ldr	r2, [r3, #8]
    b684:	7ad3      	ldrb	r3, [r2, #11]
    b686:	3301      	adds	r3, #1
    b688:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    b68a:	f7ff ffdb 	bl	b644 <_reschedule_threads>
}
    b68e:	bd10      	pop	{r4, pc}
    b690:	20000bd4 	.word	0x20000bd4

0000b694 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b694:	230a      	movs	r3, #10
{
    b696:	b570      	push	{r4, r5, r6, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b698:	56c3      	ldrsb	r3, [r0, r3]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b69a:	4c10      	ldr	r4, [pc, #64]	; (b6dc <_move_thread_to_end_of_prio_q+0x48>)
    b69c:	3314      	adds	r3, #20
    b69e:	00db      	lsls	r3, r3, #3
    b6a0:	1d1a      	adds	r2, r3, #4
    b6a2:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    b6a4:	6851      	ldr	r1, [r2, #4]
    b6a6:	4288      	cmp	r0, r1
    b6a8:	d016      	beq.n	b6d8 <_move_thread_to_end_of_prio_q+0x44>
	node->prev->next = node->next;
    b6aa:	6805      	ldr	r5, [r0, #0]
    b6ac:	6841      	ldr	r1, [r0, #4]
	node->prev = list->tail;
    b6ae:	18e3      	adds	r3, r4, r3
	node->prev->next = node->next;
    b6b0:	600d      	str	r5, [r1, #0]
	node->next->prev = node->prev;
    b6b2:	6805      	ldr	r5, [r0, #0]
    b6b4:	6069      	str	r1, [r5, #4]
	node->next = list;
    b6b6:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    b6b8:	689a      	ldr	r2, [r3, #8]
    b6ba:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    b6bc:	689a      	ldr	r2, [r3, #8]
    b6be:	6010      	str	r0, [r2, #0]
	list->tail = node;
    b6c0:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    b6c2:	69e3      	ldr	r3, [r4, #28]
    b6c4:	4298      	cmp	r0, r3
    b6c6:	d106      	bne.n	b6d6 <_move_thread_to_end_of_prio_q+0x42>
	return __builtin_ffs(op);
    b6c8:	6a20      	ldr	r0, [r4, #32]
    b6ca:	f7f4 fe8f 	bl	3ec <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    b6ce:	3003      	adds	r0, #3
    b6d0:	00c0      	lsls	r0, r0, #3
    b6d2:	1820      	adds	r0, r4, r0
    b6d4:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    b6d6:	61e3      	str	r3, [r4, #28]
}
    b6d8:	bd70      	pop	{r4, r5, r6, pc}
    b6da:	46c0      	nop			; (mov r8, r8)
    b6dc:	20000bd4 	.word	0x20000bd4

0000b6e0 <_impl_k_yield>:
{
    b6e0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    b6e2:	f3ef 8510 	mrs	r5, PRIMASK
    b6e6:	b672      	cpsid	i
	_move_thread_to_end_of_prio_q(_current);
    b6e8:	4c09      	ldr	r4, [pc, #36]	; (b710 <_impl_k_yield+0x30>)
    b6ea:	68a0      	ldr	r0, [r4, #8]
    b6ec:	f7ff ffd2 	bl	b694 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    b6f0:	68a2      	ldr	r2, [r4, #8]
    b6f2:	69e3      	ldr	r3, [r4, #28]
    b6f4:	429a      	cmp	r2, r3
    b6f6:	d103      	bne.n	b700 <_impl_k_yield+0x20>
	if (key) {
    b6f8:	2d00      	cmp	r5, #0
    b6fa:	d100      	bne.n	b6fe <_impl_k_yield+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
    b6fc:	b662      	cpsie	i
}
    b6fe:	bd70      	pop	{r4, r5, r6, pc}
	_time_slice_elapsed = 0;
    b700:	2200      	movs	r2, #0
    b702:	4b04      	ldr	r3, [pc, #16]	; (b714 <_impl_k_yield+0x34>)
    b704:	0028      	movs	r0, r5
    b706:	601a      	str	r2, [r3, #0]
    b708:	f7f6 fc9a 	bl	2040 <__swap>
}
    b70c:	e7f7      	b.n	b6fe <_impl_k_yield+0x1e>
    b70e:	46c0      	nop			; (mov r8, r8)
    b710:	20000bd4 	.word	0x20000bd4
    b714:	20000dcc 	.word	0x20000dcc

0000b718 <_impl_k_sleep>:
{
    b718:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
    b71a:	2800      	cmp	r0, #0
    b71c:	d102      	bne.n	b724 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b71e:	f7ff ffdf 	bl	b6e0 <_impl_k_yield>
}
    b722:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    b724:	3003      	adds	r0, #3
    b726:	0880      	lsrs	r0, r0, #2
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    b728:	3001      	adds	r0, #1
    b72a:	9001      	str	r0, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    b72c:	f3ef 8510 	mrs	r5, PRIMASK
    b730:	b672      	cpsid	i
	_remove_thread_from_ready_q(_current);
    b732:	4c09      	ldr	r4, [pc, #36]	; (b758 <_impl_k_sleep+0x40>)
    b734:	68a0      	ldr	r0, [r4, #8]
    b736:	f7ff ff05 	bl	b544 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    b73a:	68a0      	ldr	r0, [r4, #8]
    b73c:	9b01      	ldr	r3, [sp, #4]
    b73e:	0001      	movs	r1, r0
    b740:	2200      	movs	r2, #0
    b742:	3110      	adds	r1, #16
    b744:	f7ff feae 	bl	b4a4 <_add_timeout>
	_time_slice_elapsed = 0;
    b748:	2200      	movs	r2, #0
    b74a:	4b04      	ldr	r3, [pc, #16]	; (b75c <_impl_k_sleep+0x44>)
    b74c:	0028      	movs	r0, r5
    b74e:	601a      	str	r2, [r3, #0]
    b750:	f7f6 fc76 	bl	2040 <__swap>
    b754:	e7e5      	b.n	b722 <_impl_k_sleep+0xa>
    b756:	46c0      	nop			; (mov r8, r8)
    b758:	20000bd4 	.word	0x20000bd4
    b75c:	20000dcc 	.word	0x20000dcc

0000b760 <_impl_k_current_get>:
	return _current;
    b760:	4b01      	ldr	r3, [pc, #4]	; (b768 <_impl_k_current_get+0x8>)
    b762:	6898      	ldr	r0, [r3, #8]
}
    b764:	4770      	bx	lr
    b766:	46c0      	nop			; (mov r8, r8)
    b768:	20000bd4 	.word	0x20000bd4

0000b76c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    b76c:	4b0f      	ldr	r3, [pc, #60]	; (b7ac <_is_thread_time_slicing+0x40>)
{
    b76e:	b082      	sub	sp, #8
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    b770:	681a      	ldr	r2, [r3, #0]
		return 0;
    b772:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    b774:	429a      	cmp	r2, r3
    b776:	dd16      	ble.n	b7a6 <_is_thread_time_slicing+0x3a>
	return thread == _idle_thread;
    b778:	4b0d      	ldr	r3, [pc, #52]	; (b7b0 <_is_thread_time_slicing+0x44>)
    b77a:	681b      	ldr	r3, [r3, #0]
    b77c:	9301      	str	r3, [sp, #4]
    b77e:	9a01      	ldr	r2, [sp, #4]
		return 0;
    b780:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    b782:	4290      	cmp	r0, r2
    b784:	d00f      	beq.n	b7a6 <_is_thread_time_slicing+0x3a>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    b786:	220a      	movs	r2, #10
    b788:	4b0a      	ldr	r3, [pc, #40]	; (b7b4 <_is_thread_time_slicing+0x48>)
    b78a:	5682      	ldrsb	r2, [r0, r2]
    b78c:	6819      	ldr	r1, [r3, #0]
		return 0;
    b78e:	2300      	movs	r3, #0
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    b790:	428a      	cmp	r2, r1
    b792:	db08      	blt.n	b7a6 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
    b794:	4b08      	ldr	r3, [pc, #32]	; (b7b8 <_is_thread_time_slicing+0x4c>)
    b796:	3214      	adds	r2, #20
    b798:	00d2      	lsls	r2, r2, #3
    b79a:	189a      	adds	r2, r3, r2
    b79c:	6890      	ldr	r0, [r2, #8]
    b79e:	6853      	ldr	r3, [r2, #4]
    b7a0:	1a1b      	subs	r3, r3, r0
    b7a2:	1e58      	subs	r0, r3, #1
    b7a4:	4183      	sbcs	r3, r0
}
    b7a6:	0018      	movs	r0, r3
    b7a8:	b002      	add	sp, #8
    b7aa:	4770      	bx	lr
    b7ac:	20000cf8 	.word	0x20000cf8
    b7b0:	0000cab4 	.word	0x0000cab4
    b7b4:	20000cfc 	.word	0x20000cfc
    b7b8:	20000bd4 	.word	0x20000bd4

0000b7bc <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    b7bc:	2200      	movs	r2, #0
    b7be:	4b01      	ldr	r3, [pc, #4]	; (b7c4 <_update_time_slice_before_swap+0x8>)
    b7c0:	601a      	str	r2, [r3, #0]
}
    b7c2:	4770      	bx	lr
    b7c4:	20000dcc 	.word	0x20000dcc

0000b7c8 <_unpend_first_thread>:
	if (_handling_timeouts) {
    b7c8:	4b11      	ldr	r3, [pc, #68]	; (b810 <_unpend_first_thread+0x48>)
    b7ca:	6802      	ldr	r2, [r0, #0]
    b7cc:	681b      	ldr	r3, [r3, #0]
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	d010      	beq.n	b7f4 <_unpend_first_thread+0x2c>
	return list->head == list;
    b7d2:	0013      	movs	r3, r2
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b7d4:	4290      	cmp	r0, r2
    b7d6:	d100      	bne.n	b7da <_unpend_first_thread+0x12>
    b7d8:	2300      	movs	r3, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    b7da:	2b00      	cmp	r3, #0
    b7dc:	d102      	bne.n	b7e4 <_unpend_first_thread+0x1c>
    b7de:	2300      	movs	r3, #0
		_unpend_thread(thread);
	}

	return thread;
}
    b7e0:	0018      	movs	r0, r3
    b7e2:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    b7e4:	6a1a      	ldr	r2, [r3, #32]
    b7e6:	3202      	adds	r2, #2
    b7e8:	d108      	bne.n	b7fc <_unpend_first_thread+0x34>
	return (node == list->tail) ? NULL : node->next;
    b7ea:	6842      	ldr	r2, [r0, #4]
    b7ec:	4293      	cmp	r3, r2
    b7ee:	d0f6      	beq.n	b7de <_unpend_first_thread+0x16>
    b7f0:	681b      	ldr	r3, [r3, #0]
    b7f2:	e7f2      	b.n	b7da <_unpend_first_thread+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b7f4:	4290      	cmp	r0, r2
    b7f6:	d0f3      	beq.n	b7e0 <_unpend_first_thread+0x18>
    b7f8:	1e13      	subs	r3, r2, #0
	if (thread) {
    b7fa:	d0f1      	beq.n	b7e0 <_unpend_first_thread+0x18>
	node->prev->next = node->next;
    b7fc:	685a      	ldr	r2, [r3, #4]
    b7fe:	6819      	ldr	r1, [r3, #0]
    b800:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    b802:	6819      	ldr	r1, [r3, #0]
    b804:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b806:	2102      	movs	r1, #2
    b808:	7a5a      	ldrb	r2, [r3, #9]
    b80a:	438a      	bics	r2, r1
    b80c:	725a      	strb	r2, [r3, #9]
    b80e:	e7e7      	b.n	b7e0 <_unpend_first_thread+0x18>
    b810:	20000dc8 	.word	0x20000dc8

0000b814 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    b814:	0003      	movs	r3, r0
    b816:	3310      	adds	r3, #16
	sem->count = initial_count;
    b818:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    b81a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    b81c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    b81e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    b820:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    b822:	6143      	str	r3, [r0, #20]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    b824:	4770      	bx	lr
	...

0000b828 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    b828:	b570      	push	{r4, r5, r6, lr}
    b82a:	0005      	movs	r5, r0
    b82c:	f3ef 8610 	mrs	r6, PRIMASK
    b830:	b672      	cpsid	i
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    b832:	f7ff ffc9 	bl	b7c8 <_unpend_first_thread>
    b836:	1e04      	subs	r4, r0, #0
	if (!thread) {
    b838:	d113      	bne.n	b862 <_impl_k_sem_give+0x3a>
	sem->count += (sem->count != sem->limit);
    b83a:	68aa      	ldr	r2, [r5, #8]
    b83c:	68eb      	ldr	r3, [r5, #12]
	return _handle_obj_poll_events(&sem->poll_events, state);
    b83e:	0028      	movs	r0, r5
	sem->count += (sem->count != sem->limit);
    b840:	1a9b      	subs	r3, r3, r2
    b842:	1e59      	subs	r1, r3, #1
    b844:	418b      	sbcs	r3, r1
    b846:	189b      	adds	r3, r3, r2
    b848:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    b84a:	3010      	adds	r0, #16
    b84c:	2102      	movs	r1, #2
    b84e:	f000 fd5f 	bl	c310 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    b852:	2800      	cmp	r0, #0
    b854:	d02d      	beq.n	b8b2 <_impl_k_sem_give+0x8a>
	_update_time_slice_before_swap();
    b856:	f7ff ffb1 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    b85a:	0030      	movs	r0, r6
    b85c:	f7f6 fbf0 	bl	2040 <__swap>
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    b860:	bd70      	pop	{r4, r5, r6, pc}
	return _abort_timeout(&thread->base.timeout);
    b862:	0001      	movs	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b864:	6a03      	ldr	r3, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    b866:	3110      	adds	r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b868:	1c5a      	adds	r2, r3, #1
    b86a:	d00f      	beq.n	b88c <_impl_k_sem_give+0x64>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b86c:	4a1a      	ldr	r2, [pc, #104]	; (b8d8 <_impl_k_sem_give+0xb0>)
    b86e:	6952      	ldr	r2, [r2, #20]
    b870:	4291      	cmp	r1, r2
    b872:	d003      	beq.n	b87c <_impl_k_sem_give+0x54>
	return (node == list->tail) ? NULL : node->next;
    b874:	6902      	ldr	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b876:	6911      	ldr	r1, [r2, #16]
    b878:	18cb      	adds	r3, r1, r3
    b87a:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    b87c:	6963      	ldr	r3, [r4, #20]
    b87e:	6922      	ldr	r2, [r4, #16]
    b880:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b882:	6922      	ldr	r2, [r4, #16]
    b884:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b886:	2301      	movs	r3, #1
    b888:	425b      	negs	r3, r3
    b88a:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b88c:	7a63      	ldrb	r3, [r4, #9]
    b88e:	2204      	movs	r2, #4
    b890:	0019      	movs	r1, r3
    b892:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    b894:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b896:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b898:	4213      	tst	r3, r2
    b89a:	d102      	bne.n	b8a2 <_impl_k_sem_give+0x7a>
    b89c:	6a23      	ldr	r3, [r4, #32]
    b89e:	3301      	adds	r3, #1
    b8a0:	d00b      	beq.n	b8ba <_impl_k_sem_give+0x92>
    b8a2:	2300      	movs	r3, #0
    b8a4:	65e3      	str	r3, [r4, #92]	; 0x5c
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    b8a6:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
    b8aa:	2b0d      	cmp	r3, #13
    b8ac:	d801      	bhi.n	b8b2 <_impl_k_sem_give+0x8a>
    b8ae:	2b03      	cmp	r3, #3
    b8b0:	d107      	bne.n	b8c2 <_impl_k_sem_give+0x9a>
	if (key) {
    b8b2:	2e00      	cmp	r6, #0
    b8b4:	d1d4      	bne.n	b860 <_impl_k_sem_give+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    b8b6:	b662      	cpsie	i
    b8b8:	e7d2      	b.n	b860 <_impl_k_sem_give+0x38>
		_add_thread_to_ready_q(thread);
    b8ba:	0020      	movs	r0, r4
    b8bc:	f7ff fdba 	bl	b434 <_add_thread_to_ready_q>
    b8c0:	e7ef      	b.n	b8a2 <_impl_k_sem_give+0x7a>
	return _is_preempt(_current) && __must_switch_threads();
    b8c2:	4b05      	ldr	r3, [pc, #20]	; (b8d8 <_impl_k_sem_give+0xb0>)
    b8c4:	689b      	ldr	r3, [r3, #8]
    b8c6:	895b      	ldrh	r3, [r3, #10]
    b8c8:	2b7f      	cmp	r3, #127	; 0x7f
    b8ca:	d8f2      	bhi.n	b8b2 <_impl_k_sem_give+0x8a>
    b8cc:	f7ff fea8 	bl	b620 <__must_switch_threads>
		return handle_poll_events(sem);
    b8d0:	1e43      	subs	r3, r0, #1
    b8d2:	4198      	sbcs	r0, r3
    b8d4:	e7bd      	b.n	b852 <_impl_k_sem_give+0x2a>
    b8d6:	46c0      	nop			; (mov r8, r8)
    b8d8:	20000bd4 	.word	0x20000bd4

0000b8dc <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    b8dc:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    b8de:	f3ef 8410 	mrs	r4, PRIMASK
    b8e2:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    b8e4:	6883      	ldr	r3, [r0, #8]
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	d006      	beq.n	b8f8 <_impl_k_sem_take+0x1c>
		sem->count--;
    b8ea:	3b01      	subs	r3, #1
    b8ec:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
    b8ee:	2000      	movs	r0, #0
	if (key) {
    b8f0:	4284      	cmp	r4, r0
    b8f2:	d100      	bne.n	b8f6 <_impl_k_sem_take+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    b8f4:	b662      	cpsie	i
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    b8f6:	bd10      	pop	{r4, pc}
	if (timeout == K_NO_WAIT) {
    b8f8:	2900      	cmp	r1, #0
    b8fa:	d105      	bne.n	b908 <_impl_k_sem_take+0x2c>
	if (key) {
    b8fc:	2c00      	cmp	r4, #0
    b8fe:	d100      	bne.n	b902 <_impl_k_sem_take+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    b900:	b662      	cpsie	i
		return -EBUSY;
    b902:	2010      	movs	r0, #16
    b904:	4240      	negs	r0, r0
    b906:	e7f6      	b.n	b8f6 <_impl_k_sem_take+0x1a>
	_pend_current_thread(&sem->wait_q, timeout);
    b908:	f7ff fe7a 	bl	b600 <_pend_current_thread>
	_update_time_slice_before_swap();
    b90c:	f7ff ff56 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    b910:	0020      	movs	r0, r4
    b912:	f7f6 fb95 	bl	2040 <__swap>
	return _Swap(key);
    b916:	e7ee      	b.n	b8f6 <_impl_k_sem_take+0x1a>

0000b918 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    b918:	4b02      	ldr	r3, [pc, #8]	; (b924 <_impl_k_uptime_get_32+0xc>)
    b91a:	6818      	ldr	r0, [r3, #0]
    b91c:	6859      	ldr	r1, [r3, #4]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    b91e:	0080      	lsls	r0, r0, #2
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    b920:	4770      	bx	lr
    b922:	46c0      	nop			; (mov r8, r8)
    b924:	20000dd0 	.word	0x20000dd0

0000b928 <_tick_get>:
	__asm__ volatile("mrs %0, PRIMASK;"
    b928:	f3ef 8310 	mrs	r3, PRIMASK
    b92c:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    b92e:	4a03      	ldr	r2, [pc, #12]	; (b93c <_tick_get+0x14>)
    b930:	6810      	ldr	r0, [r2, #0]
    b932:	6851      	ldr	r1, [r2, #4]
	if (key) {
    b934:	2b00      	cmp	r3, #0
    b936:	d100      	bne.n	b93a <_tick_get+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    b938:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    b93a:	4770      	bx	lr
    b93c:	20000dd0 	.word	0x20000dd0

0000b940 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    b940:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    b942:	f7ff fff1 	bl	b928 <_tick_get>
    b946:	0f83      	lsrs	r3, r0, #30
    b948:	0089      	lsls	r1, r1, #2
    b94a:	4319      	orrs	r1, r3
    b94c:	0080      	lsls	r0, r0, #2
}
    b94e:	bd10      	pop	{r4, pc}

0000b950 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    b950:	b5f0      	push	{r4, r5, r6, r7, lr}
    b952:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
    b954:	f3ef 8410 	mrs	r4, PRIMASK
    b958:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    b95a:	4960      	ldr	r1, [pc, #384]	; (badc <_nano_sys_clock_tick_announce+0x18c>)
    b95c:	17c3      	asrs	r3, r0, #31
    b95e:	9301      	str	r3, [sp, #4]
    b960:	9000      	str	r0, [sp, #0]
    b962:	680a      	ldr	r2, [r1, #0]
    b964:	684b      	ldr	r3, [r1, #4]
    b966:	9d00      	ldr	r5, [sp, #0]
    b968:	9e01      	ldr	r6, [sp, #4]
    b96a:	1952      	adds	r2, r2, r5
    b96c:	4173      	adcs	r3, r6
    b96e:	600a      	str	r2, [r1, #0]
    b970:	604b      	str	r3, [r1, #4]
	if (key) {
    b972:	2c00      	cmp	r4, #0
    b974:	d100      	bne.n	b978 <_nano_sys_clock_tick_announce+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    b976:	b662      	cpsie	i
	list->head = (sys_dnode_t *)list;
    b978:	aa04      	add	r2, sp, #16
    b97a:	9204      	str	r2, [sp, #16]
	list->tail = (sys_dnode_t *)list;
    b97c:	6052      	str	r2, [r2, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    b97e:	f3ef 8510 	mrs	r5, PRIMASK
    b982:	b672      	cpsid	i
	return list->head == list;
    b984:	4c56      	ldr	r4, [pc, #344]	; (bae0 <_nano_sys_clock_tick_announce+0x190>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b986:	4e57      	ldr	r6, [pc, #348]	; (bae4 <_nano_sys_clock_tick_announce+0x194>)
	return list->head == list;
    b988:	6923      	ldr	r3, [r4, #16]
    b98a:	0029      	movs	r1, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b98c:	42b3      	cmp	r3, r6
    b98e:	d001      	beq.n	b994 <_nano_sys_clock_tick_announce+0x44>
	if (!next) {
    b990:	2b00      	cmp	r3, #0
    b992:	d11f      	bne.n	b9d4 <_nano_sys_clock_tick_announce+0x84>
	if (key) {
    b994:	2d00      	cmp	r5, #0
    b996:	d100      	bne.n	b99a <_nano_sys_clock_tick_announce+0x4a>
	__asm__ volatile("cpsie i" : : : "memory");
    b998:	b662      	cpsie	i
	if (!_is_thread_time_slicing(_current)) {
    b99a:	4c51      	ldr	r4, [pc, #324]	; (bae0 <_nano_sys_clock_tick_announce+0x190>)
    b99c:	68a0      	ldr	r0, [r4, #8]
    b99e:	f7ff fee5 	bl	b76c <_is_thread_time_slicing>
    b9a2:	2800      	cmp	r0, #0
    b9a4:	d014      	beq.n	b9d0 <_nano_sys_clock_tick_announce+0x80>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    b9a6:	4a50      	ldr	r2, [pc, #320]	; (bae8 <_nano_sys_clock_tick_announce+0x198>)
    b9a8:	9b00      	ldr	r3, [sp, #0]
    b9aa:	6811      	ldr	r1, [r2, #0]
    b9ac:	009b      	lsls	r3, r3, #2
    b9ae:	18cb      	adds	r3, r1, r3
	if (_time_slice_elapsed >= _time_slice_duration) {
    b9b0:	494e      	ldr	r1, [pc, #312]	; (baec <_nano_sys_clock_tick_announce+0x19c>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    b9b2:	6013      	str	r3, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    b9b4:	6809      	ldr	r1, [r1, #0]
    b9b6:	428b      	cmp	r3, r1
    b9b8:	db0a      	blt.n	b9d0 <_nano_sys_clock_tick_announce+0x80>
		_time_slice_elapsed = 0;
    b9ba:	2300      	movs	r3, #0
    b9bc:	6013      	str	r3, [r2, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    b9be:	f3ef 8510 	mrs	r5, PRIMASK
    b9c2:	b672      	cpsid	i
		_move_thread_to_end_of_prio_q(_current);
    b9c4:	68a0      	ldr	r0, [r4, #8]
    b9c6:	f7ff fe65 	bl	b694 <_move_thread_to_end_of_prio_q>
	if (key) {
    b9ca:	2d00      	cmp	r5, #0
    b9cc:	d100      	bne.n	b9d0 <_nano_sys_clock_tick_announce+0x80>
	__asm__ volatile("cpsie i" : : : "memory");
    b9ce:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    b9d0:	b007      	add	sp, #28
    b9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_handling_timeouts = 1;
    b9d4:	2601      	movs	r6, #1
    b9d6:	4d46      	ldr	r5, [pc, #280]	; (baf0 <_nano_sys_clock_tick_announce+0x1a0>)
			timeout->delta_ticks_from_prev = 0;
    b9d8:	2700      	movs	r7, #0
	_handling_timeouts = 1;
    b9da:	602e      	str	r6, [r5, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    b9dc:	2502      	movs	r5, #2
    b9de:	426d      	negs	r5, r5
    b9e0:	46ac      	mov	ip, r5
	return (node == list->tail) ? NULL : node->next;
    b9e2:	9403      	str	r4, [sp, #12]
		s32_t tmp = timeout->delta_ticks_from_prev;
    b9e4:	691d      	ldr	r5, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    b9e6:	4285      	cmp	r5, r0
    b9e8:	da20      	bge.n	ba2c <_nano_sys_clock_tick_announce+0xdc>
			timeout->delta_ticks_from_prev = 0;
    b9ea:	611f      	str	r7, [r3, #16]
    b9ec:	9c03      	ldr	r4, [sp, #12]
		ticks -= tmp;
    b9ee:	1b40      	subs	r0, r0, r5
    b9f0:	6966      	ldr	r6, [r4, #20]
    b9f2:	2500      	movs	r5, #0
    b9f4:	429e      	cmp	r6, r3
    b9f6:	d000      	beq.n	b9fa <_nano_sys_clock_tick_announce+0xaa>
    b9f8:	681d      	ldr	r5, [r3, #0]
		if (timeout->delta_ticks_from_prev == 0) {
    b9fa:	691e      	ldr	r6, [r3, #16]
    b9fc:	2e00      	cmp	r6, #0
    b9fe:	d118      	bne.n	ba32 <_nano_sys_clock_tick_announce+0xe2>
	node->prev->next = node->next;
    ba00:	681c      	ldr	r4, [r3, #0]
    ba02:	685e      	ldr	r6, [r3, #4]
    ba04:	6034      	str	r4, [r6, #0]
	node->next->prev = node->prev;
    ba06:	681c      	ldr	r4, [r3, #0]
    ba08:	6066      	str	r6, [r4, #4]
	node->next = list->head;
    ba0a:	6814      	ldr	r4, [r2, #0]
	node->prev = list;
    ba0c:	605a      	str	r2, [r3, #4]
	node->next = list->head;
    ba0e:	601c      	str	r4, [r3, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    ba10:	4664      	mov	r4, ip
	list->head->prev = node;
    ba12:	6816      	ldr	r6, [r2, #0]
	list->head = node;
    ba14:	6013      	str	r3, [r2, #0]
	list->head->prev = node;
    ba16:	6073      	str	r3, [r6, #4]
    ba18:	611c      	str	r4, [r3, #16]
	if (key) {
    ba1a:	2900      	cmp	r1, #0
    ba1c:	d100      	bne.n	ba20 <_nano_sys_clock_tick_announce+0xd0>
	__asm__ volatile("cpsie i" : : : "memory");
    ba1e:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    ba20:	f3ef 8110 	mrs	r1, PRIMASK
    ba24:	b672      	cpsid	i
    ba26:	1e2b      	subs	r3, r5, #0
	while (next) {
    ba28:	d1dc      	bne.n	b9e4 <_nano_sys_clock_tick_announce+0x94>
    ba2a:	e004      	b.n	ba36 <_nano_sys_clock_tick_announce+0xe6>
			timeout->delta_ticks_from_prev -= ticks;
    ba2c:	1a2e      	subs	r6, r5, r0
    ba2e:	611e      	str	r6, [r3, #16]
    ba30:	e7dc      	b.n	b9ec <_nano_sys_clock_tick_announce+0x9c>
		} else if (ticks <= 0) {
    ba32:	2800      	cmp	r0, #0
    ba34:	dcf1      	bgt.n	ba1a <_nano_sys_clock_tick_announce+0xca>
	if (key) {
    ba36:	2900      	cmp	r1, #0
    ba38:	d100      	bne.n	ba3c <_nano_sys_clock_tick_announce+0xec>
	__asm__ volatile("cpsie i" : : : "memory");
    ba3a:	b662      	cpsie	i
	return list->head == list;
    ba3c:	9804      	ldr	r0, [sp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba3e:	4290      	cmp	r0, r2
    ba40:	d103      	bne.n	ba4a <_nano_sys_clock_tick_announce+0xfa>
	_handling_timeouts = 0;
    ba42:	2200      	movs	r2, #0
    ba44:	4b2a      	ldr	r3, [pc, #168]	; (baf0 <_nano_sys_clock_tick_announce+0x1a0>)
    ba46:	601a      	str	r2, [r3, #0]
    ba48:	e7a7      	b.n	b99a <_nano_sys_clock_tick_announce+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    ba4a:	2800      	cmp	r0, #0
    ba4c:	d0f9      	beq.n	ba42 <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    ba4e:	9b05      	ldr	r3, [sp, #20]
    ba50:	2400      	movs	r4, #0
    ba52:	4298      	cmp	r0, r3
    ba54:	d000      	beq.n	ba58 <_nano_sys_clock_tick_announce+0x108>
    ba56:	6804      	ldr	r4, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    ba58:	2601      	movs	r6, #1
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba5a:	2704      	movs	r7, #4
    ba5c:	4276      	negs	r6, r6
	node->prev->next = node->next;
    ba5e:	6843      	ldr	r3, [r0, #4]
    ba60:	6802      	ldr	r2, [r0, #0]
    ba62:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ba64:	6802      	ldr	r2, [r0, #0]
    ba66:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    ba68:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
    ba6a:	f3ef 8510 	mrs	r5, PRIMASK
    ba6e:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    ba70:	6106      	str	r6, [r0, #16]
	if (thread) {
    ba72:	2b00      	cmp	r3, #0
    ba74:	d021      	beq.n	baba <_nano_sys_clock_tick_announce+0x16a>
	if (timeout_obj->wait_q) {
    ba76:	68c2      	ldr	r2, [r0, #12]
    ba78:	2a00      	cmp	r2, #0
    ba7a:	d00a      	beq.n	ba92 <_nano_sys_clock_tick_announce+0x142>
	node->prev->next = node->next;
    ba7c:	685a      	ldr	r2, [r3, #4]
    ba7e:	6819      	ldr	r1, [r3, #0]
    ba80:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    ba82:	6819      	ldr	r1, [r3, #0]
    ba84:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ba86:	2102      	movs	r1, #2
    ba88:	7a5a      	ldrb	r2, [r3, #9]
    ba8a:	438a      	bics	r2, r1
    ba8c:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    ba8e:	2200      	movs	r2, #0
    ba90:	61da      	str	r2, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba92:	7a5a      	ldrb	r2, [r3, #9]
    ba94:	0011      	movs	r1, r2
    ba96:	43b9      	bics	r1, r7
    ba98:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    ba9a:	211b      	movs	r1, #27
    ba9c:	420a      	tst	r2, r1
    ba9e:	d102      	bne.n	baa6 <_nano_sys_clock_tick_announce+0x156>
    baa0:	6a1a      	ldr	r2, [r3, #32]
    baa2:	3201      	adds	r2, #1
    baa4:	d015      	beq.n	bad2 <_nano_sys_clock_tick_announce+0x182>
	if (key) {
    baa6:	2d00      	cmp	r5, #0
    baa8:	d100      	bne.n	baac <_nano_sys_clock_tick_announce+0x15c>
	__asm__ volatile("cpsie i" : : : "memory");
    baaa:	b662      	cpsie	i
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    baac:	2c00      	cmp	r4, #0
    baae:	d0c8      	beq.n	ba42 <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    bab0:	9b05      	ldr	r3, [sp, #20]
    bab2:	42a3      	cmp	r3, r4
    bab4:	d109      	bne.n	baca <_nano_sys_clock_tick_announce+0x17a>
    bab6:	2300      	movs	r3, #0
    bab8:	e008      	b.n	bacc <_nano_sys_clock_tick_announce+0x17c>
	if (key) {
    baba:	2d00      	cmp	r5, #0
    babc:	d100      	bne.n	bac0 <_nano_sys_clock_tick_announce+0x170>
	__asm__ volatile("cpsie i" : : : "memory");
    babe:	b662      	cpsie	i
		if (timeout->func) {
    bac0:	6943      	ldr	r3, [r0, #20]
    bac2:	2b00      	cmp	r3, #0
    bac4:	d0f2      	beq.n	baac <_nano_sys_clock_tick_announce+0x15c>
			timeout->func(timeout);
    bac6:	4798      	blx	r3
    bac8:	e7f0      	b.n	baac <_nano_sys_clock_tick_announce+0x15c>
    baca:	6823      	ldr	r3, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    bacc:	0020      	movs	r0, r4
    bace:	001c      	movs	r4, r3
    bad0:	e7c5      	b.n	ba5e <_nano_sys_clock_tick_announce+0x10e>
		_add_thread_to_ready_q(thread);
    bad2:	0018      	movs	r0, r3
    bad4:	f7ff fcae 	bl	b434 <_add_thread_to_ready_q>
    bad8:	e7e5      	b.n	baa6 <_nano_sys_clock_tick_announce+0x156>
    bada:	46c0      	nop			; (mov r8, r8)
    badc:	20000dd0 	.word	0x20000dd0
    bae0:	20000bd4 	.word	0x20000bd4
    bae4:	20000be4 	.word	0x20000be4
    bae8:	20000dcc 	.word	0x20000dcc
    baec:	20000cf8 	.word	0x20000cf8
    baf0:	20000dc8 	.word	0x20000dc8

0000baf4 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    baf4:	2301      	movs	r3, #1
    baf6:	2280      	movs	r2, #128	; 0x80
{
    baf8:	b510      	push	{r4, lr}
	k_work_q_start(&k_sys_work_q,
    bafa:	4804      	ldr	r0, [pc, #16]	; (bb0c <k_sys_work_q_init+0x18>)
    bafc:	425b      	negs	r3, r3
    bafe:	00d2      	lsls	r2, r2, #3
    bb00:	4903      	ldr	r1, [pc, #12]	; (bb10 <k_sys_work_q_init+0x1c>)
    bb02:	f000 f967 	bl	bdd4 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    bb06:	2000      	movs	r0, #0
    bb08:	bd10      	pop	{r4, pc}
    bb0a:	46c0      	nop			; (mov r8, r8)
    bb0c:	20000dd8 	.word	0x20000dd8
    bb10:	20001d80 	.word	0x20001d80

0000bb14 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    bb14:	7a42      	ldrb	r2, [r0, #9]
    bb16:	2300      	movs	r3, #0
    bb18:	06d2      	lsls	r2, r2, #27
    bb1a:	d104      	bne.n	bb26 <_is_thread_ready+0x12>
    bb1c:	6a03      	ldr	r3, [r0, #32]
    bb1e:	3301      	adds	r3, #1
    bb20:	4258      	negs	r0, r3
    bb22:	4143      	adcs	r3, r0
    bb24:	b2db      	uxtb	r3, r3
}
    bb26:	0018      	movs	r0, r3
    bb28:	4770      	bx	lr
	...

0000bb2c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    bb2c:	6902      	ldr	r2, [r0, #16]
{
    bb2e:	0003      	movs	r3, r0
		return _INACTIVE;
    bb30:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    bb32:	1c51      	adds	r1, r2, #1
    bb34:	d010      	beq.n	bb58 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    bb36:	4909      	ldr	r1, [pc, #36]	; (bb5c <_abort_timeout+0x30>)
    bb38:	6949      	ldr	r1, [r1, #20]
    bb3a:	428b      	cmp	r3, r1
    bb3c:	d003      	beq.n	bb46 <_abort_timeout+0x1a>
    bb3e:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    bb40:	6908      	ldr	r0, [r1, #16]
    bb42:	1882      	adds	r2, r0, r2
    bb44:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    bb46:	685a      	ldr	r2, [r3, #4]
    bb48:	6819      	ldr	r1, [r3, #0]
	return 0;
    bb4a:	2000      	movs	r0, #0
    bb4c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    bb4e:	6819      	ldr	r1, [r3, #0]
    bb50:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    bb52:	2201      	movs	r2, #1
    bb54:	4252      	negs	r2, r2
    bb56:	611a      	str	r2, [r3, #16]
}
    bb58:	4770      	bx	lr
    bb5a:	46c0      	nop			; (mov r8, r8)
    bb5c:	20000bd4 	.word	0x20000bd4

0000bb60 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    bb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    bb62:	f3ef 8310 	mrs	r3, PRIMASK
    bb66:	b672      	cpsid	i
    bb68:	9301      	str	r3, [sp, #4]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    bb6a:	2300      	movs	r3, #0
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    bb6c:	0004      	movs	r4, r0
	return list->head == list;
    bb6e:	4a17      	ldr	r2, [pc, #92]	; (bbcc <schedule_new_thread.part.13+0x6c>)
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    bb70:	3103      	adds	r1, #3
    bb72:	0889      	lsrs	r1, r1, #2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    bb74:	61c3      	str	r3, [r0, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb76:	4e16      	ldr	r6, [pc, #88]	; (bbd0 <schedule_new_thread.part.13+0x70>)
	return list->head == list;
    bb78:	6913      	ldr	r3, [r2, #16]
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    bb7a:	3101      	adds	r1, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    bb7c:	3410      	adds	r4, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    bb7e:	6201      	str	r1, [r0, #32]
	timeout->thread = thread;
    bb80:	6180      	str	r0, [r0, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb82:	42b3      	cmp	r3, r6
    bb84:	d10a      	bne.n	bb9c <schedule_new_thread.part.13+0x3c>
	node->next = list;
    bb86:	6106      	str	r6, [r0, #16]
	node->prev = list->tail;
    bb88:	6953      	ldr	r3, [r2, #20]
    bb8a:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    bb8c:	6953      	ldr	r3, [r2, #20]
    bb8e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    bb90:	6154      	str	r4, [r2, #20]
	if (key) {
    bb92:	9b01      	ldr	r3, [sp, #4]
    bb94:	2b00      	cmp	r3, #0
    bb96:	d100      	bne.n	bb9a <schedule_new_thread.part.13+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    bb98:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    bb9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    bb9c:	2b00      	cmp	r3, #0
    bb9e:	d0f2      	beq.n	bb86 <schedule_new_thread.part.13+0x26>
    bba0:	6957      	ldr	r7, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    bba2:	6a01      	ldr	r1, [r0, #32]
    bba4:	691d      	ldr	r5, [r3, #16]
    bba6:	42a9      	cmp	r1, r5
    bba8:	dc08      	bgt.n	bbbc <schedule_new_thread.part.13+0x5c>
		node->prev = insert_point->prev;
    bbaa:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    bbac:	1a69      	subs	r1, r5, r1
    bbae:	6119      	str	r1, [r3, #16]
    bbb0:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    bbb2:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    bbb4:	685a      	ldr	r2, [r3, #4]
    bbb6:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    bbb8:	605c      	str	r4, [r3, #4]
    bbba:	e7ea      	b.n	bb92 <schedule_new_thread.part.13+0x32>
		*delta -= in_q->delta_ticks_from_prev;
    bbbc:	1b49      	subs	r1, r1, r5
    bbbe:	6201      	str	r1, [r0, #32]
	return (node == list->tail) ? NULL : node->next;
    bbc0:	42bb      	cmp	r3, r7
    bbc2:	d0e0      	beq.n	bb86 <schedule_new_thread.part.13+0x26>
    bbc4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	d1eb      	bne.n	bba2 <schedule_new_thread.part.13+0x42>
    bbca:	e7dc      	b.n	bb86 <schedule_new_thread.part.13+0x26>
    bbcc:	20000bd4 	.word	0x20000bd4
    bbd0:	20000be4 	.word	0x20000be4

0000bbd4 <k_is_in_isr>:
    bbd4:	f3ef 8305 	mrs	r3, IPSR
    bbd8:	2001      	movs	r0, #1
    bbda:	2b0d      	cmp	r3, #13
    bbdc:	d803      	bhi.n	bbe6 <k_is_in_isr+0x12>
    bbde:	3b03      	subs	r3, #3
    bbe0:	4258      	negs	r0, r3
    bbe2:	4158      	adcs	r0, r3
    bbe4:	b2c0      	uxtb	r0, r0
}
    bbe6:	4770      	bx	lr

0000bbe8 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    bbe8:	4b02      	ldr	r3, [pc, #8]	; (bbf4 <_is_thread_essential+0xc>)
    bbea:	689b      	ldr	r3, [r3, #8]
    bbec:	7a18      	ldrb	r0, [r3, #8]
    bbee:	2301      	movs	r3, #1
    bbf0:	4018      	ands	r0, r3
}
    bbf2:	4770      	bx	lr
    bbf4:	20000bd4 	.word	0x20000bd4

0000bbf8 <_thread_entry>:
{
    bbf8:	b510      	push	{r4, lr}
    bbfa:	0004      	movs	r4, r0
    bbfc:	0008      	movs	r0, r1
    bbfe:	0011      	movs	r1, r2
	entry(p1, p2, p3);
    bc00:	001a      	movs	r2, r3
    bc02:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    bc04:	f7ff fdac 	bl	b760 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    bc08:	f7f6 fb64 	bl	22d4 <_impl_k_thread_abort>

0000bc0c <_impl_k_thread_start>:
{
    bc0c:	b570      	push	{r4, r5, r6, lr}
    bc0e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    bc10:	f3ef 8510 	mrs	r5, PRIMASK
    bc14:	b672      	cpsid	i
	if (_has_thread_started(thread)) {
    bc16:	2204      	movs	r2, #4
    bc18:	7a43      	ldrb	r3, [r0, #9]
    bc1a:	4213      	tst	r3, r2
    bc1c:	d102      	bne.n	bc24 <_impl_k_thread_start+0x18>
	if (key) {
    bc1e:	2d00      	cmp	r5, #0
    bc20:	d018      	beq.n	bc54 <_impl_k_thread_start+0x48>
}
    bc22:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bc24:	4393      	bics	r3, r2
    bc26:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    bc28:	f7ff ff74 	bl	bb14 <_is_thread_ready>
    bc2c:	2800      	cmp	r0, #0
    bc2e:	d0f6      	beq.n	bc1e <_impl_k_thread_start+0x12>
		_add_thread_to_ready_q(thread);
    bc30:	0020      	movs	r0, r4
    bc32:	f7ff fbff 	bl	b434 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    bc36:	4b08      	ldr	r3, [pc, #32]	; (bc58 <_impl_k_thread_start+0x4c>)
    bc38:	689b      	ldr	r3, [r3, #8]
    bc3a:	895b      	ldrh	r3, [r3, #10]
    bc3c:	2b7f      	cmp	r3, #127	; 0x7f
    bc3e:	d8ee      	bhi.n	bc1e <_impl_k_thread_start+0x12>
    bc40:	f7ff fcee 	bl	b620 <__must_switch_threads>
    bc44:	2800      	cmp	r0, #0
    bc46:	d0ea      	beq.n	bc1e <_impl_k_thread_start+0x12>
	_update_time_slice_before_swap();
    bc48:	f7ff fdb8 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    bc4c:	0028      	movs	r0, r5
    bc4e:	f7f6 f9f7 	bl	2040 <__swap>
    bc52:	e7e6      	b.n	bc22 <_impl_k_thread_start+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    bc54:	b662      	cpsie	i
    bc56:	e7e4      	b.n	bc22 <_impl_k_thread_start+0x16>
    bc58:	20000bd4 	.word	0x20000bd4

0000bc5c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    bc5c:	b510      	push	{r4, lr}
    bc5e:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bc60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    bc62:	9404      	str	r4, [sp, #16]
    bc64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    bc66:	9403      	str	r4, [sp, #12]
    bc68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bc6a:	9402      	str	r4, [sp, #8]
    bc6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bc6e:	9401      	str	r4, [sp, #4]
    bc70:	9c08      	ldr	r4, [sp, #32]
    bc72:	9400      	str	r4, [sp, #0]
    bc74:	f7f6 fa96 	bl	21a4 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    bc78:	b006      	add	sp, #24
    bc7a:	bd10      	pop	{r4, pc}

0000bc7c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    bc7c:	b530      	push	{r4, r5, lr}
    bc7e:	0004      	movs	r4, r0
    bc80:	b087      	sub	sp, #28
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bc82:	980e      	ldr	r0, [sp, #56]	; 0x38
{
    bc84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bc86:	9004      	str	r0, [sp, #16]
    bc88:	980d      	ldr	r0, [sp, #52]	; 0x34
    bc8a:	9003      	str	r0, [sp, #12]
    bc8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    bc8e:	9002      	str	r0, [sp, #8]
    bc90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bc92:	9001      	str	r0, [sp, #4]
    bc94:	980a      	ldr	r0, [sp, #40]	; 0x28
    bc96:	9000      	str	r0, [sp, #0]
    bc98:	0020      	movs	r0, r4
    bc9a:	f7f6 fa83 	bl	21a4 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    bc9e:	1c6b      	adds	r3, r5, #1
    bca0:	d004      	beq.n	bcac <_impl_k_thread_create+0x30>
	if (delay == 0) {
    bca2:	2d00      	cmp	r5, #0
    bca4:	d105      	bne.n	bcb2 <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    bca6:	0020      	movs	r0, r4
    bca8:	f7ff ffb0 	bl	bc0c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    bcac:	0020      	movs	r0, r4
    bcae:	b007      	add	sp, #28
    bcb0:	bd30      	pop	{r4, r5, pc}
    bcb2:	0029      	movs	r1, r5
    bcb4:	0020      	movs	r0, r4
    bcb6:	f7ff ff53 	bl	bb60 <schedule_new_thread.part.13>
    bcba:	e7f7      	b.n	bcac <_impl_k_thread_create+0x30>

0000bcbc <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    bcbc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    bcbe:	b510      	push	{r4, lr}
    bcc0:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d000      	beq.n	bcc8 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    bcc6:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    bcc8:	0020      	movs	r0, r4
    bcca:	f7ff ff23 	bl	bb14 <_is_thread_ready>
    bcce:	2800      	cmp	r0, #0
    bcd0:	d007      	beq.n	bce2 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    bcd2:	0020      	movs	r0, r4
    bcd4:	f7ff fc36 	bl	b544 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    bcd8:	2308      	movs	r3, #8
    bcda:	7a62      	ldrb	r2, [r4, #9]
    bcdc:	4313      	orrs	r3, r2
    bcde:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    bce0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    bce2:	2202      	movs	r2, #2
    bce4:	7a63      	ldrb	r3, [r4, #9]
    bce6:	4213      	tst	r3, r2
    bce8:	d007      	beq.n	bcfa <_k_thread_single_abort+0x3e>
	node->prev->next = node->next;
    bcea:	6863      	ldr	r3, [r4, #4]
    bcec:	6821      	ldr	r1, [r4, #0]
    bcee:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    bcf0:	6821      	ldr	r1, [r4, #0]
    bcf2:	604b      	str	r3, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    bcf4:	7a63      	ldrb	r3, [r4, #9]
    bcf6:	4393      	bics	r3, r2
    bcf8:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    bcfa:	6a23      	ldr	r3, [r4, #32]
    bcfc:	3301      	adds	r3, #1
    bcfe:	d0eb      	beq.n	bcd8 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    bd00:	0020      	movs	r0, r4
    bd02:	3010      	adds	r0, #16
    bd04:	f7ff ff12 	bl	bb2c <_abort_timeout>
    bd08:	e7e6      	b.n	bcd8 <_k_thread_single_abort+0x1c>
	...

0000bd0c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    bd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    bd0e:	4c1c      	ldr	r4, [pc, #112]	; (bd80 <_init_static_threads+0x74>)
{
    bd10:	b087      	sub	sp, #28
    bd12:	0025      	movs	r5, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    bd14:	4e1b      	ldr	r6, [pc, #108]	; (bd84 <_init_static_threads+0x78>)
    bd16:	42b4      	cmp	r4, r6
    bd18:	d310      	bcc.n	bd3c <_init_static_threads+0x30>
	--_current->base.sched_locked;
    bd1a:	4b1b      	ldr	r3, [pc, #108]	; (bd88 <_init_static_threads+0x7c>)
    bd1c:	689a      	ldr	r2, [r3, #8]
    bd1e:	7ad3      	ldrb	r3, [r2, #11]
    bd20:	3b01      	subs	r3, #1
    bd22:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile("mrs %0, PRIMASK;"
    bd24:	f3ef 8710 	mrs	r7, PRIMASK
    bd28:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    bd2a:	42b5      	cmp	r5, r6
    bd2c:	d31a      	bcc.n	bd64 <_init_static_threads+0x58>
	if (key) {
    bd2e:	2f00      	cmp	r7, #0
    bd30:	d100      	bne.n	bd34 <_init_static_threads+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    bd32:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    bd34:	f7ff fca0 	bl	b678 <k_sched_unlock>
}
    bd38:	b007      	add	sp, #28
    bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bd3c:	6a23      	ldr	r3, [r4, #32]
    bd3e:	9304      	str	r3, [sp, #16]
    bd40:	69e3      	ldr	r3, [r4, #28]
    bd42:	9303      	str	r3, [sp, #12]
    bd44:	69a3      	ldr	r3, [r4, #24]
    bd46:	9302      	str	r3, [sp, #8]
    bd48:	6963      	ldr	r3, [r4, #20]
    bd4a:	9301      	str	r3, [sp, #4]
    bd4c:	6923      	ldr	r3, [r4, #16]
    bd4e:	9300      	str	r3, [sp, #0]
    bd50:	68e3      	ldr	r3, [r4, #12]
    bd52:	68a2      	ldr	r2, [r4, #8]
    bd54:	6861      	ldr	r1, [r4, #4]
    bd56:	6820      	ldr	r0, [r4, #0]
    bd58:	f7f6 fa24 	bl	21a4 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    bd5c:	6823      	ldr	r3, [r4, #0]
    bd5e:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
    bd60:	342c      	adds	r4, #44	; 0x2c
    bd62:	e7d7      	b.n	bd14 <_init_static_threads+0x8>
		if (thread_data->init_delay != K_FOREVER) {
    bd64:	6a69      	ldr	r1, [r5, #36]	; 0x24
    bd66:	1c4b      	adds	r3, r1, #1
    bd68:	d004      	beq.n	bd74 <_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    bd6a:	6828      	ldr	r0, [r5, #0]
	if (delay == 0) {
    bd6c:	2900      	cmp	r1, #0
    bd6e:	d103      	bne.n	bd78 <_init_static_threads+0x6c>
    bd70:	f7ff ff4c 	bl	bc0c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    bd74:	352c      	adds	r5, #44	; 0x2c
    bd76:	e7d8      	b.n	bd2a <_init_static_threads+0x1e>
    bd78:	f7ff fef2 	bl	bb60 <schedule_new_thread.part.13>
    bd7c:	e7fa      	b.n	bd74 <_init_static_threads+0x68>
    bd7e:	46c0      	nop			; (mov r8, r8)
    bd80:	20002504 	.word	0x20002504
    bd84:	20002504 	.word	0x20002504
    bd88:	20000bd4 	.word	0x20000bd4

0000bd8c <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    bd8c:	7242      	strb	r2, [r0, #9]
	t->delta_ticks_from_prev = _INACTIVE;
    bd8e:	2201      	movs	r2, #1
	thread_base->user_options = (u8_t)options;
    bd90:	7203      	strb	r3, [r0, #8]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    bd92:	2300      	movs	r3, #0
    bd94:	4252      	negs	r2, r2
	thread_base->prio = priority;
    bd96:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    bd98:	72c3      	strb	r3, [r0, #11]
    bd9a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    bd9c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    bd9e:	6183      	str	r3, [r0, #24]
	t->func = func;
    bda0:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    bda2:	4770      	bx	lr

0000bda4 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bda6:	2602      	movs	r6, #2
    bda8:	0005      	movs	r5, r0
    bdaa:	4276      	negs	r6, r6

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    bdac:	2101      	movs	r1, #1
    bdae:	0028      	movs	r0, r5
    bdb0:	4249      	negs	r1, r1
    bdb2:	f7ff faf7 	bl	b3a4 <k_queue_get>
    bdb6:	1e04      	subs	r4, r0, #0
		if (!work) {
    bdb8:	d0f8      	beq.n	bdac <work_q_main+0x8>
			continue;
		}

		handler = work->handler;
    bdba:	6847      	ldr	r7, [r0, #4]
    bdbc:	0031      	movs	r1, r6
    bdbe:	3008      	adds	r0, #8
    bdc0:	f000 f937 	bl	c032 <atomic_and>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    bdc4:	07c3      	lsls	r3, r0, #31
    bdc6:	d501      	bpl.n	bdcc <work_q_main+0x28>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    bdc8:	0020      	movs	r0, r4
    bdca:	47b8      	blx	r7
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    bdcc:	f7ff fc88 	bl	b6e0 <_impl_k_yield>
    bdd0:	e7ec      	b.n	bdac <work_q_main+0x8>
	...

0000bdd4 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    bdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdd6:	0004      	movs	r4, r0
    bdd8:	b087      	sub	sp, #28
    bdda:	001f      	movs	r7, r3
    bddc:	000d      	movs	r5, r1
    bdde:	0016      	movs	r6, r2
	k_queue_init(&work_q->queue);
    bde0:	f7ff fa86 	bl	b2f0 <k_queue_init>

    bde4:	2300      	movs	r3, #0
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
    bde6:	0020      	movs	r0, r4
    bde8:	9305      	str	r3, [sp, #20]
    bdea:	9304      	str	r3, [sp, #16]
    bdec:	9302      	str	r3, [sp, #8]
    bdee:	9301      	str	r3, [sp, #4]
    bdf0:	9703      	str	r7, [sp, #12]
    bdf2:	9400      	str	r4, [sp, #0]
    bdf4:	4b03      	ldr	r3, [pc, #12]	; (be04 <k_work_q_start+0x30>)
    bdf6:	0032      	movs	r2, r6
    bdf8:	0029      	movs	r1, r5
    bdfa:	3010      	adds	r0, #16
    bdfc:	f7ff ff3e 	bl	bc7c <_impl_k_thread_create>
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    be00:	b007      	add	sp, #28
    be02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be04:	0000bda5 	.word	0x0000bda5

0000be08 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    be08:	7a43      	ldrb	r3, [r0, #9]
    be0a:	2204      	movs	r2, #4
    be0c:	0019      	movs	r1, r3
    be0e:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    be10:	221b      	movs	r2, #27
{
    be12:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    be14:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    be16:	4213      	tst	r3, r2
    be18:	d104      	bne.n	be24 <_ready_thread+0x1c>
    be1a:	6a03      	ldr	r3, [r0, #32]
    be1c:	3301      	adds	r3, #1
    be1e:	d101      	bne.n	be24 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    be20:	f7ff fb08 	bl	b434 <_add_thread_to_ready_q>
}
    be24:	bd10      	pop	{r4, pc}

0000be26 <_unpend_thread>:
	node->prev->next = node->next;
    be26:	6843      	ldr	r3, [r0, #4]
    be28:	6802      	ldr	r2, [r0, #0]
    be2a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    be2c:	6802      	ldr	r2, [r0, #0]
    be2e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    be30:	2202      	movs	r2, #2
    be32:	7a43      	ldrb	r3, [r0, #9]
    be34:	4393      	bics	r3, r2
    be36:	7243      	strb	r3, [r0, #9]
}
    be38:	4770      	bx	lr
	...

0000be3c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    be3c:	6902      	ldr	r2, [r0, #16]
{
    be3e:	0003      	movs	r3, r0
		return _INACTIVE;
    be40:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    be42:	1c51      	adds	r1, r2, #1
    be44:	d010      	beq.n	be68 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    be46:	4909      	ldr	r1, [pc, #36]	; (be6c <_abort_timeout+0x30>)
    be48:	6949      	ldr	r1, [r1, #20]
    be4a:	428b      	cmp	r3, r1
    be4c:	d003      	beq.n	be56 <_abort_timeout+0x1a>
	return (node == list->tail) ? NULL : node->next;
    be4e:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    be50:	6908      	ldr	r0, [r1, #16]
    be52:	1882      	adds	r2, r0, r2
    be54:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    be56:	685a      	ldr	r2, [r3, #4]
    be58:	6819      	ldr	r1, [r3, #0]
	return 0;
    be5a:	2000      	movs	r0, #0
    be5c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    be5e:	6819      	ldr	r1, [r3, #0]
    be60:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    be62:	2201      	movs	r2, #1
    be64:	4252      	negs	r2, r2
    be66:	611a      	str	r2, [r3, #16]
}
    be68:	4770      	bx	lr
    be6a:	46c0      	nop			; (mov r8, r8)
    be6c:	20000bd4 	.word	0x20000bd4

0000be70 <_add_timeout.constprop.9>:
	timeout->thread = thread;
    be70:	2300      	movs	r3, #0
static inline void _add_timeout(struct k_thread *thread,
    be72:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    be74:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    be76:	6083      	str	r3, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    be78:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    be7a:	429a      	cmp	r2, r3
    be7c:	d10d      	bne.n	be9a <_add_timeout.constprop.9+0x2a>
	__asm__ volatile("mrs %0, PRIMASK;"
    be7e:	f3ef 8310 	mrs	r3, PRIMASK
    be82:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    be84:	2201      	movs	r2, #1
    be86:	4252      	negs	r2, r2
    be88:	6102      	str	r2, [r0, #16]
	if (key) {
    be8a:	2b00      	cmp	r3, #0
    be8c:	d100      	bne.n	be90 <_add_timeout.constprop.9+0x20>
	__asm__ volatile("cpsie i" : : : "memory");
    be8e:	b662      	cpsie	i
		if (timeout->func) {
    be90:	6943      	ldr	r3, [r0, #20]
    be92:	2b00      	cmp	r3, #0
    be94:	d000      	beq.n	be98 <_add_timeout.constprop.9+0x28>
			timeout->func(timeout);
    be96:	4798      	blx	r3
}
    be98:	bd70      	pop	{r4, r5, r6, pc}
	return list->head == list;
    be9a:	4a10      	ldr	r2, [pc, #64]	; (bedc <_add_timeout.constprop.9+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be9c:	4d10      	ldr	r5, [pc, #64]	; (bee0 <_add_timeout.constprop.9+0x70>)
	return list->head == list;
    be9e:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bea0:	42ab      	cmp	r3, r5
    bea2:	d10c      	bne.n	bebe <_add_timeout.constprop.9+0x4e>
	node->next = list;
    bea4:	6005      	str	r5, [r0, #0]
	node->prev = list->tail;
    bea6:	6953      	ldr	r3, [r2, #20]
    bea8:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    beaa:	6953      	ldr	r3, [r2, #20]
    beac:	6018      	str	r0, [r3, #0]
	list->tail = node;
    beae:	6150      	str	r0, [r2, #20]
    beb0:	e7f2      	b.n	be98 <_add_timeout.constprop.9+0x28>
		*delta -= in_q->delta_ticks_from_prev;
    beb2:	1b09      	subs	r1, r1, r4
    beb4:	6101      	str	r1, [r0, #16]
	return (node == list->tail) ? NULL : node->next;
    beb6:	6951      	ldr	r1, [r2, #20]
    beb8:	428b      	cmp	r3, r1
    beba:	d0f3      	beq.n	bea4 <_add_timeout.constprop.9+0x34>
    bebc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    bebe:	2b00      	cmp	r3, #0
    bec0:	d0f0      	beq.n	bea4 <_add_timeout.constprop.9+0x34>
		if (*delta <= in_q->delta_ticks_from_prev) {
    bec2:	6901      	ldr	r1, [r0, #16]
    bec4:	691c      	ldr	r4, [r3, #16]
    bec6:	42a1      	cmp	r1, r4
    bec8:	dcf3      	bgt.n	beb2 <_add_timeout.constprop.9+0x42>
		node->prev = insert_point->prev;
    beca:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    becc:	1a61      	subs	r1, r4, r1
    bece:	6119      	str	r1, [r3, #16]
    bed0:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
    bed2:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
    bed4:	685a      	ldr	r2, [r3, #4]
    bed6:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
    bed8:	6058      	str	r0, [r3, #4]
    beda:	e7dd      	b.n	be98 <_add_timeout.constprop.9+0x28>
    bedc:	20000bd4 	.word	0x20000bd4
    bee0:	20000be4 	.word	0x20000be4

0000bee4 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
    bee4:	b570      	push	{r4, r5, r6, lr}
    bee6:	0005      	movs	r5, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    bee8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    beea:	0004      	movs	r4, r0
    beec:	3518      	adds	r5, #24
	if (timer->period > 0) {
    beee:	2b00      	cmp	r3, #0
    bef0:	dd09      	ble.n	bf06 <_timer_expiration_handler+0x22>
	__asm__ volatile("mrs %0, PRIMASK;"
    bef2:	f3ef 8610 	mrs	r6, PRIMASK
    bef6:	b672      	cpsid	i
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    bef8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    befa:	0029      	movs	r1, r5
    befc:	f7ff ffb8 	bl	be70 <_add_timeout.constprop.9>
	if (key) {
    bf00:	2e00      	cmp	r6, #0
    bf02:	d100      	bne.n	bf06 <_timer_expiration_handler+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    bf04:	b662      	cpsie	i
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    bf06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bf08:	3301      	adds	r3, #1
    bf0a:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    bf0c:	6a23      	ldr	r3, [r4, #32]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d001      	beq.n	bf16 <_timer_expiration_handler+0x32>
		timer->expiry_fn(timer);
    bf12:	0020      	movs	r0, r4
    bf14:	4798      	blx	r3
	return list->head == list;
    bf16:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bf18:	42ac      	cmp	r4, r5
    bf1a:	d00f      	beq.n	bf3c <_timer_expiration_handler+0x58>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    bf1c:	2c00      	cmp	r4, #0
    bf1e:	d00d      	beq.n	bf3c <_timer_expiration_handler+0x58>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    bf20:	0020      	movs	r0, r4
    bf22:	f7ff ff80 	bl	be26 <_unpend_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
    bf26:	f3ef 8510 	mrs	r5, PRIMASK
    bf2a:	b672      	cpsid	i

	key = irq_lock();
	_ready_thread(thread);
    bf2c:	0020      	movs	r0, r4
    bf2e:	f7ff ff6b 	bl	be08 <_ready_thread>
	if (key) {
    bf32:	2d00      	cmp	r5, #0
    bf34:	d100      	bne.n	bf38 <_timer_expiration_handler+0x54>
	__asm__ volatile("cpsie i" : : : "memory");
    bf36:	b662      	cpsie	i
    bf38:	2300      	movs	r3, #0
    bf3a:	65e3      	str	r3, [r4, #92]	; 0x5c
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
    bf3c:	bd70      	pop	{r4, r5, r6, pc}

0000bf3e <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    bf3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bf40:	3203      	adds	r2, #3
    bf42:	3103      	adds	r1, #3
    bf44:	0892      	lsrs	r2, r2, #2
    bf46:	0889      	lsrs	r1, r1, #2
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
    bf48:	9200      	str	r2, [sp, #0]
{
    bf4a:	0004      	movs	r4, r0
	duration_in_ticks = _ms_to_ticks(duration);
    bf4c:	9101      	str	r1, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    bf4e:	f3ef 8510 	mrs	r5, PRIMASK
    bf52:	b672      	cpsid	i

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
    bf54:	6903      	ldr	r3, [r0, #16]
    bf56:	3301      	adds	r3, #1
    bf58:	d001      	beq.n	bf5e <_impl_k_timer_start+0x20>
		_abort_timeout(&timer->timeout);
    bf5a:	f7ff ff6f 	bl	be3c <_abort_timeout>
	}

	timer->period = period_in_ticks;
    bf5e:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0;
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    bf60:	0021      	movs	r1, r4
	timer->period = period_in_ticks;
    bf62:	62a3      	str	r3, [r4, #40]	; 0x28
	timer->status = 0;
    bf64:	2300      	movs	r3, #0
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    bf66:	9a01      	ldr	r2, [sp, #4]
	timer->status = 0;
    bf68:	62e3      	str	r3, [r4, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    bf6a:	3118      	adds	r1, #24
    bf6c:	0020      	movs	r0, r4
    bf6e:	f7ff ff7f 	bl	be70 <_add_timeout.constprop.9>
	if (key) {
    bf72:	2d00      	cmp	r5, #0
    bf74:	d100      	bne.n	bf78 <_impl_k_timer_start+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    bf76:	b662      	cpsie	i
	irq_unlock(key);
}
    bf78:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

0000bf7c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
    bf7c:	b570      	push	{r4, r5, r6, lr}
    bf7e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    bf80:	f3ef 8510 	mrs	r5, PRIMASK
    bf84:	b672      	cpsid	i
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
    bf86:	f7ff ff59 	bl	be3c <_abort_timeout>
	if (key) {
    bf8a:	2d00      	cmp	r5, #0
    bf8c:	d100      	bne.n	bf90 <_impl_k_timer_stop+0x14>
	__asm__ volatile("cpsie i" : : : "memory");
    bf8e:	b662      	cpsie	i

	irq_unlock(key);

	if (inactive) {
    bf90:	1c43      	adds	r3, r0, #1
    bf92:	d01c      	beq.n	bfce <_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn) {
    bf94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bf96:	2b00      	cmp	r3, #0
    bf98:	d001      	beq.n	bf9e <_impl_k_timer_stop+0x22>
		timer->stop_fn(timer);
    bf9a:	0020      	movs	r0, r4
    bf9c:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
    bf9e:	f3ef 8510 	mrs	r5, PRIMASK
    bfa2:	b672      	cpsid	i
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
    bfa4:	0023      	movs	r3, r4
	if (_handling_timeouts) {
    bfa6:	4a16      	ldr	r2, [pc, #88]	; (c000 <_impl_k_timer_stop+0x84>)
    bfa8:	3318      	adds	r3, #24
    bfaa:	6812      	ldr	r2, [r2, #0]
    bfac:	69a0      	ldr	r0, [r4, #24]
    bfae:	2a00      	cmp	r2, #0
    bfb0:	d016      	beq.n	bfe0 <_impl_k_timer_stop+0x64>
    bfb2:	4283      	cmp	r3, r0
    bfb4:	d100      	bne.n	bfb8 <_impl_k_timer_stop+0x3c>
    bfb6:	2000      	movs	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    bfb8:	2800      	cmp	r0, #0
    bfba:	d109      	bne.n	bfd0 <_impl_k_timer_stop+0x54>
    bfbc:	f3ef 8305 	mrs	r3, IPSR
    bfc0:	2b0d      	cmp	r3, #13
    bfc2:	d801      	bhi.n	bfc8 <_impl_k_timer_stop+0x4c>
    bfc4:	2b03      	cmp	r3, #3
    bfc6:	d116      	bne.n	bff6 <_impl_k_timer_stop+0x7a>
	if (key) {
    bfc8:	2d00      	cmp	r5, #0
    bfca:	d100      	bne.n	bfce <_impl_k_timer_stop+0x52>
	__asm__ volatile("cpsie i" : : : "memory");
    bfcc:	b662      	cpsie	i
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
	}
}
    bfce:	bd70      	pop	{r4, r5, r6, pc}
			if (_is_thread_timeout_expired(thread)) {
    bfd0:	6a03      	ldr	r3, [r0, #32]
    bfd2:	3302      	adds	r3, #2
    bfd4:	d108      	bne.n	bfe8 <_impl_k_timer_stop+0x6c>
	return (node == list->tail) ? NULL : node->next;
    bfd6:	69e3      	ldr	r3, [r4, #28]
    bfd8:	4298      	cmp	r0, r3
    bfda:	d0ef      	beq.n	bfbc <_impl_k_timer_stop+0x40>
    bfdc:	6800      	ldr	r0, [r0, #0]
    bfde:	e7eb      	b.n	bfb8 <_impl_k_timer_stop+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bfe0:	4283      	cmp	r3, r0
    bfe2:	d0eb      	beq.n	bfbc <_impl_k_timer_stop+0x40>
	if (thread) {
    bfe4:	2800      	cmp	r0, #0
    bfe6:	d0e9      	beq.n	bfbc <_impl_k_timer_stop+0x40>
			if (_is_thread_timeout_expired(thread)) {
    bfe8:	0004      	movs	r4, r0
		_unpend_thread(thread);
    bfea:	f7ff ff1c 	bl	be26 <_unpend_thread>
		_ready_thread(pending_thread);
    bfee:	0020      	movs	r0, r4
    bff0:	f7ff ff0a 	bl	be08 <_ready_thread>
    bff4:	e7e2      	b.n	bfbc <_impl_k_timer_stop+0x40>
		_reschedule_threads(key);
    bff6:	0028      	movs	r0, r5
    bff8:	f7ff fb24 	bl	b644 <_reschedule_threads>
    bffc:	e7e7      	b.n	bfce <_impl_k_timer_stop+0x52>
    bffe:	46c0      	nop			; (mov r8, r8)
    c000:	20000dc8 	.word	0x20000dc8

0000c004 <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
    c004:	6800      	ldr	r0, [r0, #0]
}
    c006:	4770      	bx	lr

0000c008 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    c008:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    c00a:	f3ef 8210 	mrs	r2, PRIMASK
    c00e:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    c010:	6800      	ldr	r0, [r0, #0]
	*target = value;
    c012:	6019      	str	r1, [r3, #0]
	if (key) {
    c014:	2a00      	cmp	r2, #0
    c016:	d100      	bne.n	c01a <atomic_set+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    c018:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    c01a:	4770      	bx	lr

0000c01c <atomic_or>:
	__asm__ volatile("mrs %0, PRIMASK;"
    c01c:	f3ef 8210 	mrs	r2, PRIMASK
    c020:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    c022:	6803      	ldr	r3, [r0, #0]
	*target |= value;
    c024:	4319      	orrs	r1, r3
    c026:	6001      	str	r1, [r0, #0]
	if (key) {
    c028:	2a00      	cmp	r2, #0
    c02a:	d100      	bne.n	c02e <atomic_or+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    c02c:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    c02e:	0018      	movs	r0, r3
    c030:	4770      	bx	lr

0000c032 <atomic_and>:
	__asm__ volatile("mrs %0, PRIMASK;"
    c032:	f3ef 8210 	mrs	r2, PRIMASK
    c036:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    c038:	6803      	ldr	r3, [r0, #0]
	*target &= value;
    c03a:	4019      	ands	r1, r3
    c03c:	6001      	str	r1, [r0, #0]
	if (key) {
    c03e:	2a00      	cmp	r2, #0
    c040:	d100      	bne.n	c044 <atomic_and+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    c042:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    c044:	0018      	movs	r0, r3
    c046:	4770      	bx	lr

0000c048 <sys_dlist_remove>:
	node->prev->next = node->next;
    c048:	6802      	ldr	r2, [r0, #0]
    c04a:	6843      	ldr	r3, [r0, #4]
    c04c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c04e:	6802      	ldr	r2, [r0, #0]
    c050:	6053      	str	r3, [r2, #4]
}
    c052:	4770      	bx	lr

0000c054 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    c054:	b570      	push	{r4, r5, r6, lr}
    c056:	2414      	movs	r4, #20
    c058:	000d      	movs	r5, r1
    c05a:	0016      	movs	r6, r2
    c05c:	434c      	muls	r4, r1
    c05e:	1904      	adds	r4, r0, r4
	for (; last_registered >= 0; last_registered--) {
    c060:	2d00      	cmp	r5, #0
    c062:	da00      	bge.n	c066 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    c064:	bd70      	pop	{r4, r5, r6, pc}
	event->poller = NULL;
    c066:	2300      	movs	r3, #0
    c068:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
    c06a:	7b63      	ldrb	r3, [r4, #13]
    c06c:	071b      	lsls	r3, r3, #28
    c06e:	0f1b      	lsrs	r3, r3, #28
    c070:	2b02      	cmp	r3, #2
    c072:	d003      	beq.n	c07c <clear_event_registrations+0x28>
    c074:	2b04      	cmp	r3, #4
    c076:	d001      	beq.n	c07c <clear_event_registrations+0x28>
    c078:	2b01      	cmp	r3, #1
    c07a:	d102      	bne.n	c082 <clear_event_registrations+0x2e>
		sys_dlist_remove(&event->_node);
    c07c:	0020      	movs	r0, r4
    c07e:	f7ff ffe3 	bl	c048 <sys_dlist_remove>
	if (key) {
    c082:	2e00      	cmp	r6, #0
    c084:	d100      	bne.n	c088 <clear_event_registrations+0x34>
	__asm__ volatile("cpsie i" : : : "memory");
    c086:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    c088:	f3ef 8610 	mrs	r6, PRIMASK
    c08c:	b672      	cpsid	i
	for (; last_registered >= 0; last_registered--) {
    c08e:	3d01      	subs	r5, #1
    c090:	3c14      	subs	r4, #20
    c092:	e7e5      	b.n	c060 <clear_event_registrations+0xc>

0000c094 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
    c094:	2300      	movs	r3, #0
{
    c096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    c098:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    c09a:	6883      	ldr	r3, [r0, #8]
{
    c09c:	0006      	movs	r6, r0
    c09e:	9101      	str	r1, [sp, #4]
    c0a0:	0017      	movs	r7, r2
	if (!event->poller) {
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d039      	beq.n	c11a <_signal_poll_event+0x86>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    c0a6:	681c      	ldr	r4, [r3, #0]
	thread->base.thread_state &= ~states;
    c0a8:	2220      	movs	r2, #32
    c0aa:	7a63      	ldrb	r3, [r4, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    c0ac:	2502      	movs	r5, #2
    c0ae:	0019      	movs	r1, r3
    c0b0:	4391      	bics	r1, r2
    c0b2:	7261      	strb	r1, [r4, #9]
    c0b4:	422b      	tst	r3, r5
    c0b6:	d030      	beq.n	c11a <_signal_poll_event+0x86>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    c0b8:	6a23      	ldr	r3, [r4, #32]
    c0ba:	3302      	adds	r3, #2
    c0bc:	d03c      	beq.n	c138 <_signal_poll_event+0xa4>
	sys_dlist_remove(&thread->base.k_q_node);
    c0be:	0020      	movs	r0, r4
    c0c0:	f7ff ffc2 	bl	c048 <sys_dlist_remove>
	return _abort_timeout(&thread->base.timeout);
    c0c4:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PENDING;
    c0c6:	7a63      	ldrb	r3, [r4, #9]
    c0c8:	3010      	adds	r0, #16
    c0ca:	43ab      	bics	r3, r5
    c0cc:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c0ce:	6a23      	ldr	r3, [r4, #32]
    c0d0:	1c5a      	adds	r2, r3, #1
    c0d2:	d00c      	beq.n	c0ee <_signal_poll_event+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c0d4:	4a1f      	ldr	r2, [pc, #124]	; (c154 <_signal_poll_event+0xc0>)
    c0d6:	6952      	ldr	r2, [r2, #20]
    c0d8:	4290      	cmp	r0, r2
    c0da:	d003      	beq.n	c0e4 <_signal_poll_event+0x50>
	return (node == list->tail) ? NULL : node->next;
    c0dc:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c0de:	6911      	ldr	r1, [r2, #16]
    c0e0:	18cb      	adds	r3, r1, r3
    c0e2:	6113      	str	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    c0e4:	f7ff ffb0 	bl	c048 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    c0e8:	2301      	movs	r3, #1
    c0ea:	425b      	negs	r3, r3
    c0ec:	6223      	str	r3, [r4, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    c0ee:	9b01      	ldr	r3, [sp, #4]
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d01e      	beq.n	c132 <_signal_poll_event+0x9e>
    c0f4:	2300      	movs	r3, #0
	return !(_is_thread_prevented_from_running(thread) ||
    c0f6:	201f      	movs	r0, #31
    c0f8:	7a65      	ldrb	r5, [r4, #9]
    c0fa:	65e3      	str	r3, [r4, #92]	; 0x5c
    c0fc:	4005      	ands	r5, r0
    c0fe:	d10c      	bne.n	c11a <_signal_poll_event+0x86>
    c100:	6a23      	ldr	r3, [r4, #32]
    c102:	3301      	adds	r3, #1
    c104:	d109      	bne.n	c11a <_signal_poll_event+0x86>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    c106:	0020      	movs	r0, r4
    c108:	f7ff f994 	bl	b434 <_add_thread_to_ready_q>
    c10c:	f3ef 8305 	mrs	r3, IPSR
    c110:	2b0d      	cmp	r3, #13
    c112:	d801      	bhi.n	c118 <_signal_poll_event+0x84>
    c114:	2b03      	cmp	r3, #3
    c116:	d112      	bne.n	c13e <_signal_poll_event+0xaa>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c118:	603d      	str	r5, [r7, #0]
	event->state |= state;
    c11a:	7b73      	ldrb	r3, [r6, #13]
    c11c:	9901      	ldr	r1, [sp, #4]
    c11e:	091a      	lsrs	r2, r3, #4
    c120:	4311      	orrs	r1, r2
    c122:	010a      	lsls	r2, r1, #4
    c124:	210f      	movs	r1, #15
	event->poller = NULL;
    c126:	2000      	movs	r0, #0
	event->state |= state;
    c128:	400b      	ands	r3, r1
    c12a:	4313      	orrs	r3, r2
	event->poller = NULL;
    c12c:	60b0      	str	r0, [r6, #8]
	event->state |= state;
    c12e:	7373      	strb	r3, [r6, #13]

ready_event:
	set_event_ready(event, state);
	return 0;
}
    c130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	_set_thread_return_value(thread,
    c132:	2304      	movs	r3, #4
    c134:	425b      	negs	r3, r3
    c136:	e7de      	b.n	c0f6 <_signal_poll_event+0x62>
		return -EAGAIN;
    c138:	200b      	movs	r0, #11
    c13a:	4240      	negs	r0, r0
    c13c:	e7f8      	b.n	c130 <_signal_poll_event+0x9c>
	return _is_preempt(_current) && __must_switch_threads();
    c13e:	4b05      	ldr	r3, [pc, #20]	; (c154 <_signal_poll_event+0xc0>)
    c140:	689b      	ldr	r3, [r3, #8]
    c142:	895b      	ldrh	r3, [r3, #10]
    c144:	2b7f      	cmp	r3, #127	; 0x7f
    c146:	d8e7      	bhi.n	c118 <_signal_poll_event+0x84>
    c148:	f7ff fa6a 	bl	b620 <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c14c:	0005      	movs	r5, r0
    c14e:	1e68      	subs	r0, r5, #1
    c150:	4185      	sbcs	r5, r0
    c152:	e7e1      	b.n	c118 <_signal_poll_event+0x84>
    c154:	20000bd4 	.word	0x20000bd4

0000c158 <add_event>:
	return list->head == list;
    c158:	6803      	ldr	r3, [r0, #0]
{
    c15a:	b530      	push	{r4, r5, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c15c:	4298      	cmp	r0, r3
    c15e:	d00b      	beq.n	c178 <add_event+0x20>
    c160:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    c162:	2c00      	cmp	r4, #0
    c164:	d008      	beq.n	c178 <add_event+0x20>
    c166:	68a5      	ldr	r5, [r4, #8]
    c168:	6812      	ldr	r2, [r2, #0]
    c16a:	682d      	ldr	r5, [r5, #0]
    c16c:	7a92      	ldrb	r2, [r2, #10]
    c16e:	7aad      	ldrb	r5, [r5, #10]
    c170:	b252      	sxtb	r2, r2
    c172:	b26d      	sxtb	r5, r5
    c174:	4295      	cmp	r5, r2
    c176:	da18      	bge.n	c1aa <add_event+0x52>
	node->next = list;
    c178:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    c17a:	6843      	ldr	r3, [r0, #4]
    c17c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    c17e:	6843      	ldr	r3, [r0, #4]
    c180:	6019      	str	r1, [r3, #0]
	list->tail = node;
    c182:	6041      	str	r1, [r0, #4]
    c184:	e00b      	b.n	c19e <add_event+0x46>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    c186:	689d      	ldr	r5, [r3, #8]
    c188:	682d      	ldr	r5, [r5, #0]
    c18a:	7aad      	ldrb	r5, [r5, #10]
    c18c:	b26d      	sxtb	r5, r5
    c18e:	4295      	cmp	r5, r2
    c190:	dd06      	ble.n	c1a0 <add_event+0x48>
		node->prev = insert_point->prev;
    c192:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    c194:	600b      	str	r3, [r1, #0]
		node->prev = insert_point->prev;
    c196:	604a      	str	r2, [r1, #4]
		insert_point->prev->next = node;
    c198:	685a      	ldr	r2, [r3, #4]
    c19a:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    c19c:	6059      	str	r1, [r3, #4]
}
    c19e:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    c1a0:	42a3      	cmp	r3, r4
    c1a2:	d004      	beq.n	c1ae <add_event+0x56>
    c1a4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	d001      	beq.n	c1ae <add_event+0x56>
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d1eb      	bne.n	c186 <add_event+0x2e>
	node->next = list;
    c1ae:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    c1b0:	604c      	str	r4, [r1, #4]
    c1b2:	e7e4      	b.n	c17e <add_event+0x26>

0000c1b4 <k_poll_event_init>:
{
    c1b4:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
    c1b6:	2400      	movs	r4, #0
    c1b8:	6084      	str	r4, [r0, #8]
	event->type = type;
    c1ba:	340f      	adds	r4, #15
    c1bc:	4021      	ands	r1, r4
    c1be:	000d      	movs	r5, r1
    c1c0:	7b41      	ldrb	r1, [r0, #13]
	event->obj = obj;
    c1c2:	6103      	str	r3, [r0, #16]
	event->type = type;
    c1c4:	43a1      	bics	r1, r4
	event->state = K_POLL_STATE_NOT_READY;
    c1c6:	4329      	orrs	r1, r5
    c1c8:	4021      	ands	r1, r4
    c1ca:	7341      	strb	r1, [r0, #13]
	event->mode = mode;
    c1cc:	2101      	movs	r1, #1
    c1ce:	400a      	ands	r2, r1
    c1d0:	0014      	movs	r4, r2
    c1d2:	7b82      	ldrb	r2, [r0, #14]
    c1d4:	438a      	bics	r2, r1
    c1d6:	4322      	orrs	r2, r4
    c1d8:	7382      	strb	r2, [r0, #14]
	event->unused = 0;
    c1da:	89c2      	ldrh	r2, [r0, #14]
    c1dc:	400a      	ands	r2, r1
    c1de:	81c2      	strh	r2, [r0, #14]
}
    c1e0:	bd30      	pop	{r4, r5, pc}
	...

0000c1e4 <k_poll>:
{
    c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1e6:	b089      	sub	sp, #36	; 0x24
    c1e8:	0007      	movs	r7, r0
    c1ea:	9102      	str	r1, [sp, #8]
    c1ec:	9201      	str	r2, [sp, #4]
    c1ee:	f3ef 8010 	mrs	r0, PRIMASK
    c1f2:	b672      	cpsid	i
	thread->base.thread_state |= states;
    c1f4:	2320      	movs	r3, #32
	set_polling_state(_current);
    c1f6:	4a45      	ldr	r2, [pc, #276]	; (c30c <k_poll+0x128>)
    c1f8:	6891      	ldr	r1, [r2, #8]
    c1fa:	7a4c      	ldrb	r4, [r1, #9]
    c1fc:	4323      	orrs	r3, r4
    c1fe:	724b      	strb	r3, [r1, #9]
	if (key) {
    c200:	2800      	cmp	r0, #0
    c202:	d100      	bne.n	c206 <k_poll+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    c204:	b662      	cpsie	i
	int last_registered = -1, rc;
    c206:	2501      	movs	r5, #1
    c208:	003c      	movs	r4, r7
	for (int ii = 0; ii < num_events; ii++) {
    c20a:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current };
    c20c:	6893      	ldr	r3, [r2, #8]
	int last_registered = -1, rc;
    c20e:	426d      	negs	r5, r5
	struct _poller poller = { .thread = _current };
    c210:	9305      	str	r3, [sp, #20]
	for (int ii = 0; ii < num_events; ii++) {
    c212:	9b02      	ldr	r3, [sp, #8]
    c214:	429e      	cmp	r6, r3
    c216:	db14      	blt.n	c242 <k_poll+0x5e>
	__asm__ volatile("mrs %0, PRIMASK;"
    c218:	f3ef 8610 	mrs	r6, PRIMASK
    c21c:	b672      	cpsid	i
	return _is_thread_polling(_current);
    c21e:	4b3b      	ldr	r3, [pc, #236]	; (c30c <k_poll+0x128>)
	if (!is_polling()) {
    c220:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    c222:	689a      	ldr	r2, [r3, #8]
    c224:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    c226:	001c      	movs	r4, r3
    c228:	400c      	ands	r4, r1
    c22a:	d144      	bne.n	c2b6 <k_poll+0xd2>
	clear_event_registrations(events, last_registered, key);
    c22c:	0032      	movs	r2, r6
    c22e:	0029      	movs	r1, r5
    c230:	0038      	movs	r0, r7
    c232:	f7ff ff0f 	bl	c054 <clear_event_registrations>
	if (key) {
    c236:	2e00      	cmp	r6, #0
    c238:	d100      	bne.n	c23c <k_poll+0x58>
	__asm__ volatile("cpsie i" : : : "memory");
    c23a:	b662      	cpsie	i
}
    c23c:	0020      	movs	r0, r4
    c23e:	b009      	add	sp, #36	; 0x24
    c240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    c242:	f3ef 8310 	mrs	r3, PRIMASK
    c246:	b672      	cpsid	i
	switch (event->type) {
    c248:	7b62      	ldrb	r2, [r4, #13]
    c24a:	9303      	str	r3, [sp, #12]
    c24c:	0713      	lsls	r3, r2, #28
    c24e:	0f1b      	lsrs	r3, r3, #28
    c250:	2b02      	cmp	r3, #2
    c252:	d003      	beq.n	c25c <k_poll+0x78>
    c254:	2b04      	cmp	r3, #4
    c256:	d004      	beq.n	c262 <k_poll+0x7e>
    c258:	2b01      	cmp	r3, #1
    c25a:	d106      	bne.n	c26a <k_poll+0x86>
		if (event->signal->signaled) {
    c25c:	6921      	ldr	r1, [r4, #16]
    c25e:	6889      	ldr	r1, [r1, #8]
    c260:	e001      	b.n	c266 <k_poll+0x82>
		if (!k_queue_is_empty(event->queue)) {
    c262:	6921      	ldr	r1, [r4, #16]
    c264:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
    c266:	2900      	cmp	r1, #0
    c268:	d140      	bne.n	c2ec <k_poll+0x108>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    c26a:	9a01      	ldr	r2, [sp, #4]
    c26c:	2a00      	cmp	r2, #0
    c26e:	d018      	beq.n	c2a2 <k_poll+0xbe>
    c270:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    c272:	4a26      	ldr	r2, [pc, #152]	; (c30c <k_poll+0x128>)
		} else if (timeout != K_NO_WAIT && is_polling()) {
    c274:	6892      	ldr	r2, [r2, #8]
    c276:	7a52      	ldrb	r2, [r2, #9]
    c278:	420a      	tst	r2, r1
    c27a:	d012      	beq.n	c2a2 <k_poll+0xbe>
	switch (event->type) {
    c27c:	2b02      	cmp	r3, #2
    c27e:	d007      	beq.n	c290 <k_poll+0xac>
    c280:	2b04      	cmp	r3, #4
    c282:	d015      	beq.n	c2b0 <k_poll+0xcc>
    c284:	2b01      	cmp	r3, #1
    c286:	d109      	bne.n	c29c <k_poll+0xb8>
		add_event(&event->signal->poll_events, event, poller);
    c288:	aa05      	add	r2, sp, #20
    c28a:	0021      	movs	r1, r4
    c28c:	6920      	ldr	r0, [r4, #16]
    c28e:	e003      	b.n	c298 <k_poll+0xb4>
		add_event(&event->sem->poll_events, event, poller);
    c290:	6920      	ldr	r0, [r4, #16]
    c292:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
    c294:	0021      	movs	r1, r4
    c296:	aa05      	add	r2, sp, #20
		add_event(&event->signal->poll_events, event, poller);
    c298:	f7ff ff5e 	bl	c158 <add_event>
	event->poller = poller;
    c29c:	ab05      	add	r3, sp, #20
    c29e:	60a3      	str	r3, [r4, #8]
				++last_registered;
    c2a0:	3501      	adds	r5, #1
	if (key) {
    c2a2:	9b03      	ldr	r3, [sp, #12]
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d100      	bne.n	c2aa <k_poll+0xc6>
	__asm__ volatile("cpsie i" : : : "memory");
    c2a8:	b662      	cpsie	i
	for (int ii = 0; ii < num_events; ii++) {
    c2aa:	3601      	adds	r6, #1
    c2ac:	3414      	adds	r4, #20
    c2ae:	e7b0      	b.n	c212 <k_poll+0x2e>
		add_event(&event->queue->poll_events, event, poller);
    c2b0:	6920      	ldr	r0, [r4, #16]
    c2b2:	3008      	adds	r0, #8
    c2b4:	e7ee      	b.n	c294 <k_poll+0xb0>
	thread->base.thread_state &= ~states;
    c2b6:	438b      	bics	r3, r1
    c2b8:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    c2ba:	9b01      	ldr	r3, [sp, #4]
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d105      	bne.n	c2cc <k_poll+0xe8>
	if (key) {
    c2c0:	2e00      	cmp	r6, #0
    c2c2:	d100      	bne.n	c2c6 <k_poll+0xe2>
	__asm__ volatile("cpsie i" : : : "memory");
    c2c4:	b662      	cpsie	i
		return -EAGAIN;
    c2c6:	240b      	movs	r4, #11
    c2c8:	4264      	negs	r4, r4
    c2ca:	e7b7      	b.n	c23c <k_poll+0x58>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    c2cc:	a806      	add	r0, sp, #24
	_pend_current_thread(&wait_q, timeout);
    c2ce:	9901      	ldr	r1, [sp, #4]
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    c2d0:	9006      	str	r0, [sp, #24]
    c2d2:	6040      	str	r0, [r0, #4]
	_pend_current_thread(&wait_q, timeout);
    c2d4:	f7ff f994 	bl	b600 <_pend_current_thread>
	_update_time_slice_before_swap();
    c2d8:	f7ff fa70 	bl	b7bc <_update_time_slice_before_swap>
	return __swap(key);
    c2dc:	0030      	movs	r0, r6
    c2de:	f7f5 feaf 	bl	2040 <__swap>
    c2e2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    c2e4:	f3ef 8610 	mrs	r6, PRIMASK
    c2e8:	b672      	cpsid	i
    c2ea:	e79f      	b.n	c22c <k_poll+0x48>
	event->poller = NULL;
    c2ec:	2100      	movs	r1, #0
    c2ee:	60a1      	str	r1, [r4, #8]
	event->state |= state;
    c2f0:	0911      	lsrs	r1, r2, #4
    c2f2:	430b      	orrs	r3, r1
    c2f4:	210f      	movs	r1, #15
    c2f6:	011b      	lsls	r3, r3, #4
    c2f8:	400a      	ands	r2, r1
    c2fa:	4313      	orrs	r3, r2
    c2fc:	7363      	strb	r3, [r4, #13]
			clear_polling_state(_current);
    c2fe:	4b03      	ldr	r3, [pc, #12]	; (c30c <k_poll+0x128>)
    c300:	3111      	adds	r1, #17
    c302:	689a      	ldr	r2, [r3, #8]
    c304:	7a53      	ldrb	r3, [r2, #9]
    c306:	438b      	bics	r3, r1
    c308:	7253      	strb	r3, [r2, #9]
    c30a:	e7ca      	b.n	c2a2 <k_poll+0xbe>
    c30c:	20000bd4 	.word	0x20000bd4

0000c310 <_handle_obj_poll_events>:

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    c310:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return list->head == list;
    c312:	6804      	ldr	r4, [r0, #0]
    c314:	000d      	movs	r5, r1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    c316:	42a0      	cmp	r0, r4
    c318:	d101      	bne.n	c31e <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    c31a:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    c31c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    c31e:	0020      	movs	r0, r4
    c320:	f7ff fe92 	bl	c048 <sys_dlist_remove>
	if (!poll_event) {
    c324:	2c00      	cmp	r4, #0
    c326:	d0f8      	beq.n	c31a <_handle_obj_poll_events+0xa>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
    c328:	aa01      	add	r2, sp, #4
    c32a:	0029      	movs	r1, r5
    c32c:	0020      	movs	r0, r4
    c32e:	f7ff feb1 	bl	c094 <_signal_poll_event>
	return must_reschedule;
    c332:	9801      	ldr	r0, [sp, #4]
    c334:	e7f2      	b.n	c31c <_handle_obj_poll_events+0xc>

0000c336 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    c336:	4770      	bx	lr
