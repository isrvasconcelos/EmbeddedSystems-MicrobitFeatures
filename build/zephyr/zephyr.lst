
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
GEN_ABS_SYM_END
       0:	20001a18 	.word	0x20001a18
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
       4:	00002cb5 	.word	0x00002cb5
}
       8:	00002ce9 	.word	0x00002ce9
       c:	00002b69 	.word	0x00002b69
      10:	00002b69 	.word	0x00002b69
      14:	00002b69 	.word	0x00002b69
      18:	00002b69 	.word	0x00002b69
      1c:	00002b69 	.word	0x00002b69
      20:	00002b69 	.word	0x00002b69
      24:	00002b69 	.word	0x00002b69
      28:	00002b69 	.word	0x00002b69
      2c:	0000297d 	.word	0x0000297d
      30:	00002b69 	.word	0x00002b69
      34:	00002b69 	.word	0x00002b69
      38:	00002921 	.word	0x00002921
      3c:	00002b69 	.word	0x00002b69

00000040 <_irq_vector_table>:
      40:	00002c7d 0000aa2b 00002c7d 00002c7d     },..+...},..},..
      50:	00002c7d 00002c7d 00002c7d 00002c7d     },..},..},..},..
      60:	00002c7d 00002c7d 00002c7d 00002c7d     },..},..},..},..
      70:	00002c7d 00002c7d 00002c7d 00002c7d     },..},..},..},..
      80:	00002c7d 00002c7d 00002c7d 00002c7d     },..},..},..},..
      90:	00002c7d 00002c7d 00002c7d 00002c7d     },..},..},..},..
      a0:	00002c7d 00002c7d                       },..},..

000000a8 <_sw_isr_table>:
      a8:	00000000 00003795 00000000 00002add     .....7.......*..
      b8:	00000000 00002add 20002548 00003e5b     .....*..H%. [>..
      c8:	00000000 00002add 00000000 00002add     .....*.......*..
      d8:	20002524 00003999 00000000 00002add     $%. .9.......*..
      e8:	00000000 00002add 00000000 00002add     .....*.......*..
      f8:	00000000 00002add 00000000 0000a9e9     .....*..........
     108:	2000256c 000043c5 00000000 0000aa23     l%. .C......#...
     118:	00000000 00002add 00000000 00002add     .....*.......*..
     128:	00000000 00002add 00000000 00004595     .....*.......E..
     138:	00000000 00002add 00000000 00002add     .....*.......*..
     148:	00000000 00002add 00000000 00002add     .....*.......*..
     158:	00000000 00002add 00000000 00002add     .....*.......*..
     168:	00000000 0000aa19 00000000 00002add     .............*..

00000178 <__gnu_thumb1_case_sqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5609      	ldrsb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uqi>:
     18c:	b402      	push	{r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0049      	lsls	r1, r1, #1
     194:	5c09      	ldrb	r1, [r1, r0]
     196:	0049      	lsls	r1, r1, #1
     198:	448e      	add	lr, r1
     19a:	bc02      	pop	{r1}
     19c:	4770      	bx	lr
     19e:	46c0      	nop			; (mov r8, r8)

000001a0 <__gnu_thumb1_case_shi>:
     1a0:	b403      	push	{r0, r1}
     1a2:	4671      	mov	r1, lr
     1a4:	0849      	lsrs	r1, r1, #1
     1a6:	0040      	lsls	r0, r0, #1
     1a8:	0049      	lsls	r1, r1, #1
     1aa:	5e09      	ldrsh	r1, [r1, r0]
     1ac:	0049      	lsls	r1, r1, #1
     1ae:	448e      	add	lr, r1
     1b0:	bc03      	pop	{r0, r1}
     1b2:	4770      	bx	lr

000001b4 <__gnu_thumb1_case_uhi>:
     1b4:	b403      	push	{r0, r1}
     1b6:	4671      	mov	r1, lr
     1b8:	0849      	lsrs	r1, r1, #1
     1ba:	0040      	lsls	r0, r0, #1
     1bc:	0049      	lsls	r1, r1, #1
     1be:	5a09      	ldrh	r1, [r1, r0]
     1c0:	0049      	lsls	r1, r1, #1
     1c2:	448e      	add	lr, r1
     1c4:	bc03      	pop	{r0, r1}
     1c6:	4770      	bx	lr

000001c8 <__aeabi_uidiv>:
     1c8:	2900      	cmp	r1, #0
     1ca:	d034      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>

000001cc <.udivsi3_skip_div0_test>:
     1cc:	2301      	movs	r3, #1
     1ce:	2200      	movs	r2, #0
     1d0:	b410      	push	{r4}
     1d2:	4288      	cmp	r0, r1
     1d4:	d32c      	bcc.n	230 <.udivsi3_skip_div0_test+0x64>
     1d6:	2401      	movs	r4, #1
     1d8:	0724      	lsls	r4, r4, #28
     1da:	42a1      	cmp	r1, r4
     1dc:	d204      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1de:	4281      	cmp	r1, r0
     1e0:	d202      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1e2:	0109      	lsls	r1, r1, #4
     1e4:	011b      	lsls	r3, r3, #4
     1e6:	e7f8      	b.n	1da <.udivsi3_skip_div0_test+0xe>
     1e8:	00e4      	lsls	r4, r4, #3
     1ea:	42a1      	cmp	r1, r4
     1ec:	d204      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1ee:	4281      	cmp	r1, r0
     1f0:	d202      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1f2:	0049      	lsls	r1, r1, #1
     1f4:	005b      	lsls	r3, r3, #1
     1f6:	e7f8      	b.n	1ea <.udivsi3_skip_div0_test+0x1e>
     1f8:	4288      	cmp	r0, r1
     1fa:	d301      	bcc.n	200 <.udivsi3_skip_div0_test+0x34>
     1fc:	1a40      	subs	r0, r0, r1
     1fe:	431a      	orrs	r2, r3
     200:	084c      	lsrs	r4, r1, #1
     202:	42a0      	cmp	r0, r4
     204:	d302      	bcc.n	20c <.udivsi3_skip_div0_test+0x40>
     206:	1b00      	subs	r0, r0, r4
     208:	085c      	lsrs	r4, r3, #1
     20a:	4322      	orrs	r2, r4
     20c:	088c      	lsrs	r4, r1, #2
     20e:	42a0      	cmp	r0, r4
     210:	d302      	bcc.n	218 <.udivsi3_skip_div0_test+0x4c>
     212:	1b00      	subs	r0, r0, r4
     214:	089c      	lsrs	r4, r3, #2
     216:	4322      	orrs	r2, r4
     218:	08cc      	lsrs	r4, r1, #3
     21a:	42a0      	cmp	r0, r4
     21c:	d302      	bcc.n	224 <.udivsi3_skip_div0_test+0x58>
     21e:	1b00      	subs	r0, r0, r4
     220:	08dc      	lsrs	r4, r3, #3
     222:	4322      	orrs	r2, r4
     224:	2800      	cmp	r0, #0
     226:	d003      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     228:	091b      	lsrs	r3, r3, #4
     22a:	d001      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     22c:	0909      	lsrs	r1, r1, #4
     22e:	e7e3      	b.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     230:	1c10      	adds	r0, r2, #0
     232:	bc10      	pop	{r4}
     234:	4770      	bx	lr
     236:	2800      	cmp	r0, #0
     238:	d001      	beq.n	23e <.udivsi3_skip_div0_test+0x72>
     23a:	2000      	movs	r0, #0
     23c:	43c0      	mvns	r0, r0
     23e:	b407      	push	{r0, r1, r2}
     240:	4802      	ldr	r0, [pc, #8]	; (24c <.udivsi3_skip_div0_test+0x80>)
     242:	a102      	add	r1, pc, #8	; (adr r1, 24c <.udivsi3_skip_div0_test+0x80>)
     244:	1840      	adds	r0, r0, r1
     246:	9002      	str	r0, [sp, #8]
     248:	bd03      	pop	{r0, r1, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	000000d9 	.word	0x000000d9

00000250 <__aeabi_uidivmod>:
     250:	2900      	cmp	r1, #0
     252:	d0f0      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>
     254:	b503      	push	{r0, r1, lr}
     256:	f7ff ffb9 	bl	1cc <.udivsi3_skip_div0_test>
     25a:	bc0e      	pop	{r1, r2, r3}
     25c:	4342      	muls	r2, r0
     25e:	1a89      	subs	r1, r1, r2
     260:	4718      	bx	r3
     262:	46c0      	nop			; (mov r8, r8)

00000264 <__aeabi_idiv>:
     264:	2900      	cmp	r1, #0
     266:	d041      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>

00000268 <.divsi3_skip_div0_test>:
     268:	b410      	push	{r4}
     26a:	1c04      	adds	r4, r0, #0
     26c:	404c      	eors	r4, r1
     26e:	46a4      	mov	ip, r4
     270:	2301      	movs	r3, #1
     272:	2200      	movs	r2, #0
     274:	2900      	cmp	r1, #0
     276:	d500      	bpl.n	27a <.divsi3_skip_div0_test+0x12>
     278:	4249      	negs	r1, r1
     27a:	2800      	cmp	r0, #0
     27c:	d500      	bpl.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     27e:	4240      	negs	r0, r0
     280:	4288      	cmp	r0, r1
     282:	d32c      	bcc.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     284:	2401      	movs	r4, #1
     286:	0724      	lsls	r4, r4, #28
     288:	42a1      	cmp	r1, r4
     28a:	d204      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     28c:	4281      	cmp	r1, r0
     28e:	d202      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     290:	0109      	lsls	r1, r1, #4
     292:	011b      	lsls	r3, r3, #4
     294:	e7f8      	b.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     296:	00e4      	lsls	r4, r4, #3
     298:	42a1      	cmp	r1, r4
     29a:	d204      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     29c:	4281      	cmp	r1, r0
     29e:	d202      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2a0:	0049      	lsls	r1, r1, #1
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	e7f8      	b.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     2a6:	4288      	cmp	r0, r1
     2a8:	d301      	bcc.n	2ae <CONFIG_BT_HCI_TX_STACK_SIZE+0x2e>
     2aa:	1a40      	subs	r0, r0, r1
     2ac:	431a      	orrs	r2, r3
     2ae:	084c      	lsrs	r4, r1, #1
     2b0:	42a0      	cmp	r0, r4
     2b2:	d302      	bcc.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2b4:	1b00      	subs	r0, r0, r4
     2b6:	085c      	lsrs	r4, r3, #1
     2b8:	4322      	orrs	r2, r4
     2ba:	088c      	lsrs	r4, r1, #2
     2bc:	42a0      	cmp	r0, r4
     2be:	d302      	bcc.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2c0:	1b00      	subs	r0, r0, r4
     2c2:	089c      	lsrs	r4, r3, #2
     2c4:	4322      	orrs	r2, r4
     2c6:	08cc      	lsrs	r4, r1, #3
     2c8:	42a0      	cmp	r0, r4
     2ca:	d302      	bcc.n	2d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x52>
     2cc:	1b00      	subs	r0, r0, r4
     2ce:	08dc      	lsrs	r4, r3, #3
     2d0:	4322      	orrs	r2, r4
     2d2:	2800      	cmp	r0, #0
     2d4:	d003      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2d6:	091b      	lsrs	r3, r3, #4
     2d8:	d001      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2da:	0909      	lsrs	r1, r1, #4
     2dc:	e7e3      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2de:	1c10      	adds	r0, r2, #0
     2e0:	4664      	mov	r4, ip
     2e2:	2c00      	cmp	r4, #0
     2e4:	d500      	bpl.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     2e6:	4240      	negs	r0, r0
     2e8:	bc10      	pop	{r4}
     2ea:	4770      	bx	lr
     2ec:	2800      	cmp	r0, #0
     2ee:	d006      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f0:	db03      	blt.n	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     2f2:	2000      	movs	r0, #0
     2f4:	43c0      	mvns	r0, r0
     2f6:	0840      	lsrs	r0, r0, #1
     2f8:	e001      	b.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2fa:	2080      	movs	r0, #128	; 0x80
     2fc:	0600      	lsls	r0, r0, #24
     2fe:	b407      	push	{r0, r1, r2}
     300:	4802      	ldr	r0, [pc, #8]	; (30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     302:	a102      	add	r1, pc, #8	; (adr r1, 30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     304:	1840      	adds	r0, r0, r1
     306:	9002      	str	r0, [sp, #8]
     308:	bd03      	pop	{r0, r1, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000019 	.word	0x00000019

00000310 <__aeabi_idivmod>:
     310:	2900      	cmp	r1, #0
     312:	d0eb      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     314:	b503      	push	{r0, r1, lr}
     316:	f7ff ffa7 	bl	268 <.divsi3_skip_div0_test>
     31a:	bc0e      	pop	{r1, r2, r3}
     31c:	4342      	muls	r2, r0
     31e:	1a89      	subs	r1, r1, r2
     320:	4718      	bx	r3
     322:	46c0      	nop			; (mov r8, r8)

00000324 <__aeabi_idiv0>:
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)

00000328 <__aeabi_llsr>:
     328:	40d0      	lsrs	r0, r2
     32a:	1c0b      	adds	r3, r1, #0
     32c:	40d1      	lsrs	r1, r2
     32e:	469c      	mov	ip, r3
     330:	3a20      	subs	r2, #32
     332:	40d3      	lsrs	r3, r2
     334:	4318      	orrs	r0, r3
     336:	4252      	negs	r2, r2
     338:	4663      	mov	r3, ip
     33a:	4093      	lsls	r3, r2
     33c:	4318      	orrs	r0, r3
     33e:	4770      	bx	lr

00000340 <__aeabi_llsl>:
     340:	4091      	lsls	r1, r2
     342:	1c03      	adds	r3, r0, #0
     344:	4090      	lsls	r0, r2
     346:	469c      	mov	ip, r3
     348:	3a20      	subs	r2, #32
     34a:	4093      	lsls	r3, r2
     34c:	4319      	orrs	r1, r3
     34e:	4252      	negs	r2, r2
     350:	4663      	mov	r3, ip
     352:	40d3      	lsrs	r3, r2
     354:	4319      	orrs	r1, r3
     356:	4770      	bx	lr

00000358 <__aeabi_uldivmod>:
     358:	2b00      	cmp	r3, #0
     35a:	d111      	bne.n	380 <__aeabi_uldivmod+0x28>
     35c:	2a00      	cmp	r2, #0
     35e:	d10f      	bne.n	380 <__aeabi_uldivmod+0x28>
     360:	2900      	cmp	r1, #0
     362:	d100      	bne.n	366 <__aeabi_uldivmod+0xe>
     364:	2800      	cmp	r0, #0
     366:	d002      	beq.n	36e <__aeabi_uldivmod+0x16>
     368:	2100      	movs	r1, #0
     36a:	43c9      	mvns	r1, r1
     36c:	1c08      	adds	r0, r1, #0
     36e:	b407      	push	{r0, r1, r2}
     370:	4802      	ldr	r0, [pc, #8]	; (37c <__aeabi_uldivmod+0x24>)
     372:	a102      	add	r1, pc, #8	; (adr r1, 37c <__aeabi_uldivmod+0x24>)
     374:	1840      	adds	r0, r0, r1
     376:	9002      	str	r0, [sp, #8]
     378:	bd03      	pop	{r0, r1, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	ffffffa9 	.word	0xffffffa9
     380:	b403      	push	{r0, r1}
     382:	4668      	mov	r0, sp
     384:	b501      	push	{r0, lr}
     386:	9802      	ldr	r0, [sp, #8]
     388:	f000 f872 	bl	470 <__udivmoddi4>
     38c:	9b01      	ldr	r3, [sp, #4]
     38e:	469e      	mov	lr, r3
     390:	b002      	add	sp, #8
     392:	bc0c      	pop	{r2, r3}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)

00000398 <__aeabi_lmul>:
     398:	b5f0      	push	{r4, r5, r6, r7, lr}
     39a:	464f      	mov	r7, r9
     39c:	4646      	mov	r6, r8
     39e:	0415      	lsls	r5, r2, #16
     3a0:	0c2d      	lsrs	r5, r5, #16
     3a2:	b4c0      	push	{r6, r7}
     3a4:	002e      	movs	r6, r5
     3a6:	0407      	lsls	r7, r0, #16
     3a8:	0c14      	lsrs	r4, r2, #16
     3aa:	0c3f      	lsrs	r7, r7, #16
     3ac:	4699      	mov	r9, r3
     3ae:	0c03      	lsrs	r3, r0, #16
     3b0:	437e      	muls	r6, r7
     3b2:	435d      	muls	r5, r3
     3b4:	4367      	muls	r7, r4
     3b6:	4363      	muls	r3, r4
     3b8:	197f      	adds	r7, r7, r5
     3ba:	0c34      	lsrs	r4, r6, #16
     3bc:	19e4      	adds	r4, r4, r7
     3be:	469c      	mov	ip, r3
     3c0:	42a5      	cmp	r5, r4
     3c2:	d903      	bls.n	3cc <__aeabi_lmul+0x34>
     3c4:	2380      	movs	r3, #128	; 0x80
     3c6:	025b      	lsls	r3, r3, #9
     3c8:	4698      	mov	r8, r3
     3ca:	44c4      	add	ip, r8
     3cc:	464b      	mov	r3, r9
     3ce:	4351      	muls	r1, r2
     3d0:	4343      	muls	r3, r0
     3d2:	0436      	lsls	r6, r6, #16
     3d4:	0c36      	lsrs	r6, r6, #16
     3d6:	0c25      	lsrs	r5, r4, #16
     3d8:	0424      	lsls	r4, r4, #16
     3da:	4465      	add	r5, ip
     3dc:	19a4      	adds	r4, r4, r6
     3de:	1859      	adds	r1, r3, r1
     3e0:	1949      	adds	r1, r1, r5
     3e2:	0020      	movs	r0, r4
     3e4:	bc0c      	pop	{r2, r3}
     3e6:	4690      	mov	r8, r2
     3e8:	4699      	mov	r9, r3
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003ec <__ffssi2>:
     3ec:	b510      	push	{r4, lr}
     3ee:	2300      	movs	r3, #0
     3f0:	2800      	cmp	r0, #0
     3f2:	d002      	beq.n	3fa <__ffssi2+0xe>
     3f4:	f001 fb34 	bl	1a60 <__ctzsi2>
     3f8:	1c43      	adds	r3, r0, #1
     3fa:	0018      	movs	r0, r3
     3fc:	bd10      	pop	{r4, pc}
     3fe:	46c0      	nop			; (mov r8, r8)

00000400 <__popcountsi2>:
     400:	4a09      	ldr	r2, [pc, #36]	; (428 <CONFIG_BT_RX_STACK_SIZE+0x28>)
     402:	0843      	lsrs	r3, r0, #1
     404:	4013      	ands	r3, r2
     406:	1ac0      	subs	r0, r0, r3
     408:	0003      	movs	r3, r0
     40a:	4a08      	ldr	r2, [pc, #32]	; (42c <CONFIG_BT_RX_STACK_SIZE+0x2c>)
     40c:	0880      	lsrs	r0, r0, #2
     40e:	4010      	ands	r0, r2
     410:	4013      	ands	r3, r2
     412:	181b      	adds	r3, r3, r0
     414:	0918      	lsrs	r0, r3, #4
     416:	18c0      	adds	r0, r0, r3
     418:	4b05      	ldr	r3, [pc, #20]	; (430 <CONFIG_BT_RX_STACK_SIZE+0x30>)
     41a:	4003      	ands	r3, r0
     41c:	0218      	lsls	r0, r3, #8
     41e:	18c0      	adds	r0, r0, r3
     420:	0403      	lsls	r3, r0, #16
     422:	18c0      	adds	r0, r0, r3
     424:	0e00      	lsrs	r0, r0, #24
     426:	4770      	bx	lr
     428:	55555555 	.word	0x55555555
     42c:	33333333 	.word	0x33333333
     430:	0f0f0f0f 	.word	0x0f0f0f0f

00000434 <__aeabi_d2uiz>:
     434:	b570      	push	{r4, r5, r6, lr}
     436:	2200      	movs	r2, #0
     438:	4b0c      	ldr	r3, [pc, #48]	; (46c <__aeabi_d2uiz+0x38>)
     43a:	0004      	movs	r4, r0
     43c:	000d      	movs	r5, r1
     43e:	f001 fadb 	bl	19f8 <__aeabi_dcmpge>
     442:	2800      	cmp	r0, #0
     444:	d104      	bne.n	450 <__aeabi_d2uiz+0x1c>
     446:	0020      	movs	r0, r4
     448:	0029      	movs	r1, r5
     44a:	f001 fa2b 	bl	18a4 <__aeabi_d2iz>
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <__aeabi_d2uiz+0x38>)
     452:	2200      	movs	r2, #0
     454:	0020      	movs	r0, r4
     456:	0029      	movs	r1, r5
     458:	f000 ff0e 	bl	1278 <__aeabi_dsub>
     45c:	f001 fa22 	bl	18a4 <__aeabi_d2iz>
     460:	2380      	movs	r3, #128	; 0x80
     462:	061b      	lsls	r3, r3, #24
     464:	469c      	mov	ip, r3
     466:	4460      	add	r0, ip
     468:	e7f1      	b.n	44e <__aeabi_d2uiz+0x1a>
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	41e00000 	.word	0x41e00000

00000470 <__udivmoddi4>:
     470:	b5f0      	push	{r4, r5, r6, r7, lr}
     472:	464d      	mov	r5, r9
     474:	4656      	mov	r6, sl
     476:	4644      	mov	r4, r8
     478:	465f      	mov	r7, fp
     47a:	b4f0      	push	{r4, r5, r6, r7}
     47c:	4692      	mov	sl, r2
     47e:	b083      	sub	sp, #12
     480:	0004      	movs	r4, r0
     482:	000d      	movs	r5, r1
     484:	4699      	mov	r9, r3
     486:	428b      	cmp	r3, r1
     488:	d82f      	bhi.n	4ea <__udivmoddi4+0x7a>
     48a:	d02c      	beq.n	4e6 <__udivmoddi4+0x76>
     48c:	4649      	mov	r1, r9
     48e:	4650      	mov	r0, sl
     490:	f001 fada 	bl	1a48 <__clzdi2>
     494:	0029      	movs	r1, r5
     496:	0006      	movs	r6, r0
     498:	0020      	movs	r0, r4
     49a:	f001 fad5 	bl	1a48 <__clzdi2>
     49e:	1a33      	subs	r3, r6, r0
     4a0:	4698      	mov	r8, r3
     4a2:	3b20      	subs	r3, #32
     4a4:	469b      	mov	fp, r3
     4a6:	d500      	bpl.n	4aa <__udivmoddi4+0x3a>
     4a8:	e074      	b.n	594 <__udivmoddi4+0x124>
     4aa:	4653      	mov	r3, sl
     4ac:	465a      	mov	r2, fp
     4ae:	4093      	lsls	r3, r2
     4b0:	001f      	movs	r7, r3
     4b2:	4653      	mov	r3, sl
     4b4:	4642      	mov	r2, r8
     4b6:	4093      	lsls	r3, r2
     4b8:	001e      	movs	r6, r3
     4ba:	42af      	cmp	r7, r5
     4bc:	d829      	bhi.n	512 <__udivmoddi4+0xa2>
     4be:	d026      	beq.n	50e <__udivmoddi4+0x9e>
     4c0:	465b      	mov	r3, fp
     4c2:	1ba4      	subs	r4, r4, r6
     4c4:	41bd      	sbcs	r5, r7
     4c6:	2b00      	cmp	r3, #0
     4c8:	da00      	bge.n	4cc <__udivmoddi4+0x5c>
     4ca:	e079      	b.n	5c0 <__udivmoddi4+0x150>
     4cc:	2200      	movs	r2, #0
     4ce:	2300      	movs	r3, #0
     4d0:	9200      	str	r2, [sp, #0]
     4d2:	9301      	str	r3, [sp, #4]
     4d4:	2301      	movs	r3, #1
     4d6:	465a      	mov	r2, fp
     4d8:	4093      	lsls	r3, r2
     4da:	9301      	str	r3, [sp, #4]
     4dc:	2301      	movs	r3, #1
     4de:	4642      	mov	r2, r8
     4e0:	4093      	lsls	r3, r2
     4e2:	9300      	str	r3, [sp, #0]
     4e4:	e019      	b.n	51a <__udivmoddi4+0xaa>
     4e6:	4282      	cmp	r2, r0
     4e8:	d9d0      	bls.n	48c <__udivmoddi4+0x1c>
     4ea:	2200      	movs	r2, #0
     4ec:	2300      	movs	r3, #0
     4ee:	9200      	str	r2, [sp, #0]
     4f0:	9301      	str	r3, [sp, #4]
     4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     4f4:	2b00      	cmp	r3, #0
     4f6:	d001      	beq.n	4fc <__udivmoddi4+0x8c>
     4f8:	601c      	str	r4, [r3, #0]
     4fa:	605d      	str	r5, [r3, #4]
     4fc:	9800      	ldr	r0, [sp, #0]
     4fe:	9901      	ldr	r1, [sp, #4]
     500:	b003      	add	sp, #12
     502:	bc3c      	pop	{r2, r3, r4, r5}
     504:	4690      	mov	r8, r2
     506:	4699      	mov	r9, r3
     508:	46a2      	mov	sl, r4
     50a:	46ab      	mov	fp, r5
     50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     50e:	42a3      	cmp	r3, r4
     510:	d9d6      	bls.n	4c0 <__udivmoddi4+0x50>
     512:	2200      	movs	r2, #0
     514:	2300      	movs	r3, #0
     516:	9200      	str	r2, [sp, #0]
     518:	9301      	str	r3, [sp, #4]
     51a:	4643      	mov	r3, r8
     51c:	2b00      	cmp	r3, #0
     51e:	d0e8      	beq.n	4f2 <__udivmoddi4+0x82>
     520:	07fb      	lsls	r3, r7, #31
     522:	0872      	lsrs	r2, r6, #1
     524:	431a      	orrs	r2, r3
     526:	4646      	mov	r6, r8
     528:	087b      	lsrs	r3, r7, #1
     52a:	e00e      	b.n	54a <__udivmoddi4+0xda>
     52c:	42ab      	cmp	r3, r5
     52e:	d101      	bne.n	534 <__udivmoddi4+0xc4>
     530:	42a2      	cmp	r2, r4
     532:	d80c      	bhi.n	54e <__udivmoddi4+0xde>
     534:	1aa4      	subs	r4, r4, r2
     536:	419d      	sbcs	r5, r3
     538:	2001      	movs	r0, #1
     53a:	1924      	adds	r4, r4, r4
     53c:	416d      	adcs	r5, r5
     53e:	2100      	movs	r1, #0
     540:	3e01      	subs	r6, #1
     542:	1824      	adds	r4, r4, r0
     544:	414d      	adcs	r5, r1
     546:	2e00      	cmp	r6, #0
     548:	d006      	beq.n	558 <__udivmoddi4+0xe8>
     54a:	42ab      	cmp	r3, r5
     54c:	d9ee      	bls.n	52c <__udivmoddi4+0xbc>
     54e:	3e01      	subs	r6, #1
     550:	1924      	adds	r4, r4, r4
     552:	416d      	adcs	r5, r5
     554:	2e00      	cmp	r6, #0
     556:	d1f8      	bne.n	54a <__udivmoddi4+0xda>
     558:	465b      	mov	r3, fp
     55a:	9800      	ldr	r0, [sp, #0]
     55c:	9901      	ldr	r1, [sp, #4]
     55e:	1900      	adds	r0, r0, r4
     560:	4169      	adcs	r1, r5
     562:	2b00      	cmp	r3, #0
     564:	db22      	blt.n	5ac <__udivmoddi4+0x13c>
     566:	002b      	movs	r3, r5
     568:	465a      	mov	r2, fp
     56a:	40d3      	lsrs	r3, r2
     56c:	002a      	movs	r2, r5
     56e:	4644      	mov	r4, r8
     570:	40e2      	lsrs	r2, r4
     572:	001c      	movs	r4, r3
     574:	465b      	mov	r3, fp
     576:	0015      	movs	r5, r2
     578:	2b00      	cmp	r3, #0
     57a:	db2c      	blt.n	5d6 <__udivmoddi4+0x166>
     57c:	0026      	movs	r6, r4
     57e:	409e      	lsls	r6, r3
     580:	0033      	movs	r3, r6
     582:	0026      	movs	r6, r4
     584:	4647      	mov	r7, r8
     586:	40be      	lsls	r6, r7
     588:	0032      	movs	r2, r6
     58a:	1a80      	subs	r0, r0, r2
     58c:	4199      	sbcs	r1, r3
     58e:	9000      	str	r0, [sp, #0]
     590:	9101      	str	r1, [sp, #4]
     592:	e7ae      	b.n	4f2 <__udivmoddi4+0x82>
     594:	4642      	mov	r2, r8
     596:	2320      	movs	r3, #32
     598:	1a9b      	subs	r3, r3, r2
     59a:	4652      	mov	r2, sl
     59c:	40da      	lsrs	r2, r3
     59e:	4641      	mov	r1, r8
     5a0:	0013      	movs	r3, r2
     5a2:	464a      	mov	r2, r9
     5a4:	408a      	lsls	r2, r1
     5a6:	0017      	movs	r7, r2
     5a8:	431f      	orrs	r7, r3
     5aa:	e782      	b.n	4b2 <__udivmoddi4+0x42>
     5ac:	4642      	mov	r2, r8
     5ae:	2320      	movs	r3, #32
     5b0:	1a9b      	subs	r3, r3, r2
     5b2:	002a      	movs	r2, r5
     5b4:	4646      	mov	r6, r8
     5b6:	409a      	lsls	r2, r3
     5b8:	0023      	movs	r3, r4
     5ba:	40f3      	lsrs	r3, r6
     5bc:	4313      	orrs	r3, r2
     5be:	e7d5      	b.n	56c <__udivmoddi4+0xfc>
     5c0:	4642      	mov	r2, r8
     5c2:	2320      	movs	r3, #32
     5c4:	2100      	movs	r1, #0
     5c6:	1a9b      	subs	r3, r3, r2
     5c8:	2200      	movs	r2, #0
     5ca:	9100      	str	r1, [sp, #0]
     5cc:	9201      	str	r2, [sp, #4]
     5ce:	2201      	movs	r2, #1
     5d0:	40da      	lsrs	r2, r3
     5d2:	9201      	str	r2, [sp, #4]
     5d4:	e782      	b.n	4dc <__udivmoddi4+0x6c>
     5d6:	4642      	mov	r2, r8
     5d8:	2320      	movs	r3, #32
     5da:	0026      	movs	r6, r4
     5dc:	1a9b      	subs	r3, r3, r2
     5de:	40de      	lsrs	r6, r3
     5e0:	002f      	movs	r7, r5
     5e2:	46b4      	mov	ip, r6
     5e4:	4097      	lsls	r7, r2
     5e6:	4666      	mov	r6, ip
     5e8:	003b      	movs	r3, r7
     5ea:	4333      	orrs	r3, r6
     5ec:	e7c9      	b.n	582 <__udivmoddi4+0x112>
     5ee:	46c0      	nop			; (mov r8, r8)

000005f0 <__aeabi_dadd>:
     5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5f2:	465f      	mov	r7, fp
     5f4:	4644      	mov	r4, r8
     5f6:	4656      	mov	r6, sl
     5f8:	464d      	mov	r5, r9
     5fa:	b4f0      	push	{r4, r5, r6, r7}
     5fc:	030c      	lsls	r4, r1, #12
     5fe:	004e      	lsls	r6, r1, #1
     600:	0fc9      	lsrs	r1, r1, #31
     602:	4688      	mov	r8, r1
     604:	000d      	movs	r5, r1
     606:	0a61      	lsrs	r1, r4, #9
     608:	0f44      	lsrs	r4, r0, #29
     60a:	430c      	orrs	r4, r1
     60c:	00c7      	lsls	r7, r0, #3
     60e:	0319      	lsls	r1, r3, #12
     610:	0058      	lsls	r0, r3, #1
     612:	0fdb      	lsrs	r3, r3, #31
     614:	469b      	mov	fp, r3
     616:	0a4b      	lsrs	r3, r1, #9
     618:	0f51      	lsrs	r1, r2, #29
     61a:	430b      	orrs	r3, r1
     61c:	0d76      	lsrs	r6, r6, #21
     61e:	0d40      	lsrs	r0, r0, #21
     620:	0019      	movs	r1, r3
     622:	00d2      	lsls	r2, r2, #3
     624:	45d8      	cmp	r8, fp
     626:	d100      	bne.n	62a <CONFIG_BT_CTLR_COMPANY_ID+0x39>
     628:	e0ae      	b.n	788 <CONFIG_BT_CTLR_COMPANY_ID+0x197>
     62a:	1a35      	subs	r5, r6, r0
     62c:	2d00      	cmp	r5, #0
     62e:	dc00      	bgt.n	632 <CONFIG_BT_CTLR_COMPANY_ID+0x41>
     630:	e0f6      	b.n	820 <CONFIG_BT_CTLR_COMPANY_ID+0x22f>
     632:	2800      	cmp	r0, #0
     634:	d10f      	bne.n	656 <CONFIG_BT_CTLR_COMPANY_ID+0x65>
     636:	4313      	orrs	r3, r2
     638:	d100      	bne.n	63c <CONFIG_BT_CTLR_COMPANY_ID+0x4b>
     63a:	e0db      	b.n	7f4 <CONFIG_BT_CTLR_COMPANY_ID+0x203>
     63c:	1e6b      	subs	r3, r5, #1
     63e:	2b00      	cmp	r3, #0
     640:	d000      	beq.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
     642:	e137      	b.n	8b4 <CONFIG_BT_CTLR_COMPANY_ID+0x2c3>
     644:	1aba      	subs	r2, r7, r2
     646:	4297      	cmp	r7, r2
     648:	41bf      	sbcs	r7, r7
     64a:	1a64      	subs	r4, r4, r1
     64c:	427f      	negs	r7, r7
     64e:	1be4      	subs	r4, r4, r7
     650:	2601      	movs	r6, #1
     652:	0017      	movs	r7, r2
     654:	e024      	b.n	6a0 <CONFIG_BT_CTLR_COMPANY_ID+0xaf>
     656:	4bc6      	ldr	r3, [pc, #792]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     658:	429e      	cmp	r6, r3
     65a:	d04d      	beq.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     65c:	2380      	movs	r3, #128	; 0x80
     65e:	041b      	lsls	r3, r3, #16
     660:	4319      	orrs	r1, r3
     662:	2d38      	cmp	r5, #56	; 0x38
     664:	dd00      	ble.n	668 <CONFIG_BT_CTLR_COMPANY_ID+0x77>
     666:	e107      	b.n	878 <CONFIG_BT_CTLR_COMPANY_ID+0x287>
     668:	2d1f      	cmp	r5, #31
     66a:	dd00      	ble.n	66e <CONFIG_BT_CTLR_COMPANY_ID+0x7d>
     66c:	e138      	b.n	8e0 <CONFIG_BT_CTLR_COMPANY_ID+0x2ef>
     66e:	2020      	movs	r0, #32
     670:	1b43      	subs	r3, r0, r5
     672:	469a      	mov	sl, r3
     674:	000b      	movs	r3, r1
     676:	4650      	mov	r0, sl
     678:	4083      	lsls	r3, r0
     67a:	4699      	mov	r9, r3
     67c:	0013      	movs	r3, r2
     67e:	4648      	mov	r0, r9
     680:	40eb      	lsrs	r3, r5
     682:	4318      	orrs	r0, r3
     684:	0003      	movs	r3, r0
     686:	4650      	mov	r0, sl
     688:	4082      	lsls	r2, r0
     68a:	1e50      	subs	r0, r2, #1
     68c:	4182      	sbcs	r2, r0
     68e:	40e9      	lsrs	r1, r5
     690:	431a      	orrs	r2, r3
     692:	1aba      	subs	r2, r7, r2
     694:	1a61      	subs	r1, r4, r1
     696:	4297      	cmp	r7, r2
     698:	41a4      	sbcs	r4, r4
     69a:	0017      	movs	r7, r2
     69c:	4264      	negs	r4, r4
     69e:	1b0c      	subs	r4, r1, r4
     6a0:	0223      	lsls	r3, r4, #8
     6a2:	d562      	bpl.n	76a <CONFIG_BT_CTLR_COMPANY_ID+0x179>
     6a4:	0264      	lsls	r4, r4, #9
     6a6:	0a65      	lsrs	r5, r4, #9
     6a8:	2d00      	cmp	r5, #0
     6aa:	d100      	bne.n	6ae <CONFIG_BT_CTLR_COMPANY_ID+0xbd>
     6ac:	e0df      	b.n	86e <CONFIG_BT_CTLR_COMPANY_ID+0x27d>
     6ae:	0028      	movs	r0, r5
     6b0:	f001 f9ac 	bl	1a0c <__clzsi2>
     6b4:	0003      	movs	r3, r0
     6b6:	3b08      	subs	r3, #8
     6b8:	2b1f      	cmp	r3, #31
     6ba:	dd00      	ble.n	6be <CONFIG_BT_CTLR_COMPANY_ID+0xcd>
     6bc:	e0d2      	b.n	864 <CONFIG_BT_CTLR_COMPANY_ID+0x273>
     6be:	2220      	movs	r2, #32
     6c0:	003c      	movs	r4, r7
     6c2:	1ad2      	subs	r2, r2, r3
     6c4:	409d      	lsls	r5, r3
     6c6:	40d4      	lsrs	r4, r2
     6c8:	409f      	lsls	r7, r3
     6ca:	4325      	orrs	r5, r4
     6cc:	429e      	cmp	r6, r3
     6ce:	dd00      	ble.n	6d2 <CONFIG_BT_CTLR_COMPANY_ID+0xe1>
     6d0:	e0c4      	b.n	85c <CONFIG_BT_CTLR_COMPANY_ID+0x26b>
     6d2:	1b9e      	subs	r6, r3, r6
     6d4:	1c73      	adds	r3, r6, #1
     6d6:	2b1f      	cmp	r3, #31
     6d8:	dd00      	ble.n	6dc <CONFIG_BT_CTLR_COMPANY_ID+0xeb>
     6da:	e0f1      	b.n	8c0 <CONFIG_BT_CTLR_COMPANY_ID+0x2cf>
     6dc:	2220      	movs	r2, #32
     6de:	0038      	movs	r0, r7
     6e0:	0029      	movs	r1, r5
     6e2:	1ad2      	subs	r2, r2, r3
     6e4:	40d8      	lsrs	r0, r3
     6e6:	4091      	lsls	r1, r2
     6e8:	4097      	lsls	r7, r2
     6ea:	002c      	movs	r4, r5
     6ec:	4301      	orrs	r1, r0
     6ee:	1e78      	subs	r0, r7, #1
     6f0:	4187      	sbcs	r7, r0
     6f2:	40dc      	lsrs	r4, r3
     6f4:	2600      	movs	r6, #0
     6f6:	430f      	orrs	r7, r1
     6f8:	077b      	lsls	r3, r7, #29
     6fa:	d009      	beq.n	710 <CONFIG_BT_CTLR_COMPANY_ID+0x11f>
     6fc:	230f      	movs	r3, #15
     6fe:	403b      	ands	r3, r7
     700:	2b04      	cmp	r3, #4
     702:	d005      	beq.n	710 <CONFIG_BT_CTLR_COMPANY_ID+0x11f>
     704:	1d3b      	adds	r3, r7, #4
     706:	42bb      	cmp	r3, r7
     708:	41bf      	sbcs	r7, r7
     70a:	427f      	negs	r7, r7
     70c:	19e4      	adds	r4, r4, r7
     70e:	001f      	movs	r7, r3
     710:	0223      	lsls	r3, r4, #8
     712:	d52c      	bpl.n	76e <CONFIG_BT_CTLR_COMPANY_ID+0x17d>
     714:	4b96      	ldr	r3, [pc, #600]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     716:	3601      	adds	r6, #1
     718:	429e      	cmp	r6, r3
     71a:	d100      	bne.n	71e <CONFIG_BT_CTLR_COMPANY_ID+0x12d>
     71c:	e09a      	b.n	854 <CONFIG_BT_CTLR_COMPANY_ID+0x263>
     71e:	4645      	mov	r5, r8
     720:	4b94      	ldr	r3, [pc, #592]	; (974 <CONFIG_BT_CTLR_COMPANY_ID+0x383>)
     722:	08ff      	lsrs	r7, r7, #3
     724:	401c      	ands	r4, r3
     726:	0760      	lsls	r0, r4, #29
     728:	0576      	lsls	r6, r6, #21
     72a:	0264      	lsls	r4, r4, #9
     72c:	4307      	orrs	r7, r0
     72e:	0b24      	lsrs	r4, r4, #12
     730:	0d76      	lsrs	r6, r6, #21
     732:	2100      	movs	r1, #0
     734:	0324      	lsls	r4, r4, #12
     736:	0b23      	lsrs	r3, r4, #12
     738:	0d0c      	lsrs	r4, r1, #20
     73a:	4a8f      	ldr	r2, [pc, #572]	; (978 <CONFIG_BT_CTLR_COMPANY_ID+0x387>)
     73c:	0524      	lsls	r4, r4, #20
     73e:	431c      	orrs	r4, r3
     740:	4014      	ands	r4, r2
     742:	0533      	lsls	r3, r6, #20
     744:	4323      	orrs	r3, r4
     746:	005b      	lsls	r3, r3, #1
     748:	07ed      	lsls	r5, r5, #31
     74a:	085b      	lsrs	r3, r3, #1
     74c:	432b      	orrs	r3, r5
     74e:	0038      	movs	r0, r7
     750:	0019      	movs	r1, r3
     752:	bc3c      	pop	{r2, r3, r4, r5}
     754:	4690      	mov	r8, r2
     756:	4699      	mov	r9, r3
     758:	46a2      	mov	sl, r4
     75a:	46ab      	mov	fp, r5
     75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     75e:	4664      	mov	r4, ip
     760:	4304      	orrs	r4, r0
     762:	d100      	bne.n	766 <CONFIG_BT_CTLR_COMPANY_ID+0x175>
     764:	e211      	b.n	b8a <CONFIG_BT_CTLR_COMPANY_ID+0x599>
     766:	0004      	movs	r4, r0
     768:	4667      	mov	r7, ip
     76a:	077b      	lsls	r3, r7, #29
     76c:	d1c6      	bne.n	6fc <CONFIG_BT_CTLR_COMPANY_ID+0x10b>
     76e:	4645      	mov	r5, r8
     770:	0760      	lsls	r0, r4, #29
     772:	08ff      	lsrs	r7, r7, #3
     774:	4307      	orrs	r7, r0
     776:	08e4      	lsrs	r4, r4, #3
     778:	4b7d      	ldr	r3, [pc, #500]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     77a:	429e      	cmp	r6, r3
     77c:	d030      	beq.n	7e0 <CONFIG_BT_CTLR_COMPANY_ID+0x1ef>
     77e:	0324      	lsls	r4, r4, #12
     780:	0576      	lsls	r6, r6, #21
     782:	0b24      	lsrs	r4, r4, #12
     784:	0d76      	lsrs	r6, r6, #21
     786:	e7d4      	b.n	732 <CONFIG_BT_CTLR_COMPANY_ID+0x141>
     788:	1a33      	subs	r3, r6, r0
     78a:	469a      	mov	sl, r3
     78c:	2b00      	cmp	r3, #0
     78e:	dd78      	ble.n	882 <CONFIG_BT_CTLR_COMPANY_ID+0x291>
     790:	2800      	cmp	r0, #0
     792:	d031      	beq.n	7f8 <CONFIG_BT_CTLR_COMPANY_ID+0x207>
     794:	4876      	ldr	r0, [pc, #472]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     796:	4286      	cmp	r6, r0
     798:	d0ae      	beq.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     79a:	2080      	movs	r0, #128	; 0x80
     79c:	0400      	lsls	r0, r0, #16
     79e:	4301      	orrs	r1, r0
     7a0:	4653      	mov	r3, sl
     7a2:	2b38      	cmp	r3, #56	; 0x38
     7a4:	dc00      	bgt.n	7a8 <CONFIG_BT_CTLR_COMPANY_ID+0x1b7>
     7a6:	e0e9      	b.n	97c <CONFIG_BT_CTLR_COMPANY_ID+0x38b>
     7a8:	430a      	orrs	r2, r1
     7aa:	1e51      	subs	r1, r2, #1
     7ac:	418a      	sbcs	r2, r1
     7ae:	2100      	movs	r1, #0
     7b0:	19d2      	adds	r2, r2, r7
     7b2:	42ba      	cmp	r2, r7
     7b4:	41bf      	sbcs	r7, r7
     7b6:	1909      	adds	r1, r1, r4
     7b8:	427c      	negs	r4, r7
     7ba:	0017      	movs	r7, r2
     7bc:	190c      	adds	r4, r1, r4
     7be:	0223      	lsls	r3, r4, #8
     7c0:	d5d3      	bpl.n	76a <CONFIG_BT_CTLR_COMPANY_ID+0x179>
     7c2:	4b6b      	ldr	r3, [pc, #428]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     7c4:	3601      	adds	r6, #1
     7c6:	429e      	cmp	r6, r3
     7c8:	d100      	bne.n	7cc <CONFIG_BT_CTLR_COMPANY_ID+0x1db>
     7ca:	e13a      	b.n	a42 <CONFIG_BT_CTLR_COMPANY_ID+0x451>
     7cc:	2001      	movs	r0, #1
     7ce:	4b69      	ldr	r3, [pc, #420]	; (974 <CONFIG_BT_CTLR_COMPANY_ID+0x383>)
     7d0:	401c      	ands	r4, r3
     7d2:	087b      	lsrs	r3, r7, #1
     7d4:	4007      	ands	r7, r0
     7d6:	431f      	orrs	r7, r3
     7d8:	07e0      	lsls	r0, r4, #31
     7da:	4307      	orrs	r7, r0
     7dc:	0864      	lsrs	r4, r4, #1
     7de:	e78b      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     7e0:	0023      	movs	r3, r4
     7e2:	433b      	orrs	r3, r7
     7e4:	d100      	bne.n	7e8 <CONFIG_BT_CTLR_COMPANY_ID+0x1f7>
     7e6:	e1cb      	b.n	b80 <CONFIG_BT_CTLR_COMPANY_ID+0x58f>
     7e8:	2280      	movs	r2, #128	; 0x80
     7ea:	0312      	lsls	r2, r2, #12
     7ec:	4314      	orrs	r4, r2
     7ee:	0324      	lsls	r4, r4, #12
     7f0:	0b24      	lsrs	r4, r4, #12
     7f2:	e79e      	b.n	732 <CONFIG_BT_CTLR_COMPANY_ID+0x141>
     7f4:	002e      	movs	r6, r5
     7f6:	e77f      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     7f8:	0008      	movs	r0, r1
     7fa:	4310      	orrs	r0, r2
     7fc:	d100      	bne.n	800 <CONFIG_BT_CTLR_COMPANY_ID+0x20f>
     7fe:	e0b4      	b.n	96a <CONFIG_BT_CTLR_COMPANY_ID+0x379>
     800:	1e58      	subs	r0, r3, #1
     802:	2800      	cmp	r0, #0
     804:	d000      	beq.n	808 <CONFIG_BT_CTLR_COMPANY_ID+0x217>
     806:	e0de      	b.n	9c6 <CONFIG_BT_CTLR_COMPANY_ID+0x3d5>
     808:	18ba      	adds	r2, r7, r2
     80a:	42ba      	cmp	r2, r7
     80c:	419b      	sbcs	r3, r3
     80e:	1864      	adds	r4, r4, r1
     810:	425b      	negs	r3, r3
     812:	18e4      	adds	r4, r4, r3
     814:	0017      	movs	r7, r2
     816:	2601      	movs	r6, #1
     818:	0223      	lsls	r3, r4, #8
     81a:	d5a6      	bpl.n	76a <CONFIG_BT_CTLR_COMPANY_ID+0x179>
     81c:	2602      	movs	r6, #2
     81e:	e7d5      	b.n	7cc <CONFIG_BT_CTLR_COMPANY_ID+0x1db>
     820:	2d00      	cmp	r5, #0
     822:	d16e      	bne.n	902 <CONFIG_BT_CTLR_COMPANY_ID+0x311>
     824:	1c70      	adds	r0, r6, #1
     826:	0540      	lsls	r0, r0, #21
     828:	0d40      	lsrs	r0, r0, #21
     82a:	2801      	cmp	r0, #1
     82c:	dc00      	bgt.n	830 <CONFIG_BT_CTLR_COMPANY_ID+0x23f>
     82e:	e0f9      	b.n	a24 <CONFIG_BT_CTLR_COMPANY_ID+0x433>
     830:	1ab8      	subs	r0, r7, r2
     832:	4684      	mov	ip, r0
     834:	4287      	cmp	r7, r0
     836:	4180      	sbcs	r0, r0
     838:	1ae5      	subs	r5, r4, r3
     83a:	4240      	negs	r0, r0
     83c:	1a2d      	subs	r5, r5, r0
     83e:	0228      	lsls	r0, r5, #8
     840:	d400      	bmi.n	844 <CONFIG_BT_CTLR_COMPANY_ID+0x253>
     842:	e089      	b.n	958 <CONFIG_BT_CTLR_COMPANY_ID+0x367>
     844:	1bd7      	subs	r7, r2, r7
     846:	42ba      	cmp	r2, r7
     848:	4192      	sbcs	r2, r2
     84a:	1b1c      	subs	r4, r3, r4
     84c:	4252      	negs	r2, r2
     84e:	1aa5      	subs	r5, r4, r2
     850:	46d8      	mov	r8, fp
     852:	e729      	b.n	6a8 <CONFIG_BT_CTLR_COMPANY_ID+0xb7>
     854:	4645      	mov	r5, r8
     856:	2400      	movs	r4, #0
     858:	2700      	movs	r7, #0
     85a:	e76a      	b.n	732 <CONFIG_BT_CTLR_COMPANY_ID+0x141>
     85c:	4c45      	ldr	r4, [pc, #276]	; (974 <CONFIG_BT_CTLR_COMPANY_ID+0x383>)
     85e:	1af6      	subs	r6, r6, r3
     860:	402c      	ands	r4, r5
     862:	e749      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     864:	003d      	movs	r5, r7
     866:	3828      	subs	r0, #40	; 0x28
     868:	4085      	lsls	r5, r0
     86a:	2700      	movs	r7, #0
     86c:	e72e      	b.n	6cc <CONFIG_BT_CTLR_COMPANY_ID+0xdb>
     86e:	0038      	movs	r0, r7
     870:	f001 f8cc 	bl	1a0c <__clzsi2>
     874:	3020      	adds	r0, #32
     876:	e71d      	b.n	6b4 <CONFIG_BT_CTLR_COMPANY_ID+0xc3>
     878:	430a      	orrs	r2, r1
     87a:	1e51      	subs	r1, r2, #1
     87c:	418a      	sbcs	r2, r1
     87e:	2100      	movs	r1, #0
     880:	e707      	b.n	692 <CONFIG_BT_CTLR_COMPANY_ID+0xa1>
     882:	2b00      	cmp	r3, #0
     884:	d000      	beq.n	888 <CONFIG_BT_CTLR_COMPANY_ID+0x297>
     886:	e0f3      	b.n	a70 <CONFIG_BT_CTLR_COMPANY_ID+0x47f>
     888:	1c70      	adds	r0, r6, #1
     88a:	0543      	lsls	r3, r0, #21
     88c:	0d5b      	lsrs	r3, r3, #21
     88e:	2b01      	cmp	r3, #1
     890:	dc00      	bgt.n	894 <CONFIG_BT_CTLR_COMPANY_ID+0x2a3>
     892:	e0ad      	b.n	9f0 <CONFIG_BT_CTLR_COMPANY_ID+0x3ff>
     894:	4b36      	ldr	r3, [pc, #216]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     896:	4298      	cmp	r0, r3
     898:	d100      	bne.n	89c <CONFIG_BT_CTLR_COMPANY_ID+0x2ab>
     89a:	e0d1      	b.n	a40 <CONFIG_BT_CTLR_COMPANY_ID+0x44f>
     89c:	18ba      	adds	r2, r7, r2
     89e:	42ba      	cmp	r2, r7
     8a0:	41bf      	sbcs	r7, r7
     8a2:	1864      	adds	r4, r4, r1
     8a4:	427f      	negs	r7, r7
     8a6:	19e4      	adds	r4, r4, r7
     8a8:	07e7      	lsls	r7, r4, #31
     8aa:	0852      	lsrs	r2, r2, #1
     8ac:	4317      	orrs	r7, r2
     8ae:	0864      	lsrs	r4, r4, #1
     8b0:	0006      	movs	r6, r0
     8b2:	e721      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     8b4:	482e      	ldr	r0, [pc, #184]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     8b6:	4285      	cmp	r5, r0
     8b8:	d100      	bne.n	8bc <CONFIG_BT_CTLR_COMPANY_ID+0x2cb>
     8ba:	e093      	b.n	9e4 <CONFIG_BT_CTLR_COMPANY_ID+0x3f3>
     8bc:	001d      	movs	r5, r3
     8be:	e6d0      	b.n	662 <CONFIG_BT_CTLR_COMPANY_ID+0x71>
     8c0:	0029      	movs	r1, r5
     8c2:	3e1f      	subs	r6, #31
     8c4:	40f1      	lsrs	r1, r6
     8c6:	2b20      	cmp	r3, #32
     8c8:	d100      	bne.n	8cc <CONFIG_BT_CTLR_COMPANY_ID+0x2db>
     8ca:	e08d      	b.n	9e8 <CONFIG_BT_CTLR_COMPANY_ID+0x3f7>
     8cc:	2240      	movs	r2, #64	; 0x40
     8ce:	1ad3      	subs	r3, r2, r3
     8d0:	409d      	lsls	r5, r3
     8d2:	432f      	orrs	r7, r5
     8d4:	1e7d      	subs	r5, r7, #1
     8d6:	41af      	sbcs	r7, r5
     8d8:	2400      	movs	r4, #0
     8da:	430f      	orrs	r7, r1
     8dc:	2600      	movs	r6, #0
     8de:	e744      	b.n	76a <CONFIG_BT_CTLR_COMPANY_ID+0x179>
     8e0:	002b      	movs	r3, r5
     8e2:	0008      	movs	r0, r1
     8e4:	3b20      	subs	r3, #32
     8e6:	40d8      	lsrs	r0, r3
     8e8:	0003      	movs	r3, r0
     8ea:	2d20      	cmp	r5, #32
     8ec:	d100      	bne.n	8f0 <CONFIG_BT_CTLR_COMPANY_ID+0x2ff>
     8ee:	e07d      	b.n	9ec <CONFIG_BT_CTLR_COMPANY_ID+0x3fb>
     8f0:	2040      	movs	r0, #64	; 0x40
     8f2:	1b45      	subs	r5, r0, r5
     8f4:	40a9      	lsls	r1, r5
     8f6:	430a      	orrs	r2, r1
     8f8:	1e51      	subs	r1, r2, #1
     8fa:	418a      	sbcs	r2, r1
     8fc:	2100      	movs	r1, #0
     8fe:	431a      	orrs	r2, r3
     900:	e6c7      	b.n	692 <CONFIG_BT_CTLR_COMPANY_ID+0xa1>
     902:	2e00      	cmp	r6, #0
     904:	d050      	beq.n	9a8 <CONFIG_BT_CTLR_COMPANY_ID+0x3b7>
     906:	4e1a      	ldr	r6, [pc, #104]	; (970 <CONFIG_BT_CTLR_COMPANY_ID+0x37f>)
     908:	42b0      	cmp	r0, r6
     90a:	d057      	beq.n	9bc <CONFIG_BT_CTLR_COMPANY_ID+0x3cb>
     90c:	2680      	movs	r6, #128	; 0x80
     90e:	426b      	negs	r3, r5
     910:	4699      	mov	r9, r3
     912:	0436      	lsls	r6, r6, #16
     914:	4334      	orrs	r4, r6
     916:	464b      	mov	r3, r9
     918:	2b38      	cmp	r3, #56	; 0x38
     91a:	dd00      	ble.n	91e <CONFIG_BT_CTLR_COMPANY_ID+0x32d>
     91c:	e0d6      	b.n	acc <CONFIG_BT_CTLR_COMPANY_ID+0x4db>
     91e:	2b1f      	cmp	r3, #31
     920:	dd00      	ble.n	924 <CONFIG_BT_CTLR_COMPANY_ID+0x333>
     922:	e135      	b.n	b90 <CONFIG_BT_CTLR_COMPANY_ID+0x59f>
     924:	2620      	movs	r6, #32
     926:	1af5      	subs	r5, r6, r3
     928:	0026      	movs	r6, r4
     92a:	40ae      	lsls	r6, r5
     92c:	46b2      	mov	sl, r6
     92e:	003e      	movs	r6, r7
     930:	40de      	lsrs	r6, r3
     932:	46ac      	mov	ip, r5
     934:	0035      	movs	r5, r6
     936:	4656      	mov	r6, sl
     938:	432e      	orrs	r6, r5
     93a:	4665      	mov	r5, ip
     93c:	40af      	lsls	r7, r5
     93e:	1e7d      	subs	r5, r7, #1
     940:	41af      	sbcs	r7, r5
     942:	40dc      	lsrs	r4, r3
     944:	4337      	orrs	r7, r6
     946:	1bd7      	subs	r7, r2, r7
     948:	42ba      	cmp	r2, r7
     94a:	4192      	sbcs	r2, r2
     94c:	1b0c      	subs	r4, r1, r4
     94e:	4252      	negs	r2, r2
     950:	1aa4      	subs	r4, r4, r2
     952:	0006      	movs	r6, r0
     954:	46d8      	mov	r8, fp
     956:	e6a3      	b.n	6a0 <CONFIG_BT_CTLR_COMPANY_ID+0xaf>
     958:	4664      	mov	r4, ip
     95a:	4667      	mov	r7, ip
     95c:	432c      	orrs	r4, r5
     95e:	d000      	beq.n	962 <CONFIG_BT_CTLR_COMPANY_ID+0x371>
     960:	e6a2      	b.n	6a8 <CONFIG_BT_CTLR_COMPANY_ID+0xb7>
     962:	2500      	movs	r5, #0
     964:	2600      	movs	r6, #0
     966:	2700      	movs	r7, #0
     968:	e706      	b.n	778 <CONFIG_BT_CTLR_COMPANY_ID+0x187>
     96a:	001e      	movs	r6, r3
     96c:	e6c4      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	000007ff 	.word	0x000007ff
     974:	ff7fffff 	.word	0xff7fffff
     978:	800fffff 	.word	0x800fffff
     97c:	2b1f      	cmp	r3, #31
     97e:	dc63      	bgt.n	a48 <CONFIG_BT_CTLR_COMPANY_ID+0x457>
     980:	2020      	movs	r0, #32
     982:	1ac3      	subs	r3, r0, r3
     984:	0008      	movs	r0, r1
     986:	4098      	lsls	r0, r3
     988:	469c      	mov	ip, r3
     98a:	4683      	mov	fp, r0
     98c:	4653      	mov	r3, sl
     98e:	0010      	movs	r0, r2
     990:	40d8      	lsrs	r0, r3
     992:	0003      	movs	r3, r0
     994:	4658      	mov	r0, fp
     996:	4318      	orrs	r0, r3
     998:	4663      	mov	r3, ip
     99a:	409a      	lsls	r2, r3
     99c:	1e53      	subs	r3, r2, #1
     99e:	419a      	sbcs	r2, r3
     9a0:	4653      	mov	r3, sl
     9a2:	4302      	orrs	r2, r0
     9a4:	40d9      	lsrs	r1, r3
     9a6:	e703      	b.n	7b0 <CONFIG_BT_CTLR_COMPANY_ID+0x1bf>
     9a8:	0026      	movs	r6, r4
     9aa:	433e      	orrs	r6, r7
     9ac:	d006      	beq.n	9bc <CONFIG_BT_CTLR_COMPANY_ID+0x3cb>
     9ae:	43eb      	mvns	r3, r5
     9b0:	4699      	mov	r9, r3
     9b2:	2b00      	cmp	r3, #0
     9b4:	d0c7      	beq.n	946 <CONFIG_BT_CTLR_COMPANY_ID+0x355>
     9b6:	4e94      	ldr	r6, [pc, #592]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     9b8:	42b0      	cmp	r0, r6
     9ba:	d1ac      	bne.n	916 <CONFIG_BT_CTLR_COMPANY_ID+0x325>
     9bc:	000c      	movs	r4, r1
     9be:	0017      	movs	r7, r2
     9c0:	0006      	movs	r6, r0
     9c2:	46d8      	mov	r8, fp
     9c4:	e698      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     9c6:	4b90      	ldr	r3, [pc, #576]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     9c8:	459a      	cmp	sl, r3
     9ca:	d00b      	beq.n	9e4 <CONFIG_BT_CTLR_COMPANY_ID+0x3f3>
     9cc:	4682      	mov	sl, r0
     9ce:	e6e7      	b.n	7a0 <CONFIG_BT_CTLR_COMPANY_ID+0x1af>
     9d0:	2800      	cmp	r0, #0
     9d2:	d000      	beq.n	9d6 <CONFIG_BT_CTLR_COMPANY_ID+0x3e5>
     9d4:	e09e      	b.n	b14 <CONFIG_BT_CTLR_COMPANY_ID+0x523>
     9d6:	0018      	movs	r0, r3
     9d8:	4310      	orrs	r0, r2
     9da:	d100      	bne.n	9de <CONFIG_BT_CTLR_COMPANY_ID+0x3ed>
     9dc:	e0e9      	b.n	bb2 <CONFIG_BT_CTLR_COMPANY_ID+0x5c1>
     9de:	001c      	movs	r4, r3
     9e0:	0017      	movs	r7, r2
     9e2:	46d8      	mov	r8, fp
     9e4:	4e88      	ldr	r6, [pc, #544]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     9e6:	e687      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     9e8:	2500      	movs	r5, #0
     9ea:	e772      	b.n	8d2 <CONFIG_BT_CTLR_COMPANY_ID+0x2e1>
     9ec:	2100      	movs	r1, #0
     9ee:	e782      	b.n	8f6 <CONFIG_BT_CTLR_COMPANY_ID+0x305>
     9f0:	0023      	movs	r3, r4
     9f2:	433b      	orrs	r3, r7
     9f4:	2e00      	cmp	r6, #0
     9f6:	d000      	beq.n	9fa <CONFIG_BT_CTLR_COMPANY_ID+0x409>
     9f8:	e0ab      	b.n	b52 <CONFIG_BT_CTLR_COMPANY_ID+0x561>
     9fa:	2b00      	cmp	r3, #0
     9fc:	d100      	bne.n	a00 <CONFIG_BT_CTLR_COMPANY_ID+0x40f>
     9fe:	e0e7      	b.n	bd0 <CONFIG_BT_CTLR_COMPANY_ID+0x5df>
     a00:	000b      	movs	r3, r1
     a02:	4313      	orrs	r3, r2
     a04:	d100      	bne.n	a08 <CONFIG_BT_CTLR_COMPANY_ID+0x417>
     a06:	e677      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     a08:	18ba      	adds	r2, r7, r2
     a0a:	42ba      	cmp	r2, r7
     a0c:	41bf      	sbcs	r7, r7
     a0e:	1864      	adds	r4, r4, r1
     a10:	427f      	negs	r7, r7
     a12:	19e4      	adds	r4, r4, r7
     a14:	0223      	lsls	r3, r4, #8
     a16:	d400      	bmi.n	a1a <CONFIG_BT_CTLR_COMPANY_ID+0x429>
     a18:	e0f2      	b.n	c00 <CONFIG_BT_CTLR_COMPANY_ID+0x60f>
     a1a:	4b7c      	ldr	r3, [pc, #496]	; (c0c <CONFIG_BT_CTLR_COMPANY_ID+0x61b>)
     a1c:	0017      	movs	r7, r2
     a1e:	401c      	ands	r4, r3
     a20:	0006      	movs	r6, r0
     a22:	e669      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     a24:	0020      	movs	r0, r4
     a26:	4338      	orrs	r0, r7
     a28:	2e00      	cmp	r6, #0
     a2a:	d1d1      	bne.n	9d0 <CONFIG_BT_CTLR_COMPANY_ID+0x3df>
     a2c:	2800      	cmp	r0, #0
     a2e:	d15b      	bne.n	ae8 <CONFIG_BT_CTLR_COMPANY_ID+0x4f7>
     a30:	001c      	movs	r4, r3
     a32:	4314      	orrs	r4, r2
     a34:	d100      	bne.n	a38 <CONFIG_BT_CTLR_COMPANY_ID+0x447>
     a36:	e0a8      	b.n	b8a <CONFIG_BT_CTLR_COMPANY_ID+0x599>
     a38:	001c      	movs	r4, r3
     a3a:	0017      	movs	r7, r2
     a3c:	46d8      	mov	r8, fp
     a3e:	e65b      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     a40:	0006      	movs	r6, r0
     a42:	2400      	movs	r4, #0
     a44:	2700      	movs	r7, #0
     a46:	e697      	b.n	778 <CONFIG_BT_CTLR_COMPANY_ID+0x187>
     a48:	4650      	mov	r0, sl
     a4a:	000b      	movs	r3, r1
     a4c:	3820      	subs	r0, #32
     a4e:	40c3      	lsrs	r3, r0
     a50:	4699      	mov	r9, r3
     a52:	4653      	mov	r3, sl
     a54:	2b20      	cmp	r3, #32
     a56:	d100      	bne.n	a5a <CONFIG_BT_CTLR_COMPANY_ID+0x469>
     a58:	e095      	b.n	b86 <CONFIG_BT_CTLR_COMPANY_ID+0x595>
     a5a:	2340      	movs	r3, #64	; 0x40
     a5c:	4650      	mov	r0, sl
     a5e:	1a1b      	subs	r3, r3, r0
     a60:	4099      	lsls	r1, r3
     a62:	430a      	orrs	r2, r1
     a64:	1e51      	subs	r1, r2, #1
     a66:	418a      	sbcs	r2, r1
     a68:	464b      	mov	r3, r9
     a6a:	2100      	movs	r1, #0
     a6c:	431a      	orrs	r2, r3
     a6e:	e69f      	b.n	7b0 <CONFIG_BT_CTLR_COMPANY_ID+0x1bf>
     a70:	2e00      	cmp	r6, #0
     a72:	d130      	bne.n	ad6 <CONFIG_BT_CTLR_COMPANY_ID+0x4e5>
     a74:	0026      	movs	r6, r4
     a76:	433e      	orrs	r6, r7
     a78:	d067      	beq.n	b4a <CONFIG_BT_CTLR_COMPANY_ID+0x559>
     a7a:	43db      	mvns	r3, r3
     a7c:	469a      	mov	sl, r3
     a7e:	2b00      	cmp	r3, #0
     a80:	d01c      	beq.n	abc <CONFIG_BT_CTLR_COMPANY_ID+0x4cb>
     a82:	4e61      	ldr	r6, [pc, #388]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     a84:	42b0      	cmp	r0, r6
     a86:	d060      	beq.n	b4a <CONFIG_BT_CTLR_COMPANY_ID+0x559>
     a88:	4653      	mov	r3, sl
     a8a:	2b38      	cmp	r3, #56	; 0x38
     a8c:	dd00      	ble.n	a90 <CONFIG_BT_CTLR_COMPANY_ID+0x49f>
     a8e:	e096      	b.n	bbe <CONFIG_BT_CTLR_COMPANY_ID+0x5cd>
     a90:	2b1f      	cmp	r3, #31
     a92:	dd00      	ble.n	a96 <CONFIG_BT_CTLR_COMPANY_ID+0x4a5>
     a94:	e09f      	b.n	bd6 <CONFIG_BT_CTLR_COMPANY_ID+0x5e5>
     a96:	2620      	movs	r6, #32
     a98:	1af3      	subs	r3, r6, r3
     a9a:	0026      	movs	r6, r4
     a9c:	409e      	lsls	r6, r3
     a9e:	469c      	mov	ip, r3
     aa0:	46b3      	mov	fp, r6
     aa2:	4653      	mov	r3, sl
     aa4:	003e      	movs	r6, r7
     aa6:	40de      	lsrs	r6, r3
     aa8:	0033      	movs	r3, r6
     aaa:	465e      	mov	r6, fp
     aac:	431e      	orrs	r6, r3
     aae:	4663      	mov	r3, ip
     ab0:	409f      	lsls	r7, r3
     ab2:	1e7b      	subs	r3, r7, #1
     ab4:	419f      	sbcs	r7, r3
     ab6:	4653      	mov	r3, sl
     ab8:	40dc      	lsrs	r4, r3
     aba:	4337      	orrs	r7, r6
     abc:	18bf      	adds	r7, r7, r2
     abe:	4297      	cmp	r7, r2
     ac0:	4192      	sbcs	r2, r2
     ac2:	1864      	adds	r4, r4, r1
     ac4:	4252      	negs	r2, r2
     ac6:	18a4      	adds	r4, r4, r2
     ac8:	0006      	movs	r6, r0
     aca:	e678      	b.n	7be <CONFIG_BT_CTLR_COMPANY_ID+0x1cd>
     acc:	4327      	orrs	r7, r4
     ace:	1e7c      	subs	r4, r7, #1
     ad0:	41a7      	sbcs	r7, r4
     ad2:	2400      	movs	r4, #0
     ad4:	e737      	b.n	946 <CONFIG_BT_CTLR_COMPANY_ID+0x355>
     ad6:	4e4c      	ldr	r6, [pc, #304]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     ad8:	42b0      	cmp	r0, r6
     ada:	d036      	beq.n	b4a <CONFIG_BT_CTLR_COMPANY_ID+0x559>
     adc:	2680      	movs	r6, #128	; 0x80
     ade:	425b      	negs	r3, r3
     ae0:	0436      	lsls	r6, r6, #16
     ae2:	469a      	mov	sl, r3
     ae4:	4334      	orrs	r4, r6
     ae6:	e7cf      	b.n	a88 <CONFIG_BT_CTLR_COMPANY_ID+0x497>
     ae8:	0018      	movs	r0, r3
     aea:	4310      	orrs	r0, r2
     aec:	d100      	bne.n	af0 <CONFIG_BT_CTLR_COMPANY_ID+0x4ff>
     aee:	e603      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     af0:	1ab8      	subs	r0, r7, r2
     af2:	4684      	mov	ip, r0
     af4:	4567      	cmp	r7, ip
     af6:	41ad      	sbcs	r5, r5
     af8:	1ae0      	subs	r0, r4, r3
     afa:	426d      	negs	r5, r5
     afc:	1b40      	subs	r0, r0, r5
     afe:	0205      	lsls	r5, r0, #8
     b00:	d400      	bmi.n	b04 <CONFIG_BT_CTLR_COMPANY_ID+0x513>
     b02:	e62c      	b.n	75e <CONFIG_BT_CTLR_COMPANY_ID+0x16d>
     b04:	1bd7      	subs	r7, r2, r7
     b06:	42ba      	cmp	r2, r7
     b08:	4192      	sbcs	r2, r2
     b0a:	1b1c      	subs	r4, r3, r4
     b0c:	4252      	negs	r2, r2
     b0e:	1aa4      	subs	r4, r4, r2
     b10:	46d8      	mov	r8, fp
     b12:	e5f1      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     b14:	0018      	movs	r0, r3
     b16:	4310      	orrs	r0, r2
     b18:	d100      	bne.n	b1c <CONFIG_BT_CTLR_COMPANY_ID+0x52b>
     b1a:	e763      	b.n	9e4 <CONFIG_BT_CTLR_COMPANY_ID+0x3f3>
     b1c:	08f8      	lsrs	r0, r7, #3
     b1e:	0767      	lsls	r7, r4, #29
     b20:	4307      	orrs	r7, r0
     b22:	2080      	movs	r0, #128	; 0x80
     b24:	08e4      	lsrs	r4, r4, #3
     b26:	0300      	lsls	r0, r0, #12
     b28:	4204      	tst	r4, r0
     b2a:	d008      	beq.n	b3e <CONFIG_BT_CTLR_COMPANY_ID+0x54d>
     b2c:	08dd      	lsrs	r5, r3, #3
     b2e:	4205      	tst	r5, r0
     b30:	d105      	bne.n	b3e <CONFIG_BT_CTLR_COMPANY_ID+0x54d>
     b32:	08d2      	lsrs	r2, r2, #3
     b34:	0759      	lsls	r1, r3, #29
     b36:	4311      	orrs	r1, r2
     b38:	000f      	movs	r7, r1
     b3a:	002c      	movs	r4, r5
     b3c:	46d8      	mov	r8, fp
     b3e:	0f7b      	lsrs	r3, r7, #29
     b40:	00e4      	lsls	r4, r4, #3
     b42:	431c      	orrs	r4, r3
     b44:	00ff      	lsls	r7, r7, #3
     b46:	4e30      	ldr	r6, [pc, #192]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     b48:	e5d6      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     b4a:	000c      	movs	r4, r1
     b4c:	0017      	movs	r7, r2
     b4e:	0006      	movs	r6, r0
     b50:	e5d2      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     b52:	2b00      	cmp	r3, #0
     b54:	d038      	beq.n	bc8 <CONFIG_BT_CTLR_COMPANY_ID+0x5d7>
     b56:	000b      	movs	r3, r1
     b58:	4313      	orrs	r3, r2
     b5a:	d100      	bne.n	b5e <CONFIG_BT_CTLR_COMPANY_ID+0x56d>
     b5c:	e742      	b.n	9e4 <CONFIG_BT_CTLR_COMPANY_ID+0x3f3>
     b5e:	08f8      	lsrs	r0, r7, #3
     b60:	0767      	lsls	r7, r4, #29
     b62:	4307      	orrs	r7, r0
     b64:	2080      	movs	r0, #128	; 0x80
     b66:	08e4      	lsrs	r4, r4, #3
     b68:	0300      	lsls	r0, r0, #12
     b6a:	4204      	tst	r4, r0
     b6c:	d0e7      	beq.n	b3e <CONFIG_BT_CTLR_COMPANY_ID+0x54d>
     b6e:	08cb      	lsrs	r3, r1, #3
     b70:	4203      	tst	r3, r0
     b72:	d1e4      	bne.n	b3e <CONFIG_BT_CTLR_COMPANY_ID+0x54d>
     b74:	08d2      	lsrs	r2, r2, #3
     b76:	0749      	lsls	r1, r1, #29
     b78:	4311      	orrs	r1, r2
     b7a:	000f      	movs	r7, r1
     b7c:	001c      	movs	r4, r3
     b7e:	e7de      	b.n	b3e <CONFIG_BT_CTLR_COMPANY_ID+0x54d>
     b80:	2700      	movs	r7, #0
     b82:	2400      	movs	r4, #0
     b84:	e5d5      	b.n	732 <CONFIG_BT_CTLR_COMPANY_ID+0x141>
     b86:	2100      	movs	r1, #0
     b88:	e76b      	b.n	a62 <CONFIG_BT_CTLR_COMPANY_ID+0x471>
     b8a:	2500      	movs	r5, #0
     b8c:	2700      	movs	r7, #0
     b8e:	e5f3      	b.n	778 <CONFIG_BT_CTLR_COMPANY_ID+0x187>
     b90:	464e      	mov	r6, r9
     b92:	0025      	movs	r5, r4
     b94:	3e20      	subs	r6, #32
     b96:	40f5      	lsrs	r5, r6
     b98:	464b      	mov	r3, r9
     b9a:	002e      	movs	r6, r5
     b9c:	2b20      	cmp	r3, #32
     b9e:	d02d      	beq.n	bfc <CONFIG_BT_CTLR_COMPANY_ID+0x60b>
     ba0:	2540      	movs	r5, #64	; 0x40
     ba2:	1aed      	subs	r5, r5, r3
     ba4:	40ac      	lsls	r4, r5
     ba6:	4327      	orrs	r7, r4
     ba8:	1e7c      	subs	r4, r7, #1
     baa:	41a7      	sbcs	r7, r4
     bac:	2400      	movs	r4, #0
     bae:	4337      	orrs	r7, r6
     bb0:	e6c9      	b.n	946 <CONFIG_BT_CTLR_COMPANY_ID+0x355>
     bb2:	2480      	movs	r4, #128	; 0x80
     bb4:	2500      	movs	r5, #0
     bb6:	0324      	lsls	r4, r4, #12
     bb8:	4e13      	ldr	r6, [pc, #76]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     bba:	2700      	movs	r7, #0
     bbc:	e5dc      	b.n	778 <CONFIG_BT_CTLR_COMPANY_ID+0x187>
     bbe:	4327      	orrs	r7, r4
     bc0:	1e7c      	subs	r4, r7, #1
     bc2:	41a7      	sbcs	r7, r4
     bc4:	2400      	movs	r4, #0
     bc6:	e779      	b.n	abc <CONFIG_BT_CTLR_COMPANY_ID+0x4cb>
     bc8:	000c      	movs	r4, r1
     bca:	0017      	movs	r7, r2
     bcc:	4e0e      	ldr	r6, [pc, #56]	; (c08 <CONFIG_BT_CTLR_COMPANY_ID+0x617>)
     bce:	e593      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     bd0:	000c      	movs	r4, r1
     bd2:	0017      	movs	r7, r2
     bd4:	e590      	b.n	6f8 <CONFIG_BT_CTLR_COMPANY_ID+0x107>
     bd6:	4656      	mov	r6, sl
     bd8:	0023      	movs	r3, r4
     bda:	3e20      	subs	r6, #32
     bdc:	40f3      	lsrs	r3, r6
     bde:	4699      	mov	r9, r3
     be0:	4653      	mov	r3, sl
     be2:	2b20      	cmp	r3, #32
     be4:	d00e      	beq.n	c04 <CONFIG_BT_CTLR_COMPANY_ID+0x613>
     be6:	2340      	movs	r3, #64	; 0x40
     be8:	4656      	mov	r6, sl
     bea:	1b9b      	subs	r3, r3, r6
     bec:	409c      	lsls	r4, r3
     bee:	4327      	orrs	r7, r4
     bf0:	1e7c      	subs	r4, r7, #1
     bf2:	41a7      	sbcs	r7, r4
     bf4:	464b      	mov	r3, r9
     bf6:	2400      	movs	r4, #0
     bf8:	431f      	orrs	r7, r3
     bfa:	e75f      	b.n	abc <CONFIG_BT_CTLR_COMPANY_ID+0x4cb>
     bfc:	2400      	movs	r4, #0
     bfe:	e7d2      	b.n	ba6 <CONFIG_BT_CTLR_COMPANY_ID+0x5b5>
     c00:	0017      	movs	r7, r2
     c02:	e5b2      	b.n	76a <CONFIG_BT_CTLR_COMPANY_ID+0x179>
     c04:	2400      	movs	r4, #0
     c06:	e7f2      	b.n	bee <CONFIG_BT_CTLR_COMPANY_ID+0x5fd>
     c08:	000007ff 	.word	0x000007ff
     c0c:	ff7fffff 	.word	0xff7fffff

00000c10 <__aeabi_ddiv>:
     c10:	b5f0      	push	{r4, r5, r6, r7, lr}
     c12:	465f      	mov	r7, fp
     c14:	4656      	mov	r6, sl
     c16:	4644      	mov	r4, r8
     c18:	464d      	mov	r5, r9
     c1a:	b4f0      	push	{r4, r5, r6, r7}
     c1c:	030e      	lsls	r6, r1, #12
     c1e:	004c      	lsls	r4, r1, #1
     c20:	b087      	sub	sp, #28
     c22:	4683      	mov	fp, r0
     c24:	4692      	mov	sl, r2
     c26:	001d      	movs	r5, r3
     c28:	4680      	mov	r8, r0
     c2a:	0b36      	lsrs	r6, r6, #12
     c2c:	0d64      	lsrs	r4, r4, #21
     c2e:	0fcf      	lsrs	r7, r1, #31
     c30:	2c00      	cmp	r4, #0
     c32:	d04f      	beq.n	cd4 <__aeabi_ddiv+0xc4>
     c34:	4b6f      	ldr	r3, [pc, #444]	; (df4 <__aeabi_ddiv+0x1e4>)
     c36:	429c      	cmp	r4, r3
     c38:	d035      	beq.n	ca6 <__aeabi_ddiv+0x96>
     c3a:	2380      	movs	r3, #128	; 0x80
     c3c:	0f42      	lsrs	r2, r0, #29
     c3e:	041b      	lsls	r3, r3, #16
     c40:	00f6      	lsls	r6, r6, #3
     c42:	4313      	orrs	r3, r2
     c44:	4333      	orrs	r3, r6
     c46:	4699      	mov	r9, r3
     c48:	00c3      	lsls	r3, r0, #3
     c4a:	4698      	mov	r8, r3
     c4c:	4b6a      	ldr	r3, [pc, #424]	; (df8 <__aeabi_ddiv+0x1e8>)
     c4e:	2600      	movs	r6, #0
     c50:	469c      	mov	ip, r3
     c52:	2300      	movs	r3, #0
     c54:	4464      	add	r4, ip
     c56:	9303      	str	r3, [sp, #12]
     c58:	032b      	lsls	r3, r5, #12
     c5a:	0b1b      	lsrs	r3, r3, #12
     c5c:	469b      	mov	fp, r3
     c5e:	006b      	lsls	r3, r5, #1
     c60:	0fed      	lsrs	r5, r5, #31
     c62:	4650      	mov	r0, sl
     c64:	0d5b      	lsrs	r3, r3, #21
     c66:	9501      	str	r5, [sp, #4]
     c68:	d05e      	beq.n	d28 <__aeabi_ddiv+0x118>
     c6a:	4a62      	ldr	r2, [pc, #392]	; (df4 <__aeabi_ddiv+0x1e4>)
     c6c:	4293      	cmp	r3, r2
     c6e:	d053      	beq.n	d18 <__aeabi_ddiv+0x108>
     c70:	465a      	mov	r2, fp
     c72:	00d1      	lsls	r1, r2, #3
     c74:	2280      	movs	r2, #128	; 0x80
     c76:	0f40      	lsrs	r0, r0, #29
     c78:	0412      	lsls	r2, r2, #16
     c7a:	4302      	orrs	r2, r0
     c7c:	430a      	orrs	r2, r1
     c7e:	4693      	mov	fp, r2
     c80:	4652      	mov	r2, sl
     c82:	00d1      	lsls	r1, r2, #3
     c84:	4a5c      	ldr	r2, [pc, #368]	; (df8 <__aeabi_ddiv+0x1e8>)
     c86:	4694      	mov	ip, r2
     c88:	2200      	movs	r2, #0
     c8a:	4463      	add	r3, ip
     c8c:	0038      	movs	r0, r7
     c8e:	4068      	eors	r0, r5
     c90:	4684      	mov	ip, r0
     c92:	9002      	str	r0, [sp, #8]
     c94:	1ae4      	subs	r4, r4, r3
     c96:	4316      	orrs	r6, r2
     c98:	2e0f      	cmp	r6, #15
     c9a:	d900      	bls.n	c9e <__aeabi_ddiv+0x8e>
     c9c:	e0b4      	b.n	e08 <__aeabi_ddiv+0x1f8>
     c9e:	4b57      	ldr	r3, [pc, #348]	; (dfc <__aeabi_ddiv+0x1ec>)
     ca0:	00b6      	lsls	r6, r6, #2
     ca2:	599b      	ldr	r3, [r3, r6]
     ca4:	469f      	mov	pc, r3
     ca6:	0003      	movs	r3, r0
     ca8:	4333      	orrs	r3, r6
     caa:	4699      	mov	r9, r3
     cac:	d16c      	bne.n	d88 <__aeabi_ddiv+0x178>
     cae:	2300      	movs	r3, #0
     cb0:	4698      	mov	r8, r3
     cb2:	3302      	adds	r3, #2
     cb4:	2608      	movs	r6, #8
     cb6:	9303      	str	r3, [sp, #12]
     cb8:	e7ce      	b.n	c58 <__aeabi_ddiv+0x48>
     cba:	46cb      	mov	fp, r9
     cbc:	4641      	mov	r1, r8
     cbe:	9a03      	ldr	r2, [sp, #12]
     cc0:	9701      	str	r7, [sp, #4]
     cc2:	2a02      	cmp	r2, #2
     cc4:	d165      	bne.n	d92 <__aeabi_ddiv+0x182>
     cc6:	9b01      	ldr	r3, [sp, #4]
     cc8:	4c4a      	ldr	r4, [pc, #296]	; (df4 <__aeabi_ddiv+0x1e4>)
     cca:	469c      	mov	ip, r3
     ccc:	2300      	movs	r3, #0
     cce:	2200      	movs	r2, #0
     cd0:	4698      	mov	r8, r3
     cd2:	e06b      	b.n	dac <__aeabi_ddiv+0x19c>
     cd4:	0003      	movs	r3, r0
     cd6:	4333      	orrs	r3, r6
     cd8:	4699      	mov	r9, r3
     cda:	d04e      	beq.n	d7a <__aeabi_ddiv+0x16a>
     cdc:	2e00      	cmp	r6, #0
     cde:	d100      	bne.n	ce2 <__aeabi_ddiv+0xd2>
     ce0:	e1bc      	b.n	105c <__aeabi_ddiv+0x44c>
     ce2:	0030      	movs	r0, r6
     ce4:	f000 fe92 	bl	1a0c <__clzsi2>
     ce8:	0003      	movs	r3, r0
     cea:	3b0b      	subs	r3, #11
     cec:	2b1c      	cmp	r3, #28
     cee:	dd00      	ble.n	cf2 <__aeabi_ddiv+0xe2>
     cf0:	e1ac      	b.n	104c <__aeabi_ddiv+0x43c>
     cf2:	221d      	movs	r2, #29
     cf4:	1ad3      	subs	r3, r2, r3
     cf6:	465a      	mov	r2, fp
     cf8:	0001      	movs	r1, r0
     cfa:	40da      	lsrs	r2, r3
     cfc:	3908      	subs	r1, #8
     cfe:	408e      	lsls	r6, r1
     d00:	0013      	movs	r3, r2
     d02:	4333      	orrs	r3, r6
     d04:	4699      	mov	r9, r3
     d06:	465b      	mov	r3, fp
     d08:	408b      	lsls	r3, r1
     d0a:	4698      	mov	r8, r3
     d0c:	2300      	movs	r3, #0
     d0e:	4c3c      	ldr	r4, [pc, #240]	; (e00 <__aeabi_ddiv+0x1f0>)
     d10:	2600      	movs	r6, #0
     d12:	1a24      	subs	r4, r4, r0
     d14:	9303      	str	r3, [sp, #12]
     d16:	e79f      	b.n	c58 <__aeabi_ddiv+0x48>
     d18:	4651      	mov	r1, sl
     d1a:	465a      	mov	r2, fp
     d1c:	4311      	orrs	r1, r2
     d1e:	d129      	bne.n	d74 <__aeabi_ddiv+0x164>
     d20:	2200      	movs	r2, #0
     d22:	4693      	mov	fp, r2
     d24:	3202      	adds	r2, #2
     d26:	e7b1      	b.n	c8c <__aeabi_ddiv+0x7c>
     d28:	4659      	mov	r1, fp
     d2a:	4301      	orrs	r1, r0
     d2c:	d01e      	beq.n	d6c <__aeabi_ddiv+0x15c>
     d2e:	465b      	mov	r3, fp
     d30:	2b00      	cmp	r3, #0
     d32:	d100      	bne.n	d36 <__aeabi_ddiv+0x126>
     d34:	e19e      	b.n	1074 <__aeabi_ddiv+0x464>
     d36:	4658      	mov	r0, fp
     d38:	f000 fe68 	bl	1a0c <__clzsi2>
     d3c:	0003      	movs	r3, r0
     d3e:	3b0b      	subs	r3, #11
     d40:	2b1c      	cmp	r3, #28
     d42:	dd00      	ble.n	d46 <__aeabi_ddiv+0x136>
     d44:	e18f      	b.n	1066 <__aeabi_ddiv+0x456>
     d46:	0002      	movs	r2, r0
     d48:	4659      	mov	r1, fp
     d4a:	3a08      	subs	r2, #8
     d4c:	4091      	lsls	r1, r2
     d4e:	468b      	mov	fp, r1
     d50:	211d      	movs	r1, #29
     d52:	1acb      	subs	r3, r1, r3
     d54:	4651      	mov	r1, sl
     d56:	40d9      	lsrs	r1, r3
     d58:	000b      	movs	r3, r1
     d5a:	4659      	mov	r1, fp
     d5c:	430b      	orrs	r3, r1
     d5e:	4651      	mov	r1, sl
     d60:	469b      	mov	fp, r3
     d62:	4091      	lsls	r1, r2
     d64:	4b26      	ldr	r3, [pc, #152]	; (e00 <__aeabi_ddiv+0x1f0>)
     d66:	2200      	movs	r2, #0
     d68:	1a1b      	subs	r3, r3, r0
     d6a:	e78f      	b.n	c8c <__aeabi_ddiv+0x7c>
     d6c:	2300      	movs	r3, #0
     d6e:	2201      	movs	r2, #1
     d70:	469b      	mov	fp, r3
     d72:	e78b      	b.n	c8c <__aeabi_ddiv+0x7c>
     d74:	4651      	mov	r1, sl
     d76:	2203      	movs	r2, #3
     d78:	e788      	b.n	c8c <__aeabi_ddiv+0x7c>
     d7a:	2300      	movs	r3, #0
     d7c:	4698      	mov	r8, r3
     d7e:	3301      	adds	r3, #1
     d80:	2604      	movs	r6, #4
     d82:	2400      	movs	r4, #0
     d84:	9303      	str	r3, [sp, #12]
     d86:	e767      	b.n	c58 <__aeabi_ddiv+0x48>
     d88:	2303      	movs	r3, #3
     d8a:	46b1      	mov	r9, r6
     d8c:	9303      	str	r3, [sp, #12]
     d8e:	260c      	movs	r6, #12
     d90:	e762      	b.n	c58 <__aeabi_ddiv+0x48>
     d92:	2a03      	cmp	r2, #3
     d94:	d100      	bne.n	d98 <__aeabi_ddiv+0x188>
     d96:	e25c      	b.n	1252 <__aeabi_ddiv+0x642>
     d98:	9b01      	ldr	r3, [sp, #4]
     d9a:	2a01      	cmp	r2, #1
     d9c:	d000      	beq.n	da0 <__aeabi_ddiv+0x190>
     d9e:	e1e4      	b.n	116a <__aeabi_ddiv+0x55a>
     da0:	4013      	ands	r3, r2
     da2:	469c      	mov	ip, r3
     da4:	2300      	movs	r3, #0
     da6:	2400      	movs	r4, #0
     da8:	2200      	movs	r2, #0
     daa:	4698      	mov	r8, r3
     dac:	2100      	movs	r1, #0
     dae:	0312      	lsls	r2, r2, #12
     db0:	0b13      	lsrs	r3, r2, #12
     db2:	0d0a      	lsrs	r2, r1, #20
     db4:	0512      	lsls	r2, r2, #20
     db6:	431a      	orrs	r2, r3
     db8:	0523      	lsls	r3, r4, #20
     dba:	4c12      	ldr	r4, [pc, #72]	; (e04 <__aeabi_ddiv+0x1f4>)
     dbc:	4640      	mov	r0, r8
     dbe:	4022      	ands	r2, r4
     dc0:	4313      	orrs	r3, r2
     dc2:	4662      	mov	r2, ip
     dc4:	005b      	lsls	r3, r3, #1
     dc6:	07d2      	lsls	r2, r2, #31
     dc8:	085b      	lsrs	r3, r3, #1
     dca:	4313      	orrs	r3, r2
     dcc:	0019      	movs	r1, r3
     dce:	b007      	add	sp, #28
     dd0:	bc3c      	pop	{r2, r3, r4, r5}
     dd2:	4690      	mov	r8, r2
     dd4:	4699      	mov	r9, r3
     dd6:	46a2      	mov	sl, r4
     dd8:	46ab      	mov	fp, r5
     dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ddc:	2300      	movs	r3, #0
     dde:	2280      	movs	r2, #128	; 0x80
     de0:	469c      	mov	ip, r3
     de2:	0312      	lsls	r2, r2, #12
     de4:	4698      	mov	r8, r3
     de6:	4c03      	ldr	r4, [pc, #12]	; (df4 <__aeabi_ddiv+0x1e4>)
     de8:	e7e0      	b.n	dac <__aeabi_ddiv+0x19c>
     dea:	2300      	movs	r3, #0
     dec:	4c01      	ldr	r4, [pc, #4]	; (df4 <__aeabi_ddiv+0x1e4>)
     dee:	2200      	movs	r2, #0
     df0:	4698      	mov	r8, r3
     df2:	e7db      	b.n	dac <__aeabi_ddiv+0x19c>
     df4:	000007ff 	.word	0x000007ff
     df8:	fffffc01 	.word	0xfffffc01
     dfc:	0000d3e0 	.word	0x0000d3e0
     e00:	fffffc0d 	.word	0xfffffc0d
     e04:	800fffff 	.word	0x800fffff
     e08:	45d9      	cmp	r9, fp
     e0a:	d900      	bls.n	e0e <__aeabi_ddiv+0x1fe>
     e0c:	e139      	b.n	1082 <__aeabi_ddiv+0x472>
     e0e:	d100      	bne.n	e12 <__aeabi_ddiv+0x202>
     e10:	e134      	b.n	107c <__aeabi_ddiv+0x46c>
     e12:	2300      	movs	r3, #0
     e14:	4646      	mov	r6, r8
     e16:	464d      	mov	r5, r9
     e18:	469a      	mov	sl, r3
     e1a:	3c01      	subs	r4, #1
     e1c:	465b      	mov	r3, fp
     e1e:	0e0a      	lsrs	r2, r1, #24
     e20:	021b      	lsls	r3, r3, #8
     e22:	431a      	orrs	r2, r3
     e24:	020b      	lsls	r3, r1, #8
     e26:	0c17      	lsrs	r7, r2, #16
     e28:	9303      	str	r3, [sp, #12]
     e2a:	0413      	lsls	r3, r2, #16
     e2c:	0c1b      	lsrs	r3, r3, #16
     e2e:	0039      	movs	r1, r7
     e30:	0028      	movs	r0, r5
     e32:	4690      	mov	r8, r2
     e34:	9301      	str	r3, [sp, #4]
     e36:	f7ff f9c7 	bl	1c8 <__aeabi_uidiv>
     e3a:	0002      	movs	r2, r0
     e3c:	9b01      	ldr	r3, [sp, #4]
     e3e:	4683      	mov	fp, r0
     e40:	435a      	muls	r2, r3
     e42:	0028      	movs	r0, r5
     e44:	0039      	movs	r1, r7
     e46:	4691      	mov	r9, r2
     e48:	f7ff fa02 	bl	250 <__aeabi_uidivmod>
     e4c:	0c35      	lsrs	r5, r6, #16
     e4e:	0409      	lsls	r1, r1, #16
     e50:	430d      	orrs	r5, r1
     e52:	45a9      	cmp	r9, r5
     e54:	d90d      	bls.n	e72 <__aeabi_ddiv+0x262>
     e56:	465b      	mov	r3, fp
     e58:	4445      	add	r5, r8
     e5a:	3b01      	subs	r3, #1
     e5c:	45a8      	cmp	r8, r5
     e5e:	d900      	bls.n	e62 <__aeabi_ddiv+0x252>
     e60:	e13a      	b.n	10d8 <__aeabi_ddiv+0x4c8>
     e62:	45a9      	cmp	r9, r5
     e64:	d800      	bhi.n	e68 <__aeabi_ddiv+0x258>
     e66:	e137      	b.n	10d8 <__aeabi_ddiv+0x4c8>
     e68:	2302      	movs	r3, #2
     e6a:	425b      	negs	r3, r3
     e6c:	469c      	mov	ip, r3
     e6e:	4445      	add	r5, r8
     e70:	44e3      	add	fp, ip
     e72:	464b      	mov	r3, r9
     e74:	1aeb      	subs	r3, r5, r3
     e76:	0039      	movs	r1, r7
     e78:	0018      	movs	r0, r3
     e7a:	9304      	str	r3, [sp, #16]
     e7c:	f7ff f9a4 	bl	1c8 <__aeabi_uidiv>
     e80:	9b01      	ldr	r3, [sp, #4]
     e82:	0005      	movs	r5, r0
     e84:	4343      	muls	r3, r0
     e86:	0039      	movs	r1, r7
     e88:	9804      	ldr	r0, [sp, #16]
     e8a:	4699      	mov	r9, r3
     e8c:	f7ff f9e0 	bl	250 <__aeabi_uidivmod>
     e90:	0433      	lsls	r3, r6, #16
     e92:	0409      	lsls	r1, r1, #16
     e94:	0c1b      	lsrs	r3, r3, #16
     e96:	430b      	orrs	r3, r1
     e98:	4599      	cmp	r9, r3
     e9a:	d909      	bls.n	eb0 <__aeabi_ddiv+0x2a0>
     e9c:	4443      	add	r3, r8
     e9e:	1e6a      	subs	r2, r5, #1
     ea0:	4598      	cmp	r8, r3
     ea2:	d900      	bls.n	ea6 <__aeabi_ddiv+0x296>
     ea4:	e11a      	b.n	10dc <__aeabi_ddiv+0x4cc>
     ea6:	4599      	cmp	r9, r3
     ea8:	d800      	bhi.n	eac <__aeabi_ddiv+0x29c>
     eaa:	e117      	b.n	10dc <__aeabi_ddiv+0x4cc>
     eac:	3d02      	subs	r5, #2
     eae:	4443      	add	r3, r8
     eb0:	464a      	mov	r2, r9
     eb2:	1a9b      	subs	r3, r3, r2
     eb4:	465a      	mov	r2, fp
     eb6:	0412      	lsls	r2, r2, #16
     eb8:	432a      	orrs	r2, r5
     eba:	9903      	ldr	r1, [sp, #12]
     ebc:	4693      	mov	fp, r2
     ebe:	0c10      	lsrs	r0, r2, #16
     ec0:	0c0a      	lsrs	r2, r1, #16
     ec2:	4691      	mov	r9, r2
     ec4:	0409      	lsls	r1, r1, #16
     ec6:	465a      	mov	r2, fp
     ec8:	0c09      	lsrs	r1, r1, #16
     eca:	464e      	mov	r6, r9
     ecc:	000d      	movs	r5, r1
     ece:	0412      	lsls	r2, r2, #16
     ed0:	0c12      	lsrs	r2, r2, #16
     ed2:	4345      	muls	r5, r0
     ed4:	9105      	str	r1, [sp, #20]
     ed6:	4351      	muls	r1, r2
     ed8:	4372      	muls	r2, r6
     eda:	4370      	muls	r0, r6
     edc:	1952      	adds	r2, r2, r5
     ede:	0c0e      	lsrs	r6, r1, #16
     ee0:	18b2      	adds	r2, r6, r2
     ee2:	4295      	cmp	r5, r2
     ee4:	d903      	bls.n	eee <__aeabi_ddiv+0x2de>
     ee6:	2580      	movs	r5, #128	; 0x80
     ee8:	026d      	lsls	r5, r5, #9
     eea:	46ac      	mov	ip, r5
     eec:	4460      	add	r0, ip
     eee:	0c15      	lsrs	r5, r2, #16
     ef0:	0409      	lsls	r1, r1, #16
     ef2:	0412      	lsls	r2, r2, #16
     ef4:	0c09      	lsrs	r1, r1, #16
     ef6:	1828      	adds	r0, r5, r0
     ef8:	1852      	adds	r2, r2, r1
     efa:	4283      	cmp	r3, r0
     efc:	d200      	bcs.n	f00 <__aeabi_ddiv+0x2f0>
     efe:	e0ce      	b.n	109e <__aeabi_ddiv+0x48e>
     f00:	d100      	bne.n	f04 <__aeabi_ddiv+0x2f4>
     f02:	e0c8      	b.n	1096 <__aeabi_ddiv+0x486>
     f04:	1a1d      	subs	r5, r3, r0
     f06:	4653      	mov	r3, sl
     f08:	1a9e      	subs	r6, r3, r2
     f0a:	45b2      	cmp	sl, r6
     f0c:	4192      	sbcs	r2, r2
     f0e:	4252      	negs	r2, r2
     f10:	1aab      	subs	r3, r5, r2
     f12:	469a      	mov	sl, r3
     f14:	4598      	cmp	r8, r3
     f16:	d100      	bne.n	f1a <__aeabi_ddiv+0x30a>
     f18:	e117      	b.n	114a <__aeabi_ddiv+0x53a>
     f1a:	0039      	movs	r1, r7
     f1c:	0018      	movs	r0, r3
     f1e:	f7ff f953 	bl	1c8 <__aeabi_uidiv>
     f22:	9b01      	ldr	r3, [sp, #4]
     f24:	0005      	movs	r5, r0
     f26:	4343      	muls	r3, r0
     f28:	0039      	movs	r1, r7
     f2a:	4650      	mov	r0, sl
     f2c:	9304      	str	r3, [sp, #16]
     f2e:	f7ff f98f 	bl	250 <__aeabi_uidivmod>
     f32:	9804      	ldr	r0, [sp, #16]
     f34:	040b      	lsls	r3, r1, #16
     f36:	0c31      	lsrs	r1, r6, #16
     f38:	4319      	orrs	r1, r3
     f3a:	4288      	cmp	r0, r1
     f3c:	d909      	bls.n	f52 <__aeabi_ddiv+0x342>
     f3e:	4441      	add	r1, r8
     f40:	1e6b      	subs	r3, r5, #1
     f42:	4588      	cmp	r8, r1
     f44:	d900      	bls.n	f48 <__aeabi_ddiv+0x338>
     f46:	e107      	b.n	1158 <__aeabi_ddiv+0x548>
     f48:	4288      	cmp	r0, r1
     f4a:	d800      	bhi.n	f4e <__aeabi_ddiv+0x33e>
     f4c:	e104      	b.n	1158 <__aeabi_ddiv+0x548>
     f4e:	3d02      	subs	r5, #2
     f50:	4441      	add	r1, r8
     f52:	9b04      	ldr	r3, [sp, #16]
     f54:	1acb      	subs	r3, r1, r3
     f56:	0018      	movs	r0, r3
     f58:	0039      	movs	r1, r7
     f5a:	9304      	str	r3, [sp, #16]
     f5c:	f7ff f934 	bl	1c8 <__aeabi_uidiv>
     f60:	9b01      	ldr	r3, [sp, #4]
     f62:	4682      	mov	sl, r0
     f64:	4343      	muls	r3, r0
     f66:	0039      	movs	r1, r7
     f68:	9804      	ldr	r0, [sp, #16]
     f6a:	9301      	str	r3, [sp, #4]
     f6c:	f7ff f970 	bl	250 <__aeabi_uidivmod>
     f70:	9801      	ldr	r0, [sp, #4]
     f72:	040b      	lsls	r3, r1, #16
     f74:	0431      	lsls	r1, r6, #16
     f76:	0c09      	lsrs	r1, r1, #16
     f78:	4319      	orrs	r1, r3
     f7a:	4288      	cmp	r0, r1
     f7c:	d90d      	bls.n	f9a <__aeabi_ddiv+0x38a>
     f7e:	4653      	mov	r3, sl
     f80:	4441      	add	r1, r8
     f82:	3b01      	subs	r3, #1
     f84:	4588      	cmp	r8, r1
     f86:	d900      	bls.n	f8a <__aeabi_ddiv+0x37a>
     f88:	e0e8      	b.n	115c <__aeabi_ddiv+0x54c>
     f8a:	4288      	cmp	r0, r1
     f8c:	d800      	bhi.n	f90 <__aeabi_ddiv+0x380>
     f8e:	e0e5      	b.n	115c <__aeabi_ddiv+0x54c>
     f90:	2302      	movs	r3, #2
     f92:	425b      	negs	r3, r3
     f94:	469c      	mov	ip, r3
     f96:	4441      	add	r1, r8
     f98:	44e2      	add	sl, ip
     f9a:	9b01      	ldr	r3, [sp, #4]
     f9c:	042d      	lsls	r5, r5, #16
     f9e:	1ace      	subs	r6, r1, r3
     fa0:	4651      	mov	r1, sl
     fa2:	4329      	orrs	r1, r5
     fa4:	9d05      	ldr	r5, [sp, #20]
     fa6:	464f      	mov	r7, r9
     fa8:	002a      	movs	r2, r5
     faa:	040b      	lsls	r3, r1, #16
     fac:	0c08      	lsrs	r0, r1, #16
     fae:	0c1b      	lsrs	r3, r3, #16
     fb0:	435a      	muls	r2, r3
     fb2:	4345      	muls	r5, r0
     fb4:	437b      	muls	r3, r7
     fb6:	4378      	muls	r0, r7
     fb8:	195b      	adds	r3, r3, r5
     fba:	0c17      	lsrs	r7, r2, #16
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	429d      	cmp	r5, r3
     fc0:	d903      	bls.n	fca <__aeabi_ddiv+0x3ba>
     fc2:	2580      	movs	r5, #128	; 0x80
     fc4:	026d      	lsls	r5, r5, #9
     fc6:	46ac      	mov	ip, r5
     fc8:	4460      	add	r0, ip
     fca:	0c1d      	lsrs	r5, r3, #16
     fcc:	0412      	lsls	r2, r2, #16
     fce:	041b      	lsls	r3, r3, #16
     fd0:	0c12      	lsrs	r2, r2, #16
     fd2:	1828      	adds	r0, r5, r0
     fd4:	189b      	adds	r3, r3, r2
     fd6:	4286      	cmp	r6, r0
     fd8:	d200      	bcs.n	fdc <__aeabi_ddiv+0x3cc>
     fda:	e093      	b.n	1104 <__aeabi_ddiv+0x4f4>
     fdc:	d100      	bne.n	fe0 <__aeabi_ddiv+0x3d0>
     fde:	e08e      	b.n	10fe <__aeabi_ddiv+0x4ee>
     fe0:	2301      	movs	r3, #1
     fe2:	4319      	orrs	r1, r3
     fe4:	4ba0      	ldr	r3, [pc, #640]	; (1268 <__aeabi_ddiv+0x658>)
     fe6:	18e3      	adds	r3, r4, r3
     fe8:	2b00      	cmp	r3, #0
     fea:	dc00      	bgt.n	fee <__aeabi_ddiv+0x3de>
     fec:	e099      	b.n	1122 <__aeabi_ddiv+0x512>
     fee:	074a      	lsls	r2, r1, #29
     ff0:	d000      	beq.n	ff4 <__aeabi_ddiv+0x3e4>
     ff2:	e09e      	b.n	1132 <__aeabi_ddiv+0x522>
     ff4:	465a      	mov	r2, fp
     ff6:	01d2      	lsls	r2, r2, #7
     ff8:	d506      	bpl.n	1008 <__aeabi_ddiv+0x3f8>
     ffa:	465a      	mov	r2, fp
     ffc:	4b9b      	ldr	r3, [pc, #620]	; (126c <__aeabi_ddiv+0x65c>)
     ffe:	401a      	ands	r2, r3
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	4693      	mov	fp, r2
    1004:	00db      	lsls	r3, r3, #3
    1006:	18e3      	adds	r3, r4, r3
    1008:	4a99      	ldr	r2, [pc, #612]	; (1270 <__aeabi_ddiv+0x660>)
    100a:	4293      	cmp	r3, r2
    100c:	dd68      	ble.n	10e0 <__aeabi_ddiv+0x4d0>
    100e:	2301      	movs	r3, #1
    1010:	9a02      	ldr	r2, [sp, #8]
    1012:	4c98      	ldr	r4, [pc, #608]	; (1274 <__aeabi_ddiv+0x664>)
    1014:	401a      	ands	r2, r3
    1016:	2300      	movs	r3, #0
    1018:	4694      	mov	ip, r2
    101a:	4698      	mov	r8, r3
    101c:	2200      	movs	r2, #0
    101e:	e6c5      	b.n	dac <__aeabi_ddiv+0x19c>
    1020:	2280      	movs	r2, #128	; 0x80
    1022:	464b      	mov	r3, r9
    1024:	0312      	lsls	r2, r2, #12
    1026:	4213      	tst	r3, r2
    1028:	d00a      	beq.n	1040 <__aeabi_ddiv+0x430>
    102a:	465b      	mov	r3, fp
    102c:	4213      	tst	r3, r2
    102e:	d106      	bne.n	103e <__aeabi_ddiv+0x42e>
    1030:	431a      	orrs	r2, r3
    1032:	0312      	lsls	r2, r2, #12
    1034:	0b12      	lsrs	r2, r2, #12
    1036:	46ac      	mov	ip, r5
    1038:	4688      	mov	r8, r1
    103a:	4c8e      	ldr	r4, [pc, #568]	; (1274 <__aeabi_ddiv+0x664>)
    103c:	e6b6      	b.n	dac <__aeabi_ddiv+0x19c>
    103e:	464b      	mov	r3, r9
    1040:	431a      	orrs	r2, r3
    1042:	0312      	lsls	r2, r2, #12
    1044:	0b12      	lsrs	r2, r2, #12
    1046:	46bc      	mov	ip, r7
    1048:	4c8a      	ldr	r4, [pc, #552]	; (1274 <__aeabi_ddiv+0x664>)
    104a:	e6af      	b.n	dac <__aeabi_ddiv+0x19c>
    104c:	0003      	movs	r3, r0
    104e:	465a      	mov	r2, fp
    1050:	3b28      	subs	r3, #40	; 0x28
    1052:	409a      	lsls	r2, r3
    1054:	2300      	movs	r3, #0
    1056:	4691      	mov	r9, r2
    1058:	4698      	mov	r8, r3
    105a:	e657      	b.n	d0c <__aeabi_ddiv+0xfc>
    105c:	4658      	mov	r0, fp
    105e:	f000 fcd5 	bl	1a0c <__clzsi2>
    1062:	3020      	adds	r0, #32
    1064:	e640      	b.n	ce8 <__aeabi_ddiv+0xd8>
    1066:	0003      	movs	r3, r0
    1068:	4652      	mov	r2, sl
    106a:	3b28      	subs	r3, #40	; 0x28
    106c:	409a      	lsls	r2, r3
    106e:	2100      	movs	r1, #0
    1070:	4693      	mov	fp, r2
    1072:	e677      	b.n	d64 <__aeabi_ddiv+0x154>
    1074:	f000 fcca 	bl	1a0c <__clzsi2>
    1078:	3020      	adds	r0, #32
    107a:	e65f      	b.n	d3c <__aeabi_ddiv+0x12c>
    107c:	4588      	cmp	r8, r1
    107e:	d200      	bcs.n	1082 <__aeabi_ddiv+0x472>
    1080:	e6c7      	b.n	e12 <__aeabi_ddiv+0x202>
    1082:	464b      	mov	r3, r9
    1084:	07de      	lsls	r6, r3, #31
    1086:	085d      	lsrs	r5, r3, #1
    1088:	4643      	mov	r3, r8
    108a:	085b      	lsrs	r3, r3, #1
    108c:	431e      	orrs	r6, r3
    108e:	4643      	mov	r3, r8
    1090:	07db      	lsls	r3, r3, #31
    1092:	469a      	mov	sl, r3
    1094:	e6c2      	b.n	e1c <__aeabi_ddiv+0x20c>
    1096:	2500      	movs	r5, #0
    1098:	4592      	cmp	sl, r2
    109a:	d300      	bcc.n	109e <__aeabi_ddiv+0x48e>
    109c:	e733      	b.n	f06 <__aeabi_ddiv+0x2f6>
    109e:	9e03      	ldr	r6, [sp, #12]
    10a0:	4659      	mov	r1, fp
    10a2:	46b4      	mov	ip, r6
    10a4:	44e2      	add	sl, ip
    10a6:	45b2      	cmp	sl, r6
    10a8:	41ad      	sbcs	r5, r5
    10aa:	426d      	negs	r5, r5
    10ac:	4445      	add	r5, r8
    10ae:	18eb      	adds	r3, r5, r3
    10b0:	3901      	subs	r1, #1
    10b2:	4598      	cmp	r8, r3
    10b4:	d207      	bcs.n	10c6 <__aeabi_ddiv+0x4b6>
    10b6:	4298      	cmp	r0, r3
    10b8:	d900      	bls.n	10bc <__aeabi_ddiv+0x4ac>
    10ba:	e07f      	b.n	11bc <__aeabi_ddiv+0x5ac>
    10bc:	d100      	bne.n	10c0 <__aeabi_ddiv+0x4b0>
    10be:	e0bc      	b.n	123a <__aeabi_ddiv+0x62a>
    10c0:	1a1d      	subs	r5, r3, r0
    10c2:	468b      	mov	fp, r1
    10c4:	e71f      	b.n	f06 <__aeabi_ddiv+0x2f6>
    10c6:	4598      	cmp	r8, r3
    10c8:	d1fa      	bne.n	10c0 <__aeabi_ddiv+0x4b0>
    10ca:	9d03      	ldr	r5, [sp, #12]
    10cc:	4555      	cmp	r5, sl
    10ce:	d9f2      	bls.n	10b6 <__aeabi_ddiv+0x4a6>
    10d0:	4643      	mov	r3, r8
    10d2:	468b      	mov	fp, r1
    10d4:	1a1d      	subs	r5, r3, r0
    10d6:	e716      	b.n	f06 <__aeabi_ddiv+0x2f6>
    10d8:	469b      	mov	fp, r3
    10da:	e6ca      	b.n	e72 <__aeabi_ddiv+0x262>
    10dc:	0015      	movs	r5, r2
    10de:	e6e7      	b.n	eb0 <__aeabi_ddiv+0x2a0>
    10e0:	465a      	mov	r2, fp
    10e2:	08c9      	lsrs	r1, r1, #3
    10e4:	0752      	lsls	r2, r2, #29
    10e6:	430a      	orrs	r2, r1
    10e8:	055b      	lsls	r3, r3, #21
    10ea:	4690      	mov	r8, r2
    10ec:	0d5c      	lsrs	r4, r3, #21
    10ee:	465a      	mov	r2, fp
    10f0:	2301      	movs	r3, #1
    10f2:	9902      	ldr	r1, [sp, #8]
    10f4:	0252      	lsls	r2, r2, #9
    10f6:	4019      	ands	r1, r3
    10f8:	0b12      	lsrs	r2, r2, #12
    10fa:	468c      	mov	ip, r1
    10fc:	e656      	b.n	dac <__aeabi_ddiv+0x19c>
    10fe:	2b00      	cmp	r3, #0
    1100:	d100      	bne.n	1104 <__aeabi_ddiv+0x4f4>
    1102:	e76f      	b.n	fe4 <__aeabi_ddiv+0x3d4>
    1104:	4446      	add	r6, r8
    1106:	1e4a      	subs	r2, r1, #1
    1108:	45b0      	cmp	r8, r6
    110a:	d929      	bls.n	1160 <__aeabi_ddiv+0x550>
    110c:	0011      	movs	r1, r2
    110e:	4286      	cmp	r6, r0
    1110:	d000      	beq.n	1114 <__aeabi_ddiv+0x504>
    1112:	e765      	b.n	fe0 <__aeabi_ddiv+0x3d0>
    1114:	9a03      	ldr	r2, [sp, #12]
    1116:	4293      	cmp	r3, r2
    1118:	d000      	beq.n	111c <__aeabi_ddiv+0x50c>
    111a:	e761      	b.n	fe0 <__aeabi_ddiv+0x3d0>
    111c:	e762      	b.n	fe4 <__aeabi_ddiv+0x3d4>
    111e:	2101      	movs	r1, #1
    1120:	4249      	negs	r1, r1
    1122:	2001      	movs	r0, #1
    1124:	1ac2      	subs	r2, r0, r3
    1126:	2a38      	cmp	r2, #56	; 0x38
    1128:	dd21      	ble.n	116e <__aeabi_ddiv+0x55e>
    112a:	9b02      	ldr	r3, [sp, #8]
    112c:	4003      	ands	r3, r0
    112e:	469c      	mov	ip, r3
    1130:	e638      	b.n	da4 <__aeabi_ddiv+0x194>
    1132:	220f      	movs	r2, #15
    1134:	400a      	ands	r2, r1
    1136:	2a04      	cmp	r2, #4
    1138:	d100      	bne.n	113c <__aeabi_ddiv+0x52c>
    113a:	e75b      	b.n	ff4 <__aeabi_ddiv+0x3e4>
    113c:	000a      	movs	r2, r1
    113e:	1d11      	adds	r1, r2, #4
    1140:	4291      	cmp	r1, r2
    1142:	4192      	sbcs	r2, r2
    1144:	4252      	negs	r2, r2
    1146:	4493      	add	fp, r2
    1148:	e754      	b.n	ff4 <__aeabi_ddiv+0x3e4>
    114a:	4b47      	ldr	r3, [pc, #284]	; (1268 <__aeabi_ddiv+0x658>)
    114c:	18e3      	adds	r3, r4, r3
    114e:	2b00      	cmp	r3, #0
    1150:	dde5      	ble.n	111e <__aeabi_ddiv+0x50e>
    1152:	2201      	movs	r2, #1
    1154:	4252      	negs	r2, r2
    1156:	e7f2      	b.n	113e <__aeabi_ddiv+0x52e>
    1158:	001d      	movs	r5, r3
    115a:	e6fa      	b.n	f52 <__aeabi_ddiv+0x342>
    115c:	469a      	mov	sl, r3
    115e:	e71c      	b.n	f9a <__aeabi_ddiv+0x38a>
    1160:	42b0      	cmp	r0, r6
    1162:	d839      	bhi.n	11d8 <__aeabi_ddiv+0x5c8>
    1164:	d06e      	beq.n	1244 <__aeabi_ddiv+0x634>
    1166:	0011      	movs	r1, r2
    1168:	e73a      	b.n	fe0 <__aeabi_ddiv+0x3d0>
    116a:	9302      	str	r3, [sp, #8]
    116c:	e73a      	b.n	fe4 <__aeabi_ddiv+0x3d4>
    116e:	2a1f      	cmp	r2, #31
    1170:	dc3c      	bgt.n	11ec <__aeabi_ddiv+0x5dc>
    1172:	2320      	movs	r3, #32
    1174:	1a9b      	subs	r3, r3, r2
    1176:	000c      	movs	r4, r1
    1178:	4658      	mov	r0, fp
    117a:	4099      	lsls	r1, r3
    117c:	4098      	lsls	r0, r3
    117e:	1e4b      	subs	r3, r1, #1
    1180:	4199      	sbcs	r1, r3
    1182:	465b      	mov	r3, fp
    1184:	40d4      	lsrs	r4, r2
    1186:	40d3      	lsrs	r3, r2
    1188:	4320      	orrs	r0, r4
    118a:	4308      	orrs	r0, r1
    118c:	001a      	movs	r2, r3
    118e:	0743      	lsls	r3, r0, #29
    1190:	d009      	beq.n	11a6 <__aeabi_ddiv+0x596>
    1192:	230f      	movs	r3, #15
    1194:	4003      	ands	r3, r0
    1196:	2b04      	cmp	r3, #4
    1198:	d005      	beq.n	11a6 <__aeabi_ddiv+0x596>
    119a:	0001      	movs	r1, r0
    119c:	1d08      	adds	r0, r1, #4
    119e:	4288      	cmp	r0, r1
    11a0:	419b      	sbcs	r3, r3
    11a2:	425b      	negs	r3, r3
    11a4:	18d2      	adds	r2, r2, r3
    11a6:	0213      	lsls	r3, r2, #8
    11a8:	d53a      	bpl.n	1220 <__aeabi_ddiv+0x610>
    11aa:	2301      	movs	r3, #1
    11ac:	9a02      	ldr	r2, [sp, #8]
    11ae:	2401      	movs	r4, #1
    11b0:	401a      	ands	r2, r3
    11b2:	2300      	movs	r3, #0
    11b4:	4694      	mov	ip, r2
    11b6:	4698      	mov	r8, r3
    11b8:	2200      	movs	r2, #0
    11ba:	e5f7      	b.n	dac <__aeabi_ddiv+0x19c>
    11bc:	2102      	movs	r1, #2
    11be:	4249      	negs	r1, r1
    11c0:	468c      	mov	ip, r1
    11c2:	9d03      	ldr	r5, [sp, #12]
    11c4:	44e3      	add	fp, ip
    11c6:	46ac      	mov	ip, r5
    11c8:	44e2      	add	sl, ip
    11ca:	45aa      	cmp	sl, r5
    11cc:	41ad      	sbcs	r5, r5
    11ce:	426d      	negs	r5, r5
    11d0:	4445      	add	r5, r8
    11d2:	18ed      	adds	r5, r5, r3
    11d4:	1a2d      	subs	r5, r5, r0
    11d6:	e696      	b.n	f06 <__aeabi_ddiv+0x2f6>
    11d8:	1e8a      	subs	r2, r1, #2
    11da:	9903      	ldr	r1, [sp, #12]
    11dc:	004d      	lsls	r5, r1, #1
    11de:	428d      	cmp	r5, r1
    11e0:	4189      	sbcs	r1, r1
    11e2:	4249      	negs	r1, r1
    11e4:	4441      	add	r1, r8
    11e6:	1876      	adds	r6, r6, r1
    11e8:	9503      	str	r5, [sp, #12]
    11ea:	e78f      	b.n	110c <__aeabi_ddiv+0x4fc>
    11ec:	201f      	movs	r0, #31
    11ee:	4240      	negs	r0, r0
    11f0:	1ac3      	subs	r3, r0, r3
    11f2:	4658      	mov	r0, fp
    11f4:	40d8      	lsrs	r0, r3
    11f6:	0003      	movs	r3, r0
    11f8:	2a20      	cmp	r2, #32
    11fa:	d028      	beq.n	124e <__aeabi_ddiv+0x63e>
    11fc:	2040      	movs	r0, #64	; 0x40
    11fe:	465d      	mov	r5, fp
    1200:	1a82      	subs	r2, r0, r2
    1202:	4095      	lsls	r5, r2
    1204:	4329      	orrs	r1, r5
    1206:	1e4a      	subs	r2, r1, #1
    1208:	4191      	sbcs	r1, r2
    120a:	4319      	orrs	r1, r3
    120c:	2307      	movs	r3, #7
    120e:	2200      	movs	r2, #0
    1210:	400b      	ands	r3, r1
    1212:	d009      	beq.n	1228 <__aeabi_ddiv+0x618>
    1214:	230f      	movs	r3, #15
    1216:	2200      	movs	r2, #0
    1218:	400b      	ands	r3, r1
    121a:	0008      	movs	r0, r1
    121c:	2b04      	cmp	r3, #4
    121e:	d1bd      	bne.n	119c <__aeabi_ddiv+0x58c>
    1220:	0001      	movs	r1, r0
    1222:	0753      	lsls	r3, r2, #29
    1224:	0252      	lsls	r2, r2, #9
    1226:	0b12      	lsrs	r2, r2, #12
    1228:	08c9      	lsrs	r1, r1, #3
    122a:	4319      	orrs	r1, r3
    122c:	2301      	movs	r3, #1
    122e:	4688      	mov	r8, r1
    1230:	9902      	ldr	r1, [sp, #8]
    1232:	2400      	movs	r4, #0
    1234:	4019      	ands	r1, r3
    1236:	468c      	mov	ip, r1
    1238:	e5b8      	b.n	dac <__aeabi_ddiv+0x19c>
    123a:	4552      	cmp	r2, sl
    123c:	d8be      	bhi.n	11bc <__aeabi_ddiv+0x5ac>
    123e:	468b      	mov	fp, r1
    1240:	2500      	movs	r5, #0
    1242:	e660      	b.n	f06 <__aeabi_ddiv+0x2f6>
    1244:	9d03      	ldr	r5, [sp, #12]
    1246:	429d      	cmp	r5, r3
    1248:	d3c6      	bcc.n	11d8 <__aeabi_ddiv+0x5c8>
    124a:	0011      	movs	r1, r2
    124c:	e762      	b.n	1114 <__aeabi_ddiv+0x504>
    124e:	2500      	movs	r5, #0
    1250:	e7d8      	b.n	1204 <__aeabi_ddiv+0x5f4>
    1252:	2280      	movs	r2, #128	; 0x80
    1254:	465b      	mov	r3, fp
    1256:	0312      	lsls	r2, r2, #12
    1258:	431a      	orrs	r2, r3
    125a:	9b01      	ldr	r3, [sp, #4]
    125c:	0312      	lsls	r2, r2, #12
    125e:	0b12      	lsrs	r2, r2, #12
    1260:	469c      	mov	ip, r3
    1262:	4688      	mov	r8, r1
    1264:	4c03      	ldr	r4, [pc, #12]	; (1274 <__aeabi_ddiv+0x664>)
    1266:	e5a1      	b.n	dac <__aeabi_ddiv+0x19c>
    1268:	000003ff 	.word	0x000003ff
    126c:	feffffff 	.word	0xfeffffff
    1270:	000007fe 	.word	0x000007fe
    1274:	000007ff 	.word	0x000007ff

00001278 <__aeabi_dsub>:
    1278:	b5f0      	push	{r4, r5, r6, r7, lr}
    127a:	4657      	mov	r7, sl
    127c:	4645      	mov	r5, r8
    127e:	464e      	mov	r6, r9
    1280:	030c      	lsls	r4, r1, #12
    1282:	b4e0      	push	{r5, r6, r7}
    1284:	004e      	lsls	r6, r1, #1
    1286:	0fcd      	lsrs	r5, r1, #31
    1288:	0a61      	lsrs	r1, r4, #9
    128a:	0f44      	lsrs	r4, r0, #29
    128c:	430c      	orrs	r4, r1
    128e:	00c1      	lsls	r1, r0, #3
    1290:	0058      	lsls	r0, r3, #1
    1292:	0d40      	lsrs	r0, r0, #21
    1294:	4684      	mov	ip, r0
    1296:	468a      	mov	sl, r1
    1298:	000f      	movs	r7, r1
    129a:	0319      	lsls	r1, r3, #12
    129c:	0f50      	lsrs	r0, r2, #29
    129e:	0a49      	lsrs	r1, r1, #9
    12a0:	4301      	orrs	r1, r0
    12a2:	48c6      	ldr	r0, [pc, #792]	; (15bc <__aeabi_dsub+0x344>)
    12a4:	0d76      	lsrs	r6, r6, #21
    12a6:	46a8      	mov	r8, r5
    12a8:	0fdb      	lsrs	r3, r3, #31
    12aa:	00d2      	lsls	r2, r2, #3
    12ac:	4584      	cmp	ip, r0
    12ae:	d100      	bne.n	12b2 <__aeabi_dsub+0x3a>
    12b0:	e0d8      	b.n	1464 <__aeabi_dsub+0x1ec>
    12b2:	2001      	movs	r0, #1
    12b4:	4043      	eors	r3, r0
    12b6:	42ab      	cmp	r3, r5
    12b8:	d100      	bne.n	12bc <__aeabi_dsub+0x44>
    12ba:	e0a6      	b.n	140a <__aeabi_dsub+0x192>
    12bc:	4660      	mov	r0, ip
    12be:	1a35      	subs	r5, r6, r0
    12c0:	2d00      	cmp	r5, #0
    12c2:	dc00      	bgt.n	12c6 <__aeabi_dsub+0x4e>
    12c4:	e105      	b.n	14d2 <__aeabi_dsub+0x25a>
    12c6:	2800      	cmp	r0, #0
    12c8:	d110      	bne.n	12ec <__aeabi_dsub+0x74>
    12ca:	000b      	movs	r3, r1
    12cc:	4313      	orrs	r3, r2
    12ce:	d100      	bne.n	12d2 <__aeabi_dsub+0x5a>
    12d0:	e0d7      	b.n	1482 <__aeabi_dsub+0x20a>
    12d2:	1e6b      	subs	r3, r5, #1
    12d4:	2b00      	cmp	r3, #0
    12d6:	d000      	beq.n	12da <__aeabi_dsub+0x62>
    12d8:	e14b      	b.n	1572 <__aeabi_dsub+0x2fa>
    12da:	4653      	mov	r3, sl
    12dc:	1a9f      	subs	r7, r3, r2
    12de:	45ba      	cmp	sl, r7
    12e0:	4180      	sbcs	r0, r0
    12e2:	1a64      	subs	r4, r4, r1
    12e4:	4240      	negs	r0, r0
    12e6:	1a24      	subs	r4, r4, r0
    12e8:	2601      	movs	r6, #1
    12ea:	e01e      	b.n	132a <__aeabi_dsub+0xb2>
    12ec:	4bb3      	ldr	r3, [pc, #716]	; (15bc <__aeabi_dsub+0x344>)
    12ee:	429e      	cmp	r6, r3
    12f0:	d048      	beq.n	1384 <__aeabi_dsub+0x10c>
    12f2:	2380      	movs	r3, #128	; 0x80
    12f4:	041b      	lsls	r3, r3, #16
    12f6:	4319      	orrs	r1, r3
    12f8:	2d38      	cmp	r5, #56	; 0x38
    12fa:	dd00      	ble.n	12fe <__aeabi_dsub+0x86>
    12fc:	e119      	b.n	1532 <__aeabi_dsub+0x2ba>
    12fe:	2d1f      	cmp	r5, #31
    1300:	dd00      	ble.n	1304 <__aeabi_dsub+0x8c>
    1302:	e14c      	b.n	159e <__aeabi_dsub+0x326>
    1304:	2320      	movs	r3, #32
    1306:	000f      	movs	r7, r1
    1308:	1b5b      	subs	r3, r3, r5
    130a:	0010      	movs	r0, r2
    130c:	409a      	lsls	r2, r3
    130e:	409f      	lsls	r7, r3
    1310:	40e8      	lsrs	r0, r5
    1312:	1e53      	subs	r3, r2, #1
    1314:	419a      	sbcs	r2, r3
    1316:	40e9      	lsrs	r1, r5
    1318:	4307      	orrs	r7, r0
    131a:	4317      	orrs	r7, r2
    131c:	4653      	mov	r3, sl
    131e:	1bdf      	subs	r7, r3, r7
    1320:	1a61      	subs	r1, r4, r1
    1322:	45ba      	cmp	sl, r7
    1324:	41a4      	sbcs	r4, r4
    1326:	4264      	negs	r4, r4
    1328:	1b0c      	subs	r4, r1, r4
    132a:	0223      	lsls	r3, r4, #8
    132c:	d400      	bmi.n	1330 <__aeabi_dsub+0xb8>
    132e:	e0c5      	b.n	14bc <__aeabi_dsub+0x244>
    1330:	0264      	lsls	r4, r4, #9
    1332:	0a65      	lsrs	r5, r4, #9
    1334:	2d00      	cmp	r5, #0
    1336:	d100      	bne.n	133a <__aeabi_dsub+0xc2>
    1338:	e0f6      	b.n	1528 <__aeabi_dsub+0x2b0>
    133a:	0028      	movs	r0, r5
    133c:	f000 fb66 	bl	1a0c <__clzsi2>
    1340:	0003      	movs	r3, r0
    1342:	3b08      	subs	r3, #8
    1344:	2b1f      	cmp	r3, #31
    1346:	dd00      	ble.n	134a <__aeabi_dsub+0xd2>
    1348:	e0e9      	b.n	151e <__aeabi_dsub+0x2a6>
    134a:	2220      	movs	r2, #32
    134c:	003c      	movs	r4, r7
    134e:	1ad2      	subs	r2, r2, r3
    1350:	409d      	lsls	r5, r3
    1352:	40d4      	lsrs	r4, r2
    1354:	409f      	lsls	r7, r3
    1356:	4325      	orrs	r5, r4
    1358:	429e      	cmp	r6, r3
    135a:	dd00      	ble.n	135e <__aeabi_dsub+0xe6>
    135c:	e0db      	b.n	1516 <__aeabi_dsub+0x29e>
    135e:	1b9e      	subs	r6, r3, r6
    1360:	1c73      	adds	r3, r6, #1
    1362:	2b1f      	cmp	r3, #31
    1364:	dd00      	ble.n	1368 <__aeabi_dsub+0xf0>
    1366:	e10a      	b.n	157e <__aeabi_dsub+0x306>
    1368:	2220      	movs	r2, #32
    136a:	0038      	movs	r0, r7
    136c:	1ad2      	subs	r2, r2, r3
    136e:	0029      	movs	r1, r5
    1370:	4097      	lsls	r7, r2
    1372:	002c      	movs	r4, r5
    1374:	4091      	lsls	r1, r2
    1376:	40d8      	lsrs	r0, r3
    1378:	1e7a      	subs	r2, r7, #1
    137a:	4197      	sbcs	r7, r2
    137c:	40dc      	lsrs	r4, r3
    137e:	2600      	movs	r6, #0
    1380:	4301      	orrs	r1, r0
    1382:	430f      	orrs	r7, r1
    1384:	077b      	lsls	r3, r7, #29
    1386:	d009      	beq.n	139c <__aeabi_dsub+0x124>
    1388:	230f      	movs	r3, #15
    138a:	403b      	ands	r3, r7
    138c:	2b04      	cmp	r3, #4
    138e:	d005      	beq.n	139c <__aeabi_dsub+0x124>
    1390:	1d3b      	adds	r3, r7, #4
    1392:	42bb      	cmp	r3, r7
    1394:	41bf      	sbcs	r7, r7
    1396:	427f      	negs	r7, r7
    1398:	19e4      	adds	r4, r4, r7
    139a:	001f      	movs	r7, r3
    139c:	0223      	lsls	r3, r4, #8
    139e:	d525      	bpl.n	13ec <__aeabi_dsub+0x174>
    13a0:	4b86      	ldr	r3, [pc, #536]	; (15bc <__aeabi_dsub+0x344>)
    13a2:	3601      	adds	r6, #1
    13a4:	429e      	cmp	r6, r3
    13a6:	d100      	bne.n	13aa <__aeabi_dsub+0x132>
    13a8:	e0af      	b.n	150a <__aeabi_dsub+0x292>
    13aa:	4b85      	ldr	r3, [pc, #532]	; (15c0 <__aeabi_dsub+0x348>)
    13ac:	2501      	movs	r5, #1
    13ae:	401c      	ands	r4, r3
    13b0:	4643      	mov	r3, r8
    13b2:	0762      	lsls	r2, r4, #29
    13b4:	08ff      	lsrs	r7, r7, #3
    13b6:	0264      	lsls	r4, r4, #9
    13b8:	0576      	lsls	r6, r6, #21
    13ba:	4317      	orrs	r7, r2
    13bc:	0b24      	lsrs	r4, r4, #12
    13be:	0d76      	lsrs	r6, r6, #21
    13c0:	401d      	ands	r5, r3
    13c2:	2100      	movs	r1, #0
    13c4:	0324      	lsls	r4, r4, #12
    13c6:	0b23      	lsrs	r3, r4, #12
    13c8:	0d0c      	lsrs	r4, r1, #20
    13ca:	4a7e      	ldr	r2, [pc, #504]	; (15c4 <__aeabi_dsub+0x34c>)
    13cc:	0524      	lsls	r4, r4, #20
    13ce:	431c      	orrs	r4, r3
    13d0:	4014      	ands	r4, r2
    13d2:	0533      	lsls	r3, r6, #20
    13d4:	4323      	orrs	r3, r4
    13d6:	005b      	lsls	r3, r3, #1
    13d8:	07ed      	lsls	r5, r5, #31
    13da:	085b      	lsrs	r3, r3, #1
    13dc:	432b      	orrs	r3, r5
    13de:	0038      	movs	r0, r7
    13e0:	0019      	movs	r1, r3
    13e2:	bc1c      	pop	{r2, r3, r4}
    13e4:	4690      	mov	r8, r2
    13e6:	4699      	mov	r9, r3
    13e8:	46a2      	mov	sl, r4
    13ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ec:	2501      	movs	r5, #1
    13ee:	4643      	mov	r3, r8
    13f0:	0762      	lsls	r2, r4, #29
    13f2:	08ff      	lsrs	r7, r7, #3
    13f4:	4317      	orrs	r7, r2
    13f6:	08e4      	lsrs	r4, r4, #3
    13f8:	401d      	ands	r5, r3
    13fa:	4b70      	ldr	r3, [pc, #448]	; (15bc <__aeabi_dsub+0x344>)
    13fc:	429e      	cmp	r6, r3
    13fe:	d036      	beq.n	146e <__aeabi_dsub+0x1f6>
    1400:	0324      	lsls	r4, r4, #12
    1402:	0576      	lsls	r6, r6, #21
    1404:	0b24      	lsrs	r4, r4, #12
    1406:	0d76      	lsrs	r6, r6, #21
    1408:	e7db      	b.n	13c2 <__aeabi_dsub+0x14a>
    140a:	4663      	mov	r3, ip
    140c:	1af3      	subs	r3, r6, r3
    140e:	2b00      	cmp	r3, #0
    1410:	dc00      	bgt.n	1414 <__aeabi_dsub+0x19c>
    1412:	e094      	b.n	153e <__aeabi_dsub+0x2c6>
    1414:	4660      	mov	r0, ip
    1416:	2800      	cmp	r0, #0
    1418:	d035      	beq.n	1486 <__aeabi_dsub+0x20e>
    141a:	4868      	ldr	r0, [pc, #416]	; (15bc <__aeabi_dsub+0x344>)
    141c:	4286      	cmp	r6, r0
    141e:	d0b1      	beq.n	1384 <__aeabi_dsub+0x10c>
    1420:	2780      	movs	r7, #128	; 0x80
    1422:	043f      	lsls	r7, r7, #16
    1424:	4339      	orrs	r1, r7
    1426:	2b38      	cmp	r3, #56	; 0x38
    1428:	dc00      	bgt.n	142c <__aeabi_dsub+0x1b4>
    142a:	e0fd      	b.n	1628 <__aeabi_dsub+0x3b0>
    142c:	430a      	orrs	r2, r1
    142e:	0017      	movs	r7, r2
    1430:	2100      	movs	r1, #0
    1432:	1e7a      	subs	r2, r7, #1
    1434:	4197      	sbcs	r7, r2
    1436:	4457      	add	r7, sl
    1438:	4557      	cmp	r7, sl
    143a:	4180      	sbcs	r0, r0
    143c:	1909      	adds	r1, r1, r4
    143e:	4244      	negs	r4, r0
    1440:	190c      	adds	r4, r1, r4
    1442:	0223      	lsls	r3, r4, #8
    1444:	d53a      	bpl.n	14bc <__aeabi_dsub+0x244>
    1446:	4b5d      	ldr	r3, [pc, #372]	; (15bc <__aeabi_dsub+0x344>)
    1448:	3601      	adds	r6, #1
    144a:	429e      	cmp	r6, r3
    144c:	d100      	bne.n	1450 <__aeabi_dsub+0x1d8>
    144e:	e14b      	b.n	16e8 <__aeabi_dsub+0x470>
    1450:	2201      	movs	r2, #1
    1452:	4b5b      	ldr	r3, [pc, #364]	; (15c0 <__aeabi_dsub+0x348>)
    1454:	401c      	ands	r4, r3
    1456:	087b      	lsrs	r3, r7, #1
    1458:	4017      	ands	r7, r2
    145a:	431f      	orrs	r7, r3
    145c:	07e2      	lsls	r2, r4, #31
    145e:	4317      	orrs	r7, r2
    1460:	0864      	lsrs	r4, r4, #1
    1462:	e78f      	b.n	1384 <__aeabi_dsub+0x10c>
    1464:	0008      	movs	r0, r1
    1466:	4310      	orrs	r0, r2
    1468:	d000      	beq.n	146c <__aeabi_dsub+0x1f4>
    146a:	e724      	b.n	12b6 <__aeabi_dsub+0x3e>
    146c:	e721      	b.n	12b2 <__aeabi_dsub+0x3a>
    146e:	0023      	movs	r3, r4
    1470:	433b      	orrs	r3, r7
    1472:	d100      	bne.n	1476 <__aeabi_dsub+0x1fe>
    1474:	e1b9      	b.n	17ea <__aeabi_dsub+0x572>
    1476:	2280      	movs	r2, #128	; 0x80
    1478:	0312      	lsls	r2, r2, #12
    147a:	4314      	orrs	r4, r2
    147c:	0324      	lsls	r4, r4, #12
    147e:	0b24      	lsrs	r4, r4, #12
    1480:	e79f      	b.n	13c2 <__aeabi_dsub+0x14a>
    1482:	002e      	movs	r6, r5
    1484:	e77e      	b.n	1384 <__aeabi_dsub+0x10c>
    1486:	0008      	movs	r0, r1
    1488:	4310      	orrs	r0, r2
    148a:	d100      	bne.n	148e <__aeabi_dsub+0x216>
    148c:	e0ca      	b.n	1624 <__aeabi_dsub+0x3ac>
    148e:	1e58      	subs	r0, r3, #1
    1490:	4684      	mov	ip, r0
    1492:	2800      	cmp	r0, #0
    1494:	d000      	beq.n	1498 <__aeabi_dsub+0x220>
    1496:	e0e7      	b.n	1668 <__aeabi_dsub+0x3f0>
    1498:	4452      	add	r2, sl
    149a:	4552      	cmp	r2, sl
    149c:	4180      	sbcs	r0, r0
    149e:	1864      	adds	r4, r4, r1
    14a0:	4240      	negs	r0, r0
    14a2:	1824      	adds	r4, r4, r0
    14a4:	0017      	movs	r7, r2
    14a6:	2601      	movs	r6, #1
    14a8:	0223      	lsls	r3, r4, #8
    14aa:	d507      	bpl.n	14bc <__aeabi_dsub+0x244>
    14ac:	2602      	movs	r6, #2
    14ae:	e7cf      	b.n	1450 <__aeabi_dsub+0x1d8>
    14b0:	4664      	mov	r4, ip
    14b2:	432c      	orrs	r4, r5
    14b4:	d100      	bne.n	14b8 <__aeabi_dsub+0x240>
    14b6:	e1b3      	b.n	1820 <__aeabi_dsub+0x5a8>
    14b8:	002c      	movs	r4, r5
    14ba:	4667      	mov	r7, ip
    14bc:	077b      	lsls	r3, r7, #29
    14be:	d000      	beq.n	14c2 <__aeabi_dsub+0x24a>
    14c0:	e762      	b.n	1388 <__aeabi_dsub+0x110>
    14c2:	0763      	lsls	r3, r4, #29
    14c4:	08ff      	lsrs	r7, r7, #3
    14c6:	431f      	orrs	r7, r3
    14c8:	2501      	movs	r5, #1
    14ca:	4643      	mov	r3, r8
    14cc:	08e4      	lsrs	r4, r4, #3
    14ce:	401d      	ands	r5, r3
    14d0:	e793      	b.n	13fa <__aeabi_dsub+0x182>
    14d2:	2d00      	cmp	r5, #0
    14d4:	d178      	bne.n	15c8 <__aeabi_dsub+0x350>
    14d6:	1c75      	adds	r5, r6, #1
    14d8:	056d      	lsls	r5, r5, #21
    14da:	0d6d      	lsrs	r5, r5, #21
    14dc:	2d01      	cmp	r5, #1
    14de:	dc00      	bgt.n	14e2 <__aeabi_dsub+0x26a>
    14e0:	e0f2      	b.n	16c8 <__aeabi_dsub+0x450>
    14e2:	4650      	mov	r0, sl
    14e4:	1a80      	subs	r0, r0, r2
    14e6:	4582      	cmp	sl, r0
    14e8:	41bf      	sbcs	r7, r7
    14ea:	1a65      	subs	r5, r4, r1
    14ec:	427f      	negs	r7, r7
    14ee:	1bed      	subs	r5, r5, r7
    14f0:	4684      	mov	ip, r0
    14f2:	0228      	lsls	r0, r5, #8
    14f4:	d400      	bmi.n	14f8 <__aeabi_dsub+0x280>
    14f6:	e08c      	b.n	1612 <__aeabi_dsub+0x39a>
    14f8:	4650      	mov	r0, sl
    14fa:	1a17      	subs	r7, r2, r0
    14fc:	42ba      	cmp	r2, r7
    14fe:	4192      	sbcs	r2, r2
    1500:	1b0c      	subs	r4, r1, r4
    1502:	4255      	negs	r5, r2
    1504:	1b65      	subs	r5, r4, r5
    1506:	4698      	mov	r8, r3
    1508:	e714      	b.n	1334 <__aeabi_dsub+0xbc>
    150a:	2501      	movs	r5, #1
    150c:	4643      	mov	r3, r8
    150e:	2400      	movs	r4, #0
    1510:	401d      	ands	r5, r3
    1512:	2700      	movs	r7, #0
    1514:	e755      	b.n	13c2 <__aeabi_dsub+0x14a>
    1516:	4c2a      	ldr	r4, [pc, #168]	; (15c0 <__aeabi_dsub+0x348>)
    1518:	1af6      	subs	r6, r6, r3
    151a:	402c      	ands	r4, r5
    151c:	e732      	b.n	1384 <__aeabi_dsub+0x10c>
    151e:	003d      	movs	r5, r7
    1520:	3828      	subs	r0, #40	; 0x28
    1522:	4085      	lsls	r5, r0
    1524:	2700      	movs	r7, #0
    1526:	e717      	b.n	1358 <__aeabi_dsub+0xe0>
    1528:	0038      	movs	r0, r7
    152a:	f000 fa6f 	bl	1a0c <__clzsi2>
    152e:	3020      	adds	r0, #32
    1530:	e706      	b.n	1340 <__aeabi_dsub+0xc8>
    1532:	430a      	orrs	r2, r1
    1534:	0017      	movs	r7, r2
    1536:	2100      	movs	r1, #0
    1538:	1e7a      	subs	r2, r7, #1
    153a:	4197      	sbcs	r7, r2
    153c:	e6ee      	b.n	131c <__aeabi_dsub+0xa4>
    153e:	2b00      	cmp	r3, #0
    1540:	d000      	beq.n	1544 <__aeabi_dsub+0x2cc>
    1542:	e0e5      	b.n	1710 <__aeabi_dsub+0x498>
    1544:	1c73      	adds	r3, r6, #1
    1546:	469c      	mov	ip, r3
    1548:	055b      	lsls	r3, r3, #21
    154a:	0d5b      	lsrs	r3, r3, #21
    154c:	2b01      	cmp	r3, #1
    154e:	dc00      	bgt.n	1552 <__aeabi_dsub+0x2da>
    1550:	e09f      	b.n	1692 <__aeabi_dsub+0x41a>
    1552:	4b1a      	ldr	r3, [pc, #104]	; (15bc <__aeabi_dsub+0x344>)
    1554:	459c      	cmp	ip, r3
    1556:	d100      	bne.n	155a <__aeabi_dsub+0x2e2>
    1558:	e0c5      	b.n	16e6 <__aeabi_dsub+0x46e>
    155a:	4452      	add	r2, sl
    155c:	4552      	cmp	r2, sl
    155e:	4180      	sbcs	r0, r0
    1560:	1864      	adds	r4, r4, r1
    1562:	4240      	negs	r0, r0
    1564:	1824      	adds	r4, r4, r0
    1566:	07e7      	lsls	r7, r4, #31
    1568:	0852      	lsrs	r2, r2, #1
    156a:	4317      	orrs	r7, r2
    156c:	0864      	lsrs	r4, r4, #1
    156e:	4666      	mov	r6, ip
    1570:	e708      	b.n	1384 <__aeabi_dsub+0x10c>
    1572:	4812      	ldr	r0, [pc, #72]	; (15bc <__aeabi_dsub+0x344>)
    1574:	4285      	cmp	r5, r0
    1576:	d100      	bne.n	157a <__aeabi_dsub+0x302>
    1578:	e085      	b.n	1686 <__aeabi_dsub+0x40e>
    157a:	001d      	movs	r5, r3
    157c:	e6bc      	b.n	12f8 <__aeabi_dsub+0x80>
    157e:	0029      	movs	r1, r5
    1580:	3e1f      	subs	r6, #31
    1582:	40f1      	lsrs	r1, r6
    1584:	2b20      	cmp	r3, #32
    1586:	d100      	bne.n	158a <__aeabi_dsub+0x312>
    1588:	e07f      	b.n	168a <__aeabi_dsub+0x412>
    158a:	2240      	movs	r2, #64	; 0x40
    158c:	1ad3      	subs	r3, r2, r3
    158e:	409d      	lsls	r5, r3
    1590:	432f      	orrs	r7, r5
    1592:	1e7d      	subs	r5, r7, #1
    1594:	41af      	sbcs	r7, r5
    1596:	2400      	movs	r4, #0
    1598:	430f      	orrs	r7, r1
    159a:	2600      	movs	r6, #0
    159c:	e78e      	b.n	14bc <__aeabi_dsub+0x244>
    159e:	002b      	movs	r3, r5
    15a0:	000f      	movs	r7, r1
    15a2:	3b20      	subs	r3, #32
    15a4:	40df      	lsrs	r7, r3
    15a6:	2d20      	cmp	r5, #32
    15a8:	d071      	beq.n	168e <__aeabi_dsub+0x416>
    15aa:	2340      	movs	r3, #64	; 0x40
    15ac:	1b5d      	subs	r5, r3, r5
    15ae:	40a9      	lsls	r1, r5
    15b0:	430a      	orrs	r2, r1
    15b2:	1e51      	subs	r1, r2, #1
    15b4:	418a      	sbcs	r2, r1
    15b6:	2100      	movs	r1, #0
    15b8:	4317      	orrs	r7, r2
    15ba:	e6af      	b.n	131c <__aeabi_dsub+0xa4>
    15bc:	000007ff 	.word	0x000007ff
    15c0:	ff7fffff 	.word	0xff7fffff
    15c4:	800fffff 	.word	0x800fffff
    15c8:	2e00      	cmp	r6, #0
    15ca:	d03e      	beq.n	164a <__aeabi_dsub+0x3d2>
    15cc:	4eb3      	ldr	r6, [pc, #716]	; (189c <__aeabi_dsub+0x624>)
    15ce:	45b4      	cmp	ip, r6
    15d0:	d045      	beq.n	165e <__aeabi_dsub+0x3e6>
    15d2:	2680      	movs	r6, #128	; 0x80
    15d4:	0436      	lsls	r6, r6, #16
    15d6:	426d      	negs	r5, r5
    15d8:	4334      	orrs	r4, r6
    15da:	2d38      	cmp	r5, #56	; 0x38
    15dc:	dd00      	ble.n	15e0 <__aeabi_dsub+0x368>
    15de:	e0a8      	b.n	1732 <__aeabi_dsub+0x4ba>
    15e0:	2d1f      	cmp	r5, #31
    15e2:	dd00      	ble.n	15e6 <__aeabi_dsub+0x36e>
    15e4:	e11f      	b.n	1826 <__aeabi_dsub+0x5ae>
    15e6:	2620      	movs	r6, #32
    15e8:	0027      	movs	r7, r4
    15ea:	4650      	mov	r0, sl
    15ec:	1b76      	subs	r6, r6, r5
    15ee:	40b7      	lsls	r7, r6
    15f0:	40e8      	lsrs	r0, r5
    15f2:	4307      	orrs	r7, r0
    15f4:	4650      	mov	r0, sl
    15f6:	40b0      	lsls	r0, r6
    15f8:	1e46      	subs	r6, r0, #1
    15fa:	41b0      	sbcs	r0, r6
    15fc:	40ec      	lsrs	r4, r5
    15fe:	4338      	orrs	r0, r7
    1600:	1a17      	subs	r7, r2, r0
    1602:	42ba      	cmp	r2, r7
    1604:	4192      	sbcs	r2, r2
    1606:	1b0c      	subs	r4, r1, r4
    1608:	4252      	negs	r2, r2
    160a:	1aa4      	subs	r4, r4, r2
    160c:	4666      	mov	r6, ip
    160e:	4698      	mov	r8, r3
    1610:	e68b      	b.n	132a <__aeabi_dsub+0xb2>
    1612:	4664      	mov	r4, ip
    1614:	4667      	mov	r7, ip
    1616:	432c      	orrs	r4, r5
    1618:	d000      	beq.n	161c <__aeabi_dsub+0x3a4>
    161a:	e68b      	b.n	1334 <__aeabi_dsub+0xbc>
    161c:	2500      	movs	r5, #0
    161e:	2600      	movs	r6, #0
    1620:	2700      	movs	r7, #0
    1622:	e6ea      	b.n	13fa <__aeabi_dsub+0x182>
    1624:	001e      	movs	r6, r3
    1626:	e6ad      	b.n	1384 <__aeabi_dsub+0x10c>
    1628:	2b1f      	cmp	r3, #31
    162a:	dc60      	bgt.n	16ee <__aeabi_dsub+0x476>
    162c:	2720      	movs	r7, #32
    162e:	1af8      	subs	r0, r7, r3
    1630:	000f      	movs	r7, r1
    1632:	4684      	mov	ip, r0
    1634:	4087      	lsls	r7, r0
    1636:	0010      	movs	r0, r2
    1638:	40d8      	lsrs	r0, r3
    163a:	4307      	orrs	r7, r0
    163c:	4660      	mov	r0, ip
    163e:	4082      	lsls	r2, r0
    1640:	1e50      	subs	r0, r2, #1
    1642:	4182      	sbcs	r2, r0
    1644:	40d9      	lsrs	r1, r3
    1646:	4317      	orrs	r7, r2
    1648:	e6f5      	b.n	1436 <__aeabi_dsub+0x1be>
    164a:	0026      	movs	r6, r4
    164c:	4650      	mov	r0, sl
    164e:	4306      	orrs	r6, r0
    1650:	d005      	beq.n	165e <__aeabi_dsub+0x3e6>
    1652:	43ed      	mvns	r5, r5
    1654:	2d00      	cmp	r5, #0
    1656:	d0d3      	beq.n	1600 <__aeabi_dsub+0x388>
    1658:	4e90      	ldr	r6, [pc, #576]	; (189c <__aeabi_dsub+0x624>)
    165a:	45b4      	cmp	ip, r6
    165c:	d1bd      	bne.n	15da <__aeabi_dsub+0x362>
    165e:	000c      	movs	r4, r1
    1660:	0017      	movs	r7, r2
    1662:	4666      	mov	r6, ip
    1664:	4698      	mov	r8, r3
    1666:	e68d      	b.n	1384 <__aeabi_dsub+0x10c>
    1668:	488c      	ldr	r0, [pc, #560]	; (189c <__aeabi_dsub+0x624>)
    166a:	4283      	cmp	r3, r0
    166c:	d00b      	beq.n	1686 <__aeabi_dsub+0x40e>
    166e:	4663      	mov	r3, ip
    1670:	e6d9      	b.n	1426 <__aeabi_dsub+0x1ae>
    1672:	2d00      	cmp	r5, #0
    1674:	d000      	beq.n	1678 <__aeabi_dsub+0x400>
    1676:	e096      	b.n	17a6 <__aeabi_dsub+0x52e>
    1678:	0008      	movs	r0, r1
    167a:	4310      	orrs	r0, r2
    167c:	d100      	bne.n	1680 <__aeabi_dsub+0x408>
    167e:	e0e2      	b.n	1846 <__aeabi_dsub+0x5ce>
    1680:	000c      	movs	r4, r1
    1682:	0017      	movs	r7, r2
    1684:	4698      	mov	r8, r3
    1686:	4e85      	ldr	r6, [pc, #532]	; (189c <__aeabi_dsub+0x624>)
    1688:	e67c      	b.n	1384 <__aeabi_dsub+0x10c>
    168a:	2500      	movs	r5, #0
    168c:	e780      	b.n	1590 <__aeabi_dsub+0x318>
    168e:	2100      	movs	r1, #0
    1690:	e78e      	b.n	15b0 <__aeabi_dsub+0x338>
    1692:	0023      	movs	r3, r4
    1694:	4650      	mov	r0, sl
    1696:	4303      	orrs	r3, r0
    1698:	2e00      	cmp	r6, #0
    169a:	d000      	beq.n	169e <__aeabi_dsub+0x426>
    169c:	e0a8      	b.n	17f0 <__aeabi_dsub+0x578>
    169e:	2b00      	cmp	r3, #0
    16a0:	d100      	bne.n	16a4 <__aeabi_dsub+0x42c>
    16a2:	e0de      	b.n	1862 <__aeabi_dsub+0x5ea>
    16a4:	000b      	movs	r3, r1
    16a6:	4313      	orrs	r3, r2
    16a8:	d100      	bne.n	16ac <__aeabi_dsub+0x434>
    16aa:	e66b      	b.n	1384 <__aeabi_dsub+0x10c>
    16ac:	4452      	add	r2, sl
    16ae:	4552      	cmp	r2, sl
    16b0:	4180      	sbcs	r0, r0
    16b2:	1864      	adds	r4, r4, r1
    16b4:	4240      	negs	r0, r0
    16b6:	1824      	adds	r4, r4, r0
    16b8:	0017      	movs	r7, r2
    16ba:	0223      	lsls	r3, r4, #8
    16bc:	d400      	bmi.n	16c0 <__aeabi_dsub+0x448>
    16be:	e6fd      	b.n	14bc <__aeabi_dsub+0x244>
    16c0:	4b77      	ldr	r3, [pc, #476]	; (18a0 <__aeabi_dsub+0x628>)
    16c2:	4666      	mov	r6, ip
    16c4:	401c      	ands	r4, r3
    16c6:	e65d      	b.n	1384 <__aeabi_dsub+0x10c>
    16c8:	0025      	movs	r5, r4
    16ca:	4650      	mov	r0, sl
    16cc:	4305      	orrs	r5, r0
    16ce:	2e00      	cmp	r6, #0
    16d0:	d1cf      	bne.n	1672 <__aeabi_dsub+0x3fa>
    16d2:	2d00      	cmp	r5, #0
    16d4:	d14f      	bne.n	1776 <__aeabi_dsub+0x4fe>
    16d6:	000c      	movs	r4, r1
    16d8:	4314      	orrs	r4, r2
    16da:	d100      	bne.n	16de <__aeabi_dsub+0x466>
    16dc:	e0a0      	b.n	1820 <__aeabi_dsub+0x5a8>
    16de:	000c      	movs	r4, r1
    16e0:	0017      	movs	r7, r2
    16e2:	4698      	mov	r8, r3
    16e4:	e64e      	b.n	1384 <__aeabi_dsub+0x10c>
    16e6:	4666      	mov	r6, ip
    16e8:	2400      	movs	r4, #0
    16ea:	2700      	movs	r7, #0
    16ec:	e685      	b.n	13fa <__aeabi_dsub+0x182>
    16ee:	001f      	movs	r7, r3
    16f0:	0008      	movs	r0, r1
    16f2:	3f20      	subs	r7, #32
    16f4:	40f8      	lsrs	r0, r7
    16f6:	0007      	movs	r7, r0
    16f8:	2b20      	cmp	r3, #32
    16fa:	d100      	bne.n	16fe <__aeabi_dsub+0x486>
    16fc:	e08e      	b.n	181c <__aeabi_dsub+0x5a4>
    16fe:	2040      	movs	r0, #64	; 0x40
    1700:	1ac3      	subs	r3, r0, r3
    1702:	4099      	lsls	r1, r3
    1704:	430a      	orrs	r2, r1
    1706:	1e51      	subs	r1, r2, #1
    1708:	418a      	sbcs	r2, r1
    170a:	2100      	movs	r1, #0
    170c:	4317      	orrs	r7, r2
    170e:	e692      	b.n	1436 <__aeabi_dsub+0x1be>
    1710:	2e00      	cmp	r6, #0
    1712:	d114      	bne.n	173e <__aeabi_dsub+0x4c6>
    1714:	0026      	movs	r6, r4
    1716:	4650      	mov	r0, sl
    1718:	4306      	orrs	r6, r0
    171a:	d062      	beq.n	17e2 <__aeabi_dsub+0x56a>
    171c:	43db      	mvns	r3, r3
    171e:	2b00      	cmp	r3, #0
    1720:	d15c      	bne.n	17dc <__aeabi_dsub+0x564>
    1722:	1887      	adds	r7, r0, r2
    1724:	4297      	cmp	r7, r2
    1726:	4192      	sbcs	r2, r2
    1728:	1864      	adds	r4, r4, r1
    172a:	4252      	negs	r2, r2
    172c:	18a4      	adds	r4, r4, r2
    172e:	4666      	mov	r6, ip
    1730:	e687      	b.n	1442 <__aeabi_dsub+0x1ca>
    1732:	4650      	mov	r0, sl
    1734:	4320      	orrs	r0, r4
    1736:	1e44      	subs	r4, r0, #1
    1738:	41a0      	sbcs	r0, r4
    173a:	2400      	movs	r4, #0
    173c:	e760      	b.n	1600 <__aeabi_dsub+0x388>
    173e:	4e57      	ldr	r6, [pc, #348]	; (189c <__aeabi_dsub+0x624>)
    1740:	45b4      	cmp	ip, r6
    1742:	d04e      	beq.n	17e2 <__aeabi_dsub+0x56a>
    1744:	2680      	movs	r6, #128	; 0x80
    1746:	0436      	lsls	r6, r6, #16
    1748:	425b      	negs	r3, r3
    174a:	4334      	orrs	r4, r6
    174c:	2b38      	cmp	r3, #56	; 0x38
    174e:	dd00      	ble.n	1752 <__aeabi_dsub+0x4da>
    1750:	e07f      	b.n	1852 <__aeabi_dsub+0x5da>
    1752:	2b1f      	cmp	r3, #31
    1754:	dd00      	ble.n	1758 <__aeabi_dsub+0x4e0>
    1756:	e08b      	b.n	1870 <__aeabi_dsub+0x5f8>
    1758:	2620      	movs	r6, #32
    175a:	0027      	movs	r7, r4
    175c:	4650      	mov	r0, sl
    175e:	1af6      	subs	r6, r6, r3
    1760:	40b7      	lsls	r7, r6
    1762:	40d8      	lsrs	r0, r3
    1764:	4307      	orrs	r7, r0
    1766:	4650      	mov	r0, sl
    1768:	40b0      	lsls	r0, r6
    176a:	1e46      	subs	r6, r0, #1
    176c:	41b0      	sbcs	r0, r6
    176e:	4307      	orrs	r7, r0
    1770:	40dc      	lsrs	r4, r3
    1772:	18bf      	adds	r7, r7, r2
    1774:	e7d6      	b.n	1724 <__aeabi_dsub+0x4ac>
    1776:	000d      	movs	r5, r1
    1778:	4315      	orrs	r5, r2
    177a:	d100      	bne.n	177e <__aeabi_dsub+0x506>
    177c:	e602      	b.n	1384 <__aeabi_dsub+0x10c>
    177e:	4650      	mov	r0, sl
    1780:	1a80      	subs	r0, r0, r2
    1782:	4582      	cmp	sl, r0
    1784:	41bf      	sbcs	r7, r7
    1786:	1a65      	subs	r5, r4, r1
    1788:	427f      	negs	r7, r7
    178a:	1bed      	subs	r5, r5, r7
    178c:	4684      	mov	ip, r0
    178e:	0228      	lsls	r0, r5, #8
    1790:	d400      	bmi.n	1794 <__aeabi_dsub+0x51c>
    1792:	e68d      	b.n	14b0 <__aeabi_dsub+0x238>
    1794:	4650      	mov	r0, sl
    1796:	1a17      	subs	r7, r2, r0
    1798:	42ba      	cmp	r2, r7
    179a:	4192      	sbcs	r2, r2
    179c:	1b0c      	subs	r4, r1, r4
    179e:	4252      	negs	r2, r2
    17a0:	1aa4      	subs	r4, r4, r2
    17a2:	4698      	mov	r8, r3
    17a4:	e5ee      	b.n	1384 <__aeabi_dsub+0x10c>
    17a6:	000d      	movs	r5, r1
    17a8:	4315      	orrs	r5, r2
    17aa:	d100      	bne.n	17ae <__aeabi_dsub+0x536>
    17ac:	e76b      	b.n	1686 <__aeabi_dsub+0x40e>
    17ae:	4650      	mov	r0, sl
    17b0:	0767      	lsls	r7, r4, #29
    17b2:	08c0      	lsrs	r0, r0, #3
    17b4:	4307      	orrs	r7, r0
    17b6:	2080      	movs	r0, #128	; 0x80
    17b8:	08e4      	lsrs	r4, r4, #3
    17ba:	0300      	lsls	r0, r0, #12
    17bc:	4204      	tst	r4, r0
    17be:	d007      	beq.n	17d0 <__aeabi_dsub+0x558>
    17c0:	08cd      	lsrs	r5, r1, #3
    17c2:	4205      	tst	r5, r0
    17c4:	d104      	bne.n	17d0 <__aeabi_dsub+0x558>
    17c6:	002c      	movs	r4, r5
    17c8:	4698      	mov	r8, r3
    17ca:	08d7      	lsrs	r7, r2, #3
    17cc:	0749      	lsls	r1, r1, #29
    17ce:	430f      	orrs	r7, r1
    17d0:	0f7b      	lsrs	r3, r7, #29
    17d2:	00e4      	lsls	r4, r4, #3
    17d4:	431c      	orrs	r4, r3
    17d6:	00ff      	lsls	r7, r7, #3
    17d8:	4e30      	ldr	r6, [pc, #192]	; (189c <__aeabi_dsub+0x624>)
    17da:	e5d3      	b.n	1384 <__aeabi_dsub+0x10c>
    17dc:	4e2f      	ldr	r6, [pc, #188]	; (189c <__aeabi_dsub+0x624>)
    17de:	45b4      	cmp	ip, r6
    17e0:	d1b4      	bne.n	174c <__aeabi_dsub+0x4d4>
    17e2:	000c      	movs	r4, r1
    17e4:	0017      	movs	r7, r2
    17e6:	4666      	mov	r6, ip
    17e8:	e5cc      	b.n	1384 <__aeabi_dsub+0x10c>
    17ea:	2700      	movs	r7, #0
    17ec:	2400      	movs	r4, #0
    17ee:	e5e8      	b.n	13c2 <__aeabi_dsub+0x14a>
    17f0:	2b00      	cmp	r3, #0
    17f2:	d039      	beq.n	1868 <__aeabi_dsub+0x5f0>
    17f4:	000b      	movs	r3, r1
    17f6:	4313      	orrs	r3, r2
    17f8:	d100      	bne.n	17fc <__aeabi_dsub+0x584>
    17fa:	e744      	b.n	1686 <__aeabi_dsub+0x40e>
    17fc:	08c0      	lsrs	r0, r0, #3
    17fe:	0767      	lsls	r7, r4, #29
    1800:	4307      	orrs	r7, r0
    1802:	2080      	movs	r0, #128	; 0x80
    1804:	08e4      	lsrs	r4, r4, #3
    1806:	0300      	lsls	r0, r0, #12
    1808:	4204      	tst	r4, r0
    180a:	d0e1      	beq.n	17d0 <__aeabi_dsub+0x558>
    180c:	08cb      	lsrs	r3, r1, #3
    180e:	4203      	tst	r3, r0
    1810:	d1de      	bne.n	17d0 <__aeabi_dsub+0x558>
    1812:	08d7      	lsrs	r7, r2, #3
    1814:	0749      	lsls	r1, r1, #29
    1816:	430f      	orrs	r7, r1
    1818:	001c      	movs	r4, r3
    181a:	e7d9      	b.n	17d0 <__aeabi_dsub+0x558>
    181c:	2100      	movs	r1, #0
    181e:	e771      	b.n	1704 <__aeabi_dsub+0x48c>
    1820:	2500      	movs	r5, #0
    1822:	2700      	movs	r7, #0
    1824:	e5e9      	b.n	13fa <__aeabi_dsub+0x182>
    1826:	002e      	movs	r6, r5
    1828:	0027      	movs	r7, r4
    182a:	3e20      	subs	r6, #32
    182c:	40f7      	lsrs	r7, r6
    182e:	2d20      	cmp	r5, #32
    1830:	d02f      	beq.n	1892 <__aeabi_dsub+0x61a>
    1832:	2640      	movs	r6, #64	; 0x40
    1834:	1b75      	subs	r5, r6, r5
    1836:	40ac      	lsls	r4, r5
    1838:	4650      	mov	r0, sl
    183a:	4320      	orrs	r0, r4
    183c:	1e44      	subs	r4, r0, #1
    183e:	41a0      	sbcs	r0, r4
    1840:	2400      	movs	r4, #0
    1842:	4338      	orrs	r0, r7
    1844:	e6dc      	b.n	1600 <__aeabi_dsub+0x388>
    1846:	2480      	movs	r4, #128	; 0x80
    1848:	2500      	movs	r5, #0
    184a:	0324      	lsls	r4, r4, #12
    184c:	4e13      	ldr	r6, [pc, #76]	; (189c <__aeabi_dsub+0x624>)
    184e:	2700      	movs	r7, #0
    1850:	e5d3      	b.n	13fa <__aeabi_dsub+0x182>
    1852:	4650      	mov	r0, sl
    1854:	4320      	orrs	r0, r4
    1856:	0007      	movs	r7, r0
    1858:	1e78      	subs	r0, r7, #1
    185a:	4187      	sbcs	r7, r0
    185c:	2400      	movs	r4, #0
    185e:	18bf      	adds	r7, r7, r2
    1860:	e760      	b.n	1724 <__aeabi_dsub+0x4ac>
    1862:	000c      	movs	r4, r1
    1864:	0017      	movs	r7, r2
    1866:	e58d      	b.n	1384 <__aeabi_dsub+0x10c>
    1868:	000c      	movs	r4, r1
    186a:	0017      	movs	r7, r2
    186c:	4e0b      	ldr	r6, [pc, #44]	; (189c <__aeabi_dsub+0x624>)
    186e:	e589      	b.n	1384 <__aeabi_dsub+0x10c>
    1870:	001e      	movs	r6, r3
    1872:	0027      	movs	r7, r4
    1874:	3e20      	subs	r6, #32
    1876:	40f7      	lsrs	r7, r6
    1878:	2b20      	cmp	r3, #32
    187a:	d00c      	beq.n	1896 <__aeabi_dsub+0x61e>
    187c:	2640      	movs	r6, #64	; 0x40
    187e:	1af3      	subs	r3, r6, r3
    1880:	409c      	lsls	r4, r3
    1882:	4650      	mov	r0, sl
    1884:	4320      	orrs	r0, r4
    1886:	1e44      	subs	r4, r0, #1
    1888:	41a0      	sbcs	r0, r4
    188a:	4307      	orrs	r7, r0
    188c:	2400      	movs	r4, #0
    188e:	18bf      	adds	r7, r7, r2
    1890:	e748      	b.n	1724 <__aeabi_dsub+0x4ac>
    1892:	2400      	movs	r4, #0
    1894:	e7d0      	b.n	1838 <__aeabi_dsub+0x5c0>
    1896:	2400      	movs	r4, #0
    1898:	e7f3      	b.n	1882 <__aeabi_dsub+0x60a>
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	000007ff 	.word	0x000007ff
    18a0:	ff7fffff 	.word	0xff7fffff

000018a4 <__aeabi_d2iz>:
    18a4:	b530      	push	{r4, r5, lr}
    18a6:	4d13      	ldr	r5, [pc, #76]	; (18f4 <__aeabi_d2iz+0x50>)
    18a8:	030a      	lsls	r2, r1, #12
    18aa:	004b      	lsls	r3, r1, #1
    18ac:	0b12      	lsrs	r2, r2, #12
    18ae:	0d5b      	lsrs	r3, r3, #21
    18b0:	0fc9      	lsrs	r1, r1, #31
    18b2:	2400      	movs	r4, #0
    18b4:	42ab      	cmp	r3, r5
    18b6:	dd10      	ble.n	18da <__aeabi_d2iz+0x36>
    18b8:	4c0f      	ldr	r4, [pc, #60]	; (18f8 <__aeabi_d2iz+0x54>)
    18ba:	42a3      	cmp	r3, r4
    18bc:	dc0f      	bgt.n	18de <__aeabi_d2iz+0x3a>
    18be:	2480      	movs	r4, #128	; 0x80
    18c0:	4d0e      	ldr	r5, [pc, #56]	; (18fc <__aeabi_d2iz+0x58>)
    18c2:	0364      	lsls	r4, r4, #13
    18c4:	4322      	orrs	r2, r4
    18c6:	1aed      	subs	r5, r5, r3
    18c8:	2d1f      	cmp	r5, #31
    18ca:	dd0b      	ble.n	18e4 <__aeabi_d2iz+0x40>
    18cc:	480c      	ldr	r0, [pc, #48]	; (1900 <__aeabi_d2iz+0x5c>)
    18ce:	1ac3      	subs	r3, r0, r3
    18d0:	40da      	lsrs	r2, r3
    18d2:	4254      	negs	r4, r2
    18d4:	2900      	cmp	r1, #0
    18d6:	d100      	bne.n	18da <__aeabi_d2iz+0x36>
    18d8:	0014      	movs	r4, r2
    18da:	0020      	movs	r0, r4
    18dc:	bd30      	pop	{r4, r5, pc}
    18de:	4b09      	ldr	r3, [pc, #36]	; (1904 <__aeabi_d2iz+0x60>)
    18e0:	18cc      	adds	r4, r1, r3
    18e2:	e7fa      	b.n	18da <__aeabi_d2iz+0x36>
    18e4:	4c08      	ldr	r4, [pc, #32]	; (1908 <__aeabi_d2iz+0x64>)
    18e6:	40e8      	lsrs	r0, r5
    18e8:	46a4      	mov	ip, r4
    18ea:	4463      	add	r3, ip
    18ec:	409a      	lsls	r2, r3
    18ee:	4302      	orrs	r2, r0
    18f0:	e7ef      	b.n	18d2 <__aeabi_d2iz+0x2e>
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	000003fe 	.word	0x000003fe
    18f8:	0000041d 	.word	0x0000041d
    18fc:	00000433 	.word	0x00000433
    1900:	00000413 	.word	0x00000413
    1904:	7fffffff 	.word	0x7fffffff
    1908:	fffffbed 	.word	0xfffffbed

0000190c <__aeabi_i2d>:
    190c:	b570      	push	{r4, r5, r6, lr}
    190e:	2800      	cmp	r0, #0
    1910:	d030      	beq.n	1974 <__aeabi_i2d+0x68>
    1912:	17c3      	asrs	r3, r0, #31
    1914:	18c4      	adds	r4, r0, r3
    1916:	405c      	eors	r4, r3
    1918:	0fc5      	lsrs	r5, r0, #31
    191a:	0020      	movs	r0, r4
    191c:	f000 f876 	bl	1a0c <__clzsi2>
    1920:	4b17      	ldr	r3, [pc, #92]	; (1980 <__aeabi_i2d+0x74>)
    1922:	4a18      	ldr	r2, [pc, #96]	; (1984 <__aeabi_i2d+0x78>)
    1924:	1a1b      	subs	r3, r3, r0
    1926:	1ad2      	subs	r2, r2, r3
    1928:	2a1f      	cmp	r2, #31
    192a:	dd18      	ble.n	195e <__aeabi_i2d+0x52>
    192c:	4a16      	ldr	r2, [pc, #88]	; (1988 <__aeabi_i2d+0x7c>)
    192e:	1ad2      	subs	r2, r2, r3
    1930:	4094      	lsls	r4, r2
    1932:	2200      	movs	r2, #0
    1934:	0324      	lsls	r4, r4, #12
    1936:	055b      	lsls	r3, r3, #21
    1938:	0b24      	lsrs	r4, r4, #12
    193a:	0d5b      	lsrs	r3, r3, #21
    193c:	2100      	movs	r1, #0
    193e:	0010      	movs	r0, r2
    1940:	0324      	lsls	r4, r4, #12
    1942:	0d0a      	lsrs	r2, r1, #20
    1944:	0b24      	lsrs	r4, r4, #12
    1946:	0512      	lsls	r2, r2, #20
    1948:	4322      	orrs	r2, r4
    194a:	4c10      	ldr	r4, [pc, #64]	; (198c <__aeabi_i2d+0x80>)
    194c:	051b      	lsls	r3, r3, #20
    194e:	4022      	ands	r2, r4
    1950:	4313      	orrs	r3, r2
    1952:	005b      	lsls	r3, r3, #1
    1954:	07ed      	lsls	r5, r5, #31
    1956:	085b      	lsrs	r3, r3, #1
    1958:	432b      	orrs	r3, r5
    195a:	0019      	movs	r1, r3
    195c:	bd70      	pop	{r4, r5, r6, pc}
    195e:	0021      	movs	r1, r4
    1960:	4091      	lsls	r1, r2
    1962:	000a      	movs	r2, r1
    1964:	210b      	movs	r1, #11
    1966:	1a08      	subs	r0, r1, r0
    1968:	40c4      	lsrs	r4, r0
    196a:	055b      	lsls	r3, r3, #21
    196c:	0324      	lsls	r4, r4, #12
    196e:	0b24      	lsrs	r4, r4, #12
    1970:	0d5b      	lsrs	r3, r3, #21
    1972:	e7e3      	b.n	193c <__aeabi_i2d+0x30>
    1974:	2500      	movs	r5, #0
    1976:	2300      	movs	r3, #0
    1978:	2400      	movs	r4, #0
    197a:	2200      	movs	r2, #0
    197c:	e7de      	b.n	193c <__aeabi_i2d+0x30>
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	0000041e 	.word	0x0000041e
    1984:	00000433 	.word	0x00000433
    1988:	00000413 	.word	0x00000413
    198c:	800fffff 	.word	0x800fffff

00001990 <__aeabi_cdrcmple>:
    1990:	4684      	mov	ip, r0
    1992:	1c10      	adds	r0, r2, #0
    1994:	4662      	mov	r2, ip
    1996:	468c      	mov	ip, r1
    1998:	1c19      	adds	r1, r3, #0
    199a:	4663      	mov	r3, ip
    199c:	e000      	b.n	19a0 <__aeabi_cdcmpeq>
    199e:	46c0      	nop			; (mov r8, r8)

000019a0 <__aeabi_cdcmpeq>:
    19a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    19a2:	f000 f91b 	bl	1bdc <__ledf2>
    19a6:	2800      	cmp	r0, #0
    19a8:	d401      	bmi.n	19ae <__aeabi_cdcmpeq+0xe>
    19aa:	2100      	movs	r1, #0
    19ac:	42c8      	cmn	r0, r1
    19ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000019b0 <__aeabi_dcmpeq>:
    19b0:	b510      	push	{r4, lr}
    19b2:	f000 f875 	bl	1aa0 <__eqdf2>
    19b6:	4240      	negs	r0, r0
    19b8:	3001      	adds	r0, #1
    19ba:	bd10      	pop	{r4, pc}

000019bc <__aeabi_dcmplt>:
    19bc:	b510      	push	{r4, lr}
    19be:	f000 f90d 	bl	1bdc <__ledf2>
    19c2:	2800      	cmp	r0, #0
    19c4:	db01      	blt.n	19ca <__aeabi_dcmplt+0xe>
    19c6:	2000      	movs	r0, #0
    19c8:	bd10      	pop	{r4, pc}
    19ca:	2001      	movs	r0, #1
    19cc:	bd10      	pop	{r4, pc}
    19ce:	46c0      	nop			; (mov r8, r8)

000019d0 <__aeabi_dcmple>:
    19d0:	b510      	push	{r4, lr}
    19d2:	f000 f903 	bl	1bdc <__ledf2>
    19d6:	2800      	cmp	r0, #0
    19d8:	dd01      	ble.n	19de <__aeabi_dcmple+0xe>
    19da:	2000      	movs	r0, #0
    19dc:	bd10      	pop	{r4, pc}
    19de:	2001      	movs	r0, #1
    19e0:	bd10      	pop	{r4, pc}
    19e2:	46c0      	nop			; (mov r8, r8)

000019e4 <__aeabi_dcmpgt>:
    19e4:	b510      	push	{r4, lr}
    19e6:	f000 f895 	bl	1b14 <__gedf2>
    19ea:	2800      	cmp	r0, #0
    19ec:	dc01      	bgt.n	19f2 <__aeabi_dcmpgt+0xe>
    19ee:	2000      	movs	r0, #0
    19f0:	bd10      	pop	{r4, pc}
    19f2:	2001      	movs	r0, #1
    19f4:	bd10      	pop	{r4, pc}
    19f6:	46c0      	nop			; (mov r8, r8)

000019f8 <__aeabi_dcmpge>:
    19f8:	b510      	push	{r4, lr}
    19fa:	f000 f88b 	bl	1b14 <__gedf2>
    19fe:	2800      	cmp	r0, #0
    1a00:	da01      	bge.n	1a06 <__aeabi_dcmpge+0xe>
    1a02:	2000      	movs	r0, #0
    1a04:	bd10      	pop	{r4, pc}
    1a06:	2001      	movs	r0, #1
    1a08:	bd10      	pop	{r4, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)

00001a0c <__clzsi2>:
    1a0c:	211c      	movs	r1, #28
    1a0e:	2301      	movs	r3, #1
    1a10:	041b      	lsls	r3, r3, #16
    1a12:	4298      	cmp	r0, r3
    1a14:	d301      	bcc.n	1a1a <__clzsi2+0xe>
    1a16:	0c00      	lsrs	r0, r0, #16
    1a18:	3910      	subs	r1, #16
    1a1a:	0a1b      	lsrs	r3, r3, #8
    1a1c:	4298      	cmp	r0, r3
    1a1e:	d301      	bcc.n	1a24 <__clzsi2+0x18>
    1a20:	0a00      	lsrs	r0, r0, #8
    1a22:	3908      	subs	r1, #8
    1a24:	091b      	lsrs	r3, r3, #4
    1a26:	4298      	cmp	r0, r3
    1a28:	d301      	bcc.n	1a2e <__clzsi2+0x22>
    1a2a:	0900      	lsrs	r0, r0, #4
    1a2c:	3904      	subs	r1, #4
    1a2e:	a202      	add	r2, pc, #8	; (adr r2, 1a38 <__clzsi2+0x2c>)
    1a30:	5c10      	ldrb	r0, [r2, r0]
    1a32:	1840      	adds	r0, r0, r1
    1a34:	4770      	bx	lr
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	02020304 	.word	0x02020304
    1a3c:	01010101 	.word	0x01010101
	...

00001a48 <__clzdi2>:
    1a48:	b510      	push	{r4, lr}
    1a4a:	2900      	cmp	r1, #0
    1a4c:	d103      	bne.n	1a56 <__clzdi2+0xe>
    1a4e:	f7ff ffdd 	bl	1a0c <__clzsi2>
    1a52:	3020      	adds	r0, #32
    1a54:	e002      	b.n	1a5c <__clzdi2+0x14>
    1a56:	1c08      	adds	r0, r1, #0
    1a58:	f7ff ffd8 	bl	1a0c <__clzsi2>
    1a5c:	bd10      	pop	{r4, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)

00001a60 <__ctzsi2>:
    1a60:	4241      	negs	r1, r0
    1a62:	4008      	ands	r0, r1
    1a64:	211c      	movs	r1, #28
    1a66:	2301      	movs	r3, #1
    1a68:	041b      	lsls	r3, r3, #16
    1a6a:	4298      	cmp	r0, r3
    1a6c:	d301      	bcc.n	1a72 <__ctzsi2+0x12>
    1a6e:	0c00      	lsrs	r0, r0, #16
    1a70:	3910      	subs	r1, #16
    1a72:	0a1b      	lsrs	r3, r3, #8
    1a74:	4298      	cmp	r0, r3
    1a76:	d301      	bcc.n	1a7c <__ctzsi2+0x1c>
    1a78:	0a00      	lsrs	r0, r0, #8
    1a7a:	3908      	subs	r1, #8
    1a7c:	091b      	lsrs	r3, r3, #4
    1a7e:	4298      	cmp	r0, r3
    1a80:	d301      	bcc.n	1a86 <__ctzsi2+0x26>
    1a82:	0900      	lsrs	r0, r0, #4
    1a84:	3904      	subs	r1, #4
    1a86:	a202      	add	r2, pc, #8	; (adr r2, 1a90 <__ctzsi2+0x30>)
    1a88:	5c10      	ldrb	r0, [r2, r0]
    1a8a:	1a40      	subs	r0, r0, r1
    1a8c:	4770      	bx	lr
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	1d1d1c1b 	.word	0x1d1d1c1b
    1a94:	1e1e1e1e 	.word	0x1e1e1e1e
    1a98:	1f1f1f1f 	.word	0x1f1f1f1f
    1a9c:	1f1f1f1f 	.word	0x1f1f1f1f

00001aa0 <__eqdf2>:
    1aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa2:	4657      	mov	r7, sl
    1aa4:	464e      	mov	r6, r9
    1aa6:	4645      	mov	r5, r8
    1aa8:	005c      	lsls	r4, r3, #1
    1aaa:	b4e0      	push	{r5, r6, r7}
    1aac:	031f      	lsls	r7, r3, #12
    1aae:	0fdb      	lsrs	r3, r3, #31
    1ab0:	469a      	mov	sl, r3
    1ab2:	4b17      	ldr	r3, [pc, #92]	; (1b10 <__eqdf2+0x70>)
    1ab4:	030e      	lsls	r6, r1, #12
    1ab6:	004d      	lsls	r5, r1, #1
    1ab8:	4684      	mov	ip, r0
    1aba:	4680      	mov	r8, r0
    1abc:	0b36      	lsrs	r6, r6, #12
    1abe:	0d6d      	lsrs	r5, r5, #21
    1ac0:	0fc9      	lsrs	r1, r1, #31
    1ac2:	4691      	mov	r9, r2
    1ac4:	0b3f      	lsrs	r7, r7, #12
    1ac6:	0d64      	lsrs	r4, r4, #21
    1ac8:	2001      	movs	r0, #1
    1aca:	429d      	cmp	r5, r3
    1acc:	d008      	beq.n	1ae0 <__eqdf2+0x40>
    1ace:	429c      	cmp	r4, r3
    1ad0:	d001      	beq.n	1ad6 <__eqdf2+0x36>
    1ad2:	42a5      	cmp	r5, r4
    1ad4:	d00b      	beq.n	1aee <__eqdf2+0x4e>
    1ad6:	bc1c      	pop	{r2, r3, r4}
    1ad8:	4690      	mov	r8, r2
    1ada:	4699      	mov	r9, r3
    1adc:	46a2      	mov	sl, r4
    1ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ae0:	4663      	mov	r3, ip
    1ae2:	4333      	orrs	r3, r6
    1ae4:	d1f7      	bne.n	1ad6 <__eqdf2+0x36>
    1ae6:	42ac      	cmp	r4, r5
    1ae8:	d1f5      	bne.n	1ad6 <__eqdf2+0x36>
    1aea:	433a      	orrs	r2, r7
    1aec:	d1f3      	bne.n	1ad6 <__eqdf2+0x36>
    1aee:	2001      	movs	r0, #1
    1af0:	42be      	cmp	r6, r7
    1af2:	d1f0      	bne.n	1ad6 <__eqdf2+0x36>
    1af4:	45c8      	cmp	r8, r9
    1af6:	d1ee      	bne.n	1ad6 <__eqdf2+0x36>
    1af8:	4551      	cmp	r1, sl
    1afa:	d007      	beq.n	1b0c <__eqdf2+0x6c>
    1afc:	2d00      	cmp	r5, #0
    1afe:	d1ea      	bne.n	1ad6 <__eqdf2+0x36>
    1b00:	4663      	mov	r3, ip
    1b02:	431e      	orrs	r6, r3
    1b04:	0030      	movs	r0, r6
    1b06:	1e46      	subs	r6, r0, #1
    1b08:	41b0      	sbcs	r0, r6
    1b0a:	e7e4      	b.n	1ad6 <__eqdf2+0x36>
    1b0c:	2000      	movs	r0, #0
    1b0e:	e7e2      	b.n	1ad6 <__eqdf2+0x36>
    1b10:	000007ff 	.word	0x000007ff

00001b14 <__gedf2>:
    1b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b16:	465f      	mov	r7, fp
    1b18:	4644      	mov	r4, r8
    1b1a:	4656      	mov	r6, sl
    1b1c:	464d      	mov	r5, r9
    1b1e:	b4f0      	push	{r4, r5, r6, r7}
    1b20:	031f      	lsls	r7, r3, #12
    1b22:	0b3d      	lsrs	r5, r7, #12
    1b24:	4f2c      	ldr	r7, [pc, #176]	; (1bd8 <__gedf2+0xc4>)
    1b26:	030e      	lsls	r6, r1, #12
    1b28:	004c      	lsls	r4, r1, #1
    1b2a:	46ab      	mov	fp, r5
    1b2c:	005d      	lsls	r5, r3, #1
    1b2e:	4684      	mov	ip, r0
    1b30:	0b36      	lsrs	r6, r6, #12
    1b32:	0d64      	lsrs	r4, r4, #21
    1b34:	0fc9      	lsrs	r1, r1, #31
    1b36:	4690      	mov	r8, r2
    1b38:	0d6d      	lsrs	r5, r5, #21
    1b3a:	0fdb      	lsrs	r3, r3, #31
    1b3c:	42bc      	cmp	r4, r7
    1b3e:	d02a      	beq.n	1b96 <__gedf2+0x82>
    1b40:	4f25      	ldr	r7, [pc, #148]	; (1bd8 <__gedf2+0xc4>)
    1b42:	42bd      	cmp	r5, r7
    1b44:	d02d      	beq.n	1ba2 <__gedf2+0x8e>
    1b46:	2c00      	cmp	r4, #0
    1b48:	d10f      	bne.n	1b6a <__gedf2+0x56>
    1b4a:	4330      	orrs	r0, r6
    1b4c:	0007      	movs	r7, r0
    1b4e:	4681      	mov	r9, r0
    1b50:	4278      	negs	r0, r7
    1b52:	4178      	adcs	r0, r7
    1b54:	b2c0      	uxtb	r0, r0
    1b56:	2d00      	cmp	r5, #0
    1b58:	d117      	bne.n	1b8a <__gedf2+0x76>
    1b5a:	465f      	mov	r7, fp
    1b5c:	433a      	orrs	r2, r7
    1b5e:	d114      	bne.n	1b8a <__gedf2+0x76>
    1b60:	464b      	mov	r3, r9
    1b62:	2000      	movs	r0, #0
    1b64:	2b00      	cmp	r3, #0
    1b66:	d00a      	beq.n	1b7e <__gedf2+0x6a>
    1b68:	e006      	b.n	1b78 <__gedf2+0x64>
    1b6a:	2d00      	cmp	r5, #0
    1b6c:	d102      	bne.n	1b74 <__gedf2+0x60>
    1b6e:	4658      	mov	r0, fp
    1b70:	4302      	orrs	r2, r0
    1b72:	d001      	beq.n	1b78 <__gedf2+0x64>
    1b74:	4299      	cmp	r1, r3
    1b76:	d018      	beq.n	1baa <__gedf2+0x96>
    1b78:	4248      	negs	r0, r1
    1b7a:	2101      	movs	r1, #1
    1b7c:	4308      	orrs	r0, r1
    1b7e:	bc3c      	pop	{r2, r3, r4, r5}
    1b80:	4690      	mov	r8, r2
    1b82:	4699      	mov	r9, r3
    1b84:	46a2      	mov	sl, r4
    1b86:	46ab      	mov	fp, r5
    1b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d0f2      	beq.n	1b74 <__gedf2+0x60>
    1b8e:	2001      	movs	r0, #1
    1b90:	3b01      	subs	r3, #1
    1b92:	4318      	orrs	r0, r3
    1b94:	e7f3      	b.n	1b7e <__gedf2+0x6a>
    1b96:	0037      	movs	r7, r6
    1b98:	4307      	orrs	r7, r0
    1b9a:	d0d1      	beq.n	1b40 <__gedf2+0x2c>
    1b9c:	2002      	movs	r0, #2
    1b9e:	4240      	negs	r0, r0
    1ba0:	e7ed      	b.n	1b7e <__gedf2+0x6a>
    1ba2:	465f      	mov	r7, fp
    1ba4:	4317      	orrs	r7, r2
    1ba6:	d0ce      	beq.n	1b46 <__gedf2+0x32>
    1ba8:	e7f8      	b.n	1b9c <__gedf2+0x88>
    1baa:	42ac      	cmp	r4, r5
    1bac:	dce4      	bgt.n	1b78 <__gedf2+0x64>
    1bae:	da03      	bge.n	1bb8 <__gedf2+0xa4>
    1bb0:	1e48      	subs	r0, r1, #1
    1bb2:	2101      	movs	r1, #1
    1bb4:	4308      	orrs	r0, r1
    1bb6:	e7e2      	b.n	1b7e <__gedf2+0x6a>
    1bb8:	455e      	cmp	r6, fp
    1bba:	d8dd      	bhi.n	1b78 <__gedf2+0x64>
    1bbc:	d006      	beq.n	1bcc <__gedf2+0xb8>
    1bbe:	2000      	movs	r0, #0
    1bc0:	455e      	cmp	r6, fp
    1bc2:	d2dc      	bcs.n	1b7e <__gedf2+0x6a>
    1bc4:	2301      	movs	r3, #1
    1bc6:	1e48      	subs	r0, r1, #1
    1bc8:	4318      	orrs	r0, r3
    1bca:	e7d8      	b.n	1b7e <__gedf2+0x6a>
    1bcc:	45c4      	cmp	ip, r8
    1bce:	d8d3      	bhi.n	1b78 <__gedf2+0x64>
    1bd0:	2000      	movs	r0, #0
    1bd2:	45c4      	cmp	ip, r8
    1bd4:	d3f6      	bcc.n	1bc4 <__gedf2+0xb0>
    1bd6:	e7d2      	b.n	1b7e <__gedf2+0x6a>
    1bd8:	000007ff 	.word	0x000007ff

00001bdc <__ledf2>:
    1bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bde:	465f      	mov	r7, fp
    1be0:	464d      	mov	r5, r9
    1be2:	4644      	mov	r4, r8
    1be4:	4656      	mov	r6, sl
    1be6:	b4f0      	push	{r4, r5, r6, r7}
    1be8:	031f      	lsls	r7, r3, #12
    1bea:	005c      	lsls	r4, r3, #1
    1bec:	0fdb      	lsrs	r3, r3, #31
    1bee:	4699      	mov	r9, r3
    1bf0:	4b2a      	ldr	r3, [pc, #168]	; (1c9c <__ledf2+0xc0>)
    1bf2:	030e      	lsls	r6, r1, #12
    1bf4:	004d      	lsls	r5, r1, #1
    1bf6:	0fc9      	lsrs	r1, r1, #31
    1bf8:	4684      	mov	ip, r0
    1bfa:	0b36      	lsrs	r6, r6, #12
    1bfc:	0d6d      	lsrs	r5, r5, #21
    1bfe:	468b      	mov	fp, r1
    1c00:	4690      	mov	r8, r2
    1c02:	0b3f      	lsrs	r7, r7, #12
    1c04:	0d64      	lsrs	r4, r4, #21
    1c06:	429d      	cmp	r5, r3
    1c08:	d020      	beq.n	1c4c <__ledf2+0x70>
    1c0a:	4b24      	ldr	r3, [pc, #144]	; (1c9c <__ledf2+0xc0>)
    1c0c:	429c      	cmp	r4, r3
    1c0e:	d022      	beq.n	1c56 <__ledf2+0x7a>
    1c10:	2d00      	cmp	r5, #0
    1c12:	d112      	bne.n	1c3a <__ledf2+0x5e>
    1c14:	4330      	orrs	r0, r6
    1c16:	4243      	negs	r3, r0
    1c18:	4143      	adcs	r3, r0
    1c1a:	b2db      	uxtb	r3, r3
    1c1c:	2c00      	cmp	r4, #0
    1c1e:	d01f      	beq.n	1c60 <__ledf2+0x84>
    1c20:	2b00      	cmp	r3, #0
    1c22:	d00c      	beq.n	1c3e <__ledf2+0x62>
    1c24:	464b      	mov	r3, r9
    1c26:	2001      	movs	r0, #1
    1c28:	3b01      	subs	r3, #1
    1c2a:	4303      	orrs	r3, r0
    1c2c:	0018      	movs	r0, r3
    1c2e:	bc3c      	pop	{r2, r3, r4, r5}
    1c30:	4690      	mov	r8, r2
    1c32:	4699      	mov	r9, r3
    1c34:	46a2      	mov	sl, r4
    1c36:	46ab      	mov	fp, r5
    1c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c3a:	2c00      	cmp	r4, #0
    1c3c:	d016      	beq.n	1c6c <__ledf2+0x90>
    1c3e:	45cb      	cmp	fp, r9
    1c40:	d017      	beq.n	1c72 <__ledf2+0x96>
    1c42:	465b      	mov	r3, fp
    1c44:	4259      	negs	r1, r3
    1c46:	2301      	movs	r3, #1
    1c48:	430b      	orrs	r3, r1
    1c4a:	e7ef      	b.n	1c2c <__ledf2+0x50>
    1c4c:	0031      	movs	r1, r6
    1c4e:	2302      	movs	r3, #2
    1c50:	4301      	orrs	r1, r0
    1c52:	d1eb      	bne.n	1c2c <__ledf2+0x50>
    1c54:	e7d9      	b.n	1c0a <__ledf2+0x2e>
    1c56:	0039      	movs	r1, r7
    1c58:	2302      	movs	r3, #2
    1c5a:	4311      	orrs	r1, r2
    1c5c:	d1e6      	bne.n	1c2c <__ledf2+0x50>
    1c5e:	e7d7      	b.n	1c10 <__ledf2+0x34>
    1c60:	433a      	orrs	r2, r7
    1c62:	d1dd      	bne.n	1c20 <__ledf2+0x44>
    1c64:	2300      	movs	r3, #0
    1c66:	2800      	cmp	r0, #0
    1c68:	d0e0      	beq.n	1c2c <__ledf2+0x50>
    1c6a:	e7ea      	b.n	1c42 <__ledf2+0x66>
    1c6c:	433a      	orrs	r2, r7
    1c6e:	d1e6      	bne.n	1c3e <__ledf2+0x62>
    1c70:	e7e7      	b.n	1c42 <__ledf2+0x66>
    1c72:	42a5      	cmp	r5, r4
    1c74:	dce5      	bgt.n	1c42 <__ledf2+0x66>
    1c76:	db05      	blt.n	1c84 <__ledf2+0xa8>
    1c78:	42be      	cmp	r6, r7
    1c7a:	d8e2      	bhi.n	1c42 <__ledf2+0x66>
    1c7c:	d007      	beq.n	1c8e <__ledf2+0xb2>
    1c7e:	2300      	movs	r3, #0
    1c80:	42be      	cmp	r6, r7
    1c82:	d2d3      	bcs.n	1c2c <__ledf2+0x50>
    1c84:	4659      	mov	r1, fp
    1c86:	2301      	movs	r3, #1
    1c88:	3901      	subs	r1, #1
    1c8a:	430b      	orrs	r3, r1
    1c8c:	e7ce      	b.n	1c2c <__ledf2+0x50>
    1c8e:	45c4      	cmp	ip, r8
    1c90:	d8d7      	bhi.n	1c42 <__ledf2+0x66>
    1c92:	2300      	movs	r3, #0
    1c94:	45c4      	cmp	ip, r8
    1c96:	d3f5      	bcc.n	1c84 <__ledf2+0xa8>
    1c98:	e7c8      	b.n	1c2c <__ledf2+0x50>
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	000007ff 	.word	0x000007ff

00001ca0 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    1ca0:	0003      	movs	r3, r0
    1ca2:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
    1ca4:	701a      	strb	r2, [r3, #0]
	while (*s != '\0') {
    1ca6:	2a00      	cmp	r2, #0
    1ca8:	d100      	bne.n	1cac <strcpy+0xc>
	}

	*d = '\0';

	return dest;
}
    1caa:	4770      	bx	lr
		d++;
    1cac:	3301      	adds	r3, #1
		s++;
    1cae:	3101      	adds	r1, #1
    1cb0:	e7f7      	b.n	1ca2 <strcpy+0x2>

00001cb2 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    1cb2:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    1cb4:	7803      	ldrb	r3, [r0, #0]
    1cb6:	4299      	cmp	r1, r3
    1cb8:	d005      	beq.n	1cc6 <strchr+0x14>
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d104      	bne.n	1cc8 <strchr+0x16>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    1cbe:	424b      	negs	r3, r1
    1cc0:	4159      	adcs	r1, r3
    1cc2:	4249      	negs	r1, r1
    1cc4:	4008      	ands	r0, r1
}
    1cc6:	4770      	bx	lr
		s++;
    1cc8:	3001      	adds	r0, #1
    1cca:	e7f3      	b.n	1cb4 <strchr+0x2>

00001ccc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1ccc:	7803      	ldrb	r3, [r0, #0]
    1cce:	780a      	ldrb	r2, [r1, #0]
    1cd0:	4293      	cmp	r3, r2
    1cd2:	d102      	bne.n	1cda <strcmp+0xe>
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d102      	bne.n	1cde <strcmp+0x12>
    1cd8:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
    1cda:	1a98      	subs	r0, r3, r2
}
    1cdc:	4770      	bx	lr
		s1++;
    1cde:	3001      	adds	r0, #1
		s2++;
    1ce0:	3101      	adds	r1, #1
    1ce2:	e7f3      	b.n	1ccc <strcmp>

00001ce4 <memcmp>:
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
    1ce4:	2300      	movs	r3, #0
{
    1ce6:	b510      	push	{r4, lr}
	if (!n)
    1ce8:	429a      	cmp	r2, r3
    1cea:	d005      	beq.n	1cf8 <memcmp+0x14>

	while ((--n > 0) && (*c1 == *c2)) {
    1cec:	3a01      	subs	r2, #1
    1cee:	2a00      	cmp	r2, #0
    1cf0:	d104      	bne.n	1cfc <memcmp+0x18>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1cf2:	7803      	ldrb	r3, [r0, #0]
    1cf4:	7808      	ldrb	r0, [r1, #0]
    1cf6:	1a1b      	subs	r3, r3, r0
}
    1cf8:	0018      	movs	r0, r3
    1cfa:	bd10      	pop	{r4, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1cfc:	7804      	ldrb	r4, [r0, #0]
    1cfe:	780b      	ldrb	r3, [r1, #0]
    1d00:	429c      	cmp	r4, r3
    1d02:	d1f6      	bne.n	1cf2 <memcmp+0xe>
		c1++;
    1d04:	3001      	adds	r0, #1
		c2++;
    1d06:	3101      	adds	r1, #1
    1d08:	e7f0      	b.n	1cec <memcmp+0x8>

00001d0a <memmove>:
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    1d0a:	b510      	push	{r4, lr}
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    1d0c:	1a43      	subs	r3, r0, r1
    1d0e:	4293      	cmp	r3, r2
    1d10:	d306      	bcc.n	1d20 <memmove+0x16>
    1d12:	2300      	movs	r3, #0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    1d14:	429a      	cmp	r2, r3
    1d16:	d008      	beq.n	1d2a <memmove+0x20>
			*dest = *src;
    1d18:	5ccc      	ldrb	r4, [r1, r3]
    1d1a:	54c4      	strb	r4, [r0, r3]
    1d1c:	3301      	adds	r3, #1
    1d1e:	e7f9      	b.n	1d14 <memmove+0xa>
			n--;
    1d20:	3a01      	subs	r2, #1
			dest[n] = src[n];
    1d22:	5c8b      	ldrb	r3, [r1, r2]
    1d24:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
    1d26:	2a00      	cmp	r2, #0
    1d28:	d1fa      	bne.n	1d20 <memmove+0x16>
			n--;
		}
	}

	return d;
}
    1d2a:	bd10      	pop	{r4, pc}

00001d2c <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1d2c:	0003      	movs	r3, r0
{
    1d2e:	b530      	push	{r4, r5, lr}
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1d30:	2503      	movs	r5, #3
    1d32:	404b      	eors	r3, r1
    1d34:	422b      	tst	r3, r5
    1d36:	d019      	beq.n	1d6c <memcpy+0x40>
	unsigned char *d_byte = (unsigned char *)d;
    1d38:	0003      	movs	r3, r0
    1d3a:	2400      	movs	r4, #0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1d3c:	42a2      	cmp	r2, r4
    1d3e:	d11b      	bne.n	1d78 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1d40:	bd30      	pop	{r4, r5, pc}
			if (n == 0) {
    1d42:	2a00      	cmp	r2, #0
    1d44:	d0fc      	beq.n	1d40 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    1d46:	780c      	ldrb	r4, [r1, #0]
			n--;
    1d48:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    1d4a:	701c      	strb	r4, [r3, #0]
    1d4c:	3101      	adds	r1, #1
    1d4e:	3301      	adds	r3, #1
		while (((unsigned int)d_byte) & 0x3) {
    1d50:	001c      	movs	r4, r3
    1d52:	402c      	ands	r4, r5
    1d54:	d1f5      	bne.n	1d42 <memcpy+0x16>
		while (n >= sizeof(unsigned int)) {
    1d56:	1b15      	subs	r5, r2, r4
    1d58:	2d03      	cmp	r5, #3
    1d5a:	d809      	bhi.n	1d70 <memcpy+0x44>
    1d5c:	2403      	movs	r4, #3
    1d5e:	0015      	movs	r5, r2
    1d60:	43a5      	bics	r5, r4
    1d62:	2403      	movs	r4, #3
    1d64:	1949      	adds	r1, r1, r5
    1d66:	195b      	adds	r3, r3, r5
    1d68:	4022      	ands	r2, r4
    1d6a:	e7e6      	b.n	1d3a <memcpy+0xe>
    1d6c:	0003      	movs	r3, r0
    1d6e:	e7ef      	b.n	1d50 <memcpy+0x24>
			*(d_word++) = *(s_word++);
    1d70:	590d      	ldr	r5, [r1, r4]
    1d72:	511d      	str	r5, [r3, r4]
    1d74:	3404      	adds	r4, #4
    1d76:	e7ee      	b.n	1d56 <memcpy+0x2a>
		*(d_byte++) = *(s_byte++);
    1d78:	5d0d      	ldrb	r5, [r1, r4]
    1d7a:	551d      	strb	r5, [r3, r4]
    1d7c:	3401      	adds	r4, #1
    1d7e:	e7dd      	b.n	1d3c <memcpy+0x10>

00001d80 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1d80:	b570      	push	{r4, r5, r6, lr}
    1d82:	0005      	movs	r5, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
    1d84:	2603      	movs	r6, #3
	unsigned char c_byte = (unsigned char)c;
    1d86:	b2cb      	uxtb	r3, r1
    1d88:	002c      	movs	r4, r5
	while (((unsigned int)d_byte) & 0x3) {
    1d8a:	4235      	tst	r5, r6
    1d8c:	d111      	bne.n	1db2 <memset+0x32>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
    1d8e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    1d90:	020e      	lsls	r6, r1, #8
    1d92:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
    1d94:	040e      	lsls	r6, r1, #16
    1d96:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
    1d98:	0016      	movs	r6, r2
    1d9a:	2e03      	cmp	r6, #3
    1d9c:	d80f      	bhi.n	1dbe <memset+0x3e>
    1d9e:	2103      	movs	r1, #3
    1da0:	0015      	movs	r5, r2
    1da2:	438d      	bics	r5, r1
    1da4:	1961      	adds	r1, r4, r5
    1da6:	2403      	movs	r4, #3
    1da8:	4022      	ands	r2, r4
    1daa:	188a      	adds	r2, r1, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1dac:	4291      	cmp	r1, r2
    1dae:	d109      	bne.n	1dc4 <memset+0x44>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1db2:	2a00      	cmp	r2, #0
    1db4:	d0fc      	beq.n	1db0 <memset+0x30>
		*(d_byte++) = c_byte;
    1db6:	702b      	strb	r3, [r5, #0]
		n--;
    1db8:	3a01      	subs	r2, #1
    1dba:	3501      	adds	r5, #1
    1dbc:	e7e4      	b.n	1d88 <memset+0x8>
		*(d_word++) = c_word;
    1dbe:	c502      	stmia	r5!, {r1}
		n -= sizeof(unsigned int);
    1dc0:	3e04      	subs	r6, #4
    1dc2:	e7ea      	b.n	1d9a <memset+0x1a>
		*(d_byte++) = c_byte;
    1dc4:	700b      	strb	r3, [r1, #0]
    1dc6:	3101      	adds	r1, #1
    1dc8:	e7f0      	b.n	1dac <memset+0x2c>

00001dca <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    1dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dcc:	0004      	movs	r4, r0
    1dce:	000d      	movs	r5, r1
    1dd0:	0006      	movs	r6, r0
    1dd2:	9200      	str	r2, [sp, #0]
    1dd4:	9301      	str	r3, [sp, #4]
	char *buf0 = buf;

	do {
		int d = n % base;
    1dd6:	0028      	movs	r0, r5
    1dd8:	9900      	ldr	r1, [sp, #0]
    1dda:	f7fe fa39 	bl	250 <__aeabi_uidivmod>

		n /= base;
    1dde:	0028      	movs	r0, r5
		int d = n % base;
    1de0:	000f      	movs	r7, r1
		n /= base;
    1de2:	9900      	ldr	r1, [sp, #0]
    1de4:	f7fe f9f0 	bl	1c8 <__aeabi_uidiv>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    1de8:	b2fa      	uxtb	r2, r7
		n /= base;
    1dea:	0005      	movs	r5, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    1dec:	2327      	movs	r3, #39	; 0x27
    1dee:	1c70      	adds	r0, r6, #1
    1df0:	2f09      	cmp	r7, #9
    1df2:	dc00      	bgt.n	1df6 <_to_x+0x2c>
    1df4:	2300      	movs	r3, #0
    1df6:	3230      	adds	r2, #48	; 0x30
    1df8:	189b      	adds	r3, r3, r2
    1dfa:	7033      	strb	r3, [r6, #0]
    1dfc:	0006      	movs	r6, r0
	} while (n);
    1dfe:	2d00      	cmp	r5, #0
    1e00:	d1e9      	bne.n	1dd6 <_to_x+0xc>
		*end++ = '0';
    1e02:	2230      	movs	r2, #48	; 0x30
    1e04:	1b00      	subs	r0, r0, r4
	while (end - start < minlen) {
    1e06:	9901      	ldr	r1, [sp, #4]
    1e08:	1823      	adds	r3, r4, r0
    1e0a:	4281      	cmp	r1, r0
    1e0c:	dc05      	bgt.n	1e1a <_to_x+0x50>
	*end = 0;
    1e0e:	2200      	movs	r2, #0
	for (end--; end > start; end--, start++) {
    1e10:	3b01      	subs	r3, #1
	*end = 0;
    1e12:	705a      	strb	r2, [r3, #1]
	for (end--; end > start; end--, start++) {
    1e14:	42a3      	cmp	r3, r4
    1e16:	d803      	bhi.n	1e20 <_to_x+0x56>
	return _reverse_and_pad(buf0, buf, minlen);
}
    1e18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		*end++ = '0';
    1e1a:	5422      	strb	r2, [r4, r0]
    1e1c:	3001      	adds	r0, #1
    1e1e:	e7f2      	b.n	1e06 <_to_x+0x3c>
		char tmp = *end;
    1e20:	781a      	ldrb	r2, [r3, #0]
		*end = *start;
    1e22:	7821      	ldrb	r1, [r4, #0]
	for (end--; end > start; end--, start++) {
    1e24:	3b01      	subs	r3, #1
		*end = *start;
    1e26:	7059      	strb	r1, [r3, #1]
		*start = tmp;
    1e28:	7022      	strb	r2, [r4, #0]
	for (end--; end > start; end--, start++) {
    1e2a:	3401      	adds	r4, #1
    1e2c:	e7f2      	b.n	1e14 <_to_x+0x4a>

00001e2e <_rlrshift>:

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
    1e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	*v = (*v & 1) + (*v >> 1);
    1e30:	2401      	movs	r4, #1
    1e32:	6806      	ldr	r6, [r0, #0]
    1e34:	2300      	movs	r3, #0
    1e36:	4034      	ands	r4, r6
    1e38:	0022      	movs	r2, r4
    1e3a:	6841      	ldr	r1, [r0, #4]
    1e3c:	0874      	lsrs	r4, r6, #1
    1e3e:	07cf      	lsls	r7, r1, #31
    1e40:	433c      	orrs	r4, r7
    1e42:	084d      	lsrs	r5, r1, #1
    1e44:	1912      	adds	r2, r2, r4
    1e46:	416b      	adcs	r3, r5
    1e48:	6002      	str	r2, [r0, #0]
    1e4a:	6043      	str	r3, [r0, #4]
}
    1e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001e50 <_ldiv5>:
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
    1e50:	2300      	movs	r3, #0
    1e52:	2202      	movs	r2, #2
{
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0, q;
    1e56:	2400      	movs	r4, #0
{
    1e58:	0005      	movs	r5, r0
	rem += 2;
    1e5a:	6841      	ldr	r1, [r0, #4]
    1e5c:	6800      	ldr	r0, [r0, #0]
    1e5e:	1880      	adds	r0, r0, r2
    1e60:	4159      	adcs	r1, r3
	uint64_t rem = *v, quot = 0, q;
    1e62:	2300      	movs	r3, #0
{
    1e64:	b085      	sub	sp, #20
	uint64_t rem = *v, quot = 0, q;
    1e66:	9302      	str	r3, [sp, #8]
    1e68:	9403      	str	r4, [sp, #12]

	for (i = 0; i < 3; i++) {
    1e6a:	2400      	movs	r4, #0
	rem += 2;
    1e6c:	9000      	str	r0, [sp, #0]
    1e6e:	9101      	str	r1, [sp, #4]
		hi = rem >> shifts[i];
    1e70:	9800      	ldr	r0, [sp, #0]
    1e72:	9901      	ldr	r1, [sp, #4]
    1e74:	4b13      	ldr	r3, [pc, #76]	; (1ec4 <_ldiv5+0x74>)
    1e76:	5ce6      	ldrb	r6, [r4, r3]
	for (i = 0; i < 3; i++) {
    1e78:	3401      	adds	r4, #1
		hi = rem >> shifts[i];
    1e7a:	0032      	movs	r2, r6
    1e7c:	f7fe fa54 	bl	328 <__aeabi_llsr>
		q = (uint64_t)(hi / 5) << shifts[i];
    1e80:	2105      	movs	r1, #5
    1e82:	f7fe f9a1 	bl	1c8 <__aeabi_uidiv>
    1e86:	0032      	movs	r2, r6
    1e88:	2100      	movs	r1, #0
    1e8a:	f7fe fa59 	bl	340 <__aeabi_llsl>
		rem -= q * 5;
    1e8e:	2205      	movs	r2, #5
    1e90:	2300      	movs	r3, #0
		q = (uint64_t)(hi / 5) << shifts[i];
    1e92:	0006      	movs	r6, r0
    1e94:	000f      	movs	r7, r1
		rem -= q * 5;
    1e96:	f7fe fa7f 	bl	398 <__aeabi_lmul>
    1e9a:	9a00      	ldr	r2, [sp, #0]
    1e9c:	9b01      	ldr	r3, [sp, #4]
    1e9e:	1a12      	subs	r2, r2, r0
    1ea0:	418b      	sbcs	r3, r1
    1ea2:	9200      	str	r2, [sp, #0]
    1ea4:	9301      	str	r3, [sp, #4]
		quot += q;
    1ea6:	9a02      	ldr	r2, [sp, #8]
    1ea8:	9b03      	ldr	r3, [sp, #12]
    1eaa:	1992      	adds	r2, r2, r6
    1eac:	417b      	adcs	r3, r7
    1eae:	9202      	str	r2, [sp, #8]
    1eb0:	9303      	str	r3, [sp, #12]
	for (i = 0; i < 3; i++) {
    1eb2:	2c03      	cmp	r4, #3
    1eb4:	d1dc      	bne.n	1e70 <_ldiv5+0x20>
	}

	*v = quot;
    1eb6:	001c      	movs	r4, r3
    1eb8:	0013      	movs	r3, r2
    1eba:	602b      	str	r3, [r5, #0]
    1ebc:	606c      	str	r4, [r5, #4]
}
    1ebe:	b005      	add	sp, #20
    1ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	0000d42b 	.word	0x0000d42b

00001ec8 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    1ec8:	680a      	ldr	r2, [r1, #0]
{
    1eca:	b510      	push	{r4, lr}
		*digit_count -= 1;
		*fr = *fr * 10;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else
		rval = '0';
    1ecc:	2330      	movs	r3, #48	; 0x30
{
    1ece:	0004      	movs	r4, r0
	if (*digit_count > 0) {
    1ed0:	2a00      	cmp	r2, #0
    1ed2:	dd0d      	ble.n	1ef0 <_get_digit+0x28>
		*digit_count -= 1;
    1ed4:	3a01      	subs	r2, #1
    1ed6:	600a      	str	r2, [r1, #0]
		*fr = *fr * 10;
    1ed8:	2300      	movs	r3, #0
    1eda:	6841      	ldr	r1, [r0, #4]
    1edc:	6800      	ldr	r0, [r0, #0]
    1ede:	220a      	movs	r2, #10
    1ee0:	f7fe fa5a 	bl	398 <__aeabi_lmul>
		rval = ((*fr >> 60) & 0xF) + '0';
    1ee4:	0f0b      	lsrs	r3, r1, #28
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    1ee6:	0109      	lsls	r1, r1, #4
    1ee8:	0909      	lsrs	r1, r1, #4
		rval = ((*fr >> 60) & 0xF) + '0';
    1eea:	3330      	adds	r3, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    1eec:	6020      	str	r0, [r4, #0]
    1eee:	6061      	str	r1, [r4, #4]
	return (char) (rval);
    1ef0:	b2d8      	uxtb	r0, r3
}
    1ef2:	bd10      	pop	{r4, pc}

00001ef4 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	001d      	movs	r5, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    1ef8:	2300      	movs	r3, #0
{
    1efa:	b0c9      	sub	sp, #292	; 0x124
    1efc:	900c      	str	r0, [sp, #48]	; 0x30
    1efe:	910d      	str	r1, [sp, #52]	; 0x34
	count = 0;
    1f00:	9306      	str	r3, [sp, #24]

	while ((c = *format++)) {
    1f02:	7810      	ldrb	r0, [r2, #0]
    1f04:	1c53      	adds	r3, r2, #1
    1f06:	9303      	str	r3, [sp, #12]
    1f08:	2800      	cmp	r0, #0
    1f0a:	d031      	beq.n	1f70 <_prf+0x7c>
		if (c != '%') {
    1f0c:	2825      	cmp	r0, #37	; 0x25
    1f0e:	d127      	bne.n	1f60 <_prf+0x6c>
    1f10:	2320      	movs	r3, #32
    1f12:	9307      	str	r3, [sp, #28]
    1f14:	2300      	movs	r3, #0
    1f16:	001f      	movs	r7, r3
    1f18:	9309      	str	r3, [sp, #36]	; 0x24
    1f1a:	9308      	str	r3, [sp, #32]
    1f1c:	930a      	str	r3, [sp, #40]	; 0x28
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
    1f1e:	9e03      	ldr	r6, [sp, #12]
    1f20:	9b03      	ldr	r3, [sp, #12]
    1f22:	7834      	ldrb	r4, [r6, #0]
    1f24:	3301      	adds	r3, #1
    1f26:	0021      	movs	r1, r4
    1f28:	48b4      	ldr	r0, [pc, #720]	; (21fc <_prf+0x308>)
    1f2a:	9303      	str	r3, [sp, #12]
    1f2c:	f7ff fec1 	bl	1cb2 <strchr>
    1f30:	2800      	cmp	r0, #0
    1f32:	d127      	bne.n	1f84 <_prf+0x90>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
    1f34:	2c2a      	cmp	r4, #42	; 0x2a
    1f36:	d140      	bne.n	1fba <_prf+0xc6>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
    1f38:	682a      	ldr	r2, [r5, #0]
    1f3a:	1d2b      	adds	r3, r5, #4
    1f3c:	9204      	str	r2, [sp, #16]
				if (width < 0) {
    1f3e:	2a00      	cmp	r2, #0
    1f40:	da03      	bge.n	1f4a <_prf+0x56>
					fminus = true;
					width = -width;
    1f42:	4252      	negs	r2, r2
    1f44:	9204      	str	r2, [sp, #16]
					fminus = true;
    1f46:	2201      	movs	r2, #1
    1f48:	920a      	str	r2, [sp, #40]	; 0x28
				}
				c = *format++;
    1f4a:	9a03      	ldr	r2, [sp, #12]
				width = (int32_t) va_arg(vargs, int32_t);
    1f4c:	001d      	movs	r5, r3
				c = *format++;
    1f4e:	7814      	ldrb	r4, [r2, #0]
    1f50:	1cb3      	adds	r3, r6, #2
    1f52:	9303      	str	r3, [sp, #12]
			 * If <width> is INT_MIN, then its absolute value can
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
    1f54:	9b04      	ldr	r3, [sp, #16]
    1f56:	2bc8      	cmp	r3, #200	; 0xc8
    1f58:	d935      	bls.n	1fc6 <_prf+0xd2>
				width = MAXFLD;
    1f5a:	23c8      	movs	r3, #200	; 0xc8
    1f5c:	9304      	str	r3, [sp, #16]
    1f5e:	e032      	b.n	1fc6 <_prf+0xd2>
			if ((*func) (c, dest) == EOF) {
    1f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f62:	990d      	ldr	r1, [sp, #52]	; 0x34
    1f64:	4798      	blx	r3
    1f66:	1c43      	adds	r3, r0, #1
    1f68:	d105      	bne.n	1f76 <_prf+0x82>
				return EOF;
    1f6a:	2301      	movs	r3, #1
    1f6c:	425b      	negs	r3, r3
    1f6e:	9306      	str	r3, [sp, #24]
				}
			}
		}
	}
	return count;
}
    1f70:	9806      	ldr	r0, [sp, #24]
    1f72:	b049      	add	sp, #292	; 0x124
    1f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			count++;
    1f76:	9c06      	ldr	r4, [sp, #24]
    1f78:	9505      	str	r5, [sp, #20]
    1f7a:	3401      	adds	r4, #1
			if (c >= MAXFLD + 1)
    1f7c:	9d05      	ldr	r5, [sp, #20]
    1f7e:	9a03      	ldr	r2, [sp, #12]
    1f80:	9406      	str	r4, [sp, #24]
    1f82:	e7be      	b.n	1f02 <_prf+0xe>
				switch (c) {
    1f84:	2c23      	cmp	r4, #35	; 0x23
    1f86:	d013      	beq.n	1fb0 <_prf+0xbc>
    1f88:	d806      	bhi.n	1f98 <_prf+0xa4>
    1f8a:	2c00      	cmp	r4, #0
    1f8c:	d0f0      	beq.n	1f70 <_prf+0x7c>
    1f8e:	2c20      	cmp	r4, #32
    1f90:	d1c5      	bne.n	1f1e <_prf+0x2a>
					fspace = true;
    1f92:	2301      	movs	r3, #1
    1f94:	9309      	str	r3, [sp, #36]	; 0x24
					break;
    1f96:	e7c2      	b.n	1f1e <_prf+0x2a>
				switch (c) {
    1f98:	2c2d      	cmp	r4, #45	; 0x2d
    1f9a:	d006      	beq.n	1faa <_prf+0xb6>
    1f9c:	2c30      	cmp	r4, #48	; 0x30
    1f9e:	d009      	beq.n	1fb4 <_prf+0xc0>
    1fa0:	2c2b      	cmp	r4, #43	; 0x2b
    1fa2:	d1bc      	bne.n	1f1e <_prf+0x2a>
					fplus = true;
    1fa4:	2301      	movs	r3, #1
    1fa6:	9308      	str	r3, [sp, #32]
					break;
    1fa8:	e7b9      	b.n	1f1e <_prf+0x2a>
					fminus = true;
    1faa:	2301      	movs	r3, #1
    1fac:	930a      	str	r3, [sp, #40]	; 0x28
    1fae:	e7b6      	b.n	1f1e <_prf+0x2a>
					falt = true;
    1fb0:	2701      	movs	r7, #1
					break;
    1fb2:	e7b4      	b.n	1f1e <_prf+0x2a>
					pad = '0';
    1fb4:	2330      	movs	r3, #48	; 0x30
    1fb6:	9307      	str	r3, [sp, #28]
					break;
    1fb8:	e7b1      	b.n	1f1e <_prf+0x2a>
			} else if (!isdigit(c))
    1fba:	0023      	movs	r3, r4
    1fbc:	3b30      	subs	r3, #48	; 0x30
				width = 0;
    1fbe:	9004      	str	r0, [sp, #16]
		i = 10 * i + *p++ - '0';
    1fc0:	220a      	movs	r2, #10
			} else if (!isdigit(c))
    1fc2:	2b09      	cmp	r3, #9
    1fc4:	d91a      	bls.n	1ffc <_prf+0x108>
			if (c == '.') {
    1fc6:	2c2e      	cmp	r4, #46	; 0x2e
    1fc8:	d14e      	bne.n	2068 <_prf+0x174>
				if (c == '*') {
    1fca:	9b03      	ldr	r3, [sp, #12]
    1fcc:	781b      	ldrb	r3, [r3, #0]
    1fce:	2b2a      	cmp	r3, #42	; 0x2a
    1fd0:	d01c      	beq.n	200c <_prf+0x118>
    1fd2:	2300      	movs	r3, #0
		i = 10 * i + *p++ - '0';
    1fd4:	200a      	movs	r0, #10
    1fd6:	9301      	str	r3, [sp, #4]
				if (c == '*') {
    1fd8:	9b03      	ldr	r3, [sp, #12]
	while (isdigit(((int) *p)))
    1fda:	7819      	ldrb	r1, [r3, #0]
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    1fdc:	000a      	movs	r2, r1
    1fde:	3a30      	subs	r2, #48	; 0x30
    1fe0:	2a09      	cmp	r2, #9
    1fe2:	d818      	bhi.n	2016 <_prf+0x122>
		i = 10 * i + *p++ - '0';
    1fe4:	9a01      	ldr	r2, [sp, #4]
    1fe6:	3301      	adds	r3, #1
    1fe8:	4342      	muls	r2, r0
    1fea:	1852      	adds	r2, r2, r1
    1fec:	3a30      	subs	r2, #48	; 0x30
    1fee:	9201      	str	r2, [sp, #4]
    1ff0:	e7f3      	b.n	1fda <_prf+0xe6>
    1ff2:	9804      	ldr	r0, [sp, #16]
    1ff4:	4350      	muls	r0, r2
    1ff6:	1904      	adds	r4, r0, r4
    1ff8:	3c30      	subs	r4, #48	; 0x30
    1ffa:	9404      	str	r4, [sp, #16]
	while (isdigit(((int) *p)))
    1ffc:	7834      	ldrb	r4, [r6, #0]
    1ffe:	3601      	adds	r6, #1
    2000:	0023      	movs	r3, r4
    2002:	3b30      	subs	r3, #48	; 0x30
    2004:	2b09      	cmp	r3, #9
    2006:	d9f4      	bls.n	1ff2 <_prf+0xfe>
				c = *format++;
    2008:	9603      	str	r6, [sp, #12]
    200a:	e7a3      	b.n	1f54 <_prf+0x60>
					precision = (int32_t)
    200c:	682a      	ldr	r2, [r5, #0]
				c = *format++;
    200e:	9b03      	ldr	r3, [sp, #12]
					precision = (int32_t)
    2010:	9201      	str	r2, [sp, #4]
				c = *format++;
    2012:	3301      	adds	r3, #1
					precision = (int32_t)
    2014:	3504      	adds	r5, #4
				if (precision > MAXFLD)
    2016:	9a01      	ldr	r2, [sp, #4]
    2018:	2ac8      	cmp	r2, #200	; 0xc8
    201a:	dd02      	ble.n	2022 <_prf+0x12e>
					precision = -1;
    201c:	2201      	movs	r2, #1
    201e:	4252      	negs	r2, r2
    2020:	9201      	str	r2, [sp, #4]
				c = *format++;
    2022:	1c5a      	adds	r2, r3, #1
    2024:	781c      	ldrb	r4, [r3, #0]
    2026:	9203      	str	r2, [sp, #12]
			if (strchr("hlLz", c) != NULL) {
    2028:	0021      	movs	r1, r4
    202a:	4875      	ldr	r0, [pc, #468]	; (2200 <_prf+0x30c>)
    202c:	f7ff fe41 	bl	1cb2 <strchr>
    2030:	2800      	cmp	r0, #0
    2032:	d003      	beq.n	203c <_prf+0x148>
				c = *format++;
    2034:	9b03      	ldr	r3, [sp, #12]
    2036:	781c      	ldrb	r4, [r3, #0]
    2038:	3301      	adds	r3, #1
    203a:	9303      	str	r3, [sp, #12]
			switch (c) {
    203c:	2c67      	cmp	r4, #103	; 0x67
    203e:	dc3d      	bgt.n	20bc <_prf+0x1c8>
    2040:	2c65      	cmp	r4, #101	; 0x65
    2042:	db00      	blt.n	2046 <_prf+0x152>
    2044:	e0a2      	b.n	218c <_prf+0x298>
    2046:	2c47      	cmp	r4, #71	; 0x47
    2048:	d100      	bne.n	204c <_prf+0x158>
    204a:	e09f      	b.n	218c <_prf+0x298>
    204c:	dc10      	bgt.n	2070 <_prf+0x17c>
    204e:	2c25      	cmp	r4, #37	; 0x25
    2050:	d100      	bne.n	2054 <_prf+0x160>
    2052:	e294      	b.n	257e <_prf+0x68a>
    2054:	2c45      	cmp	r4, #69	; 0x45
    2056:	d100      	bne.n	205a <_prf+0x166>
    2058:	e098      	b.n	218c <_prf+0x298>
    205a:	2c00      	cmp	r4, #0
    205c:	d100      	bne.n	2060 <_prf+0x16c>
    205e:	e787      	b.n	1f70 <_prf+0x7c>
			if (c >= MAXFLD + 1)
    2060:	2cc8      	cmp	r4, #200	; 0xc8
    2062:	dc00      	bgt.n	2066 <_prf+0x172>
    2064:	e295      	b.n	2592 <_prf+0x69e>
    2066:	e780      	b.n	1f6a <_prf+0x76>
			precision = -1;	/* No precision specified   */
    2068:	2301      	movs	r3, #1
    206a:	425b      	negs	r3, r3
    206c:	9301      	str	r3, [sp, #4]
    206e:	e7db      	b.n	2028 <_prf+0x134>
			switch (c) {
    2070:	2c63      	cmp	r4, #99	; 0x63
    2072:	d05c      	beq.n	212e <_prf+0x23a>
    2074:	dc2d      	bgt.n	20d2 <_prf+0x1de>
    2076:	2c58      	cmp	r4, #88	; 0x58
    2078:	d1f2      	bne.n	2060 <_prf+0x16c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    207a:	1d2b      	adds	r3, r5, #4
    207c:	6829      	ldr	r1, [r5, #0]
    207e:	9305      	str	r3, [sp, #20]
    2080:	ad15      	add	r5, sp, #84	; 0x54
	if (alt_form) {
    2082:	2f00      	cmp	r7, #0
    2084:	d006      	beq.n	2094 <_prf+0x1a0>
		*buf++ = '0';
    2086:	2330      	movs	r3, #48	; 0x30
    2088:	702b      	strb	r3, [r5, #0]
		*buf++ = 'x';
    208a:	3348      	adds	r3, #72	; 0x48
    208c:	706b      	strb	r3, [r5, #1]
    208e:	251e      	movs	r5, #30
    2090:	ab0e      	add	r3, sp, #56	; 0x38
    2092:	18ed      	adds	r5, r5, r3
	len = _to_x(buf, value, 16, precision);
    2094:	9b01      	ldr	r3, [sp, #4]
    2096:	2210      	movs	r2, #16
    2098:	0028      	movs	r0, r5
    209a:	f7ff fe96 	bl	1dca <_to_x>
	if (prefix == 'X') {
    209e:	2c58      	cmp	r4, #88	; 0x58
    20a0:	d105      	bne.n	20ae <_prf+0x1ba>
    20a2:	2100      	movs	r1, #0
	for (/**/; *buf; buf++) {
    20a4:	aa15      	add	r2, sp, #84	; 0x54
    20a6:	5c8b      	ldrb	r3, [r1, r2]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d000      	beq.n	20ae <_prf+0x1ba>
    20ac:	e25f      	b.n	256e <_prf+0x67a>
					prefix = 2;
    20ae:	1e7a      	subs	r2, r7, #1
    20b0:	4197      	sbcs	r7, r2
	return len + (buf - buf0);
    20b2:	ab15      	add	r3, sp, #84	; 0x54
    20b4:	1aed      	subs	r5, r5, r3
    20b6:	1828      	adds	r0, r5, r0
					prefix = 2;
    20b8:	007c      	lsls	r4, r7, #1
    20ba:	e05b      	b.n	2174 <_prf+0x280>
			switch (c) {
    20bc:	2c70      	cmp	r4, #112	; 0x70
    20be:	d100      	bne.n	20c2 <_prf+0x1ce>
    20c0:	e227      	b.n	2512 <_prf+0x61e>
    20c2:	dc19      	bgt.n	20f8 <_prf+0x204>
    20c4:	2c6e      	cmp	r4, #110	; 0x6e
    20c6:	d100      	bne.n	20ca <_prf+0x1d6>
    20c8:	e1ea      	b.n	24a0 <_prf+0x5ac>
    20ca:	dd00      	ble.n	20ce <_prf+0x1da>
    20cc:	e1ef      	b.n	24ae <_prf+0x5ba>
    20ce:	2c69      	cmp	r4, #105	; 0x69
    20d0:	d1c6      	bne.n	2060 <_prf+0x16c>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    20d2:	682e      	ldr	r6, [r5, #0]
    20d4:	1d2b      	adds	r3, r5, #4
    20d6:	9305      	str	r3, [sp, #20]
    20d8:	ad15      	add	r5, sp, #84	; 0x54
	if (value < 0) {
    20da:	2e00      	cmp	r6, #0
    20dc:	da31      	bge.n	2142 <_prf+0x24e>
		*buf++ = '-';
    20de:	232d      	movs	r3, #45	; 0x2d
    20e0:	702b      	strb	r3, [r5, #0]
		if (value != 0x80000000)
    20e2:	2380      	movs	r3, #128	; 0x80
			value = -value;
    20e4:	4271      	negs	r1, r6
		if (value != 0x80000000)
    20e6:	061b      	lsls	r3, r3, #24
    20e8:	429e      	cmp	r6, r3
    20ea:	d100      	bne.n	20ee <_prf+0x1fa>
    20ec:	0031      	movs	r1, r6
		*buf++ = '-';
    20ee:	231d      	movs	r3, #29
    20f0:	aa0e      	add	r2, sp, #56	; 0x38
    20f2:	189b      	adds	r3, r3, r2
    20f4:	001d      	movs	r5, r3
    20f6:	e02d      	b.n	2154 <_prf+0x260>
			switch (c) {
    20f8:	2c75      	cmp	r4, #117	; 0x75
    20fa:	d100      	bne.n	20fe <_prf+0x20a>
    20fc:	e22e      	b.n	255c <_prf+0x668>
    20fe:	2c78      	cmp	r4, #120	; 0x78
    2100:	d0bb      	beq.n	207a <_prf+0x186>
    2102:	2c73      	cmp	r4, #115	; 0x73
    2104:	d1ac      	bne.n	2060 <_prf+0x16c>
				for (c = 0; c < MAXFLD; c++) {
    2106:	2700      	movs	r7, #0
				cptr_temp = (char *) va_arg(vargs, char *);
    2108:	1d2b      	adds	r3, r5, #4
    210a:	6829      	ldr	r1, [r5, #0]
    210c:	9305      	str	r3, [sp, #20]
					if (cptr_temp[c] == '\0') {
    210e:	5dcb      	ldrb	r3, [r1, r7]
    2110:	2b00      	cmp	r3, #0
    2112:	d000      	beq.n	2116 <_prf+0x222>
    2114:	e214      	b.n	2540 <_prf+0x64c>
				if ((precision >= 0) && (precision < c))
    2116:	9b01      	ldr	r3, [sp, #4]
    2118:	2b00      	cmp	r3, #0
    211a:	db00      	blt.n	211e <_prf+0x22a>
    211c:	e218      	b.n	2550 <_prf+0x65c>
				if (c > 0) {
    211e:	2f00      	cmp	r7, #0
    2120:	d100      	bne.n	2124 <_prf+0x230>
    2122:	e1c2      	b.n	24aa <_prf+0x5b6>
					memcpy(buf, cptr_temp, (size_t) c);
    2124:	003a      	movs	r2, r7
    2126:	a815      	add	r0, sp, #84	; 0x54
    2128:	f7ff fe00 	bl	1d2c <memcpy>
    212c:	e007      	b.n	213e <_prf+0x24a>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    212e:	1d2b      	adds	r3, r5, #4
    2130:	682a      	ldr	r2, [r5, #0]
    2132:	9305      	str	r3, [sp, #20]
    2134:	ab15      	add	r3, sp, #84	; 0x54
    2136:	701a      	strb	r2, [r3, #0]
				buf[1] = '\0';
    2138:	2200      	movs	r2, #0
				c = 1;
    213a:	2701      	movs	r7, #1
				buf[1] = '\0';
    213c:	705a      	strb	r2, [r3, #1]
					prefix = 2;
    213e:	2400      	movs	r4, #0
    2140:	e1c7      	b.n	24d2 <_prf+0x5de>
	} else if (fplus)
    2142:	9b08      	ldr	r3, [sp, #32]
    2144:	2b00      	cmp	r3, #0
    2146:	d01b      	beq.n	2180 <_prf+0x28c>
		*buf++ = '+';
    2148:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    214a:	702b      	strb	r3, [r5, #0]
    214c:	251d      	movs	r5, #29
    214e:	0031      	movs	r1, r6
    2150:	ab0e      	add	r3, sp, #56	; 0x38
    2152:	18ed      	adds	r5, r5, r3
	return _to_x(buf, value, 10, precision);
    2154:	9b01      	ldr	r3, [sp, #4]
    2156:	0028      	movs	r0, r5
    2158:	220a      	movs	r2, #10
    215a:	f7ff fe36 	bl	1dca <_to_x>
				if (fplus || fspace || (int32_temp < 0))
    215e:	9c08      	ldr	r4, [sp, #32]
    2160:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    2162:	182d      	adds	r5, r5, r0
    2164:	a815      	add	r0, sp, #84	; 0x54
    2166:	1a28      	subs	r0, r5, r0
				if (fplus || fspace || (int32_temp < 0))
    2168:	431c      	orrs	r4, r3
    216a:	2101      	movs	r1, #1
    216c:	2c00      	cmp	r4, #0
    216e:	d100      	bne.n	2172 <_prf+0x27e>
    2170:	0ff1      	lsrs	r1, r6, #31
    2172:	000c      	movs	r4, r1
				if (precision != -1)
    2174:	9b01      	ldr	r3, [sp, #4]
    2176:	3301      	adds	r3, #1
    2178:	d03a      	beq.n	21f0 <_prf+0x2fc>
					pad = ' ';
    217a:	2320      	movs	r3, #32
    217c:	9307      	str	r3, [sp, #28]
    217e:	e037      	b.n	21f0 <_prf+0x2fc>
	else if (fspace)
    2180:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2182:	0031      	movs	r1, r6
    2184:	2b00      	cmp	r3, #0
    2186:	d0e5      	beq.n	2154 <_prf+0x260>
		*buf++ = ' ';
    2188:	2320      	movs	r3, #32
    218a:	e7de      	b.n	214a <_prf+0x256>
				u.d = (double) va_arg(vargs, double);
    218c:	2307      	movs	r3, #7
    218e:	3507      	adds	r5, #7
    2190:	439d      	bics	r5, r3
    2192:	002b      	movs	r3, r5
				double_temp = u.i;
    2194:	6869      	ldr	r1, [r5, #4]
    2196:	682a      	ldr	r2, [r5, #0]
				u.d = (double) va_arg(vargs, double);
    2198:	3308      	adds	r3, #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    219a:	0d55      	lsrs	r5, r2, #21
				u.d = (double) va_arg(vargs, double);
    219c:	9305      	str	r3, [sp, #20]
	fract = (double_temp << 11) & ~HIGHBIT64;
    219e:	02cb      	lsls	r3, r1, #11
    21a0:	432b      	orrs	r3, r5
    21a2:	005b      	lsls	r3, r3, #1
	if (exp == 0x7ff) {
    21a4:	4d17      	ldr	r5, [pc, #92]	; (2204 <_prf+0x310>)
	exp = double_temp >> 52 & 0x7ff;
    21a6:	0048      	lsls	r0, r1, #1
	fract = (double_temp << 11) & ~HIGHBIT64;
    21a8:	02d2      	lsls	r2, r2, #11
    21aa:	085b      	lsrs	r3, r3, #1
	exp = double_temp >> 52 & 0x7ff;
    21ac:	0d40      	lsrs	r0, r0, #21
	fract = (double_temp << 11) & ~HIGHBIT64;
    21ae:	9210      	str	r2, [sp, #64]	; 0x40
    21b0:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp == 0x7ff) {
    21b2:	42a8      	cmp	r0, r5
    21b4:	d131      	bne.n	221a <_prf+0x326>
		if (!fract) {
    21b6:	4313      	orrs	r3, r2
    21b8:	aa15      	add	r2, sp, #84	; 0x54
    21ba:	2b00      	cmp	r3, #0
    21bc:	d124      	bne.n	2208 <_prf+0x314>
			*buf++ = sign ? '-' : '+';
    21be:	332d      	adds	r3, #45	; 0x2d
    21c0:	2900      	cmp	r1, #0
    21c2:	db00      	blt.n	21c6 <_prf+0x2d2>
    21c4:	3b02      	subs	r3, #2
    21c6:	7013      	strb	r3, [r2, #0]
			*buf++ = 'I';
    21c8:	2349      	movs	r3, #73	; 0x49
    21ca:	7053      	strb	r3, [r2, #1]
			*buf++ = 'N';
    21cc:	3305      	adds	r3, #5
    21ce:	7093      	strb	r3, [r2, #2]
			*buf++ = 'F';
    21d0:	3b08      	subs	r3, #8
    21d2:	70d3      	strb	r3, [r2, #3]
    21d4:	ad16      	add	r5, sp, #88	; 0x58
	*buf = 0;
    21d6:	2300      	movs	r3, #0
    21d8:	702b      	strb	r3, [r5, #0]
				if (fplus || fspace || (buf[0] == '-'))
    21da:	9c08      	ldr	r4, [sp, #32]
    21dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return buf - start;
    21de:	a815      	add	r0, sp, #84	; 0x54
    21e0:	1a28      	subs	r0, r5, r0
				if (fplus || fspace || (buf[0] == '-'))
    21e2:	431c      	orrs	r4, r3
    21e4:	d104      	bne.n	21f0 <_prf+0x2fc>
    21e6:	ab15      	add	r3, sp, #84	; 0x54
    21e8:	781c      	ldrb	r4, [r3, #0]
    21ea:	3c2d      	subs	r4, #45	; 0x2d
			prefix = 0;
    21ec:	4267      	negs	r7, r4
    21ee:	417c      	adcs	r4, r7
			if (c >= MAXFLD + 1)
    21f0:	28c8      	cmp	r0, #200	; 0xc8
    21f2:	dd00      	ble.n	21f6 <_prf+0x302>
    21f4:	e6b9      	b.n	1f6a <_prf+0x76>
    21f6:	0007      	movs	r7, r0
    21f8:	e16b      	b.n	24d2 <_prf+0x5de>
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	0000d420 	.word	0x0000d420
    2200:	0000d426 	.word	0x0000d426
    2204:	000007ff 	.word	0x000007ff
			*buf++ = 'N';
    2208:	234e      	movs	r3, #78	; 0x4e
			*buf++ = 'a';
    220a:	2161      	movs	r1, #97	; 0x61
			*buf++ = 'N';
    220c:	251f      	movs	r5, #31
			*buf++ = 'N';
    220e:	7013      	strb	r3, [r2, #0]
			*buf++ = 'N';
    2210:	7093      	strb	r3, [r2, #2]
    2212:	ab0e      	add	r3, sp, #56	; 0x38
			*buf++ = 'a';
    2214:	7051      	strb	r1, [r2, #1]
			*buf++ = 'N';
    2216:	18ed      	adds	r5, r5, r3
    2218:	e7dd      	b.n	21d6 <_prf+0x2e2>
	if ((exp | fract) != 0) {
    221a:	0005      	movs	r5, r0
    221c:	4315      	orrs	r5, r2
    221e:	431d      	orrs	r5, r3
    2220:	d039      	beq.n	2296 <_prf+0x3a2>
		fract |= HIGHBIT64;
    2222:	9210      	str	r2, [sp, #64]	; 0x40
    2224:	2280      	movs	r2, #128	; 0x80
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2226:	4dc3      	ldr	r5, [pc, #780]	; (2534 <_prf+0x640>)
		fract |= HIGHBIT64;
    2228:	0612      	lsls	r2, r2, #24
    222a:	4313      	orrs	r3, r2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    222c:	1945      	adds	r5, r0, r5
		fract |= HIGHBIT64;
    222e:	9311      	str	r3, [sp, #68]	; 0x44
	if (decexp && sign) {
    2230:	2900      	cmp	r1, #0
    2232:	da30      	bge.n	2296 <_prf+0x3a2>
		*buf++ = '-';
    2234:	222d      	movs	r2, #45	; 0x2d
    2236:	ab15      	add	r3, sp, #84	; 0x54
		*buf++ = ' ';
    2238:	261d      	movs	r6, #29
    223a:	701a      	strb	r2, [r3, #0]
    223c:	ab0e      	add	r3, sp, #56	; 0x38
    223e:	18f6      	adds	r6, r6, r3
	decexp = 0;
    2240:	2300      	movs	r3, #0
    2242:	9302      	str	r3, [sp, #8]
	while (exp <= -3) {
    2244:	1cab      	adds	r3, r5, #2
    2246:	db36      	blt.n	22b6 <_prf+0x3c2>
	while (exp > 0) {
    2248:	2d00      	cmp	r5, #0
    224a:	dc51      	bgt.n	22f0 <_prf+0x3fc>
		_rlrshift(&fract);
    224c:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    224e:	3501      	adds	r5, #1
		_rlrshift(&fract);
    2250:	f7ff fded 	bl	1e2e <_rlrshift>
	while (exp < (0 + 4)) {
    2254:	2d04      	cmp	r5, #4
    2256:	d1f9      	bne.n	224c <_prf+0x358>
	if (precision < 0)
    2258:	9b01      	ldr	r3, [sp, #4]
    225a:	2b00      	cmp	r3, #0
    225c:	da01      	bge.n	2262 <_prf+0x36e>
		precision = 6;		/* Default precision if none given */
    225e:	2306      	movs	r3, #6
    2260:	9301      	str	r3, [sp, #4]
	if ((c == 'g') || (c == 'G')) {
    2262:	0023      	movs	r3, r4
    2264:	2220      	movs	r2, #32
    2266:	4393      	bics	r3, r2
    2268:	2b47      	cmp	r3, #71	; 0x47
    226a:	d158      	bne.n	231e <_prf+0x42a>
		if (!falt && (precision > 0))
    226c:	2300      	movs	r3, #0
    226e:	429f      	cmp	r7, r3
    2270:	d103      	bne.n	227a <_prf+0x386>
    2272:	9b01      	ldr	r3, [sp, #4]
    2274:	1e5a      	subs	r2, r3, #1
    2276:	4193      	sbcs	r3, r2
    2278:	b2db      	uxtb	r3, r3
    227a:	930b      	str	r3, [sp, #44]	; 0x2c
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    227c:	9b02      	ldr	r3, [sp, #8]
    227e:	3303      	adds	r3, #3
    2280:	db04      	blt.n	228c <_prf+0x398>
    2282:	9b01      	ldr	r3, [sp, #4]
    2284:	9a02      	ldr	r2, [sp, #8]
    2286:	3301      	adds	r3, #1
    2288:	429a      	cmp	r2, r3
    228a:	dd4c      	ble.n	2326 <_prf+0x432>
			if (c == 'g')
    228c:	2c67      	cmp	r4, #103	; 0x67
    228e:	d000      	beq.n	2292 <_prf+0x39e>
    2290:	e092      	b.n	23b8 <_prf+0x4c4>
				c = 'e';
    2292:	2465      	movs	r4, #101	; 0x65
    2294:	e091      	b.n	23ba <_prf+0x4c6>
	} else if (fplus) {
    2296:	9a08      	ldr	r2, [sp, #32]
    2298:	ab15      	add	r3, sp, #84	; 0x54
    229a:	2a00      	cmp	r2, #0
    229c:	d001      	beq.n	22a2 <_prf+0x3ae>
		*buf++ = '+';
    229e:	222b      	movs	r2, #43	; 0x2b
    22a0:	e7ca      	b.n	2238 <_prf+0x344>
	} else if (fspace) {
    22a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    22a4:	001e      	movs	r6, r3
    22a6:	2a00      	cmp	r2, #0
    22a8:	d0ca      	beq.n	2240 <_prf+0x34c>
		*buf++ = ' ';
    22aa:	2220      	movs	r2, #32
    22ac:	e7c4      	b.n	2238 <_prf+0x344>
			_rlrshift(&fract);
    22ae:	a810      	add	r0, sp, #64	; 0x40
    22b0:	f7ff fdbd 	bl	1e2e <_rlrshift>
			exp++;
    22b4:	3501      	adds	r5, #1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    22b6:	9911      	ldr	r1, [sp, #68]	; 0x44
    22b8:	4b9f      	ldr	r3, [pc, #636]	; (2538 <_prf+0x644>)
    22ba:	9810      	ldr	r0, [sp, #64]	; 0x40
    22bc:	4299      	cmp	r1, r3
    22be:	d8f6      	bhi.n	22ae <_prf+0x3ba>
		fract *= 5;
    22c0:	2205      	movs	r2, #5
    22c2:	2300      	movs	r3, #0
    22c4:	f7fe f868 	bl	398 <__aeabi_lmul>
		decexp--;
    22c8:	9b02      	ldr	r3, [sp, #8]
		fract *= 5;
    22ca:	9010      	str	r0, [sp, #64]	; 0x40
    22cc:	9111      	str	r1, [sp, #68]	; 0x44
		decexp--;
    22ce:	3b01      	subs	r3, #1
    22d0:	9302      	str	r3, [sp, #8]
    22d2:	2300      	movs	r3, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    22d4:	4a99      	ldr	r2, [pc, #612]	; (253c <_prf+0x648>)
		exp++;
    22d6:	3501      	adds	r5, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    22d8:	428a      	cmp	r2, r1
    22da:	d204      	bcs.n	22e6 <_prf+0x3f2>
    22dc:	2b00      	cmp	r3, #0
    22de:	d0b1      	beq.n	2244 <_prf+0x350>
    22e0:	9010      	str	r0, [sp, #64]	; 0x40
    22e2:	9111      	str	r1, [sp, #68]	; 0x44
    22e4:	e7ae      	b.n	2244 <_prf+0x350>
			fract <<= 1;
    22e6:	1800      	adds	r0, r0, r0
    22e8:	4149      	adcs	r1, r1
			exp--;
    22ea:	3d01      	subs	r5, #1
    22ec:	2301      	movs	r3, #1
    22ee:	e7f3      	b.n	22d8 <_prf+0x3e4>
		_ldiv5(&fract);
    22f0:	a810      	add	r0, sp, #64	; 0x40
    22f2:	f7ff fdad 	bl	1e50 <_ldiv5>
		decexp++;
    22f6:	2100      	movs	r1, #0
    22f8:	9b02      	ldr	r3, [sp, #8]
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    22fa:	4890      	ldr	r0, [pc, #576]	; (253c <_prf+0x648>)
		decexp++;
    22fc:	3301      	adds	r3, #1
		exp--;
    22fe:	3d01      	subs	r5, #1
		decexp++;
    2300:	9302      	str	r3, [sp, #8]
    2302:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2304:	9b11      	ldr	r3, [sp, #68]	; 0x44
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2306:	4298      	cmp	r0, r3
    2308:	d204      	bcs.n	2314 <_prf+0x420>
    230a:	2900      	cmp	r1, #0
    230c:	d09c      	beq.n	2248 <_prf+0x354>
    230e:	9210      	str	r2, [sp, #64]	; 0x40
    2310:	9311      	str	r3, [sp, #68]	; 0x44
    2312:	e799      	b.n	2248 <_prf+0x354>
			fract <<= 1;
    2314:	1892      	adds	r2, r2, r2
    2316:	415b      	adcs	r3, r3
			exp--;
    2318:	3d01      	subs	r5, #1
    231a:	2101      	movs	r1, #1
    231c:	e7f3      	b.n	2306 <_prf+0x412>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    231e:	2300      	movs	r3, #0
    2320:	930b      	str	r3, [sp, #44]	; 0x2c
	if (c == 'f') {
    2322:	2c66      	cmp	r4, #102	; 0x66
    2324:	d149      	bne.n	23ba <_prf+0x4c6>
		exp = precision + decexp;
    2326:	9b02      	ldr	r3, [sp, #8]
    2328:	9a01      	ldr	r2, [sp, #4]
    232a:	2466      	movs	r4, #102	; 0x66
    232c:	189d      	adds	r5, r3, r2
    232e:	43eb      	mvns	r3, r5
    2330:	17db      	asrs	r3, r3, #31
    2332:	401d      	ands	r5, r3
	ltemp = 0x0800000000000000;
    2334:	2380      	movs	r3, #128	; 0x80
	digit_count = 16;
    2336:	2110      	movs	r1, #16
	ltemp = 0x0800000000000000;
    2338:	2200      	movs	r2, #0
    233a:	051b      	lsls	r3, r3, #20
	digit_count = 16;
    233c:	910f      	str	r1, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
    233e:	9212      	str	r2, [sp, #72]	; 0x48
    2340:	9313      	str	r3, [sp, #76]	; 0x4c
    2342:	428d      	cmp	r5, r1
    2344:	dd00      	ble.n	2348 <_prf+0x454>
    2346:	000d      	movs	r5, r1
	while (exp--) {
    2348:	2d00      	cmp	r5, #0
    234a:	d139      	bne.n	23c0 <_prf+0x4cc>
	fract += ltemp;
    234c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    234e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2350:	9812      	ldr	r0, [sp, #72]	; 0x48
    2352:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2354:	1812      	adds	r2, r2, r0
    2356:	414b      	adcs	r3, r1
    2358:	9210      	str	r2, [sp, #64]	; 0x40
    235a:	9311      	str	r3, [sp, #68]	; 0x44
	if ((fract >> 32) & 0xF0000000) {
    235c:	0f1b      	lsrs	r3, r3, #28
    235e:	d008      	beq.n	2372 <_prf+0x47e>
		_ldiv5(&fract);
    2360:	a810      	add	r0, sp, #64	; 0x40
    2362:	f7ff fd75 	bl	1e50 <_ldiv5>
		_rlrshift(&fract);
    2366:	a810      	add	r0, sp, #64	; 0x40
    2368:	f7ff fd61 	bl	1e2e <_rlrshift>
		decexp++;
    236c:	9b02      	ldr	r3, [sp, #8]
    236e:	3301      	adds	r3, #1
    2370:	9302      	str	r3, [sp, #8]
	if (c == 'f') {
    2372:	2c66      	cmp	r4, #102	; 0x66
    2374:	d140      	bne.n	23f8 <_prf+0x504>
		if (decexp > 0) {
    2376:	9b02      	ldr	r3, [sp, #8]
    2378:	2b00      	cmp	r3, #0
    237a:	dd29      	ble.n	23d0 <_prf+0x4dc>
    237c:	18f5      	adds	r5, r6, r3
				*buf++ = _get_digit(&fract, &digit_count);
    237e:	a90f      	add	r1, sp, #60	; 0x3c
    2380:	a810      	add	r0, sp, #64	; 0x40
    2382:	f7ff fda1 	bl	1ec8 <_get_digit>
    2386:	7030      	strb	r0, [r6, #0]
    2388:	3601      	adds	r6, #1
			while (decexp > 0) {
    238a:	42b5      	cmp	r5, r6
    238c:	d1f7      	bne.n	237e <_prf+0x48a>
    238e:	2300      	movs	r3, #0
    2390:	9302      	str	r3, [sp, #8]
		if (falt || (precision > 0))
    2392:	2f00      	cmp	r7, #0
    2394:	d102      	bne.n	239c <_prf+0x4a8>
    2396:	9b01      	ldr	r3, [sp, #4]
    2398:	2b00      	cmp	r3, #0
    239a:	d009      	beq.n	23b0 <_prf+0x4bc>
			*buf++ = '.';
    239c:	232e      	movs	r3, #46	; 0x2e
    239e:	002e      	movs	r6, r5
    23a0:	702b      	strb	r3, [r5, #0]
    23a2:	9b01      	ldr	r3, [sp, #4]
    23a4:	18ef      	adds	r7, r5, r3
		while (precision-- > 0) {
    23a6:	42be      	cmp	r6, r7
    23a8:	d116      	bne.n	23d8 <_prf+0x4e4>
    23aa:	9b01      	ldr	r3, [sp, #4]
    23ac:	3301      	adds	r3, #1
    23ae:	18ed      	adds	r5, r5, r3
	if (prune_zero) {
    23b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23b2:	2b00      	cmp	r3, #0
    23b4:	d13b      	bne.n	242e <_prf+0x53a>
    23b6:	e70e      	b.n	21d6 <_prf+0x2e2>
				c = 'E';
    23b8:	2445      	movs	r4, #69	; 0x45
		exp = precision + 1;
    23ba:	9b01      	ldr	r3, [sp, #4]
    23bc:	1c5d      	adds	r5, r3, #1
    23be:	e7b9      	b.n	2334 <_prf+0x440>
		_ldiv5(&ltemp);
    23c0:	a812      	add	r0, sp, #72	; 0x48
    23c2:	f7ff fd45 	bl	1e50 <_ldiv5>
		_rlrshift(&ltemp);
    23c6:	a812      	add	r0, sp, #72	; 0x48
    23c8:	f7ff fd31 	bl	1e2e <_rlrshift>
    23cc:	3d01      	subs	r5, #1
    23ce:	e7bb      	b.n	2348 <_prf+0x454>
			*buf++ = '0';
    23d0:	2330      	movs	r3, #48	; 0x30
    23d2:	1c75      	adds	r5, r6, #1
    23d4:	7033      	strb	r3, [r6, #0]
    23d6:	e7dc      	b.n	2392 <_prf+0x49e>
			if (decexp < 0) {
    23d8:	9b02      	ldr	r3, [sp, #8]
    23da:	2b00      	cmp	r3, #0
    23dc:	d006      	beq.n	23ec <_prf+0x4f8>
				*buf++ = '0';
    23de:	2330      	movs	r3, #48	; 0x30
    23e0:	7073      	strb	r3, [r6, #1]
				decexp++;
    23e2:	9b02      	ldr	r3, [sp, #8]
    23e4:	3301      	adds	r3, #1
    23e6:	9302      	str	r3, [sp, #8]
    23e8:	3601      	adds	r6, #1
    23ea:	e7dc      	b.n	23a6 <_prf+0x4b2>
				*buf++ = _get_digit(&fract, &digit_count);
    23ec:	a90f      	add	r1, sp, #60	; 0x3c
    23ee:	a810      	add	r0, sp, #64	; 0x40
    23f0:	f7ff fd6a 	bl	1ec8 <_get_digit>
    23f4:	7070      	strb	r0, [r6, #1]
    23f6:	e7f7      	b.n	23e8 <_prf+0x4f4>
		*buf = _get_digit(&fract, &digit_count);
    23f8:	a90f      	add	r1, sp, #60	; 0x3c
    23fa:	a810      	add	r0, sp, #64	; 0x40
    23fc:	f7ff fd64 	bl	1ec8 <_get_digit>
    2400:	7030      	strb	r0, [r6, #0]
			decexp--;
    2402:	3830      	subs	r0, #48	; 0x30
    2404:	1e43      	subs	r3, r0, #1
    2406:	4198      	sbcs	r0, r3
    2408:	9b02      	ldr	r3, [sp, #8]
    240a:	1a1b      	subs	r3, r3, r0
    240c:	9302      	str	r3, [sp, #8]
		if (falt || (precision > 0))
    240e:	2f00      	cmp	r7, #0
    2410:	d103      	bne.n	241a <_prf+0x526>
    2412:	9b01      	ldr	r3, [sp, #4]
		if (*buf++ != '0')
    2414:	1c75      	adds	r5, r6, #1
		if (falt || (precision > 0))
    2416:	2b00      	cmp	r3, #0
    2418:	d006      	beq.n	2428 <_prf+0x534>
			*buf++ = '.';
    241a:	232e      	movs	r3, #46	; 0x2e
    241c:	7073      	strb	r3, [r6, #1]
    241e:	9b01      	ldr	r3, [sp, #4]
    2420:	3602      	adds	r6, #2
    2422:	18f5      	adds	r5, r6, r3
		while (precision-- > 0)
    2424:	42b5      	cmp	r5, r6
    2426:	d132      	bne.n	248e <_prf+0x59a>
	if (prune_zero) {
    2428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    242a:	2b00      	cmp	r3, #0
    242c:	d007      	beq.n	243e <_prf+0x54a>
		while (*--buf == '0')
    242e:	002b      	movs	r3, r5
    2430:	3d01      	subs	r5, #1
    2432:	782a      	ldrb	r2, [r5, #0]
    2434:	2a30      	cmp	r2, #48	; 0x30
    2436:	d0fa      	beq.n	242e <_prf+0x53a>
		if (*buf != '.')
    2438:	2a2e      	cmp	r2, #46	; 0x2e
    243a:	d000      	beq.n	243e <_prf+0x54a>
    243c:	001d      	movs	r5, r3
	if ((c == 'e') || (c == 'E')) {
    243e:	0023      	movs	r3, r4
    2440:	2220      	movs	r2, #32
    2442:	4393      	bics	r3, r2
    2444:	2b45      	cmp	r3, #69	; 0x45
    2446:	d000      	beq.n	244a <_prf+0x556>
    2448:	e6c5      	b.n	21d6 <_prf+0x2e2>
		if (decexp < 0) {
    244a:	9b02      	ldr	r3, [sp, #8]
		*buf++ = (char) c;
    244c:	702c      	strb	r4, [r5, #0]
    244e:	1cac      	adds	r4, r5, #2
		if (decexp < 0) {
    2450:	2b00      	cmp	r3, #0
    2452:	da23      	bge.n	249c <_prf+0x5a8>
			decexp = -decexp;
    2454:	425b      	negs	r3, r3
    2456:	9302      	str	r3, [sp, #8]
			*buf++ = '-';
    2458:	232d      	movs	r3, #45	; 0x2d
			*buf++ = '+';
    245a:	706b      	strb	r3, [r5, #1]
		*buf++ = (char) ((decexp / 100) + '0');
    245c:	2164      	movs	r1, #100	; 0x64
    245e:	9802      	ldr	r0, [sp, #8]
    2460:	f7fd ff00 	bl	264 <__aeabi_idiv>
    2464:	3030      	adds	r0, #48	; 0x30
    2466:	7020      	strb	r0, [r4, #0]
		decexp %= 100;
    2468:	2164      	movs	r1, #100	; 0x64
    246a:	9802      	ldr	r0, [sp, #8]
    246c:	f7fd ff50 	bl	310 <__aeabi_idivmod>
    2470:	000e      	movs	r6, r1
		*buf++ = (char) ((decexp / 10) + '0');
    2472:	210a      	movs	r1, #10
    2474:	0030      	movs	r0, r6
    2476:	f7fd fef5 	bl	264 <__aeabi_idiv>
    247a:	3030      	adds	r0, #48	; 0x30
    247c:	7060      	strb	r0, [r4, #1]
		decexp %= 10;
    247e:	210a      	movs	r1, #10
    2480:	0030      	movs	r0, r6
    2482:	f7fd ff45 	bl	310 <__aeabi_idivmod>
		*buf++ = (char) (decexp + '0');
    2486:	3130      	adds	r1, #48	; 0x30
    2488:	1ce5      	adds	r5, r4, #3
    248a:	70a1      	strb	r1, [r4, #2]
    248c:	e6a3      	b.n	21d6 <_prf+0x2e2>
			*buf++ = _get_digit(&fract, &digit_count);
    248e:	a90f      	add	r1, sp, #60	; 0x3c
    2490:	a810      	add	r0, sp, #64	; 0x40
    2492:	f7ff fd19 	bl	1ec8 <_get_digit>
    2496:	7030      	strb	r0, [r6, #0]
    2498:	3601      	adds	r6, #1
    249a:	e7c3      	b.n	2424 <_prf+0x530>
			*buf++ = '+';
    249c:	232b      	movs	r3, #43	; 0x2b
    249e:	e7dc      	b.n	245a <_prf+0x566>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    24a0:	1d2b      	adds	r3, r5, #4
    24a2:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
    24a4:	9a06      	ldr	r2, [sp, #24]
    24a6:	682b      	ldr	r3, [r5, #0]
    24a8:	601a      	str	r2, [r3, #0]
							prefix = 0;
    24aa:	9c06      	ldr	r4, [sp, #24]
    24ac:	e566      	b.n	1f7c <_prf+0x88>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    24ae:	1d2b      	adds	r3, r5, #4
    24b0:	9305      	str	r3, [sp, #20]
    24b2:	6829      	ldr	r1, [r5, #0]
    24b4:	ab15      	add	r3, sp, #84	; 0x54
	if (alt_form) {
    24b6:	2f00      	cmp	r7, #0
    24b8:	d021      	beq.n	24fe <_prf+0x60a>
		*buf++ = '0';
    24ba:	2230      	movs	r2, #48	; 0x30
    24bc:	201d      	movs	r0, #29
    24be:	701a      	strb	r2, [r3, #0]
    24c0:	aa0e      	add	r2, sp, #56	; 0x38
    24c2:	1880      	adds	r0, r0, r2
		if (!value) {
    24c4:	2900      	cmp	r1, #0
    24c6:	d11b      	bne.n	2500 <_prf+0x60c>
			*buf++ = 0;
    24c8:	7059      	strb	r1, [r3, #1]
				if (precision != -1)
    24ca:	9b01      	ldr	r3, [sp, #4]
			prefix = 0;
    24cc:	000c      	movs	r4, r1
				if (precision != -1)
    24ce:	3301      	adds	r3, #1
    24d0:	d161      	bne.n	2596 <_prf+0x6a2>
				if (c < width) {
    24d2:	9b04      	ldr	r3, [sp, #16]
    24d4:	42bb      	cmp	r3, r7
    24d6:	dc61      	bgt.n	259c <_prf+0x6a8>
							prefix = 0;
    24d8:	9c06      	ldr	r4, [sp, #24]
    24da:	9b06      	ldr	r3, [sp, #24]
    24dc:	18fb      	adds	r3, r7, r3
    24de:	1b1b      	subs	r3, r3, r4
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    24e0:	2b00      	cmp	r3, #0
    24e2:	dc00      	bgt.n	24e6 <_prf+0x5f2>
    24e4:	e54a      	b.n	1f7c <_prf+0x88>
					if ((*func)(*cptr, dest) == EOF)
    24e6:	9a06      	ldr	r2, [sp, #24]
    24e8:	ab15      	add	r3, sp, #84	; 0x54
    24ea:	1a9b      	subs	r3, r3, r2
    24ec:	5d18      	ldrb	r0, [r3, r4]
    24ee:	990d      	ldr	r1, [sp, #52]	; 0x34
    24f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    24f2:	4798      	blx	r3
    24f4:	1c43      	adds	r3, r0, #1
    24f6:	d100      	bne.n	24fa <_prf+0x606>
    24f8:	e537      	b.n	1f6a <_prf+0x76>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    24fa:	3401      	adds	r4, #1
    24fc:	e7ed      	b.n	24da <_prf+0x5e6>
	if (alt_form) {
    24fe:	0018      	movs	r0, r3
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    2500:	ad15      	add	r5, sp, #84	; 0x54
    2502:	9b01      	ldr	r3, [sp, #4]
    2504:	2208      	movs	r2, #8
    2506:	1b45      	subs	r5, r0, r5
    2508:	f7ff fc5f 	bl	1dca <_to_x>
    250c:	1828      	adds	r0, r5, r0
			prefix = 0;
    250e:	2400      	movs	r4, #0
    2510:	e630      	b.n	2174 <_prf+0x280>
		*buf++ = '0';
    2512:	2230      	movs	r2, #48	; 0x30
	len = _to_x(buf, value, 16, precision);
    2514:	201e      	movs	r0, #30
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2516:	1d2b      	adds	r3, r5, #4
    2518:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
    251a:	ab15      	add	r3, sp, #84	; 0x54
    251c:	701a      	strb	r2, [r3, #0]
	len = _to_x(buf, value, 16, precision);
    251e:	ac0e      	add	r4, sp, #56	; 0x38
		*buf++ = 'x';
    2520:	3248      	adds	r2, #72	; 0x48
    2522:	705a      	strb	r2, [r3, #1]
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2524:	6829      	ldr	r1, [r5, #0]
	len = _to_x(buf, value, 16, precision);
    2526:	2308      	movs	r3, #8
    2528:	3a68      	subs	r2, #104	; 0x68
    252a:	1900      	adds	r0, r0, r4
    252c:	f7ff fc4d 	bl	1dca <_to_x>
	return len + (buf - buf0);
    2530:	3002      	adds	r0, #2
    2532:	e7ec      	b.n	250e <_prf+0x61a>
    2534:	fffffc02 	.word	0xfffffc02
    2538:	33333332 	.word	0x33333332
    253c:	7fffffff 	.word	0x7fffffff
				for (c = 0; c < MAXFLD; c++) {
    2540:	3701      	adds	r7, #1
    2542:	2fc8      	cmp	r7, #200	; 0xc8
    2544:	d000      	beq.n	2548 <_prf+0x654>
    2546:	e5e2      	b.n	210e <_prf+0x21a>
				if ((precision >= 0) && (precision < c))
    2548:	9b01      	ldr	r3, [sp, #4]
    254a:	2b00      	cmp	r3, #0
    254c:	da00      	bge.n	2550 <_prf+0x65c>
    254e:	e5e9      	b.n	2124 <_prf+0x230>
    2550:	9b01      	ldr	r3, [sp, #4]
    2552:	429f      	cmp	r7, r3
    2554:	dc00      	bgt.n	2558 <_prf+0x664>
    2556:	e5e2      	b.n	211e <_prf+0x22a>
    2558:	001f      	movs	r7, r3
    255a:	e5e0      	b.n	211e <_prf+0x22a>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    255c:	1d2b      	adds	r3, r5, #4
    255e:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
    2560:	220a      	movs	r2, #10
    2562:	9b01      	ldr	r3, [sp, #4]
    2564:	6829      	ldr	r1, [r5, #0]
    2566:	a815      	add	r0, sp, #84	; 0x54
    2568:	f7ff fc2f 	bl	1dca <_to_x>
    256c:	e7cf      	b.n	250e <_prf+0x61a>
		if (*buf >= 'a' && *buf <= 'z') {
    256e:	001c      	movs	r4, r3
    2570:	3c61      	subs	r4, #97	; 0x61
    2572:	2c19      	cmp	r4, #25
    2574:	d801      	bhi.n	257a <_prf+0x686>
			*buf += 'A' - 'a';
    2576:	3b20      	subs	r3, #32
    2578:	548b      	strb	r3, [r1, r2]
    257a:	3101      	adds	r1, #1
    257c:	e593      	b.n	20a6 <_prf+0x1b2>
				if ((*func)('%', dest) == EOF) {
    257e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2580:	990d      	ldr	r1, [sp, #52]	; 0x34
    2582:	0020      	movs	r0, r4
    2584:	4798      	blx	r3
    2586:	1c43      	adds	r3, r0, #1
    2588:	d100      	bne.n	258c <_prf+0x698>
    258a:	e4ee      	b.n	1f6a <_prf+0x76>
				count++;
    258c:	9b06      	ldr	r3, [sp, #24]
    258e:	3301      	adds	r3, #1
    2590:	9306      	str	r3, [sp, #24]
			if (c >= MAXFLD + 1)
    2592:	9505      	str	r5, [sp, #20]
    2594:	e789      	b.n	24aa <_prf+0x5b6>
					pad = ' ';
    2596:	2320      	movs	r3, #32
    2598:	9307      	str	r3, [sp, #28]
    259a:	e79a      	b.n	24d2 <_prf+0x5de>
					if (fminus)	{
    259c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    259e:	2b00      	cmp	r3, #0
    25a0:	d007      	beq.n	25b2 <_prf+0x6be>
							buf[i] = ' ';
    25a2:	ab15      	add	r3, sp, #84	; 0x54
    25a4:	2220      	movs	r2, #32
    25a6:	54fa      	strb	r2, [r7, r3]
						for (i = c; i < width; i++)
    25a8:	9a04      	ldr	r2, [sp, #16]
    25aa:	3701      	adds	r7, #1
    25ac:	42ba      	cmp	r2, r7
    25ae:	d1f9      	bne.n	25a4 <_prf+0x6b0>
    25b0:	e792      	b.n	24d8 <_prf+0x5e4>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    25b2:	9b04      	ldr	r3, [sp, #16]
										+ 1));
    25b4:	1c7a      	adds	r2, r7, #1
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    25b6:	1bdd      	subs	r5, r3, r7
    25b8:	ab15      	add	r3, sp, #84	; 0x54
    25ba:	1958      	adds	r0, r3, r5
    25bc:	0019      	movs	r1, r3
    25be:	f7ff fba4 	bl	1d0a <memmove>
						if (pad == ' ')
    25c2:	9b07      	ldr	r3, [sp, #28]
    25c4:	2b20      	cmp	r3, #32
    25c6:	d100      	bne.n	25ca <_prf+0x6d6>
							prefix = 0;
    25c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						c = width - c + prefix;
    25ca:	1965      	adds	r5, r4, r5
							buf[i] = pad;
    25cc:	ab15      	add	r3, sp, #84	; 0x54
						for (i = prefix; i < c; i++)
    25ce:	42ac      	cmp	r4, r5
    25d0:	db01      	blt.n	25d6 <_prf+0x6e2>
    25d2:	9f04      	ldr	r7, [sp, #16]
    25d4:	e780      	b.n	24d8 <_prf+0x5e4>
							buf[i] = pad;
    25d6:	466a      	mov	r2, sp
    25d8:	7f12      	ldrb	r2, [r2, #28]
    25da:	54e2      	strb	r2, [r4, r3]
						for (i = prefix; i < c; i++)
    25dc:	3401      	adds	r4, #1
    25de:	e7f6      	b.n	25ce <_prf+0x6da>

000025e0 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    25e0:	2001      	movs	r0, #1
    25e2:	4240      	negs	r0, r0
    25e4:	4770      	bx	lr
	...

000025e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    25e8:	4b01      	ldr	r3, [pc, #4]	; (25f0 <__stdout_hook_install+0x8>)
    25ea:	6018      	str	r0, [r3, #0]
}
    25ec:	4770      	bx	lr
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	20002198 	.word	0x20002198

000025f4 <fputc>:

int fputc(int c, FILE *stream)
{
    25f4:	b510      	push	{r4, lr}
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    25f6:	2902      	cmp	r1, #2
    25f8:	d103      	bne.n	2602 <fputc+0xe>
    25fa:	4b03      	ldr	r3, [pc, #12]	; (2608 <fputc+0x14>)
    25fc:	681b      	ldr	r3, [r3, #0]
    25fe:	4798      	blx	r3
}
    2600:	bd10      	pop	{r4, pc}
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    2602:	2001      	movs	r0, #1
    2604:	4240      	negs	r0, r0
    2606:	e7fb      	b.n	2600 <fputc+0xc>
    2608:	20002198 	.word	0x20002198

0000260c <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    260c:	b40f      	push	{r0, r1, r2, r3}
    260e:	b507      	push	{r0, r1, r2, lr}
    2610:	ab04      	add	r3, sp, #16
    2612:	cb04      	ldmia	r3!, {r2}
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
    2614:	2102      	movs	r1, #2
    2616:	4804      	ldr	r0, [pc, #16]	; (2628 <printf+0x1c>)
	va_start(vargs, format);
    2618:	9301      	str	r3, [sp, #4]
	r = _prf(fputc, DESC(stdout), format, vargs);
    261a:	f7ff fc6b 	bl	1ef4 <_prf>
	va_end(vargs);

	return r;
}
    261e:	b003      	add	sp, #12
    2620:	bc08      	pop	{r3}
    2622:	b004      	add	sp, #16
    2624:	4718      	bx	r3
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	000025f5 	.word	0x000025f5

0000262c <s1_display>:

static struct device *temp_dev;
static struct sensor_value temp_value;
static uint8_t current_temperature;

void s1_display() { /* Show some scrolling text ("ECOM042.2017.2") */
    262c:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    262e:	f000 ffa5 	bl	357c <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_DEFAULT | MB_DISPLAY_FLAG_LOOP, 
    2632:	22fa      	movs	r2, #250	; 0xfa
    2634:	2180      	movs	r1, #128	; 0x80
    2636:	4b03      	ldr	r3, [pc, #12]	; (2644 <s1_display+0x18>)
    2638:	0052      	lsls	r2, r2, #1
    263a:	0249      	lsls	r1, r1, #9
    263c:	f000 ff4e 	bl	34dc <mb_display_print>
		K_MSEC(500), "ECOM042.2017.2");
}
    2640:	bd10      	pop	{r4, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	0000d4f8 	.word	0x0000d4f8

00002648 <s2_accelerometer>:

void s2_accelerometer() {
    2648:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    264a:	f000 ff97 	bl	357c <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
    264e:	22fa      	movs	r2, #250	; 0xfa
    2650:	4b02      	ldr	r3, [pc, #8]	; (265c <s2_accelerometer+0x14>)
    2652:	0092      	lsls	r2, r2, #2
    2654:	2101      	movs	r1, #1
    2656:	f000 ff41 	bl	34dc <mb_display_print>
		K_SECONDS(1), "2");
}
    265a:	bd10      	pop	{r4, pc}
    265c:	0000d505 	.word	0x0000d505

00002660 <s3_compass>:

void s3_compass() {
    2660:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    2662:	f000 ff8b 	bl	357c <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
    2666:	22fa      	movs	r2, #250	; 0xfa
    2668:	4b02      	ldr	r3, [pc, #8]	; (2674 <s3_compass+0x14>)
    266a:	0092      	lsls	r2, r2, #2
    266c:	2101      	movs	r1, #1
    266e:	f000 ff35 	bl	34dc <mb_display_print>
		K_SECONDS(1), "3");
}
    2672:	bd10      	pop	{r4, pc}
    2674:	0000d507 	.word	0x0000d507

00002678 <s5_bluetooth>:

	printk("State 4\n");
	printf("Temperature is %dC\n", current_temperature);
}

void s5_bluetooth() {
    2678:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
    267a:	f000 ff7f 	bl	357c <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
    267e:	22fa      	movs	r2, #250	; 0xfa
    2680:	4b02      	ldr	r3, [pc, #8]	; (268c <s5_bluetooth+0x14>)
    2682:	0092      	lsls	r2, r2, #2
    2684:	2101      	movs	r1, #1
    2686:	f000 ff29 	bl	34dc <mb_display_print>
		K_SECONDS(1), "5");
}
    268a:	bd10      	pop	{r4, pc}
    268c:	0000d526 	.word	0x0000d526

00002690 <button_pressed>:

static struct device *pwm;
static struct device *gpio;

static void button_pressed(struct device *dev, struct gpio_callback *cb, u32_t pins)
{
    2690:	b510      	push	{r4, lr}
    2692:	4c0d      	ldr	r4, [pc, #52]	; (26c8 <button_pressed+0x38>)
	if (pins & BIT(SW0_GPIO_PIN)) {
    2694:	0393      	lsls	r3, r2, #14
    2696:	d511      	bpl.n	26bc <button_pressed+0x2c>
		printk("A pressed\n");
    2698:	480c      	ldr	r0, [pc, #48]	; (26cc <button_pressed+0x3c>)
    269a:	f000 fce5 	bl	3068 <printk>
		current_event = BACKWARD;
    269e:	2302      	movs	r3, #2
	} else {
		printk("B pressed\n");
		current_event = FORWARD;
	}

	current_state = machine[current_state].events[current_event];
    26a0:	490b      	ldr	r1, [pc, #44]	; (26d0 <button_pressed+0x40>)
		current_event = FORWARD;
    26a2:	7023      	strb	r3, [r4, #0]
	current_state = machine[current_state].events[current_event];
    26a4:	780b      	ldrb	r3, [r1, #0]
    26a6:	4a0b      	ldr	r2, [pc, #44]	; (26d4 <button_pressed+0x44>)
    26a8:	7820      	ldrb	r0, [r4, #0]
    26aa:	00db      	lsls	r3, r3, #3
    26ac:	18d3      	adds	r3, r2, r3
    26ae:	5c1b      	ldrb	r3, [r3, r0]
    26b0:	700b      	strb	r3, [r1, #0]
	machine[current_state].action();
    26b2:	00db      	lsls	r3, r3, #3
    26b4:	18d2      	adds	r2, r2, r3
    26b6:	6853      	ldr	r3, [r2, #4]
    26b8:	4798      	blx	r3
}
    26ba:	bd10      	pop	{r4, pc}
		printk("B pressed\n");
    26bc:	4806      	ldr	r0, [pc, #24]	; (26d8 <button_pressed+0x48>)
    26be:	f000 fcd3 	bl	3068 <printk>
		current_event = FORWARD;
    26c2:	2301      	movs	r3, #1
    26c4:	e7ec      	b.n	26a0 <button_pressed+0x10>
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	2000000c 	.word	0x2000000c
    26cc:	0000d42e 	.word	0x0000d42e
    26d0:	2000000d 	.word	0x2000000d
    26d4:	2000219c 	.word	0x2000219c
    26d8:	0000d439 	.word	0x0000d439

000026dc <s4_temperature>:
void s4_temperature() {
    26dc:	b510      	push	{r4, lr}
	printk("State 4\n");
    26de:	4804      	ldr	r0, [pc, #16]	; (26f0 <s4_temperature+0x14>)
    26e0:	f000 fcc2 	bl	3068 <printk>
	printf("Temperature is %dC\n", current_temperature);
    26e4:	4b03      	ldr	r3, [pc, #12]	; (26f4 <s4_temperature+0x18>)
    26e6:	4804      	ldr	r0, [pc, #16]	; (26f8 <s4_temperature+0x1c>)
    26e8:	7819      	ldrb	r1, [r3, #0]
    26ea:	f7ff ff8f 	bl	260c <printf>
}
    26ee:	bd10      	pop	{r4, pc}
    26f0:	0000d509 	.word	0x0000d509
    26f4:	2000000e 	.word	0x2000000e
    26f8:	0000d512 	.word	0x0000d512

000026fc <main>:


/***************************************************************************************/
/** MAIN **/
void main(void)
{
    26fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio = device_get_binding(SW0_GPIO_NAME);
    26fe:	4837      	ldr	r0, [pc, #220]	; (27dc <main+0xe0>)
    2700:	f009 fb70 	bl	bde4 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    2704:	6843      	ldr	r3, [r0, #4]
    2706:	4c36      	ldr	r4, [pc, #216]	; (27e0 <main+0xe4>)
    2708:	681d      	ldr	r5, [r3, #0]
    270a:	2211      	movs	r2, #17
    270c:	2322      	movs	r3, #34	; 0x22
    270e:	2100      	movs	r1, #0
    2710:	6020      	str	r0, [r4, #0]
    2712:	47a8      	blx	r5
	gpio_pin_configure(gpio, SW1_GPIO_PIN, (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE | GPIO_INT_ACTIVE_LOW));
    2714:	6820      	ldr	r0, [r4, #0]
    2716:	221a      	movs	r2, #26
    2718:	6843      	ldr	r3, [r0, #4]
    271a:	2100      	movs	r1, #0
    271c:	681d      	ldr	r5, [r3, #0]
    271e:	2322      	movs	r3, #34	; 0x22
    2720:	47a8      	blx	r5
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2722:	4930      	ldr	r1, [pc, #192]	; (27e4 <main+0xe8>)
    2724:	4b30      	ldr	r3, [pc, #192]	; (27e8 <main+0xec>)
	gpio_add_callback(gpio, &button_cb);
    2726:	6820      	ldr	r0, [r4, #0]
    2728:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    272a:	4b30      	ldr	r3, [pc, #192]	; (27ec <main+0xf0>)
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
    272c:	2201      	movs	r2, #1
	callback->pin_mask = pin_mask;
    272e:	608b      	str	r3, [r1, #8]
	return api->manage_callback(port, callback, true);
    2730:	6843      	ldr	r3, [r0, #4]
    2732:	68db      	ldr	r3, [r3, #12]
    2734:	4798      	blx	r3
	pwm = device_get_binding(CONFIG_PWM_NRF5_SW_0_DEV_NAME);
    2736:	482e      	ldr	r0, [pc, #184]	; (27f0 <main+0xf4>)
    2738:	f009 fb54 	bl	bde4 <device_get_binding>
	gpio_pin_enable_callback(gpio, SW0_GPIO_PIN);
    273c:	6820      	ldr	r0, [r4, #0]
	return api->enable_callback(port, access_op, pin);
    273e:	2211      	movs	r2, #17
    2740:	6843      	ldr	r3, [r0, #4]
    2742:	2100      	movs	r1, #0
    2744:	691b      	ldr	r3, [r3, #16]
    2746:	4798      	blx	r3
	gpio_pin_enable_callback(gpio, SW1_GPIO_PIN);
    2748:	6820      	ldr	r0, [r4, #0]
    274a:	221a      	movs	r2, #26
    274c:	6843      	ldr	r3, [r0, #4]
    274e:	2100      	movs	r1, #0
    2750:	691b      	ldr	r3, [r3, #16]
    2752:	4798      	blx	r3
	configure_buttons();

	printf("Thermometer Example! %s\n", CONFIG_ARCH);
    2754:	4927      	ldr	r1, [pc, #156]	; (27f4 <main+0xf8>)
    2756:	4828      	ldr	r0, [pc, #160]	; (27f8 <main+0xfc>)
    2758:	f7ff ff58 	bl	260c <printf>

	temp_dev = device_get_binding("TEMP_0");
    275c:	4827      	ldr	r0, [pc, #156]	; (27fc <main+0x100>)
    275e:	f009 fb41 	bl	bde4 <device_get_binding>
    2762:	4c27      	ldr	r4, [pc, #156]	; (2800 <main+0x104>)
    2764:	6020      	str	r0, [r4, #0]
	if (!temp_dev) {
    2766:	2800      	cmp	r0, #0
    2768:	d102      	bne.n	2770 <main+0x74>
		printk("error: no temp device\n");
    276a:	4826      	ldr	r0, [pc, #152]	; (2804 <main+0x108>)
    276c:	f000 fc7c 	bl	3068 <printk>
	}

	printf("temp device is %p, name is %s\n",
    2770:	6821      	ldr	r1, [r4, #0]
    2772:	4825      	ldr	r0, [pc, #148]	; (2808 <main+0x10c>)
    2774:	680b      	ldr	r3, [r1, #0]
    2776:	681a      	ldr	r2, [r3, #0]
    2778:	f7ff ff48 	bl	260c <printf>
	       temp_dev, temp_dev->config->name);

	while (1) {
		int r;
		r = sensor_sample_fetch(temp_dev);
    277c:	6820      	ldr	r0, [r4, #0]

static inline int _impl_sensor_sample_fetch(struct device *dev)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    277e:	211e      	movs	r1, #30
    2780:	6843      	ldr	r3, [r0, #4]
    2782:	689b      	ldr	r3, [r3, #8]
    2784:	4798      	blx	r3
    2786:	1e01      	subs	r1, r0, #0
		if (r) {
    2788:	d003      	beq.n	2792 <main+0x96>
			printf("sensor_sample_fetch failed return: %d\n", r);
    278a:	4820      	ldr	r0, [pc, #128]	; (280c <main+0x110>)
		}

		r = sensor_channel_get(temp_dev, SENSOR_CHAN_TEMP,
				       &temp_value);
		if (r) {
			printf("sensor_channel_get failed return: %d\n", r);
    278c:	f7ff ff3e 	bl	260c <printf>
		}

		current_temperature = sensor_value_to_double(&temp_value);
		k_sleep(2500);
	}
}
    2790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		r = sensor_channel_get(temp_dev, SENSOR_CHAN_TEMP,
    2792:	6820      	ldr	r0, [r4, #0]
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
    2794:	4d1e      	ldr	r5, [pc, #120]	; (2810 <main+0x114>)
    2796:	6843      	ldr	r3, [r0, #4]
    2798:	210c      	movs	r1, #12
    279a:	68db      	ldr	r3, [r3, #12]
    279c:	002a      	movs	r2, r5
    279e:	4798      	blx	r3
    27a0:	1e01      	subs	r1, r0, #0
		if (r) {
    27a2:	d001      	beq.n	27a8 <main+0xac>
			printf("sensor_channel_get failed return: %d\n", r);
    27a4:	481b      	ldr	r0, [pc, #108]	; (2814 <main+0x118>)
    27a6:	e7f1      	b.n	278c <main+0x90>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
    27a8:	6868      	ldr	r0, [r5, #4]
    27aa:	f7ff f8af 	bl	190c <__aeabi_i2d>
    27ae:	2200      	movs	r2, #0
    27b0:	4b19      	ldr	r3, [pc, #100]	; (2818 <main+0x11c>)
    27b2:	f7fe fa2d 	bl	c10 <__aeabi_ddiv>
    27b6:	0006      	movs	r6, r0
    27b8:	6828      	ldr	r0, [r5, #0]
    27ba:	000f      	movs	r7, r1
    27bc:	f7ff f8a6 	bl	190c <__aeabi_i2d>
    27c0:	0002      	movs	r2, r0
    27c2:	000b      	movs	r3, r1
    27c4:	0030      	movs	r0, r6
    27c6:	0039      	movs	r1, r7
    27c8:	f7fd ff12 	bl	5f0 <__aeabi_dadd>
		current_temperature = sensor_value_to_double(&temp_value);
    27cc:	f7fd fe32 	bl	434 <__aeabi_d2uiz>
    27d0:	4b12      	ldr	r3, [pc, #72]	; (281c <main+0x120>)
    27d2:	7018      	strb	r0, [r3, #0]

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    27d4:	4812      	ldr	r0, [pc, #72]	; (2820 <main+0x124>)
    27d6:	f009 ff83 	bl	c6e0 <_impl_k_sleep>
    27da:	e7cf      	b.n	277c <main+0x80>
    27dc:	0000d444 	.word	0x0000d444
    27e0:	20000010 	.word	0x20000010
    27e4:	20000000 	.word	0x20000000
    27e8:	00002691 	.word	0x00002691
    27ec:	04020000 	.word	0x04020000
    27f0:	0000d44b 	.word	0x0000d44b
    27f4:	0000d451 	.word	0x0000d451
    27f8:	0000d455 	.word	0x0000d455
    27fc:	0000d46e 	.word	0x0000d46e
    2800:	20000014 	.word	0x20000014
    2804:	0000d475 	.word	0x0000d475
    2808:	0000d48c 	.word	0x0000d48c
    280c:	0000d4ab 	.word	0x0000d4ab
    2810:	20000018 	.word	0x20000018
    2814:	0000d4d2 	.word	0x0000d4d2
    2818:	412e8480 	.word	0x412e8480
    281c:	2000000e 	.word	0x2000000e
    2820:	000009c4 	.word	0x000009c4

00002824 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
    2824:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
    2826:	f3ef 8010 	mrs	r0, PRIMASK
    282a:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    282c:	491d      	ldr	r1, [pc, #116]	; (28a4 <nordicsemi_nrf51_init+0x80>)
    282e:	780b      	ldrb	r3, [r1, #0]
    2830:	2b01      	cmp	r3, #1
    2832:	d10f      	bne.n	2854 <nordicsemi_nrf51_init+0x30>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    2834:	4b1c      	ldr	r3, [pc, #112]	; (28a8 <nordicsemi_nrf51_init+0x84>)
    2836:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    2838:	071b      	lsls	r3, r3, #28
    283a:	d10b      	bne.n	2854 <nordicsemi_nrf51_init+0x30>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    283c:	4b1b      	ldr	r3, [pc, #108]	; (28ac <nordicsemi_nrf51_init+0x88>)
    283e:	25e0      	movs	r5, #224	; 0xe0
    2840:	681a      	ldr	r2, [r3, #0]
    2842:	23f0      	movs	r3, #240	; 0xf0
    2844:	0014      	movs	r4, r2
    2846:	401c      	ands	r4, r3
    2848:	422a      	tst	r2, r5
    284a:	d11a      	bne.n	2882 <nordicsemi_nrf51_init+0x5e>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    284c:	4a18      	ldr	r2, [pc, #96]	; (28b0 <nordicsemi_nrf51_init+0x8c>)
    284e:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    2850:	421a      	tst	r2, r3
    2852:	d019      	beq.n	2888 <nordicsemi_nrf51_init+0x64>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    2854:	680b      	ldr	r3, [r1, #0]
    2856:	b2db      	uxtb	r3, r3
    2858:	2b01      	cmp	r3, #1
    285a:	d10d      	bne.n	2878 <nordicsemi_nrf51_init+0x54>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    285c:	4a12      	ldr	r2, [pc, #72]	; (28a8 <nordicsemi_nrf51_init+0x84>)
    285e:	6812      	ldr	r2, [r2, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    2860:	0712      	lsls	r2, r2, #28
    2862:	d109      	bne.n	2878 <nordicsemi_nrf51_init+0x54>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    2864:	21f0      	movs	r1, #240	; 0xf0
    2866:	4a11      	ldr	r2, [pc, #68]	; (28ac <nordicsemi_nrf51_init+0x88>)
    2868:	6812      	ldr	r2, [r2, #0]
    286a:	400a      	ands	r2, r1
    286c:	2a40      	cmp	r2, #64	; 0x40
    286e:	d103      	bne.n	2878 <nordicsemi_nrf51_init+0x54>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    2870:	4a0f      	ldr	r2, [pc, #60]	; (28b0 <nordicsemi_nrf51_init+0x8c>)
    2872:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    2874:	420a      	tst	r2, r1
    2876:	d00f      	beq.n	2898 <nordicsemi_nrf51_init+0x74>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key) {
    2878:	2800      	cmp	r0, #0
    287a:	d100      	bne.n	287e <nordicsemi_nrf51_init+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    287c:	b662      	cpsie	i
}
    287e:	2000      	movs	r0, #0
    2880:	bd30      	pop	{r4, r5, pc}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
    2882:	2c30      	cmp	r4, #48	; 0x30
    2884:	d0e2      	beq.n	284c <nordicsemi_nrf51_init+0x28>
    2886:	e7e5      	b.n	2854 <nordicsemi_nrf51_init+0x30>
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
    2888:	4a0a      	ldr	r2, [pc, #40]	; (28b4 <nordicsemi_nrf51_init+0x90>)
    288a:	4b0b      	ldr	r3, [pc, #44]	; (28b8 <nordicsemi_nrf51_init+0x94>)
    288c:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
    288e:	2280      	movs	r2, #128	; 0x80
    2890:	4b0a      	ldr	r3, [pc, #40]	; (28bc <nordicsemi_nrf51_init+0x98>)
    2892:	0212      	lsls	r2, r2, #8
    2894:	601a      	str	r2, [r3, #0]
    2896:	e7dd      	b.n	2854 <nordicsemi_nrf51_init+0x30>
		NRF_MPU->DISABLEINDEBUG =
    2898:	22c1      	movs	r2, #193	; 0xc1
    289a:	2180      	movs	r1, #128	; 0x80
    289c:	00d2      	lsls	r2, r2, #3
    289e:	05c9      	lsls	r1, r1, #23
    28a0:	508b      	str	r3, [r1, r2]
    28a2:	e7e9      	b.n	2878 <nordicsemi_nrf51_init+0x54>
    28a4:	f0000fe0 	.word	0xf0000fe0
    28a8:	f0000fe4 	.word	0xf0000fe4
    28ac:	f0000fe8 	.word	0xf0000fe8
    28b0:	f0000fec 	.word	0xf0000fec
    28b4:	c007ffdf 	.word	0xc007ffdf
    28b8:	40000504 	.word	0x40000504
    28bc:	40006c18 	.word	0x40006c18

000028c0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    28c0:	4808      	ldr	r0, [pc, #32]	; (28e4 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    28c2:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    28c4:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    28c6:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    28c8:	d80a      	bhi.n	28e0 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    28ca:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
    28cc:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    28ce:	d007      	beq.n	28e0 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    28d0:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    28d2:	f009 ff57 	bl	c784 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    28d6:	bc01      	pop	{r0}
    mov lr, r0
    28d8:	4686      	mov	lr, r0
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    28da:	4903      	ldr	r1, [pc, #12]	; (28e8 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    28dc:	4a03      	ldr	r2, [pc, #12]	; (28ec <_EXIT_EXC+0xc>)
    str r2, [r1]
    28de:	600a      	str	r2, [r1, #0]

000028e0 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    28e0:	4770      	bx	lr
    28e2:	0000      	.short	0x0000
    ldr r0, =_kernel
    28e4:	20000be8 	.word	0x20000be8
    ldr r1, =_SCS_ICSR
    28e8:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
    28ec:	10000000 	.word	0x10000000

000028f0 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    28f2:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
    28f4:	2200      	movs	r2, #0
    28f6:	2603      	movs	r6, #3
    28f8:	25ff      	movs	r5, #255	; 0xff
    28fa:	00a4      	lsls	r4, r4, #2
    28fc:	0010      	movs	r0, r2
    28fe:	002f      	movs	r7, r5
    2900:	4030      	ands	r0, r6
    2902:	00c0      	lsls	r0, r0, #3
    2904:	4087      	lsls	r7, r0
    2906:	0893      	lsrs	r3, r2, #2
    2908:	4904      	ldr	r1, [pc, #16]	; (291c <_IntLibInit+0x2c>)
    290a:	009b      	lsls	r3, r3, #2
    290c:	185b      	adds	r3, r3, r1
    290e:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2910:	3201      	adds	r2, #1
    2912:	43b9      	bics	r1, r7
    2914:	5119      	str	r1, [r3, r4]
    2916:	2a1a      	cmp	r2, #26
    2918:	d1f0      	bne.n	28fc <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    291c:	e000e100 	.word	0xe000e100

00002920 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2920:	4913      	ldr	r1, [pc, #76]	; (2970 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2922:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2924:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    2926:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    2928:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
    292c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
    292e:	4643      	mov	r3, r8
    mov r4, r9
    2930:	464c      	mov	r4, r9
    mov r5, r10
    2932:	4655      	mov	r5, sl
    mov r6, r11
    2934:	465e      	mov	r6, fp
    mov r7, ip
    2936:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
    2938:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    293a:	4f0e      	ldr	r7, [pc, #56]	; (2974 <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    293c:	4e0e      	ldr	r6, [pc, #56]	; (2978 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
    293e:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    2940:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2942:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    2944:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    2946:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
    2948:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    294a:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
    294c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
    294e:	d100      	bne.n	2952 <_thread_irq_disabled>
    cpsie i
    2950:	b662      	cpsie	i

00002952 <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
    2952:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
    2954:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
    2956:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
    2958:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
    295a:	4698      	mov	r8, r3
    mov r9, r4
    295c:	46a1      	mov	r9, r4
    mov r10, r5
    295e:	46aa      	mov	sl, r5
    mov r11, r6
    2960:	46b3      	mov	fp, r6
    mov ip, r7
    2962:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    2964:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
    2966:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    2968:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    296c:	4770      	bx	lr
    296e:	0000      	.short	0x0000
    ldr r1, =_kernel
    2970:	20000be8 	.word	0x20000be8
    ldr v4, =_SCS_ICSR
    2974:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
    2978:	08000000 	.word	0x08000000

0000297c <__svc>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
    297c:	2004      	movs	r0, #4
    mov r1, lr
    297e:	4671      	mov	r1, lr
    tst r1, r0
    2980:	4201      	tst	r1, r0
    beq _stack_frame_msp
    2982:	d002      	beq.n	298a <_stack_frame_msp>
    mrs r0, PSP
    2984:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
    2988:	d101      	bne.n	298e <_stack_frame_endif>

0000298a <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
    298a:	f3ef 8008 	mrs	r0, MSP

0000298e <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    298e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
    2990:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
    2992:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
    2994:	2902      	cmp	r1, #2
    beq _oops
    2996:	d000      	beq.n	299a <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
    2998:	e792      	b.n	28c0 <_ExcExit>

0000299a <_oops>:

_oops:
    push {lr}
    299a:	b500      	push	{lr}
    blx _do_kernel_oops
    299c:	f000 f91c 	bl	2bd8 <_do_kernel_oops>
    pop {pc}
    29a0:	bd00      	pop	{pc}
    29a2:	46c0      	nop			; (mov r8, r8)

000029a4 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
    29a4:	4905      	ldr	r1, [pc, #20]	; (29bc <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
    29a6:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
    29a8:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    29aa:	4905      	ldr	r1, [pc, #20]	; (29c0 <__swap+0x1c>)
    ldr r1, [r1]
    29ac:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
    29ae:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
    29b0:	4904      	ldr	r1, [pc, #16]	; (29c4 <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <__swap+0x24>)
    str r3, [r1, #0]
    29b4:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
    29b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
    29b8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
    29ba:	4770      	bx	lr
    ldr r1, =_kernel
    29bc:	20000be8 	.word	0x20000be8
    ldr r1, =_k_neg_eagain
    29c0:	0000dae4 	.word	0x0000dae4
    ldr r1, =_SCS_ICSR
    29c4:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
    29c8:	10000000 	.word	0x10000000

000029cc <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29cc:	4b0e      	ldr	r3, [pc, #56]	; (2a08 <_Fault+0x3c>)
{
    29ce:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29d0:	685a      	ldr	r2, [r3, #4]
{
    29d2:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29d4:	05d2      	lsls	r2, r2, #23
    29d6:	0dd2      	lsrs	r2, r2, #23
	switch (fault) {
    29d8:	2a03      	cmp	r2, #3
    29da:	d10e      	bne.n	29fa <_Fault+0x2e>
	PR_EXC("***** HARD FAULT *****\n");
    29dc:	480b      	ldr	r0, [pc, #44]	; (2a0c <_Fault+0x40>)
    29de:	f000 fb43 	bl	3068 <printk>

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    29e2:	f009 fea1 	bl	c728 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
    29e6:	69a2      	ldr	r2, [r4, #24]
    29e8:	0001      	movs	r1, r0
    29ea:	4809      	ldr	r0, [pc, #36]	; (2a10 <_Fault+0x44>)
	PR_EXC("***** %s %d) *****\n",
    29ec:	f000 fb3c 	bl	3068 <printk>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    29f0:	0021      	movs	r1, r4
    29f2:	2000      	movs	r0, #0
    29f4:	f000 f8f6 	bl	2be4 <_SysFatalErrorHandler>
}
    29f8:	bd10      	pop	{r4, pc}
	PR_EXC("***** %s %d) *****\n",
    29fa:	4906      	ldr	r1, [pc, #24]	; (2a14 <_Fault+0x48>)
    29fc:	2a0f      	cmp	r2, #15
    29fe:	dd00      	ble.n	2a02 <_Fault+0x36>
    2a00:	4905      	ldr	r1, [pc, #20]	; (2a18 <_Fault+0x4c>)
    2a02:	3a10      	subs	r2, #16
    2a04:	4805      	ldr	r0, [pc, #20]	; (2a1c <_Fault+0x50>)
    2a06:	e7f1      	b.n	29ec <_Fault+0x20>
    2a08:	e000ed00 	.word	0xe000ed00
    2a0c:	0000d556 	.word	0x0000d556
    2a10:	0000d56e 	.word	0x0000d56e
    2a14:	0000d528 	.word	0x0000d528
    2a18:	0000d53d 	.word	0x0000d53d
    2a1c:	0000d5b8 	.word	0x0000d5b8

00002a20 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2a20:	4770      	bx	lr
	...

00002a24 <_arch_irq_enable>:
  if ((int32_t)(IRQn) >= 0)
    2a24:	0603      	lsls	r3, r0, #24
    2a26:	d405      	bmi.n	2a34 <_arch_irq_enable+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a28:	231f      	movs	r3, #31
    2a2a:	4018      	ands	r0, r3
    2a2c:	3b1e      	subs	r3, #30
    2a2e:	4083      	lsls	r3, r0
    2a30:	4a01      	ldr	r2, [pc, #4]	; (2a38 <_arch_irq_enable+0x14>)
    2a32:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
    2a34:	4770      	bx	lr
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	e000e100 	.word	0xe000e100

00002a3c <_arch_irq_disable>:
  if ((int32_t)(IRQn) >= 0)
    2a3c:	0603      	lsls	r3, r0, #24
    2a3e:	d409      	bmi.n	2a54 <_arch_irq_disable+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a40:	231f      	movs	r3, #31
    2a42:	4018      	ands	r0, r3
    2a44:	3b1e      	subs	r3, #30
    2a46:	4083      	lsls	r3, r0
    2a48:	4a03      	ldr	r2, [pc, #12]	; (2a58 <_arch_irq_disable+0x1c>)
    2a4a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2a4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a50:	f3bf 8f6f 	isb	sy
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
    2a54:	4770      	bx	lr
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	e000e104 	.word	0xe000e104

00002a5c <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    2a5c:	0943      	lsrs	r3, r0, #5
    2a5e:	4a05      	ldr	r2, [pc, #20]	; (2a74 <_arch_irq_is_enabled+0x18>)
    2a60:	009b      	lsls	r3, r3, #2
    2a62:	589b      	ldr	r3, [r3, r2]
    2a64:	221f      	movs	r2, #31
    2a66:	4010      	ands	r0, r2
    2a68:	3a1e      	subs	r2, #30
    2a6a:	4082      	lsls	r2, r0
    2a6c:	0010      	movs	r0, r2
    2a6e:	4018      	ands	r0, r3
}
    2a70:	4770      	bx	lr
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	e000e100 	.word	0xe000e100

00002a78 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2a78:	b243      	sxtb	r3, r0
{
    2a7a:	b570      	push	{r4, r5, r6, lr}
    2a7c:	0189      	lsls	r1, r1, #6
  if ((int32_t)(IRQn) >= 0)
    2a7e:	2b00      	cmp	r3, #0
    2a80:	db12      	blt.n	2aa8 <_irq_priority_set+0x30>
    2a82:	4a14      	ldr	r2, [pc, #80]	; (2ad4 <_irq_priority_set+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2a84:	089b      	lsrs	r3, r3, #2
    2a86:	2503      	movs	r5, #3
    2a88:	009b      	lsls	r3, r3, #2
    2a8a:	189b      	adds	r3, r3, r2
    2a8c:	22ff      	movs	r2, #255	; 0xff
    2a8e:	4028      	ands	r0, r5
    2a90:	40a8      	lsls	r0, r5
    2a92:	0015      	movs	r5, r2
    2a94:	24c0      	movs	r4, #192	; 0xc0
    2a96:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2a98:	4011      	ands	r1, r2
    2a9a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2a9c:	00a4      	lsls	r4, r4, #2
    2a9e:	591e      	ldr	r6, [r3, r4]
    2aa0:	43ae      	bics	r6, r5
    2aa2:	4331      	orrs	r1, r6
    2aa4:	5119      	str	r1, [r3, r4]
}
    2aa6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2aa8:	2403      	movs	r4, #3
    2aaa:	230f      	movs	r3, #15
    2aac:	b2c0      	uxtb	r0, r0
    2aae:	4003      	ands	r3, r0
    2ab0:	4020      	ands	r0, r4
    2ab2:	40a0      	lsls	r0, r4
    2ab4:	34fc      	adds	r4, #252	; 0xfc
    2ab6:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2ab8:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2aba:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2abc:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2abe:	3b08      	subs	r3, #8
    2ac0:	4a05      	ldr	r2, [pc, #20]	; (2ad8 <_irq_priority_set+0x60>)
    2ac2:	089b      	lsrs	r3, r3, #2
    2ac4:	009b      	lsls	r3, r3, #2
    2ac6:	189b      	adds	r3, r3, r2
    2ac8:	69da      	ldr	r2, [r3, #28]
    2aca:	43aa      	bics	r2, r5
    2acc:	4311      	orrs	r1, r2
    2ace:	61d9      	str	r1, [r3, #28]
    2ad0:	e7e9      	b.n	2aa6 <_irq_priority_set+0x2e>
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	e000e100 	.word	0xe000e100
    2ad8:	e000ed00 	.word	0xe000ed00

00002adc <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
    2adc:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
    2ade:	f000 f843 	bl	2b68 <__hard_fault>
}
    2ae2:	bd10      	pop	{r4, pc}

00002ae4 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    2ae4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    2ae6:	f3ef 8410 	mrs	r4, PRIMASK
    2aea:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2aec:	4b05      	ldr	r3, [pc, #20]	; (2b04 <_arch_isr_direct_pm+0x20>)
    2aee:	6998      	ldr	r0, [r3, #24]
    2af0:	2800      	cmp	r0, #0
    2af2:	d003      	beq.n	2afc <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    2af4:	2200      	movs	r2, #0
    2af6:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    2af8:	f009 f99c 	bl	be34 <_sys_power_save_idle_exit>
	if (key) {
    2afc:	2c00      	cmp	r4, #0
    2afe:	d100      	bne.n	2b02 <_arch_isr_direct_pm+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
    2b00:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2b02:	bd10      	pop	{r4, pc}
    2b04:	20000be8 	.word	0x20000be8

00002b08 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    2b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b0a:	0017      	movs	r7, r2
    2b0c:	001e      	movs	r6, r3
    2b0e:	000c      	movs	r4, r1
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    2b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2b12:	9909      	ldr	r1, [sp, #36]	; 0x24
    2b14:	2204      	movs	r2, #4
    2b16:	0005      	movs	r5, r0
    2b18:	f00a f91c 	bl	cd54 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2b1c:	0039      	movs	r1, r7
    2b1e:	2207      	movs	r2, #7
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    2b20:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    2b22:	2300      	movs	r3, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    2b24:	3920      	subs	r1, #32
    2b26:	1861      	adds	r1, r4, r1
    2b28:	4391      	bics	r1, r2
	pInitCtx->pc &= 0xfffffffe;
    2b2a:	4a09      	ldr	r2, [pc, #36]	; (2b50 <_new_thread+0x48>)
    2b2c:	64eb      	str	r3, [r5, #76]	; 0x4c
    2b2e:	4382      	bics	r2, r0
	thread->fn_abort = NULL;
    2b30:	652b      	str	r3, [r5, #80]	; 0x50
    2b32:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    2b34:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->a1 = (u32_t)pEntry;
    2b36:	600e      	str	r6, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
    2b38:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    2b3a:	9a07      	ldr	r2, [sp, #28]
    2b3c:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    2b3e:	9a08      	ldr	r2, [sp, #32]
    2b40:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
    2b42:	2280      	movs	r2, #128	; 0x80
    2b44:	0452      	lsls	r2, r2, #17
    2b46:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    2b48:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    2b4a:	65ab      	str	r3, [r5, #88]	; 0x58
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
	thread_monitor_init(thread);
#endif
}
    2b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	0000cbc1 	.word	0x0000cbc1

00002b54 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    2b54:	4901      	ldr	r1, [pc, #4]	; (2b5c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    2b56:	2210      	movs	r2, #16
	str r2, [r1]
    2b58:	600a      	str	r2, [r1, #0]
	bx lr
    2b5a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    2b5c:	e000ed10 	.word	0xe000ed10

00002b60 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
    2b60:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    2b62:	bf30      	wfi

	bx lr
    2b64:	4770      	bx	lr
    2b66:	46c0      	nop			; (mov r8, r8)

00002b68 <__hard_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* force unlock interrupts */
	cpsie i
    2b68:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
    2b6a:	2004      	movs	r0, #4
	mov r1, lr
    2b6c:	4671      	mov	r1, lr
	tst r1, r0
    2b6e:	4201      	tst	r1, r0
	beq _stack_frame_msp
    2b70:	d002      	beq.n	2b78 <_stack_frame_msp>
	mrs r0, PSP
    2b72:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
    2b76:	d101      	bne.n	2b7c <_stack_frame_endif>

00002b78 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
    2b78:	f3ef 8008 	mrs	r0, MSP

00002b7c <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    2b7c:	b500      	push	{lr}
	bl _Fault
    2b7e:	f7ff ff25 	bl	29cc <_Fault>

	pop {pc}
    2b82:	bd00      	pop	{pc}

00002b84 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    2b84:	b570      	push	{r4, r5, r6, lr}
    2b86:	0004      	movs	r4, r0
    2b88:	000d      	movs	r5, r1
	switch (reason) {
    2b8a:	2804      	cmp	r0, #4
    2b8c:	d009      	beq.n	2ba2 <_NanoFatalErrorHandler+0x1e>
    2b8e:	2805      	cmp	r0, #5
    2b90:	d016      	beq.n	2bc0 <_NanoFatalErrorHandler+0x3c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    2b92:	480c      	ldr	r0, [pc, #48]	; (2bc4 <_NanoFatalErrorHandler+0x40>)
	switch (reason) {
    2b94:	2c03      	cmp	r4, #3
    2b96:	d005      	beq.n	2ba4 <_NanoFatalErrorHandler+0x20>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    2b98:	0021      	movs	r1, r4
    2b9a:	480b      	ldr	r0, [pc, #44]	; (2bc8 <_NanoFatalErrorHandler+0x44>)
    2b9c:	f000 fa64 	bl	3068 <printk>
		break;
    2ba0:	e002      	b.n	2ba8 <_NanoFatalErrorHandler+0x24>
		printk("***** Kernel OOPS! *****\n");
    2ba2:	480a      	ldr	r0, [pc, #40]	; (2bcc <_NanoFatalErrorHandler+0x48>)
    2ba4:	f000 fa60 	bl	3068 <printk>
    2ba8:	f009 fdbe 	bl	c728 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
    2bac:	69aa      	ldr	r2, [r5, #24]
    2bae:	0001      	movs	r1, r0
    2bb0:	4807      	ldr	r0, [pc, #28]	; (2bd0 <_NanoFatalErrorHandler+0x4c>)
    2bb2:	f000 fa59 	bl	3068 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    2bb6:	0029      	movs	r1, r5
    2bb8:	0020      	movs	r0, r4
    2bba:	f000 f813 	bl	2be4 <_SysFatalErrorHandler>
}
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
		printk("***** Kernel Panic! *****\n");
    2bc0:	4804      	ldr	r0, [pc, #16]	; (2bd4 <_NanoFatalErrorHandler+0x50>)
    2bc2:	e7ef      	b.n	2ba4 <_NanoFatalErrorHandler+0x20>
    2bc4:	0000d5cc 	.word	0x0000d5cc
    2bc8:	0000d627 	.word	0x0000d627
    2bcc:	0000d5f2 	.word	0x0000d5f2
    2bd0:	0000d64a 	.word	0x0000d64a
    2bd4:	0000d60c 	.word	0x0000d60c

00002bd8 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    2bd8:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
    2bda:	0001      	movs	r1, r0
    2bdc:	6800      	ldr	r0, [r0, #0]
    2bde:	f7ff ffd1 	bl	2b84 <_NanoFatalErrorHandler>
}
    2be2:	bd10      	pop	{r4, pc}

00002be4 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    2be4:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    2be6:	2805      	cmp	r0, #5
    2be8:	d00c      	beq.n	2c04 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    2bea:	f009 ffd7 	bl	cb9c <k_is_in_isr>
    2bee:	2800      	cmp	r0, #0
    2bf0:	d00b      	beq.n	2c0a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    2bf2:	f009 ffd3 	bl	cb9c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    2bf6:	490b      	ldr	r1, [pc, #44]	; (2c24 <_SysFatalErrorHandler+0x40>)
    2bf8:	2800      	cmp	r0, #0
    2bfa:	d100      	bne.n	2bfe <_SysFatalErrorHandler+0x1a>
    2bfc:	490a      	ldr	r1, [pc, #40]	; (2c28 <_SysFatalErrorHandler+0x44>)
    2bfe:	480b      	ldr	r0, [pc, #44]	; (2c2c <_SysFatalErrorHandler+0x48>)
    2c00:	f000 fa32 	bl	3068 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    2c04:	f7ff ffac 	bl	2b60 <k_cpu_idle>
    2c08:	e7fc      	b.n	2c04 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    2c0a:	f009 ffd1 	bl	cbb0 <_is_thread_essential>
    2c0e:	2800      	cmp	r0, #0
    2c10:	d1ef      	bne.n	2bf2 <_SysFatalErrorHandler+0xe>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    2c12:	4c07      	ldr	r4, [pc, #28]	; (2c30 <_SysFatalErrorHandler+0x4c>)
    2c14:	4807      	ldr	r0, [pc, #28]	; (2c34 <_SysFatalErrorHandler+0x50>)
    2c16:	68a1      	ldr	r1, [r4, #8]
    2c18:	f000 fa26 	bl	3068 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    2c1c:	68a0      	ldr	r0, [r4, #8]
    2c1e:	f000 f80b 	bl	2c38 <_impl_k_thread_abort>
	}
	CODE_UNREACHABLE;
}
    2c22:	bd10      	pop	{r4, pc}
    2c24:	0000d686 	.word	0x0000d686
    2c28:	0000d68a 	.word	0x0000d68a
    2c2c:	0000d69b 	.word	0x0000d69b
    2c30:	20000be8 	.word	0x20000be8
    2c34:	0000d6bb 	.word	0x0000d6bb

00002c38 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    2c38:	b570      	push	{r4, r5, r6, lr}
    2c3a:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    2c3c:	f3ef 8410 	mrs	r4, PRIMASK
    2c40:	b672      	cpsid	i
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    2c42:	f00a f81f 	bl	cc84 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    2c46:	4b0b      	ldr	r3, [pc, #44]	; (2c74 <_impl_k_thread_abort+0x3c>)
    2c48:	689b      	ldr	r3, [r3, #8]
    2c4a:	429d      	cmp	r5, r3
    2c4c:	d10d      	bne.n	2c6a <_impl_k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2c4e:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <_impl_k_thread_abort+0x40>)
    2c50:	685a      	ldr	r2, [r3, #4]
    2c52:	05d2      	lsls	r2, r2, #23
    2c54:	d104      	bne.n	2c60 <_impl_k_thread_abort+0x28>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    2c56:	f009 fd95 	bl	c784 <_update_time_slice_before_swap>

	return __swap(key);
    2c5a:	0020      	movs	r0, r4
    2c5c:	f7ff fea2 	bl	29a4 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c60:	2280      	movs	r2, #128	; 0x80
    2c62:	6859      	ldr	r1, [r3, #4]
    2c64:	0552      	lsls	r2, r2, #21
    2c66:	430a      	orrs	r2, r1
    2c68:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    2c6a:	0020      	movs	r0, r4
    2c6c:	f009 fcce 	bl	c60c <_reschedule_threads>
}
    2c70:	bd70      	pop	{r4, r5, r6, pc}
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	20000be8 	.word	0x20000be8
    2c78:	e000ed00 	.word	0xe000ed00

00002c7c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    2c7c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    2c7e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2c80:	4a0a      	ldr	r2, [pc, #40]	; (2cac <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2c82:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2c84:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	beq _idle_state_cleared
    2c86:	d003      	beq.n	2c90 <_idle_state_cleared>
	movs.n r1, #0
    2c88:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
    2c8a:	6191      	str	r1, [r2, #24]
	blx _sys_power_save_idle_exit
    2c8c:	f009 f8d2 	bl	be34 <_sys_power_save_idle_exit>

00002c90 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2c90:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    2c92:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
    2c96:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
    2c98:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
    2c9a:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    2c9c:	4904      	ldr	r1, [pc, #16]	; (2cb0 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c9e:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2ca0:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    2ca2:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
    2ca4:	bc08      	pop	{r3}
	mov lr, r3
    2ca6:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    2ca8:	e60a      	b.n	28c0 <_ExcExit>
    2caa:	0000      	.short	0x0000
	ldr r2, =_kernel
    2cac:	20000be8 	.word	0x20000be8
	ldr r1, =_sw_isr_table
    2cb0:	000000a8 	.word	0x000000a8

00002cb4 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
    2cb4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    2cb6:	4804      	ldr	r0, [pc, #16]	; (2cc8 <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2cb8:	4904      	ldr	r1, [pc, #16]	; (2ccc <__reset+0x18>)
    adds r0, r0, r1
    2cba:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2cbc:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    2cc0:	2002      	movs	r0, #2
    msr CONTROL, r0
    2cc2:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    2cc6:	e006      	b.n	2cd6 <_PrepC>
    ldr r0, =_interrupt_stack
    2cc8:	20001b18 	.word	0x20001b18
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2ccc:	00000280 	.word	0x00000280

00002cd0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    2cd0:	bf30      	wfi
    b _SysNmiOnReset
    2cd2:	e7fd      	b.n	2cd0 <_SysNmiOnReset>

00002cd4 <relocate_vector_table>:
	size_t vector_size = (size_t)_vector_end - (size_t)_vector_start;
	memcpy(VECTOR_ADDRESS, _vector_start, vector_size);
#elif defined(CONFIG_SW_VECTOR_RELAY)
	_vector_table_pointer = _vector_start;
#endif
}
    2cd4:	4770      	bx	lr

00002cd6 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    2cd6:	b510      	push	{r4, lr}
	relocate_vector_table();
    2cd8:	f7ff fffc 	bl	2cd4 <relocate_vector_table>
	enable_floating_point();
	_bss_zero();
    2cdc:	f009 f8da 	bl	be94 <_bss_zero>
	_data_copy();
    2ce0:	f009 f8e4 	bl	beac <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    2ce4:	f009 f90c 	bl	bf00 <_Cstart>

00002ce8 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    2ce8:	b510      	push	{r4, lr}
	handler();
    2cea:	f7ff fff1 	bl	2cd0 <_SysNmiOnReset>
	_ExcExit();
    2cee:	f7ff fde7 	bl	28c0 <_ExcExit>
}
    2cf2:	bd10      	pop	{r4, pc}

00002cf4 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2cf4:	2000      	movs	r0, #0
    2cf6:	4770      	bx	lr

00002cf8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2cf8:	680b      	ldr	r3, [r1, #0]
{
    2cfa:	b510      	push	{r4, lr}
	ctx->count++;
    2cfc:	3301      	adds	r3, #1
    2cfe:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2d00:	4b01      	ldr	r3, [pc, #4]	; (2d08 <char_out+0x10>)
    2d02:	681b      	ldr	r3, [r3, #0]
    2d04:	4798      	blx	r3
}
    2d06:	bd10      	pop	{r4, pc}
    2d08:	200021c4 	.word	0x200021c4

00002d0c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d0e:	b087      	sub	sp, #28
    2d10:	9303      	str	r3, [sp, #12]
    2d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2d14:	0007      	movs	r7, r0
    2d16:	9102      	str	r1, [sp, #8]
    2d18:	9300      	str	r3, [sp, #0]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	dc01      	bgt.n	2d22 <_printk_dec_ulong+0x16>
    2d1e:	2301      	movs	r3, #1
    2d20:	9300      	str	r3, [sp, #0]
    2d22:	2320      	movs	r3, #32
    2d24:	9305      	str	r3, [sp, #20]
    2d26:	9b03      	ldr	r3, [sp, #12]
    2d28:	2b01      	cmp	r3, #1
    2d2a:	d101      	bne.n	2d30 <_printk_dec_ulong+0x24>
    2d2c:	332f      	adds	r3, #47	; 0x2f
    2d2e:	9305      	str	r3, [sp, #20]
    2d30:	230a      	movs	r3, #10
    2d32:	9301      	str	r3, [sp, #4]
    2d34:	2300      	movs	r3, #0
    2d36:	0014      	movs	r4, r2
    2d38:	2601      	movs	r6, #1
    2d3a:	4d1f      	ldr	r5, [pc, #124]	; (2db8 <_printk_dec_ulong+0xac>)
    2d3c:	9304      	str	r3, [sp, #16]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    2d3e:	9b04      	ldr	r3, [sp, #16]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d101      	bne.n	2d48 <_printk_dec_ulong+0x3c>
    2d44:	42a5      	cmp	r5, r4
    2d46:	d226      	bcs.n	2d96 <_printk_dec_ulong+0x8a>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2d48:	1c69      	adds	r1, r5, #1
    2d4a:	0020      	movs	r0, r4
    2d4c:	f7fd fa3c 	bl	1c8 <__aeabi_uidiv>
    2d50:	9902      	ldr	r1, [sp, #8]
    2d52:	3030      	adds	r0, #48	; 0x30
    2d54:	47b8      	blx	r7
			found_largest_digit = 1;
    2d56:	2301      	movs	r3, #1
			digits++;
    2d58:	3601      	adds	r6, #1
			found_largest_digit = 1;
    2d5a:	9304      	str	r3, [sp, #16]
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2d5c:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
    2d5e:	1c69      	adds	r1, r5, #1
		remaining--;
    2d60:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
    2d62:	0020      	movs	r0, r4
		remaining--;
    2d64:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
    2d66:	f7fd fa73 	bl	250 <__aeabi_uidivmod>
		pos /= 10;
    2d6a:	0028      	movs	r0, r5
		remainder %= (pos + 1);
    2d6c:	000c      	movs	r4, r1
		pos /= 10;
    2d6e:	210a      	movs	r1, #10
    2d70:	f7fd fa2a 	bl	1c8 <__aeabi_uidiv>
	while (pos >= 9) {
    2d74:	9b01      	ldr	r3, [sp, #4]
		pos /= 10;
    2d76:	0005      	movs	r5, r0
	while (pos >= 9) {
    2d78:	2b01      	cmp	r3, #1
    2d7a:	d1e0      	bne.n	2d3e <_printk_dec_ulong+0x32>
	}
	out((int)(remainder + 48), ctx);
    2d7c:	0020      	movs	r0, r4
    2d7e:	9902      	ldr	r1, [sp, #8]
    2d80:	3030      	adds	r0, #48	; 0x30
    2d82:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
    2d84:	9b03      	ldr	r3, [sp, #12]
    2d86:	2b03      	cmp	r3, #3
    2d88:	d103      	bne.n	2d92 <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
    2d8a:	9b00      	ldr	r3, [sp, #0]
    2d8c:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    2d8e:	2c00      	cmp	r4, #0
    2d90:	dc0d      	bgt.n	2dae <_printk_dec_ulong+0xa2>
			out(' ', ctx);
		}
	}
}
    2d92:	b007      	add	sp, #28
    2d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (remaining <= min_width
    2d96:	9b00      	ldr	r3, [sp, #0]
    2d98:	9a01      	ldr	r2, [sp, #4]
    2d9a:	4293      	cmp	r3, r2
    2d9c:	dbde      	blt.n	2d5c <_printk_dec_ulong+0x50>
				&& padding < PAD_SPACE_AFTER) {
    2d9e:	9b03      	ldr	r3, [sp, #12]
    2da0:	2b02      	cmp	r3, #2
    2da2:	d8db      	bhi.n	2d5c <_printk_dec_ulong+0x50>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2da4:	9902      	ldr	r1, [sp, #8]
    2da6:	9805      	ldr	r0, [sp, #20]
    2da8:	47b8      	blx	r7
			digits++;
    2daa:	3601      	adds	r6, #1
    2dac:	e7d6      	b.n	2d5c <_printk_dec_ulong+0x50>
			out(' ', ctx);
    2dae:	9902      	ldr	r1, [sp, #8]
    2db0:	2020      	movs	r0, #32
    2db2:	47b8      	blx	r7
    2db4:	3c01      	subs	r4, #1
    2db6:	e7ea      	b.n	2d8e <_printk_dec_ulong+0x82>
    2db8:	3b9ac9ff 	.word	0x3b9ac9ff

00002dbc <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    2dbc:	680a      	ldr	r2, [r1, #0]
{
    2dbe:	b530      	push	{r4, r5, lr}
    2dc0:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    2dc2:	2a00      	cmp	r2, #0
    2dc4:	d002      	beq.n	2dcc <str_out+0x10>
    2dc6:	684c      	ldr	r4, [r1, #4]
    2dc8:	42a3      	cmp	r3, r4
    2dca:	db02      	blt.n	2dd2 <str_out+0x16>
		ctx->count++;
    2dcc:	3301      	adds	r3, #1
    2dce:	608b      	str	r3, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
    2dd0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    2dd2:	1e65      	subs	r5, r4, #1
    2dd4:	42ab      	cmp	r3, r5
    2dd6:	d103      	bne.n	2de0 <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
    2dd8:	608c      	str	r4, [r1, #8]
    2dda:	2100      	movs	r1, #0
    2ddc:	54d1      	strb	r1, [r2, r3]
    2dde:	e7f7      	b.n	2dd0 <str_out+0x14>
		ctx->str[ctx->count++] = c;
    2de0:	1c5c      	adds	r4, r3, #1
    2de2:	608c      	str	r4, [r1, #8]
    2de4:	54d0      	strb	r0, [r2, r3]
    2de6:	e7f3      	b.n	2dd0 <str_out+0x14>

00002de8 <__printk_hook_install>:
	_char_out = fn;
    2de8:	4b01      	ldr	r3, [pc, #4]	; (2df0 <__printk_hook_install+0x8>)
    2dea:	6018      	str	r0, [r3, #0]
}
    2dec:	4770      	bx	lr
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	200021c4 	.word	0x200021c4

00002df4 <_vprintk>:
{
    2df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df6:	001c      	movs	r4, r3
	int long_ctr = 0;
    2df8:	2300      	movs	r3, #0
{
    2dfa:	b08d      	sub	sp, #52	; 0x34
	int long_ctr = 0;
    2dfc:	9305      	str	r3, [sp, #20]
	int min_width = -1;
    2dfe:	3b01      	subs	r3, #1
    2e00:	9303      	str	r3, [sp, #12]
	enum pad_type padding = PAD_NONE;
    2e02:	2300      	movs	r3, #0
{
    2e04:	0007      	movs	r7, r0
	int might_format = 0; /* 1 if encountered a '%' */
    2e06:	001e      	movs	r6, r3
{
    2e08:	9102      	str	r1, [sp, #8]
    2e0a:	9207      	str	r2, [sp, #28]
	enum pad_type padding = PAD_NONE;
    2e0c:	9304      	str	r3, [sp, #16]
	while (*fmt) {
    2e0e:	9b07      	ldr	r3, [sp, #28]
    2e10:	7818      	ldrb	r0, [r3, #0]
    2e12:	2800      	cmp	r0, #0
    2e14:	d101      	bne.n	2e1a <_vprintk+0x26>
}
    2e16:	b00d      	add	sp, #52	; 0x34
    2e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!might_format) {
    2e1a:	2e00      	cmp	r6, #0
    2e1c:	d108      	bne.n	2e30 <_vprintk+0x3c>
			if (*fmt != '%') {
    2e1e:	2825      	cmp	r0, #37	; 0x25
    2e20:	d100      	bne.n	2e24 <_vprintk+0x30>
    2e22:	e107      	b.n	3034 <_vprintk+0x240>
				out((int)*fmt, ctx);
    2e24:	9902      	ldr	r1, [sp, #8]
    2e26:	47b8      	blx	r7
		++fmt;
    2e28:	9b07      	ldr	r3, [sp, #28]
    2e2a:	3301      	adds	r3, #1
    2e2c:	9307      	str	r3, [sp, #28]
    2e2e:	e7ee      	b.n	2e0e <_vprintk+0x1a>
			switch (*fmt) {
    2e30:	2864      	cmp	r0, #100	; 0x64
    2e32:	d05d      	beq.n	2ef0 <_vprintk+0xfc>
    2e34:	d818      	bhi.n	2e68 <_vprintk+0x74>
    2e36:	2839      	cmp	r0, #57	; 0x39
    2e38:	d80a      	bhi.n	2e50 <_vprintk+0x5c>
    2e3a:	2831      	cmp	r0, #49	; 0x31
    2e3c:	d24c      	bcs.n	2ed8 <_vprintk+0xe4>
    2e3e:	282d      	cmp	r0, #45	; 0x2d
    2e40:	d039      	beq.n	2eb6 <_vprintk+0xc2>
    2e42:	2830      	cmp	r0, #48	; 0x30
    2e44:	d03a      	beq.n	2ebc <_vprintk+0xc8>
    2e46:	2825      	cmp	r0, #37	; 0x25
    2e48:	d108      	bne.n	2e5c <_vprintk+0x68>
				out((int)*fmt, ctx);
    2e4a:	9902      	ldr	r1, [sp, #8]
    2e4c:	47b8      	blx	r7
    2e4e:	e065      	b.n	2f1c <_vprintk+0x128>
			switch (*fmt) {
    2e50:	2858      	cmp	r0, #88	; 0x58
    2e52:	d100      	bne.n	2e56 <_vprintk+0x62>
    2e54:	e087      	b.n	2f66 <_vprintk+0x172>
    2e56:	2863      	cmp	r0, #99	; 0x63
    2e58:	d100      	bne.n	2e5c <_vprintk+0x68>
    2e5a:	e0e6      	b.n	302a <_vprintk+0x236>
				out((int)'%', ctx);
    2e5c:	9902      	ldr	r1, [sp, #8]
    2e5e:	2025      	movs	r0, #37	; 0x25
    2e60:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2e62:	9b07      	ldr	r3, [sp, #28]
    2e64:	7818      	ldrb	r0, [r3, #0]
    2e66:	e7f0      	b.n	2e4a <_vprintk+0x56>
			switch (*fmt) {
    2e68:	2870      	cmp	r0, #112	; 0x70
    2e6a:	d072      	beq.n	2f52 <_vprintk+0x15e>
    2e6c:	d806      	bhi.n	2e7c <_vprintk+0x88>
    2e6e:	2869      	cmp	r0, #105	; 0x69
    2e70:	d03e      	beq.n	2ef0 <_vprintk+0xfc>
    2e72:	286c      	cmp	r0, #108	; 0x6c
    2e74:	d038      	beq.n	2ee8 <_vprintk+0xf4>
    2e76:	2868      	cmp	r0, #104	; 0x68
    2e78:	d1f0      	bne.n	2e5c <_vprintk+0x68>
    2e7a:	e7d5      	b.n	2e28 <_vprintk+0x34>
    2e7c:	2875      	cmp	r0, #117	; 0x75
    2e7e:	d057      	beq.n	2f30 <_vprintk+0x13c>
    2e80:	d814      	bhi.n	2eac <_vprintk+0xb8>
    2e82:	2873      	cmp	r0, #115	; 0x73
    2e84:	d1ea      	bne.n	2e5c <_vprintk+0x68>
				char *s = va_arg(ap, char *);
    2e86:	6826      	ldr	r6, [r4, #0]
    2e88:	1d25      	adds	r5, r4, #4
    2e8a:	0034      	movs	r4, r6
				while (*s)
    2e8c:	7820      	ldrb	r0, [r4, #0]
    2e8e:	2800      	cmp	r0, #0
    2e90:	d000      	beq.n	2e94 <_vprintk+0xa0>
    2e92:	e0c1      	b.n	3018 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    2e94:	9b04      	ldr	r3, [sp, #16]
    2e96:	2b03      	cmp	r3, #3
    2e98:	d000      	beq.n	2e9c <_vprintk+0xa8>
    2e9a:	e0d4      	b.n	3046 <_vprintk+0x252>
					int remaining = min_width - (s - start);
    2e9c:	9b03      	ldr	r3, [sp, #12]
    2e9e:	1ba4      	subs	r4, r4, r6
    2ea0:	1b1c      	subs	r4, r3, r4
					while (remaining-- > 0) {
    2ea2:	2c00      	cmp	r4, #0
    2ea4:	dd00      	ble.n	2ea8 <_vprintk+0xb4>
    2ea6:	e0bb      	b.n	3020 <_vprintk+0x22c>
				int c = va_arg(ap, int);
    2ea8:	002c      	movs	r4, r5
    2eaa:	e037      	b.n	2f1c <_vprintk+0x128>
			switch (*fmt) {
    2eac:	2878      	cmp	r0, #120	; 0x78
    2eae:	d05a      	beq.n	2f66 <_vprintk+0x172>
    2eb0:	287a      	cmp	r0, #122	; 0x7a
    2eb2:	d0b9      	beq.n	2e28 <_vprintk+0x34>
    2eb4:	e7d2      	b.n	2e5c <_vprintk+0x68>
				padding = PAD_SPACE_AFTER;
    2eb6:	2303      	movs	r3, #3
					padding = PAD_ZERO_BEFORE;
    2eb8:	9304      	str	r3, [sp, #16]
    2eba:	e7b5      	b.n	2e28 <_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
    2ebc:	9b03      	ldr	r3, [sp, #12]
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	da0d      	bge.n	2ede <_vprintk+0xea>
    2ec2:	9b04      	ldr	r3, [sp, #16]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d100      	bne.n	2eca <_vprintk+0xd6>
    2ec8:	e0bb      	b.n	3042 <_vprintk+0x24e>
				if (padding == PAD_NONE) {
    2eca:	9b04      	ldr	r3, [sp, #16]
					min_width = 10 * min_width + *fmt - '0';
    2ecc:	3830      	subs	r0, #48	; 0x30
    2ece:	9003      	str	r0, [sp, #12]
				if (padding == PAD_NONE) {
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d1a9      	bne.n	2e28 <_vprintk+0x34>
					padding = PAD_SPACE_BEFORE;
    2ed4:	3302      	adds	r3, #2
    2ed6:	e7ef      	b.n	2eb8 <_vprintk+0xc4>
				if (min_width < 0) {
    2ed8:	9b03      	ldr	r3, [sp, #12]
    2eda:	2b00      	cmp	r3, #0
    2edc:	dbf5      	blt.n	2eca <_vprintk+0xd6>
					min_width = 10 * min_width + *fmt - '0';
    2ede:	230a      	movs	r3, #10
    2ee0:	9a03      	ldr	r2, [sp, #12]
    2ee2:	4353      	muls	r3, r2
    2ee4:	1818      	adds	r0, r3, r0
    2ee6:	e7f0      	b.n	2eca <_vprintk+0xd6>
				long_ctr++;
    2ee8:	9b05      	ldr	r3, [sp, #20]
    2eea:	3301      	adds	r3, #1
    2eec:	9305      	str	r3, [sp, #20]
    2eee:	e79b      	b.n	2e28 <_vprintk+0x34>
				if (long_ctr < 2) {
    2ef0:	9b05      	ldr	r3, [sp, #20]
    2ef2:	2b01      	cmp	r3, #1
    2ef4:	dc14      	bgt.n	2f20 <_vprintk+0x12c>
					d = va_arg(ap, long);
    2ef6:	6825      	ldr	r5, [r4, #0]
    2ef8:	3404      	adds	r4, #4
				if (d < 0) {
    2efa:	2d00      	cmp	r5, #0
    2efc:	da06      	bge.n	2f0c <_vprintk+0x118>
					out((int)'-', ctx);
    2efe:	9902      	ldr	r1, [sp, #8]
    2f00:	202d      	movs	r0, #45	; 0x2d
    2f02:	47b8      	blx	r7
					min_width--;
    2f04:	9b03      	ldr	r3, [sp, #12]
					d = -d;
    2f06:	426d      	negs	r5, r5
					min_width--;
    2f08:	3b01      	subs	r3, #1
    2f0a:	9303      	str	r3, [sp, #12]
				_printk_dec_ulong(out, ctx, d, padding,
    2f0c:	002a      	movs	r2, r5
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	9300      	str	r3, [sp, #0]
    2f12:	9b04      	ldr	r3, [sp, #16]
				_printk_dec_ulong(out, ctx, u, padding,
    2f14:	9902      	ldr	r1, [sp, #8]
    2f16:	0038      	movs	r0, r7
    2f18:	f7ff fef8 	bl	2d0c <_printk_dec_ulong>
			might_format = 0;
    2f1c:	2600      	movs	r6, #0
				break;
    2f1e:	e783      	b.n	2e28 <_vprintk+0x34>
					d = (long)va_arg(ap, long long);
    2f20:	3407      	adds	r4, #7
    2f22:	0023      	movs	r3, r4
    2f24:	2207      	movs	r2, #7
    2f26:	4393      	bics	r3, r2
    2f28:	001c      	movs	r4, r3
    2f2a:	681d      	ldr	r5, [r3, #0]
    2f2c:	3408      	adds	r4, #8
    2f2e:	e7e4      	b.n	2efa <_vprintk+0x106>
				if (long_ctr < 2) {
    2f30:	9b05      	ldr	r3, [sp, #20]
    2f32:	2b01      	cmp	r3, #1
    2f34:	dc05      	bgt.n	2f42 <_vprintk+0x14e>
					u = va_arg(ap, unsigned long);
    2f36:	6822      	ldr	r2, [r4, #0]
    2f38:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	9300      	str	r3, [sp, #0]
    2f3e:	9b04      	ldr	r3, [sp, #16]
    2f40:	e7e8      	b.n	2f14 <_vprintk+0x120>
					u = (unsigned long)va_arg(ap,
    2f42:	3407      	adds	r4, #7
    2f44:	0023      	movs	r3, r4
    2f46:	2207      	movs	r2, #7
    2f48:	4393      	bics	r3, r2
    2f4a:	001c      	movs	r4, r3
    2f4c:	681a      	ldr	r2, [r3, #0]
    2f4e:	3408      	adds	r4, #8
    2f50:	e7f3      	b.n	2f3a <_vprintk+0x146>
				  out('0', ctx);
    2f52:	9902      	ldr	r1, [sp, #8]
    2f54:	2030      	movs	r0, #48	; 0x30
    2f56:	47b8      	blx	r7
				  out('x', ctx);
    2f58:	9902      	ldr	r1, [sp, #8]
    2f5a:	2078      	movs	r0, #120	; 0x78
    2f5c:	47b8      	blx	r7
				  min_width = 8;
    2f5e:	2308      	movs	r3, #8
    2f60:	9303      	str	r3, [sp, #12]
				  padding = PAD_ZERO_BEFORE;
    2f62:	3b07      	subs	r3, #7
    2f64:	9304      	str	r3, [sp, #16]
				if (long_ctr < 2) {
    2f66:	9b05      	ldr	r3, [sp, #20]
    2f68:	2b01      	cmp	r3, #1
    2f6a:	dc16      	bgt.n	2f9a <_vprintk+0x1a6>
					x = va_arg(ap, unsigned long);
    2f6c:	6823      	ldr	r3, [r4, #0]
    2f6e:	3404      	adds	r4, #4
    2f70:	9309      	str	r3, [sp, #36]	; 0x24
	int remaining = 8; /* 8 digits max */
    2f72:	2308      	movs	r3, #8
    2f74:	9306      	str	r3, [sp, #24]
	int digits = 0;
    2f76:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
    2f78:	2508      	movs	r5, #8
	int digits = 0;
    2f7a:	9308      	str	r3, [sp, #32]
	int found_largest_digit = 0;
    2f7c:	930b      	str	r3, [sp, #44]	; 0x2c
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2f7e:	3d01      	subs	r5, #1
    2f80:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f82:	00ab      	lsls	r3, r5, #2
    2f84:	40d8      	lsrs	r0, r3
    2f86:	230f      	movs	r3, #15
    2f88:	4018      	ands	r0, r3
		if (nibble || found_largest_digit || size == 1) {
    2f8a:	d112      	bne.n	2fb2 <_vprintk+0x1be>
    2f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d101      	bne.n	2f96 <_vprintk+0x1a2>
    2f92:	2d00      	cmp	r5, #0
    2f94:	d12c      	bne.n	2ff0 <_vprintk+0x1fc>
			nibble += nibble > 9 ? 87 : 48;
    2f96:	2330      	movs	r3, #48	; 0x30
    2f98:	e00f      	b.n	2fba <_vprintk+0x1c6>
					x = (unsigned long)va_arg(ap,
    2f9a:	3407      	adds	r4, #7
    2f9c:	0023      	movs	r3, r4
    2f9e:	2207      	movs	r2, #7
    2fa0:	4393      	bics	r3, r2
    2fa2:	001c      	movs	r4, r3
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	3408      	adds	r4, #8
    2fa8:	9309      	str	r3, [sp, #36]	; 0x24
    2faa:	e7e2      	b.n	2f72 <_vprintk+0x17e>
	for (; size; size--) {
    2fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2fae:	9306      	str	r3, [sp, #24]
    2fb0:	e7e5      	b.n	2f7e <_vprintk+0x18a>
			nibble += nibble > 9 ? 87 : 48;
    2fb2:	2357      	movs	r3, #87	; 0x57
    2fb4:	2809      	cmp	r0, #9
    2fb6:	d800      	bhi.n	2fba <_vprintk+0x1c6>
    2fb8:	3b27      	subs	r3, #39	; 0x27
			out((int)nibble, ctx);
    2fba:	18c0      	adds	r0, r0, r3
    2fbc:	9902      	ldr	r1, [sp, #8]
    2fbe:	47b8      	blx	r7
			digits++;
    2fc0:	9b08      	ldr	r3, [sp, #32]
			found_largest_digit = 1;
    2fc2:	960b      	str	r6, [sp, #44]	; 0x2c
			digits++;
    2fc4:	3301      	adds	r3, #1
    2fc6:	9308      	str	r3, [sp, #32]
    2fc8:	9b06      	ldr	r3, [sp, #24]
    2fca:	930a      	str	r3, [sp, #40]	; 0x28
	for (; size; size--) {
    2fcc:	2d00      	cmp	r5, #0
    2fce:	d1ed      	bne.n	2fac <_vprintk+0x1b8>
	if (padding == PAD_SPACE_AFTER) {
    2fd0:	9b04      	ldr	r3, [sp, #16]
			might_format = 0;
    2fd2:	002e      	movs	r6, r5
	if (padding == PAD_SPACE_AFTER) {
    2fd4:	2b03      	cmp	r3, #3
    2fd6:	d000      	beq.n	2fda <_vprintk+0x1e6>
    2fd8:	e726      	b.n	2e28 <_vprintk+0x34>
		remaining = min_width * 2 - digits;
    2fda:	9b03      	ldr	r3, [sp, #12]
    2fdc:	005d      	lsls	r5, r3, #1
    2fde:	9b08      	ldr	r3, [sp, #32]
    2fe0:	1aed      	subs	r5, r5, r3
		while (remaining-- > 0) {
    2fe2:	2d00      	cmp	r5, #0
    2fe4:	dd9a      	ble.n	2f1c <_vprintk+0x128>
			out(' ', ctx);
    2fe6:	9902      	ldr	r1, [sp, #8]
    2fe8:	2020      	movs	r0, #32
    2fea:	47b8      	blx	r7
    2fec:	3d01      	subs	r5, #1
    2fee:	e7f8      	b.n	2fe2 <_vprintk+0x1ee>
		if (remaining-- <= min_width) {
    2ff0:	9b06      	ldr	r3, [sp, #24]
    2ff2:	9a06      	ldr	r2, [sp, #24]
    2ff4:	3b01      	subs	r3, #1
    2ff6:	930a      	str	r3, [sp, #40]	; 0x28
    2ff8:	9b03      	ldr	r3, [sp, #12]
    2ffa:	4293      	cmp	r3, r2
    2ffc:	dbe6      	blt.n	2fcc <_vprintk+0x1d8>
			if (padding == PAD_ZERO_BEFORE) {
    2ffe:	9b04      	ldr	r3, [sp, #16]
    3000:	2b01      	cmp	r3, #1
    3002:	d103      	bne.n	300c <_vprintk+0x218>
				out('0', ctx);
    3004:	2030      	movs	r0, #48	; 0x30
    3006:	9902      	ldr	r1, [sp, #8]
				out(' ', ctx);
    3008:	47b8      	blx	r7
    300a:	e7df      	b.n	2fcc <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
    300c:	9b04      	ldr	r3, [sp, #16]
    300e:	2b02      	cmp	r3, #2
    3010:	d1dc      	bne.n	2fcc <_vprintk+0x1d8>
				out(' ', ctx);
    3012:	9902      	ldr	r1, [sp, #8]
    3014:	2020      	movs	r0, #32
    3016:	e7f7      	b.n	3008 <_vprintk+0x214>
					out((int)(*s++), ctx);
    3018:	9902      	ldr	r1, [sp, #8]
    301a:	3401      	adds	r4, #1
    301c:	47b8      	blx	r7
    301e:	e735      	b.n	2e8c <_vprintk+0x98>
						out(' ', ctx);
    3020:	9902      	ldr	r1, [sp, #8]
    3022:	2020      	movs	r0, #32
    3024:	47b8      	blx	r7
    3026:	3c01      	subs	r4, #1
    3028:	e73b      	b.n	2ea2 <_vprintk+0xae>
				out(c, ctx);
    302a:	9902      	ldr	r1, [sp, #8]
    302c:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    302e:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    3030:	47b8      	blx	r7
    3032:	e739      	b.n	2ea8 <_vprintk+0xb4>
				min_width = -1;
    3034:	2301      	movs	r3, #1
    3036:	425b      	negs	r3, r3
				long_ctr = 0;
    3038:	9605      	str	r6, [sp, #20]
				padding = PAD_NONE;
    303a:	9604      	str	r6, [sp, #16]
				min_width = -1;
    303c:	9303      	str	r3, [sp, #12]
				might_format = 1;
    303e:	2601      	movs	r6, #1
    3040:	e6f2      	b.n	2e28 <_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
    3042:	2301      	movs	r3, #1
    3044:	e738      	b.n	2eb8 <_vprintk+0xc4>
				char *s = va_arg(ap, char *);
    3046:	002c      	movs	r4, r5
			might_format = 0;
    3048:	0006      	movs	r6, r0
    304a:	e6ed      	b.n	2e28 <_vprintk+0x34>

0000304c <vprintk>:
{
    304c:	b507      	push	{r0, r1, r2, lr}
    304e:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    3050:	2100      	movs	r1, #0
{
    3052:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    3054:	9101      	str	r1, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
    3056:	4803      	ldr	r0, [pc, #12]	; (3064 <vprintk+0x18>)
    3058:	a901      	add	r1, sp, #4
    305a:	f7ff fecb 	bl	2df4 <_vprintk>
}
    305e:	9801      	ldr	r0, [sp, #4]
    3060:	bd0e      	pop	{r1, r2, r3, pc}
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	00002cf9 	.word	0x00002cf9

00003068 <printk>:
{
    3068:	b40f      	push	{r0, r1, r2, r3}
    306a:	b507      	push	{r0, r1, r2, lr}
    306c:	a904      	add	r1, sp, #16
    306e:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
    3070:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    3072:	f7ff ffeb 	bl	304c <vprintk>
}
    3076:	b003      	add	sp, #12
    3078:	bc08      	pop	{r3}
    307a:	b004      	add	sp, #16
    307c:	4718      	bx	r3
	...

00003080 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    3080:	b40c      	push	{r2, r3}
    3082:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    3084:	2500      	movs	r5, #0
{
    3086:	b085      	sub	sp, #20
    3088:	ab08      	add	r3, sp, #32
    308a:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    308c:	9001      	str	r0, [sp, #4]
    308e:	9102      	str	r1, [sp, #8]
{
    3090:	0004      	movs	r4, r0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3092:	a901      	add	r1, sp, #4
    3094:	4807      	ldr	r0, [pc, #28]	; (30b4 <snprintk+0x34>)
	va_start(ap, fmt);
    3096:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    3098:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    309a:	f7ff feab 	bl	2df4 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    309e:	9803      	ldr	r0, [sp, #12]
    30a0:	9b02      	ldr	r3, [sp, #8]
    30a2:	4298      	cmp	r0, r3
    30a4:	da00      	bge.n	30a8 <snprintk+0x28>
		str[ctx.count] = '\0';
    30a6:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    30a8:	b005      	add	sp, #20
    30aa:	bc30      	pop	{r4, r5}
    30ac:	bc08      	pop	{r3}
    30ae:	b002      	add	sp, #8
    30b0:	4718      	bx	r3
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	00002dbd 	.word	0x00002dbd

000030b8 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    30b8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    30ba:	2500      	movs	r5, #0
{
    30bc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    30be:	9001      	str	r0, [sp, #4]
    30c0:	9102      	str	r1, [sp, #8]
{
    30c2:	0004      	movs	r4, r0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    30c4:	a901      	add	r1, sp, #4
    30c6:	4805      	ldr	r0, [pc, #20]	; (30dc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    30c8:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    30ca:	f7ff fe93 	bl	2df4 <_vprintk>

	if (ctx.count < ctx.max) {
    30ce:	9803      	ldr	r0, [sp, #12]
    30d0:	9b02      	ldr	r3, [sp, #8]
    30d2:	4298      	cmp	r0, r3
    30d4:	da00      	bge.n	30d8 <vsnprintk+0x20>
		str[ctx.count] = '\0';
    30d6:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    30d8:	b005      	add	sp, #20
    30da:	bd30      	pop	{r4, r5, pc}
    30dc:	00002dbd 	.word	0x00002dbd

000030e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 26);

GEN_ABS_SYM_END
    30e0:	4770      	bx	lr
	...

000030e4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	0004      	movs	r4, r0
    30e8:	4d07      	ldr	r5, [pc, #28]	; (3108 <console_out+0x24>)
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    30ea:	280a      	cmp	r0, #10
    30ec:	d104      	bne.n	30f8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    30ee:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    30f0:	210d      	movs	r1, #13
    30f2:	6843      	ldr	r3, [r0, #4]
    30f4:	685b      	ldr	r3, [r3, #4]
    30f6:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    30f8:	6828      	ldr	r0, [r5, #0]
    30fa:	b2e1      	uxtb	r1, r4
    30fc:	6843      	ldr	r3, [r0, #4]
    30fe:	685b      	ldr	r3, [r3, #4]
    3100:	4798      	blx	r3

	return c;
}
    3102:	0020      	movs	r0, r4
    3104:	bd70      	pop	{r4, r5, r6, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	20000020 	.word	0x20000020

0000310c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    310c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    310e:	4c04      	ldr	r4, [pc, #16]	; (3120 <uart_console_hook_install+0x14>)
    3110:	0020      	movs	r0, r4
    3112:	f7ff fa69 	bl	25e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3116:	0020      	movs	r0, r4
    3118:	f7ff fe66 	bl	2de8 <__printk_hook_install>
}
    311c:	bd10      	pop	{r4, pc}
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	000030e5 	.word	0x000030e5

00003124 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    3124:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3126:	4804      	ldr	r0, [pc, #16]	; (3138 <uart_console_init+0x14>)
    3128:	f008 fe5c 	bl	bde4 <device_get_binding>
    312c:	4b03      	ldr	r3, [pc, #12]	; (313c <uart_console_init+0x18>)
    312e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    3130:	f7ff ffec 	bl	310c <uart_console_hook_install>

	return 0;
}
    3134:	2000      	movs	r0, #0
    3136:	bd10      	pop	{r4, pc}
    3138:	0000d6e0 	.word	0x0000d6e0
    313c:	20000020 	.word	0x20000020

00003140 <reset_display>:
		gpio_port_write(disp->dev, val);
	}
}

static void reset_display(struct mb_display *disp)
{
    3140:	b510      	push	{r4, lr}
    3142:	0004      	movs	r4, r0
	k_timer_stop(&disp->timer);
    3144:	3004      	adds	r0, #4

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
    3146:	f009 fefd 	bl	cf44 <_impl_k_timer_stop>

	disp->str = NULL;
	disp->cur_img = 0;
    314a:	0022      	movs	r2, r4
	disp->str = NULL;
    314c:	2300      	movs	r3, #0
	disp->cur_img = 0;
    314e:	3239      	adds	r2, #57	; 0x39
	disp->str = NULL;
    3150:	6563      	str	r3, [r4, #84]	; 0x54
	disp->img = NULL;
	disp->img_count = 0;
    3152:	3a01      	subs	r2, #1
	disp->cur_img = 0;
    3154:	7053      	strb	r3, [r2, #1]
	disp->img_count = 0;
    3156:	7013      	strb	r3, [r2, #0]
	disp->scroll = SCROLL_OFF;
    3158:	2207      	movs	r2, #7
    315a:	343a      	adds	r4, #58	; 0x3a
    315c:	7823      	ldrb	r3, [r4, #0]
    315e:	4393      	bics	r3, r2
    3160:	7023      	strb	r3, [r4, #0]
}
    3162:	bd10      	pop	{r4, pc}

00003164 <start_image>:
{
    3164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3166:	0002      	movs	r2, r0
    3168:	0004      	movs	r4, r0
    316a:	468c      	mov	ip, r1
	for (row = 0; row < DISPLAY_ROWS; row++) {
    316c:	2300      	movs	r3, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    316e:	2601      	movs	r6, #1
    3170:	323c      	adds	r2, #60	; 0x3c
    3172:	2709      	movs	r7, #9
		disp->row[row] = 0;
    3174:	2100      	movs	r1, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    3176:	435f      	muls	r7, r3
		disp->row[row] = 0;
    3178:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    317a:	000d      	movs	r5, r1
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    317c:	491d      	ldr	r1, [pc, #116]	; (31f4 <start_image+0x90>)
    317e:	19c9      	adds	r1, r1, r7
    3180:	9101      	str	r1, [sp, #4]
    3182:	4667      	mov	r7, ip
    3184:	9901      	ldr	r1, [sp, #4]
    3186:	5d48      	ldrb	r0, [r1, r5]
    3188:	0901      	lsrs	r1, r0, #4
    318a:	5c79      	ldrb	r1, [r7, r1]
    318c:	0700      	lsls	r0, r0, #28
    318e:	0f00      	lsrs	r0, r0, #28
    3190:	40c1      	lsrs	r1, r0
    3192:	4231      	tst	r1, r6
    3194:	d006      	beq.n	31a4 <start_image+0x40>
				disp->row[row] |= BIT(LED_COL1_GPIO_PIN + col);
    3196:	0030      	movs	r0, r6
    3198:	1d29      	adds	r1, r5, #4
    319a:	4088      	lsls	r0, r1
    319c:	0001      	movs	r1, r0
    319e:	6810      	ldr	r0, [r2, #0]
    31a0:	4301      	orrs	r1, r0
    31a2:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    31a4:	3501      	adds	r5, #1
    31a6:	2d09      	cmp	r5, #9
    31a8:	d1eb      	bne.n	3182 <start_image+0x1e>
		disp->row[row] = ~disp->row[row] & col_mask;
    31aa:	6810      	ldr	r0, [r2, #0]
    31ac:	4912      	ldr	r1, [pc, #72]	; (31f8 <start_image+0x94>)
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    31ae:	0035      	movs	r5, r6
		disp->row[row] = ~disp->row[row] & col_mask;
    31b0:	4381      	bics	r1, r0
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    31b2:	0018      	movs	r0, r3
    31b4:	300d      	adds	r0, #13
    31b6:	4085      	lsls	r5, r0
	for (row = 0; row < DISPLAY_ROWS; row++) {
    31b8:	3301      	adds	r3, #1
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    31ba:	4329      	orrs	r1, r5
    31bc:	c202      	stmia	r2!, {r1}
	for (row = 0; row < DISPLAY_ROWS; row++) {
    31be:	2b03      	cmp	r3, #3
    31c0:	d1d7      	bne.n	3172 <start_image+0xe>
	disp->cur = 0;
    31c2:	0023      	movs	r3, r4
    31c4:	2200      	movs	r2, #0
    31c6:	333b      	adds	r3, #59	; 0x3b
    31c8:	701a      	strb	r2, [r3, #0]
	if (disp->duration == K_FOREVER) {
    31ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
    31cc:	3301      	adds	r3, #1
    31ce:	d10a      	bne.n	31e6 <start_image+0x82>
		disp->expiry = K_FOREVER;
    31d0:	2201      	movs	r2, #1
    31d2:	4252      	negs	r2, r2
    31d4:	17d3      	asrs	r3, r2, #31
		disp->expiry = k_uptime_get() + disp->duration;
    31d6:	64a2      	str	r2, [r4, #72]	; 0x48
    31d8:	64e3      	str	r3, [r4, #76]	; 0x4c
	k_timer_start(&disp->timer, K_NO_WAIT, K_MSEC(4));
    31da:	1d20      	adds	r0, r4, #4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
    31dc:	2204      	movs	r2, #4
    31de:	2100      	movs	r1, #0
    31e0:	f009 fe91 	bl	cf06 <_impl_k_timer_start>
}
    31e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_TIMER_USER_DATA_SET, k_timer_user_data_set, struct k_timer *, timer, void *, user_data);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer);

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    31e6:	f009 fb8f 	bl	c908 <_impl_k_uptime_get>
		disp->expiry = k_uptime_get() + disp->duration;
    31ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
    31ec:	17d3      	asrs	r3, r2, #31
    31ee:	1812      	adds	r2, r2, r0
    31f0:	414b      	adcs	r3, r1
    31f2:	e7f0      	b.n	31d6 <start_image+0x72>
    31f4:	0000d6e7 	.word	0x0000d6e7
    31f8:	00001ff0 	.word	0x00001ff0

000031fc <gpio_pin_configure.constprop.4>:
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    31fc:	b510      	push	{r4, lr}
	return api->config(port, access_op, pin, flags);
    31fe:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    3200:	000a      	movs	r2, r1
	return api->config(port, access_op, pin, flags);
    3202:	681c      	ldr	r4, [r3, #0]
    3204:	2100      	movs	r1, #0
    3206:	2301      	movs	r3, #1
    3208:	47a0      	blx	r4
}
    320a:	bd10      	pop	{r4, pc}

0000320c <mb_display_init>:
{
	return &display;
}

static int mb_display_init(struct device *dev)
{
    320c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    320e:	481b      	ldr	r0, [pc, #108]	; (327c <mb_display_init+0x70>)
    3210:	f008 fde8 	bl	bde4 <device_get_binding>
    3214:	4c1a      	ldr	r4, [pc, #104]	; (3280 <mb_display_init+0x74>)

	__ASSERT(dev, "No GPIO device found");

	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    3216:	210d      	movs	r1, #13
	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    3218:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    321a:	f7ff ffef 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW2_GPIO_PIN, GPIO_DIR_OUT);
    321e:	210e      	movs	r1, #14
    3220:	6820      	ldr	r0, [r4, #0]
    3222:	f7ff ffeb 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW3_GPIO_PIN, GPIO_DIR_OUT);
    3226:	210f      	movs	r1, #15
    3228:	6820      	ldr	r0, [r4, #0]
    322a:	f7ff ffe7 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL1_GPIO_PIN, GPIO_DIR_OUT);
    322e:	2104      	movs	r1, #4
    3230:	6820      	ldr	r0, [r4, #0]
    3232:	f7ff ffe3 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL2_GPIO_PIN, GPIO_DIR_OUT);
    3236:	2105      	movs	r1, #5
    3238:	6820      	ldr	r0, [r4, #0]
    323a:	f7ff ffdf 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL3_GPIO_PIN, GPIO_DIR_OUT);
    323e:	2106      	movs	r1, #6
    3240:	6820      	ldr	r0, [r4, #0]
    3242:	f7ff ffdb 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL4_GPIO_PIN, GPIO_DIR_OUT);
    3246:	2107      	movs	r1, #7
    3248:	6820      	ldr	r0, [r4, #0]
    324a:	f7ff ffd7 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL5_GPIO_PIN, GPIO_DIR_OUT);
    324e:	2108      	movs	r1, #8
    3250:	6820      	ldr	r0, [r4, #0]
    3252:	f7ff ffd3 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL6_GPIO_PIN, GPIO_DIR_OUT);
    3256:	2109      	movs	r1, #9
    3258:	6820      	ldr	r0, [r4, #0]
    325a:	f7ff ffcf 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL7_GPIO_PIN, GPIO_DIR_OUT);
    325e:	210a      	movs	r1, #10
    3260:	6820      	ldr	r0, [r4, #0]
    3262:	f7ff ffcb 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL8_GPIO_PIN, GPIO_DIR_OUT);
    3266:	210b      	movs	r1, #11
    3268:	6820      	ldr	r0, [r4, #0]
    326a:	f7ff ffc7 	bl	31fc <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL9_GPIO_PIN, GPIO_DIR_OUT);
    326e:	210c      	movs	r1, #12
    3270:	6820      	ldr	r0, [r4, #0]
    3272:	f7ff ffc3 	bl	31fc <gpio_pin_configure.constprop.4>

	return 0;
}
    3276:	2000      	movs	r0, #0
    3278:	bd10      	pop	{r4, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	0000d444 	.word	0x0000d444
    3280:	200021c8 	.word	0x200021c8

00003284 <current_img>:
	if (disp->scroll && disp->first) {
    3284:	0002      	movs	r2, r0
    3286:	323a      	adds	r2, #58	; 0x3a
    3288:	7812      	ldrb	r2, [r2, #0]
{
    328a:	0003      	movs	r3, r0
	if (disp->scroll && disp->first) {
    328c:	0751      	lsls	r1, r2, #29
    328e:	d002      	beq.n	3296 <current_img+0x12>
		return get_font(' ');
    3290:	480c      	ldr	r0, [pc, #48]	; (32c4 <current_img+0x40>)
	if (disp->scroll && disp->first) {
    3292:	0711      	lsls	r1, r2, #28
    3294:	d40e      	bmi.n	32b4 <current_img+0x30>
    3296:	0019      	movs	r1, r3
    3298:	3139      	adds	r1, #57	; 0x39
	if (disp->text) {
    329a:	0692      	lsls	r2, r2, #26
    329c:	d50b      	bpl.n	32b6 <current_img+0x32>
		return get_font(disp->str[disp->cur_img]);
    329e:	780a      	ldrb	r2, [r1, #0]
    32a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    32a2:	4808      	ldr	r0, [pc, #32]	; (32c4 <current_img+0x40>)
    32a4:	5c9b      	ldrb	r3, [r3, r2]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    32a6:	3b20      	subs	r3, #32
    32a8:	b2da      	uxtb	r2, r3
    32aa:	2a5e      	cmp	r2, #94	; 0x5e
    32ac:	d802      	bhi.n	32b4 <current_img+0x30>
	return &mb_font[ch - MB_FONT_START];
    32ae:	2205      	movs	r2, #5
    32b0:	4353      	muls	r3, r2
    32b2:	18c0      	adds	r0, r0, r3
}
    32b4:	4770      	bx	lr
		return &disp->img[disp->cur_img];
    32b6:	2005      	movs	r0, #5
    32b8:	780a      	ldrb	r2, [r1, #0]
    32ba:	4342      	muls	r2, r0
    32bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
    32be:	1880      	adds	r0, r0, r2
    32c0:	e7f8      	b.n	32b4 <current_img+0x30>
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	0000d702 	.word	0x0000d702

000032c8 <start_single>:
	if (disp->text) {
    32c8:	0003      	movs	r3, r0
	disp->duration = duration;
    32ca:	6501      	str	r1, [r0, #80]	; 0x50
	if (disp->text) {
    32cc:	333a      	adds	r3, #58	; 0x3a
    32ce:	781b      	ldrb	r3, [r3, #0]
{
    32d0:	b510      	push	{r4, lr}
	if (disp->text) {
    32d2:	069b      	lsls	r3, r3, #26
    32d4:	d50c      	bpl.n	32f0 <start_single+0x28>
		start_image(disp, get_font(disp->str[0]));
    32d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    32d8:	4906      	ldr	r1, [pc, #24]	; (32f4 <start_single+0x2c>)
    32da:	781b      	ldrb	r3, [r3, #0]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    32dc:	3b20      	subs	r3, #32
    32de:	b2da      	uxtb	r2, r3
    32e0:	2a5e      	cmp	r2, #94	; 0x5e
    32e2:	d802      	bhi.n	32ea <start_single+0x22>
	return &mb_font[ch - MB_FONT_START];
    32e4:	2205      	movs	r2, #5
    32e6:	4353      	muls	r3, r2
    32e8:	18c9      	adds	r1, r1, r3
		start_image(disp, disp->img);
    32ea:	f7ff ff3b 	bl	3164 <start_image>
}
    32ee:	bd10      	pop	{r4, pc}
		start_image(disp, disp->img);
    32f0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    32f2:	e7fa      	b.n	32ea <start_single+0x22>
    32f4:	0000d702 	.word	0x0000d702

000032f8 <clear_display>:
{
    32f8:	3804      	subs	r0, #4
    32fa:	b510      	push	{r4, lr}
    32fc:	6800      	ldr	r0, [r0, #0]
	return api->write(port, access_op, pin, value);
    32fe:	2200      	movs	r2, #0
    3300:	6843      	ldr	r3, [r0, #4]
    3302:	2101      	movs	r1, #1
    3304:	685c      	ldr	r4, [r3, #4]
    3306:	4b01      	ldr	r3, [pc, #4]	; (330c <clear_display+0x14>)
    3308:	47a0      	blx	r4
}
    330a:	bd10      	pop	{r4, pc}
    330c:	00001ff0 	.word	0x00001ff0

00003310 <show_row>:
{
    3310:	b5f0      	push	{r4, r5, r6, r7, lr}
    3312:	0004      	movs	r4, r0
	update_pins(disp, disp->row[disp->cur]);
    3314:	0026      	movs	r6, r4
    3316:	3637      	adds	r6, #55	; 0x37
    3318:	1f05      	subs	r5, r0, #4
    331a:	7833      	ldrb	r3, [r6, #0]
    331c:	6828      	ldr	r0, [r5, #0]
    331e:	330e      	adds	r3, #14
    3320:	6842      	ldr	r2, [r0, #4]
    3322:	009b      	lsls	r3, r3, #2
    3324:	18eb      	adds	r3, r5, r3
    3326:	6857      	ldr	r7, [r2, #4]
{
    3328:	b087      	sub	sp, #28
    332a:	685b      	ldr	r3, [r3, #4]
    332c:	2200      	movs	r2, #0
    332e:	2101      	movs	r1, #1
    3330:	47b8      	blx	r7
	disp->cur = (disp->cur + 1) % DISPLAY_ROWS;
    3332:	7830      	ldrb	r0, [r6, #0]
    3334:	2103      	movs	r1, #3
    3336:	3001      	adds	r0, #1
    3338:	f7fc ffea 	bl	310 <__aeabi_idivmod>
    333c:	1e0f      	subs	r7, r1, #0
    333e:	7031      	strb	r1, [r6, #0]
	if (disp->cur == 0 && disp->expiry != K_FOREVER &&
    3340:	d000      	beq.n	3344 <show_row+0x34>
    3342:	e091      	b.n	3468 <show_row+0x158>
    3344:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3346:	3301      	adds	r3, #1
    3348:	d103      	bne.n	3352 <show_row+0x42>
    334a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    334c:	3301      	adds	r3, #1
    334e:	d100      	bne.n	3352 <show_row+0x42>
    3350:	e08a      	b.n	3468 <show_row+0x158>
    3352:	f009 fad9 	bl	c908 <_impl_k_uptime_get>
    3356:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    3358:	428b      	cmp	r3, r1
    335a:	db05      	blt.n	3368 <show_row+0x58>
    335c:	d000      	beq.n	3360 <show_row+0x50>
    335e:	e083      	b.n	3468 <show_row+0x158>
    3360:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3362:	4283      	cmp	r3, r0
    3364:	d300      	bcc.n	3368 <show_row+0x58>
    3366:	e07f      	b.n	3468 <show_row+0x158>
		if (disp->scroll) {
    3368:	0021      	movs	r1, r4
    336a:	3136      	adds	r1, #54	; 0x36
    336c:	780a      	ldrb	r2, [r1, #0]
    336e:	0753      	lsls	r3, r2, #29
    3370:	d100      	bne.n	3374 <show_row+0x64>
    3372:	e097      	b.n	34a4 <show_row+0x194>
	return 5 + disp->img_sep;
    3374:	0653      	lsls	r3, r2, #25
    3376:	0fdb      	lsrs	r3, r3, #31
    3378:	3305      	adds	r3, #5
	if (disp->scroll < scroll_steps(disp)) {
    337a:	0756      	lsls	r6, r2, #29
    337c:	b2db      	uxtb	r3, r3
    337e:	0f76      	lsrs	r6, r6, #29
    3380:	9300      	str	r3, [sp, #0]
    3382:	429e      	cmp	r6, r3
    3384:	da58      	bge.n	3438 <show_row+0x128>
	if (disp->text) {
    3386:	2320      	movs	r3, #32
    3388:	4013      	ands	r3, r2
    338a:	9303      	str	r3, [sp, #12]
		if (disp->first) {
    338c:	2308      	movs	r3, #8
    338e:	401a      	ands	r2, r3
    3390:	9201      	str	r2, [sp, #4]
			const struct mb_image *i1 = current_img(disp);
    3392:	0028      	movs	r0, r5
    3394:	f7ff ff76 	bl	3284 <current_img>
	if (disp->text) {
    3398:	9b03      	ldr	r3, [sp, #12]
			const struct mb_image *i1 = current_img(disp);
    339a:	9002      	str	r0, [sp, #8]
    339c:	1f22      	subs	r2, r4, #4
	if (disp->text) {
    339e:	2b00      	cmp	r3, #0
    33a0:	d035      	beq.n	340e <show_row+0xfe>
		if (disp->first) {
    33a2:	9b01      	ldr	r3, [sp, #4]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d023      	beq.n	33f0 <show_row+0xe0>
			return get_font(disp->str[0]);
    33a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
    33aa:	781a      	ldrb	r2, [r3, #0]
    33ac:	4b4a      	ldr	r3, [pc, #296]	; (34d8 <show_row+0x1c8>)
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    33ae:	3a20      	subs	r2, #32
    33b0:	b2d1      	uxtb	r1, r2
    33b2:	295e      	cmp	r1, #94	; 0x5e
    33b4:	d802      	bhi.n	33bc <show_row+0xac>
	return &mb_font[ch - MB_FONT_START];
    33b6:	2105      	movs	r1, #5
    33b8:	434a      	muls	r2, r1
    33ba:	189b      	adds	r3, r3, r2
				      (i2->row[i] << (scroll_steps(disp) -
    33bc:	9a00      	ldr	r2, [sp, #0]
    33be:	5ddb      	ldrb	r3, [r3, r7]
    33c0:	1b92      	subs	r2, r2, r6
    33c2:	4093      	lsls	r3, r2
			img.row[i] = ((i1->row[i] >> disp->scroll) |
    33c4:	9a02      	ldr	r2, [sp, #8]
    33c6:	5dd2      	ldrb	r2, [r2, r7]
    33c8:	4132      	asrs	r2, r6
    33ca:	4313      	orrs	r3, r2
    33cc:	aa04      	add	r2, sp, #16
    33ce:	54bb      	strb	r3, [r7, r2]
		for (i = 0; i < 5; i++) {
    33d0:	3701      	adds	r7, #1
    33d2:	2f05      	cmp	r7, #5
    33d4:	d1dd      	bne.n	3392 <show_row+0x82>
		disp->scroll++;
    33d6:	2207      	movs	r2, #7
    33d8:	3436      	adds	r4, #54	; 0x36
    33da:	7823      	ldrb	r3, [r4, #0]
    33dc:	3601      	adds	r6, #1
    33de:	4016      	ands	r6, r2
    33e0:	4393      	bics	r3, r2
    33e2:	431e      	orrs	r6, r3
    33e4:	7026      	strb	r6, [r4, #0]
		start_image(disp, &img);
    33e6:	a904      	add	r1, sp, #16
	start_image(disp, current_img(disp));
    33e8:	0028      	movs	r0, r5
    33ea:	f7ff febb 	bl	3164 <start_image>
}
    33ee:	e03b      	b.n	3468 <show_row+0x158>
		} else if (disp->str[disp->cur_img]) {
    33f0:	0023      	movs	r3, r4
    33f2:	3335      	adds	r3, #53	; 0x35
    33f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
    33f6:	7819      	ldrb	r1, [r3, #0]
    33f8:	5c53      	ldrb	r3, [r2, r1]
    33fa:	469c      	mov	ip, r3
    33fc:	4660      	mov	r0, ip
			return get_font(' ');
    33fe:	4b36      	ldr	r3, [pc, #216]	; (34d8 <show_row+0x1c8>)
		} else if (disp->str[disp->cur_img]) {
    3400:	2800      	cmp	r0, #0
    3402:	d0db      	beq.n	33bc <show_row+0xac>
			return get_font(disp->str[disp->cur_img + 1]);
    3404:	1852      	adds	r2, r2, r1
    3406:	7852      	ldrb	r2, [r2, #1]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    3408:	3a20      	subs	r2, #32
    340a:	b2d1      	uxtb	r1, r2
    340c:	e7d1      	b.n	33b2 <show_row+0xa2>
		if (disp->first) {
    340e:	9b01      	ldr	r3, [sp, #4]
    3410:	2b00      	cmp	r3, #0
    3412:	d001      	beq.n	3418 <show_row+0x108>
			return &disp->img[0];
    3414:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3416:	e7d1      	b.n	33bc <show_row+0xac>
		} else if (disp->cur_img < (disp->img_count - 1)) {
    3418:	0023      	movs	r3, r4
    341a:	3335      	adds	r3, #53	; 0x35
    341c:	7819      	ldrb	r1, [r3, #0]
    341e:	3b01      	subs	r3, #1
    3420:	781b      	ldrb	r3, [r3, #0]
    3422:	3b01      	subs	r3, #1
    3424:	469c      	mov	ip, r3
			return get_font(' ');
    3426:	4b2c      	ldr	r3, [pc, #176]	; (34d8 <show_row+0x1c8>)
		} else if (disp->cur_img < (disp->img_count - 1)) {
    3428:	4561      	cmp	r1, ip
    342a:	dac7      	bge.n	33bc <show_row+0xac>
			return &disp->img[disp->cur_img + 1];
    342c:	2305      	movs	r3, #5
    342e:	3101      	adds	r1, #1
    3430:	4359      	muls	r1, r3
    3432:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3434:	185b      	adds	r3, r3, r1
    3436:	e7c1      	b.n	33bc <show_row+0xac>
    3438:	0020      	movs	r0, r4
		if (disp->first) {
    343a:	2308      	movs	r3, #8
    343c:	3035      	adds	r0, #53	; 0x35
    343e:	421a      	tst	r2, r3
    3440:	d014      	beq.n	346c <show_row+0x15c>
			disp->first = 0;
    3442:	439a      	bics	r2, r3
    3444:	700a      	strb	r2, [r1, #0]
	if (disp->text) {
    3446:	2320      	movs	r3, #32
    3448:	780a      	ldrb	r2, [r1, #0]
    344a:	4013      	ands	r3, r2
    344c:	d012      	beq.n	3474 <show_row+0x164>
		return (disp->str[disp->cur_img] == '\0');
    344e:	7803      	ldrb	r3, [r0, #0]
    3450:	6d6c      	ldr	r4, [r5, #84]	; 0x54
    3452:	5ce4      	ldrb	r4, [r4, r3]
    3454:	4263      	negs	r3, r4
    3456:	4163      	adcs	r3, r4
		return (disp->cur_img >= disp->img_count);
    3458:	b2db      	uxtb	r3, r3
		if (last_frame(disp)) {
    345a:	2b00      	cmp	r3, #0
    345c:	d016      	beq.n	348c <show_row+0x17c>
			if (!disp->loop) {
    345e:	06d3      	lsls	r3, r2, #27
    3460:	d40e      	bmi.n	3480 <show_row+0x170>
			reset_display(disp);
    3462:	0028      	movs	r0, r5
    3464:	f7ff fe6c 	bl	3140 <reset_display>
}
    3468:	b007      	add	sp, #28
    346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			disp->cur_img++;
    346c:	7803      	ldrb	r3, [r0, #0]
    346e:	3301      	adds	r3, #1
    3470:	7003      	strb	r3, [r0, #0]
    3472:	e7e8      	b.n	3446 <show_row+0x136>
		return (disp->cur_img >= disp->img_count);
    3474:	3434      	adds	r4, #52	; 0x34
    3476:	7806      	ldrb	r6, [r0, #0]
    3478:	7824      	ldrb	r4, [r4, #0]
    347a:	42a6      	cmp	r6, r4
    347c:	415b      	adcs	r3, r3
    347e:	e7eb      	b.n	3458 <show_row+0x148>
			disp->cur_img = 0;
    3480:	2300      	movs	r3, #0
    3482:	7003      	strb	r3, [r0, #0]
			disp->first = 1;
    3484:	780a      	ldrb	r2, [r1, #0]
    3486:	3308      	adds	r3, #8
    3488:	4313      	orrs	r3, r2
    348a:	700b      	strb	r3, [r1, #0]
		disp->scroll = SCROLL_START;
    348c:	2207      	movs	r2, #7
    348e:	780b      	ldrb	r3, [r1, #0]
    3490:	4393      	bics	r3, r2
    3492:	001a      	movs	r2, r3
    3494:	2301      	movs	r3, #1
    3496:	4313      	orrs	r3, r2
		disp->cur_img = 0;
    3498:	700b      	strb	r3, [r1, #0]
	start_image(disp, current_img(disp));
    349a:	0028      	movs	r0, r5
    349c:	f7ff fef2 	bl	3284 <current_img>
    34a0:	0001      	movs	r1, r0
    34a2:	e7a1      	b.n	33e8 <show_row+0xd8>
	disp->cur_img++;
    34a4:	0021      	movs	r1, r4
	if (disp->text) {
    34a6:	2320      	movs	r3, #32
	disp->cur_img++;
    34a8:	3135      	adds	r1, #53	; 0x35
    34aa:	7808      	ldrb	r0, [r1, #0]
	if (disp->text) {
    34ac:	4013      	ands	r3, r2
	disp->cur_img++;
    34ae:	3001      	adds	r0, #1
    34b0:	b2c0      	uxtb	r0, r0
    34b2:	7008      	strb	r0, [r1, #0]
	if (disp->text) {
    34b4:	2b00      	cmp	r3, #0
    34b6:	d00a      	beq.n	34ce <show_row+0x1be>
		return (disp->str[disp->cur_img] == '\0');
    34b8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    34ba:	5c18      	ldrb	r0, [r3, r0]
    34bc:	4243      	negs	r3, r0
    34be:	4143      	adcs	r3, r0
		return (disp->cur_img >= disp->img_count);
    34c0:	b2db      	uxtb	r3, r3
	if (last_frame(disp)) {
    34c2:	2b00      	cmp	r3, #0
    34c4:	d0e9      	beq.n	349a <show_row+0x18a>
		if (!disp->loop) {
    34c6:	06d3      	lsls	r3, r2, #27
    34c8:	d5cb      	bpl.n	3462 <show_row+0x152>
		disp->cur_img = 0;
    34ca:	2300      	movs	r3, #0
    34cc:	e7e4      	b.n	3498 <show_row+0x188>
		return (disp->cur_img >= disp->img_count);
    34ce:	3434      	adds	r4, #52	; 0x34
    34d0:	7824      	ldrb	r4, [r4, #0]
    34d2:	42a0      	cmp	r0, r4
    34d4:	415b      	adcs	r3, r3
    34d6:	e7f3      	b.n	34c0 <show_row+0x1b0>
    34d8:	0000d702 	.word	0x0000d702

000034dc <mb_display_print>:
{
    34dc:	b408      	push	{r3}
    34de:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    34e0:	0004      	movs	r4, r0
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    34e2:	0027      	movs	r7, r4
{
    34e4:	ad09      	add	r5, sp, #36	; 0x24
    34e6:	cd08      	ldmia	r5!, {r3}
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    34e8:	3758      	adds	r7, #88	; 0x58
{
    34ea:	9100      	str	r1, [sp, #0]
    34ec:	0016      	movs	r6, r2
    34ee:	9301      	str	r3, [sp, #4]
	reset_display(disp);
    34f0:	f7ff fe26 	bl	3140 <reset_display>
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    34f4:	002b      	movs	r3, r5
    34f6:	9a01      	ldr	r2, [sp, #4]
    34f8:	2128      	movs	r1, #40	; 0x28
    34fa:	0038      	movs	r0, r7
	va_start(ap, fmt);
    34fc:	9503      	str	r5, [sp, #12]
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    34fe:	f7ff fddb 	bl	30b8 <vsnprintk>
	if (disp->str_buf[0] == '\0') {
    3502:	783b      	ldrb	r3, [r7, #0]
    3504:	2b00      	cmp	r3, #0
    3506:	d02a      	beq.n	355e <mb_display_print+0x82>
	disp->text = 1;
    3508:	0025      	movs	r5, r4
	disp->cur_img = 0;
    350a:	0022      	movs	r2, r4
    350c:	2100      	movs	r1, #0
	disp->str = disp->str_buf;
    350e:	6567      	str	r7, [r4, #84]	; 0x54
	disp->text = 1;
    3510:	353a      	adds	r5, #58	; 0x3a
	disp->cur_img = 0;
    3512:	3239      	adds	r2, #57	; 0x39
	disp->text = 1;
    3514:	782b      	ldrb	r3, [r5, #0]
	disp->cur_img = 0;
    3516:	7011      	strb	r1, [r2, #0]
	disp->loop = !!(mode & MB_DISPLAY_FLAG_LOOP);
    3518:	9a00      	ldr	r2, [sp, #0]
    351a:	3160      	adds	r1, #96	; 0x60
    351c:	03d2      	lsls	r2, r2, #15
    351e:	430b      	orrs	r3, r1
    3520:	0fd2      	lsrs	r2, r2, #31
    3522:	3950      	subs	r1, #80	; 0x50
    3524:	0112      	lsls	r2, r2, #4
    3526:	438b      	bics	r3, r1
    3528:	4313      	orrs	r3, r2
    352a:	702b      	strb	r3, [r5, #0]
	switch (mode & MODE_MASK) {
    352c:	466b      	mov	r3, sp
    352e:	881b      	ldrh	r3, [r3, #0]
    3530:	2b01      	cmp	r3, #1
    3532:	d01b      	beq.n	356c <mb_display_print+0x90>
    3534:	2b00      	cmp	r3, #0
    3536:	d001      	beq.n	353c <mb_display_print+0x60>
    3538:	2b02      	cmp	r3, #2
    353a:	d110      	bne.n	355e <mb_display_print+0x82>
	if (duration) {
    353c:	2e00      	cmp	r6, #0
    353e:	d012      	beq.n	3566 <mb_display_print+0x8a>
		disp->duration = duration / scroll_steps(disp);
    3540:	2106      	movs	r1, #6
    3542:	0030      	movs	r0, r6
    3544:	f7fc fe8e 	bl	264 <__aeabi_idiv>
    3548:	6520      	str	r0, [r4, #80]	; 0x50
	disp->scroll = SCROLL_START;
    354a:	2207      	movs	r2, #7
    354c:	782b      	ldrb	r3, [r5, #0]
	start_image(disp, get_font(' '));
    354e:	490a      	ldr	r1, [pc, #40]	; (3578 <mb_display_print+0x9c>)
	disp->scroll = SCROLL_START;
    3550:	4393      	bics	r3, r2
	disp->first = 1;
    3552:	3202      	adds	r2, #2
    3554:	4313      	orrs	r3, r2
    3556:	702b      	strb	r3, [r5, #0]
	start_image(disp, get_font(' '));
    3558:	0020      	movs	r0, r4
    355a:	f7ff fe03 	bl	3164 <start_image>
}
    355e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    3560:	bc08      	pop	{r3}
    3562:	b001      	add	sp, #4
    3564:	4718      	bx	r3
		disp->duration = SCROLL_DEFAULT_DURATION;
    3566:	2350      	movs	r3, #80	; 0x50
    3568:	6523      	str	r3, [r4, #80]	; 0x50
    356a:	e7ee      	b.n	354a <mb_display_print+0x6e>
		start_single(disp, duration);
    356c:	0031      	movs	r1, r6
    356e:	0020      	movs	r0, r4
    3570:	f7ff feaa 	bl	32c8 <start_single>
		break;
    3574:	e7f3      	b.n	355e <mb_display_print+0x82>
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	0000d702 	.word	0x0000d702

0000357c <mb_display_get>:
}
    357c:	4800      	ldr	r0, [pc, #0]	; (3580 <mb_display_get+0x4>)
    357e:	4770      	bx	lr
    3580:	200021c8 	.word	0x200021c8

00003584 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    3584:	b510      	push	{r4, lr}
    3586:	f3ef 8210 	mrs	r2, PRIMASK
    358a:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    358c:	4915      	ldr	r1, [pc, #84]	; (35e4 <_m16src_stop+0x60>)
    358e:	780b      	ldrb	r3, [r1, #0]
    3590:	2b00      	cmp	r3, #0
    3592:	d105      	bne.n	35a0 <_m16src_stop+0x1c>
	if (key) {
    3594:	2a00      	cmp	r2, #0
    3596:	d100      	bne.n	359a <_m16src_stop+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    3598:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    359a:	2045      	movs	r0, #69	; 0x45
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    359c:	4240      	negs	r0, r0
    359e:	e013      	b.n	35c8 <_m16src_stop+0x44>
	if (--m16src_ref) {
    35a0:	3b01      	subs	r3, #1
    35a2:	b2db      	uxtb	r3, r3
    35a4:	700b      	strb	r3, [r1, #0]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d004      	beq.n	35b4 <_m16src_stop+0x30>
	if (key) {
    35aa:	2a00      	cmp	r2, #0
    35ac:	d100      	bne.n	35b0 <_m16src_stop+0x2c>
	__asm__ volatile("cpsie i" : : : "memory");
    35ae:	b662      	cpsie	i
		return -EBUSY;
    35b0:	2010      	movs	r0, #16
    35b2:	e7f3      	b.n	359c <_m16src_stop+0x18>
	if (m16src_grd) {
    35b4:	4b0c      	ldr	r3, [pc, #48]	; (35e8 <_m16src_stop+0x64>)
    35b6:	2001      	movs	r0, #1
    35b8:	781c      	ldrb	r4, [r3, #0]
    35ba:	2c00      	cmp	r4, #0
    35bc:	d005      	beq.n	35ca <_m16src_stop+0x46>
		m16src_ref++;
    35be:	7008      	strb	r0, [r1, #0]
	if (key) {
    35c0:	2a00      	cmp	r2, #0
    35c2:	d10d      	bne.n	35e0 <_m16src_stop+0x5c>
	__asm__ volatile("cpsie i" : : : "memory");
    35c4:	b662      	cpsie	i
		return -EAGAIN;
    35c6:	380c      	subs	r0, #12

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    35c8:	bd10      	pop	{r4, pc}
	m16src_grd = 1;
    35ca:	7018      	strb	r0, [r3, #0]
	if (key) {
    35cc:	2a00      	cmp	r2, #0
    35ce:	d100      	bne.n	35d2 <_m16src_stop+0x4e>
	__asm__ volatile("cpsie i" : : : "memory");
    35d0:	b662      	cpsie	i
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    35d2:	2280      	movs	r2, #128	; 0x80
    35d4:	2101      	movs	r1, #1
	m16src_grd = 0;
    35d6:	2000      	movs	r0, #0
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    35d8:	05d2      	lsls	r2, r2, #23
    35da:	6051      	str	r1, [r2, #4]
	m16src_grd = 0;
    35dc:	7018      	strb	r0, [r3, #0]
	return 0;
    35de:	e7f3      	b.n	35c8 <_m16src_stop+0x44>
		return -EAGAIN;
    35e0:	200b      	movs	r0, #11
    35e2:	e7db      	b.n	359c <_m16src_stop+0x18>
    35e4:	20000026 	.word	0x20000026
    35e8:	20000025 	.word	0x20000025

000035ec <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    35ec:	2200      	movs	r2, #0
{
    35ee:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    35f0:	0010      	movs	r0, r2
    35f2:	2101      	movs	r1, #1
    35f4:	f7ff fa40 	bl	2a78 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    35f8:	2000      	movs	r0, #0
    35fa:	f7ff fa13 	bl	2a24 <_arch_irq_enable>

	return 0;
}
    35fe:	2000      	movs	r0, #0
    3600:	bd10      	pop	{r4, pc}
	...

00003604 <_m16src_start>:
{
    3604:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    3606:	f3ef 8310 	mrs	r3, PRIMASK
    360a:	b672      	cpsid	i
	if (m16src_ref++) {
    360c:	4a27      	ldr	r2, [pc, #156]	; (36ac <_m16src_start+0xa8>)
    360e:	7810      	ldrb	r0, [r2, #0]
    3610:	1c44      	adds	r4, r0, #1
    3612:	7014      	strb	r4, [r2, #0]
    3614:	2800      	cmp	r0, #0
    3616:	d00b      	beq.n	3630 <_m16src_start+0x2c>
	if (key) {
    3618:	2b00      	cmp	r3, #0
    361a:	d100      	bne.n	361e <_m16src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    361c:	b662      	cpsie	i
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    361e:	2280      	movs	r2, #128	; 0x80
    3620:	4b23      	ldr	r3, [pc, #140]	; (36b0 <_m16src_start+0xac>)
    3622:	05d2      	lsls	r2, r2, #23
    3624:	58d3      	ldr	r3, [r2, r3]
		return 0;
    3626:	2000      	movs	r0, #0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    3628:	03db      	lsls	r3, r3, #15
    362a:	d400      	bmi.n	362e <_m16src_start+0x2a>
		return -EINPROGRESS;
    362c:	3844      	subs	r0, #68	; 0x44
}
    362e:	bd70      	pop	{r4, r5, r6, pc}
	if (m16src_grd) {
    3630:	4e20      	ldr	r6, [pc, #128]	; (36b4 <_m16src_start+0xb0>)
    3632:	7834      	ldrb	r4, [r6, #0]
    3634:	2c00      	cmp	r4, #0
    3636:	d006      	beq.n	3646 <_m16src_start+0x42>
		m16src_ref--;
    3638:	7010      	strb	r0, [r2, #0]
	if (key) {
    363a:	2b00      	cmp	r3, #0
    363c:	d100      	bne.n	3640 <_m16src_start+0x3c>
	__asm__ volatile("cpsie i" : : : "memory");
    363e:	b662      	cpsie	i
		return -EAGAIN;
    3640:	200b      	movs	r0, #11
    3642:	4240      	negs	r0, r0
    3644:	e7f3      	b.n	362e <_m16src_start+0x2a>
	m16src_grd = 1;
    3646:	2201      	movs	r2, #1
    3648:	7032      	strb	r2, [r6, #0]
	if (key) {
    364a:	2b00      	cmp	r3, #0
    364c:	d100      	bne.n	3650 <_m16src_start+0x4c>
	__asm__ volatile("cpsie i" : : : "memory");
    364e:	b662      	cpsie	i
    3650:	2480      	movs	r4, #128	; 0x80
    3652:	4d19      	ldr	r5, [pc, #100]	; (36b8 <_m16src_start+0xb4>)
    3654:	05e4      	lsls	r4, r4, #23
	if (blocking) {
    3656:	2900      	cmp	r1, #0
    3658:	d024      	beq.n	36a4 <_m16src_start+0xa0>
		irq_disable(POWER_CLOCK_IRQn);
    365a:	2000      	movs	r0, #0
    365c:	f7ff f9ee 	bl	2a3c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    3660:	2300      	movs	r3, #0
		intenset = NRF_CLOCK->INTENSET;
    3662:	22c1      	movs	r2, #193	; 0xc1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    3664:	606b      	str	r3, [r5, #4]
		intenset = NRF_CLOCK->INTENSET;
    3666:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    3668:	3301      	adds	r3, #1
		intenset = NRF_CLOCK->INTENSET;
    366a:	58a1      	ldr	r1, [r4, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    366c:	50a3      	str	r3, [r4, r2]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    366e:	6023      	str	r3, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    3670:	686b      	ldr	r3, [r5, #4]
    3672:	2b00      	cmp	r3, #0
    3674:	d012      	beq.n	369c <_m16src_start+0x98>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    3676:	2300      	movs	r3, #0
    3678:	606b      	str	r3, [r5, #4]
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    367a:	3301      	adds	r3, #1
    367c:	4219      	tst	r1, r3
    367e:	d102      	bne.n	3686 <_m16src_start+0x82>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    3680:	22c2      	movs	r2, #194	; 0xc2
    3682:	0092      	lsls	r2, r2, #2
    3684:	50a3      	str	r3, [r4, r2]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3686:	23c0      	movs	r3, #192	; 0xc0
    3688:	2101      	movs	r1, #1
    368a:	4a0c      	ldr	r2, [pc, #48]	; (36bc <_m16src_start+0xb8>)
    368c:	005b      	lsls	r3, r3, #1
    368e:	50d1      	str	r1, [r2, r3]
		irq_enable(POWER_CLOCK_IRQn);
    3690:	2000      	movs	r0, #0
    3692:	f7ff f9c7 	bl	2a24 <_arch_irq_enable>
	m16src_grd = 0;
    3696:	2300      	movs	r3, #0
    3698:	7033      	strb	r3, [r6, #0]
    369a:	e7c0      	b.n	361e <_m16src_start+0x1a>
			__WFE();
    369c:	bf20      	wfe
			__SEV();
    369e:	bf40      	sev
			__WFE();
    36a0:	bf20      	wfe
    36a2:	e7e5      	b.n	3670 <_m16src_start+0x6c>
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    36a4:	2301      	movs	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    36a6:	6069      	str	r1, [r5, #4]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    36a8:	6023      	str	r3, [r4, #0]
    36aa:	e7f4      	b.n	3696 <_m16src_start+0x92>
    36ac:	20000026 	.word	0x20000026
    36b0:	0000040c 	.word	0x0000040c
    36b4:	20000025 	.word	0x20000025
    36b8:	400000fc 	.word	0x400000fc
    36bc:	e000e100 	.word	0xe000e100

000036c0 <_k32src_start>:
{
    36c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36c2:	0007      	movs	r7, r0
    36c4:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    36c6:	f3ef 8310 	mrs	r3, PRIMASK
    36ca:	b672      	cpsid	i
	if (k32src_initialized) {
    36cc:	4a2d      	ldr	r2, [pc, #180]	; (3784 <_k32src_start+0xc4>)
    36ce:	7811      	ldrb	r1, [r2, #0]
    36d0:	2900      	cmp	r1, #0
    36d2:	d00c      	beq.n	36ee <_k32src_start+0x2e>
	if (key) {
    36d4:	2b00      	cmp	r3, #0
    36d6:	d100      	bne.n	36da <_k32src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    36d8:	b662      	cpsie	i
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    36da:	2383      	movs	r3, #131	; 0x83
    36dc:	2280      	movs	r2, #128	; 0x80
    36de:	00db      	lsls	r3, r3, #3
    36e0:	05d2      	lsls	r2, r2, #23
    36e2:	58d3      	ldr	r3, [r2, r3]
		return 0;
    36e4:	2000      	movs	r0, #0
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    36e6:	03db      	lsls	r3, r3, #15
    36e8:	d400      	bmi.n	36ec <_k32src_start+0x2c>
		return -EINPROGRESS;
    36ea:	3844      	subs	r0, #68	; 0x44
}
    36ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    36ee:	2101      	movs	r1, #1
    36f0:	7011      	strb	r1, [r2, #0]
	if (key) {
    36f2:	2b00      	cmp	r3, #0
    36f4:	d100      	bne.n	36f8 <_k32src_start+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    36f6:	b662      	cpsie	i
	irq_disable(POWER_CLOCK_IRQn);
    36f8:	2000      	movs	r0, #0
    36fa:	f7ff f99f 	bl	2a3c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    36fe:	2200      	movs	r2, #0
    3700:	4c21      	ldr	r4, [pc, #132]	; (3788 <_k32src_start+0xc8>)
    3702:	2380      	movs	r3, #128	; 0x80
    3704:	60a2      	str	r2, [r4, #8]
	intenset = NRF_CLOCK->INTENSET;
    3706:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    3708:	2002      	movs	r0, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    370a:	05db      	lsls	r3, r3, #23
	intenset = NRF_CLOCK->INTENSET;
    370c:	0092      	lsls	r2, r2, #2
    370e:	5899      	ldr	r1, [r3, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    3710:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    3712:	22a3      	movs	r2, #163	; 0xa3
    3714:	00d2      	lsls	r2, r2, #3
    3716:	509d      	str	r5, [r3, r2]
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    3718:	2201      	movs	r2, #1
    371a:	609a      	str	r2, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    371c:	68a2      	ldr	r2, [r4, #8]
    371e:	2a00      	cmp	r2, #0
    3720:	d02c      	beq.n	377c <_k32src_start+0xbc>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    3722:	2200      	movs	r2, #0
    3724:	60a2      	str	r2, [r4, #8]
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    3726:	3202      	adds	r2, #2
    3728:	4211      	tst	r1, r2
    372a:	d102      	bne.n	3732 <_k32src_start+0x72>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    372c:	21c2      	movs	r1, #194	; 0xc2
    372e:	0089      	lsls	r1, r1, #2
    3730:	505a      	str	r2, [r3, r1]
    3732:	23c0      	movs	r3, #192	; 0xc0
    3734:	2601      	movs	r6, #1
    3736:	4a15      	ldr	r2, [pc, #84]	; (378c <_k32src_start+0xcc>)
    3738:	005b      	lsls	r3, r3, #1
    373a:	50d6      	str	r6, [r2, r3]
	irq_enable(POWER_CLOCK_IRQn);
    373c:	2000      	movs	r0, #0
    373e:	f7ff f971 	bl	2a24 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    3742:	2380      	movs	r3, #128	; 0x80
    3744:	22c2      	movs	r2, #194	; 0xc2
    3746:	2018      	movs	r0, #24
    3748:	0092      	lsls	r2, r2, #2
    374a:	05db      	lsls	r3, r3, #23
    374c:	5098      	str	r0, [r3, r2]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    374e:	2103      	movs	r1, #3
	NRF_CLOCK->EVENTS_DONE = 0;
    3750:	2200      	movs	r2, #0
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    3752:	4029      	ands	r1, r5
	NRF_CLOCK->EVENTS_DONE = 0;
    3754:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    3756:	6162      	str	r2, [r4, #20]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    3758:	4291      	cmp	r1, r2
    375a:	d1be      	bne.n	36da <_k32src_start+0x1a>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    375c:	22a7      	movs	r2, #167	; 0xa7
    375e:	2410      	movs	r4, #16
    3760:	00d2      	lsls	r2, r2, #3
    3762:	509c      	str	r4, [r3, r2]
		NRF_CLOCK->INTENSET =
    3764:	22c1      	movs	r2, #193	; 0xc1
    3766:	0092      	lsls	r2, r2, #2
    3768:	5098      	str	r0, [r3, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    376a:	509e      	str	r6, [r3, r2]
		err = _m16src_start(dev, false);
    376c:	0038      	movs	r0, r7
    376e:	f7ff ff49 	bl	3604 <_m16src_start>
		if (!err) {
    3772:	2800      	cmp	r0, #0
    3774:	d1b1      	bne.n	36da <_k32src_start+0x1a>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3776:	4b06      	ldr	r3, [pc, #24]	; (3790 <_k32src_start+0xd0>)
    3778:	605e      	str	r6, [r3, #4]
    377a:	e7ae      	b.n	36da <_k32src_start+0x1a>
		__WFE();
    377c:	bf20      	wfe
		__SEV();
    377e:	bf40      	sev
		__WFE();
    3780:	bf20      	wfe
    3782:	e7cb      	b.n	371c <_k32src_start+0x5c>
    3784:	20000024 	.word	0x20000024
    3788:	400000fc 	.word	0x400000fc
    378c:	e000e100 	.word	0xe000e100
    3790:	e000e1fc 	.word	0xe000e1fc

00003794 <_power_clock_isr>:
{
    3794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    3796:	4c24      	ldr	r4, [pc, #144]	; (3828 <_power_clock_isr+0x94>)
    3798:	2380      	movs	r3, #128	; 0x80
    379a:	68e2      	ldr	r2, [r4, #12]
    379c:	05db      	lsls	r3, r3, #23
    379e:	4694      	mov	ip, r2
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    37a0:	22c1      	movs	r2, #193	; 0xc1
    37a2:	0092      	lsls	r2, r2, #2
    37a4:	5899      	ldr	r1, [r3, r2]
    37a6:	2201      	movs	r2, #1
    37a8:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    37aa:	4920      	ldr	r1, [pc, #128]	; (382c <_power_clock_isr+0x98>)
{
    37ac:	0005      	movs	r5, r0
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    37ae:	585e      	ldr	r6, [r3, r1]
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    37b0:	9200      	str	r2, [sp, #0]
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    37b2:	6867      	ldr	r7, [r4, #4]
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    37b4:	68a0      	ldr	r0, [r4, #8]
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    37b6:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    37b8:	6962      	ldr	r2, [r4, #20]
    37ba:	9201      	str	r2, [sp, #4]
	if (pof) {
    37bc:	4662      	mov	r2, ip
    37be:	2a00      	cmp	r2, #0
    37c0:	d001      	beq.n	37c6 <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    37c2:	2200      	movs	r2, #0
    37c4:	60e2      	str	r2, [r4, #12]
	if (hf) {
    37c6:	2f00      	cmp	r7, #0
    37c8:	d001      	beq.n	37ce <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    37ca:	2700      	movs	r7, #0
    37cc:	6067      	str	r7, [r4, #4]
	if (hf_intenset && hf_stat) {
    37ce:	9a00      	ldr	r2, [sp, #0]
    37d0:	2a00      	cmp	r2, #0
    37d2:	d006      	beq.n	37e2 <_power_clock_isr+0x4e>
    37d4:	03f2      	lsls	r2, r6, #15
    37d6:	d504      	bpl.n	37e2 <_power_clock_isr+0x4e>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    37d8:	26c2      	movs	r6, #194	; 0xc2
    37da:	2201      	movs	r2, #1
    37dc:	00b6      	lsls	r6, r6, #2
    37de:	519a      	str	r2, [r3, r6]
		NRF_CLOCK->TASKS_CAL = 1;
    37e0:	611a      	str	r2, [r3, #16]
	if (lf) {
    37e2:	2800      	cmp	r0, #0
    37e4:	d001      	beq.n	37ea <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    37e6:	2300      	movs	r3, #0
    37e8:	60a3      	str	r3, [r4, #8]
	if (done) {
    37ea:	2900      	cmp	r1, #0
    37ec:	d008      	beq.n	3800 <_power_clock_isr+0x6c>
		NRF_CLOCK->EVENTS_DONE = 0;
    37ee:	2100      	movs	r1, #0
		err = _m16src_stop(dev, NULL);
    37f0:	0028      	movs	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    37f2:	6121      	str	r1, [r4, #16]
		err = _m16src_stop(dev, NULL);
    37f4:	f7ff fec6 	bl	3584 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    37f8:	2380      	movs	r3, #128	; 0x80
    37fa:	2201      	movs	r2, #1
    37fc:	05db      	lsls	r3, r3, #23
    37fe:	615a      	str	r2, [r3, #20]
	if (ctto) {
    3800:	9b01      	ldr	r3, [sp, #4]
    3802:	2b00      	cmp	r3, #0
    3804:	d00e      	beq.n	3824 <_power_clock_isr+0x90>
		NRF_CLOCK->EVENTS_CTTO = 0;
    3806:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    3808:	23c1      	movs	r3, #193	; 0xc1
    380a:	2280      	movs	r2, #128	; 0x80
		NRF_CLOCK->EVENTS_CTTO = 0;
    380c:	6161      	str	r1, [r4, #20]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    380e:	2401      	movs	r4, #1
    3810:	009b      	lsls	r3, r3, #2
    3812:	05d2      	lsls	r2, r2, #23
    3814:	50d4      	str	r4, [r2, r3]
		err = _m16src_start(dev, false);
    3816:	0028      	movs	r0, r5
    3818:	f7ff fef4 	bl	3604 <_m16src_start>
		if (!err) {
    381c:	2800      	cmp	r0, #0
    381e:	d101      	bne.n	3824 <_power_clock_isr+0x90>
    3820:	4b03      	ldr	r3, [pc, #12]	; (3830 <_power_clock_isr+0x9c>)
    3822:	605c      	str	r4, [r3, #4]
}
    3824:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	400000fc 	.word	0x400000fc
    382c:	0000040c 	.word	0x0000040c
    3830:	e000e1fc 	.word	0xe000e1fc

00003834 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3834:	6803      	ldr	r3, [r0, #0]
{
    3836:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3838:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    383a:	2501      	movs	r5, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    383c:	689a      	ldr	r2, [r3, #8]
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    383e:	261f      	movs	r6, #31
		if ((data->gpiote_chan_mask & BIT(i)) &&
    3840:	6883      	ldr	r3, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    3842:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    3844:	68dc      	ldr	r4, [r3, #12]
    3846:	0023      	movs	r3, r4
    3848:	40c3      	lsrs	r3, r0
    384a:	422b      	tst	r3, r5
    384c:	d008      	beq.n	3860 <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    384e:	0003      	movs	r3, r0
    3850:	3345      	adds	r3, #69	; 0x45
    3852:	33ff      	adds	r3, #255	; 0xff
    3854:	009b      	lsls	r3, r3, #2
    3856:	589b      	ldr	r3, [r3, r2]
    3858:	0a1b      	lsrs	r3, r3, #8
    385a:	4033      	ands	r3, r6
		if ((data->gpiote_chan_mask & BIT(i)) &&
    385c:	428b      	cmp	r3, r1
    385e:	d003      	beq.n	3868 <gpiote_find_channel+0x34>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    3860:	3001      	adds	r0, #1
    3862:	2804      	cmp	r0, #4
    3864:	d1ef      	bne.n	3846 <gpiote_find_channel+0x12>
			return i;
		}
	}

	return -ENODEV;
    3866:	3817      	subs	r0, #23
}
    3868:	bd70      	pop	{r4, r5, r6, pc}

0000386a <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
    386a:	b530      	push	{r4, r5, lr}
    386c:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    386e:	6802      	ldr	r2, [r0, #0]
    3870:	20a2      	movs	r0, #162	; 0xa2
    3872:	6892      	ldr	r2, [r2, #8]
    3874:	00c0      	lsls	r0, r0, #3
    3876:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
    3878:	5822      	ldr	r2, [r4, r0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    387a:	2900      	cmp	r1, #0
    387c:	d102      	bne.n	3884 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    387e:	40ea      	lsrs	r2, r5
    3880:	3101      	adds	r1, #1
    3882:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
    3884:	2000      	movs	r0, #0
		*value = gpio->IN;
    3886:	601a      	str	r2, [r3, #0]
}
    3888:	bd30      	pop	{r4, r5, pc}
	...

0000388c <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    388c:	6800      	ldr	r0, [r0, #0]
    388e:	6880      	ldr	r0, [r0, #8]
    3890:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    3892:	2900      	cmp	r1, #0
    3894:	d10a      	bne.n	38ac <gpio_nrf5_write+0x20>
    3896:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    3898:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    389a:	2b00      	cmp	r3, #0
    389c:	d004      	beq.n	38a8 <gpio_nrf5_write+0x1c>
			gpio->OUTSET = BIT(pin);
    389e:	23a1      	movs	r3, #161	; 0xa1
    38a0:	00db      	lsls	r3, r3, #3
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    38a2:	50c1      	str	r1, [r0, r3]
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    38a4:	2000      	movs	r0, #0
    38a6:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    38a8:	4b02      	ldr	r3, [pc, #8]	; (38b4 <gpio_nrf5_write+0x28>)
    38aa:	e7fa      	b.n	38a2 <gpio_nrf5_write+0x16>
		gpio->OUT = value;
    38ac:	4a02      	ldr	r2, [pc, #8]	; (38b8 <gpio_nrf5_write+0x2c>)
    38ae:	5083      	str	r3, [r0, r2]
    38b0:	e7f8      	b.n	38a4 <gpio_nrf5_write+0x18>
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	0000050c 	.word	0x0000050c
    38b8:	00000504 	.word	0x00000504

000038bc <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    38bc:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    38be:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    38c0:	2a00      	cmp	r2, #0
    38c2:	d008      	beq.n	38d6 <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    38c4:	681a      	ldr	r2, [r3, #0]
    38c6:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    38c8:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    38ca:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    38cc:	2a00      	cmp	r2, #0
    38ce:	d100      	bne.n	38d2 <gpio_nrf5_manage_callback+0x16>
		list->tail = list->head;
    38d0:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    38d2:	2000      	movs	r0, #0
    38d4:	bd10      	pop	{r4, pc}
    38d6:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    38d8:	2800      	cmp	r0, #0
    38da:	d0fa      	beq.n	38d2 <gpio_nrf5_manage_callback+0x16>
		if (test == node) {
    38dc:	4281      	cmp	r1, r0
    38de:	d10f      	bne.n	3900 <gpio_nrf5_manage_callback+0x44>
    38e0:	685c      	ldr	r4, [r3, #4]
    38e2:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    38e4:	2a00      	cmp	r2, #0
    38e6:	d106      	bne.n	38f6 <gpio_nrf5_manage_callback+0x3a>
		list->head = node->next;
    38e8:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    38ea:	42a1      	cmp	r1, r4
    38ec:	d100      	bne.n	38f0 <gpio_nrf5_manage_callback+0x34>
			list->tail = list->head;
    38ee:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    38f0:	2300      	movs	r3, #0
    38f2:	600b      	str	r3, [r1, #0]
    38f4:	e7ed      	b.n	38d2 <gpio_nrf5_manage_callback+0x16>
		prev_node->next = node->next;
    38f6:	6010      	str	r0, [r2, #0]
		if (list->tail == node) {
    38f8:	42a1      	cmp	r1, r4
    38fa:	d1f9      	bne.n	38f0 <gpio_nrf5_manage_callback+0x34>
			list->tail = prev_node;
    38fc:	605a      	str	r2, [r3, #4]
    38fe:	e7f7      	b.n	38f0 <gpio_nrf5_manage_callback+0x34>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    3900:	0002      	movs	r2, r0
    3902:	6800      	ldr	r0, [r0, #0]
    3904:	e7e8      	b.n	38d8 <gpio_nrf5_manage_callback+0x1c>

00003906 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    3906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3908:	6803      	ldr	r3, [r0, #0]
{
    390a:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    390c:	689b      	ldr	r3, [r3, #8]
{
    390e:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3910:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    3912:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    3914:	2900      	cmp	r1, #0
    3916:	d114      	bne.n	3942 <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    3918:	0011      	movs	r1, r2
    391a:	f7ff ff8b 	bl	3834 <gpiote_find_channel>
		if (i < 0) {
    391e:	2800      	cmp	r0, #0
    3920:	db0e      	blt.n	3940 <gpio_nrf5_enable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    3922:	2301      	movs	r3, #1
    3924:	001a      	movs	r2, r3
    3926:	40ba      	lsls	r2, r7
    3928:	68b1      	ldr	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    392a:	4083      	lsls	r3, r0
		data->pin_callback_enables |= BIT(pin);
    392c:	430a      	orrs	r2, r1
    392e:	60b2      	str	r2, [r6, #8]
		gpiote->EVENTS_IN[i] = 0;
    3930:	0002      	movs	r2, r0
    3932:	3240      	adds	r2, #64	; 0x40
    3934:	0092      	lsls	r2, r2, #2
    3936:	5154      	str	r4, [r2, r5]
		gpiote->INTENSET = BIT(i);
    3938:	22c1      	movs	r2, #193	; 0xc1
	} else {
		return -ENOTSUP;
	}

	return 0;
    393a:	0020      	movs	r0, r4
		gpiote->INTENSET = BIT(i);
    393c:	0092      	lsls	r2, r2, #2
    393e:	50ab      	str	r3, [r5, r2]
}
    3940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    3942:	2023      	movs	r0, #35	; 0x23
    3944:	4240      	negs	r0, r0
    3946:	e7fb      	b.n	3940 <gpio_nrf5_enable_callback+0x3a>

00003948 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    3948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    394a:	6803      	ldr	r3, [r0, #0]
{
    394c:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    394e:	689b      	ldr	r3, [r3, #8]
{
    3950:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3952:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    3954:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    3956:	2900      	cmp	r1, #0
    3958:	d110      	bne.n	397c <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    395a:	0011      	movs	r1, r2
    395c:	f7ff ff6a 	bl	3834 <gpiote_find_channel>
		if (i < 0) {
    3960:	2800      	cmp	r0, #0
    3962:	db0a      	blt.n	397a <gpio_nrf5_disable_callback+0x32>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    3964:	2301      	movs	r3, #1
    3966:	001a      	movs	r2, r3
    3968:	40b2      	lsls	r2, r6
    396a:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    396c:	4083      	lsls	r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    396e:	4391      	bics	r1, r2
		gpiote->INTENCLR = BIT(i);
    3970:	22c2      	movs	r2, #194	; 0xc2
	} else {
		return -ENOTSUP;
	}

	return 0;
    3972:	0020      	movs	r0, r4
		gpiote->INTENCLR = BIT(i);
    3974:	0092      	lsls	r2, r2, #2
		data->pin_callback_enables &= ~(BIT(pin));
    3976:	60a9      	str	r1, [r5, #8]
		gpiote->INTENCLR = BIT(i);
    3978:	50bb      	str	r3, [r7, r2]
}
    397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    397c:	2023      	movs	r0, #35	; 0x23
    397e:	4240      	negs	r0, r0
    3980:	e7fb      	b.n	397a <gpio_nrf5_disable_callback+0x32>

00003982 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    3982:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    3984:	2200      	movs	r2, #0
    3986:	2101      	movs	r1, #1
    3988:	2006      	movs	r0, #6
    398a:	f7ff f875 	bl	2a78 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    398e:	2006      	movs	r0, #6
    3990:	f7ff f848 	bl	2a24 <_arch_irq_enable>

	return 0;
}
    3994:	2000      	movs	r0, #0
    3996:	bd10      	pop	{r4, pc}

00003998 <gpio_nrf5_port_isr>:
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3998:	6803      	ldr	r3, [r0, #0]
{
    399a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    399c:	689b      	ldr	r3, [r3, #8]
{
    399e:	0004      	movs	r4, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    39a0:	689b      	ldr	r3, [r3, #8]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    39a2:	2701      	movs	r7, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    39a4:	9301      	str	r3, [sp, #4]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    39a6:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    39a8:	001a      	movs	r2, r3
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    39aa:	6885      	ldr	r5, [r0, #8]
    39ac:	9801      	ldr	r0, [sp, #4]
    39ae:	0099      	lsls	r1, r3, #2
    39b0:	1841      	adds	r1, r0, r1
		if (gpiote->EVENTS_IN[i]) {
    39b2:	0008      	movs	r0, r1
    39b4:	30fc      	adds	r0, #252	; 0xfc
    39b6:	6846      	ldr	r6, [r0, #4]
    39b8:	2e00      	cmp	r6, #0
    39ba:	d00a      	beq.n	39d2 <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    39bc:	2600      	movs	r6, #0
    39be:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    39c0:	20a2      	movs	r0, #162	; 0xa2
    39c2:	00c0      	lsls	r0, r0, #3
    39c4:	5809      	ldr	r1, [r1, r0]
    39c6:	201f      	movs	r0, #31
    39c8:	0a09      	lsrs	r1, r1, #8
    39ca:	4001      	ands	r1, r0
    39cc:	0038      	movs	r0, r7
    39ce:	4088      	lsls	r0, r1
    39d0:	4302      	orrs	r2, r0
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    39d2:	3301      	adds	r3, #1
    39d4:	2b04      	cmp	r3, #4
    39d6:	d1e9      	bne.n	39ac <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    39d8:	68ae      	ldr	r6, [r5, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    39da:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    39dc:	4016      	ands	r6, r2
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    39de:	f7ff f82d 	bl	2a3c <_arch_irq_disable>
    39e2:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    39e4:	2d00      	cmp	r5, #0
    39e6:	d103      	bne.n	39f0 <gpio_nrf5_port_isr+0x58>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    39e8:	2006      	movs	r0, #6
    39ea:	f7ff f81b 	bl	2a24 <_arch_irq_enable>
}
    39ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    39f0:	68ab      	ldr	r3, [r5, #8]
    39f2:	4233      	tst	r3, r6
    39f4:	d0f5      	beq.n	39e2 <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    39f6:	0032      	movs	r2, r6
    39f8:	0029      	movs	r1, r5
    39fa:	0020      	movs	r0, r4
    39fc:	686b      	ldr	r3, [r5, #4]
    39fe:	4798      	blx	r3
    3a00:	e7ef      	b.n	39e2 <gpio_nrf5_port_isr+0x4a>
	...

00003a04 <gpio_nrf5_config>:
{
    3a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a06:	0006      	movs	r6, r0
    3a08:	0014      	movs	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3a0a:	6802      	ldr	r2, [r0, #0]
{
    3a0c:	b085      	sub	sp, #20
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3a0e:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    3a10:	68b5      	ldr	r5, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3a12:	6890      	ldr	r0, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    3a14:	6817      	ldr	r7, [r2, #0]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3a16:	9003      	str	r0, [sp, #12]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    3a18:	2900      	cmp	r1, #0
    3a1a:	d002      	beq.n	3a22 <gpio_nrf5_config+0x1e>
		return -ENOTSUP;
    3a1c:	2023      	movs	r0, #35	; 0x23
			return -EIO;
    3a1e:	4240      	negs	r0, r0
    3a20:	e063      	b.n	3aea <gpio_nrf5_config+0xe6>
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    3a22:	2203      	movs	r2, #3
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    3a24:	20c0      	movs	r0, #192	; 0xc0
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    3a26:	1319      	asrs	r1, r3, #12
    3a28:	4011      	ands	r1, r2
    3a2a:	468c      	mov	ip, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    3a2c:	1399      	asrs	r1, r3, #14
    3a2e:	4011      	ands	r1, r2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    3a30:	0280      	lsls	r0, r0, #10
    3a32:	4018      	ands	r0, r3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    3a34:	9102      	str	r1, [sp, #8]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3a36:	21c0      	movs	r1, #192	; 0xc0
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    3a38:	9001      	str	r0, [sp, #4]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3a3a:	2080      	movs	r0, #128	; 0x80
    3a3c:	0089      	lsls	r1, r1, #2
    3a3e:	4019      	ands	r1, r3
			pull = GPIO_PULL_UP;
    3a40:	3209      	adds	r2, #9
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3a42:	0040      	lsls	r0, r0, #1
    3a44:	4281      	cmp	r1, r0
    3a46:	d004      	beq.n	3a52 <gpio_nrf5_config+0x4e>
		u8_t pull = GPIO_PULL_DISABLE;
    3a48:	4a35      	ldr	r2, [pc, #212]	; (3b20 <gpio_nrf5_config+0x11c>)
    3a4a:	1889      	adds	r1, r1, r2
    3a4c:	424a      	negs	r2, r1
    3a4e:	414a      	adcs	r2, r1
    3a50:	0092      	lsls	r2, r2, #2
		if (sense == GPIO_SENSE_INVALID) {
    3a52:	2180      	movs	r1, #128	; 0x80
    3a54:	9801      	ldr	r0, [sp, #4]
    3a56:	0249      	lsls	r1, r1, #9
    3a58:	4288      	cmp	r0, r1
    3a5a:	d101      	bne.n	3a60 <gpio_nrf5_config+0x5c>
			sense = GPIO_SENSE_DISABLE;
    3a5c:	2100      	movs	r1, #0
    3a5e:	9101      	str	r1, [sp, #4]
    3a60:	4660      	mov	r0, ip
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    3a62:	2101      	movs	r1, #1
    3a64:	0080      	lsls	r0, r0, #2
    3a66:	4684      	mov	ip, r0
    3a68:	420b      	tst	r3, r1
    3a6a:	d045      	beq.n	3af8 <gpio_nrf5_config+0xf4>
			if (pull == GPIO_PULL_UP) {
    3a6c:	2a0c      	cmp	r2, #12
    3a6e:	d13e      	bne.n	3aee <gpio_nrf5_config+0xea>
				gpio->OUTSET = BIT(pin);
    3a70:	20a1      	movs	r0, #161	; 0xa1
    3a72:	40a1      	lsls	r1, r4
    3a74:	00c0      	lsls	r0, r0, #3
				gpio->OUTCLR = BIT(pin);
    3a76:	5039      	str	r1, [r7, r0]
					      drive_strength[ds_low][ds_high] |
    3a78:	9902      	ldr	r1, [sp, #8]
					      GPIO_INPUT_DISCONNECT |
    3a7a:	482a      	ldr	r0, [pc, #168]	; (3b24 <gpio_nrf5_config+0x120>)
					      drive_strength[ds_low][ds_high] |
    3a7c:	4461      	add	r1, ip
    3a7e:	0089      	lsls	r1, r1, #2
					      GPIO_INPUT_DISCONNECT |
    3a80:	5808      	ldr	r0, [r1, r0]
    3a82:	2103      	movs	r1, #3
    3a84:	4301      	orrs	r1, r0
    3a86:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    3a88:	0021      	movs	r1, r4
    3a8a:	31c1      	adds	r1, #193	; 0xc1
    3a8c:	31ff      	adds	r1, #255	; 0xff
    3a8e:	0089      	lsls	r1, r1, #2
    3a90:	51ca      	str	r2, [r1, r7]
	if (flags & GPIO_INT) {
    3a92:	2002      	movs	r0, #2
    3a94:	4018      	ands	r0, r3
    3a96:	d028      	beq.n	3aea <gpio_nrf5_config+0xe6>
		if (flags & GPIO_INT_EDGE) {
    3a98:	069a      	lsls	r2, r3, #26
    3a9a:	d5bf      	bpl.n	3a1c <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    3a9c:	065a      	lsls	r2, r3, #25
    3a9e:	d439      	bmi.n	3b14 <gpio_nrf5_config+0x110>
				config |= GPIOTE_CFG_POL_L2H;
    3aa0:	2780      	movs	r7, #128	; 0x80
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    3aa2:	075b      	lsls	r3, r3, #29
    3aa4:	d438      	bmi.n	3b18 <gpio_nrf5_config+0x114>
				config |= GPIOTE_CFG_POL_TOGG;
    3aa6:	02bf      	lsls	r7, r7, #10
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    3aa8:	68e8      	ldr	r0, [r5, #12]
    3aaa:	f7fc fca9 	bl	400 <__popcountsi2>
    3aae:	2804      	cmp	r0, #4
    3ab0:	d034      	beq.n	3b1c <gpio_nrf5_config+0x118>
		int i = gpiote_find_channel(dev, pin);
    3ab2:	0030      	movs	r0, r6
    3ab4:	0021      	movs	r1, r4
    3ab6:	f7ff febd 	bl	3834 <gpiote_find_channel>
    3aba:	68ee      	ldr	r6, [r5, #12]
		if (i < 0) {
    3abc:	2800      	cmp	r0, #0
    3abe:	da03      	bge.n	3ac8 <gpio_nrf5_config+0xc4>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    3ac0:	43f0      	mvns	r0, r6
    3ac2:	f7fc fc93 	bl	3ec <__ffssi2>
    3ac6:	3801      	subs	r0, #1
		data->gpiote_chan_mask |= BIT(i);
    3ac8:	2301      	movs	r3, #1
    3aca:	001a      	movs	r2, r3
    3acc:	4082      	lsls	r2, r0
    3ace:	4316      	orrs	r6, r2
		config |= GPIOTE_CFG_PIN(pin);
    3ad0:	22f8      	movs	r2, #248	; 0xf8
    3ad2:	0224      	lsls	r4, r4, #8
    3ad4:	0152      	lsls	r2, r2, #5
    3ad6:	4014      	ands	r4, r2
		gpiote->CONFIG[i] = config;
    3ad8:	3045      	adds	r0, #69	; 0x45
		config |= GPIOTE_CFG_PIN(pin);
    3ada:	431c      	orrs	r4, r3
		gpiote->CONFIG[i] = config;
    3adc:	30ff      	adds	r0, #255	; 0xff
    3ade:	9b03      	ldr	r3, [sp, #12]
    3ae0:	0080      	lsls	r0, r0, #2
		config |= GPIOTE_CFG_PIN(pin);
    3ae2:	4327      	orrs	r7, r4
		data->gpiote_chan_mask |= BIT(i);
    3ae4:	60ee      	str	r6, [r5, #12]
		gpiote->CONFIG[i] = config;
    3ae6:	50c7      	str	r7, [r0, r3]
	return 0;
    3ae8:	2000      	movs	r0, #0
}
    3aea:	b005      	add	sp, #20
    3aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if (pull == GPIO_PULL_DOWN) {
    3aee:	2a04      	cmp	r2, #4
    3af0:	d1c2      	bne.n	3a78 <gpio_nrf5_config+0x74>
				gpio->OUTCLR = BIT(pin);
    3af2:	40a1      	lsls	r1, r4
    3af4:	480c      	ldr	r0, [pc, #48]	; (3b28 <gpio_nrf5_config+0x124>)
    3af6:	e7be      	b.n	3a76 <gpio_nrf5_config+0x72>
					      drive_strength[ds_low][ds_high] |
    3af8:	9902      	ldr	r1, [sp, #8]
    3afa:	480a      	ldr	r0, [pc, #40]	; (3b24 <gpio_nrf5_config+0x120>)
    3afc:	4461      	add	r1, ip
    3afe:	0089      	lsls	r1, r1, #2
    3b00:	5809      	ldr	r1, [r1, r0]
    3b02:	9801      	ldr	r0, [sp, #4]
    3b04:	430a      	orrs	r2, r1
    3b06:	4310      	orrs	r0, r2
			gpio->PIN_CNF[pin] = (sense |
    3b08:	0022      	movs	r2, r4
    3b0a:	32c1      	adds	r2, #193	; 0xc1
    3b0c:	32ff      	adds	r2, #255	; 0xff
    3b0e:	0092      	lsls	r2, r2, #2
    3b10:	51d0      	str	r0, [r2, r7]
    3b12:	e7be      	b.n	3a92 <gpio_nrf5_config+0x8e>
				config |= GPIOTE_CFG_POL_TOGG;
    3b14:	27c0      	movs	r7, #192	; 0xc0
    3b16:	e7c6      	b.n	3aa6 <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_L2H;
    3b18:	027f      	lsls	r7, r7, #9
    3b1a:	e7c5      	b.n	3aa8 <gpio_nrf5_config+0xa4>
			return -EIO;
    3b1c:	2005      	movs	r0, #5
    3b1e:	e77e      	b.n	3a1e <gpio_nrf5_config+0x1a>
    3b20:	fffffe00 	.word	0xfffffe00
    3b24:	0000d910 	.word	0x0000d910
    3b28:	0000050c 	.word	0x0000050c

00003b2c <i2c_set_scl>:

	return 0;
}

static void i2c_set_scl(struct i2c_bitbang *context, int state)
{
    3b2c:	b510      	push	{r4, lr}
	context->io->set_scl(context->io_context, state);
    3b2e:	6803      	ldr	r3, [r0, #0]
    3b30:	6840      	ldr	r0, [r0, #4]
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	4798      	blx	r3
}
    3b36:	bd10      	pop	{r4, pc}

00003b38 <i2c_set_sda>:

static void i2c_set_sda(struct i2c_bitbang *context, int state)
{
    3b38:	b510      	push	{r4, lr}
	context->io->set_sda(context->io_context, state);
    3b3a:	6803      	ldr	r3, [r0, #0]
    3b3c:	6840      	ldr	r0, [r0, #4]
    3b3e:	685b      	ldr	r3, [r3, #4]
    3b40:	4798      	blx	r3
}
    3b42:	bd10      	pop	{r4, pc}

00003b44 <i2c_get_sda>:

static int i2c_get_sda(struct i2c_bitbang *context)
{
    3b44:	b510      	push	{r4, lr}
	return context->io->get_sda(context->io_context);
    3b46:	6803      	ldr	r3, [r0, #0]
    3b48:	6840      	ldr	r0, [r0, #4]
    3b4a:	689b      	ldr	r3, [r3, #8]
    3b4c:	4798      	blx	r3
}
    3b4e:	bd10      	pop	{r4, pc}

00003b50 <i2c_delay>:

static void i2c_delay(unsigned int cycles_to_wait)
{
    3b50:	b570      	push	{r4, r5, r6, lr}
    3b52:	0004      	movs	r4, r0
	u32_t start = k_cycle_get_32();
    3b54:	f000 fd96 	bl	4684 <_timer_cycle_get_32>
    3b58:	0005      	movs	r5, r0

	/* Wait until the given number of cycles have passed */
	while (k_cycle_get_32() - start < cycles_to_wait) {
    3b5a:	f000 fd93 	bl	4684 <_timer_cycle_get_32>
    3b5e:	1b40      	subs	r0, r0, r5
    3b60:	42a0      	cmp	r0, r4
    3b62:	d3fa      	bcc.n	3b5a <i2c_delay+0xa>
	}
}
    3b64:	bd70      	pop	{r4, r5, r6, pc}

00003b66 <i2c_start>:

static void i2c_start(struct i2c_bitbang *context)
{
    3b66:	b510      	push	{r4, lr}
    3b68:	0004      	movs	r4, r0
	if (!i2c_get_sda(context)) {
    3b6a:	f7ff ffeb 	bl	3b44 <i2c_get_sda>
    3b6e:	1e01      	subs	r1, r0, #0
    3b70:	d10e      	bne.n	3b90 <i2c_start+0x2a>
		/*
		 * SDA is already low, so we need to do something to make it
		 * high. Try pulsing clock low to get slave to release SDA.
		 */
		i2c_set_scl(context, 0);
    3b72:	0020      	movs	r0, r4
    3b74:	f7ff ffda 	bl	3b2c <i2c_set_scl>
		i2c_delay(context->delays[T_LOW]);
    3b78:	68a3      	ldr	r3, [r4, #8]
    3b7a:	6818      	ldr	r0, [r3, #0]
    3b7c:	f7ff ffe8 	bl	3b50 <i2c_delay>
		i2c_set_scl(context, 1);
    3b80:	0020      	movs	r0, r4
    3b82:	2101      	movs	r1, #1
    3b84:	f7ff ffd2 	bl	3b2c <i2c_set_scl>
		i2c_delay(context->delays[T_SU_STA]);
    3b88:	68a3      	ldr	r3, [r4, #8]
    3b8a:	6818      	ldr	r0, [r3, #0]
    3b8c:	f7ff ffe0 	bl	3b50 <i2c_delay>
	}
	i2c_set_sda(context, 0);
    3b90:	2100      	movs	r1, #0
    3b92:	0020      	movs	r0, r4
    3b94:	f7ff ffd0 	bl	3b38 <i2c_set_sda>
	i2c_delay(context->delays[T_HD_STA]);
    3b98:	68a3      	ldr	r3, [r4, #8]
    3b9a:	6858      	ldr	r0, [r3, #4]
    3b9c:	f7ff ffd8 	bl	3b50 <i2c_delay>
}
    3ba0:	bd10      	pop	{r4, pc}

00003ba2 <i2c_read_bit>:
	i2c_set_scl(context, 1);
	i2c_delay(context->delays[T_HIGH]);
}

static bool i2c_read_bit(struct i2c_bitbang *context)
{
    3ba2:	b570      	push	{r4, r5, r6, lr}
    3ba4:	0004      	movs	r4, r0
	bool bit;

	i2c_set_scl(context, 0);
    3ba6:	2100      	movs	r1, #0
    3ba8:	f7ff ffc0 	bl	3b2c <i2c_set_scl>
	/* SDA hold time is zero, so no need for a delay here */
	i2c_set_sda(context, 1); /* Stop driving low, so slave has control */
    3bac:	2101      	movs	r1, #1
    3bae:	0020      	movs	r0, r4
    3bb0:	f7ff ffc2 	bl	3b38 <i2c_set_sda>
	i2c_delay(context->delays[T_LOW]);
    3bb4:	68a3      	ldr	r3, [r4, #8]
    3bb6:	6818      	ldr	r0, [r3, #0]
    3bb8:	f7ff ffca 	bl	3b50 <i2c_delay>
	bit = i2c_get_sda(context);
    3bbc:	0020      	movs	r0, r4
    3bbe:	f7ff ffc1 	bl	3b44 <i2c_get_sda>
    3bc2:	0005      	movs	r5, r0
	i2c_set_scl(context, 1);
    3bc4:	2101      	movs	r1, #1
    3bc6:	0020      	movs	r0, r4
    3bc8:	f7ff ffb0 	bl	3b2c <i2c_set_scl>
	i2c_delay(context->delays[T_HIGH]);
    3bcc:	68a3      	ldr	r3, [r4, #8]
    3bce:	6858      	ldr	r0, [r3, #4]
    3bd0:	f7ff ffbe 	bl	3b50 <i2c_delay>
	bit = i2c_get_sda(context);
    3bd4:	1e68      	subs	r0, r5, #1
    3bd6:	4185      	sbcs	r5, r0
	return bit;
    3bd8:	b2e8      	uxtb	r0, r5
}
    3bda:	bd70      	pop	{r4, r5, r6, pc}

00003bdc <i2c_write_bit>:
{
    3bdc:	b570      	push	{r4, r5, r6, lr}
    3bde:	0004      	movs	r4, r0
    3be0:	000d      	movs	r5, r1
	i2c_set_scl(context, 0);
    3be2:	2100      	movs	r1, #0
    3be4:	f7ff ffa2 	bl	3b2c <i2c_set_scl>
	i2c_set_sda(context, bit);
    3be8:	0029      	movs	r1, r5
    3bea:	0020      	movs	r0, r4
    3bec:	f7ff ffa4 	bl	3b38 <i2c_set_sda>
	i2c_delay(context->delays[T_LOW]);
    3bf0:	68a3      	ldr	r3, [r4, #8]
    3bf2:	6818      	ldr	r0, [r3, #0]
    3bf4:	f7ff ffac 	bl	3b50 <i2c_delay>
	i2c_set_scl(context, 1);
    3bf8:	2101      	movs	r1, #1
    3bfa:	0020      	movs	r0, r4
    3bfc:	f7ff ff96 	bl	3b2c <i2c_set_scl>
	i2c_delay(context->delays[T_HIGH]);
    3c00:	68a3      	ldr	r3, [r4, #8]
    3c02:	6858      	ldr	r0, [r3, #4]
    3c04:	f7ff ffa4 	bl	3b50 <i2c_delay>
}
    3c08:	bd70      	pop	{r4, r5, r6, pc}

00003c0a <i2c_stop>:
{
    3c0a:	b510      	push	{r4, lr}
    3c0c:	0004      	movs	r4, r0
	if (i2c_get_sda(context)) {
    3c0e:	f7ff ff99 	bl	3b44 <i2c_get_sda>
    3c12:	2800      	cmp	r0, #0
    3c14:	d00b      	beq.n	3c2e <i2c_stop+0x24>
		i2c_delay(context->delays[T_SU_STA]);
    3c16:	68a3      	ldr	r3, [r4, #8]
    3c18:	6818      	ldr	r0, [r3, #0]
    3c1a:	f7ff ff99 	bl	3b50 <i2c_delay>
		i2c_set_sda(context, 0);
    3c1e:	0020      	movs	r0, r4
    3c20:	2100      	movs	r1, #0
    3c22:	f7ff ff89 	bl	3b38 <i2c_set_sda>
		i2c_delay(context->delays[T_HD_STA]);
    3c26:	68a3      	ldr	r3, [r4, #8]
    3c28:	6858      	ldr	r0, [r3, #4]
    3c2a:	f7ff ff91 	bl	3b50 <i2c_delay>
	i2c_delay(context->delays[T_SU_STP]);
    3c2e:	68a3      	ldr	r3, [r4, #8]
    3c30:	6858      	ldr	r0, [r3, #4]
    3c32:	f7ff ff8d 	bl	3b50 <i2c_delay>
	i2c_set_sda(context, 1);
    3c36:	2101      	movs	r1, #1
    3c38:	0020      	movs	r0, r4
    3c3a:	f7ff ff7d 	bl	3b38 <i2c_set_sda>
	i2c_delay(context->delays[T_BUF]); /* In case we start again too soon */
    3c3e:	68a3      	ldr	r3, [r4, #8]
    3c40:	6818      	ldr	r0, [r3, #0]
    3c42:	f7ff ff85 	bl	3b50 <i2c_delay>
}
    3c46:	bd10      	pop	{r4, pc}

00003c48 <i2c_bitbang_configure>:
{
    3c48:	0003      	movs	r3, r0
	if (I2C_ADDR_10_BITS & dev_config) {
    3c4a:	2001      	movs	r0, #1
    3c4c:	4008      	ands	r0, r1
    3c4e:	d105      	bne.n	3c5c <i2c_bitbang_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    3c50:	0709      	lsls	r1, r1, #28
    3c52:	0f49      	lsrs	r1, r1, #29
    3c54:	2901      	cmp	r1, #1
    3c56:	d004      	beq.n	3c62 <i2c_bitbang_configure+0x1a>
    3c58:	2902      	cmp	r1, #2
    3c5a:	d005      	beq.n	3c68 <i2c_bitbang_configure+0x20>
		return -ENOTSUP;
    3c5c:	2023      	movs	r0, #35	; 0x23
    3c5e:	4240      	negs	r0, r0
    3c60:	e001      	b.n	3c66 <i2c_bitbang_configure+0x1e>
		context->delays = delays_standard;
    3c62:	4a02      	ldr	r2, [pc, #8]	; (3c6c <i2c_bitbang_configure+0x24>)
		context->delays = delays_fast;
    3c64:	609a      	str	r2, [r3, #8]
}
    3c66:	4770      	bx	lr
		context->delays = delays_fast;
    3c68:	4a01      	ldr	r2, [pc, #4]	; (3c70 <i2c_bitbang_configure+0x28>)
    3c6a:	e7fb      	b.n	3c64 <i2c_bitbang_configure+0x1c>
    3c6c:	0000d980 	.word	0x0000d980
    3c70:	0000d978 	.word	0x0000d978

00003c74 <i2c_bitbang_transfer>:
}

int i2c_bitbang_transfer(struct i2c_bitbang *context,
			   struct i2c_msg *msgs, u8_t num_msgs,
			   u16_t slave_address)
{
    3c74:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *buf, *buf_end;
	unsigned int flags;
	int result = -EIO;

	if (!num_msgs) {
		return 0;
    3c76:	2500      	movs	r5, #0
{
    3c78:	b087      	sub	sp, #28
    3c7a:	0004      	movs	r4, r0
    3c7c:	000f      	movs	r7, r1
    3c7e:	9201      	str	r2, [sp, #4]
    3c80:	001e      	movs	r6, r3
	if (!num_msgs) {
    3c82:	42aa      	cmp	r2, r5
    3c84:	d035      	beq.n	3cf2 <i2c_bitbang_transfer+0x7e>

	/* We want an initial Start condition */
	flags = I2C_MSG_RESTART;

	/* Make sure we're in a good state so slave recognises the Start */
	i2c_set_scl(context, 1);
    3c86:	2101      	movs	r1, #1
    3c88:	f7ff ff50 	bl	3b2c <i2c_set_scl>
		/* Get flags for new message */
		flags |= msgs->flags;

		/* Send address after any Start condition */
		if (flags & I2C_MSG_RESTART) {
			unsigned int byte0 = slave_address << 1;
    3c8c:	0073      	lsls	r3, r6, #1
    3c8e:	9305      	str	r3, [sp, #20]
	flags |= I2C_MSG_STOP;
    3c90:	2306      	movs	r3, #6
    3c92:	9300      	str	r3, [sp, #0]
		if (flags & I2C_MSG_STOP) {
    3c94:	2202      	movs	r2, #2
    3c96:	9b00      	ldr	r3, [sp, #0]
    3c98:	4213      	tst	r3, r2
    3c9a:	d002      	beq.n	3ca2 <i2c_bitbang_transfer+0x2e>
			i2c_stop(context);
    3c9c:	0020      	movs	r0, r4
    3c9e:	f7ff ffb4 	bl	3c0a <i2c_stop>
		flags &= I2C_MSG_RESTART;
    3ca2:	2304      	movs	r3, #4
    3ca4:	9d00      	ldr	r5, [sp, #0]
    3ca6:	401d      	ands	r5, r3
		if (flags & I2C_MSG_RESTART) {
    3ca8:	d026      	beq.n	3cf8 <i2c_bitbang_transfer+0x84>
	i2c_start(context);
    3caa:	0020      	movs	r0, r4
    3cac:	f7ff ff5b 	bl	3b66 <i2c_start>
		if (flags & I2C_MSG_RESTART) {
    3cb0:	2204      	movs	r2, #4
		flags |= msgs->flags;
    3cb2:	7a3b      	ldrb	r3, [r7, #8]
    3cb4:	432b      	orrs	r3, r5
    3cb6:	9300      	str	r3, [sp, #0]
		if (flags & I2C_MSG_RESTART) {
    3cb8:	4213      	tst	r3, r2
    3cba:	d02a      	beq.n	3d12 <i2c_bitbang_transfer+0x9e>

			byte0 |= (flags & I2C_MSG_RW_MASK) == I2C_MSG_READ;
    3cbc:	2501      	movs	r5, #1
    3cbe:	401d      	ands	r5, r3
    3cc0:	9b05      	ldr	r3, [sp, #20]
			if (!i2c_write_byte(context, byte0)) {
    3cc2:	2608      	movs	r6, #8
			byte0 |= (flags & I2C_MSG_RW_MASK) == I2C_MSG_READ;
    3cc4:	431d      	orrs	r5, r3
			if (!i2c_write_byte(context, byte0)) {
    3cc6:	b2eb      	uxtb	r3, r5
	u8_t mask = 1 << 7;
    3cc8:	2580      	movs	r5, #128	; 0x80
			if (!i2c_write_byte(context, byte0)) {
    3cca:	9302      	str	r3, [sp, #8]
		i2c_write_bit(context, byte & mask);
    3ccc:	9902      	ldr	r1, [sp, #8]
    3cce:	0020      	movs	r0, r4
    3cd0:	4029      	ands	r1, r5
    3cd2:	3e01      	subs	r6, #1
    3cd4:	f7ff ff82 	bl	3bdc <i2c_write_bit>
	} while (mask >>= 1);
    3cd8:	086d      	lsrs	r5, r5, #1
    3cda:	2e00      	cmp	r6, #0
    3cdc:	d1f6      	bne.n	3ccc <i2c_bitbang_transfer+0x58>
	return !i2c_read_bit(context);
    3cde:	0020      	movs	r0, r4
    3ce0:	f7ff ff5f 	bl	3ba2 <i2c_read_bit>
			if (!i2c_write_byte(context, byte0)) {
    3ce4:	2800      	cmp	r0, #0
    3ce6:	d010      	beq.n	3d0a <i2c_bitbang_transfer+0x96>
	int result = -EIO;
    3ce8:	2505      	movs	r5, #5
    3cea:	426d      	negs	r5, r5
	} while (num_msgs);

	/* Complete without error */
	result = 0;
finish:
	i2c_stop(context);
    3cec:	0020      	movs	r0, r4
    3cee:	f7ff ff8c 	bl	3c0a <i2c_stop>

	return result;
}
    3cf2:	0028      	movs	r0, r5
    3cf4:	b007      	add	sp, #28
    3cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (msgs->flags & I2C_MSG_RESTART) {
    3cf8:	2204      	movs	r2, #4
    3cfa:	7a3b      	ldrb	r3, [r7, #8]
    3cfc:	4213      	tst	r3, r2
    3cfe:	d0d7      	beq.n	3cb0 <i2c_bitbang_transfer+0x3c>
	i2c_delay(context->delays[T_SU_STA]);
    3d00:	68a3      	ldr	r3, [r4, #8]
    3d02:	6818      	ldr	r0, [r3, #0]
    3d04:	f7ff ff24 	bl	3b50 <i2c_delay>
    3d08:	e7cf      	b.n	3caa <i2c_bitbang_transfer+0x36>
			flags &= ~I2C_MSG_RESTART;
    3d0a:	2204      	movs	r2, #4
    3d0c:	9b00      	ldr	r3, [sp, #0]
    3d0e:	4393      	bics	r3, r2
    3d10:	9300      	str	r3, [sp, #0]
		buf = msgs->buf;
    3d12:	683d      	ldr	r5, [r7, #0]
		buf_end = buf + msgs->len;
    3d14:	687b      	ldr	r3, [r7, #4]
		if ((flags & I2C_MSG_RW_MASK) == I2C_MSG_READ) {
    3d16:	9a00      	ldr	r2, [sp, #0]
		buf_end = buf + msgs->len;
    3d18:	18eb      	adds	r3, r5, r3
    3d1a:	9302      	str	r3, [sp, #8]
		if ((flags & I2C_MSG_RW_MASK) == I2C_MSG_READ) {
    3d1c:	2301      	movs	r3, #1
    3d1e:	401a      	ands	r2, r3
    3d20:	9203      	str	r2, [sp, #12]
    3d22:	d130      	bne.n	3d86 <i2c_bitbang_transfer+0x112>
			while (buf < buf_end) {
    3d24:	9b02      	ldr	r3, [sp, #8]
    3d26:	42ab      	cmp	r3, r5
    3d28:	d930      	bls.n	3d8c <i2c_bitbang_transfer+0x118>
				if (!i2c_write_byte(context, *buf++)) {
    3d2a:	782b      	ldrb	r3, [r5, #0]
	u8_t mask = 1 << 7;
    3d2c:	2680      	movs	r6, #128	; 0x80
				if (!i2c_write_byte(context, *buf++)) {
    3d2e:	9304      	str	r3, [sp, #16]
    3d30:	2308      	movs	r3, #8
    3d32:	9303      	str	r3, [sp, #12]
		i2c_write_bit(context, byte & mask);
    3d34:	9904      	ldr	r1, [sp, #16]
    3d36:	0020      	movs	r0, r4
    3d38:	4031      	ands	r1, r6
    3d3a:	f7ff ff4f 	bl	3bdc <i2c_write_bit>
    3d3e:	9b03      	ldr	r3, [sp, #12]
	} while (mask >>= 1);
    3d40:	0876      	lsrs	r6, r6, #1
    3d42:	3b01      	subs	r3, #1
    3d44:	9303      	str	r3, [sp, #12]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d1f4      	bne.n	3d34 <i2c_bitbang_transfer+0xc0>
	return !i2c_read_bit(context);
    3d4a:	0020      	movs	r0, r4
    3d4c:	f7ff ff29 	bl	3ba2 <i2c_read_bit>
    3d50:	3501      	adds	r5, #1
				if (!i2c_write_byte(context, *buf++)) {
    3d52:	2800      	cmp	r0, #0
    3d54:	d0e6      	beq.n	3d24 <i2c_bitbang_transfer+0xb0>
    3d56:	e7c7      	b.n	3ce8 <i2c_bitbang_transfer+0x74>
				*buf++ = i2c_read_byte(context);
    3d58:	1c6b      	adds	r3, r5, #1
	unsigned int byte = 1;
    3d5a:	9e03      	ldr	r6, [sp, #12]
				*buf++ = i2c_read_byte(context);
    3d5c:	9304      	str	r3, [sp, #16]
		byte |= i2c_read_bit(context);
    3d5e:	0020      	movs	r0, r4
    3d60:	f7ff ff1f 	bl	3ba2 <i2c_read_bit>
	} while (!(byte & (1 << 8)));
    3d64:	2380      	movs	r3, #128	; 0x80
		byte <<= 1;
    3d66:	0076      	lsls	r6, r6, #1
		byte |= i2c_read_bit(context);
    3d68:	4306      	orrs	r6, r0
	} while (!(byte & (1 << 8)));
    3d6a:	005b      	lsls	r3, r3, #1
    3d6c:	421e      	tst	r6, r3
    3d6e:	d0f6      	beq.n	3d5e <i2c_bitbang_transfer+0xea>
				i2c_write_bit(context, buf == buf_end);
    3d70:	9b02      	ldr	r3, [sp, #8]
    3d72:	9a04      	ldr	r2, [sp, #16]
	return byte;
    3d74:	702e      	strb	r6, [r5, #0]
				i2c_write_bit(context, buf == buf_end);
    3d76:	1a99      	subs	r1, r3, r2
    3d78:	424a      	negs	r2, r1
    3d7a:	414a      	adcs	r2, r1
    3d7c:	0020      	movs	r0, r4
    3d7e:	0011      	movs	r1, r2
    3d80:	f7ff ff2c 	bl	3bdc <i2c_write_bit>
				*buf++ = i2c_read_byte(context);
    3d84:	9d04      	ldr	r5, [sp, #16]
			while (buf < buf_end) {
    3d86:	9b02      	ldr	r3, [sp, #8]
    3d88:	429d      	cmp	r5, r3
    3d8a:	d3e5      	bcc.n	3d58 <i2c_bitbang_transfer+0xe4>
		num_msgs--;
    3d8c:	9b01      	ldr	r3, [sp, #4]
		msgs++;
    3d8e:	370c      	adds	r7, #12
		num_msgs--;
    3d90:	3b01      	subs	r3, #1
    3d92:	b2db      	uxtb	r3, r3
    3d94:	9301      	str	r3, [sp, #4]
	} while (num_msgs);
    3d96:	2b00      	cmp	r3, #0
    3d98:	d000      	beq.n	3d9c <i2c_bitbang_transfer+0x128>
    3d9a:	e77b      	b.n	3c94 <i2c_bitbang_transfer+0x20>
	result = 0;
    3d9c:	001d      	movs	r5, r3
    3d9e:	e7a5      	b.n	3cec <i2c_bitbang_transfer+0x78>

00003da0 <i2c_bitbang_init>:
		context->delays = delays_standard;
    3da0:	4b02      	ldr	r3, [pc, #8]	; (3dac <i2c_bitbang_init+0xc>)

void i2c_bitbang_init(struct i2c_bitbang *context,
			const struct i2c_bitbang_io *io, void *io_context)
{
	context->io = io;
    3da2:	6001      	str	r1, [r0, #0]
	context->io_context = io_context;
    3da4:	6042      	str	r2, [r0, #4]
		context->delays = delays_standard;
    3da6:	6083      	str	r3, [r0, #8]
	i2c_bitbang_configure(context, I2C_SPEED_STANDARD << I2C_SPEED_SHIFT);
}
    3da8:	4770      	bx	lr
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	0000d980 	.word	0x0000d980

00003db0 <i2c_gpio_init>:
};

static int i2c_gpio_init(struct device *dev)
{
	struct i2c_gpio_context *context = dev->driver_data;
	const struct i2c_gpio_config *config = dev->config->config_info;
    3db0:	6803      	ldr	r3, [r0, #0]
{
    3db2:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_gpio_config *config = dev->config->config_info;
    3db4:	689e      	ldr	r6, [r3, #8]
	struct i2c_gpio_context *context = dev->driver_data;
    3db6:	6884      	ldr	r4, [r0, #8]
{
    3db8:	0005      	movs	r5, r0

	context->gpio = device_get_binding(config->gpio_name);
    3dba:	6830      	ldr	r0, [r6, #0]
    3dbc:	f008 f812 	bl	bde4 <device_get_binding>
    3dc0:	60e0      	str	r0, [r4, #12]
	if (!context->gpio) {
    3dc2:	2800      	cmp	r0, #0
    3dc4:	d00c      	beq.n	3de0 <i2c_gpio_init+0x30>
		return -EINVAL;
	}
	context->sda_pin = config->sda_pin;
    3dc6:	7973      	ldrb	r3, [r6, #5]
	context->scl_pin = config->scl_pin;

	i2c_bitbang_init(&context->bitbang, &io_fns, context);
    3dc8:	0020      	movs	r0, r4
	context->sda_pin = config->sda_pin;
    3dca:	7463      	strb	r3, [r4, #17]
	context->scl_pin = config->scl_pin;
    3dcc:	7933      	ldrb	r3, [r6, #4]
	i2c_bitbang_init(&context->bitbang, &io_fns, context);
    3dce:	0022      	movs	r2, r4
	context->scl_pin = config->scl_pin;
    3dd0:	7423      	strb	r3, [r4, #16]
	i2c_bitbang_init(&context->bitbang, &io_fns, context);
    3dd2:	4905      	ldr	r1, [pc, #20]	; (3de8 <i2c_gpio_init+0x38>)
    3dd4:	f7ff ffe4 	bl	3da0 <i2c_bitbang_init>
	 * important because driver framework ignores errors from init
	 * functions.
	 */
	dev->driver_api = &api;

	return 0;
    3dd8:	2000      	movs	r0, #0
	dev->driver_api = &api;
    3dda:	4b04      	ldr	r3, [pc, #16]	; (3dec <i2c_gpio_init+0x3c>)
    3ddc:	606b      	str	r3, [r5, #4]
}
    3dde:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    3de0:	2016      	movs	r0, #22
    3de2:	4240      	negs	r0, r0
    3de4:	e7fb      	b.n	3dde <i2c_gpio_init+0x2e>
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	0000d990 	.word	0x0000d990
    3dec:	20002248 	.word	0x20002248

00003df0 <i2c_gpio_transfer>:
{
    3df0:	b510      	push	{r4, lr}
	return i2c_bitbang_transfer(&context->bitbang, msgs, num_msgs,
    3df2:	6880      	ldr	r0, [r0, #8]
    3df4:	f7ff ff3e 	bl	3c74 <i2c_bitbang_transfer>
}
    3df8:	bd10      	pop	{r4, pc}

00003dfa <i2c_gpio_configure>:
{
    3dfa:	b510      	push	{r4, lr}
	return i2c_bitbang_configure(&context->bitbang, dev_config);
    3dfc:	6880      	ldr	r0, [r0, #8]
    3dfe:	f7ff ff23 	bl	3c48 <i2c_bitbang_configure>
}
    3e02:	bd10      	pop	{r4, pc}

00003e04 <i2c_gpio_get_sda>:
	u32_t state = 1; /* Default high as that would be a NACK */
    3e04:	2201      	movs	r2, #1
{
    3e06:	0003      	movs	r3, r0
    3e08:	b513      	push	{r0, r1, r4, lr}
	gpio_pin_read(context->gpio, context->sda_pin, &state);
    3e0a:	68c0      	ldr	r0, [r0, #12]
	u32_t state = 1; /* Default high as that would be a NACK */
    3e0c:	9201      	str	r2, [sp, #4]
	gpio_pin_read(context->gpio, context->sda_pin, &state);
    3e0e:	7c5a      	ldrb	r2, [r3, #17]
	return api->read(port, access_op, pin, value);
    3e10:	6843      	ldr	r3, [r0, #4]
    3e12:	2100      	movs	r1, #0
    3e14:	689c      	ldr	r4, [r3, #8]
    3e16:	ab01      	add	r3, sp, #4
    3e18:	47a0      	blx	r4
}
    3e1a:	9801      	ldr	r0, [sp, #4]
    3e1c:	bd16      	pop	{r1, r2, r4, pc}

00003e1e <i2c_gpio_set_sda>:
{
    3e1e:	0002      	movs	r2, r0
    3e20:	b510      	push	{r4, lr}
	gpio_pin_write(context->gpio, context->sda_pin, state);
    3e22:	68c0      	ldr	r0, [r0, #12]
{
    3e24:	000b      	movs	r3, r1
	return api->write(port, access_op, pin, value);
    3e26:	6841      	ldr	r1, [r0, #4]
	gpio_pin_write(context->gpio, context->sda_pin, state);
    3e28:	7c52      	ldrb	r2, [r2, #17]
    3e2a:	684c      	ldr	r4, [r1, #4]
    3e2c:	2100      	movs	r1, #0
    3e2e:	47a0      	blx	r4
}
    3e30:	bd10      	pop	{r4, pc}

00003e32 <i2c_gpio_set_scl>:
{
    3e32:	0002      	movs	r2, r0
    3e34:	b510      	push	{r4, lr}
	gpio_pin_write(context->gpio, context->scl_pin, state);
    3e36:	68c0      	ldr	r0, [r0, #12]
{
    3e38:	000b      	movs	r3, r1
    3e3a:	6841      	ldr	r1, [r0, #4]
	gpio_pin_write(context->gpio, context->scl_pin, state);
    3e3c:	7c12      	ldrb	r2, [r2, #16]
    3e3e:	684c      	ldr	r4, [r1, #4]
    3e40:	2100      	movs	r1, #0
    3e42:	47a0      	blx	r4
}
    3e44:	bd10      	pop	{r4, pc}

00003e46 <i2c_nrf5_config_func_0>:
		    &i2c_nrf5_data_0, &i2c_nrf5_config_0,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &i2c_nrf5_driver_api);

static void i2c_nrf5_config_func_0(struct device *dev)
{
    3e46:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_SPI0_TWI0_IRQn, CONFIG_I2C_0_IRQ_PRI,
    3e48:	2200      	movs	r2, #0
    3e4a:	2101      	movs	r1, #1
    3e4c:	2003      	movs	r0, #3
    3e4e:	f7fe fe13 	bl	2a78 <_irq_priority_set>
		    i2c_nrf5_isr, DEVICE_GET(i2c_nrf5_0), 0);

	irq_enable(NRF5_IRQ_SPI0_TWI0_IRQn);
    3e52:	2003      	movs	r0, #3
    3e54:	f7fe fde6 	bl	2a24 <_arch_irq_enable>
}
    3e58:	bd10      	pop	{r4, pc}

00003e5a <i2c_nrf5_isr>:
	const struct i2c_nrf5_config *config = dev->config->config_info;
    3e5a:	6803      	ldr	r3, [r0, #0]
{
    3e5c:	b570      	push	{r4, r5, r6, lr}
	volatile NRF_TWI_Type *twi = config->base;
    3e5e:	689b      	ldr	r3, [r3, #8]
	struct i2c_nrf5_data *data = dev->driver_data;
    3e60:	6884      	ldr	r4, [r0, #8]
	volatile NRF_TWI_Type *twi = config->base;
    3e62:	681d      	ldr	r5, [r3, #0]
	if (twi->EVENTS_RXDREADY) {
    3e64:	35fc      	adds	r5, #252	; 0xfc
    3e66:	68eb      	ldr	r3, [r5, #12]
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d008      	beq.n	3e7e <i2c_nrf5_isr+0x24>
		data->rxd = 1;
    3e6c:	2301      	movs	r3, #1
    3e6e:	7e22      	ldrb	r2, [r4, #24]

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3e70:	0020      	movs	r0, r4
    3e72:	4313      	orrs	r3, r2
    3e74:	7623      	strb	r3, [r4, #24]
		twi->EVENTS_RXDREADY = 0;
    3e76:	2300      	movs	r3, #0
    3e78:	60eb      	str	r3, [r5, #12]
    3e7a:	f008 fcb9 	bl	c7f0 <_impl_k_sem_give>
	if (twi->EVENTS_TXDSENT) {
    3e7e:	6a2b      	ldr	r3, [r5, #32]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d008      	beq.n	3e96 <i2c_nrf5_isr+0x3c>
		data->txd = 1;
    3e84:	2302      	movs	r3, #2
    3e86:	7e22      	ldrb	r2, [r4, #24]
    3e88:	0020      	movs	r0, r4
    3e8a:	4313      	orrs	r3, r2
    3e8c:	7623      	strb	r3, [r4, #24]
		twi->EVENTS_TXDSENT = 0;
    3e8e:	2300      	movs	r3, #0
    3e90:	622b      	str	r3, [r5, #32]
    3e92:	f008 fcad 	bl	c7f0 <_impl_k_sem_give>
	if (twi->EVENTS_ERROR) {
    3e96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d008      	beq.n	3eae <i2c_nrf5_isr+0x54>
		data->err = 1;
    3e9c:	2304      	movs	r3, #4
    3e9e:	7e22      	ldrb	r2, [r4, #24]
    3ea0:	0020      	movs	r0, r4
    3ea2:	4313      	orrs	r3, r2
    3ea4:	7623      	strb	r3, [r4, #24]
		twi->EVENTS_ERROR = 0;
    3ea6:	2300      	movs	r3, #0
    3ea8:	62ab      	str	r3, [r5, #40]	; 0x28
    3eaa:	f008 fca1 	bl	c7f0 <_impl_k_sem_give>
	if (twi->EVENTS_STOPPED) {
    3eae:	68ab      	ldr	r3, [r5, #8]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d008      	beq.n	3ec6 <i2c_nrf5_isr+0x6c>
		data->stopped = 1;
    3eb4:	2308      	movs	r3, #8
    3eb6:	7e22      	ldrb	r2, [r4, #24]
    3eb8:	0020      	movs	r0, r4
    3eba:	4313      	orrs	r3, r2
    3ebc:	7623      	strb	r3, [r4, #24]
		twi->EVENTS_STOPPED = 0;
    3ebe:	2300      	movs	r3, #0
    3ec0:	60ab      	str	r3, [r5, #8]
    3ec2:	f008 fc95 	bl	c7f0 <_impl_k_sem_give>
}
    3ec6:	bd70      	pop	{r4, r5, r6, pc}

00003ec8 <i2c_nrf5_configure>:
{
    3ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (I2C_ADDR_10_BITS & dev_config_raw) {
    3eca:	2401      	movs	r4, #1
	const struct i2c_nrf5_config *config = dev->config->config_info;
    3ecc:	6803      	ldr	r3, [r0, #0]
{
    3ece:	000d      	movs	r5, r1
	volatile NRF_TWI_Type *twi = config->base;
    3ed0:	689b      	ldr	r3, [r3, #8]
	struct i2c_nrf5_data *data = dev->driver_data;
    3ed2:	6886      	ldr	r6, [r0, #8]
	volatile NRF_TWI_Type *twi = config->base;
    3ed4:	681f      	ldr	r7, [r3, #0]
	if (I2C_ADDR_10_BITS & dev_config_raw) {
    3ed6:	400c      	ands	r4, r1
    3ed8:	d11a      	bne.n	3f10 <i2c_nrf5_configure+0x48>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3eda:	2101      	movs	r1, #1
	k_sem_take(&data->lock, K_FOREVER);
    3edc:	3620      	adds	r6, #32
    3ede:	4249      	negs	r1, r1
    3ee0:	0030      	movs	r0, r6
	switch (I2C_SPEED_GET(dev_config_raw)) {
    3ee2:	072d      	lsls	r5, r5, #28
    3ee4:	f008 fcde 	bl	c8a4 <_impl_k_sem_take>
    3ee8:	0f6d      	lsrs	r5, r5, #29
    3eea:	2d01      	cmp	r5, #1
    3eec:	d004      	beq.n	3ef8 <i2c_nrf5_configure+0x30>
    3eee:	2d02      	cmp	r5, #2
    3ef0:	d00b      	beq.n	3f0a <i2c_nrf5_configure+0x42>
		ret = -EINVAL;
    3ef2:	2416      	movs	r4, #22
    3ef4:	4264      	negs	r4, r4
    3ef6:	e003      	b.n	3f00 <i2c_nrf5_configure+0x38>
		twi->FREQUENCY = TWI_FREQUENCY_FREQUENCY_K100;
    3ef8:	22cc      	movs	r2, #204	; 0xcc
    3efa:	0452      	lsls	r2, r2, #17
		twi->FREQUENCY = TWI_FREQUENCY_FREQUENCY_K400;
    3efc:	4b06      	ldr	r3, [pc, #24]	; (3f18 <i2c_nrf5_configure+0x50>)
    3efe:	50fa      	str	r2, [r7, r3]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3f00:	0030      	movs	r0, r6
    3f02:	f008 fc75 	bl	c7f0 <_impl_k_sem_give>
}
    3f06:	0020      	movs	r0, r4
    3f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		twi->FREQUENCY = TWI_FREQUENCY_FREQUENCY_K400;
    3f0a:	22cd      	movs	r2, #205	; 0xcd
    3f0c:	04d2      	lsls	r2, r2, #19
    3f0e:	e7f5      	b.n	3efc <i2c_nrf5_configure+0x34>
		return -EINVAL;
    3f10:	2416      	movs	r4, #22
    3f12:	4264      	negs	r4, r4
    3f14:	e7f7      	b.n	3f06 <i2c_nrf5_configure+0x3e>
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	00000524 	.word	0x00000524

00003f1c <i2c_nrf5_transfer>:
{
    3f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1e:	000d      	movs	r5, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3f20:	2101      	movs	r1, #1
    3f22:	001c      	movs	r4, r3
	const struct i2c_nrf5_config *config = dev->config->config_info;
    3f24:	6803      	ldr	r3, [r0, #0]
{
    3f26:	b087      	sub	sp, #28
	volatile NRF_TWI_Type *twi = config->base;
    3f28:	689b      	ldr	r3, [r3, #8]
    3f2a:	4249      	negs	r1, r1
    3f2c:	681b      	ldr	r3, [r3, #0]
{
    3f2e:	0007      	movs	r7, r0
	volatile NRF_TWI_Type *twi = config->base;
    3f30:	9302      	str	r3, [sp, #8]
	k_sem_take(&data->lock, K_FOREVER);
    3f32:	6883      	ldr	r3, [r0, #8]
{
    3f34:	9205      	str	r2, [sp, #20]
	k_sem_take(&data->lock, K_FOREVER);
    3f36:	3320      	adds	r3, #32
    3f38:	0018      	movs	r0, r3
    3f3a:	9304      	str	r3, [sp, #16]
    3f3c:	f008 fcb2 	bl	c8a4 <_impl_k_sem_take>
	twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
    3f40:	23a0      	movs	r3, #160	; 0xa0
    3f42:	2205      	movs	r2, #5
    3f44:	9902      	ldr	r1, [sp, #8]
    3f46:	00db      	lsls	r3, r3, #3
    3f48:	50ca      	str	r2, [r1, r3]
	twi->ADDRESS = addr;
    3f4a:	3388      	adds	r3, #136	; 0x88
    3f4c:	50cc      	str	r4, [r1, r3]
	for (int i = 0; i < num_msgs; i++) {
    3f4e:	2300      	movs	r3, #0
    3f50:	9303      	str	r3, [sp, #12]
    3f52:	9b03      	ldr	r3, [sp, #12]
    3f54:	9a05      	ldr	r2, [sp, #20]
    3f56:	4293      	cmp	r3, r2
    3f58:	db01      	blt.n	3f5e <i2c_nrf5_transfer+0x42>
    3f5a:	2400      	movs	r4, #0
    3f5c:	e048      	b.n	3ff0 <i2c_nrf5_transfer+0xd4>
		if (msgs[i].flags & I2C_MSG_READ) {
    3f5e:	2301      	movs	r3, #1
    3f60:	7a2c      	ldrb	r4, [r5, #8]
    3f62:	401c      	ands	r4, r3
    3f64:	d061      	beq.n	402a <__kernel_ram_size+0x2a>
			twi->EVENTS_RXDREADY = 0;
    3f66:	2400      	movs	r4, #0
    3f68:	9b02      	ldr	r3, [sp, #8]
			twi->INTENSET = (NRF5_TWI_INT_TXDSENT
    3f6a:	4a4f      	ldr	r2, [pc, #316]	; (40a8 <__kernel_ram_size+0xa8>)
			twi->EVENTS_RXDREADY = 0;
    3f6c:	33fc      	adds	r3, #252	; 0xfc
    3f6e:	60dc      	str	r4, [r3, #12]
			twi->INTENSET = (NRF5_TWI_INT_TXDSENT
    3f70:	23c1      	movs	r3, #193	; 0xc1
    3f72:	9902      	ldr	r1, [sp, #8]
    3f74:	009b      	lsls	r3, r3, #2
    3f76:	50ca      	str	r2, [r1, r3]
	struct i2c_nrf5_data *data = dev->driver_data;
    3f78:	68bb      	ldr	r3, [r7, #8]
    3f7a:	9301      	str	r3, [sp, #4]
	const struct i2c_nrf5_config *config = dev->config->config_info;
    3f7c:	683b      	ldr	r3, [r7, #0]
	volatile NRF_TWI_Type *twi = config->base;
    3f7e:	689b      	ldr	r3, [r3, #8]
    3f80:	681e      	ldr	r6, [r3, #0]
	for (int offset = 0; offset < msg->len; offset++) {
    3f82:	686b      	ldr	r3, [r5, #4]
    3f84:	42a3      	cmp	r3, r4
    3f86:	d812      	bhi.n	3fae <i2c_nrf5_transfer+0x92>
	if (msg->flags & I2C_MSG_STOP) {
    3f88:	7a2b      	ldrb	r3, [r5, #8]
    3f8a:	079b      	lsls	r3, r3, #30
    3f8c:	d50a      	bpl.n	3fa4 <i2c_nrf5_transfer+0x88>
    3f8e:	2101      	movs	r1, #1
    3f90:	9801      	ldr	r0, [sp, #4]
    3f92:	4249      	negs	r1, r1
    3f94:	f008 fc86 	bl	c8a4 <_impl_k_sem_take>
		data->stopped = 0;
    3f98:	2208      	movs	r2, #8
    3f9a:	9b01      	ldr	r3, [sp, #4]
    3f9c:	7e1b      	ldrb	r3, [r3, #24]
    3f9e:	4393      	bics	r3, r2
    3fa0:	9a01      	ldr	r2, [sp, #4]
    3fa2:	7613      	strb	r3, [r2, #24]
	for (int i = 0; i < num_msgs; i++) {
    3fa4:	9b03      	ldr	r3, [sp, #12]
    3fa6:	350c      	adds	r5, #12
    3fa8:	3301      	adds	r3, #1
    3faa:	9303      	str	r3, [sp, #12]
    3fac:	e7d1      	b.n	3f52 <i2c_nrf5_transfer+0x36>
		if (offset == msg->len-1) {
    3fae:	3b01      	subs	r3, #1
    3fb0:	42a3      	cmp	r3, r4
    3fb2:	d128      	bne.n	4006 <__kernel_ram_size+0x6>
			twi->SHORTS = 2; /* BB->STOP */
    3fb4:	2280      	movs	r2, #128	; 0x80
    3fb6:	2302      	movs	r3, #2
    3fb8:	0092      	lsls	r2, r2, #2
    3fba:	50b3      	str	r3, [r6, r2]
			twi->TASKS_STARTRX = 1;
    3fbc:	2301      	movs	r3, #1
		if (offset == 0) {
    3fbe:	2c00      	cmp	r4, #0
    3fc0:	d126      	bne.n	4010 <__kernel_ram_size+0x10>
			twi->TASKS_STARTRX = 1;
    3fc2:	6033      	str	r3, [r6, #0]
    3fc4:	2101      	movs	r1, #1
    3fc6:	9801      	ldr	r0, [sp, #4]
    3fc8:	4249      	negs	r1, r1
    3fca:	f008 fc6b 	bl	c8a4 <_impl_k_sem_take>
		if (data->err) {
    3fce:	2104      	movs	r1, #4
    3fd0:	9b01      	ldr	r3, [sp, #4]
    3fd2:	7e1b      	ldrb	r3, [r3, #24]
    3fd4:	1c1a      	adds	r2, r3, #0
    3fd6:	420b      	tst	r3, r1
    3fd8:	d01c      	beq.n	4014 <__kernel_ram_size+0x14>
			data->err = 0;
    3fda:	9b01      	ldr	r3, [sp, #4]
    3fdc:	438a      	bics	r2, r1
    3fde:	761a      	strb	r2, [r3, #24]
			twi->TASKS_STOP = 1;
    3fe0:	2301      	movs	r3, #1
    3fe2:	6173      	str	r3, [r6, #20]
			twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
    3fe4:	23a0      	movs	r3, #160	; 0xa0
    3fe6:	2200      	movs	r2, #0
    3fe8:	00db      	lsls	r3, r3, #3
    3fea:	50f2      	str	r2, [r6, r3]
			twi->TASKS_STOP = 1;
    3fec:	2405      	movs	r4, #5
    3fee:	4264      	negs	r4, r4
	twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
    3ff0:	23a0      	movs	r3, #160	; 0xa0
    3ff2:	2200      	movs	r2, #0
    3ff4:	9902      	ldr	r1, [sp, #8]
    3ff6:	00db      	lsls	r3, r3, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ff8:	9804      	ldr	r0, [sp, #16]
    3ffa:	50ca      	str	r2, [r1, r3]
    3ffc:	f008 fbf8 	bl	c7f0 <_impl_k_sem_give>
}
    4000:	0020      	movs	r0, r4
    4002:	b007      	add	sp, #28
    4004:	bdf0      	pop	{r4, r5, r6, r7, pc}
			twi->SHORTS = 1; /* BB->SUSPEND */
    4006:	2380      	movs	r3, #128	; 0x80
    4008:	2201      	movs	r2, #1
    400a:	009b      	lsls	r3, r3, #2
    400c:	50f2      	str	r2, [r6, r3]
    400e:	e7d5      	b.n	3fbc <i2c_nrf5_transfer+0xa0>
			twi->TASKS_RESUME = 1;
    4010:	6233      	str	r3, [r6, #32]
    4012:	e7d7      	b.n	3fc4 <i2c_nrf5_transfer+0xa8>
		data->rxd = 0;
    4014:	2201      	movs	r2, #1
    4016:	4393      	bics	r3, r2
    4018:	9a01      	ldr	r2, [sp, #4]
    401a:	7613      	strb	r3, [r2, #24]
		msg->buf[offset] = twi->RXD;
    401c:	23a3      	movs	r3, #163	; 0xa3
    401e:	00db      	lsls	r3, r3, #3
    4020:	58f3      	ldr	r3, [r6, r3]
    4022:	682a      	ldr	r2, [r5, #0]
    4024:	5513      	strb	r3, [r2, r4]
	for (int offset = 0; offset < msg->len; offset++) {
    4026:	3401      	adds	r4, #1
    4028:	e7ab      	b.n	3f82 <i2c_nrf5_transfer+0x66>
	data->txd = 0;
    402a:	2208      	movs	r2, #8
	struct i2c_nrf5_data *data = dev->driver_data;
    402c:	68bb      	ldr	r3, [r7, #8]
    402e:	9301      	str	r3, [sp, #4]
	const struct i2c_nrf5_config *config = dev->config->config_info;
    4030:	683b      	ldr	r3, [r7, #0]
	volatile NRF_TWI_Type *twi = config->base;
    4032:	689b      	ldr	r3, [r3, #8]
    4034:	681e      	ldr	r6, [r3, #0]
	data->stopped = 0;
    4036:	9b01      	ldr	r3, [sp, #4]
    4038:	7e1b      	ldrb	r3, [r3, #24]
	data->txd = 0;
    403a:	4393      	bics	r3, r2
    403c:	3a06      	subs	r2, #6
    403e:	4393      	bics	r3, r2
    4040:	9a01      	ldr	r2, [sp, #4]
    4042:	7613      	strb	r3, [r2, #24]
	twi->EVENTS_TXDSENT = 0;
    4044:	0033      	movs	r3, r6
    4046:	33fc      	adds	r3, #252	; 0xfc
    4048:	621c      	str	r4, [r3, #32]
	twi->SHORTS = 0;
    404a:	2380      	movs	r3, #128	; 0x80
    404c:	009b      	lsls	r3, r3, #2
    404e:	50f4      	str	r4, [r6, r3]
	for (int offset = 0; offset < msg->len; offset++) {
    4050:	686b      	ldr	r3, [r5, #4]
    4052:	429c      	cmp	r4, r3
    4054:	d305      	bcc.n	4062 <__kernel_ram_size+0x62>
	if (msg->flags & I2C_MSG_STOP) {
    4056:	7a2b      	ldrb	r3, [r5, #8]
    4058:	079b      	lsls	r3, r3, #30
    405a:	d5a3      	bpl.n	3fa4 <i2c_nrf5_transfer+0x88>
		twi->TASKS_STOP = 1;
    405c:	2301      	movs	r3, #1
    405e:	6173      	str	r3, [r6, #20]
    4060:	e795      	b.n	3f8e <i2c_nrf5_transfer+0x72>
		twi->TXD = msg->buf[offset];
    4062:	682b      	ldr	r3, [r5, #0]
    4064:	5d1a      	ldrb	r2, [r3, r4]
    4066:	4b11      	ldr	r3, [pc, #68]	; (40ac <__kernel_ram_size+0xac>)
    4068:	50f2      	str	r2, [r6, r3]
		if (offset == 0) {
    406a:	2c00      	cmp	r4, #0
    406c:	d101      	bne.n	4072 <__kernel_ram_size+0x72>
			twi->TASKS_STARTTX = 1;
    406e:	2301      	movs	r3, #1
    4070:	60b3      	str	r3, [r6, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4072:	2101      	movs	r1, #1
    4074:	9801      	ldr	r0, [sp, #4]
    4076:	4249      	negs	r1, r1
    4078:	f008 fc14 	bl	c8a4 <_impl_k_sem_take>
		if (data->err) {
    407c:	2104      	movs	r1, #4
    407e:	9b01      	ldr	r3, [sp, #4]
    4080:	7e1b      	ldrb	r3, [r3, #24]
    4082:	1c1a      	adds	r2, r3, #0
    4084:	420b      	tst	r3, r1
    4086:	d008      	beq.n	409a <__kernel_ram_size+0x9a>
			data->err = 0;
    4088:	9b01      	ldr	r3, [sp, #4]
    408a:	438a      	bics	r2, r1
    408c:	761a      	strb	r2, [r3, #24]
			twi->ERRORSRC = twi->ERRORSRC;
    408e:	4b08      	ldr	r3, [pc, #32]	; (40b0 <__kernel_ram_size+0xb0>)
    4090:	58f2      	ldr	r2, [r6, r3]
    4092:	50f2      	str	r2, [r6, r3]
			twi->TASKS_STOP = 1;
    4094:	2301      	movs	r3, #1
    4096:	6173      	str	r3, [r6, #20]
    4098:	e7a8      	b.n	3fec <i2c_nrf5_transfer+0xd0>
		data->txd = 0;
    409a:	2202      	movs	r2, #2
    409c:	4393      	bics	r3, r2
    409e:	9a01      	ldr	r2, [sp, #4]
	for (int offset = 0; offset < msg->len; offset++) {
    40a0:	3401      	adds	r4, #1
		data->txd = 0;
    40a2:	7613      	strb	r3, [r2, #24]
    40a4:	e7d4      	b.n	4050 <__kernel_ram_size+0x50>
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	00000286 	.word	0x00000286
    40ac:	0000051c 	.word	0x0000051c
    40b0:	000004c4 	.word	0x000004c4

000040b4 <i2c_nrf5_init>:
{
    40b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_nrf5_config *config = dev->config->config_info;
    40b6:	6803      	ldr	r3, [r0, #0]
	struct i2c_nrf5_data *data = dev->driver_data;
    40b8:	6884      	ldr	r4, [r0, #8]
	const struct i2c_nrf5_config *config = dev->config->config_info;
    40ba:	689d      	ldr	r5, [r3, #8]
{
    40bc:	9001      	str	r0, [sp, #4]
	data->gpio = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    40be:	4821      	ldr	r0, [pc, #132]	; (4144 <i2c_nrf5_init+0x90>)
	volatile NRF_TWI_Type *twi = config->base;
    40c0:	682f      	ldr	r7, [r5, #0]
	data->gpio = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    40c2:	f007 fe8f 	bl	bde4 <device_get_binding>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    40c6:	2201      	movs	r2, #1
    40c8:	61e0      	str	r0, [r4, #28]
    40ca:	4252      	negs	r2, r2
    40cc:	2100      	movs	r1, #0
    40ce:	0020      	movs	r0, r4
    40d0:	f008 fb84 	bl	c7dc <_impl_k_sem_init>
	config->irq_config_func(dev);
    40d4:	9801      	ldr	r0, [sp, #4]
    40d6:	686b      	ldr	r3, [r5, #4]
    40d8:	4798      	blx	r3
	twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
    40da:	23a0      	movs	r3, #160	; 0xa0
    40dc:	2200      	movs	r2, #0
	status = gpio_pin_configure(data->gpio, config->scl_pin,
    40de:	69e0      	ldr	r0, [r4, #28]
	twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
    40e0:	00db      	lsls	r3, r3, #3
    40e2:	50fa      	str	r2, [r7, r3]
	return api->config(port, access_op, pin, flags);
    40e4:	6843      	ldr	r3, [r0, #4]
    40e6:	692a      	ldr	r2, [r5, #16]
    40e8:	681b      	ldr	r3, [r3, #0]
    40ea:	2100      	movs	r1, #0
    40ec:	001e      	movs	r6, r3
    40ee:	23c1      	movs	r3, #193	; 0xc1
    40f0:	021b      	lsls	r3, r3, #8
    40f2:	47b0      	blx	r6
	status = gpio_pin_configure(data->gpio, config->sda_pin,
    40f4:	69e0      	ldr	r0, [r4, #28]
    40f6:	68ea      	ldr	r2, [r5, #12]
    40f8:	6843      	ldr	r3, [r0, #4]
    40fa:	2100      	movs	r1, #0
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	001e      	movs	r6, r3
    4100:	23c1      	movs	r3, #193	; 0xc1
    4102:	021b      	lsls	r3, r3, #8
    4104:	47b0      	blx	r6
	twi->PSELSCL = config->scl_pin;
    4106:	23a1      	movs	r3, #161	; 0xa1
    4108:	692a      	ldr	r2, [r5, #16]
    410a:	00db      	lsls	r3, r3, #3
    410c:	50fa      	str	r2, [r7, r3]
	twi->PSELSDA = config->sda_pin;
    410e:	68ea      	ldr	r2, [r5, #12]
    4110:	4b0d      	ldr	r3, [pc, #52]	; (4148 <i2c_nrf5_init+0x94>)
	status = i2c_nrf5_configure(dev, config->default_cfg);
    4112:	68a9      	ldr	r1, [r5, #8]
	twi->PSELSDA = config->sda_pin;
    4114:	50fa      	str	r2, [r7, r3]
	twi->ERRORSRC = twi->ERRORSRC;
    4116:	4b0d      	ldr	r3, [pc, #52]	; (414c <i2c_nrf5_init+0x98>)
	status = i2c_nrf5_configure(dev, config->default_cfg);
    4118:	9801      	ldr	r0, [sp, #4]
	twi->ERRORSRC = twi->ERRORSRC;
    411a:	58fa      	ldr	r2, [r7, r3]
    411c:	50fa      	str	r2, [r7, r3]
	twi->EVENTS_TXDSENT = 0;
    411e:	003b      	movs	r3, r7
    4120:	2200      	movs	r2, #0
    4122:	33fc      	adds	r3, #252	; 0xfc
    4124:	621a      	str	r2, [r3, #32]
	twi->EVENTS_RXDREADY = 0;
    4126:	60da      	str	r2, [r3, #12]
	twi->EVENTS_ERROR = 0;
    4128:	629a      	str	r2, [r3, #40]	; 0x28
	twi->INTENSET = (NRF5_TWI_INT_TXDSENT
    412a:	23c1      	movs	r3, #193	; 0xc1
    412c:	4a08      	ldr	r2, [pc, #32]	; (4150 <i2c_nrf5_init+0x9c>)
    412e:	009b      	lsls	r3, r3, #2
    4130:	50fa      	str	r2, [r7, r3]
	status = i2c_nrf5_configure(dev, config->default_cfg);
    4132:	f7ff fec9 	bl	3ec8 <i2c_nrf5_configure>
    4136:	0005      	movs	r5, r0
	k_sem_give(&data->lock);
    4138:	0020      	movs	r0, r4
    413a:	3020      	adds	r0, #32
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    413c:	f008 fb58 	bl	c7f0 <_impl_k_sem_give>
}
    4140:	0028      	movs	r0, r5
    4142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4144:	0000d444 	.word	0x0000d444
    4148:	0000050c 	.word	0x0000050c
    414c:	000004c4 	.word	0x000004c4
    4150:	00000286 	.word	0x00000286

00004154 <pwm_nrf5_sw_pin_set>:
	return i;
}

static int pwm_nrf5_sw_pin_set(struct device *dev, u32_t pwm,
			       u32_t period_cycles, u32_t pulse_cycles)
{
    4154:	b5f0      	push	{r4, r5, r6, r7, lr}
    4156:	b087      	sub	sp, #28
    4158:	9301      	str	r3, [sp, #4]
	u8_t ppi_index;
	u8_t channel;
	u16_t div;
	u32_t ret;

	config = (struct pwm_config *)dev->config->config_info;
    415a:	6803      	ldr	r3, [r0, #0]
{
    415c:	9200      	str	r2, [sp, #0]
	config = (struct pwm_config *)dev->config->config_info;
    415e:	689e      	ldr	r6, [r3, #8]
	timer = config->timer;
	data = dev->driver_data;
    4160:	6882      	ldr	r2, [r0, #8]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    4162:	9801      	ldr	r0, [sp, #4]
{
    4164:	9102      	str	r1, [sp, #8]

	/* check if requested period is allowed while other channels are
	 * active.
	 */
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    4166:	79b1      	ldrb	r1, [r6, #6]
    4168:	1d13      	adds	r3, r2, #4
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    416a:	2800      	cmp	r0, #0
    416c:	d009      	beq.n	4182 <pwm_nrf5_sw_pin_set+0x2e>
    416e:	9800      	ldr	r0, [sp, #0]
    4170:	9c01      	ldr	r4, [sp, #4]
    4172:	42a0      	cmp	r0, r4
    4174:	d005      	beq.n	4182 <pwm_nrf5_sw_pin_set+0x2e>
    4176:	001c      	movs	r4, r3
    4178:	00c8      	lsls	r0, r1, #3
    417a:	3004      	adds	r0, #4
    417c:	1810      	adds	r0, r2, r0
	for (i = 0; i < map_size; i++) {
    417e:	4284      	cmp	r4, r0
    4180:	d105      	bne.n	418e <pwm_nrf5_sw_pin_set+0x3a>
{
    4182:	2000      	movs	r0, #0
	for (i = 0; i < map_size; i++) {
    4184:	4281      	cmp	r1, r0
    4186:	d110      	bne.n	41aa <pwm_nrf5_sw_pin_set+0x56>
    4188:	1e4b      	subs	r3, r1, #1
    418a:	b2db      	uxtb	r3, r3
    418c:	e01f      	b.n	41ce <pwm_nrf5_sw_pin_set+0x7a>
		if ((data->map[i].pwm != pwm) &&
    418e:	9d02      	ldr	r5, [sp, #8]
    4190:	6827      	ldr	r7, [r4, #0]
    4192:	42bd      	cmp	r5, r7
    4194:	d007      	beq.n	41a6 <pwm_nrf5_sw_pin_set+0x52>
    4196:	6865      	ldr	r5, [r4, #4]
    4198:	2d00      	cmp	r5, #0
    419a:	d004      	beq.n	41a6 <pwm_nrf5_sw_pin_set+0x52>
		    (data->map[i].pulse_cycles != 0) &&
    419c:	9d00      	ldr	r5, [sp, #0]
    419e:	6817      	ldr	r7, [r2, #0]
    41a0:	42bd      	cmp	r5, r7
    41a2:	d000      	beq.n	41a6 <pwm_nrf5_sw_pin_set+0x52>
    41a4:	e0b7      	b.n	4316 <pwm_nrf5_sw_pin_set+0x1c2>
    41a6:	3408      	adds	r4, #8
    41a8:	e7e9      	b.n	417e <pwm_nrf5_sw_pin_set+0x2a>
    41aa:	3308      	adds	r3, #8
		if (pwm == data->map[i].pwm) {
    41ac:	001c      	movs	r4, r3
    41ae:	3c08      	subs	r4, #8
    41b0:	6824      	ldr	r4, [r4, #0]
    41b2:	9d02      	ldr	r5, [sp, #8]
    41b4:	42a5      	cmp	r5, r4
    41b6:	d044      	beq.n	4242 <pwm_nrf5_sw_pin_set+0xee>
	for (i = 0; i < map_size; i++) {
    41b8:	3001      	adds	r0, #1
    41ba:	b2c0      	uxtb	r0, r0
    41bc:	e7e2      	b.n	4184 <pwm_nrf5_sw_pin_set+0x30>
		if (data->map[i].pulse_cycles == 0) {
    41be:	00dd      	lsls	r5, r3, #3
    41c0:	1955      	adds	r5, r2, r5
    41c2:	68ad      	ldr	r5, [r5, #8]
    41c4:	1e5c      	subs	r4, r3, #1
    41c6:	b2e4      	uxtb	r4, r4
    41c8:	2d00      	cmp	r5, #0
    41ca:	d004      	beq.n	41d6 <pwm_nrf5_sw_pin_set+0x82>
    41cc:	0023      	movs	r3, r4
	while (i--) {
    41ce:	2bff      	cmp	r3, #255	; 0xff
    41d0:	d1f5      	bne.n	41be <pwm_nrf5_sw_pin_set+0x6a>

	/* map pwm pin to GPIOTE config/channel */
	channel = pwm_channel_map(data, config->map_size, pwm);
	if (channel >= config->map_size) {
		SYS_LOG_ERR("No more channels available");
		return -ENOMEM;
    41d2:	200c      	movs	r0, #12
    41d4:	e0a0      	b.n	4318 <pwm_nrf5_sw_pin_set+0x1c4>
	if (channel >= config->map_size) {
    41d6:	4283      	cmp	r3, r0
    41d8:	d2fb      	bcs.n	41d2 <pwm_nrf5_sw_pin_set+0x7e>

	SYS_LOG_DBG("PWM %d, period %u, pulse %u", pwm,
			period_cycles, pulse_cycles);

	/* clear GPIOTE config */
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    41da:	7930      	ldrb	r0, [r6, #4]
    41dc:	4d4f      	ldr	r5, [pc, #316]	; (431c <pwm_nrf5_sw_pin_set+0x1c8>)
    41de:	18c0      	adds	r0, r0, r3
    41e0:	0080      	lsls	r0, r0, #2
    41e2:	1940      	adds	r0, r0, r5
    41e4:	27a2      	movs	r7, #162	; 0xa2
    41e6:	9004      	str	r0, [sp, #16]
    41e8:	2000      	movs	r0, #0
    41ea:	9d04      	ldr	r5, [sp, #16]
    41ec:	00ff      	lsls	r7, r7, #3
	timer = config->timer;
    41ee:	6834      	ldr	r4, [r6, #0]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    41f0:	51e8      	str	r0, [r5, r7]

	/* clear PPI used */
	ppi_index = config->ppi_base + (channel << 1);
    41f2:	7976      	ldrb	r6, [r6, #5]
    41f4:	005d      	lsls	r5, r3, #1
    41f6:	1975      	adds	r5, r6, r5
    41f8:	b2ed      	uxtb	r5, r5
    41fa:	46ac      	mov	ip, r5
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    41fc:	2601      	movs	r6, #1
    41fe:	3501      	adds	r5, #1
    4200:	40ae      	lsls	r6, r5
    4202:	4667      	mov	r7, ip
    4204:	2501      	movs	r5, #1
    4206:	40bd      	lsls	r5, r7
    4208:	27a1      	movs	r7, #161	; 0xa1
    420a:	432e      	orrs	r6, r5
    420c:	4d44      	ldr	r5, [pc, #272]	; (4320 <pwm_nrf5_sw_pin_set+0x1cc>)
    420e:	00ff      	lsls	r7, r7, #3
    4210:	9603      	str	r6, [sp, #12]
    4212:	51ee      	str	r6, [r5, r7]

	/* configure GPIO pin as output */
	NRF_GPIO->DIRSET = BIT(pwm);
    4214:	2601      	movs	r6, #1
    4216:	9d02      	ldr	r5, [sp, #8]
    4218:	3710      	adds	r7, #16
    421a:	40ae      	lsls	r6, r5
    421c:	25a0      	movs	r5, #160	; 0xa0
    421e:	05ed      	lsls	r5, r5, #23
    4220:	51ee      	str	r6, [r5, r7]
	if (pulse_cycles == 0) {
    4222:	9f01      	ldr	r7, [sp, #4]
    4224:	4287      	cmp	r7, r0
    4226:	d10e      	bne.n	4246 <pwm_nrf5_sw_pin_set+0xf2>
		/* 0% duty cycle, keep pin low */
		NRF_GPIO->OUTCLR = BIT(pwm);
    4228:	483e      	ldr	r0, [pc, #248]	; (4324 <pwm_nrf5_sw_pin_set+0x1d0>)

		goto pin_set_pwm_off;
	} else if (pulse_cycles == period_cycles) {
		/* 100% duty cycle, keep pin high */
		NRF_GPIO->OUTSET = BIT(pwm);
    422a:	502e      	str	r6, [r5, r0]
	data->map[channel].pulse_cycles = pulse_cycles;

	return 0;

pin_set_pwm_off:
	data->map[channel].pulse_cycles = 0;
    422c:	2000      	movs	r0, #0
    422e:	00db      	lsls	r3, r3, #3
    4230:	18d3      	adds	r3, r2, r3
    4232:	00c9      	lsls	r1, r1, #3
    4234:	6098      	str	r0, [r3, #8]
    4236:	1851      	adds	r1, r2, r1
	bool pwm_active = false;

	/* stop timer if all channels are inactive */
	for (channel = 0; channel < config->map_size; channel++) {
    4238:	4291      	cmp	r1, r2
    423a:	d165      	bne.n	4308 <pwm_nrf5_sw_pin_set+0x1b4>
		}
	}

	if (!pwm_active) {
		/* No active PWM, stop timer */
		timer->TASKS_STOP = 1;
    423c:	2301      	movs	r3, #1
    423e:	6063      	str	r3, [r4, #4]
    4240:	e067      	b.n	4312 <pwm_nrf5_sw_pin_set+0x1be>
		if (pwm == data->map[i].pwm) {
    4242:	0003      	movs	r3, r0
    4244:	e7c9      	b.n	41da <pwm_nrf5_sw_pin_set+0x86>
	} else if (pulse_cycles == period_cycles) {
    4246:	9f00      	ldr	r7, [sp, #0]
    4248:	9d01      	ldr	r5, [sp, #4]
    424a:	42af      	cmp	r7, r5
    424c:	d104      	bne.n	4258 <pwm_nrf5_sw_pin_set+0x104>
		NRF_GPIO->OUTSET = BIT(pwm);
    424e:	20a1      	movs	r0, #161	; 0xa1
    4250:	25a0      	movs	r5, #160	; 0xa0
    4252:	00c0      	lsls	r0, r0, #3
    4254:	05ed      	lsls	r5, r5, #23
    4256:	e7e8      	b.n	422a <pwm_nrf5_sw_pin_set+0xd6>
		NRF_GPIO->OUTCLR = BIT(pwm);
    4258:	25a0      	movs	r5, #160	; 0xa0
    425a:	4f32      	ldr	r7, [pc, #200]	; (4324 <pwm_nrf5_sw_pin_set+0x1d0>)
    425c:	05ed      	lsls	r5, r5, #23
    425e:	51ee      	str	r6, [r5, r7]
	timer->MODE = TIMER_MODE_MODE_Timer;
    4260:	4d31      	ldr	r5, [pc, #196]	; (4328 <pwm_nrf5_sw_pin_set+0x1d4>)
    4262:	0089      	lsls	r1, r1, #2
    4264:	5160      	str	r0, [r4, r5]
	timer->PRESCALER = 0;
    4266:	350c      	adds	r5, #12
    4268:	5160      	str	r0, [r4, r5]
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    426a:	3d08      	subs	r5, #8
    426c:	5160      	str	r0, [r4, r5]
    426e:	009d      	lsls	r5, r3, #2
    4270:	1967      	adds	r7, r4, r5
	timer->EVENTS_COMPARE[channel] = 0;
    4272:	003d      	movs	r5, r7
    4274:	1861      	adds	r1, r4, r1
    4276:	35fc      	adds	r5, #252	; 0xfc
    4278:	6468      	str	r0, [r5, #68]	; 0x44
	timer->EVENTS_COMPARE[config->map_size] = 0;
    427a:	000d      	movs	r5, r1
    427c:	35fc      	adds	r5, #252	; 0xfc
    427e:	6468      	str	r0, [r5, #68]	; 0x44
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    4280:	2580      	movs	r5, #128	; 0x80
    4282:	2608      	movs	r6, #8
    4284:	00ad      	lsls	r5, r5, #2
    4286:	5166      	str	r6, [r4, r5]
	div = period_cycles >> 16;
    4288:	9d00      	ldr	r5, [sp, #0]
    428a:	9105      	str	r1, [sp, #20]
    428c:	0c2e      	lsrs	r6, r5, #16
	timer->CC[channel] = pulse_cycles >> div;
    428e:	9d01      	ldr	r5, [sp, #4]
    4290:	40f5      	lsrs	r5, r6
    4292:	0029      	movs	r1, r5
    4294:	25a8      	movs	r5, #168	; 0xa8
    4296:	00ed      	lsls	r5, r5, #3
    4298:	5179      	str	r1, [r7, r5]
	timer->CC[config->map_size] = period_cycles >> div;
    429a:	9f00      	ldr	r7, [sp, #0]
    429c:	9905      	ldr	r1, [sp, #20]
    429e:	40f7      	lsrs	r7, r6
    42a0:	514f      	str	r7, [r1, r5]
	timer->TASKS_CLEAR = 1;
    42a2:	2101      	movs	r1, #1
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    42a4:	26a2      	movs	r6, #162	; 0xa2
	timer->TASKS_CLEAR = 1;
    42a6:	60e1      	str	r1, [r4, #12]
							    (pwm << 8);
    42a8:	9902      	ldr	r1, [sp, #8]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    42aa:	00f6      	lsls	r6, r6, #3
							    (pwm << 8);
    42ac:	020d      	lsls	r5, r1, #8
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    42ae:	491f      	ldr	r1, [pc, #124]	; (432c <pwm_nrf5_sw_pin_set+0x1d8>)
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    42b0:	27a3      	movs	r7, #163	; 0xa3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    42b2:	4329      	orrs	r1, r5
    42b4:	9d04      	ldr	r5, [sp, #16]
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    42b6:	00ff      	lsls	r7, r7, #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    42b8:	51a9      	str	r1, [r5, r6]
    42ba:	4661      	mov	r1, ip
				     &(timer->EVENTS_COMPARE[channel]);
    42bc:	001d      	movs	r5, r3
    42be:	4e18      	ldr	r6, [pc, #96]	; (4320 <pwm_nrf5_sw_pin_set+0x1cc>)
    42c0:	00c9      	lsls	r1, r1, #3
    42c2:	1989      	adds	r1, r1, r6
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    42c4:	26a2      	movs	r6, #162	; 0xa2
				     &(timer->EVENTS_COMPARE[channel]);
    42c6:	3550      	adds	r5, #80	; 0x50
    42c8:	00ad      	lsls	r5, r5, #2
    42ca:	1965      	adds	r5, r4, r5
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    42cc:	00f6      	lsls	r6, r6, #3
    42ce:	518d      	str	r5, [r1, r6]
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    42d0:	4e12      	ldr	r6, [pc, #72]	; (431c <pwm_nrf5_sw_pin_set+0x1c8>)
    42d2:	009d      	lsls	r5, r3, #2
    42d4:	46b4      	mov	ip, r6
    42d6:	4e16      	ldr	r6, [pc, #88]	; (4330 <pwm_nrf5_sw_pin_set+0x1dc>)
    42d8:	4465      	add	r5, ip
    42da:	518d      	str	r5, [r1, r6]
					 &(timer->EVENTS_COMPARE[3]);
    42dc:	0026      	movs	r6, r4
    42de:	364d      	adds	r6, #77	; 0x4d
    42e0:	36ff      	adds	r6, #255	; 0xff
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    42e2:	51ce      	str	r6, [r1, r7]
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    42e4:	4e13      	ldr	r6, [pc, #76]	; (4334 <pwm_nrf5_sw_pin_set+0x1e0>)
    42e6:	00db      	lsls	r3, r3, #3
    42e8:	518d      	str	r5, [r1, r6]
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    42ea:	490d      	ldr	r1, [pc, #52]	; (4320 <pwm_nrf5_sw_pin_set+0x1cc>)
    42ec:	4d0e      	ldr	r5, [pc, #56]	; (4328 <pwm_nrf5_sw_pin_set+0x1d4>)
    42ee:	9e03      	ldr	r6, [sp, #12]
    42f0:	514e      	str	r6, [r1, r5]
	timer->TASKS_START = 1;
    42f2:	2101      	movs	r1, #1
    42f4:	6021      	str	r1, [r4, #0]
	data->period_cycles = period_cycles;
    42f6:	9900      	ldr	r1, [sp, #0]
    42f8:	6011      	str	r1, [r2, #0]
    42fa:	18d2      	adds	r2, r2, r3
	data->map[channel].pwm = pwm;
    42fc:	9b02      	ldr	r3, [sp, #8]
    42fe:	6053      	str	r3, [r2, #4]
	data->map[channel].pulse_cycles = pulse_cycles;
    4300:	9b01      	ldr	r3, [sp, #4]
    4302:	6093      	str	r3, [r2, #8]
	}

	return 0;
}
    4304:	b007      	add	sp, #28
    4306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4308:	3208      	adds	r2, #8
		if (data->map[channel].pulse_cycles) {
    430a:	6813      	ldr	r3, [r2, #0]
    430c:	2b00      	cmp	r3, #0
    430e:	d100      	bne.n	4312 <pwm_nrf5_sw_pin_set+0x1be>
    4310:	e792      	b.n	4238 <pwm_nrf5_sw_pin_set+0xe4>
	return 0;
    4312:	2000      	movs	r0, #0
    4314:	e7f6      	b.n	4304 <pwm_nrf5_sw_pin_set+0x1b0>
		return ret;
    4316:	2016      	movs	r0, #22
		return -ENOMEM;
    4318:	4240      	negs	r0, r0
    431a:	e7f3      	b.n	4304 <pwm_nrf5_sw_pin_set+0x1b0>
    431c:	40006000 	.word	0x40006000
    4320:	4001f000 	.word	0x4001f000
    4324:	0000050c 	.word	0x0000050c
    4328:	00000504 	.word	0x00000504
    432c:	00130003 	.word	0x00130003
    4330:	00000514 	.word	0x00000514
    4334:	0000051c 	.word	0x0000051c

00004338 <pwm_nrf5_sw_get_cycles_per_sec>:
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;

	/* HF timer frequency is derived from 16MHz source and prescaler is 0 */
	*cycles = 16 * 1024 * 1024;
    4338:	2080      	movs	r0, #128	; 0x80
    433a:	2100      	movs	r1, #0
    433c:	0440      	lsls	r0, r0, #17
    433e:	6010      	str	r0, [r2, #0]
    4340:	6051      	str	r1, [r2, #4]

	return 0;
}
    4342:	2000      	movs	r0, #0
    4344:	4770      	bx	lr

00004346 <pwm_nrf5_sw_init>:
};

static int pwm_nrf5_sw_init(struct device *dev)
{
	return 0;
}
    4346:	2000      	movs	r0, #0
    4348:	4770      	bx	lr
	...

0000434c <temp_nrf5_channel_get>:
}

static int temp_nrf5_channel_get(struct device *dev,
				enum sensor_channel chan,
				struct sensor_value *val)
{
    434c:	b570      	push	{r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->driver_data;
    434e:	6883      	ldr	r3, [r0, #8]
{
    4350:	0015      	movs	r5, r2
	s32_t uval;

	SYS_LOG_DBG("");

	if (chan != SENSOR_CHAN_TEMP) {
    4352:	290c      	cmp	r1, #12
    4354:	d10e      	bne.n	4374 <temp_nrf5_channel_get+0x28>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    4356:	699b      	ldr	r3, [r3, #24]
    4358:	4c08      	ldr	r4, [pc, #32]	; (437c <temp_nrf5_channel_get+0x30>)
	val->val1 = uval / 1000000;
    435a:	4909      	ldr	r1, [pc, #36]	; (4380 <temp_nrf5_channel_get+0x34>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    435c:	435c      	muls	r4, r3
	val->val1 = uval / 1000000;
    435e:	0020      	movs	r0, r4
    4360:	f7fb ff80 	bl	264 <__aeabi_idiv>
	val->val2 = uval % 1000000;
    4364:	4906      	ldr	r1, [pc, #24]	; (4380 <temp_nrf5_channel_get+0x34>)
	val->val1 = uval / 1000000;
    4366:	6028      	str	r0, [r5, #0]
	val->val2 = uval % 1000000;
    4368:	0020      	movs	r0, r4
    436a:	f7fb ffd1 	bl	310 <__aeabi_idivmod>

	return 0;
    436e:	2000      	movs	r0, #0
	val->val2 = uval % 1000000;
    4370:	6069      	str	r1, [r5, #4]
}
    4372:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    4374:	2023      	movs	r0, #35	; 0x23
    4376:	4240      	negs	r0, r0
    4378:	e7fb      	b.n	4372 <temp_nrf5_channel_get+0x26>
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	0003d090 	.word	0x0003d090
    4380:	000f4240 	.word	0x000f4240

00004384 <temp_nrf5_init>:
		    &temp_nrf5_driver, NULL,
		    POST_KERNEL,
		    CONFIG_SENSOR_INIT_PRIORITY, &temp_nrf5_driver_api);

static int temp_nrf5_init(struct device *dev)
{
    4384:	b510      	push	{r4, lr}
	volatile NRF_TEMP_Type *temp = NRF_TEMP;
	struct temp_nrf5_data *data = dev->driver_data;
    4386:	6884      	ldr	r4, [r0, #8]

	SYS_LOG_DBG("");

	data->clk_m16_dev =
		device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    4388:	480c      	ldr	r0, [pc, #48]	; (43bc <temp_nrf5_init+0x38>)
    438a:	f007 fd2b 	bl	bde4 <device_get_binding>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    438e:	2201      	movs	r2, #1
	data->clk_m16_dev =
    4390:	61e0      	str	r0, [r4, #28]
    4392:	4252      	negs	r2, r2
    4394:	0020      	movs	r0, r4
    4396:	2100      	movs	r1, #0
    4398:	f008 fa20 	bl	c7dc <_impl_k_sem_init>
	__ASSERT_NO_MSG(data->clk_m16_dev);

	k_sem_init(&data->device_sync_sem, 0, UINT_MAX);
	IRQ_CONNECT(NRF5_IRQ_TEMP_IRQn, CONFIG_TEMP_NRF5_PRI,
    439c:	2200      	movs	r2, #0
    439e:	2101      	movs	r1, #1
    43a0:	200c      	movs	r0, #12
    43a2:	f7fe fb69 	bl	2a78 <_irq_priority_set>
		    temp_nrf5_isr, DEVICE_GET(temp_nrf5), 0);
	irq_enable(NRF5_IRQ_TEMP_IRQn);
    43a6:	200c      	movs	r0, #12
    43a8:	f7fe fb3c 	bl	2a24 <_arch_irq_enable>

	temp->INTENSET = TEMP_INTENSET_DATARDY_Set;
    43ac:	23c1      	movs	r3, #193	; 0xc1
    43ae:	2101      	movs	r1, #1
    43b0:	4a03      	ldr	r2, [pc, #12]	; (43c0 <temp_nrf5_init+0x3c>)
    43b2:	009b      	lsls	r3, r3, #2

	return 0;
}
    43b4:	2000      	movs	r0, #0
	temp->INTENSET = TEMP_INTENSET_DATARDY_Set;
    43b6:	50d1      	str	r1, [r2, r3]
}
    43b8:	bd10      	pop	{r4, pc}
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	0000d903 	.word	0x0000d903
    43c0:	4000c000 	.word	0x4000c000

000043c4 <temp_nrf5_isr>:
	temp->EVENTS_DATARDY = 0;
    43c4:	2200      	movs	r2, #0
{
    43c6:	b510      	push	{r4, lr}
	temp->EVENTS_DATARDY = 0;
    43c8:	4b02      	ldr	r3, [pc, #8]	; (43d4 <temp_nrf5_isr+0x10>)
	struct temp_nrf5_data *data = dev->driver_data;
    43ca:	6880      	ldr	r0, [r0, #8]
	temp->EVENTS_DATARDY = 0;
    43cc:	605a      	str	r2, [r3, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    43ce:	f008 fa0f 	bl	c7f0 <_impl_k_sem_give>
}
    43d2:	bd10      	pop	{r4, pc}
    43d4:	4000c0fc 	.word	0x4000c0fc

000043d8 <temp_nrf5_sample_fetch>:
{
    43d8:	b570      	push	{r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->driver_data;
    43da:	6884      	ldr	r4, [r0, #8]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_TEMP) {
    43dc:	291e      	cmp	r1, #30
    43de:	d001      	beq.n	43e4 <temp_nrf5_sample_fetch+0xc>
    43e0:	290c      	cmp	r1, #12
    43e2:	d118      	bne.n	4416 <temp_nrf5_sample_fetch+0x3e>
	r = clock_control_on(data->clk_m16_dev, (void *)1);
    43e4:	69e0      	ldr	r0, [r4, #28]
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    43e6:	2101      	movs	r1, #1
    43e8:	6843      	ldr	r3, [r0, #4]
	temp->TASKS_START = 1;
    43ea:	2601      	movs	r6, #1
    43ec:	681b      	ldr	r3, [r3, #0]
    43ee:	4798      	blx	r3
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    43f0:	2101      	movs	r1, #1
    43f2:	4d0a      	ldr	r5, [pc, #40]	; (441c <temp_nrf5_sample_fetch+0x44>)
    43f4:	4249      	negs	r1, r1
    43f6:	602e      	str	r6, [r5, #0]
    43f8:	0020      	movs	r0, r4
    43fa:	f008 fa53 	bl	c8a4 <_impl_k_sem_take>
	r = clock_control_off(data->clk_m16_dev, (void *)1);
    43fe:	69e0      	ldr	r0, [r4, #28]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    4400:	0031      	movs	r1, r6
    4402:	6843      	ldr	r3, [r0, #4]
    4404:	685b      	ldr	r3, [r3, #4]
    4406:	4798      	blx	r3
	data->sample = temp->TEMP;
    4408:	23a1      	movs	r3, #161	; 0xa1
	return 0;
    440a:	2000      	movs	r0, #0
	data->sample = temp->TEMP;
    440c:	00db      	lsls	r3, r3, #3
    440e:	58eb      	ldr	r3, [r5, r3]
    4410:	61a3      	str	r3, [r4, #24]
	temp->TASKS_STOP = 1;
    4412:	606e      	str	r6, [r5, #4]
}
    4414:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    4416:	2023      	movs	r0, #35	; 0x23
    4418:	4240      	negs	r0, r0
    441a:	e7fb      	b.n	4414 <temp_nrf5_sample_fetch+0x3c>
    441c:	4000c000 	.word	0x4000c000

00004420 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    4420:	6803      	ldr	r3, [r0, #0]
    4422:	689b      	ldr	r3, [r3, #8]
    4424:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    4426:	001a      	movs	r2, r3
    4428:	32fc      	adds	r2, #252	; 0xfc
    442a:	68d0      	ldr	r0, [r2, #12]
    442c:	2800      	cmp	r0, #0
    442e:	d006      	beq.n	443e <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    4430:	2000      	movs	r0, #0
    4432:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
    4434:	22a3      	movs	r2, #163	; 0xa3
    4436:	00d2      	lsls	r2, r2, #3
    4438:	589b      	ldr	r3, [r3, r2]
    443a:	700b      	strb	r3, [r1, #0]

	return 0;
}
    443c:	4770      	bx	lr
		return -1;
    443e:	2001      	movs	r0, #1
    4440:	4240      	negs	r0, r0
    4442:	e7fb      	b.n	443c <uart_nrf5_poll_in+0x1c>

00004444 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    4444:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    4446:	4a06      	ldr	r2, [pc, #24]	; (4460 <uart_nrf5_poll_out+0x1c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    4448:	689b      	ldr	r3, [r3, #8]
    444a:	681b      	ldr	r3, [r3, #0]
	uart->TXD = (u8_t)c;
    444c:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    444e:	33fc      	adds	r3, #252	; 0xfc
    4450:	6a1a      	ldr	r2, [r3, #32]
    4452:	2a00      	cmp	r2, #0
    4454:	d0fc      	beq.n	4450 <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
    4456:	2200      	movs	r2, #0

	return c;
}
    4458:	0008      	movs	r0, r1
	uart->EVENTS_TXDRDY = 0;
    445a:	621a      	str	r2, [r3, #32]
}
    445c:	4770      	bx	lr
    445e:	46c0      	nop			; (mov r8, r8)
    4460:	0000051c 	.word	0x0000051c

00004464 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    4464:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
    4466:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    4468:	689b      	ldr	r3, [r3, #8]
    446a:	681b      	ldr	r3, [r3, #0]

	if (uart->EVENTS_ERROR) {
    446c:	001a      	movs	r2, r3
    446e:	32fc      	adds	r2, #252	; 0xfc
    4470:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4472:	4282      	cmp	r2, r0
    4474:	d003      	beq.n	447e <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    4476:	2290      	movs	r2, #144	; 0x90
    4478:	00d2      	lsls	r2, r2, #3
    447a:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
    447c:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;
    447e:	230f      	movs	r3, #15
    4480:	4018      	ands	r0, r3

	return error;
}
    4482:	4770      	bx	lr

00004484 <uart_nrf5_init>:
{
    4484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    4486:	6803      	ldr	r3, [r0, #0]
{
    4488:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    448a:	689b      	ldr	r3, [r3, #8]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    448c:	4818      	ldr	r0, [pc, #96]	; (44f0 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    448e:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    4490:	f007 fca8 	bl	bde4 <device_get_binding>
    4494:	6843      	ldr	r3, [r0, #4]
    4496:	0006      	movs	r6, r0
    4498:	681f      	ldr	r7, [r3, #0]
    449a:	2302      	movs	r3, #2
    449c:	2218      	movs	r2, #24
    449e:	33ff      	adds	r3, #255	; 0xff
    44a0:	2100      	movs	r1, #0
    44a2:	47b8      	blx	r7
    44a4:	6873      	ldr	r3, [r6, #4]
    44a6:	0030      	movs	r0, r6
    44a8:	681f      	ldr	r7, [r3, #0]
    44aa:	2300      	movs	r3, #0
    44ac:	2219      	movs	r2, #25
    44ae:	0019      	movs	r1, r3
    44b0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    44b2:	2218      	movs	r2, #24
    44b4:	4b0f      	ldr	r3, [pc, #60]	; (44f4 <uart_nrf5_init+0x70>)
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    44b6:	21eb      	movs	r1, #235	; 0xeb
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    44b8:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    44ba:	4b0f      	ldr	r3, [pc, #60]	; (44f8 <uart_nrf5_init+0x74>)
    44bc:	3201      	adds	r2, #1
    44be:	50e2      	str	r2, [r4, r3]
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    44c0:	22e1      	movs	r2, #225	; 0xe1
    44c2:	68ab      	ldr	r3, [r5, #8]
    44c4:	0252      	lsls	r2, r2, #9
    44c6:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    44c8:	682b      	ldr	r3, [r5, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    44ca:	0449      	lsls	r1, r1, #17
	volatile struct _uart *uart = UART_STRUCT(dev);
    44cc:	689b      	ldr	r3, [r3, #8]
	uart->EVENTS_TXDRDY = 0;
    44ce:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    44d0:	681a      	ldr	r2, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    44d2:	4b0a      	ldr	r3, [pc, #40]	; (44fc <uart_nrf5_init+0x78>)
    44d4:	50d1      	str	r1, [r2, r3]
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    44d6:	2204      	movs	r2, #4
    44d8:	3b24      	subs	r3, #36	; 0x24
    44da:	50e2      	str	r2, [r4, r3]
	uart->EVENTS_TXDRDY = 0;
    44dc:	0023      	movs	r3, r4
    44de:	33fc      	adds	r3, #252	; 0xfc
    44e0:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
    44e2:	60d8      	str	r0, [r3, #12]
	uart->TASKS_STARTTX = 1;
    44e4:	2301      	movs	r3, #1
    44e6:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    44e8:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    44ea:	4b05      	ldr	r3, [pc, #20]	; (4500 <uart_nrf5_init+0x7c>)
    44ec:	606b      	str	r3, [r5, #4]
}
    44ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44f0:	0000d444 	.word	0x0000d444
    44f4:	0000050c 	.word	0x0000050c
    44f8:	00000514 	.word	0x00000514
    44fc:	00000524 	.word	0x00000524
    4500:	0000d9e8 	.word	0x0000d9e8

00004504 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    4504:	22a8      	movs	r2, #168	; 0xa8
    4506:	4b08      	ldr	r3, [pc, #32]	; (4528 <rtc_compare_set+0x24>)
    4508:	00d2      	lsls	r2, r2, #3
    450a:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
    450c:	4a07      	ldr	r2, [pc, #28]	; (452c <rtc_compare_set+0x28>)
    450e:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    4510:	1ac0      	subs	r0, r0, r3
    4512:	0200      	lsls	r0, r0, #8
    4514:	0a00      	lsrs	r0, r0, #8
    4516:	4b06      	ldr	r3, [pc, #24]	; (4530 <rtc_compare_set+0x2c>)
    4518:	3802      	subs	r0, #2
    451a:	4298      	cmp	r0, r3
    451c:	d903      	bls.n	4526 <rtc_compare_set+0x22>
    451e:	2280      	movs	r2, #128	; 0x80
    4520:	4b04      	ldr	r3, [pc, #16]	; (4534 <rtc_compare_set+0x30>)
    4522:	0292      	lsls	r2, r2, #10
    4524:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    4526:	4770      	bx	lr
    4528:	40011000 	.word	0x40011000
    452c:	00000504 	.word	0x00000504
    4530:	007ffffd 	.word	0x007ffffd
    4534:	e000e1fc 	.word	0xe000e1fc

00004538 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    4538:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    453a:	4b11      	ldr	r3, [pc, #68]	; (4580 <rtc_announce_set_next+0x48>)
    453c:	4a11      	ldr	r2, [pc, #68]	; (4584 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    453e:	4c12      	ldr	r4, [pc, #72]	; (4588 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    4540:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    4542:	6825      	ldr	r5, [r4, #0]
    4544:	1b40      	subs	r0, r0, r5
    4546:	0200      	lsls	r0, r0, #8
    4548:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    454a:	2882      	cmp	r0, #130	; 0x82
    454c:	d912      	bls.n	4574 <rtc_announce_set_next+0x3c>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    454e:	2183      	movs	r1, #131	; 0x83
    4550:	f7fb fe3a 	bl	1c8 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
    4554:	4b0d      	ldr	r3, [pc, #52]	; (458c <rtc_announce_set_next+0x54>)
    4556:	681a      	ldr	r2, [r3, #0]
    4558:	4282      	cmp	r2, r0
    455a:	d900      	bls.n	455e <rtc_announce_set_next+0x26>
    455c:	0002      	movs	r2, r0
		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
    455e:	2383      	movs	r3, #131	; 0x83
    4560:	4353      	muls	r3, r2
		rtc_past = (rtc_past +
    4562:	195b      	adds	r3, r3, r5
			   ) & RTC_MASK;
    4564:	021b      	lsls	r3, r3, #8
    4566:	0a1b      	lsrs	r3, r3, #8
		rtc_past = (rtc_past +
    4568:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    456a:	4b09      	ldr	r3, [pc, #36]	; (4590 <rtc_announce_set_next+0x58>)
		_sys_clock_tick_announce();
    456c:	0010      	movs	r0, r2
		_sys_idle_elapsed_ticks = sys_elapsed;
    456e:	601a      	str	r2, [r3, #0]
		_sys_clock_tick_announce();
    4570:	f008 f9d2 	bl	c918 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    4574:	6820      	ldr	r0, [r4, #0]
    4576:	3083      	adds	r0, #131	; 0x83
    4578:	f7ff ffc4 	bl	4504 <rtc_compare_set>
}
    457c:	bd70      	pop	{r4, r5, r6, pc}
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	00000504 	.word	0x00000504
    4584:	40011000 	.word	0x40011000
    4588:	2000008c 	.word	0x2000008c
    458c:	20000088 	.word	0x20000088
    4590:	200024bc 	.word	0x200024bc

00004594 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    4594:	2200      	movs	r2, #0
{
    4596:	b510      	push	{r4, lr}
	RTC_CC_EVENT = 0;
    4598:	4b02      	ldr	r3, [pc, #8]	; (45a4 <rtc1_nrf5_isr+0x10>)
    459a:	645a      	str	r2, [r3, #68]	; 0x44
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    459c:	f7ff ffcc 	bl	4538 <rtc_announce_set_next>
#ifdef CONFIG_EXECUTION_BENCHMARKING
	extern void read_timer_end_of_tick_handler(void);
	read_timer_end_of_tick_handler();
#endif

}
    45a0:	bd10      	pop	{r4, pc}
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	400110fc 	.word	0x400110fc

000045a8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    45a8:	4a07      	ldr	r2, [pc, #28]	; (45c8 <_timer_idle_enter+0x20>)
{
    45aa:	b510      	push	{r4, lr}
    45ac:	0003      	movs	r3, r0
	if ((sys_ticks < 0) ||
    45ae:	4290      	cmp	r0, r2
    45b0:	d900      	bls.n	45b4 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    45b2:	0013      	movs	r3, r2
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    45b4:	2083      	movs	r0, #131	; 0x83
	expected_sys_ticks = sys_ticks;
    45b6:	4a05      	ldr	r2, [pc, #20]	; (45cc <_timer_idle_enter+0x24>)
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    45b8:	4358      	muls	r0, r3
	expected_sys_ticks = sys_ticks;
    45ba:	6013      	str	r3, [r2, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    45bc:	4b04      	ldr	r3, [pc, #16]	; (45d0 <_timer_idle_enter+0x28>)
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	18c0      	adds	r0, r0, r3
    45c2:	f7ff ff9f 	bl	4504 <rtc_compare_set>
}
    45c6:	bd10      	pop	{r4, pc}
    45c8:	0000fa23 	.word	0x0000fa23
    45cc:	20000088 	.word	0x20000088
    45d0:	2000008c 	.word	0x2000008c

000045d4 <_timer_idle_exit>:
	RTC_CC_EVENT = 0;
    45d4:	2200      	movs	r2, #0
    45d6:	4b07      	ldr	r3, [pc, #28]	; (45f4 <_timer_idle_exit+0x20>)
{
    45d8:	b510      	push	{r4, lr}
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    45da:	2180      	movs	r1, #128	; 0x80
	RTC_CC_EVENT = 0;
    45dc:	645a      	str	r2, [r3, #68]	; 0x44
    45de:	23c0      	movs	r3, #192	; 0xc0
    45e0:	4a05      	ldr	r2, [pc, #20]	; (45f8 <_timer_idle_exit+0x24>)
    45e2:	005b      	lsls	r3, r3, #1
    45e4:	0289      	lsls	r1, r1, #10
    45e6:	50d1      	str	r1, [r2, r3]
	rtc_announce_set_next();
    45e8:	f7ff ffa6 	bl	4538 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    45ec:	2201      	movs	r2, #1
    45ee:	4b03      	ldr	r3, [pc, #12]	; (45fc <_timer_idle_exit+0x28>)
    45f0:	601a      	str	r2, [r3, #0]
}
    45f2:	bd10      	pop	{r4, pc}
    45f4:	400110fc 	.word	0x400110fc
    45f8:	e000e100 	.word	0xe000e100
    45fc:	20000088 	.word	0x20000088

00004600 <_sys_clock_driver_init>:

int _sys_clock_driver_init(struct device *device)
{
    4600:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    4602:	481a      	ldr	r0, [pc, #104]	; (466c <_sys_clock_driver_init+0x6c>)
    4604:	f007 fbee 	bl	bde4 <device_get_binding>
	if (!clock) {
    4608:	2800      	cmp	r0, #0
    460a:	d02b      	beq.n	4664 <_sys_clock_driver_init+0x64>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    460c:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    460e:	2601      	movs	r6, #1
	return api->on(dev, sys);
    4610:	6843      	ldr	r3, [r0, #4]
    4612:	2100      	movs	r1, #0
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	4798      	blx	r3
	rtc_past = 0;
    4618:	4b15      	ldr	r3, [pc, #84]	; (4670 <_sys_clock_driver_init+0x70>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    461a:	2283      	movs	r2, #131	; 0x83
	rtc_past = 0;
    461c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    461e:	4b15      	ldr	r3, [pc, #84]	; (4674 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    4620:	4d15      	ldr	r5, [pc, #84]	; (4678 <_sys_clock_driver_init+0x78>)
	expected_sys_ticks = 1;
    4622:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->PRESCALER = 0;
    4624:	23a1      	movs	r3, #161	; 0xa1
    4626:	00db      	lsls	r3, r3, #3
    4628:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    462a:	3338      	adds	r3, #56	; 0x38
    462c:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    462e:	2380      	movs	r3, #128	; 0x80
    4630:	22d1      	movs	r2, #209	; 0xd1
    4632:	025b      	lsls	r3, r3, #9
    4634:	0092      	lsls	r2, r2, #2
    4636:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    4638:	3a40      	subs	r2, #64	; 0x40
    463a:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    463c:	4b0f      	ldr	r3, [pc, #60]	; (467c <_sys_clock_driver_init+0x7c>)
    463e:	2180      	movs	r1, #128	; 0x80
    4640:	645c      	str	r4, [r3, #68]	; 0x44
    4642:	23c0      	movs	r3, #192	; 0xc0
    4644:	4a0e      	ldr	r2, [pc, #56]	; (4680 <_sys_clock_driver_init+0x80>)
    4646:	005b      	lsls	r3, r3, #1
    4648:	0289      	lsls	r1, r1, #10
    464a:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    464c:	2011      	movs	r0, #17
    464e:	0022      	movs	r2, r4
    4650:	0031      	movs	r1, r6
    4652:	f7fe fa11 	bl	2a78 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    4656:	2011      	movs	r0, #17
    4658:	f7fe f9e4 	bl	2a24 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    465c:	0020      	movs	r0, r4
	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    465e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    4660:	602e      	str	r6, [r5, #0]
}
    4662:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    4664:	2001      	movs	r0, #1
    4666:	4240      	negs	r0, r0
    4668:	e7fb      	b.n	4662 <_sys_clock_driver_init+0x62>
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	0000d8f8 	.word	0x0000d8f8
    4670:	2000008c 	.word	0x2000008c
    4674:	20000088 	.word	0x20000088
    4678:	40011000 	.word	0x40011000
    467c:	400110fc 	.word	0x400110fc
    4680:	e000e100 	.word	0xe000e100

00004684 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    4684:	490a      	ldr	r1, [pc, #40]	; (46b0 <_timer_cycle_get_32+0x2c>)
    4686:	4a0b      	ldr	r2, [pc, #44]	; (46b4 <_timer_cycle_get_32+0x30>)
{
    4688:	b570      	push	{r4, r5, r6, lr}
	rtc_now = RTC_COUNTER;
    468a:	588b      	ldr	r3, [r1, r2]
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    468c:	4e0a      	ldr	r6, [pc, #40]	; (46b8 <_timer_cycle_get_32+0x34>)
    468e:	6834      	ldr	r4, [r6, #0]
    4690:	6875      	ldr	r5, [r6, #4]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    4692:	5888      	ldr	r0, [r1, r2]
	} while (rtc_now != rtc_prev);
    4694:	4283      	cmp	r3, r0
    4696:	d109      	bne.n	46ac <_timer_cycle_get_32+0x28>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    4698:	2083      	movs	r0, #131	; 0x83
    469a:	4360      	muls	r0, r4
    469c:	1a18      	subs	r0, r3, r0

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    469e:	4b07      	ldr	r3, [pc, #28]	; (46bc <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    46a0:	0200      	lsls	r0, r0, #8
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    46a2:	681b      	ldr	r3, [r3, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    46a4:	0a00      	lsrs	r0, r0, #8
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    46a6:	435c      	muls	r4, r3
    46a8:	1900      	adds	r0, r0, r4
	       elapsed_cycles;
}
    46aa:	bd70      	pop	{r4, r5, r6, pc}
    46ac:	0003      	movs	r3, r0
    46ae:	e7ee      	b.n	468e <_timer_cycle_get_32+0xa>
    46b0:	40011000 	.word	0x40011000
    46b4:	00000504 	.word	0x00000504
    46b8:	20000de8 	.word	0x20000de8
    46bc:	200024c0 	.word	0x200024c0

000046c0 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    46c0:	b570      	push	{r4, r5, r6, lr}
    46c2:	0006      	movs	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    46c4:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    46c6:	000d      	movs	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    46c8:	f007 fa72 	bl	bbb0 <net_buf_pool_get>
    46cc:	4b0e      	ldr	r3, [pc, #56]	; (4708 <hci_cmd_done.isra.9+0x48>)
    46ce:	4298      	cmp	r0, r3
    46d0:	d118      	bne.n	4704 <hci_cmd_done.isra.9+0x44>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    46d2:	0028      	movs	r0, r5
    46d4:	f007 fa72 	bl	bbbc <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    46d8:	0028      	movs	r0, r5
    46da:	f007 fa6f 	bl	bbbc <net_buf_id>
    46de:	4c0b      	ldr	r4, [pc, #44]	; (470c <hci_cmd_done.isra.9+0x4c>)
    46e0:	00c0      	lsls	r0, r0, #3
    46e2:	1820      	adds	r0, r4, r0
    46e4:	6843      	ldr	r3, [r0, #4]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d00c      	beq.n	4704 <hci_cmd_done.isra.9+0x44>
		cmd(buf)->status = status;
    46ea:	0028      	movs	r0, r5
    46ec:	f007 fa66 	bl	bbbc <net_buf_id>
    46f0:	00c0      	lsls	r0, r0, #3
    46f2:	5506      	strb	r6, [r0, r4]
		k_sem_give(cmd(buf)->sync);
    46f4:	0028      	movs	r0, r5
    46f6:	f007 fa61 	bl	bbbc <net_buf_id>
    46fa:	00c0      	lsls	r0, r0, #3
    46fc:	1824      	adds	r4, r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    46fe:	6860      	ldr	r0, [r4, #4]
    4700:	f008 f876 	bl	c7f0 <_impl_k_sem_give>
	}
}
    4704:	bd70      	pop	{r4, r5, r6, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	200025b4 	.word	0x200025b4
    470c:	20000090 	.word	0x20000090

00004710 <atomic_test_bit.constprop.24>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
    4710:	b510      	push	{r4, lr}
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4712:	0942      	lsrs	r2, r0, #5
static inline int atomic_test_bit(const atomic_t *target, int bit)
    4714:	0004      	movs	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4716:	4806      	ldr	r0, [pc, #24]	; (4730 <atomic_test_bit.constprop.24+0x20>)
    4718:	0092      	lsls	r2, r2, #2
    471a:	3070      	adds	r0, #112	; 0x70
    471c:	1880      	adds	r0, r0, r2
    471e:	f008 fc55 	bl	cfcc <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    4722:	231f      	movs	r3, #31
    4724:	401c      	ands	r4, r3
    4726:	4120      	asrs	r0, r4
    4728:	3b1e      	subs	r3, #30
    472a:	4018      	ands	r0, r3
}
    472c:	bd10      	pop	{r4, pc}
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	20002290 	.word	0x20002290

00004734 <bt_hci_cmd_create>:
{
    4734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4736:	9101      	str	r1, [sp, #4]
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4738:	2101      	movs	r1, #1
{
    473a:	0005      	movs	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    473c:	4249      	negs	r1, r1
    473e:	4813      	ldr	r0, [pc, #76]	; (478c <bt_hci_cmd_create+0x58>)
    4740:	f007 fac8 	bl	bcd4 <net_buf_alloc_fixed>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4744:	0007      	movs	r7, r0
    4746:	3708      	adds	r7, #8
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4748:	0004      	movs	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    474a:	2100      	movs	r1, #0
    474c:	0038      	movs	r0, r7
    474e:	f007 fac9 	bl	bce4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    4752:	2300      	movs	r3, #0
	cmd(buf)->opcode = opcode;
    4754:	0020      	movs	r0, r4
    4756:	7523      	strb	r3, [r4, #20]
    4758:	f007 fa30 	bl	bbbc <net_buf_id>
    475c:	4e0c      	ldr	r6, [pc, #48]	; (4790 <bt_hci_cmd_create+0x5c>)
    475e:	00c0      	lsls	r0, r0, #3
    4760:	1830      	adds	r0, r6, r0
    4762:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    4764:	0020      	movs	r0, r4
    4766:	f007 fa29 	bl	bbbc <net_buf_id>
    476a:	2300      	movs	r3, #0
    476c:	00c0      	lsls	r0, r0, #3
    476e:	1836      	adds	r6, r6, r0
    4770:	6073      	str	r3, [r6, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4772:	0038      	movs	r0, r7
    4774:	2103      	movs	r1, #3
    4776:	f007 fafd 	bl	bd74 <net_buf_simple_add>
	hdr->param_len = param_len;
    477a:	466b      	mov	r3, sp
    477c:	791b      	ldrb	r3, [r3, #4]
	hdr->opcode = sys_cpu_to_le16(opcode);
    477e:	7005      	strb	r5, [r0, #0]
    4780:	0a2d      	lsrs	r5, r5, #8
    4782:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    4784:	7083      	strb	r3, [r0, #2]
}
    4786:	0020      	movs	r0, r4
    4788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    478a:	46c0      	nop			; (mov r8, r8)
    478c:	200025b4 	.word	0x200025b4
    4790:	20000090 	.word	0x20000090

00004794 <bt_hci_cmd_send_sync>:
{
    4794:	b570      	push	{r4, r5, r6, lr}
    4796:	000c      	movs	r4, r1
    4798:	b086      	sub	sp, #24
    479a:	0015      	movs	r5, r2
	if (!buf) {
    479c:	2900      	cmp	r1, #0
    479e:	d103      	bne.n	47a8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    47a0:	f7ff ffc8 	bl	4734 <bt_hci_cmd_create>
    47a4:	1e04      	subs	r4, r0, #0
		if (!buf) {
    47a6:	d02f      	beq.n	4808 <bt_hci_cmd_send_sync+0x74>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    47a8:	2201      	movs	r2, #1
    47aa:	2100      	movs	r1, #0
    47ac:	4668      	mov	r0, sp
    47ae:	f008 f815 	bl	c7dc <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    47b2:	0020      	movs	r0, r4
    47b4:	f007 fa02 	bl	bbbc <net_buf_id>
    47b8:	466b      	mov	r3, sp
    47ba:	4e14      	ldr	r6, [pc, #80]	; (480c <bt_hci_cmd_send_sync+0x78>)
    47bc:	00c0      	lsls	r0, r0, #3
    47be:	1830      	adds	r0, r6, r0
    47c0:	6043      	str	r3, [r0, #4]
	net_buf_ref(buf);
    47c2:	0020      	movs	r0, r4
    47c4:	f007 fad2 	bl	bd6c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    47c8:	4811      	ldr	r0, [pc, #68]	; (4810 <bt_hci_cmd_send_sync+0x7c>)
    47ca:	0021      	movs	r1, r4
    47cc:	30b4      	adds	r0, #180	; 0xb4
    47ce:	f007 fa8d 	bl	bcec <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    47d2:	4910      	ldr	r1, [pc, #64]	; (4814 <bt_hci_cmd_send_sync+0x80>)
    47d4:	4668      	mov	r0, sp
    47d6:	f008 f865 	bl	c8a4 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    47da:	0020      	movs	r0, r4
    47dc:	f007 f9ee 	bl	bbbc <net_buf_id>
    47e0:	00c0      	lsls	r0, r0, #3
    47e2:	5d80      	ldrb	r0, [r0, r6]
    47e4:	2800      	cmp	r0, #0
    47e6:	d005      	beq.n	47f4 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
    47e8:	0020      	movs	r0, r4
    47ea:	f007 fa8d 	bl	bd08 <net_buf_unref>
		err = -EIO;
    47ee:	2005      	movs	r0, #5
			return -ENOBUFS;
    47f0:	4240      	negs	r0, r0
    47f2:	e002      	b.n	47fa <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    47f4:	2d00      	cmp	r5, #0
    47f6:	d002      	beq.n	47fe <bt_hci_cmd_send_sync+0x6a>
			*rsp = buf;
    47f8:	602c      	str	r4, [r5, #0]
}
    47fa:	b006      	add	sp, #24
    47fc:	bd70      	pop	{r4, r5, r6, pc}
			net_buf_unref(buf);
    47fe:	0020      	movs	r0, r4
    4800:	f007 fa82 	bl	bd08 <net_buf_unref>
		err = 0;
    4804:	0028      	movs	r0, r5
    4806:	e7f8      	b.n	47fa <bt_hci_cmd_send_sync+0x66>
			return -ENOBUFS;
    4808:	2037      	movs	r0, #55	; 0x37
    480a:	e7f1      	b.n	47f0 <bt_hci_cmd_send_sync+0x5c>
    480c:	20000090 	.word	0x20000090
    4810:	20002290 	.word	0x20002290
    4814:	00002710 	.word	0x00002710

00004818 <set_random_address>:
{
    4818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    481a:	4e14      	ldr	r6, [pc, #80]	; (486c <set_random_address+0x54>)
    481c:	2206      	movs	r2, #6
    481e:	0037      	movs	r7, r6
    4820:	3708      	adds	r7, #8
    4822:	0039      	movs	r1, r7
    4824:	0005      	movs	r5, r0
    4826:	f7fd fa5d 	bl	1ce4 <memcmp>
    482a:	1e04      	subs	r4, r0, #0
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    482c:	d018      	beq.n	4860 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    482e:	2106      	movs	r1, #6
    4830:	480f      	ldr	r0, [pc, #60]	; (4870 <set_random_address+0x58>)
    4832:	f7ff ff7f 	bl	4734 <bt_hci_cmd_create>
    4836:	1e04      	subs	r4, r0, #0
	if (!buf) {
    4838:	d014      	beq.n	4864 <set_random_address+0x4c>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    483a:	2206      	movs	r2, #6
    483c:	0029      	movs	r1, r5
    483e:	3008      	adds	r0, #8
    4840:	f007 fa9f 	bl	bd82 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4844:	0021      	movs	r1, r4
    4846:	2200      	movs	r2, #0
    4848:	4809      	ldr	r0, [pc, #36]	; (4870 <set_random_address+0x58>)
    484a:	f7ff ffa3 	bl	4794 <bt_hci_cmd_send_sync>
    484e:	1e04      	subs	r4, r0, #0
	if (err) {
    4850:	d106      	bne.n	4860 <set_random_address+0x48>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4852:	2206      	movs	r2, #6
    4854:	0029      	movs	r1, r5
    4856:	0038      	movs	r0, r7
    4858:	f7fd fa68 	bl	1d2c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    485c:	2301      	movs	r3, #1
    485e:	71f3      	strb	r3, [r6, #7]
}
    4860:	0020      	movs	r0, r4
    4862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    4864:	2437      	movs	r4, #55	; 0x37
    4866:	4264      	negs	r4, r4
    4868:	e7fa      	b.n	4860 <set_random_address+0x48>
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	20002290 	.word	0x20002290
    4870:	00002005 	.word	0x00002005

00004874 <set_le_scan_enable>:
{
    4874:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    4876:	2102      	movs	r1, #2
{
    4878:	0005      	movs	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    487a:	4816      	ldr	r0, [pc, #88]	; (48d4 <set_le_scan_enable+0x60>)
    487c:	f7ff ff5a 	bl	4734 <bt_hci_cmd_create>
    4880:	1e04      	subs	r4, r0, #0
	if (!buf) {
    4882:	d023      	beq.n	48cc <set_le_scan_enable+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    4884:	2102      	movs	r1, #2
    4886:	3008      	adds	r0, #8
    4888:	f007 fa74 	bl	bd74 <net_buf_simple_add>
    488c:	0006      	movs	r6, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    488e:	2d01      	cmp	r5, #1
    4890:	d114      	bne.n	48bc <set_le_scan_enable+0x48>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    4892:	200a      	movs	r0, #10
    4894:	f7ff ff3c 	bl	4710 <atomic_test_bit.constprop.24>
    4898:	7070      	strb	r0, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    489a:	0021      	movs	r1, r4
	cp->enable = enable;
    489c:	7035      	strb	r5, [r6, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    489e:	2200      	movs	r2, #0
    48a0:	480c      	ldr	r0, [pc, #48]	; (48d4 <set_le_scan_enable+0x60>)
    48a2:	f7ff ff77 	bl	4794 <bt_hci_cmd_send_sync>
    48a6:	1e04      	subs	r4, r0, #0
	if (err) {
    48a8:	d106      	bne.n	48b8 <set_le_scan_enable+0x44>
    48aa:	480b      	ldr	r0, [pc, #44]	; (48d8 <set_le_scan_enable+0x64>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    48ac:	3070      	adds	r0, #112	; 0x70
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    48ae:	2d01      	cmp	r5, #1
    48b0:	d107      	bne.n	48c2 <set_le_scan_enable+0x4e>
    48b2:	2180      	movs	r1, #128	; 0x80
    48b4:	f008 fb96 	bl	cfe4 <atomic_or>
}
    48b8:	0020      	movs	r0, r4
    48ba:	bd70      	pop	{r4, r5, r6, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    48bc:	2300      	movs	r3, #0
    48be:	7043      	strb	r3, [r0, #1]
    48c0:	e7eb      	b.n	489a <set_le_scan_enable+0x26>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    48c2:	2181      	movs	r1, #129	; 0x81
    48c4:	4249      	negs	r1, r1
    48c6:	f008 fb98 	bl	cffa <atomic_and>
    48ca:	e7f5      	b.n	48b8 <set_le_scan_enable+0x44>
		return -ENOBUFS;
    48cc:	2437      	movs	r4, #55	; 0x37
    48ce:	4264      	negs	r4, r4
    48d0:	e7f2      	b.n	48b8 <set_le_scan_enable+0x44>
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	0000200c 	.word	0x0000200c
    48d8:	20002290 	.word	0x20002290

000048dc <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    48dc:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    48de:	2008      	movs	r0, #8
    48e0:	f7ff ff16 	bl	4710 <atomic_test_bit.constprop.24>
    48e4:	1e04      	subs	r4, r0, #0
    48e6:	d001      	beq.n	48ec <bt_le_scan_update+0x10>
		return 0;
    48e8:	2000      	movs	r0, #0

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    48ea:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    48ec:	2007      	movs	r0, #7
    48ee:	f7ff ff0f 	bl	4710 <atomic_test_bit.constprop.24>
    48f2:	2800      	cmp	r0, #0
    48f4:	d0f8      	beq.n	48e8 <bt_le_scan_update+0xc>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    48f6:	0020      	movs	r0, r4
    48f8:	f7ff ffbc 	bl	4874 <set_le_scan_enable>
    48fc:	e7f5      	b.n	48ea <bt_le_scan_update+0xe>

000048fe <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    48fe:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    4900:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    4902:	2106      	movs	r1, #6
{
    4904:	0004      	movs	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    4906:	7003      	strb	r3, [r0, #0]
	return bt_rand(addr->a.val, 6);
    4908:	18c0      	adds	r0, r0, r3
    490a:	f001 faf1 	bl	5ef0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    490e:	2800      	cmp	r0, #0
    4910:	d104      	bne.n	491c <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    4912:	2340      	movs	r3, #64	; 0x40
    4914:	79a2      	ldrb	r2, [r4, #6]
    4916:	425b      	negs	r3, r3
    4918:	4313      	orrs	r3, r2
    491a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    491c:	bd10      	pop	{r4, pc}
	...

00004920 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    4920:	b5f0      	push	{r4, r5, r6, r7, lr}
    4922:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4924:	aa04      	add	r2, sp, #16
    4926:	2100      	movs	r1, #0
    4928:	48c5      	ldr	r0, [pc, #788]	; (4c40 <hci_init+0x320>)
    492a:	f7ff ff33 	bl	4794 <bt_hci_cmd_send_sync>
    492e:	1e04      	subs	r4, r0, #0
	if (err) {
    4930:	d000      	beq.n	4934 <hci_init+0x14>
    4932:	e135      	b.n	4ba0 <hci_init+0x280>
	u8_t status = buf->data[0];
    4934:	9b04      	ldr	r3, [sp, #16]
    4936:	689b      	ldr	r3, [r3, #8]
	if (status) {
    4938:	781b      	ldrb	r3, [r3, #0]
    493a:	2b00      	cmp	r3, #0
    493c:	d106      	bne.n	494c <hci_init+0x2c>
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    493e:	48c1      	ldr	r0, [pc, #772]	; (4c44 <hci_init+0x324>)
	scan_dev_found_cb = NULL;
    4940:	4ac1      	ldr	r2, [pc, #772]	; (4c48 <hci_init+0x328>)
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    4942:	2101      	movs	r1, #1
    4944:	3070      	adds	r0, #112	; 0x70
	scan_dev_found_cb = NULL;
    4946:	6013      	str	r3, [r2, #0]
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    4948:	f008 fb42 	bl	cfd0 <atomic_set>
	net_buf_unref(rsp);
    494c:	9804      	ldr	r0, [sp, #16]
    494e:	f007 f9db 	bl	bd08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4952:	aa04      	add	r2, sp, #16
    4954:	2100      	movs	r1, #0
    4956:	48bd      	ldr	r0, [pc, #756]	; (4c4c <hci_init+0x32c>)
    4958:	f7ff ff1c 	bl	4794 <bt_hci_cmd_send_sync>
    495c:	1e04      	subs	r4, r0, #0
	if (err) {
    495e:	d000      	beq.n	4962 <hci_init+0x42>
    4960:	e11e      	b.n	4ba0 <hci_init+0x280>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4962:	4db8      	ldr	r5, [pc, #736]	; (4c44 <hci_init+0x324>)
    4964:	9b04      	ldr	r3, [sp, #16]
    4966:	0028      	movs	r0, r5
    4968:	6899      	ldr	r1, [r3, #8]
    496a:	2208      	movs	r2, #8
    496c:	3101      	adds	r1, #1
    496e:	3016      	adds	r0, #22
    4970:	f7fd f9dc 	bl	1d2c <memcpy>
	net_buf_unref(rsp);
    4974:	9804      	ldr	r0, [sp, #16]
    4976:	f007 f9c7 	bl	bd08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    497a:	0021      	movs	r1, r4
    497c:	aa04      	add	r2, sp, #16
    497e:	48b4      	ldr	r0, [pc, #720]	; (4c50 <hci_init+0x330>)
    4980:	f7ff ff08 	bl	4794 <bt_hci_cmd_send_sync>
    4984:	1e04      	subs	r4, r0, #0
	if (err) {
    4986:	d000      	beq.n	498a <hci_init+0x6a>
    4988:	e10a      	b.n	4ba0 <hci_init+0x280>
	read_local_ver_complete(rsp);
    498a:	9804      	ldr	r0, [sp, #16]
    498c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    498e:	785a      	ldrb	r2, [r3, #1]
    4990:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4992:	78da      	ldrb	r2, [r3, #3]
    4994:	7899      	ldrb	r1, [r3, #2]
    4996:	0212      	lsls	r2, r2, #8
    4998:	430a      	orrs	r2, r1
    499a:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    499c:	791a      	ldrb	r2, [r3, #4]
    499e:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    49a0:	7a1a      	ldrb	r2, [r3, #8]
    49a2:	79d9      	ldrb	r1, [r3, #7]
    49a4:	0212      	lsls	r2, r2, #8
    49a6:	430a      	orrs	r2, r1
    49a8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    49aa:	795a      	ldrb	r2, [r3, #5]
    49ac:	799b      	ldrb	r3, [r3, #6]
    49ae:	021b      	lsls	r3, r3, #8
    49b0:	4313      	orrs	r3, r2
    49b2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    49b4:	f007 f9a8 	bl	bd08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    49b8:	0021      	movs	r1, r4
    49ba:	aa04      	add	r2, sp, #16
    49bc:	48a5      	ldr	r0, [pc, #660]	; (4c54 <hci_init+0x334>)
    49be:	f7ff fee9 	bl	4794 <bt_hci_cmd_send_sync>
    49c2:	1e04      	subs	r4, r0, #0
	if (err) {
    49c4:	d000      	beq.n	49c8 <hci_init+0xa8>
    49c6:	e0eb      	b.n	4ba0 <hci_init+0x280>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    49c8:	9b04      	ldr	r3, [sp, #16]
    49ca:	2206      	movs	r2, #6
    49cc:	6899      	ldr	r1, [r3, #8]
    49ce:	1c68      	adds	r0, r5, #1
    49d0:	3101      	adds	r1, #1
    49d2:	f7fd f9ab 	bl	1d2c <memcpy>
	net_buf_unref(rsp);
    49d6:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    49d8:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    49da:	f007 f995 	bl	bd08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    49de:	0021      	movs	r1, r4
    49e0:	aa04      	add	r2, sp, #16
    49e2:	489d      	ldr	r0, [pc, #628]	; (4c58 <hci_init+0x338>)
    49e4:	f7ff fed6 	bl	4794 <bt_hci_cmd_send_sync>
    49e8:	1e04      	subs	r4, r0, #0
	if (err) {
    49ea:	d000      	beq.n	49ee <hci_init+0xce>
    49ec:	e0d8      	b.n	4ba0 <hci_init+0x280>
	memcpy(bt_dev.supported_commands, rp->commands,
    49ee:	0028      	movs	r0, r5
    49f0:	9b04      	ldr	r3, [sp, #16]
    49f2:	2240      	movs	r2, #64	; 0x40
    49f4:	6899      	ldr	r1, [r3, #8]
    49f6:	301e      	adds	r0, #30
    49f8:	3101      	adds	r1, #1
    49fa:	f7fd f997 	bl	1d2c <memcpy>
	net_buf_unref(rsp);
    49fe:	9804      	ldr	r0, [sp, #16]
    4a00:	f007 f982 	bl	bd08 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    4a04:	7eab      	ldrb	r3, [r5, #26]
    4a06:	065b      	lsls	r3, r3, #25
    4a08:	d400      	bmi.n	4a0c <hci_init+0xec>
    4a0a:	e157      	b.n	4cbc <hci_init+0x39c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4a0c:	0021      	movs	r1, r4
    4a0e:	aa04      	add	r2, sp, #16
    4a10:	4892      	ldr	r0, [pc, #584]	; (4c5c <hci_init+0x33c>)
    4a12:	f7ff febf 	bl	4794 <bt_hci_cmd_send_sync>
    4a16:	1e04      	subs	r4, r0, #0
	if (err) {
    4a18:	d000      	beq.n	4a1c <hci_init+0xfc>
    4a1a:	e0c1      	b.n	4ba0 <hci_init+0x280>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4a1c:	0028      	movs	r0, r5
    4a1e:	9b04      	ldr	r3, [sp, #16]
    4a20:	2208      	movs	r2, #8
    4a22:	6899      	ldr	r1, [r3, #8]
    4a24:	3078      	adds	r0, #120	; 0x78
    4a26:	3101      	adds	r1, #1
    4a28:	f7fd f980 	bl	1d2c <memcpy>
	net_buf_unref(rsp);
    4a2c:	9804      	ldr	r0, [sp, #16]
    4a2e:	f007 f96b 	bl	bd08 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4a32:	7eab      	ldrb	r3, [r5, #26]
    4a34:	069b      	lsls	r3, r3, #26
    4a36:	d400      	bmi.n	4a3a <hci_init+0x11a>
    4a38:	e09a      	b.n	4b70 <hci_init+0x250>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4a3a:	002b      	movs	r3, r5
    4a3c:	333a      	adds	r3, #58	; 0x3a
    4a3e:	781b      	ldrb	r3, [r3, #0]
    4a40:	071b      	lsls	r3, r3, #28
    4a42:	d500      	bpl.n	4a46 <hci_init+0x126>
    4a44:	e0af      	b.n	4ba6 <hci_init+0x286>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4a46:	2108      	movs	r1, #8
    4a48:	4885      	ldr	r0, [pc, #532]	; (4c60 <hci_init+0x340>)
    4a4a:	f7ff fe73 	bl	4734 <bt_hci_cmd_create>
    4a4e:	1e04      	subs	r4, r0, #0
	if (!buf) {
    4a50:	d100      	bne.n	4a54 <hci_init+0x134>
    4a52:	e093      	b.n	4b7c <hci_init+0x25c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4a54:	2108      	movs	r1, #8
    4a56:	1840      	adds	r0, r0, r1
    4a58:	f007 f98c 	bl	bd74 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4a5c:	002b      	movs	r3, r5
    4a5e:	3340      	adds	r3, #64	; 0x40
    4a60:	781a      	ldrb	r2, [r3, #0]
    4a62:	2306      	movs	r3, #6
    4a64:	401a      	ands	r2, r3
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;
    4a66:	3b04      	subs	r3, #4
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4a68:	2a06      	cmp	r2, #6
    4a6a:	d101      	bne.n	4a70 <hci_init+0x150>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4a6c:	3381      	adds	r3, #129	; 0x81
    4a6e:	33ff      	adds	r3, #255	; 0xff
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    4a70:	2200      	movs	r2, #0
    4a72:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4a74:	0a1b      	lsrs	r3, r3, #8
    4a76:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    4a78:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4a7a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4a7c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4a7e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4a80:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4a82:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4a84:	0021      	movs	r1, r4
    4a86:	4876      	ldr	r0, [pc, #472]	; (4c60 <hci_init+0x340>)
    4a88:	f7ff fe84 	bl	4794 <bt_hci_cmd_send_sync>
    4a8c:	1e04      	subs	r4, r0, #0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    4a8e:	d000      	beq.n	4a92 <hci_init+0x172>
    4a90:	e086      	b.n	4ba0 <hci_init+0x280>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4a92:	2108      	movs	r1, #8
    4a94:	4873      	ldr	r0, [pc, #460]	; (4c64 <hci_init+0x344>)
    4a96:	f7ff fe4d 	bl	4734 <bt_hci_cmd_create>
    4a9a:	1e06      	subs	r6, r0, #0
	if (!buf) {
    4a9c:	d06e      	beq.n	4b7c <hci_init+0x25c>
	ev = net_buf_add(buf, sizeof(*ev));
    4a9e:	2108      	movs	r1, #8
    4aa0:	3008      	adds	r0, #8
    4aa2:	f007 f967 	bl	bd74 <net_buf_simple_add>
    4aa6:	2380      	movs	r3, #128	; 0x80
    4aa8:	2702      	movs	r7, #2
    4aaa:	7043      	strb	r3, [r0, #1]
    4aac:	3b60      	subs	r3, #96	; 0x60
	dst[0] = val;
    4aae:	7004      	strb	r4, [r0, #0]
    4ab0:	7084      	strb	r4, [r0, #2]
    4ab2:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    4ab4:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    4ab6:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    4ab8:	70c7      	strb	r7, [r0, #3]
    4aba:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4abc:	0022      	movs	r2, r4
    4abe:	0031      	movs	r1, r6
    4ac0:	4868      	ldr	r0, [pc, #416]	; (4c64 <hci_init+0x344>)
    4ac2:	f7ff fe67 	bl	4794 <bt_hci_cmd_send_sync>
    4ac6:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    4ac8:	d16a      	bne.n	4ba0 <hci_init+0x280>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    4aca:	0001      	movs	r1, r0
    4acc:	aa04      	add	r2, sp, #16
    4ace:	4866      	ldr	r0, [pc, #408]	; (4c68 <hci_init+0x348>)
    4ad0:	f7ff fe60 	bl	4794 <bt_hci_cmd_send_sync>
	if (err) {
    4ad4:	2800      	cmp	r0, #0
    4ad6:	d126      	bne.n	4b26 <hci_init+0x206>
	net_buf_unref(rsp);
    4ad8:	9804      	ldr	r0, [sp, #16]
    4ada:	f007 f915 	bl	bd08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    4ade:	aa04      	add	r2, sp, #16
    4ae0:	0021      	movs	r1, r4
    4ae2:	4862      	ldr	r0, [pc, #392]	; (4c6c <hci_init+0x34c>)
    4ae4:	f7ff fe56 	bl	4794 <bt_hci_cmd_send_sync>
	if (err) {
    4ae8:	2800      	cmp	r0, #0
    4aea:	d11c      	bne.n	4b26 <hci_init+0x206>
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    4aec:	0028      	movs	r0, r5
	rp.cmds = (void *)rsp->data;
    4aee:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    4af0:	003a      	movs	r2, r7
    4af2:	6899      	ldr	r1, [r3, #8]
    4af4:	305f      	adds	r0, #95	; 0x5f
    4af6:	3101      	adds	r1, #1
    4af8:	f7fd f918 	bl	1d2c <memcpy>
	net_buf_unref(rsp);
    4afc:	9804      	ldr	r0, [sp, #16]
    4afe:	f007 f903 	bl	bd08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    4b02:	aa04      	add	r2, sp, #16
    4b04:	0021      	movs	r1, r4
    4b06:	485a      	ldr	r0, [pc, #360]	; (4c70 <hci_init+0x350>)
    4b08:	f7ff fe44 	bl	4794 <bt_hci_cmd_send_sync>
	if (err) {
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d10a      	bne.n	4b26 <hci_init+0x206>
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    4b10:	0028      	movs	r0, r5
	rp.feat = (void *)rsp->data;
    4b12:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    4b14:	305e      	adds	r0, #94	; 0x5e
    4b16:	6899      	ldr	r1, [r3, #8]
    4b18:	2201      	movs	r2, #1
    4b1a:	3101      	adds	r1, #1
    4b1c:	f7fd f906 	bl	1d2c <memcpy>
	net_buf_unref(rsp);
    4b20:	9804      	ldr	r0, [sp, #16]
    4b22:	f007 f8f1 	bl	bd08 <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4b26:	2207      	movs	r2, #7
    4b28:	2100      	movs	r1, #0
    4b2a:	a802      	add	r0, sp, #8
    4b2c:	f7fd f928 	bl	1d80 <memset>
	return memcmp(a, b, sizeof(*a));
    4b30:	2207      	movs	r2, #7
    4b32:	a902      	add	r1, sp, #8
    4b34:	0028      	movs	r0, r5
    4b36:	f7fd f8d5 	bl	1ce4 <memcmp>
    4b3a:	2800      	cmp	r0, #0
    4b3c:	d157      	bne.n	4bee <hci_init+0x2ce>
	if (bt_storage) {
    4b3e:	4e4d      	ldr	r6, [pc, #308]	; (4c74 <hci_init+0x354>)
    4b40:	6833      	ldr	r3, [r6, #0]
    4b42:	2b00      	cmp	r3, #0
    4b44:	d160      	bne.n	4c08 <hci_init+0x2e8>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    4b46:	002b      	movs	r3, r5
    4b48:	2401      	movs	r4, #1
    4b4a:	3360      	adds	r3, #96	; 0x60
    4b4c:	781b      	ldrb	r3, [r3, #0]
    4b4e:	4223      	tst	r3, r4
    4b50:	d000      	beq.n	4b54 <hci_init+0x234>
    4b52:	e097      	b.n	4c84 <hci_init+0x364>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4b54:	0028      	movs	r0, r5
    4b56:	f7ff fed2 	bl	48fe <bt_addr_le_create_static>
    4b5a:	1e04      	subs	r4, r0, #0
	if (err) {
    4b5c:	d120      	bne.n	4ba0 <hci_init+0x280>
	if (bt_storage) {
    4b5e:	6833      	ldr	r3, [r6, #0]
    4b60:	2b00      	cmp	r3, #0
    4b62:	d05a      	beq.n	4c1a <hci_init+0x2fa>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4b64:	685e      	ldr	r6, [r3, #4]
    4b66:	002a      	movs	r2, r5
    4b68:	2307      	movs	r3, #7
    4b6a:	0001      	movs	r1, r0
    4b6c:	47b0      	blx	r6
    4b6e:	e054      	b.n	4c1a <hci_init+0x2fa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4b70:	2102      	movs	r1, #2
    4b72:	4841      	ldr	r0, [pc, #260]	; (4c78 <hci_init+0x358>)
    4b74:	f7ff fdde 	bl	4734 <bt_hci_cmd_create>
    4b78:	1e06      	subs	r6, r0, #0
		if (!buf) {
    4b7a:	d102      	bne.n	4b82 <hci_init+0x262>
		return -ENOBUFS;
    4b7c:	2437      	movs	r4, #55	; 0x37
		return -ENODEV;
    4b7e:	4264      	negs	r4, r4
    4b80:	e00e      	b.n	4ba0 <hci_init+0x280>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4b82:	2102      	movs	r1, #2
    4b84:	3008      	adds	r0, #8
    4b86:	f007 f8f5 	bl	bd74 <net_buf_simple_add>
		cp_le->le = 0x01;
    4b8a:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    4b8c:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    4b8e:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4b90:	0022      	movs	r2, r4
    4b92:	0031      	movs	r1, r6
    4b94:	4838      	ldr	r0, [pc, #224]	; (4c78 <hci_init+0x358>)
    4b96:	f7ff fdfd 	bl	4794 <bt_hci_cmd_send_sync>
    4b9a:	1e04      	subs	r4, r0, #0
		if (err) {
    4b9c:	d100      	bne.n	4ba0 <hci_init+0x280>
    4b9e:	e74c      	b.n	4a3a <hci_init+0x11a>
	}

	show_dev_info();

	return 0;
}
    4ba0:	0020      	movs	r0, r4
    4ba2:	b007      	add	sp, #28
    4ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4ba6:	aa04      	add	r2, sp, #16
    4ba8:	2100      	movs	r1, #0
    4baa:	4834      	ldr	r0, [pc, #208]	; (4c7c <hci_init+0x35c>)
    4bac:	f7ff fdf2 	bl	4794 <bt_hci_cmd_send_sync>
    4bb0:	1e04      	subs	r4, r0, #0
		if (err) {
    4bb2:	d1f5      	bne.n	4ba0 <hci_init+0x280>
		le_read_supp_states_complete(rsp);
    4bb4:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4bb6:	6882      	ldr	r2, [r0, #8]
    4bb8:	1c53      	adds	r3, r2, #1
    4bba:	7859      	ldrb	r1, [r3, #1]
    4bbc:	7852      	ldrb	r2, [r2, #1]
    4bbe:	0209      	lsls	r1, r1, #8
    4bc0:	4311      	orrs	r1, r2
    4bc2:	789a      	ldrb	r2, [r3, #2]
    4bc4:	791c      	ldrb	r4, [r3, #4]
    4bc6:	0412      	lsls	r2, r2, #16
    4bc8:	4311      	orrs	r1, r2
    4bca:	78da      	ldrb	r2, [r3, #3]
    4bcc:	0612      	lsls	r2, r2, #24
    4bce:	430a      	orrs	r2, r1
    4bd0:	7959      	ldrb	r1, [r3, #5]
    4bd2:	0209      	lsls	r1, r1, #8
    4bd4:	430c      	orrs	r4, r1
    4bd6:	7999      	ldrb	r1, [r3, #6]
    4bd8:	79db      	ldrb	r3, [r3, #7]
    4bda:	0409      	lsls	r1, r1, #16
    4bdc:	4321      	orrs	r1, r4
    4bde:	061b      	lsls	r3, r3, #24
    4be0:	430b      	orrs	r3, r1
	bt_dev.le.states = sys_get_le64(rp->le_states);
    4be2:	0029      	movs	r1, r5
    4be4:	3180      	adds	r1, #128	; 0x80
    4be6:	c10c      	stmia	r1!, {r2, r3}
		net_buf_unref(rsp);
    4be8:	f007 f88e 	bl	bd08 <net_buf_unref>
    4bec:	e72b      	b.n	4a46 <hci_init+0x126>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    4bee:	2207      	movs	r2, #7
    4bf0:	4923      	ldr	r1, [pc, #140]	; (4c80 <hci_init+0x360>)
    4bf2:	a804      	add	r0, sp, #16
    4bf4:	f7fd f89a 	bl	1d2c <memcpy>
    4bf8:	2207      	movs	r2, #7
    4bfa:	a904      	add	r1, sp, #16
    4bfc:	0028      	movs	r0, r5
    4bfe:	f7fd f871 	bl	1ce4 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4c02:	2800      	cmp	r0, #0
    4c04:	d09b      	beq.n	4b3e <hci_init+0x21e>
    4c06:	e7cb      	b.n	4ba0 <hci_init+0x280>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    4c08:	2100      	movs	r1, #0
    4c0a:	681c      	ldr	r4, [r3, #0]
    4c0c:	002a      	movs	r2, r5
    4c0e:	2307      	movs	r3, #7
    4c10:	0008      	movs	r0, r1
    4c12:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    4c14:	2807      	cmp	r0, #7
    4c16:	d000      	beq.n	4c1a <hci_init+0x2fa>
    4c18:	e795      	b.n	4b46 <hci_init+0x226>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4c1a:	782b      	ldrb	r3, [r5, #0]
    4c1c:	2b01      	cmp	r3, #1
    4c1e:	d14b      	bne.n	4cb8 <hci_init+0x398>
    4c20:	223f      	movs	r2, #63	; 0x3f
    4c22:	79ab      	ldrb	r3, [r5, #6]
    4c24:	4393      	bics	r3, r2
    4c26:	2bc0      	cmp	r3, #192	; 0xc0
    4c28:	d146      	bne.n	4cb8 <hci_init+0x398>
	err = set_random_address(&bt_dev.id_addr.a);
    4c2a:	1c68      	adds	r0, r5, #1
    4c2c:	f7ff fdf4 	bl	4818 <set_random_address>
    4c30:	1e04      	subs	r4, r0, #0
	if (err) {
    4c32:	d1b5      	bne.n	4ba0 <hci_init+0x280>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4c34:	0028      	movs	r0, r5
    4c36:	2104      	movs	r1, #4
    4c38:	3070      	adds	r0, #112	; 0x70
    4c3a:	f008 f9d3 	bl	cfe4 <atomic_or>
    4c3e:	e7af      	b.n	4ba0 <hci_init+0x280>
    4c40:	00000c03 	.word	0x00000c03
    4c44:	20002290 	.word	0x20002290
    4c48:	200000ec 	.word	0x200000ec
    4c4c:	00001003 	.word	0x00001003
    4c50:	00001001 	.word	0x00001001
    4c54:	00001009 	.word	0x00001009
    4c58:	00001002 	.word	0x00001002
    4c5c:	00002003 	.word	0x00002003
    4c60:	00002001 	.word	0x00002001
    4c64:	00000c01 	.word	0x00000c01
    4c68:	0000fc01 	.word	0x0000fc01
    4c6c:	0000fc02 	.word	0x0000fc02
    4c70:	0000fc03 	.word	0x0000fc03
    4c74:	20000d14 	.word	0x20000d14
    4c78:	00000c6d 	.word	0x00000c6d
    4c7c:	0000201c 	.word	0x0000201c
    4c80:	0000d3bc 	.word	0x0000d3bc
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4c84:	aa01      	add	r2, sp, #4
    4c86:	2100      	movs	r1, #0
    4c88:	480d      	ldr	r0, [pc, #52]	; (4cc0 <hci_init+0x3a0>)
    4c8a:	f7ff fd83 	bl	4794 <bt_hci_cmd_send_sync>
		if (err) {
    4c8e:	2800      	cmp	r0, #0
    4c90:	d000      	beq.n	4c94 <hci_init+0x374>
    4c92:	e75f      	b.n	4b54 <hci_init+0x234>
		rp = (void *)rsp->data;
    4c94:	9801      	ldr	r0, [sp, #4]
    4c96:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4c98:	784b      	ldrb	r3, [r1, #1]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d009      	beq.n	4cb2 <hci_init+0x392>
			bt_addr_copy(&bt_dev.id_addr.a, &rp->a[0].bdaddr);
    4c9e:	3102      	adds	r1, #2
	memcpy(dst, src, sizeof(*dst));
    4ca0:	1c68      	adds	r0, r5, #1
    4ca2:	2206      	movs	r2, #6
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    4ca4:	702c      	strb	r4, [r5, #0]
    4ca6:	f7fd f841 	bl	1d2c <memcpy>
			net_buf_unref(rsp);
    4caa:	9801      	ldr	r0, [sp, #4]
    4cac:	f007 f82c 	bl	bd08 <net_buf_unref>
    4cb0:	e7b3      	b.n	4c1a <hci_init+0x2fa>
		net_buf_unref(rsp);
    4cb2:	f007 f829 	bl	bd08 <net_buf_unref>
    4cb6:	e74d      	b.n	4b54 <hci_init+0x234>
		return -EINVAL;
    4cb8:	2416      	movs	r4, #22
    4cba:	e760      	b.n	4b7e <hci_init+0x25e>
		return -ENODEV;
    4cbc:	2413      	movs	r4, #19
    4cbe:	e75e      	b.n	4b7e <hci_init+0x25e>
    4cc0:	0000fc09 	.word	0x0000fc09

00004cc4 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    4cc4:	b510      	push	{r4, lr}
	err = hci_init();
    4cc6:	f7ff fe2b 	bl	4920 <hci_init>
    4cca:	1e04      	subs	r4, r0, #0
	if (err) {
    4ccc:	d107      	bne.n	4cde <init_work+0x1a>
    4cce:	4807      	ldr	r0, [pc, #28]	; (4cec <init_work+0x28>)
    4cd0:	2102      	movs	r1, #2
    4cd2:	3070      	adds	r0, #112	; 0x70
    4cd4:	f008 f986 	bl	cfe4 <atomic_or>
	bt_le_scan_update(false);
    4cd8:	0020      	movs	r0, r4
    4cda:	f7ff fdff 	bl	48dc <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <init_work+0x2c>)
    4ce0:	681b      	ldr	r3, [r3, #0]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d001      	beq.n	4cea <init_work+0x26>
		ready_cb(err);
    4ce6:	0020      	movs	r0, r4
    4ce8:	4798      	blx	r3
	}
}
    4cea:	bd10      	pop	{r4, pc}
    4cec:	20002290 	.word	0x20002290
    4cf0:	200000e8 	.word	0x200000e8

00004cf4 <bt_recv>:
{
    4cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    4cf6:	7d05      	ldrb	r5, [r0, #20]
{
    4cf8:	b087      	sub	sp, #28
    4cfa:	0004      	movs	r4, r0
	switch (bt_buf_get_type(buf)) {
    4cfc:	2d01      	cmp	r5, #1
    4cfe:	d13f      	bne.n	4d80 <bt_recv+0x8c>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4d00:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    4d02:	783b      	ldrb	r3, [r7, #0]
    4d04:	3b0e      	subs	r3, #14
    4d06:	2b01      	cmp	r3, #1
    4d08:	d83f      	bhi.n	4d8a <bt_recv+0x96>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4d0a:	b662      	cpsie	i
    4d0c:	2004      	movs	r0, #4
    4d0e:	df02      	svc	2
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4d10:	2111      	movs	r1, #17
    4d12:	4f4a      	ldr	r7, [pc, #296]	; (4e3c <bt_recv+0x148>)
    4d14:	68a6      	ldr	r6, [r4, #8]
    4d16:	3770      	adds	r7, #112	; 0x70
    4d18:	4249      	negs	r1, r1
    4d1a:	0038      	movs	r0, r7
    4d1c:	f008 f96d 	bl	cffa <atomic_and>
	if (!evt->status) {
    4d20:	7833      	ldrb	r3, [r6, #0]
    4d22:	2b00      	cmp	r3, #0
    4d24:	d108      	bne.n	4d38 <bt_recv+0x44>
		memcpy(pub_key, evt->key, 64);
    4d26:	1c71      	adds	r1, r6, #1
    4d28:	2240      	movs	r2, #64	; 0x40
    4d2a:	4845      	ldr	r0, [pc, #276]	; (4e40 <bt_recv+0x14c>)
    4d2c:	f7fc fffe 	bl	1d2c <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4d30:	0029      	movs	r1, r5
    4d32:	0038      	movs	r0, r7
    4d34:	f008 f956 	bl	cfe4 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4d38:	4b42      	ldr	r3, [pc, #264]	; (4e44 <bt_recv+0x150>)
    4d3a:	681d      	ldr	r5, [r3, #0]
    4d3c:	2d00      	cmp	r5, #0
    4d3e:	d105      	bne.n	4d4c <bt_recv+0x58>
	net_buf_unref(buf);
    4d40:	0020      	movs	r0, r4
    4d42:	f006 ffe1 	bl	bd08 <net_buf_unref>
		return 0;
    4d46:	2000      	movs	r0, #0
}
    4d48:	b007      	add	sp, #28
    4d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : evt->key);
    4d4c:	2000      	movs	r0, #0
    4d4e:	7832      	ldrb	r2, [r6, #0]
    4d50:	682b      	ldr	r3, [r5, #0]
    4d52:	4282      	cmp	r2, r0
    4d54:	d100      	bne.n	4d58 <bt_recv+0x64>
    4d56:	1c70      	adds	r0, r6, #1
    4d58:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4d5a:	686d      	ldr	r5, [r5, #4]
    4d5c:	e7ee      	b.n	4d3c <bt_recv+0x48>
	if (dh_key_cb) {
    4d5e:	4d3a      	ldr	r5, [pc, #232]	; (4e48 <bt_recv+0x154>)
    4d60:	68a2      	ldr	r2, [r4, #8]
    4d62:	682b      	ldr	r3, [r5, #0]
    4d64:	2b00      	cmp	r3, #0
    4d66:	d0eb      	beq.n	4d40 <bt_recv+0x4c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4d68:	2000      	movs	r0, #0
    4d6a:	7811      	ldrb	r1, [r2, #0]
    4d6c:	4281      	cmp	r1, r0
    4d6e:	d100      	bne.n	4d72 <bt_recv+0x7e>
    4d70:	1c50      	adds	r0, r2, #1
    4d72:	4798      	blx	r3
		dh_key_cb = NULL;
    4d74:	2300      	movs	r3, #0
    4d76:	602b      	str	r3, [r5, #0]
    4d78:	e7e2      	b.n	4d40 <bt_recv+0x4c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4d7a:	f7fc ffd7 	bl	1d2c <memcpy>
    4d7e:	e037      	b.n	4df0 <bt_recv+0xfc>
		net_buf_unref(buf);
    4d80:	f006 ffc2 	bl	bd08 <net_buf_unref>
		return -EINVAL;
    4d84:	2016      	movs	r0, #22
    4d86:	4240      	negs	r0, r0
    4d88:	e7de      	b.n	4d48 <bt_recv+0x54>
	net_buf_pull(buf, sizeof(*hdr));
    4d8a:	0006      	movs	r6, r0
    4d8c:	3608      	adds	r6, #8
    4d8e:	2102      	movs	r1, #2
    4d90:	0030      	movs	r0, r6
    4d92:	f007 f800 	bl	bd96 <net_buf_simple_pull>
	switch (hdr->evt) {
    4d96:	783b      	ldrb	r3, [r7, #0]
    4d98:	2b3e      	cmp	r3, #62	; 0x3e
    4d9a:	d1d1      	bne.n	4d40 <bt_recv+0x4c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    4d9c:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4d9e:	0029      	movs	r1, r5
    4da0:	0030      	movs	r0, r6
    4da2:	f006 fff8 	bl	bd96 <net_buf_simple_pull>
	switch (evt->subevent) {
    4da6:	783d      	ldrb	r5, [r7, #0]
    4da8:	2d08      	cmp	r5, #8
    4daa:	d0b1      	beq.n	4d10 <bt_recv+0x1c>
    4dac:	2d09      	cmp	r5, #9
    4dae:	d0d6      	beq.n	4d5e <bt_recv+0x6a>
    4db0:	2d02      	cmp	r5, #2
    4db2:	d1c5      	bne.n	4d40 <bt_recv+0x4c>
	u8_t num_reports = net_buf_pull_u8(buf);
    4db4:	0030      	movs	r0, r6
    4db6:	f006 fff6 	bl	bda6 <net_buf_simple_pull_u8>
    4dba:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    4dbc:	9b00      	ldr	r3, [sp, #0]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d0be      	beq.n	4d40 <bt_recv+0x4c>
		info = (void *)buf->data;
    4dc2:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    4dc4:	2109      	movs	r1, #9
    4dc6:	0030      	movs	r0, r6
    4dc8:	f006 ffe5 	bl	bd96 <net_buf_simple_pull>
		rssi = info->data[info->length];
    4dcc:	7a2b      	ldrb	r3, [r5, #8]
    4dce:	1c69      	adds	r1, r5, #1
    4dd0:	18eb      	adds	r3, r5, r3
    4dd2:	7a5b      	ldrb	r3, [r3, #9]
    4dd4:	2207      	movs	r2, #7
    4dd6:	9301      	str	r3, [sp, #4]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4dd8:	786b      	ldrb	r3, [r5, #1]
    4dda:	a804      	add	r0, sp, #16
    4ddc:	3b02      	subs	r3, #2
    4dde:	2b01      	cmp	r3, #1
    4de0:	d8cb      	bhi.n	4d7a <bt_recv+0x86>
    4de2:	f7fc ffa3 	bl	1d2c <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4de6:	ab04      	add	r3, sp, #16
    4de8:	781b      	ldrb	r3, [r3, #0]
    4dea:	aa04      	add	r2, sp, #16
    4dec:	3b02      	subs	r3, #2
    4dee:	7013      	strb	r3, [r2, #0]
		if (scan_dev_found_cb) {
    4df0:	4f16      	ldr	r7, [pc, #88]	; (4e4c <bt_recv+0x158>)
    4df2:	683b      	ldr	r3, [r7, #0]
    4df4:	2b00      	cmp	r3, #0
    4df6:	d017      	beq.n	4e28 <bt_recv+0x134>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    4df8:	0030      	movs	r0, r6
    4dfa:	f006 ffdc 	bl	bdb6 <net_buf_simple_headroom>
	state->len = buf->len;
    4dfe:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    4e00:	9002      	str	r0, [sp, #8]
	state->len = buf->len;
    4e02:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    4e04:	7a2b      	ldrb	r3, [r5, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4e06:	2104      	movs	r1, #4
			buf->len = info->length;
    4e08:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4e0a:	466b      	mov	r3, sp
    4e0c:	782a      	ldrb	r2, [r5, #0]
    4e0e:	5659      	ldrsb	r1, [r3, r1]
    4e10:	683f      	ldr	r7, [r7, #0]
    4e12:	0033      	movs	r3, r6
    4e14:	a804      	add	r0, sp, #16
    4e16:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    4e18:	466b      	mov	r3, sp
    4e1a:	6922      	ldr	r2, [r4, #16]
    4e1c:	891b      	ldrh	r3, [r3, #8]
    4e1e:	18d3      	adds	r3, r2, r3
    4e20:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    4e22:	466b      	mov	r3, sp
    4e24:	899b      	ldrh	r3, [r3, #12]
    4e26:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    4e28:	7a29      	ldrb	r1, [r5, #8]
    4e2a:	0030      	movs	r0, r6
    4e2c:	3101      	adds	r1, #1
    4e2e:	f006 ffb2 	bl	bd96 <net_buf_simple_pull>
    4e32:	9b00      	ldr	r3, [sp, #0]
    4e34:	3b01      	subs	r3, #1
    4e36:	b2db      	uxtb	r3, r3
    4e38:	9300      	str	r3, [sp, #0]
    4e3a:	e7bf      	b.n	4dbc <bt_recv+0xc8>
    4e3c:	20002290 	.word	0x20002290
    4e40:	200000a4 	.word	0x200000a4
    4e44:	200000e4 	.word	0x200000e4
    4e48:	200000a0 	.word	0x200000a0
    4e4c:	200000ec 	.word	0x200000ec

00004e50 <bt_recv_prio>:
{
    4e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4e52:	7d03      	ldrb	r3, [r0, #20]
{
    4e54:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4e56:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4e58:	2b01      	cmp	r3, #1
    4e5a:	d002      	beq.n	4e62 <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4e5c:	b662      	cpsie	i
    4e5e:	2004      	movs	r0, #4
    4e60:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4e62:	8983      	ldrh	r3, [r0, #12]
    4e64:	2b01      	cmp	r3, #1
    4e66:	d9f9      	bls.n	4e5c <bt_recv_prio+0xc>
    4e68:	7833      	ldrb	r3, [r6, #0]
    4e6a:	3b0e      	subs	r3, #14
    4e6c:	2b01      	cmp	r3, #1
    4e6e:	d8f5      	bhi.n	4e5c <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    4e70:	0005      	movs	r5, r0
    4e72:	3508      	adds	r5, #8
    4e74:	2102      	movs	r1, #2
    4e76:	0028      	movs	r0, r5
    4e78:	f006 ff8d 	bl	bd96 <net_buf_simple_pull>
	switch (hdr->evt) {
    4e7c:	7833      	ldrb	r3, [r6, #0]
    4e7e:	2b0e      	cmp	r3, #14
    4e80:	d005      	beq.n	4e8e <bt_recv_prio+0x3e>
    4e82:	2b0f      	cmp	r3, #15
    4e84:	d019      	beq.n	4eba <bt_recv_prio+0x6a>
		net_buf_unref(buf);
    4e86:	0020      	movs	r0, r4
    4e88:	f006 ff3e 	bl	bd08 <net_buf_unref>
    4e8c:	e7e6      	b.n	4e5c <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    4e8e:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4e90:	2103      	movs	r1, #3
    4e92:	0028      	movs	r0, r5
	u8_t status, ncmd = evt->ncmd;
    4e94:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4e96:	f006 ff7e 	bl	bd96 <net_buf_simple_pull>
	hci_cmd_done(opcode, status, buf);
    4e9a:	68a3      	ldr	r3, [r4, #8]
    4e9c:	0021      	movs	r1, r4
    4e9e:	7818      	ldrb	r0, [r3, #0]
    4ea0:	f7ff fc0e 	bl	46c0 <hci_cmd_done.isra.9>
	if (ncmd) {
    4ea4:	2e00      	cmp	r6, #0
    4ea6:	d003      	beq.n	4eb0 <bt_recv_prio+0x60>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4ea8:	480a      	ldr	r0, [pc, #40]	; (4ed4 <bt_recv_prio+0x84>)
    4eaa:	3088      	adds	r0, #136	; 0x88
    4eac:	f007 fca0 	bl	c7f0 <_impl_k_sem_give>
	net_buf_unref(buf);
    4eb0:	0020      	movs	r0, r4
    4eb2:	f006 ff29 	bl	bd08 <net_buf_unref>
}
    4eb6:	2000      	movs	r0, #0
    4eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4eba:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4ebc:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    4ebe:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    4ec0:	0028      	movs	r0, r5
    4ec2:	f006 ff68 	bl	bd96 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4ec6:	7830      	ldrb	r0, [r6, #0]
    4ec8:	0021      	movs	r1, r4
    4eca:	f7ff fbf9 	bl	46c0 <hci_cmd_done.isra.9>
	if (ncmd) {
    4ece:	2f00      	cmp	r7, #0
    4ed0:	d0ee      	beq.n	4eb0 <bt_recv_prio+0x60>
    4ed2:	e7e9      	b.n	4ea8 <bt_recv_prio+0x58>
    4ed4:	20002290 	.word	0x20002290

00004ed8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    4ed8:	4a09      	ldr	r2, [pc, #36]	; (4f00 <bt_hci_driver_register+0x28>)
    4eda:	32c4      	adds	r2, #196	; 0xc4
    4edc:	6813      	ldr	r3, [r2, #0]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d108      	bne.n	4ef4 <bt_hci_driver_register+0x1c>
	if (!drv->open || !drv->send) {
    4ee2:	6881      	ldr	r1, [r0, #8]
    4ee4:	2900      	cmp	r1, #0
    4ee6:	d008      	beq.n	4efa <bt_hci_driver_register+0x22>
    4ee8:	68c1      	ldr	r1, [r0, #12]
    4eea:	2900      	cmp	r1, #0
    4eec:	d005      	beq.n	4efa <bt_hci_driver_register+0x22>
	bt_dev.drv = drv;
    4eee:	6010      	str	r0, [r2, #0]
	return 0;
    4ef0:	0018      	movs	r0, r3
}
    4ef2:	4770      	bx	lr
		return -EALREADY;
    4ef4:	2045      	movs	r0, #69	; 0x45
		return -EINVAL;
    4ef6:	4240      	negs	r0, r0
    4ef8:	e7fb      	b.n	4ef2 <bt_hci_driver_register+0x1a>
    4efa:	2016      	movs	r0, #22
    4efc:	e7fb      	b.n	4ef6 <bt_hci_driver_register+0x1e>
    4efe:	46c0      	nop			; (mov r8, r8)
    4f00:	20002290 	.word	0x20002290

00004f04 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4f04:	b570      	push	{r4, r5, r6, lr}
    4f06:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    4f08:	4805      	ldr	r0, [pc, #20]	; (4f20 <bt_buf_get_rx+0x1c>)
    4f0a:	f006 fee3 	bl	bcd4 <net_buf_alloc_fixed>
    4f0e:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    4f10:	d004      	beq.n	4f1c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4f12:	2100      	movs	r1, #0
    4f14:	3008      	adds	r0, #8
    4f16:	f006 fee5 	bl	bce4 <net_buf_simple_reserve>
    4f1a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4f1c:	0020      	movs	r0, r4
    4f1e:	bd70      	pop	{r4, r5, r6, pc}
    4f20:	200025d4 	.word	0x200025d4

00004f24 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4f24:	b510      	push	{r4, lr}
    4f26:	0001      	movs	r1, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    4f28:	f3ef 8210 	mrs	r2, PRIMASK
    4f2c:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    4f2e:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    4f30:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <bt_buf_get_cmd_complete+0x3c>)
    4f32:	33a0      	adds	r3, #160	; 0xa0
    4f34:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    4f36:	6018      	str	r0, [r3, #0]
	if (key) {
    4f38:	4282      	cmp	r2, r0
    4f3a:	d100      	bne.n	4f3e <bt_buf_get_cmd_complete+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    4f3c:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    4f3e:	2c00      	cmp	r4, #0
    4f40:	d009      	beq.n	4f56 <bt_buf_get_cmd_complete+0x32>
    4f42:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    4f44:	2100      	movs	r1, #0
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4f46:	0020      	movs	r0, r4
    4f48:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    4f4a:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4f4c:	3008      	adds	r0, #8
    4f4e:	f006 fec9 	bl	bce4 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4f52:	0020      	movs	r0, r4
    4f54:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4f56:	2001      	movs	r0, #1
    4f58:	f7ff ffd4 	bl	4f04 <bt_buf_get_rx>
    4f5c:	0004      	movs	r4, r0
    4f5e:	e7f8      	b.n	4f52 <bt_buf_get_cmd_complete+0x2e>
    4f60:	20002290 	.word	0x20002290

00004f64 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    4f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4f66:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    4f68:	2203      	movs	r2, #3
{
    4f6a:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    4f6c:	6018      	str	r0, [r3, #0]
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    4f6e:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    4f70:	1e60      	subs	r0, r4, #1
    4f72:	b280      	uxth	r0, r0
    4f74:	4348      	muls	r0, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    4f76:	4393      	bics	r3, r2
    4f78:	801c      	strh	r4, [r3, #0]
{
    4f7a:	000e      	movs	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    4f7c:	1828      	adds	r0, r5, r0
    4f7e:	3201      	adds	r2, #1
    4f80:	2100      	movs	r1, #0
    4f82:	f7fc fefd 	bl	1d80 <memset>
    4f86:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    4f88:	4b08      	ldr	r3, [pc, #32]	; (4fac <mem_init+0x48>)
    4f8a:	b2a4      	uxth	r4, r4
    4f8c:	429c      	cmp	r4, r3
    4f8e:	d100      	bne.n	4f92 <mem_init+0x2e>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    4f90:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			       (mem_size * (mem_count + 1)));
    4f92:	1c60      	adds	r0, r4, #1
    4f94:	4370      	muls	r0, r6
		next = (u32_t)((u8_t *) mem_pool +
    4f96:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    4f98:	1b80      	subs	r0, r0, r6
    4f9a:	1828      	adds	r0, r5, r0
    4f9c:	2204      	movs	r2, #4
    4f9e:	a901      	add	r1, sp, #4
		next = (u32_t)((u8_t *) mem_pool +
    4fa0:	9301      	str	r3, [sp, #4]
    4fa2:	3c01      	subs	r4, #1
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    4fa4:	f7fc fec2 	bl	1d2c <memcpy>
    4fa8:	e7ee      	b.n	4f88 <mem_init+0x24>
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	0000ffff 	.word	0x0000ffff

00004fb0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    4fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    4fb2:	6805      	ldr	r5, [r0, #0]
{
    4fb4:	0006      	movs	r6, r0
	if (*mem_head) {
    4fb6:	2d00      	cmp	r5, #0
    4fb8:	d011      	beq.n	4fde <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    4fba:	2703      	movs	r7, #3
    4fbc:	1deb      	adds	r3, r5, #7
    4fbe:	43bb      	bics	r3, r7
    4fc0:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    4fc2:	2204      	movs	r2, #4
    4fc4:	0029      	movs	r1, r5
    4fc6:	a801      	add	r0, sp, #4
    4fc8:	f7fc feb0 	bl	1d2c <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    4fcc:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    4fce:	3c01      	subs	r4, #1
    4fd0:	b2a4      	uxth	r4, r4
		if (head) {
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d002      	beq.n	4fdc <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    4fd6:	1dda      	adds	r2, r3, #7
    4fd8:	43ba      	bics	r2, r7
    4fda:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    4fdc:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    4fde:	0028      	movs	r0, r5
    4fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004fe2 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    4fe2:	680b      	ldr	r3, [r1, #0]
{
    4fe4:	b570      	push	{r4, r5, r6, lr}
    4fe6:	0005      	movs	r5, r0
    4fe8:	000c      	movs	r4, r1
	u16_t free_count = 0;
    4fea:	1e1e      	subs	r6, r3, #0
	if (*mem_head) {
    4fec:	d003      	beq.n	4ff6 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    4fee:	2203      	movs	r2, #3
    4ff0:	3307      	adds	r3, #7
    4ff2:	4393      	bics	r3, r2
    4ff4:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    4ff6:	0028      	movs	r0, r5
    4ff8:	2204      	movs	r2, #4
    4ffa:	0021      	movs	r1, r4
    4ffc:	f7fc fe96 	bl	1d2c <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5000:	2203      	movs	r2, #3
    5002:	1deb      	adds	r3, r5, #7
	free_count++;
    5004:	3601      	adds	r6, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5006:	4393      	bics	r3, r2
    5008:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    500a:	6025      	str	r5, [r4, #0]
}
    500c:	bd70      	pop	{r4, r5, r6, pc}

0000500e <mem_get>:
	return free_count;
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    500e:	434a      	muls	r2, r1
    5010:	1880      	adds	r0, r0, r2
}
    5012:	4770      	bx	lr

00005014 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    5014:	1a40      	subs	r0, r0, r1
{
    5016:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    5018:	b280      	uxth	r0, r0
    501a:	0011      	movs	r1, r2
    501c:	f7fb f8d4 	bl	1c8 <__aeabi_uidiv>
    5020:	b280      	uxth	r0, r0
}
    5022:	bd10      	pop	{r4, pc}

00005024 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    5024:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    5026:	4b06      	ldr	r3, [pc, #24]	; (5040 <mem_rcopy+0x1c>)
	src += len;
    5028:	1889      	adds	r1, r1, r2
	while (len--) {
    502a:	3a01      	subs	r2, #1
    502c:	b292      	uxth	r2, r2
    502e:	429a      	cmp	r2, r3
    5030:	d100      	bne.n	5034 <mem_rcopy+0x10>
		*dst++ = *--src;
	}
}
    5032:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    5034:	3901      	subs	r1, #1
    5036:	780c      	ldrb	r4, [r1, #0]
    5038:	7004      	strb	r4, [r0, #0]
    503a:	3001      	adds	r0, #1
    503c:	e7f5      	b.n	502a <mem_rcopy+0x6>
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	0000ffff 	.word	0x0000ffff

00005044 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    5044:	6010      	str	r0, [r2, #0]
    5046:	6008      	str	r0, [r1, #0]

	return link;
}
    5048:	4770      	bx	lr

0000504a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    504a:	6813      	ldr	r3, [r2, #0]
    504c:	6018      	str	r0, [r3, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    504e:	6813      	ldr	r3, [r2, #0]
    5050:	6059      	str	r1, [r3, #4]

	/* increment the tail! */
	*tail = link;
    5052:	6010      	str	r0, [r2, #0]

	return link;
}
    5054:	4770      	bx	lr

00005056 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    5056:	4288      	cmp	r0, r1
    5058:	d004      	beq.n	5064 <memq_peek+0xe>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    505a:	2a00      	cmp	r2, #0
    505c:	d001      	beq.n	5062 <memq_peek+0xc>
		*mem = head->mem;
    505e:	6843      	ldr	r3, [r0, #4]
    5060:	6013      	str	r3, [r2, #0]
	}

	return head;
}
    5062:	4770      	bx	lr
		return NULL;
    5064:	2000      	movs	r0, #0
    5066:	e7fc      	b.n	5062 <memq_peek+0xc>

00005068 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    5068:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    506a:	4283      	cmp	r3, r0
    506c:	d00a      	beq.n	5084 <memq_dequeue+0x1c>
	if (mem) {
    506e:	2a00      	cmp	r2, #0
    5070:	d004      	beq.n	507c <memq_dequeue+0x14>
		*mem = head->mem;
    5072:	6858      	ldr	r0, [r3, #4]
    5074:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    5076:	681a      	ldr	r2, [r3, #0]
    5078:	600a      	str	r2, [r1, #0]

	return link;
    507a:	e001      	b.n	5080 <memq_dequeue+0x18>
	if (!link) {
    507c:	2b00      	cmp	r3, #0
    507e:	d1fa      	bne.n	5076 <memq_dequeue+0xe>
}
    5080:	0018      	movs	r0, r3
    5082:	4770      	bx	lr
		return NULL;
    5084:	2300      	movs	r3, #0
    5086:	e7fb      	b.n	5080 <memq_dequeue+0x18>

00005088 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    5088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    508a:	2404      	movs	r4, #4
    508c:	2630      	movs	r6, #48	; 0x30
	while (callee_id--) {
    508e:	3c01      	subs	r4, #1
    5090:	b2e4      	uxtb	r4, r4
    5092:	2cff      	cmp	r4, #255	; 0xff
    5094:	d018      	beq.n	50c8 <mayfly_init+0x40>
    5096:	0033      	movs	r3, r6
    5098:	4363      	muls	r3, r4
    509a:	00a7      	lsls	r7, r4, #2
    509c:	9301      	str	r3, [sp, #4]
    509e:	2504      	movs	r5, #4
    50a0:	e00d      	b.n	50be <mayfly_init+0x36>
    50a2:	210c      	movs	r1, #12
    50a4:	4369      	muls	r1, r5
    50a6:	9b01      	ldr	r3, [sp, #4]
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    50a8:	4808      	ldr	r0, [pc, #32]	; (50cc <mayfly_init+0x44>)
    50aa:	18c9      	adds	r1, r1, r3
    50ac:	4b08      	ldr	r3, [pc, #32]	; (50d0 <mayfly_init+0x48>)
    50ae:	1d0a      	adds	r2, r1, #4
    50b0:	189a      	adds	r2, r3, r2
    50b2:	1859      	adds	r1, r3, r1
    50b4:	197b      	adds	r3, r7, r5
    50b6:	00db      	lsls	r3, r3, #3
    50b8:	18c0      	adds	r0, r0, r3
    50ba:	f7ff ffc3 	bl	5044 <memq_init>
		while (caller_id--) {
    50be:	3d01      	subs	r5, #1
    50c0:	b2ed      	uxtb	r5, r5
    50c2:	2dff      	cmp	r5, #255	; 0xff
    50c4:	d1ed      	bne.n	50a2 <mayfly_init+0x1a>
    50c6:	e7e2      	b.n	508e <mayfly_init+0x6>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    50c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    50ca:	46c0      	nop			; (mov r8, r8)
    50cc:	200000f0 	.word	0x200000f0
    50d0:	20000170 	.word	0x20000170

000050d4 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    50d4:	b570      	push	{r4, r5, r6, lr}
    50d6:	4d10      	ldr	r5, [pc, #64]	; (5118 <mayfly_enable+0x44>)
    50d8:	240c      	movs	r4, #12
    50da:	2630      	movs	r6, #48	; 0x30
	if (enable) {
    50dc:	2a00      	cmp	r2, #0
    50de:	d00d      	beq.n	50fc <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    50e0:	0023      	movs	r3, r4
    50e2:	434e      	muls	r6, r1
    50e4:	4343      	muls	r3, r0
    50e6:	199b      	adds	r3, r3, r6
    50e8:	18eb      	adds	r3, r5, r3
    50ea:	7a1d      	ldrb	r5, [r3, #8]
    50ec:	7a5c      	ldrb	r4, [r3, #9]
    50ee:	42ac      	cmp	r4, r5
    50f0:	d101      	bne.n	50f6 <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    50f2:	3401      	adds	r4, #1
    50f4:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    50f6:	f006 fccf 	bl	ba98 <mayfly_enable_cb>
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    50fa:	bd70      	pop	{r4, r5, r6, pc}
		if (mft[callee_id][caller_id].disable_req ==
    50fc:	4344      	muls	r4, r0
    50fe:	434e      	muls	r6, r1
    5100:	19a4      	adds	r4, r4, r6
    5102:	192c      	adds	r4, r5, r4
    5104:	7aa2      	ldrb	r2, [r4, #10]
    5106:	7ae3      	ldrb	r3, [r4, #11]
    5108:	4293      	cmp	r3, r2
    510a:	d1f6      	bne.n	50fa <mayfly_enable+0x26>
			mft[callee_id][caller_id].disable_req++;
    510c:	3301      	adds	r3, #1
    510e:	72a3      	strb	r3, [r4, #10]
			mayfly_pend(caller_id, callee_id);
    5110:	f006 fcee 	bl	baf0 <mayfly_pend>
}
    5114:	e7f1      	b.n	50fa <mayfly_enable+0x26>
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	20000170 	.word	0x20000170

0000511c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    511e:	0006      	movs	r6, r0
    5120:	000f      	movs	r7, r1
    5122:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    5124:	2a00      	cmp	r2, #0
    5126:	d014      	beq.n	5152 <mayfly_enqueue+0x36>
    5128:	2101      	movs	r1, #1

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    512a:	2203      	movs	r2, #3
	ack = m->_ack;
    512c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    512e:	7825      	ldrb	r5, [r4, #0]
    5130:	1aed      	subs	r5, r5, r3
    5132:	4015      	ands	r5, r2
	if (state != 0) {
    5134:	d02b      	beq.n	518e <mayfly_enqueue+0x72>
		if (chain) {
    5136:	2900      	cmp	r1, #0
    5138:	d022      	beq.n	5180 <mayfly_enqueue+0x64>

				return 0;
			}

			/* already ready */
			return 1;
    513a:	2001      	movs	r0, #1
			if (state != 1) {
    513c:	4285      	cmp	r5, r0
    513e:	d007      	beq.n	5150 <mayfly_enqueue+0x34>
				m->_req = ack + 1;
    5140:	181b      	adds	r3, r3, r0
    5142:	b2db      	uxtb	r3, r3
    5144:	7023      	strb	r3, [r4, #0]
				mayfly_pend(caller_id, callee_id);
    5146:	0039      	movs	r1, r7
    5148:	0030      	movs	r0, r6
    514a:	f006 fcd1 	bl	baf0 <mayfly_pend>
	/* handle mayfly(s) that can be inline */
	if (!chain) {
		/* call fp */
		m->fp(m->param);

		return 0;
    514e:	2000      	movs	r0, #0

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
    5150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5152:	f006 fcbe 	bl	bad2 <mayfly_prio_is_equal>
    5156:	2800      	cmp	r0, #0
    5158:	d0e6      	beq.n	5128 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    515a:	0039      	movs	r1, r7
    515c:	0030      	movs	r0, r6
    515e:	f006 fcaa 	bl	bab6 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5162:	2800      	cmp	r0, #0
    5164:	d0e0      	beq.n	5128 <mayfly_enqueue+0xc>
		(mft[callee_id][caller_id].disable_req !=
    5166:	230c      	movs	r3, #12
    5168:	2230      	movs	r2, #48	; 0x30
    516a:	4373      	muls	r3, r6
    516c:	437a      	muls	r2, r7
    516e:	189b      	adds	r3, r3, r2
    5170:	4a12      	ldr	r2, [pc, #72]	; (51bc <mayfly_enqueue+0xa0>)
    5172:	18d3      	adds	r3, r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    5174:	7a9a      	ldrb	r2, [r3, #10]
    5176:	7ad9      	ldrb	r1, [r3, #11]
    5178:	1a51      	subs	r1, r2, r1
    517a:	1e4a      	subs	r2, r1, #1
    517c:	4191      	sbcs	r1, r2
    517e:	e7d4      	b.n	512a <mayfly_enqueue+0xe>
		m->_req = ack + 2;
    5180:	3302      	adds	r3, #2
    5182:	b2db      	uxtb	r3, r3
    5184:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    5186:	68e3      	ldr	r3, [r4, #12]
    5188:	68a0      	ldr	r0, [r4, #8]
    518a:	4798      	blx	r3
    518c:	e7df      	b.n	514e <mayfly_enqueue+0x32>
	if (!chain) {
    518e:	2900      	cmp	r1, #0
    5190:	d0f9      	beq.n	5186 <mayfly_enqueue+0x6a>
	m->_req = ack + 1;
    5192:	3301      	adds	r3, #1
    5194:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    5196:	2230      	movs	r2, #48	; 0x30
	m->_req = ack + 1;
    5198:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    519a:	230c      	movs	r3, #12
    519c:	437a      	muls	r2, r7
    519e:	4373      	muls	r3, r6
    51a0:	3204      	adds	r2, #4
    51a2:	18d2      	adds	r2, r2, r3
    51a4:	4b05      	ldr	r3, [pc, #20]	; (51bc <mayfly_enqueue+0xa0>)
    51a6:	0021      	movs	r1, r4
    51a8:	189a      	adds	r2, r3, r2
    51aa:	6860      	ldr	r0, [r4, #4]
    51ac:	f7ff ff4d 	bl	504a <memq_enqueue>
	mayfly_pend(caller_id, callee_id);
    51b0:	0030      	movs	r0, r6
    51b2:	0039      	movs	r1, r7
    51b4:	f006 fc9c 	bl	baf0 <mayfly_pend>
	return 0;
    51b8:	0028      	movs	r0, r5
    51ba:	e7c9      	b.n	5150 <mayfly_enqueue+0x34>
    51bc:	20000170 	.word	0x20000170

000051c0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    51c0:	2330      	movs	r3, #48	; 0x30
    51c2:	001a      	movs	r2, r3
    51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51c6:	4342      	muls	r2, r0
    51c8:	b089      	sub	sp, #36	; 0x24
    51ca:	9205      	str	r2, [sp, #20]
	u8_t disable = 0;
	u8_t enable = 0;
    51cc:	2200      	movs	r2, #0
{
    51ce:	0004      	movs	r4, r0
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    51d0:	2604      	movs	r6, #4
	u8_t enable = 0;
    51d2:	9202      	str	r2, [sp, #8]
	u8_t disable = 0;
    51d4:	9203      	str	r2, [sp, #12]
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    51d6:	9300      	str	r3, [sp, #0]
	while (caller_id--) {
    51d8:	3e01      	subs	r6, #1
    51da:	b2f6      	uxtb	r6, r6
    51dc:	2eff      	cmp	r6, #255	; 0xff
    51de:	d10b      	bne.n	51f8 <mayfly_run+0x38>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    51e0:	9b03      	ldr	r3, [sp, #12]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d077      	beq.n	52d6 <mayfly_run+0x116>
    51e6:	9b02      	ldr	r3, [sp, #8]
    51e8:	2b00      	cmp	r3, #0
    51ea:	d174      	bne.n	52d6 <mayfly_run+0x116>
		mayfly_enable_cb(callee_id, callee_id, 0);
    51ec:	001a      	movs	r2, r3
    51ee:	0021      	movs	r1, r4
    51f0:	0020      	movs	r0, r4
    51f2:	f006 fc51 	bl	ba98 <mayfly_enable_cb>
    51f6:	e06e      	b.n	52d6 <mayfly_run+0x116>
		struct mayfly *m = 0;
    51f8:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    51fa:	250c      	movs	r5, #12
		struct mayfly *m = 0;
    51fc:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    51fe:	9b00      	ldr	r3, [sp, #0]
    5200:	4375      	muls	r5, r6
    5202:	4363      	muls	r3, r4
    5204:	4f35      	ldr	r7, [pc, #212]	; (52dc <mayfly_run+0x11c>)
    5206:	18eb      	adds	r3, r5, r3
    5208:	18f9      	adds	r1, r7, r3
    520a:	59d8      	ldr	r0, [r3, r7]
    520c:	aa07      	add	r2, sp, #28
    520e:	6849      	ldr	r1, [r1, #4]
    5210:	f7ff ff21 	bl	5056 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    5214:	9b05      	ldr	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    5216:	9001      	str	r0, [sp, #4]
				memq_dequeue(mft[callee_id][caller_id].tail,
    5218:	18ed      	adds	r5, r5, r3
    521a:	197b      	adds	r3, r7, r5
    521c:	9304      	str	r3, [sp, #16]
		while (link) {
    521e:	9b01      	ldr	r3, [sp, #4]
    5220:	2b00      	cmp	r3, #0
    5222:	d11b      	bne.n	525c <mayfly_run+0x9c>
		if (mft[callee_id][caller_id].disable_req !=
    5224:	230c      	movs	r3, #12
    5226:	9900      	ldr	r1, [sp, #0]
    5228:	4373      	muls	r3, r6
    522a:	4361      	muls	r1, r4
    522c:	4a2b      	ldr	r2, [pc, #172]	; (52dc <mayfly_run+0x11c>)
    522e:	185b      	adds	r3, r3, r1
    5230:	18d3      	adds	r3, r2, r3
    5232:	7a99      	ldrb	r1, [r3, #10]
    5234:	7ad8      	ldrb	r0, [r3, #11]
    5236:	4288      	cmp	r0, r1
    5238:	d002      	beq.n	5240 <mayfly_run+0x80>
			mft[callee_id][caller_id].disable_ack =
    523a:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    523c:	2301      	movs	r3, #1
    523e:	9303      	str	r3, [sp, #12]
		if (mft[callee_id][caller_id].enable_req !=
    5240:	230c      	movs	r3, #12
    5242:	9900      	ldr	r1, [sp, #0]
    5244:	4373      	muls	r3, r6
    5246:	4361      	muls	r1, r4
    5248:	185b      	adds	r3, r3, r1
    524a:	18d3      	adds	r3, r2, r3
    524c:	7a1a      	ldrb	r2, [r3, #8]
    524e:	7a59      	ldrb	r1, [r3, #9]
    5250:	4291      	cmp	r1, r2
    5252:	d0c1      	beq.n	51d8 <mayfly_run+0x18>
			mft[callee_id][caller_id].enable_ack =
    5254:	725a      	strb	r2, [r3, #9]
			enable = 1;
    5256:	2301      	movs	r3, #1
    5258:	9302      	str	r3, [sp, #8]
    525a:	e7bd      	b.n	51d8 <mayfly_run+0x18>
			state = (req - m->_ack) & 0x03;
    525c:	2103      	movs	r1, #3
			req = m->_req;
    525e:	9b07      	ldr	r3, [sp, #28]
    5260:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    5262:	785a      	ldrb	r2, [r3, #1]
    5264:	1abf      	subs	r7, r7, r2
    5266:	400f      	ands	r7, r1
			if (state == 1) {
    5268:	2f01      	cmp	r7, #1
    526a:	d104      	bne.n	5276 <mayfly_run+0xb6>
				m->_ack--;
    526c:	3a01      	subs	r2, #1
    526e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    5270:	6898      	ldr	r0, [r3, #8]
    5272:	68da      	ldr	r2, [r3, #12]
    5274:	4790      	blx	r2
			if (((req - m->_ack) & 0x03) != 1) {
    5276:	2203      	movs	r2, #3
			req = m->_req;
    5278:	9b07      	ldr	r3, [sp, #28]
    527a:	781d      	ldrb	r5, [r3, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    527c:	785b      	ldrb	r3, [r3, #1]
			req = m->_req;
    527e:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    5280:	1aeb      	subs	r3, r5, r3
    5282:	4013      	ands	r3, r2
    5284:	2b01      	cmp	r3, #1
    5286:	d00f      	beq.n	52a8 <mayfly_run+0xe8>
				memq_dequeue(mft[callee_id][caller_id].tail,
    5288:	230c      	movs	r3, #12
    528a:	9a00      	ldr	r2, [sp, #0]
    528c:	4373      	muls	r3, r6
    528e:	4362      	muls	r2, r4
    5290:	189b      	adds	r3, r3, r2
    5292:	4a12      	ldr	r2, [pc, #72]	; (52dc <mayfly_run+0x11c>)
    5294:	9904      	ldr	r1, [sp, #16]
    5296:	18d3      	adds	r3, r2, r3
    5298:	6858      	ldr	r0, [r3, #4]
    529a:	2200      	movs	r2, #0
    529c:	f7ff fee4 	bl	5068 <memq_dequeue>
				m->_link = link;
    52a0:	9b07      	ldr	r3, [sp, #28]
    52a2:	9a01      	ldr	r2, [sp, #4]
				m->_ack = req;
    52a4:	705d      	strb	r5, [r3, #1]
				m->_link = link;
    52a6:	605a      	str	r2, [r3, #4]
			link = memq_peek(mft[callee_id][caller_id].head,
    52a8:	230c      	movs	r3, #12
    52aa:	9a00      	ldr	r2, [sp, #0]
    52ac:	4373      	muls	r3, r6
    52ae:	4362      	muls	r2, r4
    52b0:	480a      	ldr	r0, [pc, #40]	; (52dc <mayfly_run+0x11c>)
    52b2:	189b      	adds	r3, r3, r2
    52b4:	18c1      	adds	r1, r0, r3
    52b6:	aa07      	add	r2, sp, #28
    52b8:	6849      	ldr	r1, [r1, #4]
    52ba:	5818      	ldr	r0, [r3, r0]
    52bc:	f7ff fecb 	bl	5056 <memq_peek>
    52c0:	9001      	str	r0, [sp, #4]
			if (state == 1) {
    52c2:	2f01      	cmp	r7, #1
    52c4:	d1ab      	bne.n	521e <mayfly_run+0x5e>
				if (caller_id || link) {
    52c6:	2e00      	cmp	r6, #0
    52c8:	d101      	bne.n	52ce <mayfly_run+0x10e>
    52ca:	2800      	cmp	r0, #0
    52cc:	d0aa      	beq.n	5224 <mayfly_run+0x64>
					mayfly_pend(callee_id, callee_id);
    52ce:	0021      	movs	r1, r4
    52d0:	0020      	movs	r0, r4
    52d2:	f006 fc0d 	bl	baf0 <mayfly_pend>
	}
}
    52d6:	b009      	add	sp, #36	; 0x24
    52d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52da:	46c0      	nop			; (mov r8, r8)
    52dc:	20000170 	.word	0x20000170

000052e0 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    52e0:	0002      	movs	r2, r0
    52e2:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    52e4:	2000      	movs	r0, #0
{
    52e6:	b510      	push	{r4, lr}

	while (octets_len--) {
    52e8:	428a      	cmp	r2, r1
    52ea:	d100      	bne.n	52ee <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    52ec:	bd10      	pop	{r4, pc}
		bite = *octets;
    52ee:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    52f0:	2c00      	cmp	r4, #0
    52f2:	d101      	bne.n	52f8 <util_ones_count_get+0x18>
		octets++;
    52f4:	3201      	adds	r2, #1
    52f6:	e7f7      	b.n	52e8 <util_ones_count_get+0x8>
			bite &= (bite - 1);
    52f8:	1e63      	subs	r3, r4, #1
			one_count++;
    52fa:	3001      	adds	r0, #1
			bite &= (bite - 1);
    52fc:	401c      	ands	r4, r3
			one_count++;
    52fe:	b2c0      	uxtb	r0, r0
    5300:	e7f6      	b.n	52f0 <util_ones_count_get+0x10>

00005302 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    5302:	2328      	movs	r3, #40	; 0x28
{
    5304:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
    5306:	7f45      	ldrb	r5, [r0, #29]
	total = 0;
    5308:	2400      	movs	r4, #0
	current = previous;
    530a:	002a      	movs	r2, r5
		ticker_current = &node[current];
    530c:	469c      	mov	ip, r3
	node = &instance->node[0];
    530e:	6806      	ldr	r6, [r0, #0]
	while (current != TICKER_NULL) {
    5310:	2aff      	cmp	r2, #255	; 0xff
    5312:	d101      	bne.n	5318 <ticker_dequeue+0x16>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    5314:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    5316:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    5318:	4663      	mov	r3, ip
    531a:	4353      	muls	r3, r2
    531c:	18f3      	adds	r3, r6, r3
    531e:	781f      	ldrb	r7, [r3, #0]
		if (current == id) {
    5320:	428a      	cmp	r2, r1
    5322:	d004      	beq.n	532e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    5324:	689b      	ldr	r3, [r3, #8]
		current = ticker_current->next;
    5326:	0015      	movs	r5, r2
		total += ticker_current->ticks_to_expire;
    5328:	18e4      	adds	r4, r4, r3
		current = ticker_current->next;
    532a:	003a      	movs	r2, r7
    532c:	e7f0      	b.n	5310 <ticker_dequeue+0xe>
	if (previous == current) {
    532e:	4295      	cmp	r5, r2
    5330:	d100      	bne.n	5334 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    5332:	7747      	strb	r7, [r0, #29]
	node[previous].next = ticker_current->next;
    5334:	2228      	movs	r2, #40	; 0x28
    5336:	4355      	muls	r5, r2
    5338:	7819      	ldrb	r1, [r3, #0]
	timeout = ticker_current->ticks_to_expire;
    533a:	6898      	ldr	r0, [r3, #8]
	node[previous].next = ticker_current->next;
    533c:	55a9      	strb	r1, [r5, r6]
	if (ticker_current->next != TICKER_NULL) {
    533e:	781b      	ldrb	r3, [r3, #0]
    5340:	2bff      	cmp	r3, #255	; 0xff
    5342:	d004      	beq.n	534e <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    5344:	4353      	muls	r3, r2
    5346:	18f3      	adds	r3, r6, r3
    5348:	689a      	ldr	r2, [r3, #8]
    534a:	1812      	adds	r2, r2, r0
    534c:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    534e:	1820      	adds	r0, r4, r0
    5350:	e7e1      	b.n	5316 <ticker_dequeue+0x14>

00005352 <ticks_to_expire_prep>:
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    5352:	1a53      	subs	r3, r2, r1
{
    5354:	b570      	push	{r4, r5, r6, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    5356:	6884      	ldr	r4, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    5358:	6945      	ldr	r5, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    535a:	021e      	lsls	r6, r3, #8
    535c:	d409      	bmi.n	5372 <ticks_to_expire_prep+0x20>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    535e:	021b      	lsls	r3, r3, #8
    5360:	0a1b      	lsrs	r3, r3, #8
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    5362:	191b      	adds	r3, r3, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
    5364:	42ab      	cmp	r3, r5
    5366:	d90e      	bls.n	5386 <ticks_to_expire_prep+0x34>
		ticks_to_expire -= ticks_to_expire_minus;
    5368:	1b5b      	subs	r3, r3, r5
		ticks_to_expire_minus = 0;
    536a:	2500      	movs	r5, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    536c:	6145      	str	r5, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    536e:	6083      	str	r3, [r0, #8]
}
    5370:	bd70      	pop	{r4, r5, r6, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5372:	1a8b      	subs	r3, r1, r2
    5374:	021b      	lsls	r3, r3, #8
    5376:	0a1b      	lsrs	r3, r3, #8
		if (ticks_to_expire > delta_current_start) {
    5378:	429c      	cmp	r4, r3
    537a:	d901      	bls.n	5380 <ticks_to_expire_prep+0x2e>
			ticks_to_expire -= delta_current_start;
    537c:	1ae3      	subs	r3, r4, r3
    537e:	e7f1      	b.n	5364 <ticks_to_expire_prep+0x12>
    5380:	18ed      	adds	r5, r5, r3
			ticks_to_expire = 0;
    5382:	2300      	movs	r3, #0
			ticks_to_expire_minus +=
    5384:	1b2d      	subs	r5, r5, r4
		ticks_to_expire_minus -= ticks_to_expire;
    5386:	1aed      	subs	r5, r5, r3
		ticks_to_expire = 0;
    5388:	2300      	movs	r3, #0
    538a:	e7ef      	b.n	536c <ticks_to_expire_prep+0x1a>

0000538c <ticker_job_op_cb>:
{
    538c:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    538e:	2200      	movs	r2, #0
    5390:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    5392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    5394:	b510      	push	{r4, lr}
    5396:	0008      	movs	r0, r1
	user_op->status = status;
    5398:	6259      	str	r1, [r3, #36]	; 0x24
	if (user_op->fp_op_func) {
    539a:	2a00      	cmp	r2, #0
    539c:	d001      	beq.n	53a2 <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    539e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    53a0:	4790      	blx	r2
}
    53a2:	bd10      	pop	{r4, pc}

000053a4 <ticker_worker>:
	instance->worker_trigger = 1;
    53a4:	2301      	movs	r3, #1
{
    53a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (instance->job_guard) {
    53a8:	7f86      	ldrb	r6, [r0, #30]
{
    53aa:	0004      	movs	r4, r0
	instance->worker_trigger = 1;
    53ac:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    53ae:	2e00      	cmp	r6, #0
    53b0:	d103      	bne.n	53ba <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    53b2:	7f43      	ldrb	r3, [r0, #29]
    53b4:	2bff      	cmp	r3, #255	; 0xff
    53b6:	d101      	bne.n	53bc <ticker_worker+0x18>
		instance->worker_trigger = 0;
    53b8:	77c6      	strb	r6, [r0, #31]
}
    53ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    53bc:	f005 fe9a 	bl	b0f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    53c0:	6963      	ldr	r3, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    53c2:	7f67      	ldrb	r7, [r4, #29]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    53c4:	1ac5      	subs	r5, r0, r3
    53c6:	022d      	lsls	r5, r5, #8
    53c8:	0a2b      	lsrs	r3, r5, #8
    53ca:	9300      	str	r3, [sp, #0]
	node = &instance->node[0];
    53cc:	6823      	ldr	r3, [r4, #0]
    53ce:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    53d0:	2fff      	cmp	r7, #255	; 0xff
    53d2:	d007      	beq.n	53e4 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    53d4:	2328      	movs	r3, #40	; 0x28
    53d6:	435f      	muls	r7, r3
    53d8:	9b01      	ldr	r3, [sp, #4]
		if (ticks_elapsed < ticks_to_expire) {
    53da:	9a00      	ldr	r2, [sp, #0]
		ticker = &node[ticker_id_head];
    53dc:	19d9      	adds	r1, r3, r7
		ticks_to_expire = ticker->ticks_to_expire;
    53de:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    53e0:	429a      	cmp	r2, r3
    53e2:	d217      	bcs.n	5414 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    53e4:	7aa2      	ldrb	r2, [r4, #10]
    53e6:	7ae3      	ldrb	r3, [r4, #11]
    53e8:	4293      	cmp	r3, r2
    53ea:	d105      	bne.n	53f8 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    53ec:	3301      	adds	r3, #1
    53ee:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    53f0:	2b02      	cmp	r3, #2
    53f2:	d100      	bne.n	53f6 <ticker_worker+0x52>
			last = 0;
    53f4:	2300      	movs	r3, #0
		instance->ticks_elapsed_last = last;
    53f6:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    53f8:	7ae3      	ldrb	r3, [r4, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    53fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    53fc:	3302      	adds	r3, #2
    53fe:	009b      	lsls	r3, r3, #2
    5400:	18e3      	adds	r3, r4, r3
    5402:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
    5404:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    5406:	2201      	movs	r2, #1
	instance->worker_trigger = 0;
    5408:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    540a:	2104      	movs	r1, #4
    540c:	0023      	movs	r3, r4
    540e:	2003      	movs	r0, #3
    5410:	47a8      	blx	r5
    5412:	e7d2      	b.n	53ba <ticker_worker+0x16>
		ticks_elapsed -= ticks_to_expire;
    5414:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    5416:	18f6      	adds	r6, r6, r3
		ticks_elapsed -= ticks_to_expire;
    5418:	1ad2      	subs	r2, r2, r3
    541a:	9200      	str	r2, [sp, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    541c:	788a      	ldrb	r2, [r1, #2]
    541e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    5420:	780f      	ldrb	r7, [r1, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    5422:	1a9b      	subs	r3, r3, r2
    5424:	b2db      	uxtb	r3, r3
    5426:	2b01      	cmp	r3, #1
    5428:	d1d2      	bne.n	53d0 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    542a:	68cb      	ldr	r3, [r1, #12]
		ticker->ack--;
    542c:	3a01      	subs	r2, #1
    542e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    5430:	1e1d      	subs	r5, r3, #0
    5432:	d0cd      	beq.n	53d0 <ticker_worker+0x2c>
					   ticks_expired -
    5434:	694b      	ldr	r3, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
    5436:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    5438:	1af0      	subs	r0, r6, r3
    543a:	6963      	ldr	r3, [r4, #20]
    543c:	18c0      	adds	r0, r0, r3
			ticks_at_expire = (instance->ticks_current +
    543e:	0200      	lsls	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    5440:	690b      	ldr	r3, [r1, #16]
			ticks_at_expire = (instance->ticks_current +
    5442:	0a00      	lsrs	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    5444:	6a49      	ldr	r1, [r1, #36]	; 0x24
    5446:	47a8      	blx	r5
    5448:	e7c2      	b.n	53d0 <ticker_worker+0x2c>
	...

0000544c <ticker_job>:
{
    544c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (instance->worker_trigger) {
    544e:	7fc2      	ldrb	r2, [r0, #31]
{
    5450:	b097      	sub	sp, #92	; 0x5c
    5452:	0007      	movs	r7, r0
	if (instance->worker_trigger) {
    5454:	2a00      	cmp	r2, #0
    5456:	d000      	beq.n	545a <ticker_job+0xe>
    5458:	e080      	b.n	555c <ticker_job+0x110>
	instance->job_guard = 1;
    545a:	2301      	movs	r3, #1
    545c:	7783      	strb	r3, [r0, #30]
	ticks_previous = instance->ticks_current;
    545e:	6943      	ldr	r3, [r0, #20]
    5460:	9308      	str	r3, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    5462:	7a83      	ldrb	r3, [r0, #10]
    5464:	7ac1      	ldrb	r1, [r0, #11]
    5466:	4299      	cmp	r1, r3
    5468:	d100      	bne.n	546c <ticker_job+0x20>
    546a:	e079      	b.n	5560 <ticker_job+0x114>
		first = instance->ticks_elapsed_first + 1;
    546c:	3301      	adds	r3, #1
    546e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    5470:	2b02      	cmp	r3, #2
    5472:	d100      	bne.n	5476 <ticker_job+0x2a>
			first = 0;
    5474:	0013      	movs	r3, r2
		instance->ticks_elapsed_first = first;
    5476:	72bb      	strb	r3, [r7, #10]
		ticks_elapsed =
    5478:	3302      	adds	r3, #2
    547a:	009b      	lsls	r3, r3, #2
    547c:	18fb      	adds	r3, r7, r3
    547e:	685b      	ldr	r3, [r3, #4]
    5480:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    5482:	9a00      	ldr	r2, [sp, #0]
    5484:	9b08      	ldr	r3, [sp, #32]
    5486:	189b      	adds	r3, r3, r2
		instance->ticks_current &= 0x00FFFFFF;
    5488:	021b      	lsls	r3, r3, #8
    548a:	0a1b      	lsrs	r3, r3, #8
    548c:	617b      	str	r3, [r7, #20]
		flag_elapsed = 1;
    548e:	2301      	movs	r3, #1
    5490:	9303      	str	r3, [sp, #12]
	ticker_id_old_head = instance->ticker_id_head;
    5492:	7f7b      	ldrb	r3, [r7, #29]
    5494:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    5496:	683b      	ldr	r3, [r7, #0]
    5498:	930d      	str	r3, [sp, #52]	; 0x34
	users = &instance->user[0];
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	930e      	str	r3, [sp, #56]	; 0x38
    549e:	7a7b      	ldrb	r3, [r7, #9]
    54a0:	3b01      	subs	r3, #1
    54a2:	b2db      	uxtb	r3, r3
    54a4:	9304      	str	r3, [sp, #16]
	pending = 0;
    54a6:	2300      	movs	r3, #0
    54a8:	930c      	str	r3, [sp, #48]	; 0x30
	insert_head = TICKER_NULL;
    54aa:	33ff      	adds	r3, #255	; 0xff
    54ac:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    54ae:	9b04      	ldr	r3, [sp, #16]
    54b0:	2bff      	cmp	r3, #255	; 0xff
    54b2:	d158      	bne.n	5566 <ticker_job+0x11a>
	if (instance->ticker_id_head != ticker_id_old_head) {
    54b4:	7f7b      	ldrb	r3, [r7, #29]
    54b6:	9a05      	ldr	r2, [sp, #20]
    54b8:	1a9b      	subs	r3, r3, r2
    54ba:	1e5a      	subs	r2, r3, #1
    54bc:	4193      	sbcs	r3, r2
	flag_compare_update = 0;
    54be:	b2db      	uxtb	r3, r3
    54c0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (flag_elapsed) {
    54c2:	9b03      	ldr	r3, [sp, #12]
    54c4:	2b00      	cmp	r3, #0
    54c6:	d016      	beq.n	54f6 <ticker_job+0xaa>
	node = &instance->node[0];
    54c8:	683b      	ldr	r3, [r7, #0]
    54ca:	9307      	str	r3, [sp, #28]
	ticks_expired = 0;
    54cc:	2300      	movs	r3, #0
    54ce:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    54d0:	7f7e      	ldrb	r6, [r7, #29]
    54d2:	2eff      	cmp	r6, #255	; 0xff
    54d4:	d00a      	beq.n	54ec <ticker_job+0xa0>
		ticker = &node[id_expired];
    54d6:	2428      	movs	r4, #40	; 0x28
    54d8:	4374      	muls	r4, r6
    54da:	9b07      	ldr	r3, [sp, #28]
    54dc:	191c      	adds	r4, r3, r4
		ticks_to_expire = ticker->ticks_to_expire;
    54de:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    54e0:	9b00      	ldr	r3, [sp, #0]
    54e2:	429d      	cmp	r5, r3
    54e4:	d800      	bhi.n	54e8 <ticker_job+0x9c>
    54e6:	e121      	b.n	572c <ticker_job+0x2e0>
			ticker->ticks_to_expire -= ticks_elapsed;
    54e8:	1aed      	subs	r5, r5, r3
    54ea:	60a5      	str	r5, [r4, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
    54ec:	9b05      	ldr	r3, [sp, #20]
    54ee:	42b3      	cmp	r3, r6
    54f0:	d001      	beq.n	54f6 <ticker_job+0xaa>
			flag_compare_update = 1;
    54f2:	9b03      	ldr	r3, [sp, #12]
    54f4:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->node[0];
    54f6:	683b      	ldr	r3, [r7, #0]
    54f8:	930e      	str	r3, [sp, #56]	; 0x38
	users = &instance->user[0];
    54fa:	687b      	ldr	r3, [r7, #4]
    54fc:	9312      	str	r3, [sp, #72]	; 0x48
    54fe:	7a7b      	ldrb	r3, [r7, #9]
    5500:	3b01      	subs	r3, #1
    5502:	b2db      	uxtb	r3, r3
    5504:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    5506:	9b06      	ldr	r3, [sp, #24]
    5508:	2bff      	cmp	r3, #255	; 0xff
    550a:	d000      	beq.n	550e <ticker_job+0xc2>
    550c:	e159      	b.n	57c2 <ticker_job+0x376>
	if (instance->ticker_id_head != ticker_id_old_head) {
    550e:	7f7b      	ldrb	r3, [r7, #29]
    5510:	9a05      	ldr	r2, [sp, #20]
    5512:	4293      	cmp	r3, r2
    5514:	d000      	beq.n	5518 <ticker_job+0xcc>
    5516:	e321      	b.n	5b5c <ticker_job+0x710>
	if (!pending) {
    5518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    551a:	2b00      	cmp	r3, #0
    551c:	d107      	bne.n	552e <ticker_job+0xe2>
	users = &instance->user[0];
    551e:	687b      	ldr	r3, [r7, #4]
    5520:	9303      	str	r3, [sp, #12]
    5522:	7a7b      	ldrb	r3, [r7, #9]
    5524:	3b01      	subs	r3, #1
    5526:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    5528:	2dff      	cmp	r5, #255	; 0xff
    552a:	d000      	beq.n	552e <ticker_job+0xe2>
    552c:	e287      	b.n	5a3e <ticker_job+0x5f2>
	instance->job_guard = 0;
    552e:	2300      	movs	r3, #0
    5530:	77bb      	strb	r3, [r7, #30]
	if (flag_compare_update) {
    5532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5534:	2b00      	cmp	r3, #0
    5536:	d008      	beq.n	554a <ticker_job+0xfe>
	if (instance->ticker_id_head == TICKER_NULL) {
    5538:	7f7b      	ldrb	r3, [r7, #29]
    553a:	2bff      	cmp	r3, #255	; 0xff
    553c:	d000      	beq.n	5540 <ticker_job+0xf4>
    553e:	e2d3      	b.n	5ae8 <ticker_job+0x69c>
		if (cntr_stop() == 0) {
    5540:	f005 fdc2 	bl	b0c8 <cntr_stop>
    5544:	2800      	cmp	r0, #0
    5546:	d100      	bne.n	554a <ticker_job+0xfe>
			instance->ticks_slot_previous = 0;
    5548:	61b8      	str	r0, [r7, #24]
	if (instance->worker_trigger) {
    554a:	7ffb      	ldrb	r3, [r7, #31]
    554c:	2b00      	cmp	r3, #0
    554e:	d005      	beq.n	555c <ticker_job+0x110>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    5550:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    5552:	003b      	movs	r3, r7
    5554:	2201      	movs	r2, #1
    5556:	2103      	movs	r1, #3
    5558:	2004      	movs	r0, #4
    555a:	47a0      	blx	r4
}
    555c:	b017      	add	sp, #92	; 0x5c
    555e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_elapsed = 0;
    5560:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    5562:	9200      	str	r2, [sp, #0]
    5564:	e795      	b.n	5492 <ticker_job+0x46>
		user = &users[count_user];
    5566:	9b04      	ldr	r3, [sp, #16]
    5568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    556a:	00db      	lsls	r3, r3, #3
    556c:	18d3      	adds	r3, r2, r3
    556e:	9302      	str	r3, [sp, #8]
		user_ops = &user->user_op[0];
    5570:	685b      	ldr	r3, [r3, #4]
    5572:	930f      	str	r3, [sp, #60]	; 0x3c
		while (user->middle != user->last) {
    5574:	9b02      	ldr	r3, [sp, #8]
    5576:	78da      	ldrb	r2, [r3, #3]
    5578:	9b02      	ldr	r3, [sp, #8]
    557a:	789e      	ldrb	r6, [r3, #2]
    557c:	4296      	cmp	r6, r2
    557e:	d100      	bne.n	5582 <ticker_job+0x136>
    5580:	e0cf      	b.n	5722 <ticker_job+0x2d6>
			user_op = &user_ops[user->middle];
    5582:	2530      	movs	r5, #48	; 0x30
    5584:	4375      	muls	r5, r6
    5586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			if (middle == user->count_user_op) {
    5588:	9902      	ldr	r1, [sp, #8]
			user_op = &user_ops[user->middle];
    558a:	195d      	adds	r5, r3, r5
			if (middle == user->count_user_op) {
    558c:	7809      	ldrb	r1, [r1, #0]
			middle = user->middle + 1;
    558e:	1c73      	adds	r3, r6, #1
    5590:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    5592:	4299      	cmp	r1, r3
    5594:	d100      	bne.n	5598 <ticker_job+0x14c>
				middle = 0;
    5596:	2300      	movs	r3, #0
			user->middle = middle;
    5598:	9902      	ldr	r1, [sp, #8]
    559a:	708b      	strb	r3, [r1, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    559c:	782b      	ldrb	r3, [r5, #0]
    559e:	2b03      	cmp	r3, #3
    55a0:	d9ea      	bls.n	5578 <ticker_job+0x12c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    55a2:	2b05      	cmp	r3, #5
    55a4:	d816      	bhi.n	55d4 <ticker_job+0x188>
			ticker = &node[user_op->id];
    55a6:	2428      	movs	r4, #40	; 0x28
    55a8:	7869      	ldrb	r1, [r5, #1]
    55aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    55ac:	434c      	muls	r4, r1
    55ae:	1914      	adds	r4, r2, r4
			state = (ticker->req - ticker->ack) & 0xff;
    55b0:	7862      	ldrb	r2, [r4, #1]
    55b2:	78a0      	ldrb	r0, [r4, #2]
    55b4:	1a12      	subs	r2, r2, r0
    55b6:	b2d2      	uxtb	r2, r2
    55b8:	9206      	str	r2, [sp, #24]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    55ba:	2a00      	cmp	r2, #0
    55bc:	d00a      	beq.n	55d4 <ticker_job+0x188>
			    (state == 0) ||
    55be:	2b04      	cmp	r3, #4
    55c0:	d10d      	bne.n	55de <ticker_job+0x192>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    55c2:	686b      	ldr	r3, [r5, #4]
    55c4:	2b00      	cmp	r3, #0
    55c6:	d10a      	bne.n	55de <ticker_job+0x192>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    55c8:	68ab      	ldr	r3, [r5, #8]
    55ca:	2b00      	cmp	r3, #0
    55cc:	d107      	bne.n	55de <ticker_job+0x192>
			     (user_op->params.update.lazy == 0) &&
    55ce:	68eb      	ldr	r3, [r5, #12]
    55d0:	021b      	lsls	r3, r3, #8
    55d2:	d104      	bne.n	55de <ticker_job+0x192>
				ticker_job_op_cb(user_op,
    55d4:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    55d6:	0028      	movs	r0, r5
    55d8:	f7ff fed8 	bl	538c <ticker_job_op_cb>
    55dc:	e7ca      	b.n	5574 <ticker_job+0x128>
			if (state == 1) {
    55de:	9b06      	ldr	r3, [sp, #24]
    55e0:	2b01      	cmp	r3, #1
    55e2:	d000      	beq.n	55e6 <ticker_job+0x19a>
    55e4:	e093      	b.n	570e <ticker_job+0x2c2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    55e6:	0038      	movs	r0, r7
    55e8:	f7ff fe8b 	bl	5302 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    55ec:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    55ee:	0006      	movs	r6, r0
    55f0:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    55f2:	2b04      	cmp	r3, #4
    55f4:	d000      	beq.n	55f8 <ticker_job+0x1ac>
    55f6:	e07f      	b.n	56f8 <ticker_job+0x2ac>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    55f8:	697b      	ldr	r3, [r7, #20]
    55fa:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    55fc:	f005 fd7a 	bl	b0f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5600:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    5602:	900a      	str	r0, [sp, #40]	; 0x28
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5604:	1a80      	subs	r0, r0, r2
    5606:	0200      	lsls	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    5608:	9b00      	ldr	r3, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    560a:	0a00      	lsrs	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    560c:	18c0      	adds	r0, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
    560e:	4286      	cmp	r6, r0
    5610:	d93a      	bls.n	5688 <ticker_job+0x23c>
		ticks_to_expire -= ticks_elapsed;
    5612:	1a30      	subs	r0, r6, r0
	if ((ticker->ticks_periodic != 0) &&
    5614:	6863      	ldr	r3, [r4, #4]
    5616:	469c      	mov	ip, r3
    5618:	2b00      	cmp	r3, #0
    561a:	d012      	beq.n	5642 <ticker_job+0x1f6>
	    (user_op->params.update.lazy != 0)) {
    561c:	89ab      	ldrh	r3, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    561e:	2b00      	cmp	r3, #0
    5620:	d00f      	beq.n	5642 <ticker_job+0x1f6>
		user_op->params.update.lazy--;
    5622:	3b01      	subs	r3, #1
    5624:	b29b      	uxth	r3, r3
    5626:	9307      	str	r3, [sp, #28]
    5628:	466b      	mov	r3, sp
    562a:	8b9b      	ldrh	r3, [r3, #28]
    562c:	81ab      	strh	r3, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    562e:	4584      	cmp	ip, r0
    5630:	d330      	bcc.n	5694 <ticker_job+0x248>
	if ((ticker->remainder_current < BIT(31)) &&
    5632:	4ed3      	ldr	r6, [pc, #844]	; (5980 <ticker_job+0x534>)
		while (ticker->lazy_current < user_op->params.update.lazy) {
    5634:	8be1      	ldrh	r1, [r4, #30]
    5636:	9b07      	ldr	r3, [sp, #28]
    5638:	428b      	cmp	r3, r1
    563a:	d848      	bhi.n	56ce <ticker_job+0x282>
		ticker->lazy_periodic = user_op->params.update.lazy;
    563c:	466b      	mov	r3, sp
    563e:	8b9b      	ldrh	r3, [r3, #28]
    5640:	83a3      	strh	r3, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    5642:	88ab      	ldrh	r3, [r5, #4]
	ticker->ticks_to_expire_minus +=
    5644:	6962      	ldr	r2, [r4, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    5646:	1818      	adds	r0, r3, r0
    5648:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    564a:	88eb      	ldrh	r3, [r5, #6]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    564c:	9909      	ldr	r1, [sp, #36]	; 0x24
	ticker->ticks_to_expire_minus +=
    564e:	18d3      	adds	r3, r2, r3
    5650:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    5652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5654:	0020      	movs	r0, r4
    5656:	f7ff fe7c 	bl	5352 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    565a:	69a2      	ldr	r2, [r4, #24]
    565c:	892b      	ldrh	r3, [r5, #8]
    565e:	189b      	adds	r3, r3, r2
    5660:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    5662:	896a      	ldrh	r2, [r5, #10]
    5664:	4293      	cmp	r3, r2
    5666:	d945      	bls.n	56f4 <ticker_job+0x2a8>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    5668:	1a9b      	subs	r3, r3, r2
		ticker->ticks_slot = 0;
    566a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    566c:	7bab      	ldrb	r3, [r5, #14]
    566e:	2b00      	cmp	r3, #0
    5670:	d000      	beq.n	5674 <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    5672:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    5674:	466b      	mov	r3, sp
    5676:	791b      	ldrb	r3, [r3, #4]
    5678:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    567a:	786b      	ldrb	r3, [r5, #1]
    567c:	9301      	str	r3, [sp, #4]
		ticker->req++;
    567e:	7863      	ldrb	r3, [r4, #1]
    5680:	3301      	adds	r3, #1
    5682:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    5684:	2100      	movs	r1, #0
    5686:	e7a6      	b.n	55d6 <ticker_job+0x18a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    5688:	6963      	ldr	r3, [r4, #20]
    568a:	1b9e      	subs	r6, r3, r6
    568c:	1830      	adds	r0, r6, r0
    568e:	6160      	str	r0, [r4, #20]
		ticks_to_expire = 0;
    5690:	2000      	movs	r0, #0
    5692:	e7bf      	b.n	5614 <ticker_job+0x1c8>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    5694:	8be3      	ldrh	r3, [r4, #30]
    5696:	930b      	str	r3, [sp, #44]	; 0x2c
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    5698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    569a:	9b07      	ldr	r3, [sp, #28]
    569c:	4293      	cmp	r3, r2
    569e:	d2c8      	bcs.n	5632 <ticker_job+0x1e6>
	if ((ticker->remainder_current >= BIT(31)) ||
    56a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    56a2:	49b8      	ldr	r1, [pc, #736]	; (5984 <ticker_job+0x538>)
    56a4:	1871      	adds	r1, r6, r1
    56a6:	000b      	movs	r3, r1
    56a8:	001a      	movs	r2, r3
    56aa:	4bb5      	ldr	r3, [pc, #724]	; (5980 <ticker_job+0x534>)
	u8_t decrement = 0;
    56ac:	2100      	movs	r1, #0
	if ((ticker->remainder_current >= BIT(31)) ||
    56ae:	429a      	cmp	r2, r3
    56b0:	d903      	bls.n	56ba <ticker_job+0x26e>
		ticker->remainder_current += 30517578UL;
    56b2:	4bb5      	ldr	r3, [pc, #724]	; (5988 <ticker_job+0x53c>)
		decrement++;
    56b4:	9906      	ldr	r1, [sp, #24]
		ticker->remainder_current += 30517578UL;
    56b6:	18f6      	adds	r6, r6, r3
    56b8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    56ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56bc:	6a26      	ldr	r6, [r4, #32]
			ticker->lazy_current--;
    56be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	ticker->remainder_current -= ticker->remainder_periodic;
    56c0:	1b9e      	subs	r6, r3, r6
			ticks_to_expire -= ticker->ticks_periodic +
    56c2:	4461      	add	r1, ip
			ticker->lazy_current--;
    56c4:	3a01      	subs	r2, #1
	ticker->remainder_current -= ticker->remainder_periodic;
    56c6:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    56c8:	1a40      	subs	r0, r0, r1
			ticker->lazy_current--;
    56ca:	83e2      	strh	r2, [r4, #30]
    56cc:	e7af      	b.n	562e <ticker_job+0x1e2>
	ticker->remainder_current += ticker->remainder_periodic;
    56ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56d0:	6a22      	ldr	r2, [r4, #32]
    56d2:	189a      	adds	r2, r3, r2
	if ((ticker->remainder_current < BIT(31)) &&
    56d4:	4bab      	ldr	r3, [pc, #684]	; (5984 <ticker_job+0x538>)
    56d6:	18d3      	adds	r3, r2, r3
    56d8:	42b3      	cmp	r3, r6
    56da:	d906      	bls.n	56ea <ticker_job+0x29e>
	ticker->remainder_current += ticker->remainder_periodic;
    56dc:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    56de:	2200      	movs	r2, #0
			ticks_to_expire += ticker->ticks_periodic +
    56e0:	4462      	add	r2, ip
			ticker->lazy_current++;
    56e2:	3101      	adds	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
    56e4:	1880      	adds	r0, r0, r2
			ticker->lazy_current++;
    56e6:	83e1      	strh	r1, [r4, #30]
    56e8:	e7a4      	b.n	5634 <ticker_job+0x1e8>
		ticker->remainder_current -= 30517578UL;
    56ea:	4ba8      	ldr	r3, [pc, #672]	; (598c <ticker_job+0x540>)
    56ec:	18d2      	adds	r2, r2, r3
    56ee:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    56f0:	9a06      	ldr	r2, [sp, #24]
    56f2:	e7f5      	b.n	56e0 <ticker_job+0x294>
		ticker->ticks_slot = 0;
    56f4:	2300      	movs	r3, #0
    56f6:	e7b8      	b.n	566a <ticker_job+0x21e>
		ticker->req = ticker->ack;
    56f8:	78a3      	ldrb	r3, [r4, #2]
    56fa:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    56fc:	7f3a      	ldrb	r2, [r7, #28]
    56fe:	786b      	ldrb	r3, [r5, #1]
    5700:	429a      	cmp	r2, r3
    5702:	d1bf      	bne.n	5684 <ticker_job+0x238>
			instance->ticker_id_slot_previous = TICKER_NULL;
    5704:	23ff      	movs	r3, #255	; 0xff
    5706:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    5708:	2300      	movs	r3, #0
    570a:	61bb      	str	r3, [r7, #24]
    570c:	e7ba      	b.n	5684 <ticker_job+0x238>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    570e:	2104      	movs	r1, #4
    5710:	003b      	movs	r3, r7
    5712:	2201      	movs	r2, #1
    5714:	0008      	movs	r0, r1
    5716:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    5718:	47a0      	blx	r4
				user->middle = prev;
    571a:	9b02      	ldr	r3, [sp, #8]
    571c:	709e      	strb	r6, [r3, #2]
				pending = 1;
    571e:	2301      	movs	r3, #1
    5720:	930c      	str	r3, [sp, #48]	; 0x30
    5722:	9b04      	ldr	r3, [sp, #16]
    5724:	3b01      	subs	r3, #1
    5726:	b2db      	uxtb	r3, r3
    5728:	9304      	str	r3, [sp, #16]
    572a:	e6c0      	b.n	54ae <ticker_job+0x62>
		ticks_expired += ticks_to_expire;
    572c:	9b02      	ldr	r3, [sp, #8]
    572e:	195b      	adds	r3, r3, r5
    5730:	9302      	str	r3, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    5732:	69bb      	ldr	r3, [r7, #24]
    5734:	429d      	cmp	r5, r3
    5736:	d237      	bcs.n	57a8 <ticker_job+0x35c>
			instance->ticks_slot_previous -= ticks_to_expire;
    5738:	1b5b      	subs	r3, r3, r5
			instance->ticks_slot_previous = 0;
    573a:	61bb      	str	r3, [r7, #24]
		if (ticker->ticks_slot != 0) {
    573c:	69a3      	ldr	r3, [r4, #24]
    573e:	2b00      	cmp	r3, #0
    5740:	d001      	beq.n	5746 <ticker_job+0x2fa>
			instance->ticker_id_slot_previous = id_expired;
    5742:	773e      	strb	r6, [r7, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    5744:	61bb      	str	r3, [r7, #24]
		ticker->ticks_to_expire = 0;
    5746:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    5748:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0;
    574a:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    574c:	777b      	strb	r3, [r7, #29]
		if (ticker->ticks_periodic != 0) {
    574e:	6860      	ldr	r0, [r4, #4]
    5750:	4290      	cmp	r0, r2
    5752:	d032      	beq.n	57ba <ticker_job+0x36e>
    5754:	8ba3      	ldrh	r3, [r4, #28]
    5756:	9306      	str	r3, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
    5758:	4b89      	ldr	r3, [pc, #548]	; (5980 <ticker_job+0x534>)
    575a:	469c      	mov	ip, r3
	ticker->remainder_current += ticker->remainder_periodic;
    575c:	6a21      	ldr	r1, [r4, #32]
    575e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5760:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    5762:	4988      	ldr	r1, [pc, #544]	; (5984 <ticker_job+0x538>)
    5764:	1859      	adds	r1, r3, r1
    5766:	4561      	cmp	r1, ip
    5768:	d922      	bls.n	57b0 <ticker_job+0x364>
	ticker->remainder_current += ticker->remainder_periodic;
    576a:	6263      	str	r3, [r4, #36]	; 0x24
	return 0;
    576c:	2300      	movs	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    576e:	181b      	adds	r3, r3, r0
    5770:	18d2      	adds	r2, r2, r3
			while (count--) {
    5772:	9b06      	ldr	r3, [sp, #24]
    5774:	3b01      	subs	r3, #1
    5776:	9306      	str	r3, [sp, #24]
    5778:	d2f0      	bcs.n	575c <ticker_job+0x310>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    577a:	9b08      	ldr	r3, [sp, #32]
			ticker->ticks_to_expire = ticks_to_expire;
    577c:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    577e:	9a02      	ldr	r2, [sp, #8]
    5780:	6979      	ldr	r1, [r7, #20]
    5782:	189a      	adds	r2, r3, r2
    5784:	0020      	movs	r0, r4
    5786:	f7ff fde4 	bl	5352 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    578a:	8ba3      	ldrh	r3, [r4, #28]
    578c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    578e:	2300      	movs	r3, #0
    5790:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    5792:	466b      	mov	r3, sp
    5794:	791b      	ldrb	r3, [r3, #4]
    5796:	7023      	strb	r3, [r4, #0]
			ticker->req++;
    5798:	7863      	ldrb	r3, [r4, #1]
    579a:	3301      	adds	r3, #1
    579c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    579e:	9b00      	ldr	r3, [sp, #0]
    57a0:	9601      	str	r6, [sp, #4]
    57a2:	1b5b      	subs	r3, r3, r5
    57a4:	9300      	str	r3, [sp, #0]
    57a6:	e693      	b.n	54d0 <ticker_job+0x84>
			instance->ticker_id_slot_previous = TICKER_NULL;
    57a8:	23ff      	movs	r3, #255	; 0xff
    57aa:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    57ac:	2300      	movs	r3, #0
    57ae:	e7c4      	b.n	573a <ticker_job+0x2ee>
		ticker->remainder_current -= 30517578UL;
    57b0:	4976      	ldr	r1, [pc, #472]	; (598c <ticker_job+0x540>)
    57b2:	185b      	adds	r3, r3, r1
    57b4:	6263      	str	r3, [r4, #36]	; 0x24
		return 1;
    57b6:	9b03      	ldr	r3, [sp, #12]
    57b8:	e7d9      	b.n	576e <ticker_job+0x322>
			ticker->req = ticker->ack;
    57ba:	78a3      	ldrb	r3, [r4, #2]
    57bc:	9e01      	ldr	r6, [sp, #4]
    57be:	7063      	strb	r3, [r4, #1]
    57c0:	e7ed      	b.n	579e <ticker_job+0x352>
		user = &users[count_user];
    57c2:	9b06      	ldr	r3, [sp, #24]
    57c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    57c6:	00db      	lsls	r3, r3, #3
    57c8:	18d3      	adds	r3, r2, r3
    57ca:	9307      	str	r3, [sp, #28]
		user_ops = (void *)&user->user_op[0];
    57cc:	685b      	ldr	r3, [r3, #4]
    57ce:	9313      	str	r3, [sp, #76]	; 0x4c
		user_ops_first = user->first;
    57d0:	9b07      	ldr	r3, [sp, #28]
    57d2:	785b      	ldrb	r3, [r3, #1]
    57d4:	9303      	str	r3, [sp, #12]
		while ((insert_head != TICKER_NULL) ||
    57d6:	9b01      	ldr	r3, [sp, #4]
    57d8:	2bff      	cmp	r3, #255	; 0xff
    57da:	d100      	bne.n	57de <ticker_job+0x392>
    57dc:	e083      	b.n	58e6 <ticker_job+0x49a>
				ticker = &node[id_insert];
    57de:	2428      	movs	r4, #40	; 0x28
    57e0:	9b01      	ldr	r3, [sp, #4]
    57e2:	435c      	muls	r4, r3
    57e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    57e6:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    57e8:	9b01      	ldr	r3, [sp, #4]
    57ea:	9302      	str	r3, [sp, #8]
    57ec:	7823      	ldrb	r3, [r4, #0]
    57ee:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    57f0:	2300      	movs	r3, #0
    57f2:	9300      	str	r3, [sp, #0]
	struct ticker_node *node = &instance->node[0];
    57f4:	683b      	ldr	r3, [r7, #0]
		skip = 0;
    57f6:	2100      	movs	r1, #0
	struct ticker_node *node = &instance->node[0];
    57f8:	9314      	str	r3, [sp, #80]	; 0x50
	ticker->next = TICKER_NULL;
    57fa:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    57fc:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    57fe:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    5800:	8be3      	ldrh	r3, [r4, #30]
		skip = 0;
    5802:	910f      	str	r1, [sp, #60]	; 0x3c
	if (ticker->lazy_current > ticker->lazy_periodic) {
    5804:	4293      	cmp	r3, r2
    5806:	d902      	bls.n	580e <ticker_job+0x3c2>
		skip = ticker->lazy_current -
    5808:	1a9b      	subs	r3, r3, r2
    580a:	b29b      	uxth	r3, r3
    580c:	930f      	str	r3, [sp, #60]	; 0x3c
	ticker_new = &node[id];
    580e:	2328      	movs	r3, #40	; 0x28
    5810:	9a02      	ldr	r2, [sp, #8]
    5812:	4353      	muls	r3, r2
    5814:	9315      	str	r3, [sp, #84]	; 0x54
	node = &instance->node[0];
    5816:	683b      	ldr	r3, [r7, #0]
	ticks_slot_previous = instance->ticks_slot_previous;
    5818:	69ba      	ldr	r2, [r7, #24]
	node = &instance->node[0];
    581a:	469c      	mov	ip, r3
	ticker_new = &node[id];
    581c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    581e:	4463      	add	r3, ip
    5820:	9308      	str	r3, [sp, #32]
	ticks_to_expire = ticker_new->ticks_to_expire;
    5822:	689e      	ldr	r6, [r3, #8]
	current = instance->ticker_id_head;
    5824:	7f7b      	ldrb	r3, [r7, #29]
	ticks_slot_previous = instance->ticks_slot_previous;
    5826:	9209      	str	r2, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    5828:	22ff      	movs	r2, #255	; 0xff
	previous = current;
    582a:	930d      	str	r3, [sp, #52]	; 0x34
	collide = ticker_id_slot_previous = TICKER_NULL;
    582c:	920a      	str	r2, [sp, #40]	; 0x28
	while ((current != TICKER_NULL) &&
    582e:	2bff      	cmp	r3, #255	; 0xff
    5830:	d006      	beq.n	5840 <ticker_job+0x3f4>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    5832:	2228      	movs	r2, #40	; 0x28
    5834:	435a      	muls	r2, r3
    5836:	4462      	add	r2, ip
		(ticks_to_expire_current =
    5838:	6890      	ldr	r0, [r2, #8]
	while ((current != TICKER_NULL) &&
    583a:	4286      	cmp	r6, r0
    583c:	d900      	bls.n	5840 <ticker_job+0x3f4>
    583e:	e0ab      	b.n	5998 <ticker_job+0x54c>
	collide = ticker_by_slot_get(&node[0], current,
    5840:	001d      	movs	r5, r3
				     ticks_to_expire + ticker_new->ticks_slot);
    5842:	9a08      	ldr	r2, [sp, #32]
    5844:	6992      	ldr	r2, [r2, #24]
    5846:	9210      	str	r2, [sp, #64]	; 0x40
	collide = ticker_by_slot_get(&node[0], current,
    5848:	18b0      	adds	r0, r6, r2
	while (ticker_id_head != TICKER_NULL) {
    584a:	2dff      	cmp	r5, #255	; 0xff
    584c:	d000      	beq.n	5850 <ticker_job+0x404>
    584e:	e0b1      	b.n	59b4 <ticker_job+0x568>
	if ((ticker_new->ticks_slot == 0) ||
    5850:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5852:	2a00      	cmp	r2, #0
    5854:	d006      	beq.n	5864 <ticker_job+0x418>
    5856:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5858:	4296      	cmp	r6, r2
    585a:	d200      	bcs.n	585e <ticker_job+0x412>
    585c:	e0c3      	b.n	59e6 <ticker_job+0x59a>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    585e:	2dff      	cmp	r5, #255	; 0xff
    5860:	d000      	beq.n	5864 <ticker_job+0x418>
    5862:	e181      	b.n	5b68 <ticker_job+0x71c>
		ticker_new->ticks_to_expire = ticks_to_expire;
    5864:	9a08      	ldr	r2, [sp, #32]
    5866:	6096      	str	r6, [r2, #8]
		ticker_new->next = current;
    5868:	7013      	strb	r3, [r2, #0]
		if (previous == current) {
    586a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    586c:	4293      	cmp	r3, r2
    586e:	d000      	beq.n	5872 <ticker_job+0x426>
    5870:	e0b1      	b.n	59d6 <ticker_job+0x58a>
			instance->ticker_id_head = id;
    5872:	466a      	mov	r2, sp
    5874:	7a12      	ldrb	r2, [r2, #8]
    5876:	777a      	strb	r2, [r7, #29]
		if (current != TICKER_NULL) {
    5878:	2bff      	cmp	r3, #255	; 0xff
    587a:	d005      	beq.n	5888 <ticker_job+0x43c>
			node[current].ticks_to_expire -= ticks_to_expire;
    587c:	2228      	movs	r2, #40	; 0x28
    587e:	4353      	muls	r3, r2
    5880:	4463      	add	r3, ip
    5882:	689a      	ldr	r2, [r3, #8]
    5884:	1b92      	subs	r2, r2, r6
    5886:	609a      	str	r2, [r3, #8]
	return TICKER_STATUS_SUCCESS;
    5888:	2100      	movs	r1, #0
	ticker->req = ticker->ack + 1;
    588a:	78a3      	ldrb	r3, [r4, #2]
    588c:	3301      	adds	r3, #1
    588e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    5890:	9b00      	ldr	r3, [sp, #0]
    5892:	2b00      	cmp	r3, #0
    5894:	d09f      	beq.n	57d6 <ticker_job+0x38a>
				ticker_job_op_cb(user_op, status);
    5896:	0018      	movs	r0, r3
    5898:	f7ff fd78 	bl	538c <ticker_job_op_cb>
    589c:	e79b      	b.n	57d6 <ticker_job+0x38a>
				user_op = &user_ops[user_ops_first];
    589e:	2330      	movs	r3, #48	; 0x30
    58a0:	9a03      	ldr	r2, [sp, #12]
    58a2:	4353      	muls	r3, r2
    58a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    58a6:	18d3      	adds	r3, r2, r3
    58a8:	9300      	str	r3, [sp, #0]
				first = user_ops_first + 1;
    58aa:	9b03      	ldr	r3, [sp, #12]
    58ac:	3301      	adds	r3, #1
    58ae:	b2db      	uxtb	r3, r3
    58b0:	9303      	str	r3, [sp, #12]
				if (first == user->count_user_op) {
    58b2:	9b07      	ldr	r3, [sp, #28]
    58b4:	9a03      	ldr	r2, [sp, #12]
    58b6:	781b      	ldrb	r3, [r3, #0]
    58b8:	4293      	cmp	r3, r2
    58ba:	d101      	bne.n	58c0 <ticker_job+0x474>
					first = 0;
    58bc:	2300      	movs	r3, #0
    58be:	9303      	str	r3, [sp, #12]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    58c0:	9b00      	ldr	r3, [sp, #0]
    58c2:	781b      	ldrb	r3, [r3, #0]
    58c4:	2b03      	cmp	r3, #3
    58c6:	d10e      	bne.n	58e6 <ticker_job+0x49a>
				ticker = &node[id_insert];
    58c8:	2428      	movs	r4, #40	; 0x28
				id_insert = user_op->id;
    58ca:	9b00      	ldr	r3, [sp, #0]
    58cc:	785b      	ldrb	r3, [r3, #1]
				ticker = &node[id_insert];
    58ce:	435c      	muls	r4, r3
				id_insert = user_op->id;
    58d0:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
    58d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    58d4:	191c      	adds	r4, r3, r4
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    58d6:	7862      	ldrb	r2, [r4, #1]
    58d8:	78a3      	ldrb	r3, [r4, #2]
    58da:	429a      	cmp	r2, r3
    58dc:	d00a      	beq.n	58f4 <ticker_job+0x4a8>
					ticker_job_op_cb(user_op,
    58de:	2101      	movs	r1, #1
    58e0:	9800      	ldr	r0, [sp, #0]
    58e2:	f7ff fd53 	bl	538c <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    58e6:	9b07      	ldr	r3, [sp, #28]
    58e8:	9a03      	ldr	r2, [sp, #12]
    58ea:	789b      	ldrb	r3, [r3, #2]
    58ec:	4293      	cmp	r3, r2
    58ee:	d1d6      	bne.n	589e <ticker_job+0x452>
    58f0:	9b06      	ldr	r3, [sp, #24]
    58f2:	e605      	b.n	5500 <ticker_job+0xb4>
	ticker->ticks_to_expire_minus = 0;
    58f4:	2500      	movs	r5, #0
	ticker->ticks_periodic = start->ticks_periodic;
    58f6:	9b00      	ldr	r3, [sp, #0]
				ticker_job_op_start(ticker, user_op,
    58f8:	6979      	ldr	r1, [r7, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    58fa:	68db      	ldr	r3, [r3, #12]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    58fc:	0020      	movs	r0, r4
	ticker->ticks_periodic = start->ticks_periodic;
    58fe:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    5900:	9b00      	ldr	r3, [sp, #0]
    5902:	691b      	ldr	r3, [r3, #16]
    5904:	9308      	str	r3, [sp, #32]
    5906:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    5908:	9b00      	ldr	r3, [sp, #0]
    590a:	8a9b      	ldrh	r3, [r3, #20]
    590c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    590e:	9b00      	ldr	r3, [sp, #0]
    5910:	699b      	ldr	r3, [r3, #24]
    5912:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    5914:	9b00      	ldr	r3, [sp, #0]
    5916:	69db      	ldr	r3, [r3, #28]
    5918:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    591a:	9b00      	ldr	r3, [sp, #0]
    591c:	6a1b      	ldr	r3, [r3, #32]
    591e:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    5920:	9b00      	ldr	r3, [sp, #0]
    5922:	689b      	ldr	r3, [r3, #8]
	ticker->ticks_to_expire_minus = 0;
    5924:	6165      	str	r5, [r4, #20]
	ticker->ticks_to_expire = start->ticks_first;
    5926:	9308      	str	r3, [sp, #32]
    5928:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    592a:	9b00      	ldr	r3, [sp, #0]
    592c:	685a      	ldr	r2, [r3, #4]
    592e:	f7ff fd10 	bl	5352 <ticks_to_expire_prep>
	ticker->force = 1;
    5932:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    5934:	6265      	str	r5, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    5936:	83e5      	strh	r5, [r4, #30]
	ticker->force = 1;
    5938:	70e3      	strb	r3, [r4, #3]
    593a:	e75b      	b.n	57f4 <ticker_job+0x3a8>
		if (ticker->ticks_periodic != 0) {
    593c:	6863      	ldr	r3, [r4, #4]
    593e:	2b00      	cmp	r3, #0
    5940:	d100      	bne.n	5944 <ticker_job+0x4f8>
    5942:	e07a      	b.n	5a3a <ticker_job+0x5ee>
	ticker->remainder_current += ticker->remainder_periodic;
    5944:	6a21      	ldr	r1, [r4, #32]
    5946:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5948:	1852      	adds	r2, r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    594a:	490e      	ldr	r1, [pc, #56]	; (5984 <ticker_job+0x538>)
    594c:	1850      	adds	r0, r2, r1
    594e:	490c      	ldr	r1, [pc, #48]	; (5980 <ticker_job+0x534>)
    5950:	4288      	cmp	r0, r1
    5952:	d910      	bls.n	5976 <ticker_job+0x52a>
	ticker->remainder_current += ticker->remainder_periodic;
    5954:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    5956:	2200      	movs	r2, #0
			ticker->ticks_to_expire += ticker->ticks_periodic +
    5958:	68a1      	ldr	r1, [r4, #8]
    595a:	185b      	adds	r3, r3, r1
    595c:	189b      	adds	r3, r3, r2
			ticker->lazy_current++;
    595e:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    5960:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    5962:	3201      	adds	r2, #1
    5964:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    5966:	6962      	ldr	r2, [r4, #20]
    5968:	2100      	movs	r1, #0
			if (ticker->ticks_to_expire >
    596a:	4293      	cmp	r3, r2
    596c:	d910      	bls.n	5990 <ticker_job+0x544>
				ticker->ticks_to_expire -=
    596e:	1a9b      	subs	r3, r3, r2
    5970:	60a3      	str	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    5972:	6161      	str	r1, [r4, #20]
    5974:	e74f      	b.n	5816 <ticker_job+0x3ca>
		ticker->remainder_current -= 30517578UL;
    5976:	4905      	ldr	r1, [pc, #20]	; (598c <ticker_job+0x540>)
    5978:	1852      	adds	r2, r2, r1
    597a:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    597c:	2201      	movs	r2, #1
    597e:	e7eb      	b.n	5958 <ticker_job+0x50c>
    5980:	7f172b59 	.word	0x7f172b59
    5984:	ff172b5a 	.word	0xff172b5a
    5988:	01d1a94a 	.word	0x01d1a94a
    598c:	fe2e56b6 	.word	0xfe2e56b6
				ticker->ticks_to_expire_minus -=
    5990:	1ad3      	subs	r3, r2, r3
    5992:	6163      	str	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    5994:	60a1      	str	r1, [r4, #8]
    5996:	e73e      	b.n	5816 <ticker_job+0x3ca>
		if (ticker_current->ticks_slot != 0) {
    5998:	6995      	ldr	r5, [r2, #24]
		ticks_to_expire -= ticks_to_expire_current;
    599a:	1a36      	subs	r6, r6, r0
		if (ticker_current->ticks_slot != 0) {
    599c:	2d00      	cmp	r5, #0
    599e:	d107      	bne.n	59b0 <ticker_job+0x564>
			if (ticks_slot_previous > ticks_to_expire_current) {
    59a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    59a2:	4288      	cmp	r0, r1
    59a4:	d200      	bcs.n	59a8 <ticker_job+0x55c>
				ticks_slot_previous -= ticks_to_expire_current;
    59a6:	1a0d      	subs	r5, r1, r0
		current = ticker_current->next;
    59a8:	930d      	str	r3, [sp, #52]	; 0x34
    59aa:	9509      	str	r5, [sp, #36]	; 0x24
    59ac:	7813      	ldrb	r3, [r2, #0]
    59ae:	e73e      	b.n	582e <ticker_job+0x3e2>
		if (ticker_current->ticks_slot != 0) {
    59b0:	930a      	str	r3, [sp, #40]	; 0x28
    59b2:	e7f9      	b.n	59a8 <ticker_job+0x55c>
		ticker = &node[ticker_id_head];
    59b4:	2228      	movs	r2, #40	; 0x28
    59b6:	436a      	muls	r2, r5
    59b8:	4462      	add	r2, ip
		ticks_to_expire = ticker->ticks_to_expire;
    59ba:	6891      	ldr	r1, [r2, #8]
    59bc:	9111      	str	r1, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    59be:	4281      	cmp	r1, r0
    59c0:	d207      	bcs.n	59d2 <ticker_job+0x586>
		if (ticker->ticks_slot) {
    59c2:	6991      	ldr	r1, [r2, #24]
    59c4:	2900      	cmp	r1, #0
    59c6:	d000      	beq.n	59ca <ticker_job+0x57e>
    59c8:	e742      	b.n	5850 <ticker_job+0x404>
		ticks_slot -= ticks_to_expire;
    59ca:	9911      	ldr	r1, [sp, #68]	; 0x44
		ticker_id_head = ticker->next;
    59cc:	7815      	ldrb	r5, [r2, #0]
		ticks_slot -= ticks_to_expire;
    59ce:	1a40      	subs	r0, r0, r1
    59d0:	e73b      	b.n	584a <ticker_job+0x3fe>
			return TICKER_NULL;
    59d2:	9d04      	ldr	r5, [sp, #16]
    59d4:	e73c      	b.n	5850 <ticker_job+0x404>
			node[previous].next = id;
    59d6:	2128      	movs	r1, #40	; 0x28
    59d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    59da:	4668      	mov	r0, sp
    59dc:	434a      	muls	r2, r1
    59de:	4661      	mov	r1, ip
    59e0:	7a00      	ldrb	r0, [r0, #8]
    59e2:	5450      	strb	r0, [r2, r1]
    59e4:	e748      	b.n	5878 <ticker_job+0x42c>
	while (id_insert !=
    59e6:	9b02      	ldr	r3, [sp, #8]
    59e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    59ea:	4293      	cmp	r3, r2
    59ec:	d100      	bne.n	59f0 <ticker_job+0x5a4>
    59ee:	e74b      	b.n	5888 <ticker_job+0x43c>
		if (id_collide != TICKER_NULL) {
    59f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    59f2:	2bff      	cmp	r3, #255	; 0xff
    59f4:	d0a2      	beq.n	593c <ticker_job+0x4f0>
    59f6:	001d      	movs	r5, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    59f8:	2628      	movs	r6, #40	; 0x28
    59fa:	436e      	muls	r6, r5
    59fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
				skip_collide = 0;
    59fe:	2200      	movs	r2, #0
			struct ticker_node *ticker_collide = &node[id_collide];
    5a00:	199e      	adds	r6, r3, r6
			if (ticker_collide->lazy_current >
    5a02:	8bf3      	ldrh	r3, [r6, #30]
			    ticker_collide->lazy_periodic) {
    5a04:	8bb1      	ldrh	r1, [r6, #28]
			if (ticker_collide->lazy_current >
    5a06:	428b      	cmp	r3, r1
    5a08:	d901      	bls.n	5a0e <ticker_job+0x5c2>
				skip_collide = ticker_collide->lazy_current -
    5a0a:	1a5b      	subs	r3, r3, r1
    5a0c:	b29a      	uxth	r2, r3
			if (ticker_collide->ticks_periodic &&
    5a0e:	6873      	ldr	r3, [r6, #4]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d093      	beq.n	593c <ticker_job+0x4f0>
    5a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5a16:	429a      	cmp	r2, r3
    5a18:	d890      	bhi.n	593c <ticker_job+0x4f0>
			    skip_collide <= skip &&
    5a1a:	78f2      	ldrb	r2, [r6, #3]
    5a1c:	78e3      	ldrb	r3, [r4, #3]
    5a1e:	429a      	cmp	r2, r3
    5a20:	d28c      	bcs.n	593c <ticker_job+0x4f0>
					ticker_dequeue(instance, id_collide);
    5a22:	0029      	movs	r1, r5
    5a24:	0038      	movs	r0, r7
    5a26:	f7ff fc6c 	bl	5302 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    5a2a:	78b3      	ldrb	r3, [r6, #2]
				ticker_collide->ticks_to_expire =
    5a2c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
    5a2e:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
    5a30:	466b      	mov	r3, sp
    5a32:	791b      	ldrb	r3, [r3, #4]
    5a34:	9501      	str	r5, [sp, #4]
    5a36:	7033      	strb	r3, [r6, #0]
    5a38:	e6ed      	b.n	5816 <ticker_job+0x3ca>
			return TICKER_STATUS_FAILURE;
    5a3a:	2101      	movs	r1, #1
    5a3c:	e728      	b.n	5890 <ticker_job+0x444>
		user = &users[count_user];
    5a3e:	9b03      	ldr	r3, [sp, #12]
    5a40:	00ec      	lsls	r4, r5, #3
    5a42:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    5a44:	6863      	ldr	r3, [r4, #4]
    5a46:	9304      	str	r3, [sp, #16]
		while (user->first != user->last) {
    5a48:	7863      	ldrb	r3, [r4, #1]
    5a4a:	78e2      	ldrb	r2, [r4, #3]
    5a4c:	429a      	cmp	r2, r3
    5a4e:	d102      	bne.n	5a56 <ticker_job+0x60a>
    5a50:	3d01      	subs	r5, #1
    5a52:	b2ed      	uxtb	r5, r5
    5a54:	e568      	b.n	5528 <ticker_job+0xdc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    5a56:	2230      	movs	r2, #48	; 0x30
    5a58:	4353      	muls	r3, r2
    5a5a:	9a04      	ldr	r2, [sp, #16]
    5a5c:	18d3      	adds	r3, r2, r3
	switch (uop->op) {
    5a5e:	781a      	ldrb	r2, [r3, #0]
    5a60:	2a01      	cmp	r2, #1
    5a62:	d026      	beq.n	5ab2 <ticker_job+0x666>
    5a64:	2a02      	cmp	r2, #2
    5a66:	d12b      	bne.n	5ac0 <ticker_job+0x674>
		ticker_by_next_slot_get(instance,
    5a68:	685a      	ldr	r2, [r3, #4]
    5a6a:	68d9      	ldr	r1, [r3, #12]
    5a6c:	4694      	mov	ip, r2
    5a6e:	9100      	str	r1, [sp, #0]
	node = instance->node;
    5a70:	6839      	ldr	r1, [r7, #0]
		ticker_by_next_slot_get(instance,
    5a72:	689a      	ldr	r2, [r3, #8]
	node = instance->node;
    5a74:	9101      	str	r1, [sp, #4]
	_ticker_id_head = *ticker_id_head;
    5a76:	4661      	mov	r1, ip
    5a78:	7809      	ldrb	r1, [r1, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    5a7a:	29ff      	cmp	r1, #255	; 0xff
    5a7c:	d004      	beq.n	5a88 <ticker_job+0x63c>
    5a7e:	6810      	ldr	r0, [r2, #0]
    5a80:	0006      	movs	r6, r0
    5a82:	6978      	ldr	r0, [r7, #20]
    5a84:	4286      	cmp	r6, r0
    5a86:	d024      	beq.n	5ad2 <ticker_job+0x686>
		*ticks_current = instance->ticks_current;
    5a88:	6978      	ldr	r0, [r7, #20]
		_ticker_id_head = instance->ticker_id_head;
    5a8a:	7f79      	ldrb	r1, [r7, #29]
		*ticks_current = instance->ticks_current;
    5a8c:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    5a8e:	2200      	movs	r2, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    5a90:	29ff      	cmp	r1, #255	; 0xff
    5a92:	d00a      	beq.n	5aaa <ticker_job+0x65e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    5a94:	2028      	movs	r0, #40	; 0x28
    5a96:	4348      	muls	r0, r1
    5a98:	9e01      	ldr	r6, [sp, #4]
    5a9a:	1830      	adds	r0, r6, r0
    5a9c:	6886      	ldr	r6, [r0, #8]
    5a9e:	9602      	str	r6, [sp, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    5aa0:	6986      	ldr	r6, [r0, #24]
    5aa2:	2e00      	cmp	r6, #0
    5aa4:	d01c      	beq.n	5ae0 <ticker_job+0x694>
		_ticks_to_expire += ticker->ticks_to_expire;
    5aa6:	9802      	ldr	r0, [sp, #8]
    5aa8:	1812      	adds	r2, r2, r0
	*ticker_id_head = _ticker_id_head;
    5aaa:	4660      	mov	r0, ip
    5aac:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    5aae:	9900      	ldr	r1, [sp, #0]
    5ab0:	600a      	str	r2, [r1, #0]
		uop->status = TICKER_STATUS_SUCCESS;
    5ab2:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    5ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    5ab6:	6258      	str	r0, [r3, #36]	; 0x24
	if (fp_op_func) {
    5ab8:	4282      	cmp	r2, r0
    5aba:	d001      	beq.n	5ac0 <ticker_job+0x674>
		fp_op_func(uop->status, uop->op_context);
    5abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5abe:	4790      	blx	r2
			first = user->first + 1;
    5ac0:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    5ac2:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    5ac4:	3301      	adds	r3, #1
    5ac6:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    5ac8:	429a      	cmp	r2, r3
    5aca:	d100      	bne.n	5ace <ticker_job+0x682>
				first = 0;
    5acc:	2300      	movs	r3, #0
			user->first = first;
    5ace:	7063      	strb	r3, [r4, #1]
    5ad0:	e7ba      	b.n	5a48 <ticker_job+0x5fc>
		ticker = &node[_ticker_id_head];
    5ad2:	2028      	movs	r0, #40	; 0x28
    5ad4:	4341      	muls	r1, r0
	_ticks_to_expire = *ticks_to_expire;
    5ad6:	9a00      	ldr	r2, [sp, #0]
		_ticker_id_head = ticker->next;
    5ad8:	9801      	ldr	r0, [sp, #4]
	_ticks_to_expire = *ticks_to_expire;
    5ada:	6812      	ldr	r2, [r2, #0]
		_ticker_id_head = ticker->next;
    5adc:	5c41      	ldrb	r1, [r0, r1]
    5ade:	e7d7      	b.n	5a90 <ticker_job+0x644>
		_ticks_to_expire += ticker->ticks_to_expire;
    5ae0:	9902      	ldr	r1, [sp, #8]
    5ae2:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    5ae4:	7801      	ldrb	r1, [r0, #0]
    5ae6:	e7d3      	b.n	5a90 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
    5ae8:	9b05      	ldr	r3, [sp, #20]
    5aea:	2bff      	cmp	r3, #255	; 0xff
    5aec:	d107      	bne.n	5afe <ticker_job+0x6b2>
		ticks_current = cntr_cnt_get();
    5aee:	f005 fb01 	bl	b0f4 <cntr_cnt_get>
    5af2:	0004      	movs	r4, r0
		if (cntr_start() == 0) {
    5af4:	f005 fad8 	bl	b0a8 <cntr_start>
    5af8:	2800      	cmp	r0, #0
    5afa:	d100      	bne.n	5afe <ticker_job+0x6b2>
			instance->ticks_current = ticks_current;
    5afc:	617c      	str	r4, [r7, #20]
	ticks_to_expire = ticker->ticks_to_expire;
    5afe:	2328      	movs	r3, #40	; 0x28
    5b00:	260a      	movs	r6, #10
	ticker = &instance->node[instance->ticker_id_head];
    5b02:	7f7a      	ldrb	r2, [r7, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    5b04:	4353      	muls	r3, r2
    5b06:	683a      	ldr	r2, [r7, #0]
    5b08:	18d3      	adds	r3, r2, r3
    5b0a:	689b      	ldr	r3, [r3, #8]
    5b0c:	9300      	str	r3, [sp, #0]
		ctr = cntr_cnt_get();
    5b0e:	f005 faf1 	bl	b0f4 <cntr_cnt_get>
		cc = instance->ticks_current;
    5b12:	697b      	ldr	r3, [r7, #20]
		       ticks_to_expire : ticks_elapsed);
    5b14:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5b16:	1ac4      	subs	r4, r0, r3
    5b18:	0224      	lsls	r4, r4, #8
    5b1a:	0a24      	lsrs	r4, r4, #8
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    5b1c:	3403      	adds	r4, #3
		ctr = cntr_cnt_get();
    5b1e:	0005      	movs	r5, r0
		       ticks_to_expire : ticks_elapsed);
    5b20:	4294      	cmp	r4, r2
    5b22:	d200      	bcs.n	5b26 <ticker_job+0x6da>
    5b24:	0014      	movs	r4, r2
		cc += ((ticks_elapsed < ticks_to_expire) ?
    5b26:	191c      	adds	r4, r3, r4
		cc &= 0x00FFFFFF;
    5b28:	0224      	lsls	r4, r4, #8
    5b2a:	0a24      	lsrs	r4, r4, #8
		instance->trigger_set_cb(cc);
    5b2c:	0020      	movs	r0, r4
    5b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5b30:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    5b32:	f005 fadf 	bl	b0f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5b36:	1b40      	subs	r0, r0, r5
    5b38:	0200      	lsls	r0, r0, #8
    5b3a:	0a00      	lsrs	r0, r0, #8
    5b3c:	1b64      	subs	r4, r4, r5
    5b3e:	0224      	lsls	r4, r4, #8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    5b40:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5b42:	0a24      	lsrs	r4, r4, #8
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    5b44:	42a0      	cmp	r0, r4
    5b46:	d800      	bhi.n	5b4a <ticker_job+0x6fe>
    5b48:	e4ff      	b.n	554a <ticker_job+0xfe>
    5b4a:	3e01      	subs	r6, #1
		LL_ASSERT(i);
    5b4c:	2e00      	cmp	r6, #0
    5b4e:	d1de      	bne.n	5b0e <ticker_job+0x6c2>
    5b50:	b662      	cpsie	i
    5b52:	2004      	movs	r0, #4
    5b54:	df02      	svc	2
	instance->job_guard = 0;
    5b56:	2300      	movs	r3, #0
    5b58:	77bb      	strb	r3, [r7, #30]
    5b5a:	e4ed      	b.n	5538 <ticker_job+0xec>
	if (!pending) {
    5b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d1f9      	bne.n	5b56 <ticker_job+0x70a>
		flag_compare_update = 1;
    5b62:	2301      	movs	r3, #1
    5b64:	930b      	str	r3, [sp, #44]	; 0x2c
    5b66:	e4da      	b.n	551e <ticker_job+0xd2>
	while (id_insert !=
    5b68:	9b02      	ldr	r3, [sp, #8]
    5b6a:	42ab      	cmp	r3, r5
    5b6c:	d000      	beq.n	5b70 <ticker_job+0x724>
    5b6e:	e743      	b.n	59f8 <ticker_job+0x5ac>
    5b70:	e68a      	b.n	5888 <ticker_job+0x43c>
    5b72:	46c0      	nop			; (mov r8, r8)

00005b74 <ticker_init>:
{
    5b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b76:	0006      	movs	r6, r0
	instance->count_node = count_node;
    5b78:	272c      	movs	r7, #44	; 0x2c
{
    5b7a:	ac08      	add	r4, sp, #32
    5b7c:	cc01      	ldmia	r4!, {r0}
	instance->count_node = count_node;
    5b7e:	4377      	muls	r7, r6
{
    5b80:	7825      	ldrb	r5, [r4, #0]
	instance->count_node = count_node;
    5b82:	4c17      	ldr	r4, [pc, #92]	; (5be0 <ticker_init+0x6c>)
{
    5b84:	9001      	str	r0, [sp, #4]
	instance->node = node;
    5b86:	513a      	str	r2, [r7, r4]
	instance->count_node = count_node;
    5b88:	19e0      	adds	r0, r4, r7
		user_op_ += users[count_user].count_user_op;
    5b8a:	2730      	movs	r7, #48	; 0x30
	instance->count_node = count_node;
    5b8c:	7201      	strb	r1, [r0, #8]
	instance->user = user;
    5b8e:	9901      	ldr	r1, [sp, #4]
	instance->count_user = count_user;
    5b90:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    5b92:	6041      	str	r1, [r0, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
    5b94:	990a      	ldr	r1, [sp, #40]	; 0x28
	while (count_user--) {
    5b96:	3b01      	subs	r3, #1
    5b98:	b2db      	uxtb	r3, r3
    5b9a:	2bff      	cmp	r3, #255	; 0xff
    5b9c:	d113      	bne.n	5bc6 <ticker_init+0x52>
		return TICKER_STATUS_FAILURE;
    5b9e:	2001      	movs	r0, #1
	if (count_op) {
    5ba0:	2d00      	cmp	r5, #0
    5ba2:	d10f      	bne.n	5bc4 <ticker_init+0x50>
	instance->caller_id_get_cb = caller_id_get_cb;
    5ba4:	302b      	adds	r0, #43	; 0x2b
    5ba6:	4370      	muls	r0, r6
    5ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5baa:	1820      	adds	r0, r4, r0
    5bac:	6202      	str	r2, [r0, #32]
	instance->sched_cb = sched_cb;
    5bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	instance->ticker_id_head = TICKER_NULL;
    5bb0:	7743      	strb	r3, [r0, #29]
	instance->sched_cb = sched_cb;
    5bb2:	6242      	str	r2, [r0, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    5bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	instance->ticker_id_slot_previous = TICKER_NULL;
    5bb6:	7703      	strb	r3, [r0, #28]
	instance->trigger_set_cb = trigger_set_cb;
    5bb8:	6282      	str	r2, [r0, #40]	; 0x28
	instance->ticks_slot_previous = 0;
    5bba:	6185      	str	r5, [r0, #24]
	instance->ticks_current = 0;
    5bbc:	6145      	str	r5, [r0, #20]
	instance->ticks_elapsed_first = 0;
    5bbe:	7285      	strb	r5, [r0, #10]
	instance->ticks_elapsed_last = 0;
    5bc0:	72c5      	strb	r5, [r0, #11]
	return TICKER_STATUS_SUCCESS;
    5bc2:	0028      	movs	r0, r5
}
    5bc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    5bc6:	9801      	ldr	r0, [sp, #4]
    5bc8:	00da      	lsls	r2, r3, #3
    5bca:	1882      	adds	r2, r0, r2
		user_op_ += users[count_user].count_user_op;
    5bcc:	0038      	movs	r0, r7
		users[count_user].user_op = user_op_;
    5bce:	6051      	str	r1, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    5bd0:	7812      	ldrb	r2, [r2, #0]
    5bd2:	4350      	muls	r0, r2
    5bd4:	4684      	mov	ip, r0
		count_op -= users[count_user].count_user_op;
    5bd6:	1aad      	subs	r5, r5, r2
		user_op_ += users[count_user].count_user_op;
    5bd8:	4461      	add	r1, ip
		count_op -= users[count_user].count_user_op;
    5bda:	b2ed      	uxtb	r5, r5
    5bdc:	e7db      	b.n	5b96 <ticker_init+0x22>
    5bde:	46c0      	nop			; (mov r8, r8)
    5be0:	20000230 	.word	0x20000230

00005be4 <ticker_trigger>:
	instance = &_instance[instance_index];
    5be4:	232c      	movs	r3, #44	; 0x2c
    5be6:	4358      	muls	r0, r3
    5be8:	4b05      	ldr	r3, [pc, #20]	; (5c00 <ticker_trigger+0x1c>)
{
    5bea:	b510      	push	{r4, lr}
	instance = &_instance[instance_index];
    5bec:	181b      	adds	r3, r3, r0
	if (instance->sched_cb) {
    5bee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5bf0:	2c00      	cmp	r4, #0
    5bf2:	d003      	beq.n	5bfc <ticker_trigger+0x18>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    5bf4:	2201      	movs	r2, #1
    5bf6:	2103      	movs	r1, #3
    5bf8:	2002      	movs	r0, #2
    5bfa:	47a0      	blx	r4
}
    5bfc:	bd10      	pop	{r4, pc}
    5bfe:	46c0      	nop			; (mov r8, r8)
    5c00:	20000230 	.word	0x20000230

00005c04 <ticker_start>:
{
    5c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    5c06:	272c      	movs	r7, #44	; 0x2c
    5c08:	4378      	muls	r0, r7
    5c0a:	4f1e      	ldr	r7, [pc, #120]	; (5c84 <ticker_start+0x80>)
{
    5c0c:	ac0b      	add	r4, sp, #44	; 0x2c
	user = &instance->user[user_id];
    5c0e:	183f      	adds	r7, r7, r0
{
    5c10:	8824      	ldrh	r4, [r4, #0]
	user = &instance->user[user_id];
    5c12:	6878      	ldr	r0, [r7, #4]
    5c14:	00cd      	lsls	r5, r1, #3
    5c16:	1945      	adds	r5, r0, r5
{
    5c18:	9401      	str	r4, [sp, #4]
	last = user->last + 1;
    5c1a:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    5c1c:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    5c1e:	1c66      	adds	r6, r4, #1
    5c20:	b2f6      	uxtb	r6, r6
		last = 0;
    5c22:	4286      	cmp	r6, r0
    5c24:	4180      	sbcs	r0, r0
    5c26:	4006      	ands	r6, r0
	if (last == user->first) {
    5c28:	7868      	ldrb	r0, [r5, #1]
    5c2a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    5c2c:	2001      	movs	r0, #1
	if (last == user->first) {
    5c2e:	45b4      	cmp	ip, r6
    5c30:	d026      	beq.n	5c80 <ticker_start+0x7c>
	user_op = &user->user_op[user->last];
    5c32:	302f      	adds	r0, #47	; 0x2f
    5c34:	4344      	muls	r4, r0
    5c36:	6868      	ldr	r0, [r5, #4]
    5c38:	1904      	adds	r4, r0, r4
	user_op->params.start.ticks_at_start = ticks_anchor;
    5c3a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    5c3c:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_START;
    5c3e:	2003      	movs	r0, #3
	user_op->params.start.ticks_first = ticks_first;
    5c40:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    5c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->id = ticker_id;
    5c44:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_periodic = ticks_periodic;
    5c46:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    5c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_START;
    5c4a:	7020      	strb	r0, [r4, #0]
	user_op->params.start.remainder_periodic = remainder_periodic;
    5c4c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    5c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5c50:	0008      	movs	r0, r1
	user_op->params.start.ticks_slot = ticks_slot;
    5c52:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    5c54:	466b      	mov	r3, sp
    5c56:	889b      	ldrh	r3, [r3, #4]
    5c58:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    5c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c5c:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    5c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5c60:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    5c62:	2302      	movs	r3, #2
    5c64:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    5c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c68:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    5c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    5c6e:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5c70:	6a3b      	ldr	r3, [r7, #32]
    5c72:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    5c74:	4798      	blx	r3
    5c76:	003b      	movs	r3, r7
    5c78:	2200      	movs	r2, #0
    5c7a:	2104      	movs	r1, #4
    5c7c:	47a8      	blx	r5
	return user_op->status;
    5c7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    5c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5c82:	46c0      	nop			; (mov r8, r8)
    5c84:	20000230 	.word	0x20000230

00005c88 <ticker_update>:
{
    5c88:	b5f0      	push	{r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    5c8a:	262c      	movs	r6, #44	; 0x2c
{
    5c8c:	b087      	sub	sp, #28
    5c8e:	469c      	mov	ip, r3
    5c90:	ab0c      	add	r3, sp, #48	; 0x30
    5c92:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    5c94:	4370      	muls	r0, r6
{
    5c96:	9301      	str	r3, [sp, #4]
    5c98:	ab0d      	add	r3, sp, #52	; 0x34
    5c9a:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    5c9c:	4e21      	ldr	r6, [pc, #132]	; (5d24 <ticker_update+0x9c>)
{
    5c9e:	9302      	str	r3, [sp, #8]
    5ca0:	ab0e      	add	r3, sp, #56	; 0x38
    5ca2:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    5ca4:	1836      	adds	r6, r6, r0
{
    5ca6:	9303      	str	r3, [sp, #12]
    5ca8:	ab0f      	add	r3, sp, #60	; 0x3c
    5caa:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    5cac:	00cd      	lsls	r5, r1, #3
{
    5cae:	9304      	str	r3, [sp, #16]
    5cb0:	ab10      	add	r3, sp, #64	; 0x40
    5cb2:	781b      	ldrb	r3, [r3, #0]
    5cb4:	9305      	str	r3, [sp, #20]
	user = &instance->user[user_id];
    5cb6:	6873      	ldr	r3, [r6, #4]
    5cb8:	195d      	adds	r5, r3, r5
	last = user->last + 1;
    5cba:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    5cbc:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    5cbe:	1c63      	adds	r3, r4, #1
    5cc0:	b2db      	uxtb	r3, r3
		last = 0;
    5cc2:	4283      	cmp	r3, r0
    5cc4:	4180      	sbcs	r0, r0
	if (last == user->first) {
    5cc6:	786f      	ldrb	r7, [r5, #1]
		last = 0;
    5cc8:	4003      	ands	r3, r0
		return TICKER_STATUS_FAILURE;
    5cca:	2001      	movs	r0, #1
	if (last == user->first) {
    5ccc:	429f      	cmp	r7, r3
    5cce:	d027      	beq.n	5d20 <ticker_update+0x98>
	user_op = &user->user_op[user->last];
    5cd0:	302f      	adds	r0, #47	; 0x2f
    5cd2:	4344      	muls	r4, r0
    5cd4:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    5cd6:	2704      	movs	r7, #4
	user_op = &user->user_op[user->last];
    5cd8:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    5cda:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    5cdc:	4662      	mov	r2, ip
    5cde:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    5ce0:	466a      	mov	r2, sp
    5ce2:	8892      	ldrh	r2, [r2, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    5ce4:	7027      	strb	r7, [r4, #0]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    5ce6:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    5ce8:	466a      	mov	r2, sp
    5cea:	8912      	ldrh	r2, [r2, #8]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5cec:	0008      	movs	r0, r1
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    5cee:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    5cf0:	466a      	mov	r2, sp
    5cf2:	8992      	ldrh	r2, [r2, #12]
    5cf4:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    5cf6:	466a      	mov	r2, sp
    5cf8:	8a12      	ldrh	r2, [r2, #16]
    5cfa:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    5cfc:	466a      	mov	r2, sp
    5cfe:	7d12      	ldrb	r2, [r2, #20]
    5d00:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    5d02:	2202      	movs	r2, #2
    5d04:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    5d06:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5d08:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    5d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5d0c:	62e2      	str	r2, [r4, #44]	; 0x2c
	user->last = last;
    5d0e:	70eb      	strb	r3, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5d10:	6a33      	ldr	r3, [r6, #32]
    5d12:	6a75      	ldr	r5, [r6, #36]	; 0x24
    5d14:	4798      	blx	r3
    5d16:	0033      	movs	r3, r6
    5d18:	2200      	movs	r2, #0
    5d1a:	0039      	movs	r1, r7
    5d1c:	47a8      	blx	r5
	return user_op->status;
    5d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    5d20:	b007      	add	sp, #28
    5d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d24:	20000230 	.word	0x20000230

00005d28 <ticker_stop>:
{
    5d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    5d2a:	272c      	movs	r7, #44	; 0x2c
    5d2c:	4378      	muls	r0, r7
    5d2e:	4f14      	ldr	r7, [pc, #80]	; (5d80 <ticker_stop+0x58>)
    5d30:	00cd      	lsls	r5, r1, #3
    5d32:	183f      	adds	r7, r7, r0
    5d34:	6878      	ldr	r0, [r7, #4]
    5d36:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    5d38:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    5d3a:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    5d3c:	1c46      	adds	r6, r0, #1
    5d3e:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    5d40:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    5d42:	b2f6      	uxtb	r6, r6
		last = 0;
    5d44:	4286      	cmp	r6, r0
    5d46:	4180      	sbcs	r0, r0
    5d48:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    5d4a:	2001      	movs	r0, #1
	if (last == user->first) {
    5d4c:	42b4      	cmp	r4, r6
    5d4e:	d016      	beq.n	5d7e <ticker_stop+0x56>
	user_op = &user->user_op[user->last];
    5d50:	4660      	mov	r0, ip
    5d52:	2430      	movs	r4, #48	; 0x30
    5d54:	4344      	muls	r4, r0
    5d56:	6868      	ldr	r0, [r5, #4]
    5d58:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    5d5a:	7062      	strb	r2, [r4, #1]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    5d5c:	2005      	movs	r0, #5
	user_op->status = TICKER_STATUS_BUSY;
    5d5e:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    5d60:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    5d62:	9b06      	ldr	r3, [sp, #24]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    5d64:	7020      	strb	r0, [r4, #0]
	user_op->status = TICKER_STATUS_BUSY;
    5d66:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    5d68:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    5d6a:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5d6c:	0008      	movs	r0, r1
    5d6e:	6a3b      	ldr	r3, [r7, #32]
    5d70:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    5d72:	4798      	blx	r3
    5d74:	003b      	movs	r3, r7
    5d76:	2200      	movs	r2, #0
    5d78:	2104      	movs	r1, #4
    5d7a:	47a8      	blx	r5
	return user_op->status;
    5d7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    5d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d80:	20000230 	.word	0x20000230

00005d84 <ticker_next_slot_get>:
{
    5d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    5d86:	272c      	movs	r7, #44	; 0x2c
    5d88:	4378      	muls	r0, r7
    5d8a:	4f18      	ldr	r7, [pc, #96]	; (5dec <ticker_next_slot_get+0x68>)
    5d8c:	00cd      	lsls	r5, r1, #3
    5d8e:	183f      	adds	r7, r7, r0
    5d90:	6878      	ldr	r0, [r7, #4]
{
    5d92:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    5d94:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    5d96:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    5d98:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    5d9a:	1c46      	adds	r6, r0, #1
    5d9c:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    5d9e:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    5da0:	b2f6      	uxtb	r6, r6
		last = 0;
    5da2:	4286      	cmp	r6, r0
    5da4:	4180      	sbcs	r0, r0
    5da6:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    5da8:	2001      	movs	r0, #1
	if (last == user->first) {
    5daa:	42b4      	cmp	r4, r6
    5dac:	d01c      	beq.n	5de8 <ticker_next_slot_get+0x64>
	user_op = &user->user_op[user->last];
    5dae:	4660      	mov	r0, ip
    5db0:	2430      	movs	r4, #48	; 0x30
	user_op->id = TICKER_NULL;
    5db2:	23ff      	movs	r3, #255	; 0xff
	user_op = &user->user_op[user->last];
    5db4:	4344      	muls	r4, r0
    5db6:	6868      	ldr	r0, [r5, #4]
    5db8:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    5dba:	2002      	movs	r0, #2
	user_op->id = TICKER_NULL;
    5dbc:	7063      	strb	r3, [r4, #1]
	user_op->params.slot_get.ticks_current = ticks_current;
    5dbe:	9b01      	ldr	r3, [sp, #4]
	user_op->params.slot_get.ticker_id = ticker_id;
    5dc0:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    5dc2:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    5dc4:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    5dc6:	7020      	strb	r0, [r4, #0]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    5dc8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    5dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
    5dcc:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    5dce:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    5dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5dd2:	0008      	movs	r0, r1
	user_op->op_context = op_context;
    5dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    5dd6:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5dd8:	6a3b      	ldr	r3, [r7, #32]
    5dda:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    5ddc:	4798      	blx	r3
    5dde:	003b      	movs	r3, r7
    5de0:	2200      	movs	r2, #0
    5de2:	2104      	movs	r1, #4
    5de4:	47a8      	blx	r5
	return user_op->status;
    5de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    5de8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5dea:	46c0      	nop			; (mov r8, r8)
    5dec:	20000230 	.word	0x20000230

00005df0 <ticker_job_idle_get>:
{
    5df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    5df2:	272c      	movs	r7, #44	; 0x2c
    5df4:	4378      	muls	r0, r7
    5df6:	4f15      	ldr	r7, [pc, #84]	; (5e4c <ticker_job_idle_get+0x5c>)
    5df8:	00cd      	lsls	r5, r1, #3
    5dfa:	183f      	adds	r7, r7, r0
    5dfc:	6878      	ldr	r0, [r7, #4]
{
    5dfe:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    5e00:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    5e02:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    5e04:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    5e06:	1c46      	adds	r6, r0, #1
    5e08:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    5e0a:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    5e0c:	b2f6      	uxtb	r6, r6
		last = 0;
    5e0e:	4286      	cmp	r6, r0
    5e10:	4180      	sbcs	r0, r0
    5e12:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    5e14:	2001      	movs	r0, #1
	if (last == user->first) {
    5e16:	42b4      	cmp	r4, r6
    5e18:	d016      	beq.n	5e48 <ticker_job_idle_get+0x58>
	user_op = &user->user_op[user->last];
    5e1a:	4663      	mov	r3, ip
    5e1c:	2430      	movs	r4, #48	; 0x30
    5e1e:	435c      	muls	r4, r3
    5e20:	686b      	ldr	r3, [r5, #4]
    5e22:	191c      	adds	r4, r3, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    5e24:	7020      	strb	r0, [r4, #0]
	user_op->op_context = op_context;
    5e26:	9b01      	ldr	r3, [sp, #4]
	user_op->id = TICKER_NULL;
    5e28:	30fe      	adds	r0, #254	; 0xfe
    5e2a:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    5e2c:	38fd      	subs	r0, #253	; 0xfd
    5e2e:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    5e30:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    5e32:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    5e34:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5e36:	0008      	movs	r0, r1
    5e38:	6a3b      	ldr	r3, [r7, #32]
    5e3a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    5e3c:	4798      	blx	r3
    5e3e:	003b      	movs	r3, r7
    5e40:	2200      	movs	r2, #0
    5e42:	2104      	movs	r1, #4
    5e44:	47a8      	blx	r5
	return user_op->status;
    5e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    5e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	20000230 	.word	0x20000230

00005e50 <ticker_job_sched>:
{
    5e50:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5e52:	242c      	movs	r4, #44	; 0x2c
    5e54:	4360      	muls	r0, r4
    5e56:	4c05      	ldr	r4, [pc, #20]	; (5e6c <ticker_job_sched+0x1c>)
    5e58:	1824      	adds	r4, r4, r0
    5e5a:	6a23      	ldr	r3, [r4, #32]
    5e5c:	0008      	movs	r0, r1
    5e5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    5e60:	4798      	blx	r3
    5e62:	0023      	movs	r3, r4
    5e64:	2200      	movs	r2, #0
    5e66:	2104      	movs	r1, #4
    5e68:	47a8      	blx	r5
}
    5e6a:	bd70      	pop	{r4, r5, r6, pc}
    5e6c:	20000230 	.word	0x20000230

00005e70 <ticker_ticks_now_get>:
{
    5e70:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    5e72:	f005 f93f 	bl	b0f4 <cntr_cnt_get>
}
    5e76:	bd10      	pop	{r4, pc}

00005e78 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5e78:	1a40      	subs	r0, r0, r1
    5e7a:	0200      	lsls	r0, r0, #8
    5e7c:	0a00      	lsrs	r0, r0, #8
}
    5e7e:	4770      	bx	lr

00005e80 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    5e80:	0002      	movs	r2, r0
    5e82:	b510      	push	{r4, lr}
    5e84:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
    5e86:	2300      	movs	r3, #0
	if (addr_type > 1) {
    5e88:	2a01      	cmp	r2, #1
    5e8a:	d80b      	bhi.n	5ea4 <ll_addr_get+0x24>
    5e8c:	4c06      	ldr	r4, [pc, #24]	; (5ea8 <ll_addr_get+0x28>)
	}

	if (addr_type) {
    5e8e:	429a      	cmp	r2, r3
    5e90:	d100      	bne.n	5e94 <ll_addr_get+0x14>
    5e92:	4c06      	ldr	r4, [pc, #24]	; (5eac <ll_addr_get+0x2c>)

	if (bdaddr) {
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    5e94:	0023      	movs	r3, r4
	if (bdaddr) {
    5e96:	2800      	cmp	r0, #0
    5e98:	d004      	beq.n	5ea4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    5e9a:	2206      	movs	r2, #6
    5e9c:	0021      	movs	r1, r4
    5e9e:	f7fb ff45 	bl	1d2c <memcpy>
	return pub_addr;
    5ea2:	0023      	movs	r3, r4
}
    5ea4:	0018      	movs	r0, r3
    5ea6:	bd10      	pop	{r4, pc}
    5ea8:	2000028e 	.word	0x2000028e
    5eac:	20000288 	.word	0x20000288

00005eb0 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    5eb0:	b570      	push	{r4, r5, r6, lr}
    5eb2:	0006      	movs	r6, r0
    5eb4:	000d      	movs	r5, r1
	if (ll_adv_is_enabled() ||
    5eb6:	f004 fa65 	bl	a384 <ll_adv_is_enabled>
    5eba:	1e04      	subs	r4, r0, #0
    5ebc:	d002      	beq.n	5ec4 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    5ebe:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    5ec0:	0020      	movs	r0, r4
    5ec2:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    5ec4:	f004 fa72 	bl	a3ac <ll_scan_is_enabled>
    5ec8:	2206      	movs	r2, #6
	if (ll_adv_is_enabled() ||
    5eca:	4210      	tst	r0, r2
    5ecc:	d1f7      	bne.n	5ebe <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    5ece:	0029      	movs	r1, r5
    5ed0:	4803      	ldr	r0, [pc, #12]	; (5ee0 <ll_addr_set+0x30>)
	if (addr_type) {
    5ed2:	2e00      	cmp	r6, #0
    5ed4:	d100      	bne.n	5ed8 <ll_addr_set+0x28>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    5ed6:	4803      	ldr	r0, [pc, #12]	; (5ee4 <ll_addr_set+0x34>)
    5ed8:	f7fb ff28 	bl	1d2c <memcpy>
    5edc:	e7f0      	b.n	5ec0 <ll_addr_set+0x10>
    5ede:	46c0      	nop			; (mov r8, r8)
    5ee0:	2000028e 	.word	0x2000028e
    5ee4:	20000288 	.word	0x20000288

00005ee8 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    5ee8:	2300      	movs	r3, #0
    5eea:	7003      	strb	r3, [r0, #0]
	*max = 0;
    5eec:	700b      	strb	r3, [r1, #0]
}
    5eee:	4770      	bx	lr

00005ef0 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    5ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    5ef2:	2701      	movs	r7, #1
    5ef4:	0006      	movs	r6, r0
    5ef6:	000c      	movs	r4, r1
    5ef8:	427f      	negs	r7, r7
	while (len) {
    5efa:	2c00      	cmp	r4, #0
    5efc:	d101      	bne.n	5f02 <bt_rand+0x12>
			cpu_sleep();
		}
	}

	return 0;
}
    5efe:	2000      	movs	r0, #0
    5f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f02:	4d09      	ldr	r5, [pc, #36]	; (5f28 <bt_rand+0x38>)
    5f04:	0039      	movs	r1, r7
    5f06:	0028      	movs	r0, r5
    5f08:	f006 f904 	bl	c114 <_impl_k_mutex_lock>
		len = rand_get(len, buf);
    5f0c:	0020      	movs	r0, r4
    5f0e:	0031      	movs	r1, r6
    5f10:	f005 f9d2 	bl	b2b8 <rand_get>
    5f14:	0004      	movs	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    5f16:	0028      	movs	r0, r5
    5f18:	f006 f95e 	bl	c1d8 <_impl_k_mutex_unlock>
		if (len) {
    5f1c:	2c00      	cmp	r4, #0
    5f1e:	d0ee      	beq.n	5efe <bt_rand+0xe>
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    5f20:	bf20      	wfe
	__SEV();
    5f22:	bf40      	sev
	__WFE();
    5f24:	bf20      	wfe
    5f26:	e7e8      	b.n	5efa <bt_rand+0xa>
    5f28:	20002590 	.word	0x20002590

00005f2c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    5f2c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    5f2e:	4802      	ldr	r0, [pc, #8]	; (5f38 <_hci_driver_init+0xc>)
    5f30:	f7fe ffd2 	bl	4ed8 <bt_hci_driver_register>

	return 0;
}
    5f34:	2000      	movs	r0, #0
    5f36:	bd10      	pop	{r4, pc}
    5f38:	0000da20 	.word	0x0000da20

00005f3c <hci_driver_send>:
{
    5f3c:	b510      	push	{r4, lr}
	if (!buf->len) {
    5f3e:	8983      	ldrh	r3, [r0, #12]
{
    5f40:	0004      	movs	r4, r0
	if (!buf->len) {
    5f42:	2b00      	cmp	r3, #0
    5f44:	d00d      	beq.n	5f62 <hci_driver_send+0x26>
	switch (type) {
    5f46:	7d03      	ldrb	r3, [r0, #20]
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d10a      	bne.n	5f62 <hci_driver_send+0x26>
	evt = hci_cmd_handle(buf);
    5f4c:	f000 f978 	bl	6240 <hci_cmd_handle>
	if (evt) {
    5f50:	2800      	cmp	r0, #0
    5f52:	d001      	beq.n	5f58 <hci_driver_send+0x1c>
		bt_recv_prio(evt);
    5f54:	f7fe ff7c 	bl	4e50 <bt_recv_prio>
		net_buf_unref(buf);
    5f58:	0020      	movs	r0, r4
    5f5a:	f005 fed5 	bl	bd08 <net_buf_unref>
	return err;
    5f5e:	2000      	movs	r0, #0
}
    5f60:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5f62:	2016      	movs	r0, #22
    5f64:	4240      	negs	r0, r0
    5f66:	e7fb      	b.n	5f60 <hci_driver_send+0x24>

00005f68 <recv_thread>:
{
    5f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    5f6a:	2501      	movs	r5, #1
    5f6c:	426d      	negs	r5, r5
    5f6e:	0029      	movs	r1, r5
    5f70:	4819      	ldr	r0, [pc, #100]	; (5fd8 <recv_thread+0x70>)
    5f72:	f006 f9fb 	bl	c36c <k_queue_get>
    5f76:	1e04      	subs	r4, r0, #0
		if (node_rx && !buf) {
    5f78:	d025      	beq.n	5fc6 <recv_thread+0x5e>
	s8_t class = hci_get_class(node_rx);
    5f7a:	f000 fd03 	bl	6984 <hci_get_class>
	switch (class) {
    5f7e:	b2c3      	uxtb	r3, r0
    5f80:	9401      	str	r4, [sp, #4]
    5f82:	2b02      	cmp	r3, #2
    5f84:	d822      	bhi.n	5fcc <recv_thread+0x64>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    5f86:	2100      	movs	r1, #0
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    5f88:	2801      	cmp	r0, #1
    5f8a:	d001      	beq.n	5f90 <recv_thread+0x28>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5f8c:	0029      	movs	r1, r5
    5f8e:	2001      	movs	r0, #1
    5f90:	f7fe ffb8 	bl	4f04 <bt_buf_get_rx>
    5f94:	1e04      	subs	r4, r0, #0
		if (buf) {
    5f96:	d003      	beq.n	5fa0 <recv_thread+0x38>
			hci_evt_encode(node_rx, buf);
    5f98:	0001      	movs	r1, r0
    5f9a:	9801      	ldr	r0, [sp, #4]
    5f9c:	f000 fc1e 	bl	67dc <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    5fa0:	9b01      	ldr	r3, [sp, #4]
    5fa2:	2100      	movs	r1, #0
    5fa4:	88d8      	ldrh	r0, [r3, #6]
    5fa6:	f004 facf 	bl	a548 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    5faa:	2200      	movs	r2, #0
    5fac:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    5fae:	a801      	add	r0, sp, #4
	node_rx->hdr.onion.next = 0;
    5fb0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    5fb2:	f004 fa65 	bl	a480 <ll_rx_mem_release>
		if (buf) {
    5fb6:	2c00      	cmp	r4, #0
    5fb8:	d005      	beq.n	5fc6 <recv_thread+0x5e>
			if (buf->len) {
    5fba:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    5fbc:	0020      	movs	r0, r4
			if (buf->len) {
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d007      	beq.n	5fd2 <recv_thread+0x6a>
				bt_recv(buf);
    5fc2:	f7fe fe97 	bl	4cf4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    5fc6:	f006 fb6f 	bl	c6a8 <_impl_k_yield>
    5fca:	e7d0      	b.n	5f6e <recv_thread+0x6>
		LL_ASSERT(0);
    5fcc:	b662      	cpsie	i
    5fce:	2004      	movs	r0, #4
    5fd0:	df02      	svc	2
				net_buf_unref(buf);
    5fd2:	f005 fe99 	bl	bd08 <net_buf_unref>
    5fd6:	e7f6      	b.n	5fc6 <recv_thread+0x5e>
    5fd8:	200025a4 	.word	0x200025a4

00005fdc <prio_recv_thread>:
{
    5fdc:	b513      	push	{r0, r1, r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5fde:	2401      	movs	r4, #1
    5fe0:	4264      	negs	r4, r4
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    5fe2:	466b      	mov	r3, sp
    5fe4:	a801      	add	r0, sp, #4
    5fe6:	1c99      	adds	r1, r3, #2
    5fe8:	f004 fa10 	bl	a40c <ll_rx_get>
    5fec:	2800      	cmp	r0, #0
    5fee:	d1f8      	bne.n	5fe2 <prio_recv_thread+0x6>
		if (node_rx) {
    5ff0:	9b01      	ldr	r3, [sp, #4]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d006      	beq.n	6004 <prio_recv_thread+0x28>
			ll_rx_dequeue();
    5ff6:	f004 fc85 	bl	a904 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    5ffa:	9901      	ldr	r1, [sp, #4]
    5ffc:	4804      	ldr	r0, [pc, #16]	; (6010 <prio_recv_thread+0x34>)
    5ffe:	f006 f98e 	bl	c31e <k_queue_append>
    6002:	e7ee      	b.n	5fe2 <prio_recv_thread+0x6>
    6004:	0021      	movs	r1, r4
    6006:	4803      	ldr	r0, [pc, #12]	; (6014 <prio_recv_thread+0x38>)
    6008:	f006 fc4c 	bl	c8a4 <_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    600c:	e7e9      	b.n	5fe2 <prio_recv_thread+0x6>
    600e:	46c0      	nop			; (mov r8, r8)
    6010:	200025a4 	.word	0x200025a4
    6014:	20002578 	.word	0x20002578

00006018 <hci_driver_open>:
{
    6018:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    601a:	4814      	ldr	r0, [pc, #80]	; (606c <hci_driver_open+0x54>)
{
    601c:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    601e:	f004 fd15 	bl	aa4c <ll_init>
    6022:	1e04      	subs	r4, r0, #0
	if (err) {
    6024:	d11f      	bne.n	6066 <hci_driver_open+0x4e>
	hci_init(NULL);
    6026:	f000 fccd 	bl	69c4 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    602a:	230a      	movs	r3, #10
    602c:	22e0      	movs	r2, #224	; 0xe0
    602e:	425b      	negs	r3, r3
    6030:	9303      	str	r3, [sp, #12]
    6032:	0052      	lsls	r2, r2, #1
    6034:	4b0e      	ldr	r3, [pc, #56]	; (6070 <hci_driver_open+0x58>)
    6036:	490f      	ldr	r1, [pc, #60]	; (6074 <hci_driver_open+0x5c>)
    6038:	9405      	str	r4, [sp, #20]
    603a:	9404      	str	r4, [sp, #16]
    603c:	9402      	str	r4, [sp, #8]
    603e:	9401      	str	r4, [sp, #4]
    6040:	9400      	str	r4, [sp, #0]
    6042:	480d      	ldr	r0, [pc, #52]	; (6078 <hci_driver_open+0x60>)
    6044:	f006 fdfe 	bl	cc44 <_impl_k_thread_create>
    6048:	2308      	movs	r3, #8
    604a:	2280      	movs	r2, #128	; 0x80
    604c:	425b      	negs	r3, r3
    604e:	9303      	str	r3, [sp, #12]
    6050:	9405      	str	r4, [sp, #20]
    6052:	9404      	str	r4, [sp, #16]
    6054:	9402      	str	r4, [sp, #8]
    6056:	9401      	str	r4, [sp, #4]
    6058:	9400      	str	r4, [sp, #0]
    605a:	4b08      	ldr	r3, [pc, #32]	; (607c <hci_driver_open+0x64>)
    605c:	00d2      	lsls	r2, r2, #3
    605e:	4908      	ldr	r1, [pc, #32]	; (6080 <hci_driver_open+0x68>)
    6060:	4808      	ldr	r0, [pc, #32]	; (6084 <hci_driver_open+0x6c>)
    6062:	f006 fdef 	bl	cc44 <_impl_k_thread_create>
}
    6066:	0020      	movs	r0, r4
    6068:	b006      	add	sp, #24
    606a:	bd10      	pop	{r4, pc}
    606c:	20002578 	.word	0x20002578
    6070:	00005fdd 	.word	0x00005fdd
    6074:	20001058 	.word	0x20001058
    6078:	20000d78 	.word	0x20000d78
    607c:	00005f69 	.word	0x00005f69
    6080:	20001218 	.word	0x20001218
    6084:	20000d18 	.word	0x20000d18

00006088 <sys_put_le32>:
	dst[1] = val >> 8;
    6088:	0a03      	lsrs	r3, r0, #8
	dst[0] = val;
    608a:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    608c:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    608e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    6090:	0a00      	lsrs	r0, r0, #8
    6092:	704b      	strb	r3, [r1, #1]
    6094:	70c8      	strb	r0, [r1, #3]
}
    6096:	4770      	bx	lr

00006098 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    6098:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    609a:	3008      	adds	r0, #8
{
    609c:	000d      	movs	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    609e:	2102      	movs	r1, #2
{
    60a0:	0014      	movs	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    60a2:	f005 fe67 	bl	bd74 <net_buf_simple_add>
	hdr->evt = evt;
    60a6:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    60a8:	7044      	strb	r4, [r0, #1]
}
    60aa:	bd70      	pop	{r4, r5, r6, pc}

000060ac <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    60ac:	b570      	push	{r4, r5, r6, lr}
    60ae:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    60b0:	2001      	movs	r0, #1
{
    60b2:	000d      	movs	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    60b4:	4240      	negs	r0, r0
    60b6:	f7fe ff35 	bl	4f24 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    60ba:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    60bc:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    60be:	b2d2      	uxtb	r2, r2
    60c0:	210e      	movs	r1, #14
    60c2:	f7ff ffe9 	bl	6098 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    60c6:	6820      	ldr	r0, [r4, #0]
    60c8:	2103      	movs	r1, #3
    60ca:	3008      	adds	r0, #8
    60cc:	f005 fe52 	bl	bd74 <net_buf_simple_add>
	cc->ncmd = 1;
    60d0:	2301      	movs	r3, #1
    60d2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    60d4:	4b05      	ldr	r3, [pc, #20]	; (60ec <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    60d6:	0029      	movs	r1, r5
	cc->opcode = sys_cpu_to_le16(_opcode);
    60d8:	781a      	ldrb	r2, [r3, #0]
    60da:	785b      	ldrb	r3, [r3, #1]
    60dc:	7042      	strb	r2, [r0, #1]
    60de:	7083      	strb	r3, [r0, #2]
	return net_buf_add(*buf, plen);
    60e0:	6820      	ldr	r0, [r4, #0]
    60e2:	3008      	adds	r0, #8
    60e4:	f005 fe46 	bl	bd74 <net_buf_simple_add>
}
    60e8:	bd70      	pop	{r4, r5, r6, pc}
    60ea:	46c0      	nop			; (mov r8, r8)
    60ec:	20000294 	.word	0x20000294

000060f0 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    60f0:	b570      	push	{r4, r5, r6, lr}
    60f2:	0004      	movs	r4, r0
    60f4:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    60f6:	3201      	adds	r2, #1
{
    60f8:	000e      	movs	r6, r1
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    60fa:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    60fc:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    60fe:	213e      	movs	r1, #62	; 0x3e
    6100:	f7ff ffca 	bl	6098 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    6104:	2101      	movs	r1, #1
    6106:	0020      	movs	r0, r4
    6108:	f005 fe34 	bl	bd74 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    610c:	0029      	movs	r1, r5
	me->subevent = subevt;
    610e:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    6110:	0020      	movs	r0, r4
    6112:	f005 fe2f 	bl	bd74 <net_buf_simple_add>
}
    6116:	bd70      	pop	{r4, r5, r6, pc}

00006118 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    6118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    611a:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    611c:	4a10      	ldr	r2, [pc, #64]	; (6160 <le_remote_feat_complete+0x48>)
{
    611e:	0007      	movs	r7, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6120:	6852      	ldr	r2, [r2, #4]
{
    6122:	000e      	movs	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6124:	0092      	lsls	r2, r2, #2
    6126:	d514      	bpl.n	6152 <le_remote_feat_complete+0x3a>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    6128:	2508      	movs	r5, #8
    612a:	4a0e      	ldr	r2, [pc, #56]	; (6164 <le_remote_feat_complete+0x4c>)
    612c:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    612e:	422a      	tst	r2, r5
    6130:	d00f      	beq.n	6152 <le_remote_feat_complete+0x3a>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    6132:	220b      	movs	r2, #11
    6134:	2104      	movs	r1, #4
    6136:	0018      	movs	r0, r3
    6138:	f7ff ffda 	bl	60f0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    613c:	7044      	strb	r4, [r0, #1]
    613e:	40ec      	lsrs	r4, r5
	sep->status = status;
    6140:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6142:	7084      	strb	r4, [r0, #2]
    6144:	3003      	adds	r0, #3
	if (!status) {
    6146:	2f00      	cmp	r7, #0
    6148:	d104      	bne.n	6154 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->llctrl.feature_rsp.features[0],
    614a:	1d31      	adds	r1, r6, #4
		memcpy(&sep->features[0],
    614c:	002a      	movs	r2, r5
    614e:	f7fb fded 	bl	1d2c <memcpy>
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    6152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6154:	002a      	movs	r2, r5
    6156:	2100      	movs	r1, #0
    6158:	f7fb fe12 	bl	1d80 <memset>
    615c:	e7f9      	b.n	6152 <le_remote_feat_complete+0x3a>
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	20002358 	.word	0x20002358
    6164:	20002360 	.word	0x20002360

00006168 <bt_addr_le_to_str.constprop.42>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    6168:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    616a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    616c:	b08a      	sub	sp, #40	; 0x28
    616e:	0004      	movs	r4, r0
    6170:	000e      	movs	r6, r1
    6172:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    6174:	2b03      	cmp	r3, #3
    6176:	d821      	bhi.n	61bc <bt_addr_le_to_str.constprop.42+0x54>
    6178:	0018      	movs	r0, r3
    617a:	f7fa f807 	bl	18c <__gnu_thumb1_case_uqi>
    617e:	1902      	.short	0x1902
    6180:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    6182:	4911      	ldr	r1, [pc, #68]	; (61c8 <bt_addr_le_to_str.constprop.42+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    6184:	0028      	movs	r0, r5
    6186:	f7fb fd8b 	bl	1ca0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    618a:	7862      	ldrb	r2, [r4, #1]
    618c:	79a3      	ldrb	r3, [r4, #6]
    618e:	9204      	str	r2, [sp, #16]
    6190:	78a2      	ldrb	r2, [r4, #2]
    6192:	9505      	str	r5, [sp, #20]
    6194:	9203      	str	r2, [sp, #12]
    6196:	78e2      	ldrb	r2, [r4, #3]
    6198:	211b      	movs	r1, #27
    619a:	9202      	str	r2, [sp, #8]
    619c:	7922      	ldrb	r2, [r4, #4]
    619e:	0030      	movs	r0, r6
    61a0:	9201      	str	r2, [sp, #4]
    61a2:	7962      	ldrb	r2, [r4, #5]
    61a4:	9200      	str	r2, [sp, #0]
    61a6:	4a09      	ldr	r2, [pc, #36]	; (61cc <bt_addr_le_to_str.constprop.42+0x64>)
    61a8:	f7fc ff6a 	bl	3080 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    61ac:	b00a      	add	sp, #40	; 0x28
    61ae:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    61b0:	4907      	ldr	r1, [pc, #28]	; (61d0 <bt_addr_le_to_str.constprop.42+0x68>)
    61b2:	e7e7      	b.n	6184 <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "public id");
    61b4:	4907      	ldr	r1, [pc, #28]	; (61d4 <bt_addr_le_to_str.constprop.42+0x6c>)
    61b6:	e7e5      	b.n	6184 <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "random id");
    61b8:	4907      	ldr	r1, [pc, #28]	; (61d8 <bt_addr_le_to_str.constprop.42+0x70>)
    61ba:	e7e3      	b.n	6184 <bt_addr_le_to_str.constprop.42+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    61bc:	4a07      	ldr	r2, [pc, #28]	; (61dc <bt_addr_le_to_str.constprop.42+0x74>)
    61be:	210a      	movs	r1, #10
    61c0:	0028      	movs	r0, r5
    61c2:	f7fc ff5d 	bl	3080 <snprintk>
    61c6:	e7e0      	b.n	618a <bt_addr_le_to_str.constprop.42+0x22>
    61c8:	0000da3b 	.word	0x0000da3b
    61cc:	0000da64 	.word	0x0000da64
    61d0:	0000da42 	.word	0x0000da42
    61d4:	0000da49 	.word	0x0000da49
    61d8:	0000da53 	.word	0x0000da53
    61dc:	0000da5d 	.word	0x0000da5d

000061e0 <le_adv_ext_report.isra.37.part.38>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    61e0:	b510      	push	{r4, lr}
		if (!p->ext_hdr_len) {
    61e2:	7883      	ldrb	r3, [r0, #2]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    61e4:	b08a      	sub	sp, #40	; 0x28
		if (!p->ext_hdr_len) {
    61e6:	069b      	lsls	r3, r3, #26
    61e8:	d011      	beq.n	620e <le_adv_ext_report.isra.37.part.38+0x2e>
		if (h->adv_addr) {
    61ea:	78c3      	ldrb	r3, [r0, #3]
    61ec:	07db      	lsls	r3, r3, #31
    61ee:	d50e      	bpl.n	620e <le_adv_ext_report.isra.37.part.38+0x2e>
			addr.type = adv->tx_addr;
    61f0:	7803      	ldrb	r3, [r0, #0]
    61f2:	ac01      	add	r4, sp, #4
    61f4:	065b      	lsls	r3, r3, #25
    61f6:	0fdb      	lsrs	r3, r3, #31
    61f8:	7023      	strb	r3, [r4, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    61fa:	466b      	mov	r3, sp
		ptr = (u8_t *)h + sizeof(*h);
    61fc:	1d01      	adds	r1, r0, #4
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    61fe:	2206      	movs	r2, #6
    6200:	1d58      	adds	r0, r3, #5
    6202:	f7fb fd93 	bl	1d2c <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    6206:	a903      	add	r1, sp, #12
    6208:	0020      	movs	r0, r4
    620a:	f7ff ffad 	bl	6168 <bt_addr_le_to_str.constprop.42>
}
    620e:	b00a      	add	sp, #40	; 0x28
    6210:	bd10      	pop	{r4, pc}

00006212 <sys_get_le64>:
{
    6212:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    6214:	785a      	ldrb	r2, [r3, #1]
    6216:	7800      	ldrb	r0, [r0, #0]
    6218:	0212      	lsls	r2, r2, #8
    621a:	4302      	orrs	r2, r0
    621c:	7898      	ldrb	r0, [r3, #2]
    621e:	7919      	ldrb	r1, [r3, #4]
    6220:	0400      	lsls	r0, r0, #16
    6222:	4302      	orrs	r2, r0
    6224:	78d8      	ldrb	r0, [r3, #3]
    6226:	0600      	lsls	r0, r0, #24
    6228:	4310      	orrs	r0, r2
    622a:	795a      	ldrb	r2, [r3, #5]
    622c:	0212      	lsls	r2, r2, #8
    622e:	430a      	orrs	r2, r1
    6230:	7999      	ldrb	r1, [r3, #6]
    6232:	0409      	lsls	r1, r1, #16
    6234:	430a      	orrs	r2, r1
    6236:	79d9      	ldrb	r1, [r3, #7]
    6238:	0609      	lsls	r1, r1, #24
    623a:	4311      	orrs	r1, r2
}
    623c:	4770      	bx	lr
	...

00006240 <hci_cmd_handle>:
{
    6240:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *evt = NULL;
    6242:	2600      	movs	r6, #0
{
    6244:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    6246:	960d      	str	r6, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    6248:	8981      	ldrh	r1, [r0, #12]
{
    624a:	0005      	movs	r5, r0
	if (cmd->len < sizeof(*chdr)) {
    624c:	2902      	cmp	r1, #2
    624e:	d802      	bhi.n	6256 <hci_cmd_handle+0x16>
		return NULL;
    6250:	2000      	movs	r0, #0
}
    6252:	b019      	add	sp, #100	; 0x64
    6254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    6256:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    6258:	4cc0      	ldr	r4, [pc, #768]	; (655c <hci_cmd_handle+0x31c>)
    625a:	7853      	ldrb	r3, [r2, #1]
    625c:	7810      	ldrb	r0, [r2, #0]
    625e:	021b      	lsls	r3, r3, #8
    6260:	4303      	orrs	r3, r0
    6262:	8023      	strh	r3, [r4, #0]
	if (cmd->len < chdr->param_len) {
    6264:	7893      	ldrb	r3, [r2, #2]
    6266:	428b      	cmp	r3, r1
    6268:	d8f2      	bhi.n	6250 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    626a:	0028      	movs	r0, r5
    626c:	2103      	movs	r1, #3
    626e:	3008      	adds	r0, #8
    6270:	f005 fd91 	bl	bd96 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    6274:	8823      	ldrh	r3, [r4, #0]
    6276:	059c      	lsls	r4, r3, #22
    6278:	0da4      	lsrs	r4, r4, #22
	switch (BT_OGF(_opcode)) {
    627a:	0a9b      	lsrs	r3, r3, #10
    627c:	2b04      	cmp	r3, #4
    627e:	d059      	beq.n	6334 <hci_cmd_handle+0xf4>
    6280:	d807      	bhi.n	6292 <hci_cmd_handle+0x52>
    6282:	2b03      	cmp	r3, #3
    6284:	d019      	beq.n	62ba <hci_cmd_handle+0x7a>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    6286:	2101      	movs	r1, #1
    6288:	a80d      	add	r0, sp, #52	; 0x34
    628a:	f7ff ff0f 	bl	60ac <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    628e:	2301      	movs	r3, #1
    6290:	e0da      	b.n	6448 <hci_cmd_handle+0x208>
	switch (BT_OGF(_opcode)) {
    6292:	2b08      	cmp	r3, #8
    6294:	d100      	bne.n	6298 <hci_cmd_handle+0x58>
    6296:	e0bd      	b.n	6414 <hci_cmd_handle+0x1d4>
    6298:	2b3f      	cmp	r3, #63	; 0x3f
    629a:	d1f4      	bne.n	6286 <hci_cmd_handle+0x46>
	switch (ocf) {
    629c:	1e60      	subs	r0, r4, #1
    629e:	2809      	cmp	r0, #9
    62a0:	d8f1      	bhi.n	6286 <hci_cmd_handle+0x46>
    62a2:	f7f9 ff7d 	bl	1a0 <__gnu_thumb1_case_shi>
    62a6:	01ad      	.short	0x01ad
    62a8:	01d801c3 	.word	0x01d801c3
    62ac:	fff0fff0 	.word	0xfff0fff0
    62b0:	fff001f1 	.word	0xfff001f1
    62b4:	01f601e3 	.word	0x01f601e3
    62b8:	0228      	.short	0x0228
	switch (ocf) {
    62ba:	2c03      	cmp	r4, #3
    62bc:	d013      	beq.n	62e6 <hci_cmd_handle+0xa6>
    62be:	d808      	bhi.n	62d2 <hci_cmd_handle+0x92>
    62c0:	2c01      	cmp	r4, #1
    62c2:	d1e0      	bne.n	6286 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    62c4:	68a8      	ldr	r0, [r5, #8]
    62c6:	f7ff ffa4 	bl	6212 <sys_get_le64>
    62ca:	4ba5      	ldr	r3, [pc, #660]	; (6560 <hci_cmd_handle+0x320>)
    62cc:	6018      	str	r0, [r3, #0]
    62ce:	6059      	str	r1, [r3, #4]
    62d0:	e003      	b.n	62da <hci_cmd_handle+0x9a>
	switch (ocf) {
    62d2:	2c2d      	cmp	r4, #45	; 0x2d
    62d4:	d015      	beq.n	6302 <hci_cmd_handle+0xc2>
    62d6:	2c63      	cmp	r4, #99	; 0x63
    62d8:	d1d5      	bne.n	6286 <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    62da:	2101      	movs	r1, #1
    62dc:	a80d      	add	r0, sp, #52	; 0x34
    62de:	f7ff fee5 	bl	60ac <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    62e2:	7006      	strb	r6, [r0, #0]
    62e4:	e024      	b.n	6330 <hci_cmd_handle+0xf0>
	event_mask = DEFAULT_EVENT_MASK;
    62e6:	2001      	movs	r0, #1
    62e8:	499e      	ldr	r1, [pc, #632]	; (6564 <hci_cmd_handle+0x324>)
    62ea:	4b9d      	ldr	r3, [pc, #628]	; (6560 <hci_cmd_handle+0x320>)
    62ec:	4240      	negs	r0, r0
    62ee:	6018      	str	r0, [r3, #0]
    62f0:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    62f2:	201f      	movs	r0, #31
    62f4:	2100      	movs	r1, #0
    62f6:	4b9c      	ldr	r3, [pc, #624]	; (6568 <hci_cmd_handle+0x328>)
    62f8:	6018      	str	r0, [r3, #0]
    62fa:	6059      	str	r1, [r3, #4]
		ll_reset();
    62fc:	f003 ffe0 	bl	a2c0 <ll_reset>
    6300:	e7eb      	b.n	62da <hci_cmd_handle+0x9a>
    6302:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    6304:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    6306:	785c      	ldrb	r4, [r3, #1]
    6308:	781a      	ldrb	r2, [r3, #0]
    630a:	0224      	lsls	r4, r4, #8
	rp = cmd_complete(evt, sizeof(*rp));
    630c:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    630e:	4314      	orrs	r4, r2
	type = cmd->type;
    6310:	789e      	ldrb	r6, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    6312:	f7ff fecb 	bl	60ac <cmd_complete>
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    6316:	0031      	movs	r1, r6
	rp = cmd_complete(evt, sizeof(*rp));
    6318:	0005      	movs	r5, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    631a:	1cc2      	adds	r2, r0, #3
    631c:	0020      	movs	r0, r4
    631e:	f004 f869 	bl	a3f4 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    6322:	1e43      	subs	r3, r0, #1
    6324:	4198      	sbcs	r0, r3
	rp->handle = sys_cpu_to_le16(handle);
    6326:	706c      	strb	r4, [r5, #1]
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    6328:	0040      	lsls	r0, r0, #1
	rp->handle = sys_cpu_to_le16(handle);
    632a:	0a24      	lsrs	r4, r4, #8
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    632c:	7028      	strb	r0, [r5, #0]
	rp->handle = sys_cpu_to_le16(handle);
    632e:	70ac      	strb	r4, [r5, #2]
	return evt;
    6330:	980d      	ldr	r0, [sp, #52]	; 0x34
    6332:	e78e      	b.n	6252 <hci_cmd_handle+0x12>
	switch (ocf) {
    6334:	1e60      	subs	r0, r4, #1
    6336:	2808      	cmp	r0, #8
    6338:	d8a5      	bhi.n	6286 <hci_cmd_handle+0x46>
    633a:	f7f9 ff1d 	bl	178 <__gnu_thumb1_case_sqi>
    633e:	1805      	.short	0x1805
    6340:	a4a4a452 	.word	0xa4a4a452
    6344:	a4a4      	.short	0xa4a4
    6346:	60          	.byte	0x60
    6347:	00          	.byte	0x00
	rp = cmd_complete(evt, sizeof(*rp));
    6348:	2109      	movs	r1, #9
    634a:	a80d      	add	r0, sp, #52	; 0x34
    634c:	f7ff feae 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    6350:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    6352:	2209      	movs	r2, #9
	rp->status = 0x00;
    6354:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    6356:	7083      	strb	r3, [r0, #2]
    6358:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    635a:	3b0f      	subs	r3, #15
    635c:	7143      	strb	r3, [r0, #5]
    635e:	3314      	adds	r3, #20
    6360:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    6362:	3b06      	subs	r3, #6
	rp->hci_version = BT_HCI_VERSION_5_0;
    6364:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    6366:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    6368:	71c3      	strb	r3, [r0, #7]
    636a:	7203      	strb	r3, [r0, #8]
    636c:	e7e0      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    636e:	2141      	movs	r1, #65	; 0x41
    6370:	a80d      	add	r0, sp, #52	; 0x34
    6372:	f7ff fe9b 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    6376:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    6378:	0004      	movs	r4, r0
	rp->status = 0x00;
    637a:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    637c:	2240      	movs	r2, #64	; 0x40
    637e:	3001      	adds	r0, #1
    6380:	f7fb fcfe 	bl	1d80 <memset>
	rp->commands[2] |= BIT(7);
    6384:	2380      	movs	r3, #128	; 0x80
    6386:	78e2      	ldrb	r2, [r4, #3]
    6388:	425b      	negs	r3, r3
    638a:	431a      	orrs	r2, r3
    638c:	70e2      	strb	r2, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    638e:	2240      	movs	r2, #64	; 0x40
    6390:	79a1      	ldrb	r1, [r4, #6]
    6392:	4252      	negs	r2, r2
    6394:	430a      	orrs	r2, r1
    6396:	71a2      	strb	r2, [r4, #6]
	rp->commands[10] |= BIT(2);
    6398:	2204      	movs	r2, #4
    639a:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    639c:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[10] |= BIT(2);
    639e:	4311      	orrs	r1, r2
    63a0:	72e1      	strb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    63a2:	2128      	movs	r1, #40	; 0x28
    63a4:	4301      	orrs	r1, r0
    63a6:	73e1      	strb	r1, [r4, #15]
	rp->commands[15] |= BIT(1);
    63a8:	2102      	movs	r1, #2
    63aa:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    63ac:	7ea6      	ldrb	r6, [r4, #26]
	rp->commands[15] |= BIT(1);
    63ae:	4301      	orrs	r1, r0
    63b0:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
    63b2:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    63b4:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[22] |= BIT(2);
    63b6:	430a      	orrs	r2, r1
    63b8:	75e2      	strb	r2, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    63ba:	223d      	movs	r2, #61	; 0x3d
    63bc:	4252      	negs	r2, r2
    63be:	4310      	orrs	r0, r2
    63c0:	7720      	strb	r0, [r4, #28]
	rp->commands[28] |= BIT(3);
    63c2:	2008      	movs	r0, #8
    63c4:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    63c6:	7ee5      	ldrb	r5, [r4, #27]
	rp->commands[28] |= BIT(3);
    63c8:	4308      	orrs	r0, r1
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    63ca:	2109      	movs	r1, #9
    63cc:	4249      	negs	r1, r1
	rp->commands[26] |= BIT(0) | BIT(1);
    63ce:	432a      	orrs	r2, r5
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    63d0:	4331      	orrs	r1, r6
	rp->commands[28] |= BIT(3);
    63d2:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    63d4:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    63d6:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    63d8:	3408      	adds	r4, #8
    63da:	7fe2      	ldrb	r2, [r4, #31]
    63dc:	4313      	orrs	r3, r2
    63de:	77e3      	strb	r3, [r4, #31]
    63e0:	e7a6      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    63e2:	2109      	movs	r1, #9
    63e4:	a80d      	add	r0, sp, #52	; 0x34
    63e6:	f7ff fe61 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    63ea:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    63ec:	0004      	movs	r4, r0
	rp->status = 0x00;
    63ee:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    63f0:	2208      	movs	r2, #8
    63f2:	3001      	adds	r0, #1
    63f4:	f7fb fcc4 	bl	1d80 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    63f8:	2360      	movs	r3, #96	; 0x60
    63fa:	7163      	strb	r3, [r4, #5]
    63fc:	e798      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    63fe:	2107      	movs	r1, #7
    6400:	a80d      	add	r0, sp, #52	; 0x34
    6402:	f7ff fe53 	bl	60ac <cmd_complete>
    6406:	0001      	movs	r1, r0
	rp->status = 0x00;
    6408:	2000      	movs	r0, #0
    640a:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    640c:	3101      	adds	r1, #1
    640e:	f7ff fd37 	bl	5e80 <ll_addr_get>
    6412:	e78d      	b.n	6330 <hci_cmd_handle+0xf0>
	switch (ocf) {
    6414:	2c0a      	cmp	r4, #10
    6416:	d100      	bne.n	641a <hci_cmd_handle+0x1da>
    6418:	e0e4      	b.n	65e4 <hci_cmd_handle+0x3a4>
    641a:	d828      	bhi.n	646e <hci_cmd_handle+0x22e>
    641c:	2c05      	cmp	r4, #5
    641e:	d100      	bne.n	6422 <hci_cmd_handle+0x1e2>
    6420:	e080      	b.n	6524 <hci_cmd_handle+0x2e4>
    6422:	d813      	bhi.n	644c <hci_cmd_handle+0x20c>
    6424:	2c02      	cmp	r4, #2
    6426:	d05f      	beq.n	64e8 <hci_cmd_handle+0x2a8>
    6428:	2c03      	cmp	r4, #3
    642a:	d069      	beq.n	6500 <hci_cmd_handle+0x2c0>
    642c:	2c01      	cmp	r4, #1
    642e:	d000      	beq.n	6432 <hci_cmd_handle+0x1f2>
    6430:	e729      	b.n	6286 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    6432:	68a8      	ldr	r0, [r5, #8]
    6434:	f7ff feed 	bl	6212 <sys_get_le64>
    6438:	4b4b      	ldr	r3, [pc, #300]	; (6568 <hci_cmd_handle+0x328>)
    643a:	6018      	str	r0, [r3, #0]
    643c:	6059      	str	r1, [r3, #4]
	ccst = cmd_complete(evt, sizeof(*ccst));
    643e:	2101      	movs	r1, #1
    6440:	a80d      	add	r0, sp, #52	; 0x34
    6442:	f7ff fe33 	bl	60ac <cmd_complete>
	ccst->status = 0x00;
    6446:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    6448:	7003      	strb	r3, [r0, #0]
    644a:	e771      	b.n	6330 <hci_cmd_handle+0xf0>
	switch (ocf) {
    644c:	2c07      	cmp	r4, #7
    644e:	d100      	bne.n	6452 <hci_cmd_handle+0x212>
    6450:	e149      	b.n	66e6 <hci_cmd_handle+0x4a6>
    6452:	d200      	bcs.n	6456 <hci_cmd_handle+0x216>
    6454:	e0a5      	b.n	65a2 <hci_cmd_handle+0x362>
    6456:	2c08      	cmp	r4, #8
    6458:	d100      	bne.n	645c <hci_cmd_handle+0x21c>
    645a:	e0bd      	b.n	65d8 <hci_cmd_handle+0x398>
    645c:	2c09      	cmp	r4, #9
    645e:	d000      	beq.n	6462 <hci_cmd_handle+0x222>
    6460:	e711      	b.n	6286 <hci_cmd_handle+0x46>
    6462:	68ab      	ldr	r3, [r5, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    6464:	1c59      	adds	r1, r3, #1
    6466:	7818      	ldrb	r0, [r3, #0]
    6468:	f004 fcd4 	bl	ae14 <ll_scan_data_set>
    646c:	e7e7      	b.n	643e <hci_cmd_handle+0x1fe>
	switch (ocf) {
    646e:	2c12      	cmp	r4, #18
    6470:	d070      	beq.n	6554 <hci_cmd_handle+0x314>
    6472:	d810      	bhi.n	6496 <hci_cmd_handle+0x256>
    6474:	2c10      	cmp	r4, #16
    6476:	d060      	beq.n	653a <hci_cmd_handle+0x2fa>
    6478:	d868      	bhi.n	654c <hci_cmd_handle+0x30c>
    647a:	2c0f      	cmp	r4, #15
    647c:	d000      	beq.n	6480 <hci_cmd_handle+0x240>
    647e:	e702      	b.n	6286 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    6480:	2102      	movs	r1, #2
    6482:	a80d      	add	r0, sp, #52	; 0x34
    6484:	f7ff fe12 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    6488:	2300      	movs	r3, #0
    648a:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    648c:	0004      	movs	r4, r0
	rp->wl_size = ll_wl_size_get();
    648e:	f004 fd5d 	bl	af4c <ll_wl_size_get>
    6492:	7060      	strb	r0, [r4, #1]
    6494:	e74c      	b.n	6330 <hci_cmd_handle+0xf0>
	switch (ocf) {
    6496:	2c18      	cmp	r4, #24
    6498:	d068      	beq.n	656c <hci_cmd_handle+0x32c>
    649a:	d815      	bhi.n	64c8 <hci_cmd_handle+0x288>
    649c:	2c17      	cmp	r4, #23
    649e:	d000      	beq.n	64a2 <hci_cmd_handle+0x262>
    64a0:	e6f1      	b.n	6286 <hci_cmd_handle+0x46>
    64a2:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    64a4:	2300      	movs	r3, #0
    64a6:	0001      	movs	r1, r0
    64a8:	aa0e      	add	r2, sp, #56	; 0x38
    64aa:	3110      	adds	r1, #16
    64ac:	f004 ff62 	bl	b374 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    64b0:	2111      	movs	r1, #17
    64b2:	a80d      	add	r0, sp, #52	; 0x34
    64b4:	f7ff fdfa 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    64b8:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    64ba:	2210      	movs	r2, #16
	rp->status = 0x00;
    64bc:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    64be:	3001      	adds	r0, #1
	memcpy(rp->info, build_info, sizeof(build_info));
    64c0:	a90e      	add	r1, sp, #56	; 0x38
    64c2:	f7fb fc33 	bl	1d2c <memcpy>
    64c6:	e733      	b.n	6330 <hci_cmd_handle+0xf0>
	switch (ocf) {
    64c8:	2c1c      	cmp	r4, #28
    64ca:	d05a      	beq.n	6582 <hci_cmd_handle+0x342>
    64cc:	2c4b      	cmp	r4, #75	; 0x4b
    64ce:	d000      	beq.n	64d2 <hci_cmd_handle+0x292>
    64d0:	e6d9      	b.n	6286 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    64d2:	2103      	movs	r1, #3
    64d4:	a80d      	add	r0, sp, #52	; 0x34
    64d6:	f7ff fde9 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    64da:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    64dc:	1c81      	adds	r1, r0, #2
	rp->status = 0x00;
    64de:	7003      	strb	r3, [r0, #0]
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    64e0:	3001      	adds	r0, #1
    64e2:	f7ff fd01 	bl	5ee8 <ll_tx_pwr_get>
    64e6:	e723      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    64e8:	2104      	movs	r1, #4
    64ea:	a80d      	add	r0, sp, #52	; 0x34
    64ec:	f7ff fdde 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    64f0:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    64f2:	211b      	movs	r1, #27
	rp->status = 0x00;
    64f4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    64f6:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    64f8:	3302      	adds	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    64fa:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    64fc:	70c3      	strb	r3, [r0, #3]
    64fe:	e717      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    6500:	2109      	movs	r1, #9
    6502:	a80d      	add	r0, sp, #52	; 0x34
    6504:	f7ff fdd2 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    6508:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    650a:	0004      	movs	r4, r0
	rp->status = 0x00;
    650c:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    650e:	2208      	movs	r2, #8
    6510:	3001      	adds	r0, #1
    6512:	f7fb fc35 	bl	1d80 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    6516:	230c      	movs	r3, #12
    6518:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    651a:	3334      	adds	r3, #52	; 0x34
    651c:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    651e:	3b3f      	subs	r3, #63	; 0x3f
    6520:	70e3      	strb	r3, [r4, #3]
    6522:	e705      	b.n	6330 <hci_cmd_handle+0xf0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    6524:	68a9      	ldr	r1, [r5, #8]
    6526:	2001      	movs	r0, #1
    6528:	f7ff fcc2 	bl	5eb0 <ll_addr_set>
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    652c:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    652e:	2101      	movs	r1, #1
    6530:	a80d      	add	r0, sp, #52	; 0x34
    6532:	f7ff fdbb 	bl	60ac <cmd_complete>
	ccst->status = status;
    6536:	7004      	strb	r4, [r0, #0]
    6538:	e6fa      	b.n	6330 <hci_cmd_handle+0xf0>
	ccst = cmd_complete(evt, sizeof(*ccst));
    653a:	2101      	movs	r1, #1
    653c:	a80d      	add	r0, sp, #52	; 0x34
    653e:	f7ff fdb5 	bl	60ac <cmd_complete>
    6542:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    6544:	f004 fd04 	bl	af50 <ll_wl_clear>
    6548:	7020      	strb	r0, [r4, #0]
    654a:	e6f1      	b.n	6330 <hci_cmd_handle+0xf0>
	status = ll_wl_add(&cmd->addr);
    654c:	68a8      	ldr	r0, [r5, #8]
    654e:	f004 fd15 	bl	af7c <ll_wl_add>
    6552:	e7eb      	b.n	652c <hci_cmd_handle+0x2ec>
	status = ll_wl_remove(&cmd->addr);
    6554:	68a8      	ldr	r0, [r5, #8]
    6556:	f004 fd47 	bl	afe8 <ll_wl_remove>
    655a:	e7e7      	b.n	652c <hci_cmd_handle+0x2ec>
    655c:	20000294 	.word	0x20000294
    6560:	20002358 	.word	0x20002358
    6564:	00001fff 	.word	0x00001fff
    6568:	20002360 	.word	0x20002360
	rp = cmd_complete(evt, sizeof(*rp));
    656c:	2109      	movs	r1, #9
    656e:	a80d      	add	r0, sp, #52	; 0x34
    6570:	f7ff fd9c 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    6574:	2300      	movs	r3, #0
	bt_rand(rp->rand, count);
    6576:	2108      	movs	r1, #8
	rp->status = 0x00;
    6578:	7003      	strb	r3, [r0, #0]
	bt_rand(rp->rand, count);
    657a:	3001      	adds	r0, #1
    657c:	f7ff fcb8 	bl	5ef0 <bt_rand>
    6580:	e6d6      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    6582:	2109      	movs	r1, #9
    6584:	a80d      	add	r0, sp, #52	; 0x34
    6586:	f7ff fd91 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    658a:	2500      	movs	r5, #0
	sys_put_le64(states, rp->le_states);
    658c:	1c41      	adds	r1, r0, #1
	rp = cmd_complete(evt, sizeof(*rp));
    658e:	0004      	movs	r4, r0
	rp->status = 0x00;
    6590:	7005      	strb	r5, [r0, #0]
	sys_put_le32(val, dst);
    6592:	2003      	movs	r0, #3
    6594:	f7ff fd78 	bl	6088 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    6598:	0028      	movs	r0, r5
    659a:	1d61      	adds	r1, r4, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    659c:	f7ff fd74 	bl	6088 <sys_put_le32>
    65a0:	e6c6      	b.n	6330 <hci_cmd_handle+0xf0>
    65a2:	68a9      	ldr	r1, [r5, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    65a4:	784a      	ldrb	r2, [r1, #1]
    65a6:	7808      	ldrb	r0, [r1, #0]
    65a8:	0212      	lsls	r2, r2, #8
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    65aa:	4302      	orrs	r2, r0
    65ac:	2000      	movs	r0, #0
    65ae:	790b      	ldrb	r3, [r1, #4]
    65b0:	900a      	str	r0, [sp, #40]	; 0x28
    65b2:	9009      	str	r0, [sp, #36]	; 0x24
    65b4:	9008      	str	r0, [sp, #32]
    65b6:	9007      	str	r0, [sp, #28]
    65b8:	9006      	str	r0, [sp, #24]
    65ba:	9005      	str	r0, [sp, #20]
    65bc:	7b8c      	ldrb	r4, [r1, #14]
    65be:	9404      	str	r4, [sp, #16]
    65c0:	7b4c      	ldrb	r4, [r1, #13]
    65c2:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    65c4:	1dcc      	adds	r4, r1, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    65c6:	9402      	str	r4, [sp, #8]
    65c8:	798c      	ldrb	r4, [r1, #6]
    65ca:	9401      	str	r4, [sp, #4]
    65cc:	7949      	ldrb	r1, [r1, #5]
    65ce:	9100      	str	r1, [sp, #0]
    65d0:	0001      	movs	r1, r0
    65d2:	f004 facd 	bl	ab70 <ll_adv_params_set>
    65d6:	e7a9      	b.n	652c <hci_cmd_handle+0x2ec>
    65d8:	68ab      	ldr	r3, [r5, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    65da:	1c59      	adds	r1, r3, #1
    65dc:	7818      	ldrb	r0, [r3, #0]
    65de:	f004 fbc1 	bl	ad64 <ll_adv_data_set>
    65e2:	e72c      	b.n	643e <hci_cmd_handle+0x1fe>
	status = ll_adv_enable(cmd->enable);
    65e4:	68ab      	ldr	r3, [r5, #8]
    65e6:	7818      	ldrb	r0, [r3, #0]
    65e8:	f004 fc50 	bl	ae8c <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    65ec:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    65ee:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    65f0:	a80d      	add	r0, sp, #52	; 0x34
    65f2:	f7ff fd5b 	bl	60ac <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    65f6:	2c00      	cmp	r4, #0
    65f8:	d100      	bne.n	65fc <hci_cmd_handle+0x3bc>
    65fa:	e672      	b.n	62e2 <hci_cmd_handle+0xa2>
    65fc:	260c      	movs	r6, #12
    65fe:	e670      	b.n	62e2 <hci_cmd_handle+0xa2>
	rp = cmd_complete(evt, sizeof(*rp));
    6600:	210d      	movs	r1, #13
    6602:	a80d      	add	r0, sp, #52	; 0x34
    6604:	f7ff fd52 	bl	60ac <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    6608:	2102      	movs	r1, #2
	rp->status = 0x00;
    660a:	2300      	movs	r3, #0
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    660c:	2201      	movs	r2, #1
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    660e:	7041      	strb	r1, [r0, #1]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    6610:	210b      	movs	r1, #11
	rp->status = 0x00;
    6612:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    6614:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    6616:	70c2      	strb	r2, [r0, #3]
    6618:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    661a:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    661c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    661e:	71c1      	strb	r1, [r0, #7]
    6620:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    6622:	7243      	strb	r3, [r0, #9]
    6624:	7283      	strb	r3, [r0, #10]
    6626:	72c3      	strb	r3, [r0, #11]
    6628:	7303      	strb	r3, [r0, #12]
    662a:	e681      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    662c:	2141      	movs	r1, #65	; 0x41
    662e:	a80d      	add	r0, sp, #52	; 0x34
    6630:	f7ff fd3c 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    6634:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    6636:	0004      	movs	r4, r0
	rp->status = 0x00;
    6638:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    663a:	2240      	movs	r2, #64	; 0x40
    663c:	3001      	adds	r0, #1
    663e:	f7fb fb9f 	bl	1d80 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    6642:	2359      	movs	r3, #89	; 0x59
    6644:	7862      	ldrb	r2, [r4, #1]
    6646:	425b      	negs	r3, r3
    6648:	4313      	orrs	r3, r2
    664a:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    664c:	2303      	movs	r3, #3
    664e:	78a2      	ldrb	r2, [r4, #2]
    6650:	4313      	orrs	r3, r2
    6652:	70a3      	strb	r3, [r4, #2]
    6654:	e66c      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    6656:	2109      	movs	r1, #9
    6658:	a80d      	add	r0, sp, #52	; 0x34
    665a:	f7ff fd27 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    665e:	2100      	movs	r1, #0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    6660:	2208      	movs	r2, #8
	rp->status = 0x00;
    6662:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    6664:	3001      	adds	r0, #1
		memset(rp->er, 0x00, sizeof(rp->er));
    6666:	f7fb fb8b 	bl	1d80 <memset>
    666a:	e661      	b.n	6330 <hci_cmd_handle+0xf0>
	const char build_info[] = HCI_VS_BUILD_INFO;
    666c:	2227      	movs	r2, #39	; 0x27
    666e:	494e      	ldr	r1, [pc, #312]	; (67a8 <hci_cmd_handle+0x568>)
    6670:	a80e      	add	r0, sp, #56	; 0x38
    6672:	f7fb fb5b 	bl	1d2c <memcpy>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    6676:	2128      	movs	r1, #40	; 0x28
    6678:	a80d      	add	r0, sp, #52	; 0x34
    667a:	f7ff fd17 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    667e:	2300      	movs	r3, #0
	memcpy(rp->info, build_info, sizeof(build_info));
    6680:	2227      	movs	r2, #39	; 0x27
	rp->status = 0x00;
    6682:	7003      	strb	r3, [r0, #0]
	memcpy(rp->info, build_info, sizeof(build_info));
    6684:	3001      	adds	r0, #1
    6686:	e71b      	b.n	64c0 <hci_cmd_handle+0x280>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    6688:	68a9      	ldr	r1, [r5, #8]
    668a:	2000      	movs	r0, #0
    668c:	f7ff fc10 	bl	5eb0 <ll_addr_set>
    6690:	e6d5      	b.n	643e <hci_cmd_handle+0x1fe>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    6692:	4e46      	ldr	r6, [pc, #280]	; (67ac <hci_cmd_handle+0x56c>)
    6694:	6833      	ldr	r3, [r6, #0]
    6696:	3301      	adds	r3, #1
    6698:	d105      	bne.n	66a6 <hci_cmd_handle+0x466>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    669a:	4b45      	ldr	r3, [pc, #276]	; (67b0 <hci_cmd_handle+0x570>)
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    669c:	4a45      	ldr	r2, [pc, #276]	; (67b4 <hci_cmd_handle+0x574>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    66a2:	4293      	cmp	r3, r2
    66a4:	d01f      	beq.n	66e6 <hci_cmd_handle+0x4a6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    66a6:	2701      	movs	r7, #1
    66a8:	4b43      	ldr	r3, [pc, #268]	; (67b8 <hci_cmd_handle+0x578>)
    66aa:	681b      	ldr	r3, [r3, #0]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    66ac:	423b      	tst	r3, r7
    66ae:	d01a      	beq.n	66e6 <hci_cmd_handle+0x4a6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    66b0:	2118      	movs	r1, #24
    66b2:	a80d      	add	r0, sp, #52	; 0x34
    66b4:	f7ff fcfa 	bl	60ac <cmd_complete>
		rp->status = 0x00;
    66b8:	2500      	movs	r5, #0
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    66ba:	0004      	movs	r4, r0
		rp->status = 0x00;
    66bc:	7005      	strb	r5, [r0, #0]
		rp->num_addrs = 1;
    66be:	7047      	strb	r7, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    66c0:	6830      	ldr	r0, [r6, #0]
    66c2:	1ca6      	adds	r6, r4, #2
    66c4:	0031      	movs	r1, r6
    66c6:	f7ff fcdf 	bl	6088 <sys_put_le32>
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    66ca:	2240      	movs	r2, #64	; 0x40
		memset(addr->ir, 0x00, sizeof(addr->ir));
    66cc:	0020      	movs	r0, r4
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    66ce:	4b38      	ldr	r3, [pc, #224]	; (67b0 <hci_cmd_handle+0x570>)
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    66d0:	4252      	negs	r2, r2
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    66d2:	681b      	ldr	r3, [r3, #0]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    66d4:	3008      	adds	r0, #8
	dst[0] = val;
    66d6:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    66d8:	b29b      	uxth	r3, r3
    66da:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    66dc:	4313      	orrs	r3, r2
    66de:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    66e0:	3250      	adds	r2, #80	; 0x50
    66e2:	0029      	movs	r1, r5
    66e4:	e7bf      	b.n	6666 <hci_cmd_handle+0x426>
	rp = cmd_complete(evt, sizeof(*rp));
    66e6:	2102      	movs	r1, #2
    66e8:	a80d      	add	r0, sp, #52	; 0x34
    66ea:	f7ff fcdf 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    66ee:	2300      	movs	r3, #0
    66f0:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    66f2:	7043      	strb	r3, [r0, #1]
    66f4:	e61c      	b.n	6330 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    66f6:	2121      	movs	r1, #33	; 0x21
    66f8:	a80d      	add	r0, sp, #52	; 0x34
    66fa:	f7ff fcd7 	bl	60ac <cmd_complete>
	rp->status = 0x00;
    66fe:	2300      	movs	r3, #0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    6700:	4a2e      	ldr	r2, [pc, #184]	; (67bc <hci_cmd_handle+0x57c>)
	rp->status = 0x00;
    6702:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    6704:	6811      	ldr	r1, [r2, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    6706:	0004      	movs	r4, r0
    6708:	1c43      	adds	r3, r0, #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    670a:	3101      	adds	r1, #1
    670c:	d041      	beq.n	6792 <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    670e:	4f2c      	ldr	r7, [pc, #176]	; (67c0 <hci_cmd_handle+0x580>)
    6710:	6839      	ldr	r1, [r7, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    6712:	3101      	adds	r1, #1
    6714:	d03d      	beq.n	6792 <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    6716:	4e2b      	ldr	r6, [pc, #172]	; (67c4 <hci_cmd_handle+0x584>)
    6718:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    671a:	3101      	adds	r1, #1
    671c:	d039      	beq.n	6792 <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    671e:	4d2a      	ldr	r5, [pc, #168]	; (67c8 <hci_cmd_handle+0x588>)
    6720:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    6722:	3101      	adds	r1, #1
    6724:	d035      	beq.n	6792 <hci_cmd_handle+0x552>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    6726:	6810      	ldr	r0, [r2, #0]
    6728:	0019      	movs	r1, r3
    672a:	f7ff fcad 	bl	6088 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    672e:	6838      	ldr	r0, [r7, #0]
    6730:	1d61      	adds	r1, r4, #5
    6732:	f7ff fca9 	bl	6088 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    6736:	0021      	movs	r1, r4
    6738:	6830      	ldr	r0, [r6, #0]
    673a:	3109      	adds	r1, #9
    673c:	f7ff fca4 	bl	6088 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    6740:	0021      	movs	r1, r4
    6742:	6828      	ldr	r0, [r5, #0]
    6744:	310d      	adds	r1, #13
    6746:	f7ff fc9f 	bl	6088 <sys_put_le32>
    674a:	0023      	movs	r3, r4
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    674c:	4a1f      	ldr	r2, [pc, #124]	; (67cc <hci_cmd_handle+0x58c>)
    674e:	3311      	adds	r3, #17
    6750:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    6752:	3101      	adds	r1, #1
    6754:	d023      	beq.n	679e <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    6756:	4f1e      	ldr	r7, [pc, #120]	; (67d0 <hci_cmd_handle+0x590>)
    6758:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    675a:	3101      	adds	r1, #1
    675c:	d01f      	beq.n	679e <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    675e:	4e1d      	ldr	r6, [pc, #116]	; (67d4 <hci_cmd_handle+0x594>)
    6760:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    6762:	3101      	adds	r1, #1
    6764:	d01b      	beq.n	679e <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    6766:	4d1c      	ldr	r5, [pc, #112]	; (67d8 <hci_cmd_handle+0x598>)
    6768:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    676a:	3101      	adds	r1, #1
    676c:	d017      	beq.n	679e <hci_cmd_handle+0x55e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    676e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    6770:	0019      	movs	r1, r3
    6772:	f7ff fc89 	bl	6088 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    6776:	0021      	movs	r1, r4
    6778:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    677a:	3115      	adds	r1, #21
    677c:	f7ff fc84 	bl	6088 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    6780:	0021      	movs	r1, r4
    6782:	6830      	ldr	r0, [r6, #0]
    6784:	3119      	adds	r1, #25
    6786:	f7ff fc7f 	bl	6088 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    678a:	0021      	movs	r1, r4
    678c:	6828      	ldr	r0, [r5, #0]
    678e:	311d      	adds	r1, #29
    6790:	e704      	b.n	659c <hci_cmd_handle+0x35c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    6792:	2210      	movs	r2, #16
    6794:	2100      	movs	r1, #0
    6796:	0018      	movs	r0, r3
    6798:	f7fb faf2 	bl	1d80 <memset>
    679c:	e7d5      	b.n	674a <hci_cmd_handle+0x50a>
		memset(rp->er, 0x00, sizeof(rp->er));
    679e:	2210      	movs	r2, #16
    67a0:	2100      	movs	r1, #0
    67a2:	0018      	movs	r0, r3
    67a4:	e75f      	b.n	6666 <hci_cmd_handle+0x426>
    67a6:	46c0      	nop			; (mov r8, r8)
    67a8:	0000da87 	.word	0x0000da87
    67ac:	100000a4 	.word	0x100000a4
    67b0:	100000a8 	.word	0x100000a8
    67b4:	0000ffff 	.word	0x0000ffff
    67b8:	100000a0 	.word	0x100000a0
    67bc:	10000090 	.word	0x10000090
    67c0:	10000094 	.word	0x10000094
    67c4:	10000098 	.word	0x10000098
    67c8:	1000009c 	.word	0x1000009c
    67cc:	10000004 	.word	0x10000004
    67d0:	10000008 	.word	0x10000008
    67d4:	10000088 	.word	0x10000088
    67d8:	1000008c 	.word	0x1000008c

000067dc <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;
    67de:	0007      	movs	r7, r0
{
    67e0:	0004      	movs	r4, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    67e2:	7900      	ldrb	r0, [r0, #4]
{
    67e4:	b08d      	sub	sp, #52	; 0x34
    67e6:	000e      	movs	r6, r1
	pdu_data = (void *)node_rx->pdu_data;
    67e8:	3708      	adds	r7, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    67ea:	2801      	cmp	r0, #1
    67ec:	d100      	bne.n	67f0 <hci_evt_encode+0x14>
    67ee:	e088      	b.n	6902 <hci_evt_encode+0x126>
	switch (node_rx->hdr.type) {
    67f0:	3802      	subs	r0, #2
    67f2:	2803      	cmp	r0, #3
    67f4:	d900      	bls.n	67f8 <hci_evt_encode+0x1c>
    67f6:	e0be      	b.n	6976 <hci_evt_encode+0x19a>
    67f8:	f7f9 fcc8 	bl	18c <__gnu_thumb1_case_uqi>
    67fc:	584c4c02 	.word	0x584c4c02
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    6800:	2201      	movs	r2, #1
    6802:	2500      	movs	r5, #0
    6804:	2104      	movs	r1, #4
    6806:	ab05      	add	r3, sp, #20
    6808:	705a      	strb	r2, [r3, #1]
    680a:	3202      	adds	r2, #2
    680c:	709a      	strb	r2, [r3, #2]
    680e:	32fc      	adds	r2, #252	; 0xfc
    6810:	715a      	strb	r2, [r3, #5]
    6812:	70da      	strb	r2, [r3, #3]
    6814:	3afd      	subs	r2, #253	; 0xfd
    6816:	7119      	strb	r1, [r3, #4]
    6818:	719a      	strb	r2, [r3, #6]
    681a:	701d      	strb	r5, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    681c:	4b57      	ldr	r3, [pc, #348]	; (697c <hci_evt_encode+0x1a0>)
    681e:	685b      	ldr	r3, [r3, #4]
    6820:	009b      	lsls	r3, r3, #2
    6822:	d535      	bpl.n	6890 <hci_evt_encode+0xb4>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    6824:	4b56      	ldr	r3, [pc, #344]	; (6980 <hci_evt_encode+0x1a4>)
    6826:	681b      	ldr	r3, [r3, #0]
    6828:	4213      	tst	r3, r2
    682a:	d031      	beq.n	6890 <hci_evt_encode+0xb4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    682c:	230f      	movs	r3, #15
    682e:	7a22      	ldrb	r2, [r4, #8]
    6830:	401a      	ands	r2, r3
    6832:	7a63      	ldrb	r3, [r4, #9]
    6834:	2a01      	cmp	r2, #1
    6836:	d001      	beq.n	683c <hci_evt_encode+0x60>
		data_len = (adv->len - BDADDR_SIZE);
    6838:	1f9d      	subs	r5, r3, #6
    683a:	b2ed      	uxtb	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    683c:	002a      	movs	r2, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    683e:	18e3      	adds	r3, r4, r3
    6840:	7a9b      	ldrb	r3, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    6842:	320b      	adds	r2, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    6844:	425b      	negs	r3, r3
    6846:	b25b      	sxtb	r3, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    6848:	b2d2      	uxtb	r2, r2
    684a:	2102      	movs	r1, #2
    684c:	0030      	movs	r0, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    684e:	9301      	str	r3, [sp, #4]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    6850:	f7ff fc4e 	bl	60f0 <meta_evt>
	sep->num_reports = 1;
    6854:	2301      	movs	r3, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    6856:	0021      	movs	r1, r4
	sep->num_reports = 1;
    6858:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    685a:	7a23      	ldrb	r3, [r4, #8]
    685c:	aa05      	add	r2, sp, #20
    685e:	071b      	lsls	r3, r3, #28
    6860:	0f1b      	lsrs	r3, r3, #28
    6862:	5cd3      	ldrb	r3, [r2, r3]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    6864:	0006      	movs	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    6866:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    6868:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    686a:	310a      	adds	r1, #10
		adv_info->addr.type = adv->tx_addr;
    686c:	065b      	lsls	r3, r3, #25
    686e:	0fdb      	lsrs	r3, r3, #31
    6870:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    6872:	2206      	movs	r2, #6
    6874:	3003      	adds	r0, #3
    6876:	f7fb fa59 	bl	1d2c <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    687a:	0039      	movs	r1, r7
	adv_info->length = data_len;
    687c:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    687e:	360a      	adds	r6, #10
    6880:	3108      	adds	r1, #8
    6882:	002a      	movs	r2, r5
    6884:	0030      	movs	r0, r6
    6886:	f7fb fa51 	bl	1d2c <memcpy>
	*prssi = rssi;
    688a:	466b      	mov	r3, sp
    688c:	791b      	ldrb	r3, [r3, #4]
    688e:	5573      	strb	r3, [r6, r5]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    6890:	b00d      	add	sp, #52	; 0x34
    6892:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    6894:	220f      	movs	r2, #15
    6896:	7a23      	ldrb	r3, [r4, #8]
    6898:	4013      	ands	r3, r2
    689a:	2b07      	cmp	r3, #7
    689c:	d1f8      	bne.n	6890 <hci_evt_encode+0xb4>
    689e:	7a63      	ldrb	r3, [r4, #9]
    68a0:	2b00      	cmp	r3, #0
    68a2:	d0f5      	beq.n	6890 <hci_evt_encode+0xb4>
    68a4:	0038      	movs	r0, r7
    68a6:	f7ff fc9b 	bl	61e0 <le_adv_ext_report.isra.37.part.38>
    68aa:	e7f1      	b.n	6890 <hci_evt_encode+0xb4>
    68ac:	0025      	movs	r5, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    68ae:	4b33      	ldr	r3, [pc, #204]	; (697c <hci_evt_encode+0x1a0>)
    68b0:	350a      	adds	r5, #10
    68b2:	685b      	ldr	r3, [r3, #4]
    68b4:	009b      	lsls	r3, r3, #2
    68b6:	d503      	bpl.n	68c0 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    68b8:	4b31      	ldr	r3, [pc, #196]	; (6980 <hci_evt_encode+0x1a4>)
    68ba:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    68bc:	035b      	lsls	r3, r3, #13
    68be:	d40f      	bmi.n	68e0 <hci_evt_encode+0x104>
		addr.type = adv->tx_addr;
    68c0:	7a23      	ldrb	r3, [r4, #8]
    68c2:	ae03      	add	r6, sp, #12
    68c4:	065b      	lsls	r3, r3, #25
    68c6:	0fdb      	lsrs	r3, r3, #31
    68c8:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    68ca:	ab02      	add	r3, sp, #8
    68cc:	0029      	movs	r1, r5
    68ce:	2206      	movs	r2, #6
    68d0:	1d58      	adds	r0, r3, #5
    68d2:	f7fb fa2b 	bl	1d2c <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    68d6:	a905      	add	r1, sp, #20
    68d8:	0030      	movs	r0, r6
    68da:	f7ff fc45 	bl	6168 <bt_addr_le_to_str.constprop.42>
    68de:	e7d7      	b.n	6890 <hci_evt_encode+0xb4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    68e0:	2208      	movs	r2, #8
    68e2:	2113      	movs	r1, #19
    68e4:	0030      	movs	r0, r6
    68e6:	f7ff fc03 	bl	60f0 <meta_evt>
	sep->handle = 0;
    68ea:	2300      	movs	r3, #0
    68ec:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    68ee:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    68f0:	2206      	movs	r2, #6
	sep->addr.type = adv->tx_addr;
    68f2:	065b      	lsls	r3, r3, #25
    68f4:	0fdb      	lsrs	r3, r3, #31
    68f6:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    68f8:	0029      	movs	r1, r5
    68fa:	3002      	adds	r0, #2
    68fc:	f7fb fa16 	bl	1d2c <memcpy>
    6900:	e7c6      	b.n	6890 <hci_evt_encode+0xb4>
	switch (pdu_data->llctrl.opcode) {
    6902:	7ae1      	ldrb	r1, [r4, #11]
    6904:	88e5      	ldrh	r5, [r4, #6]
    6906:	2909      	cmp	r1, #9
    6908:	d00b      	beq.n	6922 <hci_evt_encode+0x146>
    690a:	290c      	cmp	r1, #12
    690c:	d010      	beq.n	6930 <hci_evt_encode+0x154>
    690e:	2907      	cmp	r1, #7
    6910:	d131      	bne.n	6976 <hci_evt_encode+0x19a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    6912:	7b23      	ldrb	r3, [r4, #12]
    6914:	2b0e      	cmp	r3, #14
    6916:	d1bb      	bne.n	6890 <hci_evt_encode+0xb4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    6918:	0033      	movs	r3, r6
    691a:	002a      	movs	r2, r5
    691c:	2100      	movs	r1, #0
    691e:	201a      	movs	r0, #26
    6920:	e003      	b.n	692a <hci_evt_encode+0x14e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    6922:	0033      	movs	r3, r6
    6924:	002a      	movs	r2, r5
    6926:	0039      	movs	r1, r7
    6928:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    692a:	f7ff fbf5 	bl	6118 <le_remote_feat_complete>
    692e:	e7af      	b.n	6890 <hci_evt_encode+0xb4>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    6930:	4b12      	ldr	r3, [pc, #72]	; (697c <hci_evt_encode+0x1a0>)
    6932:	681b      	ldr	r3, [r3, #0]
    6934:	051b      	lsls	r3, r3, #20
    6936:	d5ab      	bpl.n	6890 <hci_evt_encode+0xb4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    6938:	2208      	movs	r2, #8
    693a:	0030      	movs	r0, r6
    693c:	f7ff fbac 	bl	6098 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    6940:	0030      	movs	r0, r6
    6942:	2108      	movs	r1, #8
    6944:	3008      	adds	r0, #8
    6946:	f005 fa15 	bl	bd74 <net_buf_simple_add>
	ep->status = 0x00;
    694a:	2300      	movs	r3, #0
    694c:	7003      	strb	r3, [r0, #0]
	ep->version = ver_ind->version_number;
    694e:	7b23      	ldrb	r3, [r4, #12]
	ep->handle = sys_cpu_to_le16(handle);
    6950:	7045      	strb	r5, [r0, #1]
    6952:	0a2d      	lsrs	r5, r5, #8
	ep->version = ver_ind->version_number;
    6954:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    6956:	7085      	strb	r5, [r0, #2]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    6958:	7ba3      	ldrb	r3, [r4, #14]
    695a:	7b62      	ldrb	r2, [r4, #13]
    695c:	021b      	lsls	r3, r3, #8
    695e:	4313      	orrs	r3, r2
    6960:	7103      	strb	r3, [r0, #4]
    6962:	0a1b      	lsrs	r3, r3, #8
    6964:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    6966:	7c23      	ldrb	r3, [r4, #16]
    6968:	7be2      	ldrb	r2, [r4, #15]
    696a:	021b      	lsls	r3, r3, #8
    696c:	4313      	orrs	r3, r2
    696e:	7183      	strb	r3, [r0, #6]
    6970:	0a1b      	lsrs	r3, r3, #8
    6972:	71c3      	strb	r3, [r0, #7]
    6974:	e78c      	b.n	6890 <hci_evt_encode+0xb4>
		LL_ASSERT(0);
    6976:	b662      	cpsie	i
    6978:	2004      	movs	r0, #4
    697a:	df02      	svc	2
    697c:	20002358 	.word	0x20002358
    6980:	20002360 	.word	0x20002360

00006984 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    6984:	7903      	ldrb	r3, [r0, #4]
    6986:	2b01      	cmp	r3, #1
    6988:	d012      	beq.n	69b0 <hci_get_class+0x2c>
    698a:	2b0a      	cmp	r3, #10
    698c:	d818      	bhi.n	69c0 <hci_get_class+0x3c>
    698e:	2201      	movs	r2, #1
    6990:	0011      	movs	r1, r2
    6992:	4099      	lsls	r1, r3
    6994:	000b      	movs	r3, r1
    6996:	21b0      	movs	r1, #176	; 0xb0
    6998:	00c9      	lsls	r1, r1, #3
		case NODE_RX_TYPE_CHAN_SEL_ALGO:
#endif
#if defined(CONFIG_BT_CTLR_PHY)
		case NODE_RX_TYPE_PHY_UPDATE:
#endif /* CONFIG_BT_CTLR_PHY */
			return HCI_CLASS_EVT_CONNECTION;
    699a:	2002      	movs	r0, #2
    699c:	420b      	tst	r3, r1
    699e:	d10e      	bne.n	69be <hci_get_class+0x3a>
    69a0:	213c      	movs	r1, #60	; 0x3c
			return HCI_CLASS_EVT_DISCARDABLE;
    69a2:	0010      	movs	r0, r2
    69a4:	420b      	tst	r3, r1
    69a6:	d10a      	bne.n	69be <hci_get_class+0x3a>
    69a8:	099b      	lsrs	r3, r3, #6
    69aa:	4398      	bics	r0, r3
		default:
			return -1;
    69ac:	4240      	negs	r0, r0
    69ae:	e006      	b.n	69be <hci_get_class+0x3a>
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    69b0:	2303      	movs	r3, #3
    69b2:	7a00      	ldrb	r0, [r0, #8]
    69b4:	4018      	ands	r0, r3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    69b6:	3803      	subs	r0, #3
    69b8:	1e43      	subs	r3, r0, #1
    69ba:	4198      	sbcs	r0, r3
    69bc:	3002      	adds	r0, #2
	}
}
    69be:	4770      	bx	lr
			return -1;
    69c0:	2001      	movs	r0, #1
    69c2:	e7f3      	b.n	69ac <hci_get_class+0x28>

000069c4 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    69c4:	2001      	movs	r0, #1
    69c6:	4b05      	ldr	r3, [pc, #20]	; (69dc <hci_init+0x18>)
    69c8:	4905      	ldr	r1, [pc, #20]	; (69e0 <hci_init+0x1c>)
    69ca:	4240      	negs	r0, r0
    69cc:	6018      	str	r0, [r3, #0]
    69ce:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    69d0:	201f      	movs	r0, #31
    69d2:	2100      	movs	r1, #0
    69d4:	4b03      	ldr	r3, [pc, #12]	; (69e4 <hci_init+0x20>)
    69d6:	6018      	str	r0, [r3, #0]
    69d8:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    69da:	4770      	bx	lr
    69dc:	20002358 	.word	0x20002358
    69e0:	00001fff 	.word	0x00001fff
    69e4:	20002360 	.word	0x20002360

000069e8 <cpu_sleep>:
	__WFE();
    69e8:	bf20      	wfe
	__SEV();
    69ea:	bf40      	sev
	__WFE();
    69ec:	bf20      	wfe
}
    69ee:	4770      	bx	lr

000069f0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    69f0:	b570      	push	{r4, r5, r6, lr}
    69f2:	0006      	movs	r6, r0
    69f4:	000d      	movs	r5, r1
    69f6:	b088      	sub	sp, #32
	const u8_t ctrl_len_lut[] = {
    69f8:	ac01      	add	r4, sp, #4
    69fa:	221a      	movs	r2, #26
    69fc:	4905      	ldr	r1, [pc, #20]	; (6a14 <pdu_len_cmp+0x24>)
    69fe:	0020      	movs	r0, r4
    6a00:	f7fb f994 	bl	1d2c <memcpy>
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    6a04:	5da0      	ldrb	r0, [r4, r6]
    6a06:	1b40      	subs	r0, r0, r5
    6a08:	4243      	negs	r3, r0
    6a0a:	4158      	adcs	r0, r3
    6a0c:	b2c0      	uxtb	r0, r0
}
    6a0e:	b008      	add	sp, #32
    6a10:	bd70      	pop	{r4, r5, r6, pc}
    6a12:	46c0      	nop			; (mov r8, r8)
    6a14:	0000d3c3 	.word	0x0000d3c3

00006a18 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    6a18:	6008      	str	r0, [r1, #0]
}
    6a1a:	4770      	bx	lr

00006a1c <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    6a1c:	2800      	cmp	r0, #0
    6a1e:	d104      	bne.n	6a2a <prepare_reduced+0xe>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    6a20:	2380      	movs	r3, #128	; 0x80
    6a22:	680a      	ldr	r2, [r1, #0]
    6a24:	061b      	lsls	r3, r3, #24
    6a26:	4313      	orrs	r3, r2
    6a28:	600b      	str	r3, [r1, #0]
	}
}
    6a2a:	4770      	bx	lr

00006a2c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    6a2c:	2800      	cmp	r0, #0
    6a2e:	d103      	bne.n	6a38 <prepare_normal+0xc>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    6a30:	680b      	ldr	r3, [r1, #0]
    6a32:	005b      	lsls	r3, r3, #1
    6a34:	085b      	lsrs	r3, r3, #1
    6a36:	600b      	str	r3, [r1, #0]
	}
}
    6a38:	4770      	bx	lr

00006a3a <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    6a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a3c:	0002      	movs	r2, r0
    6a3e:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    6a40:	2701      	movs	r7, #1
	chan_next = 0;
    6a42:	2000      	movs	r0, #0
	while (byte_count--) {
    6a44:	42b2      	cmp	r2, r6
    6a46:	d100      	bne.n	6a4a <chan_sel_remap+0x10>

		chan_map++;
	}

	return chan_next;
}
    6a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a4a:	0004      	movs	r4, r0
		bite = *chan_map;
    6a4c:	7815      	ldrb	r5, [r2, #0]
    6a4e:	3408      	adds	r4, #8
    6a50:	b2e4      	uxtb	r4, r4
		while (bit_count--) {
    6a52:	42a0      	cmp	r0, r4
    6a54:	d101      	bne.n	6a5a <chan_sel_remap+0x20>
		chan_map++;
    6a56:	3201      	adds	r2, #1
    6a58:	e7f4      	b.n	6a44 <chan_sel_remap+0xa>
			if (bite & 0x01) {
    6a5a:	423d      	tst	r5, r7
    6a5c:	d003      	beq.n	6a66 <chan_sel_remap+0x2c>
				if (chan_index == 0) {
    6a5e:	2900      	cmp	r1, #0
    6a60:	d0f2      	beq.n	6a48 <chan_sel_remap+0xe>
				chan_index--;
    6a62:	3901      	subs	r1, #1
    6a64:	b2c9      	uxtb	r1, r1
			chan_next++;
    6a66:	3001      	adds	r0, #1
    6a68:	b2c0      	uxtb	r0, r0
			bite >>= 1;
    6a6a:	086d      	lsrs	r5, r5, #1
    6a6c:	e7f1      	b.n	6a52 <chan_sel_remap+0x18>
	...

00006a70 <packet_rx_reserve_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    6a70:	239b      	movs	r3, #155	; 0x9b
	    _radio.packet_rx_last) {
    6a72:	2136      	movs	r1, #54	; 0x36
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    6a74:	b530      	push	{r4, r5, lr}
	if (_radio.packet_rx_acquire >=
    6a76:	4a0d      	ldr	r2, [pc, #52]	; (6aac <packet_rx_reserve_get+0x3c>)
    6a78:	005b      	lsls	r3, r3, #1
	    _radio.packet_rx_last) {
    6a7a:	31ff      	adds	r1, #255	; 0xff
	if (_radio.packet_rx_acquire >=
    6a7c:	5cd3      	ldrb	r3, [r2, r3]
	    _radio.packet_rx_last) {
    6a7e:	5c54      	ldrb	r4, [r2, r1]
	if (_radio.packet_rx_acquire >=
    6a80:	42a3      	cmp	r3, r4
    6a82:	d30c      	bcc.n	6a9e <packet_rx_reserve_get+0x2e>
			_radio.packet_rx_last);
    6a84:	5c54      	ldrb	r4, [r2, r1]
			_radio.packet_rx_last +
    6a86:	1b1b      	subs	r3, r3, r4
    6a88:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
		return 0;
    6a8a:	2400      	movs	r4, #0
	if (count > packet_rx_acquired_count_get()) {
    6a8c:	4298      	cmp	r0, r3
    6a8e:	d804      	bhi.n	6a9a <packet_rx_reserve_get+0x2a>
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    6a90:	5c53      	ldrb	r3, [r2, r1]
    6a92:	32fc      	adds	r2, #252	; 0xfc
    6a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
    6a96:	009b      	lsls	r3, r3, #2
    6a98:	589c      	ldr	r4, [r3, r2]
}
    6a9a:	0020      	movs	r0, r4
    6a9c:	bd30      	pop	{r4, r5, pc}
		return (_radio.packet_rx_count -
    6a9e:	259a      	movs	r5, #154	; 0x9a
    6aa0:	006d      	lsls	r5, r5, #1
			_radio.packet_rx_last +
    6aa2:	5d55      	ldrb	r5, [r2, r5]
    6aa4:	5c54      	ldrb	r4, [r2, r1]
    6aa6:	195b      	adds	r3, r3, r5
    6aa8:	e7ed      	b.n	6a86 <packet_rx_reserve_get+0x16>
    6aaa:	46c0      	nop			; (mov r8, r8)
    6aac:	20000298 	.word	0x20000298

00006ab0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    6ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    6ab2:	0003      	movs	r3, r0
    6ab4:	0007      	movs	r7, r0
    6ab6:	335c      	adds	r3, #92	; 0x5c
    6ab8:	375d      	adds	r7, #93	; 0x5d
    6aba:	781b      	ldrb	r3, [r3, #0]
    6abc:	783d      	ldrb	r5, [r7, #0]
{
    6abe:	0004      	movs	r4, r0
		return 1;
    6ac0:	2001      	movs	r0, #1
	if (conn->llcp_req != conn->llcp_ack) {
    6ac2:	429d      	cmp	r5, r3
    6ac4:	d128      	bne.n	6b18 <conn_update_req+0x68>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    6ac6:	7f63      	ldrb	r3, [r4, #29]
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    6ac8:	1800      	adds	r0, r0, r0
	if (!conn->role) {
    6aca:	2b7f      	cmp	r3, #127	; 0x7f
    6acc:	d824      	bhi.n	6b18 <conn_update_req+0x68>
		conn->llcp.conn_upd.win_size = 1;
    6ace:	0023      	movs	r3, r4
    6ad0:	2601      	movs	r6, #1
    6ad2:	3370      	adds	r3, #112	; 0x70
    6ad4:	701e      	strb	r6, [r3, #0]
		conn->llcp.conn_upd.win_offset_us = 0;
    6ad6:	2300      	movs	r3, #0
    6ad8:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->llcp.conn_upd.interval = conn->conn_interval;
    6ada:	0023      	movs	r3, r4
    6adc:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    6ade:	3362      	adds	r3, #98	; 0x62
    6ae0:	8018      	strh	r0, [r3, #0]
		conn->llcp.conn_upd.latency = conn->latency;
    6ae2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
					      125 / 1000;
    6ae4:	21fa      	movs	r1, #250	; 0xfa
		conn->llcp.conn_upd.latency = conn->latency;
    6ae6:	805a      	strh	r2, [r3, #2]
					      conn->supervision_reload *
    6ae8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
					      125 / 1000;
    6aea:	0089      	lsls	r1, r1, #2
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    6aec:	4358      	muls	r0, r3
					      conn->supervision_reload *
    6aee:	237d      	movs	r3, #125	; 0x7d
    6af0:	4358      	muls	r0, r3
					      125 / 1000;
    6af2:	f7f9 fbb7 	bl	264 <__aeabi_idiv>
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    6af6:	0023      	movs	r3, r4
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    6af8:	0022      	movs	r2, r4
    6afa:	2103      	movs	r1, #3
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    6afc:	3366      	adds	r3, #102	; 0x66
    6afe:	8018      	strh	r0, [r3, #0]
		return 0;
    6b00:	2000      	movs	r0, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    6b02:	3260      	adds	r2, #96	; 0x60
    6b04:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    6b06:	345e      	adds	r4, #94	; 0x5e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    6b08:	438b      	bics	r3, r1
		conn->llcp.conn_upd.is_internal = 1;
    6b0a:	4333      	orrs	r3, r6
    6b0c:	1989      	adds	r1, r1, r6
    6b0e:	430b      	orrs	r3, r1
		conn->llcp_ack--;
    6b10:	3d01      	subs	r5, #1
		conn->llcp.conn_upd.is_internal = 1;
    6b12:	7013      	strb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    6b14:	7026      	strb	r6, [r4, #0]
		conn->llcp_ack--;
    6b16:	703d      	strb	r5, [r7, #0]
}
    6b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006b1c <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    6b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    6b1e:	780c      	ldrb	r4, [r1, #0]
{
    6b20:	b085      	sub	sp, #20
    6b22:	9001      	str	r0, [sp, #4]
    6b24:	9102      	str	r1, [sp, #8]
    6b26:	9203      	str	r2, [sp, #12]
	if (_first == last) {
		return 0;
    6b28:	2500      	movs	r5, #0
	if (_first == last) {
    6b2a:	4294      	cmp	r4, r2
    6b2c:	d039      	beq.n	6ba2 <tx_cmplt_get+0x86>
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    6b2e:	4e20      	ldr	r6, [pc, #128]	; (6bb0 <tx_cmplt_get+0x94>)
    6b30:	00e3      	lsls	r3, r4, #3
    6b32:	36fc      	adds	r6, #252	; 0xfc
    6b34:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    6b36:	5a9b      	ldrh	r3, [r3, r2]
    6b38:	8003      	strh	r3, [r0, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    6b3a:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    6b3c:	00e3      	lsls	r3, r4, #3
    6b3e:	18d3      	adds	r3, r2, r3
    6b40:	9a01      	ldr	r2, [sp, #4]
    6b42:	8811      	ldrh	r1, [r2, #0]
    6b44:	881a      	ldrh	r2, [r3, #0]
    6b46:	4291      	cmp	r1, r2
    6b48:	d129      	bne.n	6b9e <tx_cmplt_get+0x82>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    6b4a:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (void *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (void *)1) ||
    6b4c:	2801      	cmp	r0, #1
    6b4e:	d90d      	bls.n	6b6c <tx_cmplt_get+0x50>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    6b50:	2103      	movs	r1, #3
    6b52:	0002      	movs	r2, r0
    6b54:	438a      	bics	r2, r1
		if ((!node_tx) || (node_tx == (void *)1) ||
    6b56:	d027      	beq.n	6ba8 <tx_cmplt_get+0x8c>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    6b58:	1d02      	adds	r2, r0, #4
    6b5a:	d025      	beq.n	6ba8 <tx_cmplt_get+0x8c>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    6b5c:	7942      	ldrb	r2, [r0, #5]
    6b5e:	2a00      	cmp	r2, #0
    6b60:	d022      	beq.n	6ba8 <tx_cmplt_get+0x8c>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    6b62:	7902      	ldrb	r2, [r0, #4]
    6b64:	400a      	ands	r2, r1
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    6b66:	3a01      	subs	r2, #1
    6b68:	2a01      	cmp	r2, #1
    6b6a:	d81d      	bhi.n	6ba8 <tx_cmplt_get+0x8c>
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)1;
    6b6c:	2201      	movs	r2, #1

			cmplt++;
    6b6e:	18ad      	adds	r5, r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    6b70:	605a      	str	r2, [r3, #4]
			cmplt++;
    6b72:	b2ed      	uxtb	r5, r5
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    6b74:	2303      	movs	r3, #3
    6b76:	0002      	movs	r2, r0
    6b78:	4f0d      	ldr	r7, [pc, #52]	; (6bb0 <tx_cmplt_get+0x94>)
    6b7a:	439a      	bics	r2, r3
    6b7c:	d004      	beq.n	6b88 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    6b7e:	0039      	movs	r1, r7
    6b80:	3159      	adds	r1, #89	; 0x59
    6b82:	31ff      	adds	r1, #255	; 0xff
    6b84:	f7fe fa2d 	bl	4fe2 <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    6b88:	23b4      	movs	r3, #180	; 0xb4
    6b8a:	005b      	lsls	r3, r3, #1
		_first = _first + 1;
    6b8c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    6b8e:	5cfb      	ldrb	r3, [r7, r3]
		_first = _first + 1;
    6b90:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    6b92:	42a3      	cmp	r3, r4
    6b94:	d100      	bne.n	6b98 <tx_cmplt_get+0x7c>
			_first = 0;
    6b96:	2400      	movs	r4, #0
		}

	} while (_first != last);
    6b98:	9b03      	ldr	r3, [sp, #12]
    6b9a:	429c      	cmp	r4, r3
    6b9c:	d1cd      	bne.n	6b3a <tx_cmplt_get+0x1e>

	*first = _first;
    6b9e:	9b02      	ldr	r3, [sp, #8]
    6ba0:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    6ba2:	0028      	movs	r0, r5
    6ba4:	b005      	add	sp, #20
    6ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    6ba8:	2202      	movs	r2, #2
    6baa:	605a      	str	r2, [r3, #4]
    6bac:	e7e2      	b.n	6b74 <tx_cmplt_get+0x58>
    6bae:	46c0      	nop			; (mov r8, r8)
    6bb0:	20000298 	.word	0x20000298

00006bb4 <connection_get>:
	if (handle < _radio.connection_count) {
    6bb4:	4b0a      	ldr	r3, [pc, #40]	; (6be0 <connection_get+0x2c>)
{
    6bb6:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    6bb8:	001a      	movs	r2, r3
    6bba:	32ff      	adds	r2, #255	; 0xff
    6bbc:	7b52      	ldrb	r2, [r2, #13]
{
    6bbe:	0004      	movs	r4, r0
	if (handle < _radio.connection_count) {
    6bc0:	4282      	cmp	r2, r0
    6bc2:	d90b      	bls.n	6bdc <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    6bc4:	2182      	movs	r1, #130	; 0x82
    6bc6:	33fc      	adds	r3, #252	; 0xfc
    6bc8:	0002      	movs	r2, r0
    6bca:	0049      	lsls	r1, r1, #1
    6bcc:	6898      	ldr	r0, [r3, #8]
    6bce:	f7fe fa1e 	bl	500e <mem_get>
		if ((conn) && (conn->handle == handle)) {
    6bd2:	2800      	cmp	r0, #0
    6bd4:	d002      	beq.n	6bdc <connection_get+0x28>
    6bd6:	8c03      	ldrh	r3, [r0, #32]
    6bd8:	42a3      	cmp	r3, r4
    6bda:	d000      	beq.n	6bde <connection_get+0x2a>
	return 0;
    6bdc:	2000      	movs	r0, #0
}
    6bde:	bd10      	pop	{r4, pc}
    6be0:	20000298 	.word	0x20000298

00006be4 <role_disable>:
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    6be4:	2302      	movs	r3, #2
{
    6be6:	b5f0      	push	{r4, r5, r6, r7, lr}
    6be8:	b089      	sub	sp, #36	; 0x24
    6bea:	0004      	movs	r4, r0
    6bec:	000f      	movs	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    6bee:	9304      	str	r3, [sp, #16]
	switch (ticker_id_primary) {
    6bf0:	2805      	cmp	r0, #5
    6bf2:	d00f      	beq.n	6c14 <role_disable+0x30>
    6bf4:	2806      	cmp	r0, #6
    6bf6:	d100      	bne.n	6bfa <role_disable+0x16>
    6bf8:	e090      	b.n	6d1c <role_disable+0x138>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6bfa:	d800      	bhi.n	6bfe <role_disable+0x1a>
    6bfc:	e08b      	b.n	6d16 <role_disable+0x132>
			conn_handle = ticker_id_primary -
    6bfe:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    6c00:	b280      	uxth	r0, r0
    6c02:	f7ff ffd7 	bl	6bb4 <connection_get>
			if (!conn) {
    6c06:	2800      	cmp	r0, #0
    6c08:	d100      	bne.n	6c0c <role_disable+0x28>
    6c0a:	e0df      	b.n	6dcc <role_disable+0x1e8>
			ticks_xtal_to_start =
    6c0c:	6803      	ldr	r3, [r0, #0]
    6c0e:	9303      	str	r3, [sp, #12]
			ticks_active_to_start =
    6c10:	6843      	ldr	r3, [r0, #4]
    6c12:	e08a      	b.n	6d2a <role_disable+0x146>
		ticks_xtal_to_start =
    6c14:	4b6e      	ldr	r3, [pc, #440]	; (6dd0 <role_disable+0x1ec>)
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c16:	2000      	movs	r0, #0
		ticks_xtal_to_start =
    6c18:	695a      	ldr	r2, [r3, #20]
		ticks_active_to_start =
    6c1a:	699b      	ldr	r3, [r3, #24]
		ticks_xtal_to_start =
    6c1c:	9203      	str	r2, [sp, #12]
		ticks_active_to_start =
    6c1e:	9302      	str	r3, [sp, #8]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c20:	ab04      	add	r3, sp, #16
    6c22:	9300      	str	r3, [sp, #0]
    6c24:	000a      	movs	r2, r1
    6c26:	4b6b      	ldr	r3, [pc, #428]	; (6dd4 <role_disable+0x1f0>)
    6c28:	2103      	movs	r1, #3
    6c2a:	f7ff f87d 	bl	5d28 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    6c2e:	2802      	cmp	r0, #2
    6c30:	d069      	beq.n	6d06 <role_disable+0x122>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    6c32:	9b04      	ldr	r3, [sp, #16]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d16a      	bne.n	6d0e <role_disable+0x12a>
	LL_ASSERT(!_radio.ticker_id_stop);
    6c38:	4d65      	ldr	r5, [pc, #404]	; (6dd0 <role_disable+0x1ec>)
    6c3a:	7ba8      	ldrb	r0, [r5, #14]
    6c3c:	b2c0      	uxtb	r0, r0
    6c3e:	2800      	cmp	r0, #0
    6c40:	d169      	bne.n	6d16 <role_disable+0x132>
	ret_cb = TICKER_STATUS_BUSY;
    6c42:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c44:	4e63      	ldr	r6, [pc, #396]	; (6dd4 <role_disable+0x1f0>)
	_radio.ticker_id_stop = ticker_id_primary;
    6c46:	73ac      	strb	r4, [r5, #14]
	ret_cb = TICKER_STATUS_BUSY;
    6c48:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c4a:	ab04      	add	r3, sp, #16
    6c4c:	9300      	str	r3, [sp, #0]
    6c4e:	0022      	movs	r2, r4
    6c50:	0033      	movs	r3, r6
    6c52:	2103      	movs	r1, #3
    6c54:	f7ff f868 	bl	5d28 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    6c58:	2802      	cmp	r0, #2
    6c5a:	d100      	bne.n	6c5e <role_disable+0x7a>
    6c5c:	e067      	b.n	6d2e <role_disable+0x14a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    6c5e:	9b04      	ldr	r3, [sp, #16]
    6c60:	4d5b      	ldr	r5, [pc, #364]	; (6dd0 <role_disable+0x1ec>)
    6c62:	2b00      	cmp	r3, #0
    6c64:	d148      	bne.n	6cf8 <role_disable+0x114>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    6c66:	7b2b      	ldrb	r3, [r5, #12]
    6c68:	429c      	cmp	r4, r3
    6c6a:	d002      	beq.n	6c72 <role_disable+0x8e>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    6c6c:	7b6b      	ldrb	r3, [r5, #13]
    6c6e:	429c      	cmp	r4, r3
    6c70:	d13d      	bne.n	6cee <role_disable+0x10a>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6c72:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c74:	2200      	movs	r2, #0
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6c76:	9305      	str	r3, [sp, #20]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c78:	ab05      	add	r3, sp, #20
    6c7a:	9300      	str	r3, [sp, #0]
    6c7c:	2103      	movs	r1, #3
    6c7e:	0033      	movs	r3, r6
    6c80:	0010      	movs	r0, r2
    6c82:	f7ff f851 	bl	5d28 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    6c86:	2802      	cmp	r0, #2
    6c88:	d107      	bne.n	6c9a <role_disable+0xb6>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    6c8a:	2201      	movs	r2, #1
    6c8c:	0011      	movs	r1, r2
    6c8e:	1880      	adds	r0, r0, r2
    6c90:	f7fe fa20 	bl	50d4 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    6c94:	9b05      	ldr	r3, [sp, #20]
    6c96:	2b02      	cmp	r3, #2
    6c98:	d03d      	beq.n	6d16 <role_disable+0x132>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    6c9a:	9805      	ldr	r0, [sp, #20]
    6c9c:	2800      	cmp	r0, #0
    6c9e:	d162      	bne.n	6d66 <role_disable+0x182>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    6ca0:	2302      	movs	r3, #2
    6ca2:	9306      	str	r3, [sp, #24]
		LL_ASSERT(_radio.ticker_id_prepare);
    6ca4:	7b2b      	ldrb	r3, [r5, #12]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d035      	beq.n	6d16 <role_disable+0x132>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6caa:	ab06      	add	r3, sp, #24
		_radio.ticker_id_prepare = 0;
    6cac:	7328      	strb	r0, [r5, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6cae:	2201      	movs	r2, #1
    6cb0:	9300      	str	r3, [sp, #0]
    6cb2:	2103      	movs	r1, #3
    6cb4:	0033      	movs	r3, r6
    6cb6:	f7ff f837 	bl	5d28 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    6cba:	2802      	cmp	r0, #2
    6cbc:	d107      	bne.n	6cce <role_disable+0xea>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    6cbe:	2201      	movs	r2, #1
    6cc0:	0011      	movs	r1, r2
    6cc2:	1880      	adds	r0, r0, r2
    6cc4:	f7fe fa06 	bl	50d4 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    6cc8:	9b06      	ldr	r3, [sp, #24]
    6cca:	2b02      	cmp	r3, #2
    6ccc:	d023      	beq.n	6d16 <role_disable+0x132>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    6cce:	9906      	ldr	r1, [sp, #24]
    6cd0:	2900      	cmp	r1, #0
    6cd2:	d13b      	bne.n	6d4c <role_disable+0x168>
			ticks_xtal_to_start &= ~XON_BITMASK;
    6cd4:	9b03      	ldr	r3, [sp, #12]
			if (ticks_active_to_start > ticks_xtal_to_start) {
    6cd6:	9a02      	ldr	r2, [sp, #8]
			ticks_xtal_to_start &= ~XON_BITMASK;
    6cd8:	005b      	lsls	r3, r3, #1
    6cda:	085b      	lsrs	r3, r3, #1
			if (ticks_active_to_start > ticks_xtal_to_start) {
    6cdc:	429a      	cmp	r2, r3
    6cde:	d940      	bls.n	6d62 <role_disable+0x17e>
				ret = mayfly_enqueue(
    6ce0:	4b3d      	ldr	r3, [pc, #244]	; (6dd8 <role_disable+0x1f4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    6ce2:	000a      	movs	r2, r1
    6ce4:	2003      	movs	r0, #3
    6ce6:	f7fe fa19 	bl	511c <mayfly_enqueue>
			LL_ASSERT(!ret);
    6cea:	2800      	cmp	r0, #0
    6cec:	d113      	bne.n	6d16 <role_disable+0x132>
	if (!_radio.ticker_id_stop) {
    6cee:	7bab      	ldrb	r3, [r5, #14]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d101      	bne.n	6cf8 <role_disable+0x114>
		ret_cb = TICKER_STATUS_FAILURE;
    6cf4:	3301      	adds	r3, #1
    6cf6:	9304      	str	r3, [sp, #16]
	_radio.ticker_id_stop = 0;
    6cf8:	2300      	movs	r3, #0
    6cfa:	73ab      	strb	r3, [r5, #14]
	return ret_cb;
    6cfc:	9804      	ldr	r0, [sp, #16]
}
    6cfe:	b009      	add	sp, #36	; 0x24
    6d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
				cpu_sleep();
    6d02:	f7ff fe71 	bl	69e8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    6d06:	9b04      	ldr	r3, [sp, #16]
    6d08:	2b02      	cmp	r3, #2
    6d0a:	d0fa      	beq.n	6d02 <role_disable+0x11e>
    6d0c:	e791      	b.n	6c32 <role_disable+0x4e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    6d0e:	9b04      	ldr	r3, [sp, #16]
    6d10:	2b01      	cmp	r3, #1
    6d12:	d100      	bne.n	6d16 <role_disable+0x132>
    6d14:	e790      	b.n	6c38 <role_disable+0x54>
		LL_ASSERT(0);
    6d16:	b662      	cpsie	i
    6d18:	2004      	movs	r0, #4
    6d1a:	df02      	svc	2
		ticks_xtal_to_start =
    6d1c:	4b2c      	ldr	r3, [pc, #176]	; (6dd0 <role_disable+0x1ec>)
    6d1e:	001a      	movs	r2, r3
    6d20:	32cc      	adds	r2, #204	; 0xcc
    6d22:	6812      	ldr	r2, [r2, #0]
		ticks_active_to_start =
    6d24:	33d0      	adds	r3, #208	; 0xd0
    6d26:	681b      	ldr	r3, [r3, #0]
		ticks_xtal_to_start =
    6d28:	9203      	str	r2, [sp, #12]
			ticks_active_to_start =
    6d2a:	9302      	str	r3, [sp, #8]
		break;
    6d2c:	e784      	b.n	6c38 <role_disable+0x54>
		if (_radio.ticker_id_event == ticker_id_primary) {
    6d2e:	7b6b      	ldrb	r3, [r5, #13]
    6d30:	429c      	cmp	r4, r3
    6d32:	d104      	bne.n	6d3e <role_disable+0x15a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    6d34:	2201      	movs	r2, #1
    6d36:	2003      	movs	r0, #3
    6d38:	0011      	movs	r1, r2
    6d3a:	f7fe f9cb 	bl	50d4 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    6d3e:	9b04      	ldr	r3, [sp, #16]
    6d40:	2b02      	cmp	r3, #2
    6d42:	d000      	beq.n	6d46 <role_disable+0x162>
    6d44:	e78b      	b.n	6c5e <role_disable+0x7a>
			cpu_sleep();
    6d46:	f7ff fe4f 	bl	69e8 <cpu_sleep>
    6d4a:	e7f8      	b.n	6d3e <role_disable+0x15a>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    6d4c:	9b06      	ldr	r3, [sp, #24]
    6d4e:	2b01      	cmp	r3, #1
    6d50:	d1e1      	bne.n	6d16 <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    6d52:	2200      	movs	r2, #0
    6d54:	4b20      	ldr	r3, [pc, #128]	; (6dd8 <role_disable+0x1f4>)
    6d56:	0011      	movs	r1, r2
    6d58:	2003      	movs	r0, #3
    6d5a:	f7fe f9df 	bl	511c <mayfly_enqueue>
    6d5e:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    6d60:	d1d9      	bne.n	6d16 <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    6d62:	4b1e      	ldr	r3, [pc, #120]	; (6ddc <role_disable+0x1f8>)
    6d64:	e7bd      	b.n	6ce2 <role_disable+0xfe>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    6d66:	9c05      	ldr	r4, [sp, #20]
    6d68:	2c01      	cmp	r4, #1
    6d6a:	d1d4      	bne.n	6d16 <role_disable+0x132>
		if (ticker_id_stop != TICKER_NULL) {
    6d6c:	2fff      	cmp	r7, #255	; 0xff
    6d6e:	d019      	beq.n	6da4 <role_disable+0x1c0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    6d70:	2302      	movs	r3, #2
    6d72:	9307      	str	r3, [sp, #28]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d74:	ab07      	add	r3, sp, #28
    6d76:	9300      	str	r3, [sp, #0]
    6d78:	003a      	movs	r2, r7
    6d7a:	0033      	movs	r3, r6
    6d7c:	2103      	movs	r1, #3
    6d7e:	2000      	movs	r0, #0
    6d80:	f7fe ffd2 	bl	5d28 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    6d84:	2802      	cmp	r0, #2
    6d86:	d107      	bne.n	6d98 <role_disable+0x1b4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    6d88:	0022      	movs	r2, r4
    6d8a:	0021      	movs	r1, r4
    6d8c:	3001      	adds	r0, #1
    6d8e:	f7fe f9a1 	bl	50d4 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    6d92:	9b07      	ldr	r3, [sp, #28]
    6d94:	2b02      	cmp	r3, #2
    6d96:	d0be      	beq.n	6d16 <role_disable+0x132>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    6d98:	9b07      	ldr	r3, [sp, #28]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d002      	beq.n	6da4 <role_disable+0x1c0>
    6d9e:	9b07      	ldr	r3, [sp, #28]
    6da0:	2b01      	cmp	r3, #1
    6da2:	d1b8      	bne.n	6d16 <role_disable+0x132>
		if (_radio.role != ROLE_NONE) {
    6da4:	7beb      	ldrb	r3, [r5, #15]
    6da6:	2b00      	cmp	r3, #0
    6da8:	d0a1      	beq.n	6cee <role_disable+0x10a>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    6daa:	2204      	movs	r2, #4
    6dac:	4b0c      	ldr	r3, [pc, #48]	; (6de0 <role_disable+0x1fc>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    6dae:	2003      	movs	r0, #3
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    6db0:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    6db2:	2200      	movs	r2, #0
    6db4:	0011      	movs	r1, r2
    6db6:	f7fe f9b1 	bl	511c <mayfly_enqueue>
			LL_ASSERT(!ret);
    6dba:	2800      	cmp	r0, #0
    6dbc:	d1ab      	bne.n	6d16 <role_disable+0x132>
			while (_radio.role != ROLE_NONE) {
    6dbe:	7beb      	ldrb	r3, [r5, #15]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d100      	bne.n	6dc6 <role_disable+0x1e2>
    6dc4:	e793      	b.n	6cee <role_disable+0x10a>
				cpu_sleep();
    6dc6:	f7ff fe0f 	bl	69e8 <cpu_sleep>
    6dca:	e7f8      	b.n	6dbe <role_disable+0x1da>
				return 1;
    6dcc:	2001      	movs	r0, #1
    6dce:	e796      	b.n	6cfe <role_disable+0x11a>
    6dd0:	20000298 	.word	0x20000298
    6dd4:	00006a19 	.word	0x00006a19
    6dd8:	20002398 	.word	0x20002398
    6ddc:	20002428 	.word	0x20002428
    6de0:	200023d8 	.word	0x200023d8

00006de4 <sched_after_mstr_free_slot_get>:
{
    6de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6de6:	b08f      	sub	sp, #60	; 0x3c
    6de8:	001f      	movs	r7, r3
    6dea:	9209      	str	r2, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    6dec:	1d0b      	adds	r3, r1, #4
	ticker_id = ticker_id_prev = 0xff;
    6dee:	2217      	movs	r2, #23
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    6df0:	2400      	movs	r4, #0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    6df2:	9308      	str	r3, [sp, #32]
	ticker_id = ticker_id_prev = 0xff;
    6df4:	23ff      	movs	r3, #255	; 0xff
    6df6:	a906      	add	r1, sp, #24
    6df8:	1852      	adds	r2, r2, r1
{
    6dfa:	9007      	str	r0, [sp, #28]
	ticker_id = ticker_id_prev = 0xff;
    6dfc:	7013      	strb	r3, [r2, #0]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    6dfe:	603c      	str	r4, [r7, #0]
    6e00:	940c      	str	r4, [sp, #48]	; 0x30
	ticker_id = ticker_id_prev = 0xff;
    6e02:	9306      	str	r3, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    6e04:	9405      	str	r4, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    6e06:	2302      	movs	r3, #2
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6e08:	2517      	movs	r5, #23
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    6e0a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6e0c:	ab06      	add	r3, sp, #24
    6e0e:	18ed      	adds	r5, r5, r3
    6e10:	ab0d      	add	r3, sp, #52	; 0x34
    6e12:	9302      	str	r3, [sp, #8]
    6e14:	4b36      	ldr	r3, [pc, #216]	; (6ef0 <sched_after_mstr_free_slot_get+0x10c>)
    6e16:	002a      	movs	r2, r5
    6e18:	9301      	str	r3, [sp, #4]
    6e1a:	ab0c      	add	r3, sp, #48	; 0x30
    6e1c:	9300      	str	r3, [sp, #0]
    6e1e:	9907      	ldr	r1, [sp, #28]
    6e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6e22:	2000      	movs	r0, #0
    6e24:	f7fe ffae 	bl	5d84 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    6e28:	2802      	cmp	r0, #2
    6e2a:	d009      	beq.n	6e40 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    6e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d00a      	beq.n	6e48 <sched_after_mstr_free_slot_get+0x64>
    6e32:	b662      	cpsie	i
    6e34:	2004      	movs	r0, #4
    6e36:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6e38:	9907      	ldr	r1, [sp, #28]
    6e3a:	2000      	movs	r0, #0
    6e3c:	f7ff f808 	bl	5e50 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    6e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6e42:	2b02      	cmp	r3, #2
    6e44:	d0f8      	beq.n	6e38 <sched_after_mstr_free_slot_get+0x54>
    6e46:	e7f1      	b.n	6e2c <sched_after_mstr_free_slot_get+0x48>
		if (ticker_id == 0xff) {
    6e48:	782a      	ldrb	r2, [r5, #0]
    6e4a:	2aff      	cmp	r2, #255	; 0xff
    6e4c:	d04c      	beq.n	6ee8 <sched_after_mstr_free_slot_get+0x104>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6e4e:	2a06      	cmp	r2, #6
    6e50:	d9d9      	bls.n	6e06 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    6e52:	4b28      	ldr	r3, [pc, #160]	; (6ef4 <sched_after_mstr_free_slot_get+0x110>)
    6e54:	0019      	movs	r1, r3
    6e56:	31ff      	adds	r1, #255	; 0xff
    6e58:	7b49      	ldrb	r1, [r1, #13]
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    6e5a:	3107      	adds	r1, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6e5c:	428a      	cmp	r2, r1
    6e5e:	dad2      	bge.n	6e06 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6e60:	2182      	movs	r1, #130	; 0x82
    6e62:	3a07      	subs	r2, #7
    6e64:	33fc      	adds	r3, #252	; 0xfc
    6e66:	b292      	uxth	r2, r2
    6e68:	0049      	lsls	r1, r1, #1
    6e6a:	6898      	ldr	r0, [r3, #8]
    6e6c:	f7fe f8cf 	bl	500e <mem_get>
		if (conn && !conn->role) {
    6e70:	2800      	cmp	r0, #0
    6e72:	d0c8      	beq.n	6e06 <sched_after_mstr_free_slot_get+0x22>
    6e74:	7f43      	ldrb	r3, [r0, #29]
    6e76:	2b7f      	cmp	r3, #127	; 0x7f
    6e78:	d8c5      	bhi.n	6e06 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6e7a:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    6e7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    6e7e:	6842      	ldr	r2, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6e80:	2b00      	cmp	r3, #0
    6e82:	da15      	bge.n	6eb0 <sched_after_mstr_free_slot_get+0xcc>
				ticks_slot_abs_curr =
    6e84:	005b      	lsls	r3, r3, #1
    6e86:	085d      	lsrs	r5, r3, #1
				u32_t ticks_prepare_to_start =
    6e88:	6883      	ldr	r3, [r0, #8]
    6e8a:	4293      	cmp	r3, r2
    6e8c:	d200      	bcs.n	6e90 <sched_after_mstr_free_slot_get+0xac>
    6e8e:	0013      	movs	r3, r2
    6e90:	199e      	adds	r6, r3, r6
				ticks_to_expire_normal -=
    6e92:	1b76      	subs	r6, r6, r5
			ticks_slot_abs_curr +=
    6e94:	68c3      	ldr	r3, [r0, #12]
    6e96:	3304      	adds	r3, #4
    6e98:	195d      	adds	r5, r3, r5
			if ((ticker_id_prev != 0xFF) &&
    6e9a:	9b06      	ldr	r3, [sp, #24]
    6e9c:	2bff      	cmp	r3, #255	; 0xff
    6e9e:	d10c      	bne.n	6eba <sched_after_mstr_free_slot_get+0xd6>
			ticker_id_prev = ticker_id;
    6ea0:	2317      	movs	r3, #23
    6ea2:	aa06      	add	r2, sp, #24
    6ea4:	189b      	adds	r3, r3, r2
    6ea6:	781b      	ldrb	r3, [r3, #0]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    6ea8:	002c      	movs	r4, r5
			ticker_id_prev = ticker_id;
    6eaa:	9306      	str	r3, [sp, #24]
			ticks_to_expire_prev = ticks_to_expire_normal;
    6eac:	9605      	str	r6, [sp, #20]
    6eae:	e7aa      	b.n	6e06 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    6eb0:	0015      	movs	r5, r2
    6eb2:	429a      	cmp	r2, r3
    6eb4:	d2ee      	bcs.n	6e94 <sched_after_mstr_free_slot_get+0xb0>
    6eb6:	001d      	movs	r5, r3
    6eb8:	e7ec      	b.n	6e94 <sched_after_mstr_free_slot_get+0xb0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    6eba:	9905      	ldr	r1, [sp, #20]
    6ebc:	0030      	movs	r0, r6
    6ebe:	f7fe ffdb 	bl	5e78 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    6ec2:	9b08      	ldr	r3, [sp, #32]
    6ec4:	18e3      	adds	r3, r4, r3
			if ((ticker_id_prev != 0xFF) &&
    6ec6:	4298      	cmp	r0, r3
    6ec8:	d9ea      	bls.n	6ea0 <sched_after_mstr_free_slot_get+0xbc>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    6eca:	9b05      	ldr	r3, [sp, #20]
    6ecc:	4a0a      	ldr	r2, [pc, #40]	; (6ef8 <sched_after_mstr_free_slot_get+0x114>)
    6ece:	1918      	adds	r0, r3, r4
    6ed0:	2100      	movs	r1, #0
    6ed2:	2307      	movs	r3, #7
    6ed4:	f7f9 fa60 	bl	398 <__aeabi_lmul>
    6ed8:	4a08      	ldr	r2, [pc, #32]	; (6efc <sched_after_mstr_free_slot_get+0x118>)
    6eda:	2300      	movs	r3, #0
    6edc:	f7f9 fa3c 	bl	358 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    6ee0:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    6ee2:	6038      	str	r0, [r7, #0]
}
    6ee4:	b00f      	add	sp, #60	; 0x3c
    6ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ticker_id_prev != 0xff) {
    6ee8:	9b06      	ldr	r3, [sp, #24]
    6eea:	2bff      	cmp	r3, #255	; 0xff
    6eec:	d1ed      	bne.n	6eca <sched_after_mstr_free_slot_get+0xe6>
    6eee:	e7f9      	b.n	6ee4 <sched_after_mstr_free_slot_get+0x100>
    6ef0:	00006a19 	.word	0x00006a19
    6ef4:	20000298 	.word	0x20000298
    6ef8:	1afd498d 	.word	0x1afd498d
    6efc:	3b9aca00 	.word	0x3b9aca00

00006f00 <isr_adv_ci_adva_check>:
{
    6f00:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    6f02:	7804      	ldrb	r4, [r0, #0]
    6f04:	780a      	ldrb	r2, [r1, #0]
    6f06:	0665      	lsls	r5, r4, #25
    6f08:	0fed      	lsrs	r5, r5, #31
    6f0a:	09d2      	lsrs	r2, r2, #7
    6f0c:	2300      	movs	r3, #0
    6f0e:	4295      	cmp	r5, r2
    6f10:	d10d      	bne.n	6f2e <isr_adv_ci_adva_check+0x2e>
    6f12:	330f      	adds	r3, #15
    6f14:	3108      	adds	r1, #8
    6f16:	401c      	ands	r4, r3
    6f18:	000e      	movs	r6, r1
    6f1a:	1c85      	adds	r5, r0, #2
    6f1c:	2c01      	cmp	r4, #1
    6f1e:	d008      	beq.n	6f32 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    6f20:	2206      	movs	r2, #6
    6f22:	0031      	movs	r1, r6
    6f24:	0028      	movs	r0, r5
    6f26:	f7fa fedd 	bl	1ce4 <memcmp>
	return (adv->tx_addr == ci->rx_addr) &&
    6f2a:	4243      	negs	r3, r0
    6f2c:	4143      	adcs	r3, r0
    6f2e:	0018      	movs	r0, r3
}
    6f30:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    6f32:	2206      	movs	r2, #6
    6f34:	0028      	movs	r0, r5
    6f36:	f7fa fed5 	bl	1ce4 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    6f3a:	2800      	cmp	r0, #0
    6f3c:	d1f0      	bne.n	6f20 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    6f3e:	0023      	movs	r3, r4
    6f40:	e7f5      	b.n	6f2e <isr_adv_ci_adva_check+0x2e>
	...

00006f44 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    6f44:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    6f46:	21ba      	movs	r1, #186	; 0xba
    6f48:	2476      	movs	r4, #118	; 0x76
    6f4a:	4a0b      	ldr	r2, [pc, #44]	; (6f78 <rx_fc_lock+0x34>)
    6f4c:	0049      	lsls	r1, r1, #1
    6f4e:	34ff      	adds	r4, #255	; 0xff
    6f50:	5c53      	ldrb	r3, [r2, r1]
    6f52:	5d14      	ldrb	r4, [r2, r4]
    6f54:	429c      	cmp	r4, r3
    6f56:	d10d      	bne.n	6f74 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    6f58:	5c53      	ldrb	r3, [r2, r1]
    6f5a:	33b4      	adds	r3, #180	; 0xb4
    6f5c:	005b      	lsls	r3, r3, #1
    6f5e:	18d3      	adds	r3, r2, r3
    6f60:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
    6f62:	5c53      	ldrb	r3, [r2, r1]
    6f64:	3301      	adds	r3, #1
    6f66:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
    6f68:	2b03      	cmp	r3, #3
    6f6a:	d100      	bne.n	6f6e <rx_fc_lock+0x2a>
			req = 0;
    6f6c:	2300      	movs	r3, #0
		}
		_radio.fc_req = req;
    6f6e:	21ba      	movs	r1, #186	; 0xba
    6f70:	0049      	lsls	r1, r1, #1
    6f72:	5453      	strb	r3, [r2, r1]
	}
}
    6f74:	bd10      	pop	{r4, pc}
    6f76:	46c0      	nop			; (mov r8, r8)
    6f78:	20000298 	.word	0x20000298

00006f7c <ticker_job_disable>:
{
    6f7c:	b510      	push	{r4, lr}
	if (_radio.state != STATE_NONE) {
    6f7e:	4b05      	ldr	r3, [pc, #20]	; (6f94 <ticker_job_disable+0x18>)
    6f80:	7c1b      	ldrb	r3, [r3, #16]
    6f82:	2b00      	cmp	r3, #0
    6f84:	d004      	beq.n	6f90 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6f86:	2101      	movs	r1, #1
    6f88:	2200      	movs	r2, #0
    6f8a:	0008      	movs	r0, r1
    6f8c:	f7fe f8a2 	bl	50d4 <mayfly_enable>
}
    6f90:	bd10      	pop	{r4, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	20000298 	.word	0x20000298

00006f98 <hdr_conn_get>:
{
    6f98:	b510      	push	{r4, lr}
    6f9a:	000c      	movs	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6f9c:	2806      	cmp	r0, #6
    6f9e:	d90a      	bls.n	6fb6 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6fa0:	2182      	movs	r1, #130	; 0x82
    6fa2:	4b0b      	ldr	r3, [pc, #44]	; (6fd0 <hdr_conn_get+0x38>)
    6fa4:	3807      	subs	r0, #7
    6fa6:	33fc      	adds	r3, #252	; 0xfc
    6fa8:	b282      	uxth	r2, r0
    6faa:	0049      	lsls	r1, r1, #1
    6fac:	6898      	ldr	r0, [r3, #8]
    6fae:	f7fe f82e 	bl	500e <mem_get>
    6fb2:	6020      	str	r0, [r4, #0]
}
    6fb4:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    6fb6:	2805      	cmp	r0, #5
    6fb8:	d003      	beq.n	6fc2 <hdr_conn_get+0x2a>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    6fba:	2806      	cmp	r0, #6
    6fbc:	d004      	beq.n	6fc8 <hdr_conn_get+0x30>
	return NULL;
    6fbe:	2000      	movs	r0, #0
    6fc0:	e7f8      	b.n	6fb4 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    6fc2:	4803      	ldr	r0, [pc, #12]	; (6fd0 <hdr_conn_get+0x38>)
    6fc4:	3014      	adds	r0, #20
    6fc6:	e7f5      	b.n	6fb4 <hdr_conn_get+0x1c>
		return &_radio.scanner.hdr;
    6fc8:	4801      	ldr	r0, [pc, #4]	; (6fd0 <hdr_conn_get+0x38>)
    6fca:	30cc      	adds	r0, #204	; 0xcc
    6fcc:	e7f2      	b.n	6fb4 <hdr_conn_get+0x1c>
    6fce:	46c0      	nop			; (mov r8, r8)
    6fd0:	20000298 	.word	0x20000298

00006fd4 <mayfly_xtal_retain.part.15>:
			s_xtal_retained = 0;
    6fd4:	2200      	movs	r2, #0
    6fd6:	4b09      	ldr	r3, [pc, #36]	; (6ffc <mayfly_xtal_retain.part.15+0x28>)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    6fd8:	b510      	push	{r4, lr}
			s_xtal_retained = 0;
    6fda:	701a      	strb	r2, [r3, #0]
    6fdc:	4b08      	ldr	r3, [pc, #32]	; (7000 <mayfly_xtal_retain.part.15+0x2c>)
			switch (caller_id) {
    6fde:	4290      	cmp	r0, r2
    6fe0:	d002      	beq.n	6fe8 <mayfly_xtal_retain.part.15+0x14>
    6fe2:	2801      	cmp	r0, #1
    6fe4:	d106      	bne.n	6ff4 <mayfly_xtal_retain.part.15+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    6fe6:	3310      	adds	r3, #16
			retval = mayfly_enqueue(caller_id,
    6fe8:	2200      	movs	r2, #0
    6fea:	0011      	movs	r1, r2
    6fec:	f7fe f896 	bl	511c <mayfly_enqueue>
			LL_ASSERT(!retval);
    6ff0:	2800      	cmp	r0, #0
    6ff2:	d002      	beq.n	6ffa <mayfly_xtal_retain.part.15+0x26>
    6ff4:	b662      	cpsie	i
    6ff6:	2004      	movs	r0, #4
    6ff8:	df02      	svc	2
}
    6ffa:	bd10      	pop	{r4, pc}
    6ffc:	2000049c 	.word	0x2000049c
    7000:	20002438 	.word	0x20002438

00007004 <rx_packet_set>:
{
    7004:	b570      	push	{r4, r5, r6, lr}
    7006:	000d      	movs	r5, r1
	radio_phy_set(phy, 0);
    7008:	2100      	movs	r1, #0
{
    700a:	0004      	movs	r4, r0
	radio_phy_set(phy, 0);
    700c:	0008      	movs	r0, r1
    700e:	f004 fa23 	bl	b458 <radio_phy_set>
	if (conn->enc_rx) {
    7012:	0023      	movs	r3, r4
    7014:	33a8      	adds	r3, #168	; 0xa8
    7016:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    7018:	2201      	movs	r2, #1
	if (conn->enc_rx) {
    701a:	06db      	lsls	r3, r3, #27
    701c:	d50c      	bpl.n	7038 <rx_packet_set+0x34>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    701e:	211f      	movs	r1, #31
    7020:	2008      	movs	r0, #8
    7022:	f004 fa67 	bl	b4f4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    7026:	0020      	movs	r0, r4
    7028:	002a      	movs	r2, r5
    702a:	30a9      	adds	r0, #169	; 0xa9
    702c:	2100      	movs	r1, #0
    702e:	f004 fc75 	bl	b91c <radio_ccm_rx_pkt_set>
		radio_pkt_rx_set(pdu_data_rx);
    7032:	f004 fa85 	bl	b540 <radio_pkt_rx_set>
}
    7036:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    7038:	2008      	movs	r0, #8
    703a:	211b      	movs	r1, #27
    703c:	f004 fa5a 	bl	b4f4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    7040:	0028      	movs	r0, r5
    7042:	e7f6      	b.n	7032 <rx_packet_set+0x2e>

00007044 <tx_packet_set>:
{
    7044:	b570      	push	{r4, r5, r6, lr}
    7046:	000d      	movs	r5, r1
	radio_phy_set(phy, flags);
    7048:	2100      	movs	r1, #0
{
    704a:	0004      	movs	r4, r0
	radio_phy_set(phy, flags);
    704c:	0008      	movs	r0, r1
    704e:	f004 fa03 	bl	b458 <radio_phy_set>
	if (conn->enc_tx) {
    7052:	0023      	movs	r3, r4
    7054:	33a8      	adds	r3, #168	; 0xa8
    7056:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    7058:	2201      	movs	r2, #1
	if (conn->enc_tx) {
    705a:	069b      	lsls	r3, r3, #26
    705c:	d50b      	bpl.n	7076 <tx_packet_set+0x32>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    705e:	211f      	movs	r1, #31
    7060:	2008      	movs	r0, #8
    7062:	f004 fa47 	bl	b4f4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    7066:	0020      	movs	r0, r4
    7068:	0029      	movs	r1, r5
    706a:	30ca      	adds	r0, #202	; 0xca
    706c:	f004 fc94 	bl	b998 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    7070:	f004 fa6e 	bl	b550 <radio_pkt_tx_set>
}
    7074:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    7076:	2008      	movs	r0, #8
    7078:	211b      	movs	r1, #27
    707a:	f004 fa3b 	bl	b4f4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    707e:	0028      	movs	r0, r5
    7080:	e7f6      	b.n	7070 <tx_packet_set+0x2c>
	...

00007084 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    7084:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    7086:	4e15      	ldr	r6, [pc, #84]	; (70dc <isr_scan_tgta_check.isra.30+0x58>)
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    7088:	0005      	movs	r5, r0
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    708a:	0033      	movs	r3, r6
    708c:	33dd      	adds	r3, #221	; 0xdd
    708e:	781a      	ldrb	r2, [r3, #0]
    7090:	7803      	ldrb	r3, [r0, #0]
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    7092:	000c      	movs	r4, r1
			BDADDR_SIZE) == 0))) ||
    7094:	09d2      	lsrs	r2, r2, #7
    7096:	09db      	lsrs	r3, r3, #7
    7098:	429a      	cmp	r2, r3
    709a:	d006      	beq.n	70aa <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    709c:	2302      	movs	r3, #2
    709e:	36dd      	adds	r6, #221	; 0xdd
    70a0:	7830      	ldrb	r0, [r6, #0]
    70a2:	0900      	lsrs	r0, r0, #4
    70a4:	4018      	ands	r0, r3
    70a6:	d10b      	bne.n	70c0 <isr_scan_tgta_check.isra.30+0x3c>
}
    70a8:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    70aa:	0030      	movs	r0, r6
    70ac:	0029      	movs	r1, r5
    70ae:	30de      	adds	r0, #222	; 0xde
    70b0:	2206      	movs	r2, #6
    70b2:	3108      	adds	r1, #8
    70b4:	f7fa fe16 	bl	1ce4 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    70b8:	2800      	cmp	r0, #0
    70ba:	d1ef      	bne.n	709c <isr_scan_tgta_check.isra.30+0x18>
			BDADDR_SIZE) == 0))) ||
    70bc:	2001      	movs	r0, #1
    70be:	e7f3      	b.n	70a8 <isr_scan_tgta_check.isra.30+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    70c0:	782b      	ldrb	r3, [r5, #0]
			BDADDR_SIZE) == 0))) ||
    70c2:	2000      	movs	r0, #0
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    70c4:	2b7f      	cmp	r3, #127	; 0x7f
    70c6:	d9ef      	bls.n	70a8 <isr_scan_tgta_check.isra.30+0x24>
	    (pdu->rx_addr != 0) &&
    70c8:	223f      	movs	r2, #63	; 0x3f
    70ca:	7b6b      	ldrb	r3, [r5, #13]
    70cc:	4393      	bics	r3, r2
    70ce:	2b40      	cmp	r3, #64	; 0x40
    70d0:	d1ea      	bne.n	70a8 <isr_scan_tgta_check.isra.30+0x24>
		if (dir_report) {
    70d2:	4284      	cmp	r4, r0
    70d4:	d0f2      	beq.n	70bc <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    70d6:	3001      	adds	r0, #1
    70d8:	7020      	strb	r0, [r4, #0]
    70da:	e7e5      	b.n	70a8 <isr_scan_tgta_check.isra.30+0x24>
    70dc:	20000298 	.word	0x20000298

000070e0 <chan_set.part.23>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    70e0:	b662      	cpsie	i
    70e2:	2004      	movs	r0, #4
    70e4:	df02      	svc	2
	...

000070e8 <prepare_normal_set>:
{
    70e8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    70ea:	6803      	ldr	r3, [r0, #0]
{
    70ec:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    70ee:	2b00      	cmp	r3, #0
    70f0:	da19      	bge.n	7126 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    70f2:	6845      	ldr	r5, [r0, #4]
    70f4:	6884      	ldr	r4, [r0, #8]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    70f6:	005b      	lsls	r3, r3, #1
    70f8:	085b      	lsrs	r3, r3, #1
		u32_t ticks_prepare_to_start =
    70fa:	42ac      	cmp	r4, r5
    70fc:	d200      	bcs.n	7100 <prepare_normal_set+0x18>
    70fe:	002c      	movs	r4, r5
		ticker_status =
    7100:	9006      	str	r0, [sp, #24]
    7102:	480a      	ldr	r0, [pc, #40]	; (712c <prepare_normal_set+0x44>)
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    7104:	1b1b      	subs	r3, r3, r4
		ticker_status =
    7106:	9005      	str	r0, [sp, #20]
    7108:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    710a:	b29b      	uxth	r3, r3
		ticker_status =
    710c:	9301      	str	r3, [sp, #4]
    710e:	9300      	str	r3, [sp, #0]
    7110:	9004      	str	r0, [sp, #16]
    7112:	0003      	movs	r3, r0
    7114:	9003      	str	r0, [sp, #12]
    7116:	9002      	str	r0, [sp, #8]
    7118:	f7fe fdb6 	bl	5c88 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    711c:	2302      	movs	r3, #2
    711e:	4398      	bics	r0, r3
    7120:	d001      	beq.n	7126 <prepare_normal_set+0x3e>
    7122:	f7ff ffdd 	bl	70e0 <chan_set.part.23>
}
    7126:	b009      	add	sp, #36	; 0x24
    7128:	bd30      	pop	{r4, r5, pc}
    712a:	46c0      	nop			; (mov r8, r8)
    712c:	00006a2d 	.word	0x00006a2d

00007130 <terminate_ind_rx_enqueue>:
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    7130:	0003      	movs	r3, r0
{
    7132:	b510      	push	{r4, lr}
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    7134:	339c      	adds	r3, #156	; 0x9c
{
    7136:	0002      	movs	r2, r0
	LL_ASSERT(node_rx->hdr.onion.link);
    7138:	6818      	ldr	r0, [r3, #0]
    713a:	2800      	cmp	r0, #0
    713c:	d101      	bne.n	7142 <terminate_ind_rx_enqueue+0x12>
    713e:	f7ff ffcf 	bl	70e0 <chan_set.part.23>
	node_rx->hdr.handle = conn->handle;
    7142:	8c12      	ldrh	r2, [r2, #32]
	*((u8_t *)node_rx->pdu_data) = reason;
    7144:	7219      	strb	r1, [r3, #8]
	node_rx->hdr.handle = conn->handle;
    7146:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    7148:	2207      	movs	r2, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    714a:	21b6      	movs	r1, #182	; 0xb6
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    714c:	711a      	strb	r2, [r3, #4]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    714e:	4a08      	ldr	r2, [pc, #32]	; (7170 <terminate_ind_rx_enqueue+0x40>)
    7150:	0049      	lsls	r1, r1, #1
    7152:	5c51      	ldrb	r1, [r2, r1]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    7154:	3245      	adds	r2, #69	; 0x45
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    7156:	7019      	strb	r1, [r3, #0]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    7158:	32ff      	adds	r2, #255	; 0xff
    715a:	0019      	movs	r1, r3
    715c:	f7fd ff75 	bl	504a <memq_enqueue>
	LL_ASSERT(link);
    7160:	2800      	cmp	r0, #0
    7162:	d102      	bne.n	716a <terminate_ind_rx_enqueue+0x3a>
    7164:	b662      	cpsie	i
    7166:	2004      	movs	r0, #4
    7168:	df02      	svc	2
	radio_event_callback();
    716a:	f003 fc67 	bl	aa3c <radio_event_callback>
}
    716e:	bd10      	pop	{r4, pc}
    7170:	20000298 	.word	0x20000298

00007174 <packet_rx_enqueue>:
{
    7174:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    7176:	219b      	movs	r1, #155	; 0x9b
    7178:	2436      	movs	r4, #54	; 0x36
    717a:	4a15      	ldr	r2, [pc, #84]	; (71d0 <packet_rx_enqueue+0x5c>)
    717c:	34ff      	adds	r4, #255	; 0xff
    717e:	0049      	lsls	r1, r1, #1
    7180:	5d13      	ldrb	r3, [r2, r4]
    7182:	5c51      	ldrb	r1, [r2, r1]
    7184:	4299      	cmp	r1, r3
    7186:	d101      	bne.n	718c <packet_rx_enqueue+0x18>
    7188:	f7ff ffaa 	bl	70e0 <chan_set.part.23>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    718c:	0011      	movs	r1, r2
    718e:	5d13      	ldrb	r3, [r2, r4]
    7190:	31fc      	adds	r1, #252	; 0xfc
    7192:	6b49      	ldr	r1, [r1, #52]	; 0x34
    7194:	009b      	lsls	r3, r3, #2
    7196:	5859      	ldr	r1, [r3, r1]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    7198:	23b6      	movs	r3, #182	; 0xb6
	if (last == _radio.packet_rx_count) {
    719a:	259a      	movs	r5, #154	; 0x9a
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    719c:	005b      	lsls	r3, r3, #1
    719e:	5cd3      	ldrb	r3, [r2, r3]
	link = node_rx->hdr.onion.link;
    71a0:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    71a2:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    71a4:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    71a6:	006d      	lsls	r5, r5, #1
	last = _radio.packet_rx_last + 1;
    71a8:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    71aa:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_rx_last + 1;
    71ac:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    71ae:	429d      	cmp	r5, r3
    71b0:	d100      	bne.n	71b4 <packet_rx_enqueue+0x40>
		last = 0;
    71b2:	2300      	movs	r3, #0
	_radio.packet_rx_last = last;
    71b4:	5513      	strb	r3, [r2, r4]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    71b6:	3245      	adds	r2, #69	; 0x45
    71b8:	32ff      	adds	r2, #255	; 0xff
    71ba:	f7fd ff46 	bl	504a <memq_enqueue>
	LL_ASSERT(link);
    71be:	2800      	cmp	r0, #0
    71c0:	d102      	bne.n	71c8 <packet_rx_enqueue+0x54>
    71c2:	b662      	cpsie	i
    71c4:	2004      	movs	r0, #4
    71c6:	df02      	svc	2
	radio_event_callback();
    71c8:	f003 fc38 	bl	aa3c <radio_event_callback>
}
    71cc:	bd70      	pop	{r4, r5, r6, pc}
    71ce:	46c0      	nop			; (mov r8, r8)
    71d0:	20000298 	.word	0x20000298

000071d4 <mayfly_adv_stop>:
{
    71d4:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    71d6:	2001      	movs	r0, #1
    71d8:	f7ff fc4a 	bl	6a70 <packet_rx_reserve_get>
    71dc:	1e04      	subs	r4, r0, #0
	LL_ASSERT(node_rx);
    71de:	d101      	bne.n	71e4 <mayfly_adv_stop+0x10>
    71e0:	f7ff ff7e 	bl	70e0 <chan_set.part.23>
	node_rx->hdr.handle = 0xffff;
    71e4:	2301      	movs	r3, #1
    71e6:	425b      	negs	r3, r3
    71e8:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    71ea:	3307      	adds	r3, #7
    71ec:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    71ee:	2210      	movs	r2, #16
    71f0:	2100      	movs	r1, #0
	radio_le_conn_cmplt = (void *)pdu_data_rx->lldata;
    71f2:	300b      	adds	r0, #11
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    71f4:	f7fa fdc4 	bl	1d80 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    71f8:	233c      	movs	r3, #60	; 0x3c
    71fa:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
    71fc:	f7ff ffba 	bl	7174 <packet_rx_enqueue>
}
    7200:	bd10      	pop	{r4, pc}
	...

00007204 <ticker_stop_adv_stop>:
{
    7204:	b530      	push	{r4, r5, lr}
    7206:	4c3f      	ldr	r4, [pc, #252]	; (7304 <ticker_stop_adv_stop+0x100>)
    7208:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
    720a:	2800      	cmp	r0, #0
    720c:	d004      	beq.n	7218 <ticker_stop_adv_stop+0x14>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    720e:	7ba3      	ldrb	r3, [r4, #14]
    7210:	2b05      	cmp	r3, #5
    7212:	d074      	beq.n	72fe <ticker_stop_adv_stop+0xfa>
    7214:	f7ff ff64 	bl	70e0 <chan_set.part.23>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    7218:	7b23      	ldrb	r3, [r4, #12]
    721a:	2b05      	cmp	r3, #5
    721c:	d002      	beq.n	7224 <ticker_stop_adv_stop+0x20>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    721e:	7b63      	ldrb	r3, [r4, #13]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    7220:	2b05      	cmp	r3, #5
    7222:	d164      	bne.n	72ee <ticker_stop_adv_stop+0xea>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    7224:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7226:	2200      	movs	r2, #0
    7228:	4d37      	ldr	r5, [pc, #220]	; (7308 <ticker_stop_adv_stop+0x104>)
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    722a:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    722c:	ab02      	add	r3, sp, #8
    722e:	9300      	str	r3, [sp, #0]
    7230:	2101      	movs	r1, #1
    7232:	002b      	movs	r3, r5
    7234:	0010      	movs	r0, r2
    7236:	f7fe fd77 	bl	5d28 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    723a:	2802      	cmp	r0, #2
    723c:	d00e      	beq.n	725c <ticker_stop_adv_stop+0x58>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    723e:	9802      	ldr	r0, [sp, #8]
    7240:	2800      	cmp	r0, #0
    7242:	d018      	beq.n	7276 <ticker_stop_adv_stop+0x72>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    7244:	9802      	ldr	r0, [sp, #8]
    7246:	2801      	cmp	r0, #1
    7248:	d11a      	bne.n	7280 <ticker_stop_adv_stop+0x7c>
		if (_radio.role != ROLE_NONE) {
    724a:	7be3      	ldrb	r3, [r4, #15]
    724c:	2b00      	cmp	r3, #0
    724e:	d04e      	beq.n	72ee <ticker_stop_adv_stop+0xea>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    7250:	2204      	movs	r2, #4
    7252:	4b2e      	ldr	r3, [pc, #184]	; (730c <ticker_stop_adv_stop+0x108>)
    7254:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    7256:	2200      	movs	r2, #0
    7258:	0011      	movs	r1, r2
    725a:	e044      	b.n	72e6 <ticker_stop_adv_stop+0xe2>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    725c:	2201      	movs	r2, #1
    725e:	0011      	movs	r1, r2
    7260:	0010      	movs	r0, r2
    7262:	f7fd ff37 	bl	50d4 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    7266:	9b02      	ldr	r3, [sp, #8]
    7268:	2b02      	cmp	r3, #2
    726a:	d1e8      	bne.n	723e <ticker_stop_adv_stop+0x3a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    726c:	2101      	movs	r1, #1
    726e:	2000      	movs	r0, #0
    7270:	f7fe fdee 	bl	5e50 <ticker_job_sched>
    7274:	e7f7      	b.n	7266 <ticker_stop_adv_stop+0x62>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    7276:	2302      	movs	r3, #2
    7278:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    727a:	7b23      	ldrb	r3, [r4, #12]
    727c:	2b00      	cmp	r3, #0
    727e:	d102      	bne.n	7286 <ticker_stop_adv_stop+0x82>
	LL_ASSERT(!retval);
    7280:	b662      	cpsie	i
    7282:	2004      	movs	r0, #4
    7284:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7286:	2201      	movs	r2, #1
    7288:	ab03      	add	r3, sp, #12
		_radio.ticker_id_prepare = 0;
    728a:	7320      	strb	r0, [r4, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    728c:	0011      	movs	r1, r2
    728e:	9300      	str	r3, [sp, #0]
    7290:	002b      	movs	r3, r5
    7292:	f7fe fd49 	bl	5d28 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    7296:	2802      	cmp	r0, #2
    7298:	d00f      	beq.n	72ba <ticker_stop_adv_stop+0xb6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    729a:	9903      	ldr	r1, [sp, #12]
    729c:	2900      	cmp	r1, #0
    729e:	d019      	beq.n	72d4 <ticker_stop_adv_stop+0xd0>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    72a0:	9c03      	ldr	r4, [sp, #12]
    72a2:	2c01      	cmp	r4, #1
    72a4:	d1ec      	bne.n	7280 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    72a6:	2200      	movs	r2, #0
    72a8:	4b19      	ldr	r3, [pc, #100]	; (7310 <ticker_stop_adv_stop+0x10c>)
    72aa:	0011      	movs	r1, r2
    72ac:	0020      	movs	r0, r4
    72ae:	f7fd ff35 	bl	511c <mayfly_enqueue>
    72b2:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    72b4:	d1e4      	bne.n	7280 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    72b6:	4b17      	ldr	r3, [pc, #92]	; (7314 <ticker_stop_adv_stop+0x110>)
    72b8:	e013      	b.n	72e2 <ticker_stop_adv_stop+0xde>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    72ba:	2201      	movs	r2, #1
    72bc:	0011      	movs	r1, r2
    72be:	0010      	movs	r0, r2
    72c0:	f7fd ff08 	bl	50d4 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    72c4:	9b03      	ldr	r3, [sp, #12]
    72c6:	2b02      	cmp	r3, #2
    72c8:	d1e7      	bne.n	729a <ticker_stop_adv_stop+0x96>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    72ca:	2101      	movs	r1, #1
    72cc:	2000      	movs	r0, #0
    72ce:	f7fe fdbf 	bl	5e50 <ticker_job_sched>
    72d2:	e7f7      	b.n	72c4 <ticker_stop_adv_stop+0xc0>
			ticks_xtal_to_start &= ~XON_BITMASK;
    72d4:	6963      	ldr	r3, [r4, #20]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    72d6:	69a2      	ldr	r2, [r4, #24]
			ticks_xtal_to_start &= ~XON_BITMASK;
    72d8:	005b      	lsls	r3, r3, #1
    72da:	085b      	lsrs	r3, r3, #1
			if (_radio.advertiser.hdr.ticks_active_to_start >
    72dc:	4293      	cmp	r3, r2
    72de:	d2ea      	bcs.n	72b6 <ticker_stop_adv_stop+0xb2>
				ret = mayfly_enqueue(
    72e0:	4b0b      	ldr	r3, [pc, #44]	; (7310 <ticker_stop_adv_stop+0x10c>)
    72e2:	000a      	movs	r2, r1
    72e4:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    72e6:	f7fd ff19 	bl	511c <mayfly_enqueue>
			LL_ASSERT(!ret);
    72ea:	2800      	cmp	r0, #0
    72ec:	d1c8      	bne.n	7280 <ticker_stop_adv_stop+0x7c>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    72ee:	2200      	movs	r2, #0
    72f0:	4b09      	ldr	r3, [pc, #36]	; (7318 <ticker_stop_adv_stop+0x114>)
    72f2:	0011      	movs	r1, r2
    72f4:	2001      	movs	r0, #1
    72f6:	f7fd ff11 	bl	511c <mayfly_enqueue>
	LL_ASSERT(!retval);
    72fa:	2800      	cmp	r0, #0
    72fc:	d1c0      	bne.n	7280 <ticker_stop_adv_stop+0x7c>
}
    72fe:	b005      	add	sp, #20
    7300:	bd30      	pop	{r4, r5, pc}
    7302:	46c0      	nop			; (mov r8, r8)
    7304:	20000298 	.word	0x20000298
    7308:	00006a19 	.word	0x00006a19
    730c:	200023c8 	.word	0x200023c8
    7310:	20002388 	.word	0x20002388
    7314:	20002418 	.word	0x20002418
    7318:	20002368 	.word	0x20002368

0000731c <sched_after_mstr_free_offset_get>:
{
    731c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    731e:	001c      	movs	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
    7320:	9201      	str	r2, [sp, #4]
{
    7322:	0005      	movs	r5, r0
    7324:	0017      	movs	r7, r2
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    7326:	3127      	adds	r1, #39	; 0x27
    7328:	aa01      	add	r2, sp, #4
    732a:	2001      	movs	r0, #1
    732c:	f7ff fd5a 	bl	6de4 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    7330:	6823      	ldr	r3, [r4, #0]
    7332:	2b00      	cmp	r3, #0
    7334:	d01d      	beq.n	7372 <sched_after_mstr_free_offset_get+0x56>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    7336:	2380      	movs	r3, #128	; 0x80
    7338:	9801      	ldr	r0, [sp, #4]
    733a:	041b      	lsls	r3, r3, #16
    733c:	1bc6      	subs	r6, r0, r7
    733e:	401e      	ands	r6, r3
    7340:	d001      	beq.n	7346 <sched_after_mstr_free_offset_get+0x2a>
    7342:	f7ff fecd 	bl	70e0 <chan_set.part.23>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    7346:	0039      	movs	r1, r7
    7348:	f7fe fd96 	bl	5e78 <ticker_ticks_diff_get>
    734c:	4a0b      	ldr	r2, [pc, #44]	; (737c <sched_after_mstr_free_offset_get+0x60>)
    734e:	2307      	movs	r3, #7
    7350:	0031      	movs	r1, r6
    7352:	f7f9 f821 	bl	398 <__aeabi_lmul>
    7356:	2300      	movs	r3, #0
    7358:	4a09      	ldr	r2, [pc, #36]	; (7380 <sched_after_mstr_free_offset_get+0x64>)
    735a:	f7f8 fffd 	bl	358 <__aeabi_uldivmod>
    735e:	6823      	ldr	r3, [r4, #0]
    7360:	1818      	adds	r0, r3, r0
    7362:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    7364:	2800      	cmp	r0, #0
    7366:	db04      	blt.n	7372 <sched_after_mstr_free_offset_get+0x56>
		u32_t conn_interval_us = conn_interval * 1250;
    7368:	4806      	ldr	r0, [pc, #24]	; (7384 <sched_after_mstr_free_offset_get+0x68>)
    736a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    736c:	6823      	ldr	r3, [r4, #0]
    736e:	4298      	cmp	r0, r3
    7370:	d300      	bcc.n	7374 <sched_after_mstr_free_offset_get+0x58>
}
    7372:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			*win_offset_us -= conn_interval_us;
    7374:	1a1b      	subs	r3, r3, r0
    7376:	6023      	str	r3, [r4, #0]
    7378:	e7f8      	b.n	736c <sched_after_mstr_free_offset_get+0x50>
    737a:	46c0      	nop			; (mov r8, r8)
    737c:	1afd498d 	.word	0x1afd498d
    7380:	3b9aca00 	.word	0x3b9aca00
    7384:	000004e2 	.word	0x000004e2

00007388 <mayfly_sched_win_offset_use>:
{
    7388:	b537      	push	{r0, r1, r2, r4, r5, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    738a:	0003      	movs	r3, r0
{
    738c:	0004      	movs	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    738e:	336c      	adds	r3, #108	; 0x6c
    7390:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    7392:	68e1      	ldr	r1, [r4, #12]
    7394:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    7396:	f7ff ffc1 	bl	731c <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    739a:	466b      	mov	r3, sp
    739c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    739e:	4905      	ldr	r1, [pc, #20]	; (73b4 <mayfly_sched_win_offset_use+0x2c>)
    73a0:	1d9d      	adds	r5, r3, #6
    73a2:	f7f8 ff11 	bl	1c8 <__aeabi_uidiv>
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    73a6:	0029      	movs	r1, r5
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    73a8:	8028      	strh	r0, [r5, #0]
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    73aa:	2202      	movs	r2, #2
    73ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
    73ae:	f7fa fcbd 	bl	1d2c <memcpy>
}
    73b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    73b4:	000004e2 	.word	0x000004e2

000073b8 <chan_set>:
{
    73b8:	b510      	push	{r4, lr}
    73ba:	0004      	movs	r4, r0
	switch (chan) {
    73bc:	2826      	cmp	r0, #38	; 0x26
    73be:	d009      	beq.n	73d4 <chan_set+0x1c>
    73c0:	2827      	cmp	r0, #39	; 0x27
    73c2:	d00e      	beq.n	73e2 <chan_set+0x2a>
		radio_freq_chan_set(2);
    73c4:	2002      	movs	r0, #2
	switch (chan) {
    73c6:	2c25      	cmp	r4, #37	; 0x25
    73c8:	d005      	beq.n	73d6 <chan_set+0x1e>
		if (chan < 11) {
    73ca:	2c0a      	cmp	r4, #10
    73cc:	d80b      	bhi.n	73e6 <chan_set+0x2e>
			radio_freq_chan_set(4 + (2 * chan));
    73ce:	1ca0      	adds	r0, r4, #2
    73d0:	0040      	lsls	r0, r0, #1
    73d2:	e000      	b.n	73d6 <chan_set+0x1e>
		radio_freq_chan_set(26);
    73d4:	201a      	movs	r0, #26
			radio_freq_chan_set(4 + (2 * chan));
    73d6:	f004 f853 	bl	b480 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    73da:	0020      	movs	r0, r4
    73dc:	f004 f858 	bl	b490 <radio_whiten_iv_set>
}
    73e0:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(80);
    73e2:	2050      	movs	r0, #80	; 0x50
    73e4:	e7f7      	b.n	73d6 <chan_set+0x1e>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    73e6:	1ce0      	adds	r0, r4, #3
		} else if (chan < 40) {
    73e8:	2c27      	cmp	r4, #39	; 0x27
    73ea:	d9f1      	bls.n	73d0 <chan_set+0x18>
    73ec:	f7ff fe78 	bl	70e0 <chan_set.part.23>

000073f0 <adv_setup>:
{
    73f0:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    73f2:	4c2d      	ldr	r4, [pc, #180]	; (74a8 <adv_setup+0xb8>)
    73f4:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    73f6:	0022      	movs	r2, r4
	if (_radio.advertiser.adv_data.first !=
    73f8:	3374      	adds	r3, #116	; 0x74
	    _radio.advertiser.adv_data.last) {
    73fa:	3275      	adds	r2, #117	; 0x75
	if (_radio.advertiser.adv_data.first !=
    73fc:	781b      	ldrb	r3, [r3, #0]
    73fe:	7812      	ldrb	r2, [r2, #0]
    7400:	429a      	cmp	r2, r3
    7402:	d007      	beq.n	7414 <adv_setup+0x24>
		first = _radio.advertiser.adv_data.first + 1;
    7404:	3301      	adds	r3, #1
    7406:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    7408:	2b02      	cmp	r3, #2
    740a:	d100      	bne.n	740e <adv_setup+0x1e>
			first = 0;
    740c:	2300      	movs	r3, #0
		_radio.advertiser.adv_data.first = first;
    740e:	0022      	movs	r2, r4
    7410:	3274      	adds	r2, #116	; 0x74
    7412:	7013      	strb	r3, [r2, #0]
	if (_radio.advertiser.scan_data.first != _radio.
    7414:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    7416:	0022      	movs	r2, r4
	if (_radio.advertiser.scan_data.first != _radio.
    7418:	33c4      	adds	r3, #196	; 0xc4
	    advertiser.scan_data.last) {
    741a:	32c5      	adds	r2, #197	; 0xc5
	if (_radio.advertiser.scan_data.first != _radio.
    741c:	781b      	ldrb	r3, [r3, #0]
    741e:	7812      	ldrb	r2, [r2, #0]
    7420:	429a      	cmp	r2, r3
    7422:	d007      	beq.n	7434 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    7424:	3301      	adds	r3, #1
    7426:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    7428:	2b02      	cmp	r3, #2
    742a:	d100      	bne.n	742e <adv_setup+0x3e>
			first = 0;
    742c:	2300      	movs	r3, #0
		_radio.advertiser.scan_data.first = first;
    742e:	0022      	movs	r2, r4
    7430:	32c4      	adds	r2, #196	; 0xc4
    7432:	7013      	strb	r3, [r2, #0]
					[_radio.advertiser.adv_data.first];
    7434:	0023      	movs	r3, r4
	pdu = (void *)_radio.advertiser.adv_data.data
    7436:	2527      	movs	r5, #39	; 0x27
					[_radio.advertiser.adv_data.first];
    7438:	3374      	adds	r3, #116	; 0x74
	pdu = (void *)_radio.advertiser.adv_data.data
    743a:	781b      	ldrb	r3, [r3, #0]
    743c:	435d      	muls	r5, r3
    743e:	3526      	adds	r5, #38	; 0x26
    7440:	1965      	adds	r5, r4, r5
	radio_pkt_tx_set(pdu);
    7442:	0028      	movs	r0, r5
    7444:	f004 f884 	bl	b550 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    7448:	220f      	movs	r2, #15
    744a:	782b      	ldrb	r3, [r5, #0]
    744c:	4013      	ands	r3, r2
    744e:	2b02      	cmp	r3, #2
    7450:	d020      	beq.n	7494 <adv_setup+0xa4>
    7452:	2b07      	cmp	r3, #7
    7454:	d01e      	beq.n	7494 <adv_setup+0xa4>
		_radio.state = STATE_TX;
    7456:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    7458:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    745a:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    745c:	f004 f976 	bl	b74c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7460:	2000      	movs	r0, #0
    7462:	f004 f8e1 	bl	b628 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    7466:	1d63      	adds	r3, r4, #5
    7468:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    746a:	2000      	movs	r0, #0
	bitmap = _radio.advertiser.chan_map_current;
    746c:	075b      	lsls	r3, r3, #29
    746e:	0f5a      	lsrs	r2, r3, #29
    7470:	b2d3      	uxtb	r3, r2
    7472:	0019      	movs	r1, r3
	while ((bitmap & 0x01) == 0) {
    7474:	2501      	movs	r5, #1
    7476:	4229      	tst	r1, r5
    7478:	d011      	beq.n	749e <adv_setup+0xae>
	_radio.advertiser.chan_map_current &=
    747a:	2107      	movs	r1, #7
    747c:	3405      	adds	r4, #5
		(_radio.advertiser.chan_map_current - 1);
    747e:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    7480:	4013      	ands	r3, r2
    7482:	7fe2      	ldrb	r2, [r4, #31]
    7484:	400b      	ands	r3, r1
    7486:	438a      	bics	r2, r1
    7488:	4313      	orrs	r3, r2
	chan_set(37 + chan);
    748a:	3025      	adds	r0, #37	; 0x25
	_radio.advertiser.chan_map_current &=
    748c:	77e3      	strb	r3, [r4, #31]
	chan_set(37 + chan);
    748e:	f7ff ff93 	bl	73b8 <chan_set>
}
    7492:	bd70      	pop	{r4, r5, r6, pc}
		_radio.state = STATE_CLOSE;
    7494:	2303      	movs	r3, #3
    7496:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    7498:	f004 f8d6 	bl	b648 <radio_switch_complete_and_disable>
    749c:	e7e3      	b.n	7466 <adv_setup+0x76>
		chan++;
    749e:	3001      	adds	r0, #1
    74a0:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    74a2:	0849      	lsrs	r1, r1, #1
    74a4:	e7e7      	b.n	7476 <adv_setup+0x86>
    74a6:	46c0      	nop			; (mov r8, r8)
    74a8:	20000298 	.word	0x20000298

000074ac <pdu_node_tx_release>:
{
    74ac:	b570      	push	{r4, r5, r6, lr}
	last = _radio.packet_release_last + 1;
    74ae:	24b6      	movs	r4, #182	; 0xb6
	if (last == _radio.packet_tx_count) {
    74b0:	25b4      	movs	r5, #180	; 0xb4
	last = _radio.packet_release_last + 1;
    74b2:	4a0f      	ldr	r2, [pc, #60]	; (74f0 <pdu_node_tx_release+0x44>)
    74b4:	0064      	lsls	r4, r4, #1
    74b6:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_tx_count) {
    74b8:	006d      	lsls	r5, r5, #1
	last = _radio.packet_release_last + 1;
    74ba:	3301      	adds	r3, #1
	if (last == _radio.packet_tx_count) {
    74bc:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_release_last + 1;
    74be:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
    74c0:	429d      	cmp	r5, r3
    74c2:	d100      	bne.n	74c6 <pdu_node_tx_release+0x1a>
		last = 0;
    74c4:	2300      	movs	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    74c6:	256c      	movs	r5, #108	; 0x6c
    74c8:	35ff      	adds	r5, #255	; 0xff
    74ca:	5d55      	ldrb	r5, [r2, r5]
    74cc:	429d      	cmp	r5, r3
    74ce:	d101      	bne.n	74d4 <pdu_node_tx_release+0x28>
    74d0:	f7ff fe06 	bl	70e0 <chan_set.part.23>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    74d4:	0015      	movs	r5, r2
    74d6:	5d16      	ldrb	r6, [r2, r4]
    74d8:	35fc      	adds	r5, #252	; 0xfc
    74da:	6ead      	ldr	r5, [r5, #104]	; 0x68
    74dc:	00f6      	lsls	r6, r6, #3
    74de:	5370      	strh	r0, [r6, r5]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    74e0:	5d10      	ldrb	r0, [r2, r4]
    74e2:	00c0      	lsls	r0, r0, #3
    74e4:	182d      	adds	r5, r5, r0
    74e6:	6069      	str	r1, [r5, #4]
	_radio.packet_release_last = last;
    74e8:	5513      	strb	r3, [r2, r4]
	radio_event_callback();
    74ea:	f003 faa7 	bl	aa3c <radio_event_callback>
}
    74ee:	bd70      	pop	{r4, r5, r6, pc}
    74f0:	20000298 	.word	0x20000298

000074f4 <packet_tx_enqueue>:
{
    74f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    74f6:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    74f8:	9b01      	ldr	r3, [sp, #4]
    74fa:	2b00      	cmp	r3, #0
    74fc:	d008      	beq.n	7510 <packet_tx_enqueue+0x1c>
    74fe:	266a      	movs	r6, #106	; 0x6a
    7500:	22b5      	movs	r2, #181	; 0xb5
    7502:	4d23      	ldr	r5, [pc, #140]	; (7590 <packet_tx_enqueue+0x9c>)
    7504:	36ff      	adds	r6, #255	; 0xff
    7506:	0052      	lsls	r2, r2, #1
    7508:	5dab      	ldrb	r3, [r5, r6]
    750a:	5caa      	ldrb	r2, [r5, r2]
    750c:	429a      	cmp	r2, r3
    750e:	d100      	bne.n	7512 <packet_tx_enqueue+0x1e>
}
    7510:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    7512:	002b      	movs	r3, r5
    7514:	5daf      	ldrb	r7, [r5, r6]
    7516:	33fc      	adds	r3, #252	; 0xfc
    7518:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    751a:	00ff      	lsls	r7, r7, #3
    751c:	19d7      	adds	r7, r2, r7
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    751e:	2182      	movs	r1, #130	; 0x82
		node_tx_new->next = NULL;
    7520:	2200      	movs	r2, #0
		node_tx_new = pdu_data_q_tx->node_tx;
    7522:	687c      	ldr	r4, [r7, #4]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7524:	6898      	ldr	r0, [r3, #8]
		node_tx_new->next = NULL;
    7526:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7528:	0049      	lsls	r1, r1, #1
    752a:	883a      	ldrh	r2, [r7, #0]
    752c:	f7fd fd6f 	bl	500e <mem_get>
    7530:	0003      	movs	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    7532:	8838      	ldrh	r0, [r7, #0]
    7534:	8c1a      	ldrh	r2, [r3, #32]
    7536:	4282      	cmp	r2, r0
    7538:	d121      	bne.n	757e <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    753a:	0019      	movs	r1, r3
    753c:	001a      	movs	r2, r3
    753e:	31f8      	adds	r1, #248	; 0xf8
    7540:	6808      	ldr	r0, [r1, #0]
    7542:	32fc      	adds	r2, #252	; 0xfc
    7544:	2800      	cmp	r0, #0
    7546:	d106      	bne.n	7556 <packet_tx_enqueue+0x62>
				if (conn->pkt_tx_head == 0) {
    7548:	33ec      	adds	r3, #236	; 0xec
				conn->pkt_tx_data = node_tx_new;
    754a:	600c      	str	r4, [r1, #0]
				if (conn->pkt_tx_head == 0) {
    754c:	6819      	ldr	r1, [r3, #0]
    754e:	2900      	cmp	r1, #0
    7550:	d101      	bne.n	7556 <packet_tx_enqueue+0x62>
					conn->pkt_tx_head = node_tx_new;
    7552:	601c      	str	r4, [r3, #0]
					conn->pkt_tx_last = NULL;
    7554:	6011      	str	r1, [r2, #0]
			if (conn->pkt_tx_last) {
    7556:	6813      	ldr	r3, [r2, #0]
    7558:	2b00      	cmp	r3, #0
    755a:	d000      	beq.n	755e <packet_tx_enqueue+0x6a>
				conn->pkt_tx_last->next = node_tx_new;
    755c:	601c      	str	r4, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
    755e:	6014      	str	r4, [r2, #0]
		if (first == _radio.packet_tx_count) {
    7560:	22b4      	movs	r2, #180	; 0xb4
		first = _radio.packet_tx_first + 1;
    7562:	5dab      	ldrb	r3, [r5, r6]
		if (first == _radio.packet_tx_count) {
    7564:	0052      	lsls	r2, r2, #1
		first = _radio.packet_tx_first + 1;
    7566:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    7568:	5caa      	ldrb	r2, [r5, r2]
		first = _radio.packet_tx_first + 1;
    756a:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    756c:	429a      	cmp	r2, r3
    756e:	d100      	bne.n	7572 <packet_tx_enqueue+0x7e>
			first = 0;
    7570:	2300      	movs	r3, #0
		_radio.packet_tx_first = first;
    7572:	55ab      	strb	r3, [r5, r6]
    7574:	9e01      	ldr	r6, [sp, #4]
    7576:	3e01      	subs	r6, #1
    7578:	b2f3      	uxtb	r3, r6
    757a:	9301      	str	r3, [sp, #4]
    757c:	e7bc      	b.n	74f8 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    757e:	2203      	movs	r2, #3
    7580:	7923      	ldrb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    7582:	0021      	movs	r1, r4
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    7584:	4393      	bics	r3, r2
    7586:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    7588:	f7ff ff90 	bl	74ac <pdu_node_tx_release>
    758c:	e7e8      	b.n	7560 <packet_tx_enqueue+0x6c>
    758e:	46c0      	nop			; (mov r8, r8)
    7590:	20000298 	.word	0x20000298

00007594 <connection_release>:
{
    7594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    7596:	2201      	movs	r2, #1
{
    7598:	0004      	movs	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    759a:	0011      	movs	r1, r2
    759c:	2000      	movs	r0, #0
    759e:	f7fd fd99 	bl	50d4 <mayfly_enable>
	ticker_status =
    75a2:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    75a4:	8c22      	ldrh	r2, [r4, #32]
	ticker_status =
    75a6:	4f39      	ldr	r7, [pc, #228]	; (768c <connection_release+0xf8>)
    75a8:	4b39      	ldr	r3, [pc, #228]	; (7690 <connection_release+0xfc>)
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    75aa:	3207      	adds	r2, #7
	ticker_status =
    75ac:	9300      	str	r3, [sp, #0]
    75ae:	b2d2      	uxtb	r2, r2
    75b0:	003b      	movs	r3, r7
    75b2:	0008      	movs	r0, r1
    75b4:	f7fe fbb8 	bl	5d28 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    75b8:	2602      	movs	r6, #2
    75ba:	43b0      	bics	r0, r6
    75bc:	d002      	beq.n	75c4 <connection_release+0x30>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    75be:	b662      	cpsie	i
    75c0:	2004      	movs	r0, #4
    75c2:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    75c4:	4d33      	ldr	r5, [pc, #204]	; (7694 <connection_release+0x100>)
    75c6:	7c2b      	ldrb	r3, [r5, #16]
    75c8:	2b05      	cmp	r3, #5
    75ca:	d117      	bne.n	75fc <connection_release+0x68>
					  conn->handle))) {
    75cc:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    75ce:	7b2a      	ldrb	r2, [r5, #12]
    75d0:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
    75d2:	429a      	cmp	r2, r3
    75d4:	d112      	bne.n	75fc <connection_release+0x68>
		ticker_status =
    75d6:	4b30      	ldr	r3, [pc, #192]	; (7698 <connection_release+0x104>)
		_radio.ticker_id_prepare = 0;
    75d8:	7328      	strb	r0, [r5, #12]
		ticker_status =
    75da:	2201      	movs	r2, #1
    75dc:	9300      	str	r3, [sp, #0]
    75de:	0001      	movs	r1, r0
    75e0:	003b      	movs	r3, r7
    75e2:	f7fe fba1 	bl	5d28 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    75e6:	43b0      	bics	r0, r6
    75e8:	d1e9      	bne.n	75be <connection_release+0x2a>
		ticker_status =
    75ea:	4b2c      	ldr	r3, [pc, #176]	; (769c <connection_release+0x108>)
    75ec:	0002      	movs	r2, r0
    75ee:	9300      	str	r3, [sp, #0]
    75f0:	0001      	movs	r1, r0
    75f2:	003b      	movs	r3, r7
    75f4:	f7fe fb98 	bl	5d28 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    75f8:	43b0      	bics	r0, r6
    75fa:	d1e0      	bne.n	75be <connection_release+0x2a>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    75fc:	0026      	movs	r6, r4
    75fe:	0027      	movs	r7, r4
    7600:	36ec      	adds	r6, #236	; 0xec
    7602:	37f0      	adds	r7, #240	; 0xf0
    7604:	6831      	ldr	r1, [r6, #0]
    7606:	683b      	ldr	r3, [r7, #0]
    7608:	4299      	cmp	r1, r3
    760a:	d004      	beq.n	7616 <connection_release+0x82>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    760c:	0023      	movs	r3, r4
    760e:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    7610:	681b      	ldr	r3, [r3, #0]
    7612:	4299      	cmp	r1, r3
    7614:	d11a      	bne.n	764c <connection_release+0xb8>
	while ((conn->pkt_tx_head) &&
    7616:	6830      	ldr	r0, [r6, #0]
    7618:	2800      	cmp	r0, #0
    761a:	d004      	beq.n	7626 <connection_release+0x92>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    761c:	0023      	movs	r3, r4
    761e:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head) &&
    7620:	681b      	ldr	r3, [r3, #0]
    7622:	4298      	cmp	r0, r3
    7624:	d11c      	bne.n	7660 <connection_release+0xcc>
	conn->pkt_tx_ctrl = NULL;
    7626:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    7628:	0022      	movs	r2, r4
	conn->pkt_tx_ctrl = NULL;
    762a:	603b      	str	r3, [r7, #0]
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    762c:	2703      	movs	r7, #3
	conn->pkt_tx_ctrl_last = NULL;
    762e:	32f4      	adds	r2, #244	; 0xf4
    7630:	6013      	str	r3, [r2, #0]
	while (conn->pkt_tx_head) {
    7632:	6831      	ldr	r1, [r6, #0]
    7634:	2900      	cmp	r1, #0
    7636:	d11c      	bne.n	7672 <connection_release+0xde>
	conn->handle = 0xffff;
    7638:	2301      	movs	r3, #1
    763a:	425b      	negs	r3, r3
    763c:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    763e:	337e      	adds	r3, #126	; 0x7e
    7640:	33ff      	adds	r3, #255	; 0xff
    7642:	58ea      	ldr	r2, [r5, r3]
    7644:	4294      	cmp	r4, r2
    7646:	d100      	bne.n	764a <connection_release+0xb6>
		_radio.conn_upd = NULL;
    7648:	50e9      	str	r1, [r5, r3]
}
    764a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    764c:	2203      	movs	r2, #3
    764e:	790b      	ldrb	r3, [r1, #4]
    7650:	4393      	bics	r3, r2
    7652:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    7654:	680b      	ldr	r3, [r1, #0]
    7656:	6033      	str	r3, [r6, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    7658:	8c20      	ldrh	r0, [r4, #32]
    765a:	f7ff ff27 	bl	74ac <pdu_node_tx_release>
    765e:	e7cd      	b.n	75fc <connection_release+0x68>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    7660:	0029      	movs	r1, r5
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    7662:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    7664:	3151      	adds	r1, #81	; 0x51
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    7666:	6033      	str	r3, [r6, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    7668:	31ff      	adds	r1, #255	; 0xff
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    766a:	603b      	str	r3, [r7, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    766c:	f7fd fcb9 	bl	4fe2 <mem_release>
    7670:	e7d1      	b.n	7616 <connection_release+0x82>
		conn->pkt_tx_data = conn->pkt_tx_head;
    7672:	0022      	movs	r2, r4
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    7674:	790b      	ldrb	r3, [r1, #4]
		conn->pkt_tx_data = conn->pkt_tx_head;
    7676:	32f8      	adds	r2, #248	; 0xf8
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    7678:	43bb      	bics	r3, r7
    767a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    767c:	680b      	ldr	r3, [r1, #0]
    767e:	6033      	str	r3, [r6, #0]
		conn->pkt_tx_data = conn->pkt_tx_head;
    7680:	6013      	str	r3, [r2, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    7682:	8c20      	ldrh	r0, [r4, #32]
    7684:	f7ff ff12 	bl	74ac <pdu_node_tx_release>
    7688:	e7d3      	b.n	7632 <connection_release+0x9e>
    768a:	46c0      	nop			; (mov r8, r8)
    768c:	000077d1 	.word	0x000077d1
    7690:	00002308 	.word	0x00002308
    7694:	20000298 	.word	0x20000298
    7698:	00002319 	.word	0x00002319
    769c:	00002320 	.word	0x00002320

000076a0 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    76a0:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    76a2:	1f03      	subs	r3, r0, #4
{
    76a4:	b510      	push	{r4, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    76a6:	2b01      	cmp	r3, #1
    76a8:	d901      	bls.n	76ae <mayfly_radio_stop+0xe>
    76aa:	f7ff fd19 	bl	70e0 <chan_set.part.23>
	radio_used = ((_radio.state != STATE_NONE) &&
    76ae:	4a08      	ldr	r2, [pc, #32]	; (76d0 <mayfly_radio_stop+0x30>)
    76b0:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    76b2:	2b00      	cmp	r3, #0
    76b4:	d006      	beq.n	76c4 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    76b6:	3b04      	subs	r3, #4
    76b8:	2b01      	cmp	r3, #1
    76ba:	d903      	bls.n	76c4 <mayfly_radio_stop+0x24>
			_radio.state = state;
    76bc:	7410      	strb	r0, [r2, #16]
		radio_disable();
    76be:	f003 ff63 	bl	b588 <radio_disable>
}
    76c2:	bd10      	pop	{r4, pc}
	if (radio_used || !radio_is_idle()) {
    76c4:	f003 ff82 	bl	b5cc <radio_is_idle>
    76c8:	2800      	cmp	r0, #0
    76ca:	d0f8      	beq.n	76be <mayfly_radio_stop+0x1e>
    76cc:	e7f9      	b.n	76c2 <mayfly_radio_stop+0x22>
    76ce:	46c0      	nop			; (mov r8, r8)
    76d0:	20000298 	.word	0x20000298

000076d4 <mayfly_radio_active>:
{
    76d4:	b510      	push	{r4, lr}
    76d6:	4b0b      	ldr	r3, [pc, #44]	; (7704 <mayfly_radio_active+0x30>)
	if ((u32_t)params) {
    76d8:	2800      	cmp	r0, #0
    76da:	d006      	beq.n	76ea <mayfly_radio_active+0x16>
		if (s_active++) {
    76dc:	781a      	ldrb	r2, [r3, #0]
		radio_active_callback(1);
    76de:	2001      	movs	r0, #1
		if (s_active++) {
    76e0:	1c51      	adds	r1, r2, #1
    76e2:	7019      	strb	r1, [r3, #0]
    76e4:	2a00      	cmp	r2, #0
    76e6:	d00a      	beq.n	76fe <mayfly_radio_active+0x2a>
}
    76e8:	bd10      	pop	{r4, pc}
		LL_ASSERT(s_active);
    76ea:	7818      	ldrb	r0, [r3, #0]
    76ec:	2800      	cmp	r0, #0
    76ee:	d101      	bne.n	76f4 <mayfly_radio_active+0x20>
    76f0:	f7ff fcf6 	bl	70e0 <chan_set.part.23>
		if (--s_active) {
    76f4:	3801      	subs	r0, #1
    76f6:	b2c0      	uxtb	r0, r0
    76f8:	7018      	strb	r0, [r3, #0]
    76fa:	2800      	cmp	r0, #0
    76fc:	d1f4      	bne.n	76e8 <mayfly_radio_active+0x14>
		radio_active_callback(0);
    76fe:	f003 f99c 	bl	aa3a <radio_active_callback>
    7702:	e7f1      	b.n	76e8 <mayfly_radio_active+0x14>
    7704:	20000448 	.word	0x20000448

00007708 <mayfly_radio_inactive>:
{
    7708:	b510      	push	{r4, lr}
	mayfly_radio_active(0);
    770a:	2000      	movs	r0, #0
    770c:	f7ff ffe2 	bl	76d4 <mayfly_radio_active>
}
    7710:	bd10      	pop	{r4, pc}
	...

00007714 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7714:	2200      	movs	r2, #0
{
    7716:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7718:	4b04      	ldr	r3, [pc, #16]	; (772c <event_xtal+0x18>)
    771a:	0011      	movs	r1, r2
    771c:	0010      	movs	r0, r2
    771e:	f7fd fcfd 	bl	511c <mayfly_enqueue>
	LL_ASSERT(!retval);
    7722:	2800      	cmp	r0, #0
    7724:	d001      	beq.n	772a <event_xtal+0x16>
    7726:	f7ff fcdb 	bl	70e0 <chan_set.part.23>
}
    772a:	bd10      	pop	{r4, pc}
    772c:	200023f8 	.word	0x200023f8

00007730 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7730:	2200      	movs	r2, #0
{
    7732:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7734:	4b04      	ldr	r3, [pc, #16]	; (7748 <event_active+0x18>)
    7736:	0011      	movs	r1, r2
    7738:	0010      	movs	r0, r2
    773a:	f7fd fcef 	bl	511c <mayfly_enqueue>
	LL_ASSERT(!retval);
    773e:	2800      	cmp	r0, #0
    7740:	d001      	beq.n	7746 <event_active+0x16>
    7742:	f7ff fccd 	bl	70e0 <chan_set.part.23>
}
    7746:	bd10      	pop	{r4, pc}
    7748:	20002378 	.word	0x20002378

0000774c <ticker_update_slave_assert>:
{
    774c:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    774e:	2800      	cmp	r0, #0
    7750:	d006      	beq.n	7760 <ticker_update_slave_assert+0x14>
    7752:	4b04      	ldr	r3, [pc, #16]	; (7764 <ticker_update_slave_assert+0x18>)
    7754:	b2c9      	uxtb	r1, r1
    7756:	7b9b      	ldrb	r3, [r3, #14]
    7758:	4299      	cmp	r1, r3
    775a:	d001      	beq.n	7760 <ticker_update_slave_assert+0x14>
    775c:	f7ff fcc0 	bl	70e0 <chan_set.part.23>
}
    7760:	bd10      	pop	{r4, pc}
    7762:	46c0      	nop			; (mov r8, r8)
    7764:	20000298 	.word	0x20000298

00007768 <ticker_update_adv_assert>:
{
    7768:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    776a:	2800      	cmp	r0, #0
    776c:	d005      	beq.n	777a <ticker_update_adv_assert+0x12>
    776e:	4b03      	ldr	r3, [pc, #12]	; (777c <ticker_update_adv_assert+0x14>)
    7770:	7b9b      	ldrb	r3, [r3, #14]
    7772:	2b05      	cmp	r3, #5
    7774:	d001      	beq.n	777a <ticker_update_adv_assert+0x12>
    7776:	f7ff fcb3 	bl	70e0 <chan_set.part.23>
}
    777a:	bd10      	pop	{r4, pc}
    777c:	20000298 	.word	0x20000298

00007780 <ticker_stop_scan_assert>:
{
    7780:	b510      	push	{r4, lr}
    7782:	4b08      	ldr	r3, [pc, #32]	; (77a4 <ticker_stop_scan_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    7784:	2801      	cmp	r0, #1
    7786:	d107      	bne.n	7798 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    7788:	7b9a      	ldrb	r2, [r3, #14]
    778a:	2a06      	cmp	r2, #6
    778c:	d102      	bne.n	7794 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    778e:	2200      	movs	r2, #0
    7790:	739a      	strb	r2, [r3, #14]
}
    7792:	bd10      	pop	{r4, pc}
    7794:	f7ff fca4 	bl	70e0 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    7798:	7b1b      	ldrb	r3, [r3, #12]
    779a:	2b06      	cmp	r3, #6
    779c:	d1f9      	bne.n	7792 <ticker_stop_scan_assert+0x12>
    779e:	b662      	cpsie	i
    77a0:	2004      	movs	r0, #4
    77a2:	df02      	svc	2
    77a4:	20000298 	.word	0x20000298

000077a8 <ticker_stop_adv_assert>:
{
    77a8:	b510      	push	{r4, lr}
    77aa:	4b08      	ldr	r3, [pc, #32]	; (77cc <ticker_stop_adv_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    77ac:	2801      	cmp	r0, #1
    77ae:	d107      	bne.n	77c0 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    77b0:	7b9a      	ldrb	r2, [r3, #14]
    77b2:	2a05      	cmp	r2, #5
    77b4:	d102      	bne.n	77bc <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    77b6:	2200      	movs	r2, #0
    77b8:	739a      	strb	r2, [r3, #14]
}
    77ba:	bd10      	pop	{r4, pc}
    77bc:	f7ff fc90 	bl	70e0 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    77c0:	7b1b      	ldrb	r3, [r3, #12]
    77c2:	2b05      	cmp	r3, #5
    77c4:	d1f9      	bne.n	77ba <ticker_stop_adv_assert+0x12>
    77c6:	b662      	cpsie	i
    77c8:	2004      	movs	r0, #4
    77ca:	df02      	svc	2
    77cc:	20000298 	.word	0x20000298

000077d0 <ticker_success_assert>:
{
    77d0:	b510      	push	{r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    77d2:	2800      	cmp	r0, #0
    77d4:	d001      	beq.n	77da <ticker_success_assert+0xa>
    77d6:	f7ff fc83 	bl	70e0 <chan_set.part.23>
}
    77da:	bd10      	pop	{r4, pc}

000077dc <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    77dc:	b570      	push	{r4, r5, r6, lr}
    77de:	0005      	movs	r5, r0
	node_rx = packet_rx_reserve_get(3);
    77e0:	2003      	movs	r0, #3
    77e2:	f7ff f945 	bl	6a70 <packet_rx_reserve_get>
	if (node_rx == 0) {
    77e6:	2800      	cmp	r0, #0
    77e8:	d023      	beq.n	7832 <isr_rx_scan_report.isra.37+0x56>
	node_rx->hdr.handle = 0xffff;
    77ea:	2301      	movs	r3, #1
    77ec:	425b      	negs	r3, r3
    77ee:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    77f0:	4b11      	ldr	r3, [pc, #68]	; (7838 <isr_rx_scan_report.isra.37+0x5c>)
    77f2:	33dd      	adds	r3, #221	; 0xdd
    77f4:	781b      	ldrb	r3, [r3, #0]
    77f6:	075a      	lsls	r2, r3, #29
    77f8:	d019      	beq.n	782e <isr_rx_scan_report.isra.37+0x52>
		switch (_radio.scanner.phy) {
    77fa:	075b      	lsls	r3, r3, #29
    77fc:	0f5b      	lsrs	r3, r3, #29
    77fe:	b2da      	uxtb	r2, r3
    7800:	2a01      	cmp	r2, #1
    7802:	d004      	beq.n	780e <isr_rx_scan_report.isra.37+0x32>
    7804:	2a04      	cmp	r2, #4
    7806:	d003      	beq.n	7810 <isr_rx_scan_report.isra.37+0x34>
		LL_ASSERT(0);
    7808:	b662      	cpsie	i
    780a:	2004      	movs	r0, #4
    780c:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    780e:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    7810:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    7812:	7103      	strb	r3, [r0, #4]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    7814:	1904      	adds	r4, r0, r4
    7816:	340a      	adds	r4, #10
    7818:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    781a:	2d00      	cmp	r5, #0
    781c:	d002      	beq.n	7824 <isr_rx_scan_report.isra.37+0x48>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    781e:	f003 ff27 	bl	b670 <radio_rssi_get>
			     pdu_adv_rx->len] =
    7822:	4006      	ands	r6, r0
    7824:	7026      	strb	r6, [r4, #0]
	packet_rx_enqueue();
    7826:	f7ff fca5 	bl	7174 <packet_rx_enqueue>
	return 0;
    782a:	2000      	movs	r0, #0
}
    782c:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    782e:	2302      	movs	r3, #2
    7830:	e7ee      	b.n	7810 <isr_rx_scan_report.isra.37+0x34>
		return 1;
    7832:	2001      	movs	r0, #1
    7834:	e7fa      	b.n	782c <isr_rx_scan_report.isra.37+0x50>
    7836:	46c0      	nop			; (mov r8, r8)
    7838:	20000298 	.word	0x20000298

0000783c <adv_scan_configure.constprop.47>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    783c:	b513      	push	{r0, r1, r4, lr}
    783e:	0004      	movs	r4, r0
	u32_t aa = 0x8e89bed6;
    7840:	4b0d      	ldr	r3, [pc, #52]	; (7878 <adv_scan_configure.constprop.47+0x3c>)
    7842:	9301      	str	r3, [sp, #4]
	radio_reset();
    7844:	f003 fdf8 	bl	b438 <radio_reset>
	radio_tx_power_set(0);
    7848:	2000      	movs	r0, #0
    784a:	f003 fe11 	bl	b470 <radio_tx_power_set>
	radio_isr_set(isr);
    784e:	480b      	ldr	r0, [pc, #44]	; (787c <adv_scan_configure.constprop.47+0x40>)
    7850:	f003 fdd8 	bl	b404 <radio_isr_set>
	radio_phy_set(phy, flags);
    7854:	2101      	movs	r1, #1
    7856:	0020      	movs	r0, r4
    7858:	f003 fdfe 	bl	b458 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    785c:	0064      	lsls	r4, r4, #1
	radio_aa_set((u8_t *)&aa);
    785e:	a801      	add	r0, sp, #4
    7860:	f003 fe2a 	bl	b4b8 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    7864:	b2e2      	uxtb	r2, r4
    7866:	2125      	movs	r1, #37	; 0x25
    7868:	2008      	movs	r0, #8
    786a:	f003 fe43 	bl	b4f4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    786e:	4904      	ldr	r1, [pc, #16]	; (7880 <adv_scan_configure.constprop.47+0x44>)
    7870:	4804      	ldr	r0, [pc, #16]	; (7884 <adv_scan_configure.constprop.47+0x48>)
    7872:	f003 feb5 	bl	b5e0 <radio_crc_configure>
}
    7876:	bd13      	pop	{r0, r1, r4, pc}
    7878:	8e89bed6 	.word	0x8e89bed6
    787c:	000087fd 	.word	0x000087fd
    7880:	00555555 	.word	0x00555555
    7884:	0000065b 	.word	0x0000065b

00007888 <event_stop.constprop.48>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7888:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    788a:	4b06      	ldr	r3, [pc, #24]	; (78a4 <event_stop.constprop.48+0x1c>)
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    788c:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    788e:	0011      	movs	r1, r2
	s_mfy_radio_stop.param = context;
    7890:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7892:	0010      	movs	r0, r2
    7894:	f7fd fc42 	bl	511c <mayfly_enqueue>
	LL_ASSERT(!retval);
    7898:	2800      	cmp	r0, #0
    789a:	d001      	beq.n	78a0 <event_stop.constprop.48+0x18>
    789c:	f7ff fc20 	bl	70e0 <chan_set.part.23>
}
    78a0:	bd10      	pop	{r4, pc}
    78a2:	46c0      	nop			; (mov r8, r8)
    78a4:	200023b8 	.word	0x200023b8

000078a8 <event_common_prepare>:
{
    78a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78aa:	0016      	movs	r6, r2
    78ac:	b08f      	sub	sp, #60	; 0x3c
    78ae:	930b      	str	r3, [sp, #44]	; 0x2c
    78b0:	ab14      	add	r3, sp, #80	; 0x50
    78b2:	cb04      	ldmia	r3!, {r2}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    78b4:	6834      	ldr	r4, [r6, #0]
{
    78b6:	781b      	ldrb	r3, [r3, #0]
    78b8:	900a      	str	r0, [sp, #40]	; 0x28
    78ba:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    78bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
    78be:	910d      	str	r1, [sp, #52]	; 0x34
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    78c0:	681f      	ldr	r7, [r3, #0]
	if (_ticks_xtal_to_start & XON_BITMASK) {
    78c2:	2c00      	cmp	r4, #0
    78c4:	da03      	bge.n	78ce <event_common_prepare+0x26>
		_ticks_xtal_to_start =
    78c6:	003c      	movs	r4, r7
    78c8:	4297      	cmp	r7, r2
    78ca:	d200      	bcs.n	78ce <event_common_prepare+0x26>
    78cc:	0014      	movs	r4, r2
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    78ce:	42bc      	cmp	r4, r7
    78d0:	d800      	bhi.n	78d4 <event_common_prepare+0x2c>
    78d2:	e06e      	b.n	79b2 <event_common_prepare+0x10a>
		ticker_status =
    78d4:	2000      	movs	r0, #0
    78d6:	4b4d      	ldr	r3, [pc, #308]	; (7a0c <event_common_prepare+0x164>)
    78d8:	9006      	str	r0, [sp, #24]
    78da:	9308      	str	r3, [sp, #32]
    78dc:	4b4c      	ldr	r3, [pc, #304]	; (7a10 <event_common_prepare+0x168>)
    78de:	9004      	str	r0, [sp, #16]
    78e0:	9307      	str	r3, [sp, #28]
    78e2:	4b4c      	ldr	r3, [pc, #304]	; (7a14 <event_common_prepare+0x16c>)
    78e4:	9003      	str	r0, [sp, #12]
    78e6:	9305      	str	r3, [sp, #20]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    78e8:	1be3      	subs	r3, r4, r7
		ticker_status =
    78ea:	9300      	str	r3, [sp, #0]
    78ec:	9002      	str	r0, [sp, #8]
    78ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    78f0:	9001      	str	r0, [sp, #4]
    78f2:	2201      	movs	r2, #1
    78f4:	0001      	movs	r1, r0
    78f6:	f7fe f985 	bl	5c04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    78fa:	2302      	movs	r3, #2
    78fc:	4398      	bics	r0, r3
    78fe:	d002      	beq.n	7906 <event_common_prepare+0x5e>
		LL_ASSERT(!retval);
    7900:	b662      	cpsie	i
    7902:	2004      	movs	r0, #4
    7904:	df02      	svc	2
		event_xtal(0, 0, 0, NULL);
    7906:	0003      	movs	r3, r0
    7908:	0002      	movs	r2, r0
    790a:	0001      	movs	r1, r0
		event_xtal(0, 0, 0, NULL);
    790c:	f7ff ff02 	bl	7714 <event_xtal>
	ticker_status =
    7910:	2000      	movs	r0, #0
	_radio.remainder_anchor = remainder;
    7912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7914:	4d40      	ldr	r5, [pc, #256]	; (7a18 <event_common_prepare+0x170>)
	ticker_status =
    7916:	0002      	movs	r2, r0
	_radio.remainder_anchor = remainder;
    7918:	60ab      	str	r3, [r5, #8]
	ticker_status =
    791a:	4b40      	ldr	r3, [pc, #256]	; (7a1c <event_common_prepare+0x174>)
    791c:	9004      	str	r0, [sp, #16]
    791e:	9308      	str	r3, [sp, #32]
    7920:	4b3b      	ldr	r3, [pc, #236]	; (7a10 <event_common_prepare+0x168>)
    7922:	9003      	str	r0, [sp, #12]
    7924:	9307      	str	r3, [sp, #28]
    7926:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7928:	9002      	str	r0, [sp, #8]
    792a:	9306      	str	r3, [sp, #24]
    792c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    792e:	9001      	str	r0, [sp, #4]
    7930:	9305      	str	r3, [sp, #20]
    7932:	9400      	str	r4, [sp, #0]
    7934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7936:	0001      	movs	r1, r0
    7938:	f7fe f964 	bl	5c04 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    793c:	2302      	movs	r3, #2
    793e:	4398      	bics	r0, r3
    7940:	d1de      	bne.n	7900 <event_common_prepare+0x58>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    7942:	2005      	movs	r0, #5
    7944:	f7ff ffa0 	bl	7888 <event_stop.constprop.48>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    7948:	002b      	movs	r3, r5
    794a:	33fc      	adds	r3, #252	; 0xfc
    794c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    794e:	429f      	cmp	r7, r3
    7950:	d020      	beq.n	7994 <event_common_prepare+0xec>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    7952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7954:	6013      	str	r3, [r2, #0]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    7956:	6833      	ldr	r3, [r6, #0]
    7958:	2b00      	cmp	r3, #0
    795a:	da02      	bge.n	7962 <event_common_prepare+0xba>
			*ticks_xtal_to_start &= ~XON_BITMASK;
    795c:	005b      	lsls	r3, r3, #1
    795e:	085b      	lsrs	r3, r3, #1
    7960:	6033      	str	r3, [r6, #0]
				     _radio.ticks_active_to_start;
    7962:	35fc      	adds	r5, #252	; 0xfc
		ticks_to_start_new = (_radio.ticks_active_to_start <
    7964:	6831      	ldr	r1, [r6, #0]
    7966:	6fea      	ldr	r2, [r5, #124]	; 0x7c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    7968:	b2a3      	uxth	r3, r4
		ticks_to_start_new = (_radio.ticks_active_to_start <
    796a:	428a      	cmp	r2, r1
    796c:	d200      	bcs.n	7970 <event_common_prepare+0xc8>
    796e:	000a      	movs	r2, r1
		ticker_status =
    7970:	2000      	movs	r0, #0
    7972:	492b      	ldr	r1, [pc, #172]	; (7a20 <event_common_prepare+0x178>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    7974:	b292      	uxth	r2, r2
		ticker_status =
    7976:	9106      	str	r1, [sp, #24]
    7978:	4925      	ldr	r1, [pc, #148]	; (7a10 <event_common_prepare+0x168>)
    797a:	9302      	str	r3, [sp, #8]
    797c:	9105      	str	r1, [sp, #20]
    797e:	9201      	str	r2, [sp, #4]
    7980:	9200      	str	r2, [sp, #0]
    7982:	9004      	str	r0, [sp, #16]
    7984:	9003      	str	r0, [sp, #12]
    7986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7988:	0001      	movs	r1, r0
    798a:	f7fe f97d 	bl	5c88 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    798e:	2302      	movs	r3, #2
    7990:	4398      	bics	r0, r3
    7992:	d1b5      	bne.n	7900 <event_common_prepare+0x58>
	packet_tx_enqueue(0xFF);
    7994:	20ff      	movs	r0, #255	; 0xff
    7996:	f7ff fdad 	bl	74f4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    799a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    799c:	4b21      	ldr	r3, [pc, #132]	; (7a24 <event_common_prepare+0x17c>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    799e:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    79a0:	609a      	str	r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    79a2:	2201      	movs	r2, #1
    79a4:	0011      	movs	r1, r2
    79a6:	f7fd fbb9 	bl	511c <mayfly_enqueue>
		LL_ASSERT(!retval);
    79aa:	2800      	cmp	r0, #0
    79ac:	d1a8      	bne.n	7900 <event_common_prepare+0x58>
}
    79ae:	b00f      	add	sp, #60	; 0x3c
    79b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    79b2:	42bc      	cmp	r4, r7
    79b4:	d21e      	bcs.n	79f4 <event_common_prepare+0x14c>
		event_active(0, 0, 0, NULL);
    79b6:	2300      	movs	r3, #0
    79b8:	001a      	movs	r2, r3
    79ba:	0019      	movs	r1, r3
    79bc:	0018      	movs	r0, r3
    79be:	f7ff feb7 	bl	7730 <event_active>
		ticker_status =
    79c2:	2000      	movs	r0, #0
    79c4:	4b18      	ldr	r3, [pc, #96]	; (7a28 <event_common_prepare+0x180>)
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    79c6:	1b3c      	subs	r4, r7, r4
		ticker_status =
    79c8:	9308      	str	r3, [sp, #32]
    79ca:	4b11      	ldr	r3, [pc, #68]	; (7a10 <event_common_prepare+0x168>)
    79cc:	9006      	str	r0, [sp, #24]
    79ce:	9307      	str	r3, [sp, #28]
    79d0:	4b16      	ldr	r3, [pc, #88]	; (7a2c <event_common_prepare+0x184>)
    79d2:	9004      	str	r0, [sp, #16]
    79d4:	9305      	str	r3, [sp, #20]
    79d6:	9003      	str	r0, [sp, #12]
    79d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    79da:	9002      	str	r0, [sp, #8]
    79dc:	9001      	str	r0, [sp, #4]
    79de:	9400      	str	r4, [sp, #0]
    79e0:	2201      	movs	r2, #1
    79e2:	0001      	movs	r1, r0
    79e4:	f7fe f90e 	bl	5c04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    79e8:	2302      	movs	r3, #2
    79ea:	4398      	bics	r0, r3
    79ec:	d000      	beq.n	79f0 <event_common_prepare+0x148>
    79ee:	e787      	b.n	7900 <event_common_prepare+0x58>
    79f0:	003c      	movs	r4, r7
    79f2:	e78d      	b.n	7910 <event_common_prepare+0x68>
		event_active(0, 0, 0, NULL);
    79f4:	2300      	movs	r3, #0
    79f6:	001a      	movs	r2, r3
    79f8:	0019      	movs	r1, r3
    79fa:	0018      	movs	r0, r3
    79fc:	f7ff fe98 	bl	7730 <event_active>
		event_xtal(0, 0, 0, NULL);
    7a00:	2300      	movs	r3, #0
    7a02:	001a      	movs	r2, r3
    7a04:	0019      	movs	r1, r3
    7a06:	0018      	movs	r0, r3
    7a08:	e780      	b.n	790c <event_common_prepare+0x64>
    7a0a:	46c0      	nop			; (mov r8, r8)
    7a0c:	00001585 	.word	0x00001585
    7a10:	000077d1 	.word	0x000077d1
    7a14:	00007731 	.word	0x00007731
    7a18:	20000298 	.word	0x20000298
    7a1c:	000015b2 	.word	0x000015b2
    7a20:	000015e2 	.word	0x000015e2
    7a24:	20002458 	.word	0x20002458
    7a28:	0000159a 	.word	0x0000159a
    7a2c:	00007715 	.word	0x00007715

00007a30 <radio_event_adv_prepare>:
{
    7a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7a32:	4c0b      	ldr	r4, [pc, #44]	; (7a60 <radio_event_adv_prepare+0x30>)
    7a34:	7b25      	ldrb	r5, [r4, #12]
    7a36:	b2ed      	uxtb	r5, r5
    7a38:	2d00      	cmp	r5, #0
    7a3a:	d001      	beq.n	7a40 <radio_event_adv_prepare+0x10>
    7a3c:	f7ff fb50 	bl	70e0 <chan_set.part.23>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    7a40:	2605      	movs	r6, #5
	event_common_prepare(ticks_at_expire, remainder,
    7a42:	0023      	movs	r3, r4
    7a44:	0022      	movs	r2, r4
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    7a46:	7326      	strb	r6, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
    7a48:	9503      	str	r5, [sp, #12]
    7a4a:	4d06      	ldr	r5, [pc, #24]	; (7a64 <radio_event_adv_prepare+0x34>)
    7a4c:	9601      	str	r6, [sp, #4]
    7a4e:	9502      	str	r5, [sp, #8]
    7a50:	69e4      	ldr	r4, [r4, #28]
    7a52:	3318      	adds	r3, #24
    7a54:	3214      	adds	r2, #20
    7a56:	9400      	str	r4, [sp, #0]
    7a58:	f7ff ff26 	bl	78a8 <event_common_prepare>
}
    7a5c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7a5e:	46c0      	nop			; (mov r8, r8)
    7a60:	20000298 	.word	0x20000298
    7a64:	00007ce1 	.word	0x00007ce1

00007a68 <event_adv_stop>:
{
    7a68:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    7a6a:	2005      	movs	r0, #5
    7a6c:	f7ff ff0c 	bl	7888 <event_stop.constprop.48>
	ticker_status =
    7a70:	2100      	movs	r1, #0
    7a72:	4b06      	ldr	r3, [pc, #24]	; (7a8c <event_adv_stop+0x24>)
    7a74:	2205      	movs	r2, #5
    7a76:	9300      	str	r3, [sp, #0]
    7a78:	0008      	movs	r0, r1
    7a7a:	4b05      	ldr	r3, [pc, #20]	; (7a90 <event_adv_stop+0x28>)
    7a7c:	f7fe f954 	bl	5d28 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7a80:	2302      	movs	r3, #2
    7a82:	4398      	bics	r0, r3
    7a84:	d001      	beq.n	7a8a <event_adv_stop+0x22>
    7a86:	f7ff fb2b 	bl	70e0 <chan_set.part.23>
}
    7a8a:	bd07      	pop	{r0, r1, r2, pc}
    7a8c:	000018a6 	.word	0x000018a6
    7a90:	00007205 	.word	0x00007205

00007a94 <packet_rx_allocate.constprop.49>:
static void packet_rx_allocate(u8_t max)
    7a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (max > _radio.link_rx_data_quota) {
    7a96:	23a4      	movs	r3, #164	; 0xa4
    7a98:	4d1f      	ldr	r5, [pc, #124]	; (7b18 <packet_rx_allocate.constprop.49+0x84>)
    7a9a:	005b      	lsls	r3, r3, #1
    7a9c:	5cee      	ldrb	r6, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    7a9e:	3b12      	subs	r3, #18
    7aa0:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    7aa2:	3b02      	subs	r3, #2
	acquire = _radio.packet_rx_acquire + 1;
    7aa4:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    7aa6:	5ceb      	ldrb	r3, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    7aa8:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
    7aaa:	42a3      	cmp	r3, r4
    7aac:	d100      	bne.n	7ab0 <packet_rx_allocate.constprop.49+0x1c>
		acquire = 0;
    7aae:	2400      	movs	r4, #0
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    7ab0:	2e00      	cmp	r6, #0
    7ab2:	d014      	beq.n	7ade <packet_rx_allocate.constprop.49+0x4a>
    7ab4:	2336      	movs	r3, #54	; 0x36
    7ab6:	33ff      	adds	r3, #255	; 0xff
    7ab8:	5ceb      	ldrb	r3, [r5, r3]
    7aba:	429c      	cmp	r4, r3
    7abc:	d00f      	beq.n	7ade <packet_rx_allocate.constprop.49+0x4a>
		link = mem_acquire(&_radio.link_rx_free);
    7abe:	4817      	ldr	r0, [pc, #92]	; (7b1c <packet_rx_allocate.constprop.49+0x88>)
    7ac0:	f7fd fa76 	bl	4fb0 <mem_acquire>
    7ac4:	1e07      	subs	r7, r0, #0
		if (!link) {
    7ac6:	d00a      	beq.n	7ade <packet_rx_allocate.constprop.49+0x4a>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    7ac8:	0028      	movs	r0, r5
    7aca:	3025      	adds	r0, #37	; 0x25
    7acc:	30ff      	adds	r0, #255	; 0xff
    7ace:	f7fd fa6f 	bl	4fb0 <mem_acquire>
		if (!node_rx) {
    7ad2:	2800      	cmp	r0, #0
    7ad4:	d104      	bne.n	7ae0 <packet_rx_allocate.constprop.49+0x4c>
			mem_release(link, &_radio.link_rx_free);
    7ad6:	4911      	ldr	r1, [pc, #68]	; (7b1c <packet_rx_allocate.constprop.49+0x88>)
    7ad8:	0038      	movs	r0, r7
    7ada:	f7fd fa82 	bl	4fe2 <mem_release>
}
    7ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    7ae0:	239b      	movs	r3, #155	; 0x9b
    7ae2:	002a      	movs	r2, r5
		node_rx->hdr.onion.link = link;
    7ae4:	6007      	str	r7, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    7ae6:	005b      	lsls	r3, r3, #1
    7ae8:	5ceb      	ldrb	r3, [r5, r3]
    7aea:	32fc      	adds	r2, #252	; 0xfc
    7aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
    7aee:	009b      	lsls	r3, r3, #2
    7af0:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    7af2:	239b      	movs	r3, #155	; 0x9b
    7af4:	005b      	lsls	r3, r3, #1
    7af6:	54ec      	strb	r4, [r5, r3]
		if (acquire == _radio.packet_rx_count) {
    7af8:	3b02      	subs	r3, #2
		acquire = _radio.packet_rx_acquire + 1;
    7afa:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    7afc:	5ceb      	ldrb	r3, [r5, r3]
		acquire = _radio.packet_rx_acquire + 1;
    7afe:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    7b00:	42a3      	cmp	r3, r4
    7b02:	d100      	bne.n	7b06 <packet_rx_allocate.constprop.49+0x72>
			acquire = 0;
    7b04:	2400      	movs	r4, #0
		_radio.link_rx_data_quota--;
    7b06:	22a4      	movs	r2, #164	; 0xa4
    7b08:	0052      	lsls	r2, r2, #1
    7b0a:	5cab      	ldrb	r3, [r5, r2]
    7b0c:	3e01      	subs	r6, #1
    7b0e:	3b01      	subs	r3, #1
    7b10:	54ab      	strb	r3, [r5, r2]
    7b12:	b2f6      	uxtb	r6, r6
    7b14:	e7cc      	b.n	7ab0 <packet_rx_allocate.constprop.49+0x1c>
    7b16:	46c0      	nop			; (mov r8, r8)
    7b18:	20000298 	.word	0x20000298
    7b1c:	200003d4 	.word	0x200003d4

00007b20 <common_init>:
{
    7b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.connection_count) {
    7b22:	4c33      	ldr	r4, [pc, #204]	; (7bf0 <common_init+0xd0>)
    7b24:	0023      	movs	r3, r4
    7b26:	0020      	movs	r0, r4
    7b28:	33ff      	adds	r3, #255	; 0xff
    7b2a:	7b5a      	ldrb	r2, [r3, #13]
    7b2c:	30fc      	adds	r0, #252	; 0xfc
    7b2e:	2a00      	cmp	r2, #0
    7b30:	d043      	beq.n	7bba <common_init+0x9a>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    7b32:	0023      	movs	r3, r4
    7b34:	2182      	movs	r1, #130	; 0x82
    7b36:	3309      	adds	r3, #9
    7b38:	33ff      	adds	r3, #255	; 0xff
    7b3a:	b292      	uxth	r2, r2
    7b3c:	0049      	lsls	r1, r1, #1
    7b3e:	6880      	ldr	r0, [r0, #8]
    7b40:	f7fd fa10 	bl	4f64 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    7b44:	0023      	movs	r3, r4
    7b46:	2297      	movs	r2, #151	; 0x97
    7b48:	0021      	movs	r1, r4
    7b4a:	0026      	movs	r6, r4
    7b4c:	3325      	adds	r3, #37	; 0x25
    7b4e:	36fc      	adds	r6, #252	; 0xfc
    7b50:	0052      	lsls	r2, r2, #1
    7b52:	31fe      	adds	r1, #254	; 0xfe
    7b54:	33ff      	adds	r3, #255	; 0xff
    7b56:	5ca2      	ldrb	r2, [r4, r2]
    7b58:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
    7b5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b5c:	f7fd fa02 	bl	4f64 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    7b60:	0025      	movs	r5, r4
    7b62:	239a      	movs	r3, #154	; 0x9a
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    7b64:	0027      	movs	r7, r4
		 (_radio.packet_rx_count + _radio.connection_count),
    7b66:	005b      	lsls	r3, r3, #1
    7b68:	35ff      	adds	r5, #255	; 0xff
    7b6a:	5ce2      	ldrb	r2, [r4, r3]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    7b6c:	373d      	adds	r7, #61	; 0x3d
		 (_radio.packet_rx_count + _radio.connection_count),
    7b6e:	7b6b      	ldrb	r3, [r5, #13]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    7b70:	37ff      	adds	r7, #255	; 0xff
    7b72:	18d2      	adds	r2, r2, r3
    7b74:	2108      	movs	r1, #8
    7b76:	003b      	movs	r3, r7
    7b78:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    7b7a:	f7fd f9f3 	bl	4f64 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    7b7e:	0023      	movs	r3, r4
    7b80:	3351      	adds	r3, #81	; 0x51
    7b82:	33ff      	adds	r3, #255	; 0xff
    7b84:	2202      	movs	r2, #2
    7b86:	2124      	movs	r1, #36	; 0x24
    7b88:	6d30      	ldr	r0, [r6, #80]	; 0x50
    7b8a:	f7fd f9eb 	bl	4f64 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    7b8e:	22b4      	movs	r2, #180	; 0xb4
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    7b90:	0023      	movs	r3, r4
    7b92:	21ae      	movs	r1, #174	; 0xae
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    7b94:	0052      	lsls	r2, r2, #1
    7b96:	5ca2      	ldrb	r2, [r4, r2]
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    7b98:	3359      	adds	r3, #89	; 0x59
    7b9a:	3a01      	subs	r2, #1
    7b9c:	0049      	lsls	r1, r1, #1
    7b9e:	6db0      	ldr	r0, [r6, #88]	; 0x58
    7ba0:	33ff      	adds	r3, #255	; 0xff
    7ba2:	b292      	uxth	r2, r2
    7ba4:	5a61      	ldrh	r1, [r4, r1]
    7ba6:	f7fd f9dd 	bl	4f64 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    7baa:	0038      	movs	r0, r7
    7bac:	f7fd fa00 	bl	4fb0 <mem_acquire>
	LL_ASSERT(link);
    7bb0:	2800      	cmp	r0, #0
    7bb2:	d104      	bne.n	7bbe <common_init+0x9e>
    7bb4:	b662      	cpsie	i
    7bb6:	2004      	movs	r0, #4
    7bb8:	df02      	svc	2
		_radio.conn_free = NULL;
    7bba:	60c2      	str	r2, [r0, #12]
    7bbc:	e7c2      	b.n	7b44 <common_init+0x24>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    7bbe:	0022      	movs	r2, r4
    7bc0:	0021      	movs	r1, r4
    7bc2:	3245      	adds	r2, #69	; 0x45
    7bc4:	3141      	adds	r1, #65	; 0x41
    7bc6:	31ff      	adds	r1, #255	; 0xff
    7bc8:	32ff      	adds	r2, #255	; 0xff
    7bca:	f7fd fa3b 	bl	5044 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    7bce:	2338      	movs	r3, #56	; 0x38
    7bd0:	3406      	adds	r4, #6
    7bd2:	7fe2      	ldrb	r2, [r4, #31]
    7bd4:	4313      	orrs	r3, r2
    7bd6:	77e3      	strb	r3, [r4, #31]
	_radio.data_chan_map[0] = 0xFF;
    7bd8:	23ff      	movs	r3, #255	; 0xff
    7bda:	75eb      	strb	r3, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    7bdc:	762b      	strb	r3, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    7bde:	766b      	strb	r3, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    7be0:	76ab      	strb	r3, [r5, #26]
	_radio.data_chan_map[4] = 0x1F;
    7be2:	3be0      	subs	r3, #224	; 0xe0
    7be4:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    7be6:	3306      	adds	r3, #6
    7be8:	772b      	strb	r3, [r5, #28]
	packet_rx_allocate(0xFF);
    7bea:	f7ff ff53 	bl	7a94 <packet_rx_allocate.constprop.49>
}
    7bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bf0:	20000298 	.word	0x20000298

00007bf4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    7bf4:	4b03      	ldr	r3, [pc, #12]	; (7c04 <mayfly_xtal_start+0x10>)
{
    7bf6:	b510      	push	{r4, lr}
	clock_control_on(_radio.hf_clock, NULL);
    7bf8:	6818      	ldr	r0, [r3, #0]
    7bfa:	2100      	movs	r1, #0
    7bfc:	6843      	ldr	r3, [r0, #4]
    7bfe:	681b      	ldr	r3, [r3, #0]
    7c00:	4798      	blx	r3
}
    7c02:	bd10      	pop	{r4, pc}
    7c04:	20000298 	.word	0x20000298

00007c08 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    7c08:	4b03      	ldr	r3, [pc, #12]	; (7c18 <mayfly_xtal_stop+0x10>)
{
    7c0a:	b510      	push	{r4, lr}
	clock_control_off(_radio.hf_clock, NULL);
    7c0c:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
    7c0e:	2100      	movs	r1, #0
    7c10:	6843      	ldr	r3, [r0, #4]
    7c12:	685b      	ldr	r3, [r3, #4]
    7c14:	4798      	blx	r3
}
    7c16:	bd10      	pop	{r4, pc}
    7c18:	20000298 	.word	0x20000298

00007c1c <chan_sel_2>:
{
    7c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    7c1e:	2703      	movs	r7, #3
		o |= (i & 1);
    7c20:	2401      	movs	r4, #1
{
    7c22:	9200      	str	r2, [sp, #0]
    7c24:	9301      	str	r3, [sp, #4]
	prn_e = counter ^ chan_id;
    7c26:	4048      	eors	r0, r1
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    7c28:	2608      	movs	r6, #8
	o = 0;
    7c2a:	2200      	movs	r2, #0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    7c2c:	0a03      	lsrs	r3, r0, #8
		o |= (i & 1);
    7c2e:	001d      	movs	r5, r3
		o <<= 1;
    7c30:	0052      	lsls	r2, r2, #1
		o |= (i & 1);
    7c32:	4025      	ands	r5, r4
    7c34:	3e01      	subs	r6, #1
    7c36:	432a      	orrs	r2, r5
    7c38:	b2f6      	uxtb	r6, r6
    7c3a:	b2d2      	uxtb	r2, r2
		i >>= 1;
    7c3c:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    7c3e:	2e00      	cmp	r6, #0
    7c40:	d1f5      	bne.n	7c2e <chan_sel_2+0x12>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    7c42:	b2c3      	uxtb	r3, r0
    7c44:	2008      	movs	r0, #8
    7c46:	0212      	lsls	r2, r2, #8
    7c48:	b212      	sxth	r2, r2
		o |= (i & 1);
    7c4a:	001d      	movs	r5, r3
		o <<= 1;
    7c4c:	0076      	lsls	r6, r6, #1
		o |= (i & 1);
    7c4e:	4025      	ands	r5, r4
    7c50:	3801      	subs	r0, #1
    7c52:	432e      	orrs	r6, r5
    7c54:	b2c0      	uxtb	r0, r0
    7c56:	b2f6      	uxtb	r6, r6
		i >>= 1;
    7c58:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d1f5      	bne.n	7c4a <chan_sel_2+0x2e>
	return ((u32_t)a * 17 + b) & 0xFFFF;
    7c5e:	2311      	movs	r3, #17
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    7c60:	4316      	orrs	r6, r2
	return ((u32_t)a * 17 + b) & 0xFFFF;
    7c62:	435e      	muls	r6, r3
    7c64:	3f01      	subs	r7, #1
    7c66:	198e      	adds	r6, r1, r6
    7c68:	b2ff      	uxtb	r7, r7
    7c6a:	b2b0      	uxth	r0, r6
	for (iterate = 0; iterate < 3; iterate++) {
    7c6c:	2f00      	cmp	r7, #0
    7c6e:	d1db      	bne.n	7c28 <chan_sel_2+0xc>
	prn_e ^= chan_id;
    7c70:	4041      	eors	r1, r0
    7c72:	000e      	movs	r6, r1
	chan_next = prn_e % 37;
    7c74:	2125      	movs	r1, #37	; 0x25
    7c76:	0030      	movs	r0, r6
    7c78:	f7f8 faea 	bl	250 <__aeabi_uidivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7c7c:	9a00      	ldr	r2, [sp, #0]
	chan_next = prn_e % 37;
    7c7e:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7c80:	08c3      	lsrs	r3, r0, #3
    7c82:	5cd3      	ldrb	r3, [r2, r3]
    7c84:	2207      	movs	r2, #7
    7c86:	4002      	ands	r2, r0
    7c88:	4113      	asrs	r3, r2
    7c8a:	4223      	tst	r3, r4
    7c8c:	d105      	bne.n	7c9a <chan_sel_2+0x7e>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    7c8e:	9901      	ldr	r1, [sp, #4]
		chan_next = chan_sel_remap(chan_map, chan_index);
    7c90:	9800      	ldr	r0, [sp, #0]
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    7c92:	4371      	muls	r1, r6
		chan_next = chan_sel_remap(chan_map, chan_index);
    7c94:	0c09      	lsrs	r1, r1, #16
    7c96:	f7fe fed0 	bl	6a3a <chan_sel_remap>
}
    7c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007c9c <preempt_calc>:
{
    7c9c:	b570      	push	{r4, r5, r6, lr}
    7c9e:	0014      	movs	r4, r2
    7ca0:	000e      	movs	r6, r1
    7ca2:	0005      	movs	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    7ca4:	f7fe f8e4 	bl	5e70 <ticker_ticks_now_get>
	u32_t diff =
    7ca8:	0021      	movs	r1, r4
    7caa:	f7fe f8e5 	bl	5e78 <ticker_ticks_diff_get>
	diff += 3;
    7cae:	1cc4      	adds	r4, r0, #3
	return 0;
    7cb0:	2000      	movs	r0, #0
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    7cb2:	2c09      	cmp	r4, #9
    7cb4:	d910      	bls.n	7cd8 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    7cb6:	4b09      	ldr	r3, [pc, #36]	; (7cdc <preempt_calc+0x40>)
    7cb8:	781b      	ldrb	r3, [r3, #0]
    7cba:	4283      	cmp	r3, r0
    7cbc:	d001      	beq.n	7cc2 <preempt_calc+0x26>
    7cbe:	f7ff f989 	bl	6fd4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    7cc2:	0028      	movs	r0, r5
    7cc4:	0032      	movs	r2, r6
    7cc6:	2100      	movs	r1, #0
    7cc8:	f7ff fa0e 	bl	70e8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    7ccc:	68ab      	ldr	r3, [r5, #8]
		return 1;
    7cce:	2001      	movs	r0, #1
		diff += hdr->ticks_preempt_to_start;
    7cd0:	18e4      	adds	r4, r4, r3
		if (diff <
    7cd2:	2c26      	cmp	r4, #38	; 0x26
    7cd4:	d800      	bhi.n	7cd8 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
    7cd6:	60ac      	str	r4, [r5, #8]
}
    7cd8:	bd70      	pop	{r4, r5, r6, pc}
    7cda:	46c0      	nop			; (mov r8, r8)
    7cdc:	2000049c 	.word	0x2000049c

00007ce0 <event_adv>:
{
    7ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    7ce2:	4c27      	ldr	r4, [pc, #156]	; (7d80 <event_adv+0xa0>)
{
    7ce4:	0005      	movs	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7ce6:	7be2      	ldrb	r2, [r4, #15]
    7ce8:	b2d2      	uxtb	r2, r2
    7cea:	2a00      	cmp	r2, #0
    7cec:	d002      	beq.n	7cf4 <event_adv+0x14>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7cee:	b662      	cpsie	i
    7cf0:	2004      	movs	r0, #4
    7cf2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    7cf4:	7b23      	ldrb	r3, [r4, #12]
    7cf6:	b2db      	uxtb	r3, r3
    7cf8:	2b05      	cmp	r3, #5
    7cfa:	d1f8      	bne.n	7cee <event_adv+0xe>
	_radio.role = ROLE_ADV;
    7cfc:	2701      	movs	r7, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    7cfe:	1da6      	adds	r6, r4, #6
	_radio.ticks_anchor = ticks_at_expire;
    7d00:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    7d02:	7ff0      	ldrb	r0, [r6, #31]
	_radio.role = ROLE_ADV;
    7d04:	73e7      	strb	r7, [r4, #15]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    7d06:	0740      	lsls	r0, r0, #29
    7d08:	0f40      	lsrs	r0, r0, #29
	_radio.ticker_id_prepare = 0;
    7d0a:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    7d0c:	7363      	strb	r3, [r4, #13]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    7d0e:	f7ff fd95 	bl	783c <adv_scan_configure.constprop.47>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    7d12:	2007      	movs	r0, #7
    7d14:	7ff3      	ldrb	r3, [r6, #31]
    7d16:	1d61      	adds	r1, r4, #5
    7d18:	08db      	lsrs	r3, r3, #3
    7d1a:	4003      	ands	r3, r0
    7d1c:	001a      	movs	r2, r3
    7d1e:	7fcb      	ldrb	r3, [r1, #31]
    7d20:	4383      	bics	r3, r0
    7d22:	4313      	orrs	r3, r2
    7d24:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    7d26:	f7ff fb63 	bl	73f0 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    7d2a:	223f      	movs	r2, #63	; 0x3f
    7d2c:	7ff3      	ldrb	r3, [r6, #31]
    7d2e:	4393      	bics	r3, r2
    7d30:	d007      	beq.n	7d42 <event_adv+0x62>
		struct ll_filter *wl = ctrl_filter_get(true);
    7d32:	0038      	movs	r0, r7
    7d34:	f003 f900 	bl	af38 <ctrl_filter_get>
				       (u8_t *)wl->bdaddr);
    7d38:	1c82      	adds	r2, r0, #2
		radio_filter_configure(wl->enable_bitmask,
    7d3a:	7841      	ldrb	r1, [r0, #1]
    7d3c:	7800      	ldrb	r0, [r0, #0]
    7d3e:	f003 fcad 	bl	b69c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    7d42:	0029      	movs	r1, r5
    7d44:	68a2      	ldr	r2, [r4, #8]
    7d46:	3109      	adds	r1, #9
    7d48:	2001      	movs	r0, #1
    7d4a:	f003 fd07 	bl	b75c <radio_tmr_start>
	radio_tmr_end_capture();
    7d4e:	f003 fdbf 	bl	b8d0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    7d52:	0020      	movs	r0, r4
    7d54:	002a      	movs	r2, r5
    7d56:	3014      	adds	r0, #20
    7d58:	2105      	movs	r1, #5
    7d5a:	f7ff ff9f 	bl	7c9c <preempt_calc>
    7d5e:	2800      	cmp	r0, #0
    7d60:	d004      	beq.n	7d6c <event_adv+0x8c>
		_radio.state = STATE_STOP;
    7d62:	2304      	movs	r3, #4
    7d64:	7423      	strb	r3, [r4, #16]
		radio_disable();
    7d66:	f003 fc0f 	bl	b588 <radio_disable>
}
    7d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ticker_status =
    7d6c:	0003      	movs	r3, r0
    7d6e:	4a05      	ldr	r2, [pc, #20]	; (7d84 <event_adv+0xa4>)
    7d70:	0001      	movs	r1, r0
    7d72:	f7fe f83d 	bl	5df0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7d76:	2302      	movs	r3, #2
    7d78:	4398      	bics	r0, r3
    7d7a:	d1b8      	bne.n	7cee <event_adv+0xe>
    7d7c:	e7f5      	b.n	7d6a <event_adv+0x8a>
    7d7e:	46c0      	nop			; (mov r8, r8)
    7d80:	20000298 	.word	0x20000298
    7d84:	00006f7d 	.word	0x00006f7d

00007d88 <ctrl_tx_enqueue>:
	    !conn->empty &&
    7d88:	0003      	movs	r3, r0
{
    7d8a:	b570      	push	{r4, r5, r6, lr}
    7d8c:	0004      	movs	r4, r0
	    !conn->empty &&
    7d8e:	33a8      	adds	r3, #168	; 0xa8
    7d90:	781d      	ldrb	r5, [r3, #0]
    7d92:	34f0      	adds	r4, #240	; 0xf0
	if (
    7d94:	b26a      	sxtb	r2, r5
    7d96:	334c      	adds	r3, #76	; 0x4c
    7d98:	2a00      	cmp	r2, #0
    7d9a:	db1b      	blt.n	7dd4 <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    7d9c:	0002      	movs	r2, r0
    7d9e:	32ec      	adds	r2, #236	; 0xec
    7da0:	6812      	ldr	r2, [r2, #0]
	    !conn->empty &&
    7da2:	2a00      	cmp	r2, #0
    7da4:	d016      	beq.n	7dd4 <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    7da6:	072d      	lsls	r5, r5, #28
    7da8:	d414      	bmi.n	7dd4 <ctrl_tx_enqueue+0x4c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    7daa:	0005      	movs	r5, r0
    7dac:	35f8      	adds	r5, #248	; 0xf8
    7dae:	682e      	ldr	r6, [r5, #0]
    7db0:	42b2      	cmp	r2, r6
    7db2:	d101      	bne.n	7db8 <ctrl_tx_enqueue+0x30>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    7db4:	6816      	ldr	r6, [r2, #0]
    7db6:	602e      	str	r6, [r5, #0]
		if (!conn->pkt_tx_ctrl) {
    7db8:	6825      	ldr	r5, [r4, #0]
    7dba:	2d00      	cmp	r5, #0
    7dbc:	d110      	bne.n	7de0 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    7dbe:	6815      	ldr	r5, [r2, #0]
    7dc0:	600d      	str	r5, [r1, #0]
			conn->pkt_tx_head = node_tx;
    7dc2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl = node_tx;
    7dc4:	6021      	str	r1, [r4, #0]
	conn->pkt_tx_ctrl_last = node_tx;
    7dc6:	6019      	str	r1, [r3, #0]
	if (node_tx->next == 0) {
    7dc8:	680b      	ldr	r3, [r1, #0]
    7dca:	2b00      	cmp	r3, #0
    7dcc:	d101      	bne.n	7dd2 <ctrl_tx_enqueue+0x4a>
		conn->pkt_tx_last = node_tx;
    7dce:	30fc      	adds	r0, #252	; 0xfc
    7dd0:	6001      	str	r1, [r0, #0]
}
    7dd2:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->pkt_tx_ctrl) {
    7dd4:	6822      	ldr	r2, [r4, #0]
    7dd6:	2a00      	cmp	r2, #0
    7dd8:	d102      	bne.n	7de0 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    7dda:	0002      	movs	r2, r0
    7ddc:	32ec      	adds	r2, #236	; 0xec
    7dde:	e7ee      	b.n	7dbe <ctrl_tx_enqueue+0x36>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    7de0:	681a      	ldr	r2, [r3, #0]
    7de2:	6814      	ldr	r4, [r2, #0]
    7de4:	600c      	str	r4, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    7de6:	6011      	str	r1, [r2, #0]
    7de8:	e7ed      	b.n	7dc6 <ctrl_tx_enqueue+0x3e>

00007dea <ctrl_tx_sec_enqueue>:
	if (conn->pause_tx) {
    7dea:	0003      	movs	r3, r0
    7dec:	33a8      	adds	r3, #168	; 0xa8
    7dee:	781b      	ldrb	r3, [r3, #0]
{
    7df0:	b510      	push	{r4, lr}
	if (conn->pause_tx) {
    7df2:	071b      	lsls	r3, r3, #28
    7df4:	d50f      	bpl.n	7e16 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    7df6:	0003      	movs	r3, r0
    7df8:	33f0      	adds	r3, #240	; 0xf0
    7dfa:	681b      	ldr	r3, [r3, #0]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d104      	bne.n	7e0a <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    7e00:	30ec      	adds	r0, #236	; 0xec
    7e02:	6803      	ldr	r3, [r0, #0]
    7e04:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    7e06:	6001      	str	r1, [r0, #0]
}
    7e08:	bd10      	pop	{r4, pc}
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    7e0a:	30f4      	adds	r0, #244	; 0xf4
    7e0c:	6803      	ldr	r3, [r0, #0]
    7e0e:	681a      	ldr	r2, [r3, #0]
    7e10:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    7e12:	6019      	str	r1, [r3, #0]
    7e14:	e7f8      	b.n	7e08 <ctrl_tx_sec_enqueue+0x1e>
		ctrl_tx_enqueue(conn, node_tx);
    7e16:	f7ff ffb7 	bl	7d88 <ctrl_tx_enqueue>
}
    7e1a:	e7f5      	b.n	7e08 <ctrl_tx_sec_enqueue+0x1e>

00007e1c <feature_rsp_send>:
{
    7e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7e1e:	4f1f      	ldr	r7, [pc, #124]	; (7e9c <feature_rsp_send+0x80>)
{
    7e20:	0005      	movs	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7e22:	0038      	movs	r0, r7
    7e24:	3051      	adds	r0, #81	; 0x51
    7e26:	30ff      	adds	r0, #255	; 0xff
{
    7e28:	000e      	movs	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7e2a:	f7fd f8c1 	bl	4fb0 <mem_acquire>
    7e2e:	0004      	movs	r4, r0
		return 1;
    7e30:	2001      	movs	r0, #1
	if (!node_tx) {
    7e32:	2c00      	cmp	r4, #0
    7e34:	d030      	beq.n	7e98 <feature_rsp_send+0x7c>
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7e36:	37fc      	adds	r7, #252	; 0xfc
    7e38:	6979      	ldr	r1, [r7, #20]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7e3a:	7932      	ldrb	r2, [r6, #4]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7e3c:	0008      	movs	r0, r1
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7e3e:	4b18      	ldr	r3, [pc, #96]	; (7ea0 <feature_rsp_send+0x84>)
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7e40:	308c      	adds	r0, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7e42:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    7e44:	7972      	ldrb	r2, [r6, #5]
	_radio.conn_curr->common.fex_valid = 1;
    7e46:	3138      	adds	r1, #56	; 0x38
	       (features[1] << 8) | (features[2] << 16);
    7e48:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7e4a:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    7e4c:	79b2      	ldrb	r2, [r6, #6]
    7e4e:	0412      	lsls	r2, r2, #16
    7e50:	431a      	orrs	r2, r3
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7e52:	6803      	ldr	r3, [r0, #0]
    7e54:	03db      	lsls	r3, r3, #15
    7e56:	0bdb      	lsrs	r3, r3, #15
    7e58:	4013      	ands	r3, r2
    7e5a:	6003      	str	r3, [r0, #0]
	_radio.conn_curr->common.fex_valid = 1;
    7e5c:	2320      	movs	r3, #32
    7e5e:	780a      	ldrb	r2, [r1, #0]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7e60:	0020      	movs	r0, r4
	_radio.conn_curr->common.fex_valid = 1;
    7e62:	4313      	orrs	r3, r2
    7e64:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7e66:	2303      	movs	r3, #3
    7e68:	7922      	ldrb	r2, [r4, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7e6a:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7e6c:	4313      	orrs	r3, r2
    7e6e:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    7e70:	2309      	movs	r3, #9
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7e72:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    7e74:	7163      	strb	r3, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    7e76:	71e3      	strb	r3, [r4, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7e78:	3008      	adds	r0, #8
    7e7a:	f7f9 ff81 	bl	1d80 <memset>
		conn->llcp_features & 0xFF;
    7e7e:	002b      	movs	r3, r5
    7e80:	338c      	adds	r3, #140	; 0x8c
    7e82:	681b      	ldr	r3, [r3, #0]
	ctrl_tx_sec_enqueue(conn, node_tx);
    7e84:	0028      	movs	r0, r5
		(conn->llcp_features >> 8) & 0xFF;
    7e86:	0a1a      	lsrs	r2, r3, #8
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7e88:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 16) & 0xFF;
    7e8a:	0c1b      	lsrs	r3, r3, #16
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7e8c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7e8e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    7e90:	0021      	movs	r1, r4
    7e92:	f7ff ffaa 	bl	7dea <ctrl_tx_sec_enqueue>
	return 0;
    7e96:	2000      	movs	r0, #0
}
    7e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e9a:	46c0      	nop			; (mov r8, r8)
    7e9c:	20000298 	.word	0x20000298
    7ea0:	fffe30d0 	.word	0xfffe30d0

00007ea4 <event_connection_prepare>:
{
    7ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7ea6:	4c75      	ldr	r4, [pc, #468]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
{
    7ea8:	b091      	sub	sp, #68	; 0x44
    7eaa:	900c      	str	r0, [sp, #48]	; 0x30
    7eac:	910e      	str	r1, [sp, #56]	; 0x38
    7eae:	001f      	movs	r7, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    7eb0:	7b23      	ldrb	r3, [r4, #12]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d002      	beq.n	7ebc <event_connection_prepare+0x18>
			LL_ASSERT(0);
    7eb6:	b662      	cpsie	i
    7eb8:	2004      	movs	r0, #4
    7eba:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    7ebc:	8c3b      	ldrh	r3, [r7, #32]
    7ebe:	3307      	adds	r3, #7
    7ec0:	b2db      	uxtb	r3, r3
    7ec2:	7323      	strb	r3, [r4, #12]
	if (conn->role) {
    7ec4:	7f7b      	ldrb	r3, [r7, #29]
    7ec6:	2b7f      	cmp	r3, #127	; 0x7f
    7ec8:	d909      	bls.n	7ede <event_connection_prepare+0x3a>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    7eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    7ecc:	1c53      	adds	r3, r2, #1
    7ece:	434b      	muls	r3, r1
		conn->slave.window_widening_prepare_us +=
    7ed0:	6c79      	ldr	r1, [r7, #68]	; 0x44
    7ed2:	185b      	adds	r3, r3, r1
		    conn->slave.window_widening_max_us) {
    7ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    7ed6:	647b      	str	r3, [r7, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    7ed8:	428b      	cmp	r3, r1
    7eda:	d900      	bls.n	7ede <event_connection_prepare+0x3a>
			conn->slave.window_widening_prepare_us =
    7edc:	6479      	str	r1, [r7, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    7ede:	003d      	movs	r5, r7
    7ee0:	003e      	movs	r6, r7
	conn->latency_prepare += lazy;
    7ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    7ee4:	355d      	adds	r5, #93	; 0x5d
	conn->latency_prepare += lazy;
    7ee6:	18d2      	adds	r2, r2, r3
	event_counter = conn->event_counter + conn->latency_prepare;
    7ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
	conn->latency_prepare += lazy;
    7eea:	b292      	uxth	r2, r2
    7eec:	853a      	strh	r2, [r7, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    7eee:	18d2      	adds	r2, r2, r3
    7ef0:	b293      	uxth	r3, r2
    7ef2:	930a      	str	r3, [sp, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    7ef4:	365c      	adds	r6, #92	; 0x5c
    7ef6:	782a      	ldrb	r2, [r5, #0]
    7ef8:	7833      	ldrb	r3, [r6, #0]
    7efa:	429a      	cmp	r2, r3
    7efc:	d100      	bne.n	7f00 <event_connection_prepare+0x5c>
    7efe:	e07f      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7f00:	2005      	movs	r0, #5
    7f02:	f7ff fcc1 	bl	7888 <event_stop.constprop.48>
		switch (conn->llcp_type) {
    7f06:	003b      	movs	r3, r7
    7f08:	335e      	adds	r3, #94	; 0x5e
    7f0a:	7818      	ldrb	r0, [r3, #0]
    7f0c:	3801      	subs	r0, #1
    7f0e:	2803      	cmp	r0, #3
    7f10:	d8d1      	bhi.n	7eb6 <event_connection_prepare+0x12>
    7f12:	f7f8 f94f 	bl	1b4 <__gnu_thumb1_case_uhi>
    7f16:	0004      	.short	0x0004
    7f18:	02a5023b 	.word	0x02a5023b
    7f1c:	02d2      	.short	0x02d2
	conn_upd = _radio.conn_upd;
    7f1e:	23be      	movs	r3, #190	; 0xbe
    7f20:	005b      	lsls	r3, r3, #1
	if (!conn_upd) {
    7f22:	58e2      	ldr	r2, [r4, r3]
    7f24:	2a00      	cmp	r2, #0
    7f26:	d100      	bne.n	7f2a <event_connection_prepare+0x86>
		_radio.conn_upd = conn;
    7f28:	50e7      	str	r7, [r4, r3]
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    7f2a:	003b      	movs	r3, r7
    7f2c:	2603      	movs	r6, #3
    7f2e:	3360      	adds	r3, #96	; 0x60
    7f30:	930d      	str	r3, [sp, #52]	; 0x34
    7f32:	781b      	ldrb	r3, [r3, #0]
    7f34:	4033      	ands	r3, r6
    7f36:	d100      	bne.n	7f3a <event_connection_prepare+0x96>
    7f38:	e0ac      	b.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7f3a:	0020      	movs	r0, r4
    7f3c:	3051      	adds	r0, #81	; 0x51
    7f3e:	30ff      	adds	r0, #255	; 0xff
    7f40:	f7fd f836 	bl	4fb0 <mem_acquire>
    7f44:	1e04      	subs	r4, r0, #0
		if (!node_tx) {
    7f46:	d05b      	beq.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		switch (conn->llcp.conn_upd.state) {
    7f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	079a      	lsls	r2, r3, #30
    7f4e:	0f92      	lsrs	r2, r2, #30
    7f50:	2a01      	cmp	r2, #1
    7f52:	d1b0      	bne.n	7eb6 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7f56:	43b3      	bics	r3, r6
    7f58:	7013      	strb	r3, [r2, #0]
		event_counter + conn->latency + 6;
    7f5a:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
    7f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f5e:	3506      	adds	r5, #6
    7f60:	195d      	adds	r5, r3, r5
	conn->llcp.conn_upd.instant =
    7f62:	003b      	movs	r3, r7
		event_counter + conn->latency + 6;
    7f64:	b2ad      	uxth	r5, r5
	conn->llcp.conn_upd.instant =
    7f66:	3368      	adds	r3, #104	; 0x68
    7f68:	801d      	strh	r5, [r3, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7f6a:	7903      	ldrb	r3, [r0, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7f6c:	4944      	ldr	r1, [pc, #272]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7f6e:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    7f70:	230c      	movs	r3, #12
    7f72:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    7f74:	2300      	movs	r3, #0
    7f76:	71c3      	strb	r3, [r0, #7]
		conn->llcp.conn_upd.win_size;
    7f78:	003b      	movs	r3, r7
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7f7a:	7106      	strb	r6, [r0, #4]
		conn->llcp.conn_upd.win_size;
    7f7c:	3370      	adds	r3, #112	; 0x70
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	7203      	strb	r3, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7f82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    7f84:	f7f8 f920 	bl	1c8 <__aeabi_uidiv>
    7f88:	0021      	movs	r1, r4
		conn->llcp.conn_upd.interval;
    7f8a:	003b      	movs	r3, r7
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7f8c:	b280      	uxth	r0, r0
    7f8e:	7260      	strb	r0, [r4, #9]
    7f90:	3109      	adds	r1, #9
    7f92:	0a00      	lsrs	r0, r0, #8
    7f94:	7048      	strb	r0, [r1, #1]
		conn->llcp.conn_upd.interval;
    7f96:	3362      	adds	r3, #98	; 0x62
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    7f98:	781a      	ldrb	r2, [r3, #0]
    7f9a:	72e2      	strb	r2, [r4, #11]
    7f9c:	785b      	ldrb	r3, [r3, #1]
    7f9e:	7323      	strb	r3, [r4, #12]
		conn->llcp.conn_upd.latency;
    7fa0:	003b      	movs	r3, r7
    7fa2:	3364      	adds	r3, #100	; 0x64
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    7fa4:	781a      	ldrb	r2, [r3, #0]
    7fa6:	7362      	strb	r2, [r4, #13]
    7fa8:	785b      	ldrb	r3, [r3, #1]
    7faa:	73a3      	strb	r3, [r4, #14]
		conn->llcp.conn_upd.timeout;
    7fac:	003b      	movs	r3, r7
    7fae:	3366      	adds	r3, #102	; 0x66
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    7fb0:	781a      	ldrb	r2, [r3, #0]
    7fb2:	73e2      	strb	r2, [r4, #15]
    7fb4:	785b      	ldrb	r3, [r3, #1]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    7fb6:	7465      	strb	r5, [r4, #17]
    7fb8:	0a2d      	lsrs	r5, r5, #8
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    7fba:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    7fbc:	74a5      	strb	r5, [r4, #18]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    7fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7fc0:	683a      	ldr	r2, [r7, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    7fc2:	67bb      	str	r3, [r7, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7fc4:	2a00      	cmp	r2, #0
    7fc6:	da0a      	bge.n	7fde <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    7fc8:	6878      	ldr	r0, [r7, #4]
    7fca:	68bb      	ldr	r3, [r7, #8]
    7fcc:	4283      	cmp	r3, r0
    7fce:	d200      	bcs.n	7fd2 <event_connection_prepare+0x12e>
    7fd0:	0003      	movs	r3, r0
			conn->llcp.conn_upd.ticks_anchor -=
    7fd2:	980c      	ldr	r0, [sp, #48]	; 0x30
				(conn->hdr.ticks_xtal_to_start &
    7fd4:	0052      	lsls	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    7fd6:	181b      	adds	r3, r3, r0
				(conn->hdr.ticks_xtal_to_start &
    7fd8:	0852      	lsrs	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    7fda:	1a9b      	subs	r3, r3, r2
    7fdc:	67bb      	str	r3, [r7, #120]	; 0x78
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    7fde:	4b29      	ldr	r3, [pc, #164]	; (8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>)
    7fe0:	4a29      	ldr	r2, [pc, #164]	; (8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    7fe2:	6779      	str	r1, [r7, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    7fe4:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7fe6:	2201      	movs	r2, #1
    7fe8:	2000      	movs	r0, #0
    7fea:	0011      	movs	r1, r2
		mayfly_sched_offset->param = (void *)conn;
    7fec:	609f      	str	r7, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7fee:	f7fd f895 	bl	511c <mayfly_enqueue>
		LL_ASSERT(!retval);
    7ff2:	2800      	cmp	r0, #0
    7ff4:	d000      	beq.n	7ff8 <event_connection_prepare+0x154>
    7ff6:	e75e      	b.n	7eb6 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    7ff8:	0021      	movs	r1, r4
    7ffa:	0038      	movs	r0, r7
    7ffc:	f7ff fec4 	bl	7d88 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    8000:	003c      	movs	r4, r7
    8002:	003d      	movs	r5, r7
    8004:	3499      	adds	r4, #153	; 0x99
    8006:	3598      	adds	r5, #152	; 0x98
    8008:	7822      	ldrb	r2, [r4, #0]
    800a:	782b      	ldrb	r3, [r5, #0]
    800c:	429a      	cmp	r2, r3
    800e:	d01e      	beq.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    8010:	2005      	movs	r0, #5
    8012:	f7ff fc39 	bl	7888 <event_stop.constprop.48>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8016:	4819      	ldr	r0, [pc, #100]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    8018:	3051      	adds	r0, #81	; 0x51
    801a:	30ff      	adds	r0, #255	; 0xff
    801c:	f7fc ffc8 	bl	4fb0 <mem_acquire>
    8020:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    8022:	d014      	beq.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    8024:	782b      	ldrb	r3, [r5, #0]
    8026:	7023      	strb	r3, [r4, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8028:	2303      	movs	r3, #3
    802a:	7902      	ldrb	r2, [r0, #4]
    802c:	4313      	orrs	r3, r2
    802e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    8030:	2302      	movs	r3, #2
    8032:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    8034:	71c3      	strb	r3, [r0, #7]
				conn->llcp_terminate.reason_own;
    8036:	003b      	movs	r3, r7
    8038:	339a      	adds	r3, #154	; 0x9a
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    803e:	0038      	movs	r0, r7
    8040:	f7ff fea2 	bl	7d88 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    8044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    8046:	2b01      	cmp	r3, #1
    8048:	d800      	bhi.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    804a:	e28b      	b.n	8564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x564>
				conn->procedure_expire++;
    804c:	86bb      	strh	r3, [r7, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    804e:	8c3a      	ldrh	r2, [r7, #32]
    8050:	7f7c      	ldrb	r4, [r7, #29]
    8052:	3207      	adds	r2, #7
    8054:	1d3b      	adds	r3, r7, #4
    8056:	68b9      	ldr	r1, [r7, #8]
    8058:	b2d2      	uxtb	r2, r2
    805a:	480c      	ldr	r0, [pc, #48]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    805c:	2c7f      	cmp	r4, #127	; 0x7f
    805e:	d800      	bhi.n	8062 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62>
    8060:	480b      	ldr	r0, [pc, #44]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    8062:	9002      	str	r0, [sp, #8]
    8064:	9201      	str	r2, [sp, #4]
    8066:	9100      	str	r1, [sp, #0]
    8068:	003a      	movs	r2, r7
    806a:	9703      	str	r7, [sp, #12]
    806c:	990e      	ldr	r1, [sp, #56]	; 0x38
    806e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8070:	f7ff fc1a 	bl	78a8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    8074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8076:	3201      	adds	r2, #1
    8078:	847a      	strh	r2, [r7, #34]	; 0x22
    807a:	e162      	b.n	8342 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x342>
    807c:	20000298 	.word	0x20000298
    8080:	000004e2 	.word	0x000004e2
    8084:	200023e8 	.word	0x200023e8
    8088:	00007389 	.word	0x00007389
    808c:	000085b9 	.word	0x000085b9
    8090:	0000a095 	.word	0x0000a095
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    8094:	003a      	movs	r2, r7
    8096:	3268      	adds	r2, #104	; 0x68
    8098:	8812      	ldrh	r2, [r2, #0]
    809a:	990a      	ldr	r1, [sp, #40]	; 0x28
    809c:	1a8a      	subs	r2, r1, r2
	} else if (instant_latency <= 0x7FFF) {
    809e:	b296      	uxth	r6, r2
    80a0:	0412      	lsls	r2, r2, #16
    80a2:	d4ad      	bmi.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		conn->llcp_ack = conn->llcp_req;
    80a4:	003a      	movs	r2, r7
    80a6:	325c      	adds	r2, #92	; 0x5c
    80a8:	7812      	ldrb	r2, [r2, #0]
		_radio.ticker_id_prepare = 0;
    80aa:	7323      	strb	r3, [r4, #12]
		conn->llcp_ack = conn->llcp_req;
    80ac:	702a      	strb	r2, [r5, #0]
		if (_radio.conn_upd == conn) {
    80ae:	22be      	movs	r2, #190	; 0xbe
    80b0:	0052      	lsls	r2, r2, #1
    80b2:	58a1      	ldr	r1, [r4, r2]
    80b4:	428f      	cmp	r7, r1
    80b6:	d100      	bne.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
			_radio.conn_upd = NULL;
    80b8:	50a3      	str	r3, [r4, r2]
		if ((conn->llcp.conn_upd.interval !=
    80ba:	003d      	movs	r5, r7
    80bc:	003c      	movs	r4, r7
    80be:	3562      	adds	r5, #98	; 0x62
    80c0:	882b      	ldrh	r3, [r5, #0]
    80c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    80c4:	3464      	adds	r4, #100	; 0x64
    80c6:	4299      	cmp	r1, r3
    80c8:	d112      	bne.n	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
		     conn->conn_interval) ||
    80ca:	8822      	ldrh	r2, [r4, #0]
    80cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    80ce:	429a      	cmp	r2, r3
    80d0:	d10e      	bne.n	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    80d2:	4bd4      	ldr	r3, [pc, #848]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
    80d4:	4359      	muls	r1, r3
    80d6:	003b      	movs	r3, r7
    80d8:	3366      	adds	r3, #102	; 0x66
    80da:	8818      	ldrh	r0, [r3, #0]
    80dc:	4bd2      	ldr	r3, [pc, #840]	; (8428 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x428>)
    80de:	4358      	muls	r0, r3
    80e0:	1840      	adds	r0, r0, r1
    80e2:	3801      	subs	r0, #1
    80e4:	f7f8 f8be 	bl	264 <__aeabi_idiv>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    80e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    80ea:	b280      	uxth	r0, r0
    80ec:	4283      	cmp	r3, r0
    80ee:	d01b      	beq.n	8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
			node_rx = packet_rx_reserve_get(2);
    80f0:	2002      	movs	r0, #2
    80f2:	f7fe fcbd 	bl	6a70 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    80f6:	2800      	cmp	r0, #0
    80f8:	d100      	bne.n	80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>
    80fa:	e6dc      	b.n	7eb6 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    80fc:	8c3b      	ldrh	r3, [r7, #32]
    80fe:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    8100:	2308      	movs	r3, #8
    8102:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    8104:	2300      	movs	r3, #0
    8106:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    8108:	782b      	ldrb	r3, [r5, #0]
    810a:	7303      	strb	r3, [r0, #12]
    810c:	786b      	ldrb	r3, [r5, #1]
    810e:	7343      	strb	r3, [r0, #13]
			radio_le_conn_update_cmplt->latency =
    8110:	7823      	ldrb	r3, [r4, #0]
    8112:	7383      	strb	r3, [r0, #14]
    8114:	7863      	ldrb	r3, [r4, #1]
    8116:	73c3      	strb	r3, [r0, #15]
				conn->llcp.conn_upd.timeout;
    8118:	003b      	movs	r3, r7
    811a:	3366      	adds	r3, #102	; 0x66
			radio_le_conn_update_cmplt->timeout =
    811c:	781a      	ldrb	r2, [r3, #0]
    811e:	7402      	strb	r2, [r0, #16]
    8120:	785b      	ldrb	r3, [r3, #1]
    8122:	7443      	strb	r3, [r0, #17]
			packet_rx_enqueue();
    8124:	f7ff f826 	bl	7174 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8128:	683b      	ldr	r3, [r7, #0]
    812a:	2b00      	cmp	r3, #0
    812c:	da0b      	bge.n	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
			u32_t ticks_prepare_to_start =
    812e:	687a      	ldr	r2, [r7, #4]
    8130:	68b8      	ldr	r0, [r7, #8]
    8132:	4290      	cmp	r0, r2
    8134:	d200      	bcs.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    8136:	0010      	movs	r0, r2
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    8138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    813a:	005b      	lsls	r3, r3, #1
    813c:	085b      	lsrs	r3, r3, #1
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    813e:	1810      	adds	r0, r2, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    8140:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    8142:	1ac3      	subs	r3, r0, r3
    8144:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_old = instant_latency * conn->conn_interval;
    8146:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    8148:	882b      	ldrh	r3, [r5, #0]
		conn_interval_old = instant_latency * conn->conn_interval;
    814a:	4374      	muls	r4, r6
    814c:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    814e:	0019      	movs	r1, r3
    8150:	0020      	movs	r0, r4
			conn->llcp.conn_upd.interval;
    8152:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
    8154:	f7f8 f838 	bl	1c8 <__aeabi_uidiv>
    8158:	b283      	uxth	r3, r0
		conn_interval_new = latency *
    815a:	980a      	ldr	r0, [sp, #40]	; 0x28
		latency = conn_interval_old /
    815c:	930d      	str	r3, [sp, #52]	; 0x34
		conn_interval_new = latency *
    815e:	4358      	muls	r0, r3
    8160:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    8162:	4284      	cmp	r4, r0
    8164:	d300      	bcc.n	8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>
    8166:	e0ee      	b.n	8346 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x346>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    8168:	2324      	movs	r3, #36	; 0x24
    816a:	1b00      	subs	r0, r0, r4
    816c:	4aaf      	ldr	r2, [pc, #700]	; (842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>)
    816e:	33ff      	adds	r3, #255	; 0xff
    8170:	17c1      	asrs	r1, r0, #31
    8172:	f7f8 f911 	bl	398 <__aeabi_lmul>
    8176:	2307      	movs	r3, #7
    8178:	4aad      	ldr	r2, [pc, #692]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    817a:	f7f8 f8ed 	bl	358 <__aeabi_uldivmod>
    817e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8180:	0200      	lsls	r0, r0, #8
    8182:	0a00      	lsrs	r0, r0, #8
    8184:	18c3      	adds	r3, r0, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    8186:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    8188:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    818a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    818c:	1b9b      	subs	r3, r3, r6
    818e:	18d3      	adds	r3, r2, r3
    8190:	853b      	strh	r3, [r7, #40]	; 0x28
		ticks_slot_offset =
    8192:	687a      	ldr	r2, [r7, #4]
    8194:	683b      	ldr	r3, [r7, #0]
    8196:	920e      	str	r2, [sp, #56]	; 0x38
    8198:	429a      	cmp	r2, r3
    819a:	d200      	bcs.n	819e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19e>
    819c:	930e      	str	r3, [sp, #56]	; 0x38
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    819e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81a0:	4da0      	ldr	r5, [pc, #640]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
    81a2:	435d      	muls	r5, r3
		if (conn->role) {
    81a4:	7f7b      	ldrb	r3, [r7, #29]
    81a6:	2b7f      	cmp	r3, #127	; 0x7f
    81a8:	d800      	bhi.n	81ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ac>
    81aa:	e0e0      	b.n	836e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36e>
				conn->slave.window_widening_periodic_us *
    81ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				(((gc_lookup_ppm[_radio.sca] +
    81ae:	4aa1      	ldr	r2, [pc, #644]	; (8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>)
				conn->slave.window_widening_periodic_us *
    81b0:	435e      	muls	r6, r3
			conn->slave.window_widening_prepare_us -=
    81b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    81b4:	49a0      	ldr	r1, [pc, #640]	; (8438 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x438>)
			conn->slave.window_widening_prepare_us -=
    81b6:	1b9e      	subs	r6, r3, r6
				(((gc_lookup_ppm[_radio.sca] +
    81b8:	4ba0      	ldr	r3, [pc, #640]	; (843c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43c>)
    81ba:	33ff      	adds	r3, #255	; 0xff
    81bc:	7f5b      	ldrb	r3, [r3, #29]
    81be:	005b      	lsls	r3, r3, #1
    81c0:	5a98      	ldrh	r0, [r3, r2]
				   gc_lookup_ppm[conn->slave.sca]) *
    81c2:	003b      	movs	r3, r7
    81c4:	3338      	adds	r3, #56	; 0x38
    81c6:	781b      	ldrb	r3, [r3, #0]
    81c8:	06db      	lsls	r3, r3, #27
    81ca:	0f5b      	lsrs	r3, r3, #29
    81cc:	005b      	lsls	r3, r3, #1
    81ce:	5a9b      	ldrh	r3, [r3, r2]
				(((gc_lookup_ppm[_radio.sca] +
    81d0:	18c0      	adds	r0, r0, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    81d2:	4368      	muls	r0, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    81d4:	4b9a      	ldr	r3, [pc, #616]	; (8440 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x440>)
    81d6:	18c0      	adds	r0, r0, r3
    81d8:	f7f7 fff6 	bl	1c8 <__aeabi_uidiv>
				conn->llcp.conn_upd.win_size * 1250;
    81dc:	003a      	movs	r2, r7
				(conn_interval_us >> 1) - RADIO_TIFS;
    81de:	086b      	lsrs	r3, r5, #1
    81e0:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_periodic_us =
    81e2:	63f8      	str	r0, [r7, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    81e4:	643b      	str	r3, [r7, #64]	; 0x40
				conn->llcp.conn_upd.win_size * 1250;
    81e6:	3270      	adds	r2, #112	; 0x70
    81e8:	7812      	ldrb	r2, [r2, #0]
    81ea:	498e      	ldr	r1, [pc, #568]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    81ec:	0004      	movs	r4, r0
				conn->llcp.conn_upd.win_size * 1250;
    81ee:	434a      	muls	r2, r1
			conn->slave.window_size_prepare_us =
    81f0:	64fa      	str	r2, [r7, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    81f2:	2200      	movs	r2, #0
				conn->slave.window_widening_periodic_us *
    81f4:	980d      	ldr	r0, [sp, #52]	; 0x34
			conn->slave.ticks_to_offset = 0;
    81f6:	65ba      	str	r2, [r7, #88]	; 0x58
				conn->slave.window_widening_periodic_us *
    81f8:	4360      	muls	r0, r4
			conn->slave.window_widening_prepare_us +=
    81fa:	1836      	adds	r6, r6, r0
			if (conn->slave.window_widening_prepare_us >
    81fc:	42b3      	cmp	r3, r6
    81fe:	d200      	bcs.n	8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
    8200:	e0b3      	b.n	836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
			conn->slave.window_widening_prepare_us +=
    8202:	647e      	str	r6, [r7, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    8204:	4a8f      	ldr	r2, [pc, #572]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
    8206:	2300      	movs	r3, #0
    8208:	2100      	movs	r1, #0
    820a:	f7f8 f8c5 	bl	398 <__aeabi_lmul>
    820e:	4a88      	ldr	r2, [pc, #544]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    8210:	2307      	movs	r3, #7
    8212:	f7f8 f8a1 	bl	358 <__aeabi_uldivmod>
    8216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    8218:	4982      	ldr	r1, [pc, #520]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    821a:	1a1b      	subs	r3, r3, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    821c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    821e:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    8220:	f7f7 ffd2 	bl	1c8 <__aeabi_uidiv>
    8224:	4b7f      	ldr	r3, [pc, #508]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
    8226:	4a87      	ldr	r2, [pc, #540]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
    8228:	4358      	muls	r0, r3
    822a:	2100      	movs	r1, #0
    822c:	2300      	movs	r3, #0
    822e:	f7f8 f8b3 	bl	398 <__aeabi_lmul>
    8232:	4a7f      	ldr	r2, [pc, #508]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    8234:	2307      	movs	r3, #7
    8236:	f7f8 f88f 	bl	358 <__aeabi_uldivmod>
    823a:	0200      	lsls	r0, r0, #8
    823c:	0a06      	lsrs	r6, r0, #8
			periodic_us -= conn->slave.window_widening_periodic_us;
    823e:	1b2c      	subs	r4, r5, r4
		conn->conn_interval = conn->llcp.conn_upd.interval;
    8240:	466b      	mov	r3, sp
    8242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    8244:	0029      	movs	r1, r5
		conn->conn_interval = conn->llcp.conn_upd.interval;
    8246:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
    8248:	003b      	movs	r3, r7
    824a:	3364      	adds	r3, #100	; 0x64
    824c:	881b      	ldrh	r3, [r3, #0]
    824e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    8250:	003b      	movs	r3, r7
    8252:	3366      	adds	r3, #102	; 0x66
    8254:	8818      	ldrh	r0, [r3, #0]
    8256:	4b74      	ldr	r3, [pc, #464]	; (8428 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x428>)
    8258:	4358      	muls	r0, r3
    825a:	1940      	adds	r0, r0, r5
    825c:	3801      	subs	r0, #1
    825e:	f7f7 ffb3 	bl	1c8 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    8262:	4b79      	ldr	r3, [pc, #484]	; (8448 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x448>)
		conn->supervision_reload =
    8264:	85f8      	strh	r0, [r7, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    8266:	0029      	movs	r1, r5
    8268:	18e8      	adds	r0, r5, r3
    826a:	f7f7 ffad 	bl	1c8 <__aeabi_uidiv>
		if (!conn->llcp.conn_upd.is_internal) {
    826e:	003b      	movs	r3, r7
    8270:	2204      	movs	r2, #4
		conn->procedure_reload =
    8272:	8678      	strh	r0, [r7, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    8274:	3360      	adds	r3, #96	; 0x60
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	4013      	ands	r3, r2
    827a:	d100      	bne.n	827e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27e>
			conn->supervision_expire = 0;
    827c:	863b      	strh	r3, [r7, #48]	; 0x30
		mayfly_was_enabled =
    827e:	2101      	movs	r1, #1
    8280:	2000      	movs	r0, #0
    8282:	f003 fc18 	bl	bab6 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    8286:	2200      	movs	r2, #0
		mayfly_was_enabled =
    8288:	900d      	str	r0, [sp, #52]	; 0x34
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    828a:	2101      	movs	r1, #1
    828c:	0010      	movs	r0, r2
    828e:	f7fc ff21 	bl	50d4 <mayfly_enable>
		ticker_status =
    8292:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8294:	8c3a      	ldrh	r2, [r7, #32]
		ticker_status =
    8296:	4b6d      	ldr	r3, [pc, #436]	; (844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>)
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8298:	3207      	adds	r2, #7
		ticker_status =
    829a:	9300      	str	r3, [sp, #0]
    829c:	b2d2      	uxtb	r2, r2
    829e:	4b6c      	ldr	r3, [pc, #432]	; (8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>)
    82a0:	0008      	movs	r0, r1
    82a2:	f7fd fd41 	bl	5d28 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    82a6:	2302      	movs	r3, #2
    82a8:	4398      	bics	r0, r3
    82aa:	1e05      	subs	r5, r0, #0
    82ac:	d000      	beq.n	82b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b0>
    82ae:	e602      	b.n	7eb6 <event_connection_prepare+0x12>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    82b0:	8c3b      	ldrh	r3, [r7, #32]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    82b2:	4a64      	ldr	r2, [pc, #400]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    82b4:	3307      	adds	r3, #7
    82b6:	b2db      	uxtb	r3, r3
    82b8:	930f      	str	r3, [sp, #60]	; 0x3c
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    82ba:	0020      	movs	r0, r4
    82bc:	2300      	movs	r3, #0
    82be:	0029      	movs	r1, r5
    82c0:	f7f8 f86a 	bl	398 <__aeabi_lmul>
    82c4:	4a5a      	ldr	r2, [pc, #360]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    82c6:	2307      	movs	r3, #7
    82c8:	900a      	str	r0, [sp, #40]	; 0x28
    82ca:	910b      	str	r1, [sp, #44]	; 0x2c
    82cc:	f7f8 f844 	bl	358 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    82d0:	0204      	lsls	r4, r0, #8
    82d2:	0a24      	lsrs	r4, r4, #8
				     HAL_TICKER_REMAINDER(periodic_us),
    82d4:	4a56      	ldr	r2, [pc, #344]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    82d6:	2307      	movs	r3, #7
    82d8:	0020      	movs	r0, r4
    82da:	0029      	movs	r1, r5
    82dc:	f7f8 f85c 	bl	398 <__aeabi_lmul>
    82e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    82e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82e4:	1a12      	subs	r2, r2, r0
    82e6:	418b      	sbcs	r3, r1
    82e8:	0010      	movs	r0, r2
    82ea:	22fa      	movs	r2, #250	; 0xfa
    82ec:	0019      	movs	r1, r3
    82ee:	0092      	lsls	r2, r2, #2
    82f0:	2300      	movs	r3, #0
    82f2:	f7f8 f831 	bl	358 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    82f6:	68fa      	ldr	r2, [r7, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    82f8:	0001      	movs	r1, r0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    82fa:	4694      	mov	ip, r2
    82fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    82fe:	7f78      	ldrb	r0, [r7, #29]
    8300:	4463      	add	r3, ip
    8302:	4a54      	ldr	r2, [pc, #336]	; (8454 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x454>)
    8304:	287f      	cmp	r0, #127	; 0x7f
    8306:	d800      	bhi.n	830a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30a>
    8308:	4a53      	ldr	r2, [pc, #332]	; (8458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x458>)
		ticker_status =
    830a:	4854      	ldr	r0, [pc, #336]	; (845c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45c>)
    830c:	9205      	str	r2, [sp, #20]
    830e:	9008      	str	r0, [sp, #32]
    8310:	484f      	ldr	r0, [pc, #316]	; (8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>)
    8312:	9304      	str	r3, [sp, #16]
    8314:	9007      	str	r0, [sp, #28]
    8316:	2000      	movs	r0, #0
    8318:	9102      	str	r1, [sp, #8]
    831a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    831c:	9706      	str	r7, [sp, #24]
    831e:	9003      	str	r0, [sp, #12]
    8320:	9401      	str	r4, [sp, #4]
    8322:	9600      	str	r6, [sp, #0]
    8324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8326:	0001      	movs	r1, r0
    8328:	f7fd fc6c 	bl	5c04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    832c:	2302      	movs	r3, #2
    832e:	4398      	bics	r0, r3
    8330:	d000      	beq.n	8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
    8332:	e5c0      	b.n	7eb6 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    8334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8336:	2b00      	cmp	r3, #0
    8338:	d003      	beq.n	8342 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x342>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    833a:	2201      	movs	r2, #1
    833c:	0011      	movs	r1, r2
    833e:	f7fc fec9 	bl	50d4 <mayfly_enable>
}
    8342:	b011      	add	sp, #68	; 0x44
    8344:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    8346:	990a      	ldr	r1, [sp, #40]	; 0x28
    8348:	0020      	movs	r0, r4
    834a:	f7f7 ff81 	bl	250 <__aeabi_uidivmod>
    834e:	2324      	movs	r3, #36	; 0x24
    8350:	b288      	uxth	r0, r1
    8352:	4a36      	ldr	r2, [pc, #216]	; (842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>)
    8354:	33ff      	adds	r3, #255	; 0xff
    8356:	2100      	movs	r1, #0
    8358:	f7f8 f81e 	bl	398 <__aeabi_lmul>
    835c:	2307      	movs	r3, #7
    835e:	4a34      	ldr	r2, [pc, #208]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    8360:	f7f7 fffa 	bl	358 <__aeabi_uldivmod>
    8364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8366:	1a1b      	subs	r3, r3, r0
    8368:	e70d      	b.n	8186 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x186>
				conn->slave.window_widening_prepare_us =
    836a:	647b      	str	r3, [r7, #68]	; 0x44
    836c:	e74a      	b.n	8204 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x204>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    836e:	4a35      	ldr	r2, [pc, #212]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
    8370:	2300      	movs	r3, #0
    8372:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    8374:	2100      	movs	r1, #0
    8376:	f7f8 f80f 	bl	398 <__aeabi_lmul>
    837a:	4a2d      	ldr	r2, [pc, #180]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    837c:	2307      	movs	r3, #7
    837e:	f7f7 ffeb 	bl	358 <__aeabi_uldivmod>
    8382:	0200      	lsls	r0, r0, #8
    8384:	0a00      	lsrs	r0, r0, #8
			ticks_win_offset += 1;
    8386:	1c46      	adds	r6, r0, #1
		periodic_us = conn_interval_us;
    8388:	002c      	movs	r4, r5
    838a:	e759      	b.n	8240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x240>
	if (conn->llcp.chan_map.initiate) {
    838c:	003b      	movs	r3, r7
    838e:	3360      	adds	r3, #96	; 0x60
    8390:	930d      	str	r3, [sp, #52]	; 0x34
    8392:	781b      	ldrb	r3, [r3, #0]
    8394:	2b00      	cmp	r3, #0
    8396:	d024      	beq.n	83e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8398:	0020      	movs	r0, r4
    839a:	3051      	adds	r0, #81	; 0x51
    839c:	30ff      	adds	r0, #255	; 0xff
    839e:	f7fc fe07 	bl	4fb0 <mem_acquire>
    83a2:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    83a4:	d100      	bne.n	83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>
    83a6:	e62b      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
			conn->llcp.chan_map.initiate = 0;
    83a8:	2300      	movs	r3, #0
			conn->llcp.chan_map.instant =
    83aa:	003d      	movs	r5, r7
			conn->llcp.chan_map.initiate = 0;
    83ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			conn->llcp.chan_map.instant =
    83ae:	3566      	adds	r5, #102	; 0x66
			conn->llcp.chan_map.initiate = 0;
    83b0:	7013      	strb	r3, [r2, #0]
				event_counter + conn->latency + 6;
    83b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    83b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    83b6:	3306      	adds	r3, #6
    83b8:	18d3      	adds	r3, r2, r3
			conn->llcp.chan_map.instant =
    83ba:	802b      	strh	r3, [r5, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    83bc:	2303      	movs	r3, #3
    83be:	7902      	ldrb	r2, [r0, #4]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    83c0:	0039      	movs	r1, r7
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    83c2:	4313      	orrs	r3, r2
    83c4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    83c6:	2308      	movs	r3, #8
    83c8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    83ca:	3b07      	subs	r3, #7
    83cc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    83ce:	2205      	movs	r2, #5
    83d0:	3008      	adds	r0, #8
    83d2:	3161      	adds	r1, #97	; 0x61
    83d4:	f7f9 fcaa 	bl	1d2c <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    83d8:	782b      	ldrb	r3, [r5, #0]
    83da:	7363      	strb	r3, [r4, #13]
    83dc:	786b      	ldrb	r3, [r5, #1]
    83de:	73a3      	strb	r3, [r4, #14]
    83e0:	e60a      	b.n	7ff8 <event_connection_prepare+0x154>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    83e2:	003b      	movs	r3, r7
    83e4:	3366      	adds	r3, #102	; 0x66
    83e6:	881b      	ldrh	r3, [r3, #0]
    83e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    83ea:	1ad3      	subs	r3, r2, r3
    83ec:	041b      	lsls	r3, r3, #16
    83ee:	d500      	bpl.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
    83f0:	e606      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		memcpy(&conn->data_chan_map[0],
    83f2:	003c      	movs	r4, r7
    83f4:	0039      	movs	r1, r7
		conn->llcp_ack = conn->llcp_req;
    83f6:	7833      	ldrb	r3, [r6, #0]
		memcpy(&conn->data_chan_map[0],
    83f8:	3417      	adds	r4, #23
		conn->llcp_ack = conn->llcp_req;
    83fa:	702b      	strb	r3, [r5, #0]
		memcpy(&conn->data_chan_map[0],
    83fc:	2205      	movs	r2, #5
    83fe:	3161      	adds	r1, #97	; 0x61
    8400:	0020      	movs	r0, r4
    8402:	f7f9 fc93 	bl	1d2c <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    8406:	2105      	movs	r1, #5
    8408:	0020      	movs	r0, r4
    840a:	f7fc ff69 	bl	52e0 <util_ones_count_get>
		conn->data_chan_count =
    840e:	223f      	movs	r2, #63	; 0x3f
    8410:	0003      	movs	r3, r0
    8412:	7f78      	ldrb	r0, [r7, #29]
    8414:	4013      	ands	r3, r2
    8416:	4390      	bics	r0, r2
    8418:	4318      	orrs	r0, r3
		conn->chm_update = 1;
    841a:	2301      	movs	r3, #1
		conn->data_chan_count =
    841c:	7778      	strb	r0, [r7, #29]
		conn->chm_update = 1;
    841e:	773b      	strb	r3, [r7, #28]
    8420:	e5ee      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    8422:	46c0      	nop			; (mov r8, r8)
    8424:	000004e2 	.word	0x000004e2
    8428:	00002710 	.word	0x00002710
    842c:	09ce5400 	.word	0x09ce5400
    8430:	1afd498d 	.word	0x1afd498d
    8434:	0000daae 	.word	0x0000daae
    8438:	000f4240 	.word	0x000f4240
    843c:	20000298 	.word	0x20000298
    8440:	000f423f 	.word	0x000f423f
    8444:	3b9aca00 	.word	0x3b9aca00
    8448:	026259ff 	.word	0x026259ff
    844c:	00001aa1 	.word	0x00001aa1
    8450:	000077d1 	.word	0x000077d1
    8454:	00008575 	.word	0x00008575
    8458:	0000856d 	.word	0x0000856d
    845c:	00001ab1 	.word	0x00001ab1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8460:	0020      	movs	r0, r4
    8462:	3051      	adds	r0, #81	; 0x51
    8464:	30ff      	adds	r0, #255	; 0xff
    8466:	f7fc fda3 	bl	4fb0 <mem_acquire>
    846a:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    846c:	d100      	bne.n	8470 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x470>
    846e:	e5c7      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		conn->llcp_ack = conn->llcp_req;
    8470:	7833      	ldrb	r3, [r6, #0]
    8472:	702b      	strb	r3, [r5, #0]
		conn->llcp_features = RADIO_BLE_FEAT;
    8474:	003d      	movs	r5, r7
    8476:	4b3c      	ldr	r3, [pc, #240]	; (8568 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x568>)
    8478:	358c      	adds	r5, #140	; 0x8c
    847a:	602b      	str	r3, [r5, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    847c:	2303      	movs	r3, #3
    847e:	7902      	ldrb	r2, [r0, #4]
    8480:	4313      	orrs	r3, r2
    8482:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    8484:	2309      	movs	r3, #9
		pdu_ctrl_tx->llctrl.opcode =
    8486:	7f7a      	ldrb	r2, [r7, #29]
		pdu_ctrl_tx->len =
    8488:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    848a:	3b01      	subs	r3, #1
    848c:	2a7f      	cmp	r2, #127	; 0x7f
    848e:	d900      	bls.n	8492 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x492>
    8490:	3306      	adds	r3, #6
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    8492:	0020      	movs	r0, r4
		pdu_ctrl_tx->llctrl.opcode =
    8494:	71e3      	strb	r3, [r4, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    8496:	2208      	movs	r2, #8
    8498:	2100      	movs	r1, #0
    849a:	3008      	adds	r0, #8
    849c:	f7f9 fc70 	bl	1d80 <memset>
		ctrl_tx_enqueue(conn, node_tx);
    84a0:	0021      	movs	r1, r4
			conn->llcp_features & 0xFF;
    84a2:	682b      	ldr	r3, [r5, #0]
			(conn->llcp_features >> 8) & 0xFF;
    84a4:	0a1a      	lsrs	r2, r3, #8
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    84a6:	7223      	strb	r3, [r4, #8]
			(conn->llcp_features >> 16) & 0xFF;
    84a8:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    84aa:	7262      	strb	r2, [r4, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    84ac:	72a3      	strb	r3, [r4, #10]
			ctrl_tx_enqueue(conn, node_tx);
    84ae:	0038      	movs	r0, r7
    84b0:	f7ff fc6a 	bl	7d88 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    84b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    84b6:	86bb      	strh	r3, [r7, #52]	; 0x34
    84b8:	e5a2      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	if (conn->llcp_version.tx == 0) {
    84ba:	003b      	movs	r3, r7
    84bc:	2201      	movs	r2, #1
    84be:	3390      	adds	r3, #144	; 0x90
    84c0:	930d      	str	r3, [sp, #52]	; 0x34
    84c2:	781b      	ldrb	r3, [r3, #0]
    84c4:	4213      	tst	r3, r2
    84c6:	d123      	bne.n	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    84c8:	0020      	movs	r0, r4
    84ca:	3051      	adds	r0, #81	; 0x51
    84cc:	30ff      	adds	r0, #255	; 0xff
    84ce:	f7fc fd6f 	bl	4fb0 <mem_acquire>
    84d2:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    84d4:	d100      	bne.n	84d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d8>
    84d6:	e593      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
			conn->llcp_ack = conn->llcp_req;
    84d8:	003b      	movs	r3, r7
    84da:	335c      	adds	r3, #92	; 0x5c
    84dc:	781a      	ldrb	r2, [r3, #0]
    84de:	705a      	strb	r2, [r3, #1]
			conn->llcp_version.tx = 1;
    84e0:	2201      	movs	r2, #1
    84e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    84e4:	781b      	ldrb	r3, [r3, #0]
    84e6:	4313      	orrs	r3, r2
    84e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    84ea:	7013      	strb	r3, [r2, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    84ec:	2303      	movs	r3, #3
    84ee:	7902      	ldrb	r2, [r0, #4]
    84f0:	4313      	orrs	r3, r2
    84f2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    84f4:	2306      	movs	r3, #6
    84f6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    84f8:	18db      	adds	r3, r3, r3
    84fa:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    84fc:	3b03      	subs	r3, #3
    84fe:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    8500:	3b18      	subs	r3, #24
    8502:	7243      	strb	r3, [r0, #9]
    8504:	3314      	adds	r3, #20
    8506:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    8508:	3b06      	subs	r3, #6
    850a:	72c3      	strb	r3, [r0, #11]
    850c:	7303      	strb	r3, [r0, #12]
    850e:	e7ce      	b.n	84ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ae>
	} else if (conn->llcp_version.rx != 0) {
    8510:	2002      	movs	r0, #2
    8512:	4203      	tst	r3, r0
    8514:	d100      	bne.n	8518 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x518>
    8516:	e4ce      	b.n	7eb6 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    8518:	7833      	ldrb	r3, [r6, #0]
    851a:	702b      	strb	r3, [r5, #0]
		node_rx = packet_rx_reserve_get(2);
    851c:	f7fe faa8 	bl	6a70 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    8520:	2800      	cmp	r0, #0
    8522:	d100      	bne.n	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    8524:	e4c7      	b.n	7eb6 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    8526:	8c3b      	ldrh	r3, [r7, #32]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    8528:	7a02      	ldrb	r2, [r0, #8]
		node_rx->hdr.handle = conn->handle;
    852a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    852c:	2301      	movs	r3, #1
    852e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    8530:	2303      	movs	r3, #3
    8532:	4313      	orrs	r3, r2
    8534:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    8536:	2306      	movs	r3, #6
    8538:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    853a:	18db      	adds	r3, r3, r3
    853c:	72c3      	strb	r3, [r0, #11]
			conn->llcp_version.version_number;
    853e:	003b      	movs	r3, r7
    8540:	3391      	adds	r3, #145	; 0x91
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    8542:	781b      	ldrb	r3, [r3, #0]
    8544:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.company_id;
    8546:	003b      	movs	r3, r7
    8548:	3392      	adds	r3, #146	; 0x92
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    854a:	781a      	ldrb	r2, [r3, #0]
    854c:	7342      	strb	r2, [r0, #13]
    854e:	785b      	ldrb	r3, [r3, #1]
    8550:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.sub_version_number;
    8552:	003b      	movs	r3, r7
    8554:	3394      	adds	r3, #148	; 0x94
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    8556:	781a      	ldrb	r2, [r3, #0]
    8558:	73c2      	strb	r2, [r0, #15]
    855a:	785b      	ldrb	r3, [r3, #1]
    855c:	7403      	strb	r3, [r0, #16]
		packet_rx_enqueue();
    855e:	f7fe fe09 	bl	7174 <packet_rx_enqueue>
    8562:	e54d      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
				conn->procedure_expire++;
    8564:	3301      	adds	r3, #1
    8566:	e571      	b.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8568:	0001400c 	.word	0x0001400c

0000856c <event_master_prepare>:
{
    856c:	b510      	push	{r4, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    856e:	f7ff fc99 	bl	7ea4 <event_connection_prepare>
}
    8572:	bd10      	pop	{r4, pc}

00008574 <event_slave_prepare>:
    8574:	b510      	push	{r4, lr}
    8576:	f7ff fc95 	bl	7ea4 <event_connection_prepare>
    857a:	bd10      	pop	{r4, pc}

0000857c <connection_configure>:
{
    857c:	b510      	push	{r4, lr}
    857e:	0004      	movs	r4, r0
	radio_reset();
    8580:	f002 ff5a 	bl	b438 <radio_reset>
	radio_tx_power_set(0);
    8584:	2000      	movs	r0, #0
    8586:	f002 ff73 	bl	b470 <radio_tx_power_set>
	radio_isr_set(isr);
    858a:	4809      	ldr	r0, [pc, #36]	; (85b0 <connection_configure+0x34>)
    858c:	f002 ff3a 	bl	b404 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    8590:	0020      	movs	r0, r4
    8592:	3010      	adds	r0, #16
    8594:	f002 ff90 	bl	b4b8 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
    8598:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    859a:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    859c:	0409      	lsls	r1, r1, #16
			     ((u32_t)conn->crc_init[1] << 8) |
    859e:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    85a0:	4319      	orrs	r1, r3
			     ((u32_t)conn->crc_init[0])));
    85a2:	7d23      	ldrb	r3, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    85a4:	4803      	ldr	r0, [pc, #12]	; (85b4 <connection_configure+0x38>)
    85a6:	4319      	orrs	r1, r3
    85a8:	f003 f81a 	bl	b5e0 <radio_crc_configure>
}
    85ac:	bd10      	pop	{r4, pc}
    85ae:	46c0      	nop			; (mov r8, r8)
    85b0:	000087fd 	.word	0x000087fd
    85b4:	0000065b 	.word	0x0000065b

000085b8 <event_slave>:
{
    85b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    85ba:	4e58      	ldr	r6, [pc, #352]	; (871c <event_slave+0x164>)
{
    85bc:	9000      	str	r0, [sp, #0]
	LL_ASSERT(_radio.role == ROLE_NONE);
    85be:	7bf5      	ldrb	r5, [r6, #15]
{
    85c0:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    85c2:	b2ed      	uxtb	r5, r5
    85c4:	2d00      	cmp	r5, #0
    85c6:	d002      	beq.n	85ce <event_slave+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    85c8:	b662      	cpsie	i
    85ca:	2004      	movs	r0, #4
    85cc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    85ce:	7b33      	ldrb	r3, [r6, #12]
    85d0:	8c22      	ldrh	r2, [r4, #32]
    85d2:	b2db      	uxtb	r3, r3
    85d4:	3207      	adds	r2, #7
    85d6:	4293      	cmp	r3, r2
    85d8:	d1f6      	bne.n	85c8 <event_slave+0x10>
	_radio.role = ROLE_SLAVE;
    85da:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    85dc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    85de:	73f2      	strb	r2, [r6, #15]
	_radio.ticker_id_prepare = 0;
    85e0:	7335      	strb	r5, [r6, #12]
	_radio.ticker_id_event =
    85e2:	7373      	strb	r3, [r6, #13]
	_radio.ticks_anchor = ticks_at_expire;
    85e4:	9b00      	ldr	r3, [sp, #0]
	_radio.conn_curr = conn;
    85e6:	0037      	movs	r7, r6
	_radio.ticks_anchor = ticks_at_expire;
    85e8:	6073      	str	r3, [r6, #4]
	_radio.packet_counter = 0;
    85ea:	0033      	movs	r3, r6
	_radio.state = STATE_RX;
    85ec:	3a02      	subs	r2, #2
	_radio.packet_counter = 0;
    85ee:	33ff      	adds	r3, #255	; 0xff
	_radio.conn_curr = conn;
    85f0:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
    85f2:	7432      	strb	r2, [r6, #16]
	_radio.packet_counter = 0;
    85f4:	755d      	strb	r5, [r3, #21]
	_radio.crc_expire = 0;
    85f6:	759d      	strb	r5, [r3, #22]
	_radio.conn_curr = conn;
    85f8:	617c      	str	r4, [r7, #20]
	conn->latency_event = conn->latency_prepare;
    85fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	connection_configure(conn);
    85fc:	0020      	movs	r0, r4
	conn->latency_event = conn->latency_prepare;
    85fe:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    8600:	8525      	strh	r5, [r4, #40]	; 0x28
	connection_configure(conn);
    8602:	f7ff ffbb 	bl	857c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    8606:	2096      	movs	r0, #150	; 0x96
    8608:	f003 f8a0 	bl	b74c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    860c:	002b      	movs	r3, r5
    860e:	002a      	movs	r2, r5
    8610:	0029      	movs	r1, r5
    8612:	0028      	movs	r0, r5
    8614:	f003 f810 	bl	b638 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    8618:	2336      	movs	r3, #54	; 0x36
    861a:	33ff      	adds	r3, #255	; 0xff
    861c:	5cf3      	ldrb	r3, [r6, r3]
    861e:	0026      	movs	r6, r4
    8620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8622:	009b      	lsls	r3, r3, #2
    8624:	5899      	ldr	r1, [r3, r2]
	rx_packet_set(conn, (void *)
    8626:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    8628:	3108      	adds	r1, #8
	rx_packet_set(conn, (void *)
    862a:	f7fe fceb 	bl	7004 <rx_packet_set>
	if (conn->data_chan_sel) {
    862e:	7f63      	ldrb	r3, [r4, #29]
    8630:	3617      	adds	r6, #23
    8632:	069d      	lsls	r5, r3, #26
    8634:	065b      	lsls	r3, r3, #25
    8636:	d54a      	bpl.n	86ce <event_slave+0x116>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    8638:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    863a:	0eab      	lsrs	r3, r5, #26
    863c:	3801      	subs	r0, #1
    863e:	8be1      	ldrh	r1, [r4, #30]
    8640:	b280      	uxth	r0, r0
    8642:	0032      	movs	r2, r6
    8644:	f7ff faea 	bl	7c1c <chan_sel_2>
	chan_set(data_chan_use);
    8648:	f7fe feb6 	bl	73b8 <chan_set>
	conn->slave.window_widening_event_us +=
    864c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    864e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    8650:	189b      	adds	r3, r3, r2
	conn->slave.window_widening_prepare_us = 0;
    8652:	2200      	movs	r2, #0
    8654:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    8656:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    8658:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    865a:	4293      	cmp	r3, r2
    865c:	d900      	bls.n	8660 <event_slave+0xa8>
		conn->slave.window_widening_event_us =
    865e:	64a2      	str	r2, [r4, #72]	; 0x48
	conn->slave.window_size_prepare_us = 0;
    8660:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
    8662:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8664:	6d23      	ldr	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    8666:	4f2d      	ldr	r7, [pc, #180]	; (871c <event_slave+0x164>)
    8668:	9900      	ldr	r1, [sp, #0]
	conn->slave.window_size_event_us +=
    866a:	189b      	adds	r3, r3, r2
    866c:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    866e:	68ba      	ldr	r2, [r7, #8]
    8670:	3109      	adds	r1, #9
	conn->slave.window_size_prepare_us = 0;
    8672:	64e5      	str	r5, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    8674:	0028      	movs	r0, r5
    8676:	f003 f871 	bl	b75c <radio_tmr_start>
    867a:	9001      	str	r0, [sp, #4]
	radio_tmr_aa_capture();
    867c:	f003 f8ea 	bl	b854 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    8680:	0028      	movs	r0, r5
    8682:	f003 f911 	bl	b8a8 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
    8686:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    8688:	6d20      	ldr	r0, [r4, #80]	; 0x50
    868a:	005e      	lsls	r6, r3, #1
    868c:	3078      	adds	r0, #120	; 0x78
    868e:	1836      	adds	r6, r6, r0
	hcto += radio_rx_ready_delay_get(0, 0);
    8690:	0029      	movs	r1, r5
    8692:	0028      	movs	r0, r5
    8694:	f002 ff68 	bl	b568 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    8698:	9b01      	ldr	r3, [sp, #4]
	hcto += radio_rx_chain_delay_get(0, 0);
    869a:	0029      	movs	r1, r5
	hcto += addr_us_get(0);
    869c:	199e      	adds	r6, r3, r6
    869e:	1836      	adds	r6, r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    86a0:	0028      	movs	r0, r5
    86a2:	f002 ff63 	bl	b56c <radio_rx_chain_delay_get>
    86a6:	1830      	adds	r0, r6, r0
	radio_tmr_hcto_configure(hcto);
    86a8:	f003 f8aa 	bl	b800 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    86ac:	8c21      	ldrh	r1, [r4, #32]
    86ae:	9a00      	ldr	r2, [sp, #0]
    86b0:	3107      	adds	r1, #7
    86b2:	b2c9      	uxtb	r1, r1
    86b4:	0020      	movs	r0, r4
    86b6:	f7ff faf1 	bl	7c9c <preempt_calc>
    86ba:	42a8      	cmp	r0, r5
    86bc:	d023      	beq.n	8706 <event_slave+0x14e>
		_radio.state = STATE_STOP;
    86be:	2304      	movs	r3, #4
    86c0:	743b      	strb	r3, [r7, #16]
		radio_disable();
    86c2:	f002 ff61 	bl	b588 <radio_disable>
	packet_tx_enqueue(2);
    86c6:	2002      	movs	r0, #2
    86c8:	f7fe ff14 	bl	74f4 <packet_tx_enqueue>
}
    86cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    86ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    86d0:	7fa0      	ldrb	r0, [r4, #30]
    86d2:	3301      	adds	r3, #1
    86d4:	4358      	muls	r0, r3
    86d6:	7fe3      	ldrb	r3, [r4, #31]
    86d8:	2125      	movs	r1, #37	; 0x25
    86da:	18c0      	adds	r0, r0, r3
    86dc:	f7f7 fe18 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    86e0:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    86e2:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    86e4:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    86e6:	08c3      	lsrs	r3, r0, #3
    86e8:	5cf3      	ldrb	r3, [r6, r3]
    86ea:	4011      	ands	r1, r2
    86ec:	410b      	asrs	r3, r1
    86ee:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    86f0:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    86f2:	4213      	tst	r3, r2
    86f4:	d1a8      	bne.n	8648 <event_slave+0x90>
		chan_index = chan_next % chan_count;
    86f6:	0029      	movs	r1, r5
    86f8:	f7f7 fdaa 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    86fc:	0030      	movs	r0, r6
		chan_index = chan_next % chan_count;
    86fe:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    8700:	f7fe f99b 	bl	6a3a <chan_sel_remap>
    8704:	e7a0      	b.n	8648 <event_slave+0x90>
		ticker_status =
    8706:	0003      	movs	r3, r0
    8708:	4a05      	ldr	r2, [pc, #20]	; (8720 <event_slave+0x168>)
    870a:	0001      	movs	r1, r0
    870c:	f7fd fb70 	bl	5df0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8710:	2302      	movs	r3, #2
    8712:	4398      	bics	r0, r3
    8714:	d000      	beq.n	8718 <event_slave+0x160>
    8716:	e757      	b.n	85c8 <event_slave+0x10>
    8718:	e7d5      	b.n	86c6 <event_slave+0x10e>
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	20000298 	.word	0x20000298
    8720:	00006f7d 	.word	0x00006f7d

00008724 <prepare_pdu_data_tx>:
	    conn->empty ||
    8724:	0003      	movs	r3, r0
{
    8726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8728:	0005      	movs	r5, r0
	    conn->empty ||
    872a:	33a8      	adds	r3, #168	; 0xa8
{
    872c:	9101      	str	r1, [sp, #4]
	    conn->empty ||
    872e:	7819      	ldrb	r1, [r3, #0]
    8730:	35ec      	adds	r5, #236	; 0xec
	if (/* empty packet */
    8732:	b24a      	sxtb	r2, r1
    8734:	2a00      	cmp	r2, #0
    8736:	db09      	blt.n	874c <prepare_pdu_data_tx+0x28>
	    !conn->pkt_tx_head ||
    8738:	682a      	ldr	r2, [r5, #0]
	    conn->empty ||
    873a:	2a00      	cmp	r2, #0
    873c:	d006      	beq.n	874c <prepare_pdu_data_tx+0x28>
    873e:	0006      	movs	r6, r0
    8740:	36f0      	adds	r6, #240	; 0xf0
	    !conn->pkt_tx_head ||
    8742:	0709      	lsls	r1, r1, #28
    8744:	d524      	bpl.n	8790 <prepare_pdu_data_tx+0x6c>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    8746:	6831      	ldr	r1, [r6, #0]
    8748:	428a      	cmp	r2, r1
    874a:	d021      	beq.n	8790 <prepare_pdu_data_tx+0x6c>
	conn->empty = 1;
    874c:	2280      	movs	r2, #128	; 0x80
    874e:	7819      	ldrb	r1, [r3, #0]
    8750:	4252      	negs	r2, r2
    8752:	430a      	orrs	r2, r1
    8754:	701a      	strb	r2, [r3, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    8756:	f002 ff5f 	bl	b618 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    875a:	2103      	movs	r1, #3
    875c:	7802      	ldrb	r2, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    875e:	0003      	movs	r3, r0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8760:	438a      	bics	r2, r1
    8762:	0011      	movs	r1, r2
    8764:	2201      	movs	r2, #1
    8766:	430a      	orrs	r2, r1
	pdu_data_tx->len = 0;
    8768:	2100      	movs	r1, #0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    876a:	7002      	strb	r2, [r0, #0]
	pdu_data_tx->len = 0;
    876c:	7041      	strb	r1, [r0, #1]
	if (conn->pkt_tx_head) {
    876e:	6828      	ldr	r0, [r5, #0]
    8770:	3110      	adds	r1, #16
    8772:	2800      	cmp	r0, #0
    8774:	d00a      	beq.n	878c <prepare_pdu_data_tx+0x68>
		pdu_data_tx->md = 1;
    8776:	430a      	orrs	r2, r1
		pdu_data_tx->md = 0;
    8778:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->rfu = 0;
    877a:	211f      	movs	r1, #31
    877c:	781a      	ldrb	r2, [r3, #0]
    877e:	400a      	ands	r2, r1
    8780:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->resv = 0;
    8782:	2200      	movs	r2, #0
    8784:	709a      	strb	r2, [r3, #2]
	*pdu_data_tx = _pdu_data_tx;
    8786:	9a01      	ldr	r2, [sp, #4]
    8788:	6013      	str	r3, [r2, #0]
}
    878a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    878c:	438a      	bics	r2, r1
    878e:	e7f3      	b.n	8778 <prepare_pdu_data_tx+0x54>
					conn->packet_tx_head_offset);
    8790:	0005      	movs	r5, r0
    8792:	35ff      	adds	r5, #255	; 0xff
    8794:	78af      	ldrb	r7, [r5, #2]
		if (!conn->packet_tx_head_len) {
    8796:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    8798:	1d13      	adds	r3, r2, #4
    879a:	19db      	adds	r3, r3, r7
		if (!conn->packet_tx_head_len) {
    879c:	2900      	cmp	r1, #0
    879e:	d101      	bne.n	87a4 <prepare_pdu_data_tx+0x80>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    87a0:	7859      	ldrb	r1, [r3, #1]
    87a2:	7069      	strb	r1, [r5, #1]
		if (conn->packet_tx_head_offset) {
    87a4:	2f00      	cmp	r7, #0
    87a6:	d007      	beq.n	87b8 <prepare_pdu_data_tx+0x94>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    87a8:	2403      	movs	r4, #3
    87aa:	7819      	ldrb	r1, [r3, #0]
    87ac:	43a1      	bics	r1, r4
    87ae:	468c      	mov	ip, r1
    87b0:	2101      	movs	r1, #1
    87b2:	4664      	mov	r4, ip
    87b4:	4321      	orrs	r1, r4
    87b6:	7019      	strb	r1, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    87b8:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx->md = 0;
    87ba:	2510      	movs	r5, #16
		_pdu_data_tx->len = conn->packet_tx_head_len -
    87bc:	1bc9      	subs	r1, r1, r7
		_pdu_data_tx->md = 0;
    87be:	781f      	ldrb	r7, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    87c0:	b2c9      	uxtb	r1, r1
		_pdu_data_tx->md = 0;
    87c2:	43af      	bics	r7, r5
		_pdu_data_tx->len = conn->packet_tx_head_len -
    87c4:	7059      	strb	r1, [r3, #1]
		_pdu_data_tx->md = 0;
    87c6:	701f      	strb	r7, [r3, #0]
		if (_pdu_data_tx->len > max_tx_octets) {
    87c8:	291b      	cmp	r1, #27
    87ca:	d904      	bls.n	87d6 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->len = max_tx_octets;
    87cc:	211b      	movs	r1, #27
    87ce:	7059      	strb	r1, [r3, #1]
			_pdu_data_tx->md = 1;
    87d0:	b2f9      	uxtb	r1, r7
    87d2:	430d      	orrs	r5, r1
    87d4:	701d      	strb	r5, [r3, #0]
		if (conn->pkt_tx_head->next) {
    87d6:	6811      	ldr	r1, [r2, #0]
    87d8:	2900      	cmp	r1, #0
    87da:	d003      	beq.n	87e4 <prepare_pdu_data_tx+0xc0>
			_pdu_data_tx->md = 1;
    87dc:	2110      	movs	r1, #16
    87de:	781d      	ldrb	r5, [r3, #0]
    87e0:	4329      	orrs	r1, r5
    87e2:	7019      	strb	r1, [r3, #0]
		if (!conn->pkt_tx_ctrl &&
    87e4:	6831      	ldr	r1, [r6, #0]
    87e6:	2900      	cmp	r1, #0
    87e8:	d1c7      	bne.n	877a <prepare_pdu_data_tx+0x56>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
    87ea:	0001      	movs	r1, r0
    87ec:	31f8      	adds	r1, #248	; 0xf8
		if (!conn->pkt_tx_ctrl &&
    87ee:	6809      	ldr	r1, [r1, #0]
    87f0:	428a      	cmp	r2, r1
    87f2:	d0c2      	beq.n	877a <prepare_pdu_data_tx+0x56>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    87f4:	30f4      	adds	r0, #244	; 0xf4
    87f6:	6002      	str	r2, [r0, #0]
    87f8:	6032      	str	r2, [r6, #0]
    87fa:	e7be      	b.n	877a <prepare_pdu_data_tx+0x56>

000087fc <isr>:
{
    87fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87fe:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
    8800:	f002 fedc 	bl	b5bc <radio_is_done>
    8804:	b2c7      	uxtb	r7, r0
	if (trx_done) {
    8806:	2f00      	cmp	r7, #0
    8808:	d026      	beq.n	8858 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    880a:	f002 fefb 	bl	b604 <radio_crc_is_valid>
    880e:	b2c3      	uxtb	r3, r0
    8810:	930e      	str	r3, [sp, #56]	; 0x38
		devmatch_ok = radio_filter_has_match();
    8812:	f002 ff7b 	bl	b70c <radio_filter_has_match>
    8816:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    8818:	f002 ff80 	bl	b71c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    881c:	f003 f928 	bl	ba70 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    8820:	f003 f912 	bl	ba48 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    8824:	f002 ff32 	bl	b68c <radio_rssi_is_ready>
    8828:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    882a:	f002 feb7 	bl	b59c <radio_status_reset>
	radio_tmr_status_reset();
    882e:	f002 ff7d 	bl	b72c <radio_tmr_status_reset>
	radio_filter_status_reset();
    8832:	f002 ff65 	bl	b700 <radio_filter_status_reset>
	radio_ar_status_reset();
    8836:	f003 f90f 	bl	ba58 <radio_ar_status_reset>
	radio_rssi_status_reset();
    883a:	f002 ff21 	bl	b680 <radio_rssi_status_reset>
	switch (_radio.state) {
    883e:	4c69      	ldr	r4, [pc, #420]	; (89e4 <isr+0x1e8>)
    8840:	7c23      	ldrb	r3, [r4, #16]
    8842:	2b05      	cmp	r3, #5
    8844:	d82b      	bhi.n	889e <isr+0xa2>
    8846:	0018      	movs	r0, r3
    8848:	f7f7 fcb4 	bl	1b4 <__gnu_thumb1_case_uhi>
    884c:	007b0058 	.word	0x007b0058
    8850:	096a000a 	.word	0x096a000a
    8854:	096a096a 	.word	0x096a096a
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    8858:	003d      	movs	r5, r7
    885a:	003e      	movs	r6, r7
    885c:	970e      	str	r7, [sp, #56]	; 0x38
    885e:	e7e4      	b.n	882a <isr+0x2e>
	_radio.state = STATE_RX;
    8860:	2301      	movs	r3, #1
    8862:	7423      	strb	r3, [r4, #16]
	hcto = radio_tmr_tifs_base_get()
    8864:	f003 f852 	bl	b90c <radio_tmr_tifs_base_get>
    8868:	0005      	movs	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    886a:	2096      	movs	r0, #150	; 0x96
    886c:	f002 ff6e 	bl	b74c <radio_tmr_tifs_set>
	switch (_radio.role) {
    8870:	7be0      	ldrb	r0, [r4, #15]
    8872:	3801      	subs	r0, #1
    8874:	2803      	cmp	r0, #3
    8876:	d812      	bhi.n	889e <isr+0xa2>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8878:	2300      	movs	r3, #0
    887a:	35c3      	adds	r5, #195	; 0xc3
    887c:	001a      	movs	r2, r3
    887e:	0019      	movs	r1, r3
	switch (_radio.role) {
    8880:	f7f7 fc84 	bl	18c <__gnu_thumb1_case_uqi>
    8884:	3e3e1e02 	.word	0x3e3e1e02
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8888:	0018      	movs	r0, r3
    888a:	f002 fed5 	bl	b638 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    888e:	f002 fec7 	bl	b620 <radio_pkt_scratch_get>
    8892:	f002 fe55 	bl	b540 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    8896:	f002 fe89 	bl	b5ac <radio_is_ready>
    889a:	1e06      	subs	r6, r0, #0
    889c:	d002      	beq.n	88a4 <isr+0xa8>
		LL_ASSERT(0);
    889e:	b662      	cpsie	i
    88a0:	2004      	movs	r0, #4
    88a2:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    88a4:	0001      	movs	r1, r0
    88a6:	f002 fe61 	bl	b56c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    88aa:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    88ac:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    88ae:	0030      	movs	r0, r6
    88b0:	f002 fe58 	bl	b564 <radio_tx_chain_delay_get>
    88b4:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    88b6:	f002 ffa3 	bl	b800 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    88ba:	f003 f809 	bl	b8d0 <radio_tmr_end_capture>
    88be:	e01d      	b.n	88fc <isr+0x100>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    88c0:	0018      	movs	r0, r3
    88c2:	f002 feb9 	bl	b638 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    88c6:	2336      	movs	r3, #54	; 0x36
    88c8:	33ff      	adds	r3, #255	; 0xff
    88ca:	5ce3      	ldrb	r3, [r4, r3]
    88cc:	34fc      	adds	r4, #252	; 0xfc
    88ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
    88d0:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    88d2:	5898      	ldr	r0, [r3, r2]
    88d4:	3008      	adds	r0, #8
    88d6:	f002 fe33 	bl	b540 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    88da:	f002 fe67 	bl	b5ac <radio_is_ready>
    88de:	1e06      	subs	r6, r0, #0
    88e0:	d1dd      	bne.n	889e <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    88e2:	0001      	movs	r1, r0
    88e4:	f002 fe42 	bl	b56c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    88e8:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    88ea:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    88ec:	0030      	movs	r0, r6
    88ee:	f002 fe39 	bl	b564 <radio_tx_chain_delay_get>
    88f2:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    88f4:	f002 ff84 	bl	b800 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    88f8:	f002 feae 	bl	b658 <radio_rssi_measure>
}
    88fc:	b015      	add	sp, #84	; 0x54
    88fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8900:	0018      	movs	r0, r3
    8902:	f002 fe99 	bl	b638 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    8906:	2336      	movs	r3, #54	; 0x36
    8908:	33ff      	adds	r3, #255	; 0xff
    890a:	5ce3      	ldrb	r3, [r4, r3]
    890c:	34fc      	adds	r4, #252	; 0xfc
    890e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8910:	009b      	lsls	r3, r3, #2
    8912:	5899      	ldr	r1, [r3, r2]
		rx_packet_set(_radio.conn_curr,	(void *)
    8914:	6960      	ldr	r0, [r4, #20]
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    8916:	3108      	adds	r1, #8
		rx_packet_set(_radio.conn_curr,	(void *)
    8918:	f7fe fb74 	bl	7004 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    891c:	f002 fe46 	bl	b5ac <radio_is_ready>
    8920:	1e06      	subs	r6, r0, #0
    8922:	d1bc      	bne.n	889e <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    8924:	0001      	movs	r1, r0
    8926:	f002 fe21 	bl	b56c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    892a:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    892c:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    892e:	0030      	movs	r0, r6
    8930:	f002 fe18 	bl	b564 <radio_tx_chain_delay_get>
    8934:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    8936:	f002 ff63 	bl	b800 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    893a:	2001      	movs	r0, #1
    893c:	f7fe fdda 	bl	74f4 <packet_tx_enqueue>
    8940:	e7dc      	b.n	88fc <isr+0x100>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    8942:	2f00      	cmp	r7, #0
    8944:	d104      	bne.n	8950 <isr+0x154>
		_radio.state = STATE_CLOSE;
    8946:	2303      	movs	r3, #3
    8948:	7423      	strb	r3, [r4, #16]
		radio_disable();
    894a:	f002 fe1d 	bl	b588 <radio_disable>
    894e:	e7d5      	b.n	88fc <isr+0x100>
	switch (_radio.role) {
    8950:	7be0      	ldrb	r0, [r4, #15]
    8952:	3801      	subs	r0, #1
    8954:	2803      	cmp	r0, #3
    8956:	d8a2      	bhi.n	889e <isr+0xa2>
    8958:	f7f7 fc2c 	bl	1b4 <__gnu_thumb1_case_uhi>
    895c:	02300004 	.word	0x02300004
    8960:	04c504c5 	.word	0x04c504c5
		if (crc_ok) {
    8964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8966:	2b00      	cmp	r3, #0
    8968:	d0ed      	beq.n	8946 <isr+0x14a>
	pdu_adv = (void *)radio_pkt_scratch_get();
    896a:	f002 fe59 	bl	b620 <radio_pkt_scratch_get>
					[_radio.advertiser.adv_data.first][0];
    896e:	0023      	movs	r3, r4
    8970:	3374      	adds	r3, #116	; 0x74
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8972:	781a      	ldrb	r2, [r3, #0]
    8974:	2327      	movs	r3, #39	; 0x27
    8976:	4353      	muls	r3, r2
    8978:	3326      	adds	r3, #38	; 0x26
    897a:	18e3      	adds	r3, r4, r3
    897c:	930c      	str	r3, [sp, #48]	; 0x30
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    897e:	230f      	movs	r3, #15
    8980:	7802      	ldrb	r2, [r0, #0]
	pdu_adv = (void *)radio_pkt_scratch_get();
    8982:	0005      	movs	r5, r0
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8984:	4013      	ands	r3, r2
    8986:	2b03      	cmp	r3, #3
    8988:	d12e      	bne.n	89e8 <isr+0x1ec>
    898a:	7843      	ldrb	r3, [r0, #1]
    898c:	2b0c      	cmp	r3, #12
    898e:	d12b      	bne.n	89e8 <isr+0x1ec>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8990:	1da3      	adds	r3, r4, #6
    8992:	7fdb      	ldrb	r3, [r3, #31]
		(devmatch_ok)) &&
    8994:	065b      	lsls	r3, r3, #25
    8996:	d501      	bpl.n	899c <isr+0x1a0>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8998:	2e00      	cmp	r6, #0
    899a:	d025      	beq.n	89e8 <isr+0x1ec>
	return (adv->tx_addr == sr->rx_addr) &&
    899c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    899e:	09d2      	lsrs	r2, r2, #7
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	065b      	lsls	r3, r3, #25
    89a4:	0fdb      	lsrs	r3, r3, #31
    89a6:	4293      	cmp	r3, r2
    89a8:	d11e      	bne.n	89e8 <isr+0x1ec>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    89aa:	0029      	movs	r1, r5
    89ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89ae:	2206      	movs	r2, #6
    89b0:	1c98      	adds	r0, r3, #2
    89b2:	3108      	adds	r1, #8
    89b4:	f7f9 f996 	bl	1ce4 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    89b8:	2800      	cmp	r0, #0
    89ba:	d115      	bne.n	89e8 <isr+0x1ec>
		_radio.state = STATE_CLOSE;
    89bc:	2303      	movs	r3, #3
    89be:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    89c0:	f002 fe42 	bl	b648 <radio_switch_complete_and_disable>
					[_radio.advertiser.scan_data.first][0]);
    89c4:	0023      	movs	r3, r4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    89c6:	2027      	movs	r0, #39	; 0x27
					[_radio.advertiser.scan_data.first][0]);
    89c8:	33c4      	adds	r3, #196	; 0xc4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    89ca:	781b      	ldrb	r3, [r3, #0]
    89cc:	4358      	muls	r0, r3
    89ce:	3076      	adds	r0, #118	; 0x76
    89d0:	1820      	adds	r0, r4, r0
    89d2:	f002 fdbd 	bl	b550 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    89d6:	f002 fde9 	bl	b5ac <radio_is_ready>
    89da:	2800      	cmp	r0, #0
    89dc:	d100      	bne.n	89e0 <isr+0x1e4>
    89de:	e78d      	b.n	88fc <isr+0x100>
    89e0:	e75d      	b.n	889e <isr+0xa2>
    89e2:	46c0      	nop			; (mov r8, r8)
    89e4:	20000298 	.word	0x20000298
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    89e8:	210f      	movs	r1, #15
    89ea:	782a      	ldrb	r2, [r5, #0]
    89ec:	400a      	ands	r2, r1
    89ee:	2a05      	cmp	r2, #5
    89f0:	d1a9      	bne.n	8946 <isr+0x14a>
    89f2:	786b      	ldrb	r3, [r5, #1]
    89f4:	2b22      	cmp	r3, #34	; 0x22
    89f6:	d1a6      	bne.n	8946 <isr+0x14a>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    89f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	400b      	ands	r3, r1
    89fe:	2b01      	cmp	r3, #1
    8a00:	d000      	beq.n	8a04 <isr+0x208>
    8a02:	e1ae      	b.n	8d62 <isr+0x566>
		       isr_adv_ci_adva_check(adv, ci) &&
    8a04:	0029      	movs	r1, r5
    8a06:	980c      	ldr	r0, [sp, #48]	; 0x30
    8a08:	f7fe fa7a 	bl	6f00 <isr_adv_ci_adva_check>
    8a0c:	2100      	movs	r1, #0
    8a0e:	4288      	cmp	r0, r1
    8a10:	d00f      	beq.n	8a32 <isr+0x236>
	return (adv->rx_addr == ci->tx_addr) &&
    8a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8a14:	781a      	ldrb	r2, [r3, #0]
    8a16:	782b      	ldrb	r3, [r5, #0]
    8a18:	09d2      	lsrs	r2, r2, #7
    8a1a:	065b      	lsls	r3, r3, #25
    8a1c:	0fdb      	lsrs	r3, r3, #31
    8a1e:	429a      	cmp	r2, r3
    8a20:	d107      	bne.n	8a32 <isr+0x236>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    8a22:	980c      	ldr	r0, [sp, #48]	; 0x30
    8a24:	1ca9      	adds	r1, r5, #2
    8a26:	2206      	movs	r2, #6
    8a28:	3008      	adds	r0, #8
    8a2a:	f7f9 f95b 	bl	1ce4 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    8a2e:	4241      	negs	r1, r0
    8a30:	4141      	adcs	r1, r0
		       isr_adv_ci_adva_check(adv, ci) &&
    8a32:	0008      	movs	r0, r1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    8a34:	2800      	cmp	r0, #0
    8a36:	d086      	beq.n	8946 <isr+0x14a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    8a38:	23bb      	movs	r3, #187	; 0xbb
    8a3a:	005b      	lsls	r3, r3, #1
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    8a3c:	5ce3      	ldrb	r3, [r4, r3]
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d008      	beq.n	8a54 <isr+0x258>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    8a42:	23ba      	movs	r3, #186	; 0xba
    8a44:	2276      	movs	r2, #118	; 0x76
    8a46:	005b      	lsls	r3, r3, #1
    8a48:	32ff      	adds	r2, #255	; 0xff
    8a4a:	5ce3      	ldrb	r3, [r4, r3]
    8a4c:	5ca2      	ldrb	r2, [r4, r2]
    8a4e:	429a      	cmp	r2, r3
    8a50:	d000      	beq.n	8a54 <isr+0x258>
    8a52:	e778      	b.n	8946 <isr+0x14a>
		   (_radio.advertiser.conn)) {
    8a54:	0026      	movs	r6, r4
    8a56:	36c8      	adds	r6, #200	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    8a58:	6833      	ldr	r3, [r6, #0]
    8a5a:	2b00      	cmp	r3, #0
    8a5c:	d100      	bne.n	8a60 <isr+0x264>
    8a5e:	e772      	b.n	8946 <isr+0x14a>
			node_rx = packet_rx_reserve_get(4);
    8a60:	2004      	movs	r0, #4
    8a62:	f7fe f805 	bl	6a70 <packet_rx_reserve_get>
    8a66:	900b      	str	r0, [sp, #44]	; 0x2c
		if (!node_rx) {
    8a68:	2800      	cmp	r0, #0
    8a6a:	d100      	bne.n	8a6e <isr+0x272>
    8a6c:	e76b      	b.n	8946 <isr+0x14a>
		_radio.state = STATE_STOP;
    8a6e:	2304      	movs	r3, #4
    8a70:	7423      	strb	r3, [r4, #16]
		radio_disable();
    8a72:	f002 fd89 	bl	b588 <radio_disable>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8a76:	2282      	movs	r2, #130	; 0x82
		_radio.advertiser.conn = NULL;
    8a78:	2300      	movs	r3, #0
		conn = _radio.advertiser.conn;
    8a7a:	6837      	ldr	r7, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8a7c:	34fc      	adds	r4, #252	; 0xfc
    8a7e:	68a1      	ldr	r1, [r4, #8]
    8a80:	0052      	lsls	r2, r2, #1
    8a82:	0038      	movs	r0, r7
		_radio.advertiser.conn = NULL;
    8a84:	6033      	str	r3, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8a86:	f7fc fac5 	bl	5014 <mem_index_get>
		memcpy(&conn->crc_init[0],
    8a8a:	0029      	movs	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8a8c:	8438      	strh	r0, [r7, #32]
		memcpy(&conn->crc_init[0],
    8a8e:	0038      	movs	r0, r7
    8a90:	2203      	movs	r2, #3
    8a92:	3112      	adds	r1, #18
    8a94:	3014      	adds	r0, #20
		memcpy(&conn->access_addr[0],
    8a96:	003e      	movs	r6, r7
		memcpy(&conn->crc_init[0],
    8a98:	f7f9 f948 	bl	1d2c <memcpy>
		memcpy(&conn->access_addr[0],
    8a9c:	0029      	movs	r1, r5
    8a9e:	3610      	adds	r6, #16
    8aa0:	2204      	movs	r2, #4
    8aa2:	310e      	adds	r1, #14
    8aa4:	0030      	movs	r0, r6
		memcpy(&conn->data_chan_map[0],
    8aa6:	003c      	movs	r4, r7
		memcpy(&conn->access_addr[0],
    8aa8:	f7f9 f940 	bl	1d2c <memcpy>
		memcpy(&conn->data_chan_map[0],
    8aac:	0029      	movs	r1, r5
    8aae:	3417      	adds	r4, #23
    8ab0:	2205      	movs	r2, #5
    8ab2:	311e      	adds	r1, #30
    8ab4:	0020      	movs	r0, r4
    8ab6:	f7f9 f939 	bl	1d2c <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    8aba:	2105      	movs	r1, #5
    8abc:	0020      	movs	r0, r4
    8abe:	f7fc fc0f 	bl	52e0 <util_ones_count_get>
		conn->data_chan_count =
    8ac2:	223f      	movs	r2, #63	; 0x3f
    8ac4:	0003      	movs	r3, r0
    8ac6:	7f78      	ldrb	r0, [r7, #29]
    8ac8:	4013      	ands	r3, r2
    8aca:	4390      	bics	r0, r2
    8acc:	4318      	orrs	r0, r3
    8ace:	7778      	strb	r0, [r7, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    8ad0:	0038      	movs	r0, r7
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    8ad2:	1d2b      	adds	r3, r5, #4
    8ad4:	7fdb      	ldrb	r3, [r3, #31]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    8ad6:	0031      	movs	r1, r6
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    8ad8:	06db      	lsls	r3, r3, #27
    8ada:	0edb      	lsrs	r3, r3, #27
    8adc:	77bb      	strb	r3, [r7, #30]
			pdu_adv->connect_ind.interval;
    8ade:	7e6b      	ldrb	r3, [r5, #25]
    8ae0:	7e2a      	ldrb	r2, [r5, #24]
    8ae2:	021b      	lsls	r3, r3, #8
    8ae4:	4313      	orrs	r3, r2
			pdu_adv->connect_ind.interval * 1250;
    8ae6:	4aa7      	ldr	r2, [pc, #668]	; (8d84 <isr+0x588>)
		conn->conn_interval =
    8ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    8aea:	435a      	muls	r2, r3
    8aec:	920e      	str	r2, [sp, #56]	; 0x38
		conn->latency = pdu_adv->connect_ind.latency;
    8aee:	7eeb      	ldrb	r3, [r5, #27]
    8af0:	7eaa      	ldrb	r2, [r5, #26]
    8af2:	021b      	lsls	r3, r3, #8
    8af4:	4313      	orrs	r3, r2
    8af6:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    8af8:	2204      	movs	r2, #4
    8afa:	3054      	adds	r0, #84	; 0x54
    8afc:	f7f9 f916 	bl	1d2c <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    8b00:	7f68      	ldrb	r0, [r5, #29]
    8b02:	7f2b      	ldrb	r3, [r5, #28]
    8b04:	0200      	lsls	r0, r0, #8
    8b06:	4303      	orrs	r3, r0
    8b08:	489f      	ldr	r0, [pc, #636]	; (8d88 <isr+0x58c>)
		radio_le_conn_cmplt->role = 0x01;
    8b0a:	2601      	movs	r6, #1
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    8b0c:	4358      	muls	r0, r3
    8b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b10:	18c0      	adds	r0, r0, r3
    8b12:	0019      	movs	r1, r3
    8b14:	3801      	subs	r0, #1
    8b16:	f7f7 fb57 	bl	1c8 <__aeabi_uidiv>
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    8b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b1c:	4a9b      	ldr	r2, [pc, #620]	; (8d8c <isr+0x590>)
    8b1e:	0019      	movs	r1, r3
		conn->supervision_reload =
    8b20:	85f8      	strh	r0, [r7, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    8b22:	1898      	adds	r0, r3, r2
    8b24:	f7f7 fb50 	bl	1c8 <__aeabi_uidiv>
		node_rx->hdr.handle = conn->handle;
    8b28:	8c3b      	ldrh	r3, [r7, #32]
    8b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    8b2c:	8678      	strh	r0, [r7, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    8b2e:	80d3      	strh	r3, [r2, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		radio_le_conn_cmplt->status = 0x00;
    8b32:	2100      	movs	r1, #0
    8b34:	001c      	movs	r4, r3
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b36:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8b38:	0020      	movs	r0, r4
		radio_le_conn_cmplt->status = 0x00;
    8b3a:	72d9      	strb	r1, [r3, #11]
		radio_le_conn_cmplt->role = 0x01;
    8b3c:	731e      	strb	r6, [r3, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b3e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8b40:	782b      	ldrb	r3, [r5, #0]
			       &pdu_adv->connect_ind.init_addr[0],
    8b42:	1ca9      	adds	r1, r5, #2
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8b44:	065b      	lsls	r3, r3, #25
    8b46:	0fdb      	lsrs	r3, r3, #31
    8b48:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8b4a:	300e      	adds	r0, #14
    8b4c:	f7f9 f8ee 	bl	1d2c <memcpy>
			pdu_adv->connect_ind.interval;
    8b50:	7e6b      	ldrb	r3, [r5, #25]
    8b52:	7e2a      	ldrb	r2, [r5, #24]
    8b54:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->interval =
    8b56:	4313      	orrs	r3, r2
    8b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8b5a:	7513      	strb	r3, [r2, #20]
    8b5c:	0a1b      	lsrs	r3, r3, #8
    8b5e:	7553      	strb	r3, [r2, #21]
			pdu_adv->connect_ind.latency;
    8b60:	7eeb      	ldrb	r3, [r5, #27]
    8b62:	7eaa      	ldrb	r2, [r5, #26]
    8b64:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->latency =
    8b66:	4313      	orrs	r3, r2
    8b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8b6a:	7593      	strb	r3, [r2, #22]
    8b6c:	0a1b      	lsrs	r3, r3, #8
    8b6e:	75d3      	strb	r3, [r2, #23]
			pdu_adv->connect_ind.timeout;
    8b70:	7f6b      	ldrb	r3, [r5, #29]
    8b72:	7f2a      	ldrb	r2, [r5, #28]
    8b74:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->timeout =
    8b76:	4313      	orrs	r3, r2
    8b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8b7a:	7613      	strb	r3, [r2, #24]
    8b7c:	0a1b      	lsrs	r3, r3, #8
    8b7e:	7653      	strb	r3, [r2, #25]
			pdu_adv->connect_ind.sca;
    8b80:	1d2b      	adds	r3, r5, #4
    8b82:	7fdb      	ldrb	r3, [r3, #31]
    8b84:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    8b86:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    8b88:	8c38      	ldrh	r0, [r7, #32]
    8b8a:	f7fe f9db 	bl	6f44 <rx_fc_lock>
		packet_rx_enqueue();
    8b8e:	f7fe faf1 	bl	7174 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    8b92:	2003      	movs	r0, #3
    8b94:	f7fd ff6c 	bl	6a70 <packet_rx_reserve_get>
    8b98:	4b7a      	ldr	r3, [pc, #488]	; (8d84 <isr+0x588>)
    8b9a:	930b      	str	r3, [sp, #44]	; 0x2c
			LL_ASSERT(node_rx);
    8b9c:	2800      	cmp	r0, #0
    8b9e:	d100      	bne.n	8ba2 <isr+0x3a6>
    8ba0:	e67d      	b.n	889e <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    8ba2:	8c3b      	ldrh	r3, [r7, #32]
			if (pdu_adv->chan_sel) {
    8ba4:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    8ba6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8ba8:	230a      	movs	r3, #10
    8baa:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    8bac:	782b      	ldrb	r3, [r5, #0]
    8bae:	4013      	ands	r3, r2
    8bb0:	d100      	bne.n	8bb4 <isr+0x3b8>
    8bb2:	e0e5      	b.n	8d80 <isr+0x584>
					((u16_t)conn->access_addr[1] << 8) |
    8bb4:	7c7b      	ldrb	r3, [r7, #17]
					conn->access_addr[0];
    8bb6:	7c3a      	ldrb	r2, [r7, #16]
					((u16_t)conn->access_addr[1] << 8) |
    8bb8:	021b      	lsls	r3, r3, #8
				u16_t aa_ls =
    8bba:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
    8bbc:	7cfa      	ldrb	r2, [r7, #19]
					 conn->access_addr[2];
    8bbe:	7cb9      	ldrb	r1, [r7, #18]
					((u16_t)conn->access_addr[3] << 8) |
    8bc0:	0212      	lsls	r2, r2, #8
				u16_t aa_ms =
    8bc2:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    8bc4:	2140      	movs	r1, #64	; 0x40
    8bc6:	7f7c      	ldrb	r4, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8bc8:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    8bca:	4321      	orrs	r1, r4
    8bcc:	7779      	strb	r1, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8bce:	83fb      	strh	r3, [r7, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8bd0:	72c6      	strb	r6, [r0, #11]
			packet_rx_enqueue();
    8bd2:	f7fe facf 	bl	7174 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    8bd6:	0039      	movs	r1, r7
    8bd8:	241c      	movs	r4, #28
    8bda:	1d2b      	adds	r3, r5, #4
    8bdc:	7fdb      	ldrb	r3, [r3, #31]
    8bde:	3138      	adds	r1, #56	; 0x38
    8be0:	780a      	ldrb	r2, [r1, #0]
    8be2:	095b      	lsrs	r3, r3, #5
    8be4:	0098      	lsls	r0, r3, #2
			(((gc_lookup_ppm[_radio.sca] +
    8be6:	4e6a      	ldr	r6, [pc, #424]	; (8d90 <isr+0x594>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    8be8:	43a2      	bics	r2, r4
    8bea:	4302      	orrs	r2, r0
    8bec:	700a      	strb	r2, [r1, #0]
			(((gc_lookup_ppm[_radio.sca] +
    8bee:	0032      	movs	r2, r6
    8bf0:	32ff      	adds	r2, #255	; 0xff
    8bf2:	7f52      	ldrb	r2, [r2, #29]
    8bf4:	4967      	ldr	r1, [pc, #412]	; (8d94 <isr+0x598>)
    8bf6:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->slave.sca]) *
    8bf8:	005b      	lsls	r3, r3, #1
			(((gc_lookup_ppm[_radio.sca] +
    8bfa:	5a50      	ldrh	r0, [r2, r1]
			   gc_lookup_ppm[conn->slave.sca]) *
    8bfc:	5a5b      	ldrh	r3, [r3, r1]
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    8bfe:	4966      	ldr	r1, [pc, #408]	; (8d98 <isr+0x59c>)
			(((gc_lookup_ppm[_radio.sca] +
    8c00:	18c0      	adds	r0, r0, r3
			   gc_lookup_ppm[conn->slave.sca]) *
    8c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_size_prepare_us = 0;
    8c04:	2400      	movs	r4, #0
			   gc_lookup_ppm[conn->slave.sca]) *
    8c06:	4358      	muls	r0, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    8c08:	4b64      	ldr	r3, [pc, #400]	; (8d9c <isr+0x5a0>)
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8c0a:	36fc      	adds	r6, #252	; 0xfc
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    8c0c:	18c0      	adds	r0, r0, r3
    8c0e:	f7f7 fadb 	bl	1c8 <__aeabi_uidiv>
			(conn_interval_us >> 1) - RADIO_TIFS;
    8c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_widening_periodic_us =
    8c14:	63f8      	str	r0, [r7, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    8c16:	085b      	lsrs	r3, r3, #1
    8c18:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    8c1a:	643b      	str	r3, [r7, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    8c1c:	7d6b      	ldrb	r3, [r5, #21]
    8c1e:	4a59      	ldr	r2, [pc, #356]	; (8d84 <isr+0x588>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8c20:	0021      	movs	r1, r4
			pdu_adv->connect_ind.win_size * 1250;
    8c22:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    8c24:	64fc      	str	r4, [r7, #76]	; 0x4c
		conn->slave.window_size_event_us =
    8c26:	653b      	str	r3, [r7, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8c28:	0020      	movs	r0, r4
    8c2a:	f002 fc9d 	bl	b568 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8c2e:	4a5c      	ldr	r2, [pc, #368]	; (8da0 <isr+0x5a4>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8c30:	900f      	str	r0, [sp, #60]	; 0x3c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8c32:	2300      	movs	r3, #0
    8c34:	1880      	adds	r0, r0, r2
    8c36:	0021      	movs	r1, r4
    8c38:	4a5a      	ldr	r2, [pc, #360]	; (8da4 <isr+0x5a8>)
    8c3a:	f7f7 fbad 	bl	398 <__aeabi_lmul>
    8c3e:	4a5a      	ldr	r2, [pc, #360]	; (8da8 <isr+0x5ac>)
    8c40:	2307      	movs	r3, #7
    8c42:	f7f7 fb89 	bl	358 <__aeabi_uldivmod>
		conn->hdr.ticks_xtal_to_start =
    8c46:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8c48:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8c4a:	0200      	lsls	r0, r0, #8
    8c4c:	0a00      	lsrs	r0, r0, #8
		conn->hdr.ticks_slot =
    8c4e:	60f8      	str	r0, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8c50:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    8c52:	603b      	str	r3, [r7, #0]
		conn->hdr.ticks_preempt_to_start =
    8c54:	60bc      	str	r4, [r7, #8]
		ticks_slot_offset =
    8c56:	920b      	str	r2, [sp, #44]	; 0x2c
    8c58:	429a      	cmp	r2, r3
    8c5a:	d200      	bcs.n	8c5e <isr+0x462>
    8c5c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_us -=
    8c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
			((u64_t)pdu_adv->connect_ind.win_offset +
    8c62:	2400      	movs	r4, #0
		conn_interval_us -=
    8c64:	1a9b      	subs	r3, r3, r2
    8c66:	930e      	str	r3, [sp, #56]	; 0x38
		conn_offset_us = radio_tmr_end_get();
    8c68:	f002 fe48 	bl	b8fc <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    8c6c:	7deb      	ldrb	r3, [r5, #23]
    8c6e:	7daa      	ldrb	r2, [r5, #22]
    8c70:	021b      	lsls	r3, r3, #8
    8c72:	4313      	orrs	r3, r2
    8c74:	001d      	movs	r5, r3
		conn_offset_us +=
    8c76:	4b43      	ldr	r3, [pc, #268]	; (8d84 <isr+0x588>)
		conn_offset_us = radio_tmr_end_get();
    8c78:	0006      	movs	r6, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8c7a:	0021      	movs	r1, r4
		conn_offset_us +=
    8c7c:	3501      	adds	r5, #1
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8c7e:	0020      	movs	r0, r4
		conn_offset_us +=
    8c80:	435d      	muls	r5, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8c82:	f002 fc6f 	bl	b564 <radio_tx_chain_delay_get>
    8c86:	3d30      	subs	r5, #48	; 0x30
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    8c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c8a:	1975      	adds	r5, r6, r5
    8c8c:	1a28      	subs	r0, r5, r0
    8c8e:	1ac3      	subs	r3, r0, r3
    8c90:	930f      	str	r3, [sp, #60]	; 0x3c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c92:	2390      	movs	r3, #144	; 0x90
    8c94:	00db      	lsls	r3, r3, #3
    8c96:	2205      	movs	r2, #5
    8c98:	9300      	str	r3, [sp, #0]
    8c9a:	0021      	movs	r1, r4
    8c9c:	4b43      	ldr	r3, [pc, #268]	; (8dac <isr+0x5b0>)
    8c9e:	0020      	movs	r0, r4
    8ca0:	f7fd f842 	bl	5d28 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    8ca4:	4942      	ldr	r1, [pc, #264]	; (8db0 <isr+0x5b4>)
    8ca6:	f7fe fd7f 	bl	77a8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8caa:	220f      	movs	r2, #15
    8cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8cae:	781b      	ldrb	r3, [r3, #0]
    8cb0:	4013      	ands	r3, r2
    8cb2:	2b01      	cmp	r3, #1
    8cb4:	d106      	bne.n	8cc4 <isr+0x4c8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8cb6:	9400      	str	r4, [sp, #0]
    8cb8:	0023      	movs	r3, r4
    8cba:	3a0c      	subs	r2, #12
    8cbc:	0021      	movs	r1, r4
    8cbe:	0020      	movs	r0, r4
    8cc0:	f7fd f832 	bl	5d28 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8cc4:	2400      	movs	r4, #0
    8cc6:	4a37      	ldr	r2, [pc, #220]	; (8da4 <isr+0x5a8>)
    8cc8:	2300      	movs	r3, #0
    8cca:	980e      	ldr	r0, [sp, #56]	; 0x38
    8ccc:	0021      	movs	r1, r4
    8cce:	f7f7 fb63 	bl	398 <__aeabi_lmul>
    8cd2:	4a35      	ldr	r2, [pc, #212]	; (8da8 <isr+0x5ac>)
    8cd4:	2307      	movs	r3, #7
    8cd6:	900c      	str	r0, [sp, #48]	; 0x30
    8cd8:	910d      	str	r1, [sp, #52]	; 0x34
    8cda:	f7f7 fb3d 	bl	358 <__aeabi_uldivmod>
		     (_radio.ticks_anchor - ticks_slot_offset),
    8cde:	4b2c      	ldr	r3, [pc, #176]	; (8d90 <isr+0x594>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ce0:	8c3e      	ldrh	r6, [r7, #32]
    8ce2:	685d      	ldr	r5, [r3, #4]
    8ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8ce6:	9706      	str	r7, [sp, #24]
    8ce8:	1aed      	subs	r5, r5, r3
    8cea:	2393      	movs	r3, #147	; 0x93
    8cec:	00db      	lsls	r3, r3, #3
    8cee:	9308      	str	r3, [sp, #32]
    8cf0:	4b30      	ldr	r3, [pc, #192]	; (8db4 <isr+0x5b8>)
    8cf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8cf4:	9307      	str	r3, [sp, #28]
    8cf6:	4b30      	ldr	r3, [pc, #192]	; (8db8 <isr+0x5bc>)
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8cf8:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8cfa:	9305      	str	r3, [sp, #20]
    8cfc:	68fb      	ldr	r3, [r7, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8cfe:	0207      	lsls	r7, r0, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8d00:	18d3      	adds	r3, r2, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8d02:	0a3f      	lsrs	r7, r7, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8d04:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8d06:	4a28      	ldr	r2, [pc, #160]	; (8da8 <isr+0x5ac>)
    8d08:	2307      	movs	r3, #7
    8d0a:	0038      	movs	r0, r7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8d0c:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8d0e:	f7f7 fb43 	bl	398 <__aeabi_lmul>
    8d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d16:	1a12      	subs	r2, r2, r0
    8d18:	418b      	sbcs	r3, r1
    8d1a:	0010      	movs	r0, r2
    8d1c:	22fa      	movs	r2, #250	; 0xfa
    8d1e:	0019      	movs	r1, r3
    8d20:	0092      	lsls	r2, r2, #2
    8d22:	2300      	movs	r3, #0
    8d24:	f7f7 fb18 	bl	358 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8d28:	4a1e      	ldr	r2, [pc, #120]	; (8da4 <isr+0x5a8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8d2a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8d2c:	2300      	movs	r3, #0
    8d2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8d30:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8d32:	9701      	str	r7, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8d34:	f7f7 fb30 	bl	398 <__aeabi_lmul>
    8d38:	2307      	movs	r3, #7
    8d3a:	4a1b      	ldr	r2, [pc, #108]	; (8da8 <isr+0x5ac>)
    8d3c:	f7f7 fb0c 	bl	358 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8d40:	002b      	movs	r3, r5
    8d42:	0200      	lsls	r0, r0, #8
    8d44:	3607      	adds	r6, #7
    8d46:	0a00      	lsrs	r0, r0, #8
    8d48:	b2f6      	uxtb	r6, r6
    8d4a:	9000      	str	r0, [sp, #0]
		ticker_status =
    8d4c:	0032      	movs	r2, r6
    8d4e:	0021      	movs	r1, r4
    8d50:	0020      	movs	r0, r4
    8d52:	f7fc ff57 	bl	5c04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8d56:	2302      	movs	r3, #2
    8d58:	4398      	bics	r0, r3
    8d5a:	42a0      	cmp	r0, r4
    8d5c:	d000      	beq.n	8d60 <isr+0x564>
    8d5e:	e59e      	b.n	889e <isr+0xa2>
    8d60:	e5cc      	b.n	88fc <isr+0x100>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    8d62:	1da3      	adds	r3, r4, #6
    8d64:	7fdb      	ldrb	r3, [r3, #31]
    8d66:	099b      	lsrs	r3, r3, #6
		(devmatch_ok)) &&
    8d68:	079b      	lsls	r3, r3, #30
    8d6a:	d502      	bpl.n	8d72 <isr+0x576>
    8d6c:	2000      	movs	r0, #0
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    8d6e:	4286      	cmp	r6, r0
    8d70:	d003      	beq.n	8d7a <isr+0x57e>
	       isr_adv_ci_adva_check(adv, ci);
    8d72:	0029      	movs	r1, r5
    8d74:	980c      	ldr	r0, [sp, #48]	; 0x30
    8d76:	f7fe f8c3 	bl	6f00 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    8d7a:	2301      	movs	r3, #1
    8d7c:	4018      	ands	r0, r3
    8d7e:	e659      	b.n	8a34 <isr+0x238>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8d80:	72c3      	strb	r3, [r0, #11]
    8d82:	e726      	b.n	8bd2 <isr+0x3d6>
    8d84:	000004e2 	.word	0x000004e2
    8d88:	00002710 	.word	0x00002710
    8d8c:	026259ff 	.word	0x026259ff
    8d90:	20000298 	.word	0x20000298
    8d94:	0000daae 	.word	0x0000daae
    8d98:	000f4240 	.word	0x000f4240
    8d9c:	000f423f 	.word	0x000f423f
    8da0:	00000452 	.word	0x00000452
    8da4:	3b9aca00 	.word	0x3b9aca00
    8da8:	1afd498d 	.word	0x1afd498d
    8dac:	000077a9 	.word	0x000077a9
    8db0:	00000481 	.word	0x00000481
    8db4:	000077d1 	.word	0x000077d1
    8db8:	00008575 	.word	0x00008575
		if (crc_ok &&
    8dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d100      	bne.n	8dc4 <isr+0x5c8>
    8dc2:	e24b      	b.n	925c <isr+0xa60>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    8dc4:	0023      	movs	r3, r4
    8dc6:	33dd      	adds	r3, #221	; 0xdd
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	06db      	lsls	r3, r3, #27
    8dcc:	0fdb      	lsrs	r3, r3, #31
    8dce:	d002      	beq.n	8dd6 <isr+0x5da>
		if (crc_ok &&
    8dd0:	2e00      	cmp	r6, #0
    8dd2:	d100      	bne.n	8dd6 <isr+0x5da>
    8dd4:	e242      	b.n	925c <isr+0xa60>
	bool dir_report = false;
    8dd6:	2100      	movs	r1, #0
    8dd8:	aa13      	add	r2, sp, #76	; 0x4c
    8dda:	7011      	strb	r1, [r2, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    8ddc:	2236      	movs	r2, #54	; 0x36
    8dde:	0021      	movs	r1, r4
    8de0:	32ff      	adds	r2, #255	; 0xff
    8de2:	31fc      	adds	r1, #252	; 0xfc
    8de4:	5ca2      	ldrb	r2, [r4, r2]
    8de6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    8de8:	0092      	lsls	r2, r2, #2
    8dea:	5817      	ldr	r7, [r2, r0]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    8dec:	680a      	ldr	r2, [r1, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    8dee:	003e      	movs	r6, r7
    8df0:	3608      	adds	r6, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    8df2:	2a00      	cmp	r2, #0
    8df4:	d100      	bne.n	8df8 <isr+0x5fc>
    8df6:	e1bf      	b.n	9178 <isr+0x97c>
    8df8:	22bb      	movs	r2, #187	; 0xbb
    8dfa:	0052      	lsls	r2, r2, #1
    8dfc:	5ca2      	ldrb	r2, [r4, r2]
    8dfe:	2a00      	cmp	r2, #0
    8e00:	d008      	beq.n	8e14 <isr+0x618>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8e02:	22ba      	movs	r2, #186	; 0xba
    8e04:	2176      	movs	r1, #118	; 0x76
    8e06:	0052      	lsls	r2, r2, #1
    8e08:	31ff      	adds	r1, #255	; 0xff
    8e0a:	5ca2      	ldrb	r2, [r4, r2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    8e0c:	5c61      	ldrb	r1, [r4, r1]
    8e0e:	4291      	cmp	r1, r2
    8e10:	d000      	beq.n	8e14 <isr+0x618>
    8e12:	e1b1      	b.n	9178 <isr+0x97c>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    8e14:	2b00      	cmp	r3, #0
    8e16:	d100      	bne.n	8e1a <isr+0x61e>
    8e18:	e19a      	b.n	9150 <isr+0x954>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8e1a:	220f      	movs	r2, #15
    8e1c:	7a3b      	ldrb	r3, [r7, #8]
    8e1e:	4013      	ands	r3, r2
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    8e20:	d000      	beq.n	8e24 <isr+0x628>
    8e22:	e1fb      	b.n	921c <isr+0xa20>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    8e24:	f002 fd6a 	bl	b8fc <radio_tmr_end_get>
    8e28:	4bbb      	ldr	r3, [pc, #748]	; (9118 <isr+0x91c>)
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8e2a:	4abc      	ldr	r2, [pc, #752]	; (911c <isr+0x920>)
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    8e2c:	18c3      	adds	r3, r0, r3
    8e2e:	930b      	str	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8e30:	0023      	movs	r3, r4
    8e32:	33d8      	adds	r3, #216	; 0xd8
    8e34:	6818      	ldr	r0, [r3, #0]
    8e36:	2100      	movs	r1, #0
    8e38:	2307      	movs	r3, #7
    8e3a:	f7f7 faad 	bl	398 <__aeabi_lmul>
    8e3e:	2300      	movs	r3, #0
    8e40:	4ab7      	ldr	r2, [pc, #732]	; (9120 <isr+0x924>)
    8e42:	f7f7 fa89 	bl	358 <__aeabi_uldivmod>
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    8e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8e48:	382d      	subs	r0, #45	; 0x2d
    8e4a:	38ff      	subs	r0, #255	; 0xff
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    8e4c:	4283      	cmp	r3, r0
    8e4e:	d300      	bcc.n	8e52 <isr+0x656>
    8e50:	e192      	b.n	9178 <isr+0x97c>
			node_rx = packet_rx_reserve_get(4);
    8e52:	2004      	movs	r0, #4
    8e54:	f7fd fe0c 	bl	6a70 <packet_rx_reserve_get>
    8e58:	900b      	str	r0, [sp, #44]	; 0x2c
		if (node_rx == 0) {
    8e5a:	2800      	cmp	r0, #0
    8e5c:	d100      	bne.n	8e60 <isr+0x664>
    8e5e:	e1fd      	b.n	925c <isr+0xa60>
		_radio.state = STATE_STOP;
    8e60:	2304      	movs	r3, #4
    8e62:	7423      	strb	r3, [r4, #16]
		conn = _radio.scanner.conn;
    8e64:	0023      	movs	r3, r4
		_radio.scanner.conn = NULL;
    8e66:	2200      	movs	r2, #0
		conn = _radio.scanner.conn;
    8e68:	33fc      	adds	r3, #252	; 0xfc
    8e6a:	681d      	ldr	r5, [r3, #0]
		_radio.scanner.conn = NULL;
    8e6c:	601a      	str	r2, [r3, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8e6e:	f002 fbd7 	bl	b620 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    8e72:	220f      	movs	r2, #15
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8e74:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    8e76:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8e78:	0006      	movs	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    8e7a:	4393      	bics	r3, r2
			pdu_adv_tx->chan_sel = 1;
    8e7c:	3216      	adds	r2, #22
    8e7e:	4313      	orrs	r3, r2
    8e80:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8e82:	7a3b      	ldrb	r3, [r7, #8]
    8e84:	7802      	ldrb	r2, [r0, #0]
    8e86:	065b      	lsls	r3, r3, #25
    8e88:	0fdb      	lsrs	r3, r3, #31
    8e8a:	400a      	ands	r2, r1
    8e8c:	01db      	lsls	r3, r3, #7
    8e8e:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    8e90:	2222      	movs	r2, #34	; 0x22
    8e92:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8e94:	0022      	movs	r2, r4
    8e96:	3140      	adds	r1, #64	; 0x40
    8e98:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8e9a:	0021      	movs	r1, r4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8e9c:	32dd      	adds	r2, #221	; 0xdd
    8e9e:	7812      	ldrb	r2, [r2, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8ea0:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8ea2:	09d2      	lsrs	r2, r2, #7
    8ea4:	0192      	lsls	r2, r2, #6
    8ea6:	4313      	orrs	r3, r2
    8ea8:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8eaa:	2206      	movs	r2, #6
    8eac:	3002      	adds	r0, #2
    8eae:	f7f8 ff3d 	bl	1d2c <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    8eb2:	0033      	movs	r3, r6
    8eb4:	0039      	movs	r1, r7
    8eb6:	3308      	adds	r3, #8
    8eb8:	0018      	movs	r0, r3
    8eba:	2206      	movs	r2, #6
    8ebc:	310a      	adds	r1, #10
    8ebe:	930e      	str	r3, [sp, #56]	; 0x38
    8ec0:	f7f8 ff34 	bl	1d2c <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
    8ec4:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.
    8ec6:	0030      	movs	r0, r6
		       access_addr[0], &conn->access_addr[0], 4);
    8ec8:	3110      	adds	r1, #16
		memcpy(&pdu_adv_tx->connect_ind.
    8eca:	2204      	movs	r2, #4
    8ecc:	300e      	adds	r0, #14
    8ece:	f7f8 ff2d 	bl	1d2c <memcpy>
		       &conn->crc_init[0], 3);
    8ed2:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    8ed4:	0030      	movs	r0, r6
		       &conn->crc_init[0], 3);
    8ed6:	3114      	adds	r1, #20
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    8ed8:	2203      	movs	r2, #3
    8eda:	3012      	adds	r0, #18
    8edc:	f7f8 ff26 	bl	1d2c <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    8ee0:	2301      	movs	r3, #1
    8ee2:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    8ee4:	0023      	movs	r3, r4
    8ee6:	33f0      	adds	r3, #240	; 0xf0
    8ee8:	881b      	ldrh	r3, [r3, #0]
		conn_interval_us =
    8eea:	4a8e      	ldr	r2, [pc, #568]	; (9124 <isr+0x928>)
    8eec:	435a      	muls	r2, r3
    8eee:	920f      	str	r2, [sp, #60]	; 0x3c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    8ef0:	f002 fd04 	bl	b8fc <radio_tmr_end_get>
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    8ef4:	4b8c      	ldr	r3, [pc, #560]	; (9128 <isr+0x92c>)
		if (!_radio.remainder_anchor ||
    8ef6:	68a2      	ldr	r2, [r4, #8]
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    8ef8:	18c3      	adds	r3, r0, r3
		if (!_radio.remainder_anchor ||
    8efa:	2a00      	cmp	r2, #0
    8efc:	dd02      	ble.n	8f04 <isr+0x708>
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    8efe:	23db      	movs	r3, #219	; 0xdb
    8f00:	00db      	lsls	r3, r3, #3
    8f02:	18c3      	adds	r3, r0, r3
		if (_radio.scanner.win_offset_us == 0) {
    8f04:	4a89      	ldr	r2, [pc, #548]	; (912c <isr+0x930>)
    8f06:	32fc      	adds	r2, #252	; 0xfc
    8f08:	6854      	ldr	r4, [r2, #4]
    8f0a:	2c00      	cmp	r4, #0
    8f0c:	d000      	beq.n	8f10 <isr+0x714>
    8f0e:	e190      	b.n	9232 <isr+0xa36>
			pdu_adv_tx->connect_ind.win_offset = 0;
    8f10:	75b4      	strb	r4, [r6, #22]
    8f12:	75f4      	strb	r4, [r6, #23]
    8f14:	001c      	movs	r4, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    8f16:	2100      	movs	r1, #0
    8f18:	0008      	movs	r0, r1
    8f1a:	f002 fb21 	bl	b560 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    8f1e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    8f20:	1a24      	subs	r4, r4, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    8f22:	0008      	movs	r0, r1
    8f24:	f002 fb1e 	bl	b564 <radio_tx_chain_delay_get>
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8f28:	0029      	movs	r1, r5
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    8f2a:	1a24      	subs	r4, r4, r0
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8f2c:	0030      	movs	r0, r6
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    8f2e:	341e      	adds	r4, #30
		pdu_adv_tx->connect_ind.interval =
    8f30:	4b7f      	ldr	r3, [pc, #508]	; (9130 <isr+0x934>)
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    8f32:	9410      	str	r4, [sp, #64]	; 0x40
		pdu_adv_tx->connect_ind.interval =
    8f34:	781b      	ldrb	r3, [r3, #0]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8f36:	2205      	movs	r2, #5
		pdu_adv_tx->connect_ind.interval =
    8f38:	7633      	strb	r3, [r6, #24]
    8f3a:	4b7d      	ldr	r3, [pc, #500]	; (9130 <isr+0x934>)
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8f3c:	3117      	adds	r1, #23
		pdu_adv_tx->connect_ind.interval =
    8f3e:	785b      	ldrb	r3, [r3, #1]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8f40:	301e      	adds	r0, #30
		pdu_adv_tx->connect_ind.interval =
    8f42:	7673      	strb	r3, [r6, #25]
		pdu_adv_tx->connect_ind.latency =
    8f44:	4b7b      	ldr	r3, [pc, #492]	; (9134 <isr+0x938>)
			_radio.scanner.conn_interval;
    8f46:	4c79      	ldr	r4, [pc, #484]	; (912c <isr+0x930>)
		pdu_adv_tx->connect_ind.latency =
    8f48:	781b      	ldrb	r3, [r3, #0]
    8f4a:	76b3      	strb	r3, [r6, #26]
    8f4c:	4b79      	ldr	r3, [pc, #484]	; (9134 <isr+0x938>)
    8f4e:	785b      	ldrb	r3, [r3, #1]
    8f50:	76f3      	strb	r3, [r6, #27]
		pdu_adv_tx->connect_ind.timeout =
    8f52:	4b79      	ldr	r3, [pc, #484]	; (9138 <isr+0x93c>)
    8f54:	781b      	ldrb	r3, [r3, #0]
    8f56:	7733      	strb	r3, [r6, #28]
    8f58:	4b77      	ldr	r3, [pc, #476]	; (9138 <isr+0x93c>)
    8f5a:	785b      	ldrb	r3, [r3, #1]
    8f5c:	7773      	strb	r3, [r6, #29]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8f5e:	f7f8 fee5 	bl	1d2c <memcpy>
		pdu_adv_tx->connect_ind.hop =
    8f62:	211f      	movs	r1, #31
    8f64:	1d33      	adds	r3, r6, #4
    8f66:	9311      	str	r3, [sp, #68]	; 0x44
    8f68:	1d32      	adds	r2, r6, #4
    8f6a:	7fab      	ldrb	r3, [r5, #30]
    8f6c:	7fd2      	ldrb	r2, [r2, #31]
    8f6e:	400b      	ands	r3, r1
    8f70:	438a      	bics	r2, r1
    8f72:	431a      	orrs	r2, r3
    8f74:	1d33      	adds	r3, r6, #4
    8f76:	77da      	strb	r2, [r3, #31]
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    8f78:	0023      	movs	r3, r4
    8f7a:	33ff      	adds	r3, #255	; 0xff
    8f7c:	7f5a      	ldrb	r2, [r3, #29]
    8f7e:	1d33      	adds	r3, r6, #4
    8f80:	7fdb      	ldrb	r3, [r3, #31]
    8f82:	0152      	lsls	r2, r2, #5
    8f84:	400b      	ands	r3, r1
    8f86:	4313      	orrs	r3, r2
    8f88:	1d32      	adds	r2, r6, #4
    8f8a:	77d3      	strb	r3, [r2, #31]
		radio_switch_complete_and_disable();
    8f8c:	f002 fb5c 	bl	b648 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    8f90:	0030      	movs	r0, r6
    8f92:	f002 fadd 	bl	b550 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    8f96:	f002 fb09 	bl	b5ac <radio_is_ready>
    8f9a:	900c      	str	r0, [sp, #48]	; 0x30
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d000      	beq.n	8fa2 <isr+0x7a6>
    8fa0:	e47d      	b.n	889e <isr+0xa2>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8fa2:	2282      	movs	r2, #130	; 0x82
    8fa4:	34fc      	adds	r4, #252	; 0xfc
    8fa6:	68a1      	ldr	r1, [r4, #8]
    8fa8:	0052      	lsls	r2, r2, #1
    8faa:	0028      	movs	r0, r5
    8fac:	f7fc f832 	bl	5014 <mem_index_get>
		node_rx->hdr.handle = conn->handle;
    8fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8fb2:	8428      	strh	r0, [r5, #32]
		radio_le_conn_cmplt->status = 0x00;
    8fb4:	4669      	mov	r1, sp
		node_rx->hdr.handle = conn->handle;
    8fb6:	80d8      	strh	r0, [r3, #6]
		radio_le_conn_cmplt->status = 0x00;
    8fb8:	2030      	movs	r0, #48	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8fba:	2206      	movs	r2, #6
		radio_le_conn_cmplt->status = 0x00;
    8fbc:	1809      	adds	r1, r1, r0
    8fbe:	7809      	ldrb	r1, [r1, #0]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8fc0:	711a      	strb	r2, [r3, #4]
		radio_le_conn_cmplt->status = 0x00;
    8fc2:	72d9      	strb	r1, [r3, #11]
    8fc4:	001c      	movs	r4, r3
		radio_le_conn_cmplt->role = 0x00;
    8fc6:	466b      	mov	r3, sp
    8fc8:	181b      	adds	r3, r3, r0
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8fca:	0020      	movs	r0, r4
		radio_le_conn_cmplt->role = 0x00;
    8fcc:	781b      	ldrb	r3, [r3, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8fce:	990e      	ldr	r1, [sp, #56]	; 0x38
		radio_le_conn_cmplt->role = 0x00;
    8fd0:	7323      	strb	r3, [r4, #12]
				pdu_adv_tx->rx_addr;
    8fd2:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8fd4:	300e      	adds	r0, #14
				pdu_adv_tx->rx_addr;
    8fd6:	09db      	lsrs	r3, r3, #7
			radio_le_conn_cmplt->peer_addr_type =
    8fd8:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8fda:	f7f8 fea7 	bl	1d2c <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    8fde:	4b54      	ldr	r3, [pc, #336]	; (9130 <isr+0x934>)
    8fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8fe2:	781b      	ldrb	r3, [r3, #0]
    8fe4:	7513      	strb	r3, [r2, #20]
    8fe6:	4b52      	ldr	r3, [pc, #328]	; (9130 <isr+0x934>)
    8fe8:	785b      	ldrb	r3, [r3, #1]
    8fea:	7553      	strb	r3, [r2, #21]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    8fec:	4b51      	ldr	r3, [pc, #324]	; (9134 <isr+0x938>)
    8fee:	781b      	ldrb	r3, [r3, #0]
    8ff0:	7593      	strb	r3, [r2, #22]
    8ff2:	4b50      	ldr	r3, [pc, #320]	; (9134 <isr+0x938>)
    8ff4:	785b      	ldrb	r3, [r3, #1]
    8ff6:	75d3      	strb	r3, [r2, #23]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    8ff8:	4b4f      	ldr	r3, [pc, #316]	; (9138 <isr+0x93c>)
    8ffa:	781b      	ldrb	r3, [r3, #0]
    8ffc:	7613      	strb	r3, [r2, #24]
    8ffe:	4b4e      	ldr	r3, [pc, #312]	; (9138 <isr+0x93c>)
    9000:	785b      	ldrb	r3, [r3, #1]
    9002:	7653      	strb	r3, [r2, #25]
			pdu_adv_tx->connect_ind.sca;
    9004:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9006:	7fdb      	ldrb	r3, [r3, #31]
    9008:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    900a:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    900c:	8c28      	ldrh	r0, [r5, #32]
    900e:	f7fd ff99 	bl	6f44 <rx_fc_lock>
		packet_rx_enqueue();
    9012:	f7fe f8af 	bl	7174 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    9016:	2003      	movs	r0, #3
    9018:	f7fd fd2a 	bl	6a70 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    901c:	2800      	cmp	r0, #0
    901e:	d100      	bne.n	9022 <isr+0x826>
    9020:	e43d      	b.n	889e <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    9022:	8c2b      	ldrh	r3, [r5, #32]
			if (pdu_adv_rx->chan_sel) {
    9024:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    9026:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    9028:	230a      	movs	r3, #10
    902a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    902c:	7a3b      	ldrb	r3, [r7, #8]
    902e:	4013      	ands	r3, r2
    9030:	d00e      	beq.n	9050 <isr+0x854>
					((u16_t)conn->access_addr[1] << 8) |
    9032:	7c6b      	ldrb	r3, [r5, #17]
					conn->access_addr[0];
    9034:	7c2a      	ldrb	r2, [r5, #16]
					((u16_t)conn->access_addr[1] << 8) |
    9036:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[3] << 8) |
    9038:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    903a:	4313      	orrs	r3, r2
					 conn->access_addr[2];
    903c:	7caa      	ldrb	r2, [r5, #18]
					((u16_t)conn->access_addr[3] << 8) |
    903e:	0209      	lsls	r1, r1, #8
				u16_t aa_ms =
    9040:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    9042:	2140      	movs	r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    9044:	4053      	eors	r3, r2
    9046:	83eb      	strh	r3, [r5, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    9048:	2301      	movs	r3, #1
				conn->data_chan_sel = 1;
    904a:	7f6c      	ldrb	r4, [r5, #29]
    904c:	4321      	orrs	r1, r4
    904e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x00;
    9050:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    9052:	f7fe f88f 	bl	7174 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    9056:	4b35      	ldr	r3, [pc, #212]	; (912c <isr+0x930>)
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    9058:	2100      	movs	r1, #0
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    905a:	001a      	movs	r2, r3
    905c:	32fc      	adds	r2, #252	; 0xfc
    905e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    9060:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    9062:	33f8      	adds	r3, #248	; 0xf8
    9064:	681b      	ldr	r3, [r3, #0]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    9066:	6068      	str	r0, [r5, #4]
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    9068:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    906a:	60a9      	str	r1, [r5, #8]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    906c:	60eb      	str	r3, [r5, #12]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    906e:	900b      	str	r0, [sp, #44]	; 0x2c
    9070:	4290      	cmp	r0, r2
    9072:	d200      	bcs.n	9076 <isr+0x87a>
    9074:	920b      	str	r2, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9076:	2100      	movs	r1, #0
    9078:	4b30      	ldr	r3, [pc, #192]	; (913c <isr+0x940>)
    907a:	2206      	movs	r2, #6
    907c:	9300      	str	r3, [sp, #0]
    907e:	0008      	movs	r0, r1
    9080:	4b2f      	ldr	r3, [pc, #188]	; (9140 <isr+0x944>)
    9082:	f7fc fe51 	bl	5d28 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    9086:	21c7      	movs	r1, #199	; 0xc7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9088:	2400      	movs	r4, #0
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    908a:	00c9      	lsls	r1, r1, #3
    908c:	f7fe fb78 	bl	7780 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9090:	0023      	movs	r3, r4
    9092:	2204      	movs	r2, #4
    9094:	0021      	movs	r1, r4
    9096:	9400      	str	r4, [sp, #0]
    9098:	0020      	movs	r0, r4
    909a:	f7fc fe45 	bl	5d28 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    909e:	4a20      	ldr	r2, [pc, #128]	; (9120 <isr+0x924>)
    90a0:	2300      	movs	r3, #0
    90a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    90a4:	0021      	movs	r1, r4
    90a6:	f7f7 f977 	bl	398 <__aeabi_lmul>
				     (_radio.ticks_anchor - ticks_slot_offset),
    90aa:	4b20      	ldr	r3, [pc, #128]	; (912c <isr+0x930>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    90ac:	900c      	str	r0, [sp, #48]	; 0x30
    90ae:	910d      	str	r1, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    90b0:	685f      	ldr	r7, [r3, #4]
    90b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    90b4:	8c2e      	ldrh	r6, [r5, #32]
    90b6:	1aff      	subs	r7, r7, r3
		ticker_status =
    90b8:	4b22      	ldr	r3, [pc, #136]	; (9144 <isr+0x948>)
    90ba:	9506      	str	r5, [sp, #24]
    90bc:	9308      	str	r3, [sp, #32]
    90be:	4b22      	ldr	r3, [pc, #136]	; (9148 <isr+0x94c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    90c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_status =
    90c2:	9307      	str	r3, [sp, #28]
    90c4:	4b21      	ldr	r3, [pc, #132]	; (914c <isr+0x950>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    90c6:	3607      	adds	r6, #7
		ticker_status =
    90c8:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    90ca:	68eb      	ldr	r3, [r5, #12]
		ticker_status =
    90cc:	9403      	str	r4, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    90ce:	18d5      	adds	r5, r2, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    90d0:	4a12      	ldr	r2, [pc, #72]	; (911c <isr+0x920>)
    90d2:	2307      	movs	r3, #7
		ticker_status =
    90d4:	9504      	str	r5, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    90d6:	f7f7 f93f 	bl	358 <__aeabi_uldivmod>
    90da:	0010      	movs	r0, r2
    90dc:	22fa      	movs	r2, #250	; 0xfa
    90de:	0019      	movs	r1, r3
    90e0:	0092      	lsls	r2, r2, #2
    90e2:	2300      	movs	r3, #0
    90e4:	f7f7 f938 	bl	358 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    90e8:	4a0c      	ldr	r2, [pc, #48]	; (911c <isr+0x920>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    90ea:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    90ec:	2307      	movs	r3, #7
    90ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    90f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    90f2:	f7f7 f931 	bl	358 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    90f6:	4a0a      	ldr	r2, [pc, #40]	; (9120 <isr+0x924>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    90f8:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    90fa:	2300      	movs	r3, #0
    90fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    90fe:	0021      	movs	r1, r4
    9100:	f7f7 f94a 	bl	398 <__aeabi_lmul>
    9104:	2307      	movs	r3, #7
    9106:	4a05      	ldr	r2, [pc, #20]	; (911c <isr+0x920>)
    9108:	f7f7 f926 	bl	358 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    910c:	0200      	lsls	r0, r0, #8
    910e:	0a00      	lsrs	r0, r0, #8
		ticker_status =
    9110:	b2f6      	uxtb	r6, r6
    9112:	9000      	str	r0, [sp, #0]
    9114:	003b      	movs	r3, r7
    9116:	e619      	b.n	8d4c <isr+0x550>
    9118:	00000216 	.word	0x00000216
    911c:	1afd498d 	.word	0x1afd498d
    9120:	3b9aca00 	.word	0x3b9aca00
    9124:	000004e2 	.word	0x000004e2
    9128:	000006ba 	.word	0x000006ba
    912c:	20000298 	.word	0x20000298
    9130:	20000388 	.word	0x20000388
    9134:	2000038a 	.word	0x2000038a
    9138:	2000038c 	.word	0x2000038c
    913c:	00000637 	.word	0x00000637
    9140:	00007781 	.word	0x00007781
    9144:	0000064f 	.word	0x0000064f
    9148:	000077d1 	.word	0x000077d1
    914c:	0000856d 	.word	0x0000856d
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    9150:	0023      	movs	r3, r4
    9152:	33dd      	adds	r3, #221	; 0xdd
    9154:	781a      	ldrb	r2, [r3, #0]
    9156:	7a3b      	ldrb	r3, [r7, #8]
    9158:	0652      	lsls	r2, r2, #25
    915a:	065b      	lsls	r3, r3, #25
    915c:	0fd2      	lsrs	r2, r2, #31
    915e:	0fdb      	lsrs	r3, r3, #31
    9160:	429a      	cmp	r2, r3
    9162:	d109      	bne.n	9178 <isr+0x97c>
		(memcmp(&_radio.scanner.adv_addr[0],
    9164:	0020      	movs	r0, r4
    9166:	0039      	movs	r1, r7
    9168:	30e4      	adds	r0, #228	; 0xe4
    916a:	2206      	movs	r2, #6
    916c:	310a      	adds	r1, #10
    916e:	f7f8 fdb9 	bl	1ce4 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    9172:	2800      	cmp	r0, #0
    9174:	d100      	bne.n	9178 <isr+0x97c>
    9176:	e650      	b.n	8e1a <isr+0x61e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    9178:	220f      	movs	r2, #15
    917a:	7a3b      	ldrb	r3, [r7, #8]
    917c:	4013      	ands	r3, r2
    917e:	d001      	beq.n	9184 <isr+0x988>
    9180:	2b06      	cmp	r3, #6
    9182:	d177      	bne.n	9274 <isr+0xa78>
		 (_radio.scanner.type != 0) &&
    9184:	4ac8      	ldr	r2, [pc, #800]	; (94a8 <isr+0xcac>)
    9186:	4cc9      	ldr	r4, [pc, #804]	; (94ac <isr+0xcb0>)
    9188:	7812      	ldrb	r2, [r2, #0]
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    918a:	0712      	lsls	r2, r2, #28
    918c:	d561      	bpl.n	9252 <isr+0xa56>
		 (_radio.scanner.conn == 0)) {
    918e:	0022      	movs	r2, r4
    9190:	32fc      	adds	r2, #252	; 0xfc
		 (_radio.scanner.type != 0) &&
    9192:	6812      	ldr	r2, [r2, #0]
    9194:	2a00      	cmp	r2, #0
    9196:	d15c      	bne.n	9252 <isr+0xa56>
		err = isr_rx_scan_report(rssi_ready,
    9198:	0028      	movs	r0, r5
    919a:	f7fe fb1f 	bl	77dc <isr_rx_scan_report.isra.37>
    919e:	1e06      	subs	r6, r0, #0
		if (err) {
    91a0:	d15c      	bne.n	925c <isr+0xa60>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    91a2:	f002 fa3d 	bl	b620 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    91a6:	220f      	movs	r2, #15
    91a8:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    91aa:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    91ac:	4393      	bics	r3, r2
    91ae:	001a      	movs	r2, r3
    91b0:	2303      	movs	r3, #3
    91b2:	4313      	orrs	r3, r2
    91b4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    91b6:	7a3b      	ldrb	r3, [r7, #8]
    91b8:	7802      	ldrb	r2, [r0, #0]
    91ba:	065b      	lsls	r3, r3, #25
    91bc:	0fdb      	lsrs	r3, r3, #31
    91be:	400a      	ands	r2, r1
    91c0:	01db      	lsls	r3, r3, #7
    91c2:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    91c4:	220c      	movs	r2, #12
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    91c6:	3140      	adds	r1, #64	; 0x40
    91c8:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    91ca:	0021      	movs	r1, r4
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    91cc:	0005      	movs	r5, r0
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    91ce:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    91d0:	4ab5      	ldr	r2, [pc, #724]	; (94a8 <isr+0xcac>)
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    91d2:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    91d4:	7812      	ldrb	r2, [r2, #0]
    91d6:	09d2      	lsrs	r2, r2, #7
    91d8:	0192      	lsls	r2, r2, #6
    91da:	4313      	orrs	r3, r2
    91dc:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    91de:	2206      	movs	r2, #6
    91e0:	3002      	adds	r0, #2
    91e2:	f7f8 fda3 	bl	1d2c <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    91e6:	0039      	movs	r1, r7
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    91e8:	0028      	movs	r0, r5
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    91ea:	310a      	adds	r1, #10
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    91ec:	2206      	movs	r2, #6
    91ee:	3008      	adds	r0, #8
    91f0:	f7f8 fd9c 	bl	1d2c <memcpy>
		_radio.scanner.state = 1;
    91f4:	0021      	movs	r1, r4
    91f6:	2202      	movs	r2, #2
    91f8:	31dc      	adds	r1, #220	; 0xdc
    91fa:	780b      	ldrb	r3, [r1, #0]
		radio_tmr_tifs_set(RADIO_TIFS);
    91fc:	2096      	movs	r0, #150	; 0x96
		_radio.scanner.state = 1;
    91fe:	4313      	orrs	r3, r2
    9200:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    9202:	7422      	strb	r2, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    9204:	f002 faa2 	bl	b74c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    9208:	0030      	movs	r0, r6
    920a:	f002 fa0d 	bl	b628 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    920e:	0028      	movs	r0, r5
    9210:	f002 f99e 	bl	b550 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    9214:	f002 fb5c 	bl	b8d0 <radio_tmr_end_capture>
    9218:	f7ff fbdd 	bl	89d6 <isr+0x1da>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    921c:	2b01      	cmp	r3, #1
    921e:	d1af      	bne.n	9180 <isr+0x984>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    9220:	2100      	movs	r1, #0
    9222:	0030      	movs	r0, r6
    9224:	f7fd ff2e 	bl	7084 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    9228:	2800      	cmp	r0, #0
    922a:	d0a5      	beq.n	9178 <isr+0x97c>
    922c:	e5fa      	b.n	8e24 <isr+0x628>
				conn_space_us += conn_interval_us;
    922e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9230:	18a4      	adds	r4, r4, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    9232:	2c00      	cmp	r4, #0
    9234:	dbfb      	blt.n	922e <isr+0xa32>
    9236:	429c      	cmp	r4, r3
    9238:	d3f9      	bcc.n	922e <isr+0xa32>
				(conn_space_us - conn_offset_us) / 1250;
    923a:	1ae0      	subs	r0, r4, r3
    923c:	499c      	ldr	r1, [pc, #624]	; (94b0 <isr+0xcb4>)
    923e:	f7f6 ffc3 	bl	1c8 <__aeabi_uidiv>
			pdu_adv_tx->connect_ind.win_size++;
    9242:	7d73      	ldrb	r3, [r6, #21]
			pdu_adv_tx->connect_ind.win_offset =
    9244:	b280      	uxth	r0, r0
    9246:	75b0      	strb	r0, [r6, #22]
			pdu_adv_tx->connect_ind.win_size++;
    9248:	3301      	adds	r3, #1
			pdu_adv_tx->connect_ind.win_offset =
    924a:	0a00      	lsrs	r0, r0, #8
    924c:	75f0      	strb	r0, [r6, #23]
			pdu_adv_tx->connect_ind.win_size++;
    924e:	7573      	strb	r3, [r6, #21]
    9250:	e661      	b.n	8f16 <isr+0x71a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    9252:	2b00      	cmp	r3, #0
    9254:	d10e      	bne.n	9274 <isr+0xa78>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    9256:	7a7b      	ldrb	r3, [r7, #9]
    9258:	2b00      	cmp	r3, #0
    925a:	d13b      	bne.n	92d4 <isr+0xad8>
			_radio.state = STATE_CLOSE;
    925c:	2303      	movs	r3, #3
    925e:	4c93      	ldr	r4, [pc, #588]	; (94ac <isr+0xcb0>)
    9260:	7423      	strb	r3, [r4, #16]
			radio_disable();
    9262:	f002 f991 	bl	b588 <radio_disable>
			_radio.scanner.state = 0;
    9266:	2202      	movs	r2, #2
    9268:	34dc      	adds	r4, #220	; 0xdc
    926a:	7823      	ldrb	r3, [r4, #0]
    926c:	4393      	bics	r3, r2
    926e:	7023      	strb	r3, [r4, #0]
    9270:	f7ff fb44 	bl	88fc <isr+0x100>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    9274:	2b01      	cmp	r3, #1
    9276:	d00e      	beq.n	9296 <isr+0xa9a>
					&dir_report))) ||
    9278:	230b      	movs	r3, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    927a:	7a3a      	ldrb	r2, [r7, #8]
					&dir_report))) ||
    927c:	4013      	ands	r3, r2
    927e:	2b02      	cmp	r3, #2
    9280:	d0e9      	beq.n	9256 <isr+0xa5a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    9282:	230f      	movs	r3, #15
    9284:	401a      	ands	r2, r3
    9286:	4b89      	ldr	r3, [pc, #548]	; (94ac <isr+0xcb0>)
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    9288:	2a07      	cmp	r2, #7
    928a:	d10b      	bne.n	92a4 <isr+0xaa8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    928c:	33dd      	adds	r3, #221	; 0xdd
    928e:	781b      	ldrb	r3, [r3, #0]
    9290:	4213      	tst	r3, r2
    9292:	d1e0      	bne.n	9256 <isr+0xa5a>
    9294:	e7e2      	b.n	925c <isr+0xa60>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    9296:	a913      	add	r1, sp, #76	; 0x4c
    9298:	0030      	movs	r0, r6
    929a:	f7fd fef3 	bl	7084 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    929e:	2800      	cmp	r0, #0
    92a0:	d1d9      	bne.n	9256 <isr+0xa5a>
    92a2:	e7e9      	b.n	9278 <isr+0xa7c>
		   (_radio.scanner.phy)) ||
    92a4:	2a04      	cmp	r2, #4
    92a6:	d1d9      	bne.n	925c <isr+0xa60>
		   (_radio.scanner.state != 0) &&
    92a8:	33dc      	adds	r3, #220	; 0xdc
    92aa:	781b      	ldrb	r3, [r3, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    92ac:	079b      	lsls	r3, r3, #30
    92ae:	d5d5      	bpl.n	925c <isr+0xa60>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    92b0:	f002 f9b6 	bl	b620 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    92b4:	7a3b      	ldrb	r3, [r7, #8]
    92b6:	7802      	ldrb	r2, [r0, #0]
    92b8:	065b      	lsls	r3, r3, #25
    92ba:	09d2      	lsrs	r2, r2, #7
    92bc:	0fdb      	lsrs	r3, r3, #31
    92be:	429a      	cmp	r2, r3
    92c0:	d1cc      	bne.n	925c <isr+0xa60>
		(memcmp(&sreq->scan_req.adv_addr[0],
    92c2:	0039      	movs	r1, r7
    92c4:	3008      	adds	r0, #8
    92c6:	2206      	movs	r2, #6
    92c8:	310a      	adds	r1, #10
    92ca:	f7f8 fd0b 	bl	1ce4 <memcmp>
		   (_radio.scanner.state != 0) &&
    92ce:	2800      	cmp	r0, #0
    92d0:	d0c1      	beq.n	9256 <isr+0xa5a>
    92d2:	e7c3      	b.n	925c <isr+0xa60>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    92d4:	4b75      	ldr	r3, [pc, #468]	; (94ac <isr+0xcb0>)
    92d6:	33fc      	adds	r3, #252	; 0xfc
    92d8:	681b      	ldr	r3, [r3, #0]
    92da:	2b00      	cmp	r3, #0
    92dc:	d1be      	bne.n	925c <isr+0xa60>
		err = isr_rx_scan_report(rssi_ready,
    92de:	0028      	movs	r0, r5
    92e0:	f7fe fa7c 	bl	77dc <isr_rx_scan_report.isra.37>
    92e4:	e7ba      	b.n	925c <isr+0xa60>
	_radio.packet_counter++;
    92e6:	0022      	movs	r2, r4
    92e8:	32ff      	adds	r2, #255	; 0xff
    92ea:	7d53      	ldrb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    92ec:	0020      	movs	r0, r4
	_radio.packet_counter++;
    92ee:	3301      	adds	r3, #1
    92f0:	7553      	strb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    92f2:	2336      	movs	r3, #54	; 0x36
    92f4:	33ff      	adds	r3, #255	; 0xff
    92f6:	5ce3      	ldrb	r3, [r4, r3]
    92f8:	30fc      	adds	r0, #252	; 0xfc
    92fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
    92fc:	009b      	lsls	r3, r3, #2
    92fe:	585f      	ldr	r7, [r3, r1]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    9300:	2101      	movs	r1, #1
	if (crc_ok) {
    9302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    9304:	7139      	strb	r1, [r7, #4]
	if (crc_ok) {
    9306:	2b00      	cmp	r3, #0
    9308:	d100      	bne.n	930c <isr+0xb10>
    930a:	e3bc      	b.n	9a86 <isr+0x128a>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    930c:	6943      	ldr	r3, [r0, #20]
    930e:	7a3d      	ldrb	r5, [r7, #8]
    9310:	0018      	movs	r0, r3
    9312:	30a8      	adds	r0, #168	; 0xa8
    9314:	7806      	ldrb	r6, [r0, #0]
    9316:	076d      	lsls	r5, r5, #29
    9318:	07f2      	lsls	r2, r6, #31
    931a:	0fd2      	lsrs	r2, r2, #31
    931c:	0fed      	lsrs	r5, r5, #31
    931e:	4295      	cmp	r5, r2
    9320:	d100      	bne.n	9324 <isr+0xb28>
    9322:	e0ca      	b.n	94ba <isr+0xcbe>
		_radio.conn_curr->sn++;
    9324:	1852      	adds	r2, r2, r1
    9326:	400a      	ands	r2, r1
    9328:	0015      	movs	r5, r2
    932a:	0032      	movs	r2, r6
    932c:	438a      	bics	r2, r1
    932e:	432a      	orrs	r2, r5
    9330:	7002      	strb	r2, [r0, #0]
		if (_radio.role == ROLE_SLAVE) {
    9332:	7be2      	ldrb	r2, [r4, #15]
    9334:	2a03      	cmp	r2, #3
    9336:	d104      	bne.n	9342 <isr+0xb46>
			_radio.conn_curr->slave.latency_enabled = 1;
    9338:	001a      	movs	r2, r3
    933a:	3238      	adds	r2, #56	; 0x38
    933c:	7814      	ldrb	r4, [r2, #0]
    933e:	4321      	orrs	r1, r4
    9340:	7011      	strb	r1, [r2, #0]
		if (_radio.conn_curr->empty == 0) {
    9342:	7802      	ldrb	r2, [r0, #0]
    9344:	b251      	sxtb	r1, r2
    9346:	2900      	cmp	r1, #0
    9348:	da00      	bge.n	934c <isr+0xb50>
    934a:	e0b3      	b.n	94b4 <isr+0xcb8>
			node_tx = _radio.conn_curr->pkt_tx_head;
    934c:	0019      	movs	r1, r3
    934e:	31ec      	adds	r1, #236	; 0xec
    9350:	6809      	ldr	r1, [r1, #0]
    9352:	910b      	str	r1, [sp, #44]	; 0x2c
			pdu_data_tx = (void *)(node_tx->pdu_data +
    9354:	1d0d      	adds	r5, r1, #4
				_radio.conn_curr->packet_tx_head_offset);
    9356:	0019      	movs	r1, r3
    9358:	31ff      	adds	r1, #255	; 0xff
    935a:	7889      	ldrb	r1, [r1, #2]
			pdu_data_tx = (void *)(node_tx->pdu_data +
    935c:	1869      	adds	r1, r5, r1
    935e:	910c      	str	r1, [sp, #48]	; 0x30
			pdu_data_tx_len = pdu_data_tx->len;
    9360:	784c      	ldrb	r4, [r1, #1]
			if (pdu_data_tx_len != 0) {
    9362:	2c00      	cmp	r4, #0
    9364:	d101      	bne.n	936a <isr+0xb6e>
	u8_t terminate = 0;
    9366:	2600      	movs	r6, #0
    9368:	e03a      	b.n	93e0 <isr+0xbe4>
				if (_radio.conn_curr->enc_tx) {
    936a:	0692      	lsls	r2, r2, #26
    936c:	d51a      	bpl.n	93a4 <isr+0xba8>
					_radio.conn_curr->ccm_tx.counter++;
    936e:	001a      	movs	r2, r3
    9370:	0019      	movs	r1, r3
    9372:	32dc      	adds	r2, #220	; 0xdc
    9374:	31da      	adds	r1, #218	; 0xda
    9376:	8812      	ldrh	r2, [r2, #0]
    9378:	8808      	ldrh	r0, [r1, #0]
    937a:	0412      	lsls	r2, r2, #16
    937c:	4302      	orrs	r2, r0
    937e:	0015      	movs	r5, r2
    9380:	001a      	movs	r2, r3
    9382:	33e0      	adds	r3, #224	; 0xe0
    9384:	881b      	ldrh	r3, [r3, #0]
    9386:	32de      	adds	r2, #222	; 0xde
    9388:	8812      	ldrh	r2, [r2, #0]
    938a:	041b      	lsls	r3, r3, #16
    938c:	4313      	orrs	r3, r2
    938e:	001e      	movs	r6, r3
    9390:	2201      	movs	r2, #1
    9392:	2300      	movs	r3, #0
    9394:	18ad      	adds	r5, r5, r2
    9396:	415e      	adcs	r6, r3
    9398:	0c2a      	lsrs	r2, r5, #16
    939a:	0c33      	lsrs	r3, r6, #16
    939c:	800d      	strh	r5, [r1, #0]
    939e:	804a      	strh	r2, [r1, #2]
    93a0:	808e      	strh	r6, [r1, #4]
    93a2:	80cb      	strh	r3, [r1, #6]
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    93a4:	2203      	movs	r2, #3
    93a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    93a8:	781b      	ldrb	r3, [r3, #0]
    93aa:	4013      	ands	r3, r2
    93ac:	4293      	cmp	r3, r2
    93ae:	d1da      	bne.n	9366 <isr+0xb6a>
	switch (pdu_data_tx->llctrl.opcode) {
    93b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    93b2:	78d2      	ldrb	r2, [r2, #3]
    93b4:	2a02      	cmp	r2, #2
    93b6:	d1d6      	bne.n	9366 <isr+0xb6a>
		_radio.state = STATE_CLOSE;
    93b8:	4e3c      	ldr	r6, [pc, #240]	; (94ac <isr+0xcb0>)
    93ba:	7433      	strb	r3, [r6, #16]
		radio_disable();
    93bc:	f002 f8e4 	bl	b588 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    93c0:	f002 f8f4 	bl	b5ac <radio_is_ready>
    93c4:	2800      	cmp	r0, #0
    93c6:	d001      	beq.n	93cc <isr+0xbd0>
    93c8:	f7ff fa69 	bl	889e <isr+0xa2>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    93cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		terminate_ind_rx_enqueue(_radio.conn_curr,
    93ce:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    93d0:	7919      	ldrb	r1, [r3, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    93d2:	6970      	ldr	r0, [r6, #20]
    93d4:	2913      	cmp	r1, #19
    93d6:	d100      	bne.n	93da <isr+0xbde>
    93d8:	3103      	adds	r1, #3
    93da:	f7fd fea9 	bl	7130 <terminate_ind_rx_enqueue>
		terminate = 1;
    93de:	2601      	movs	r6, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    93e0:	4b32      	ldr	r3, [pc, #200]	; (94ac <isr+0xcb0>)
    93e2:	33fc      	adds	r3, #252	; 0xfc
    93e4:	695b      	ldr	r3, [r3, #20]
    93e6:	001a      	movs	r2, r3
    93e8:	32ff      	adds	r2, #255	; 0xff
    93ea:	7891      	ldrb	r1, [r2, #2]
    93ec:	1864      	adds	r4, r4, r1
			if (_radio.conn_curr->packet_tx_head_offset ==
    93ee:	7851      	ldrb	r1, [r2, #1]
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    93f0:	b2e4      	uxtb	r4, r4
    93f2:	7094      	strb	r4, [r2, #2]
			if (_radio.conn_curr->packet_tx_head_offset ==
    93f4:	42a1      	cmp	r1, r4
    93f6:	d11b      	bne.n	9430 <isr+0xc34>
	conn->packet_tx_head_len = 0;
    93f8:	2100      	movs	r1, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    93fa:	0018      	movs	r0, r3
    93fc:	001c      	movs	r4, r3
	conn->packet_tx_head_len = 0;
    93fe:	7051      	strb	r1, [r2, #1]
	conn->packet_tx_head_offset = 0;
    9400:	7091      	strb	r1, [r2, #2]
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    9402:	30ec      	adds	r0, #236	; 0xec
    9404:	34f0      	adds	r4, #240	; 0xf0
    9406:	6802      	ldr	r2, [r0, #0]
    9408:	6825      	ldr	r5, [r4, #0]
    940a:	42aa      	cmp	r2, r5
    940c:	d115      	bne.n	943a <isr+0xc3e>
		if (node_tx) {
    940e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9410:	428d      	cmp	r5, r1
    9412:	d00d      	beq.n	9430 <isr+0xc34>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    9414:	6815      	ldr	r5, [r2, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    9416:	33f4      	adds	r3, #244	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    9418:	6005      	str	r5, [r0, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    941a:	6818      	ldr	r0, [r3, #0]
    941c:	4282      	cmp	r2, r0
    941e:	d10a      	bne.n	9436 <isr+0xc3a>
				conn->pkt_tx_ctrl = NULL;
    9420:	6021      	str	r1, [r4, #0]
				conn->pkt_tx_ctrl_last = NULL;
    9422:	6019      	str	r1, [r3, #0]
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    9424:	4921      	ldr	r1, [pc, #132]	; (94ac <isr+0xcb0>)
    9426:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9428:	3151      	adds	r1, #81	; 0x51
    942a:	31ff      	adds	r1, #255	; 0xff
    942c:	f7fb fdd9 	bl	4fe2 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    9430:	2300      	movs	r3, #0
    9432:	930b      	str	r3, [sp, #44]	; 0x2c
    9434:	e008      	b.n	9448 <isr+0xc4c>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    9436:	6025      	str	r5, [r4, #0]
    9438:	e7f4      	b.n	9424 <isr+0xc28>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    943a:	33f8      	adds	r3, #248	; 0xf8
    943c:	681c      	ldr	r4, [r3, #0]
    943e:	6811      	ldr	r1, [r2, #0]
    9440:	42a2      	cmp	r2, r4
    9442:	d100      	bne.n	9446 <isr+0xc4a>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    9444:	6019      	str	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    9446:	6001      	str	r1, [r0, #0]
	if (terminate) {
    9448:	2e00      	cmp	r6, #0
    944a:	d038      	beq.n	94be <isr+0xcc2>
		_radio.conn_curr = NULL;
    944c:	2400      	movs	r4, #0
		connection_release(_radio.conn_curr);
    944e:	4d17      	ldr	r5, [pc, #92]	; (94ac <isr+0xcb0>)
    9450:	35fc      	adds	r5, #252	; 0xfc
    9452:	6968      	ldr	r0, [r5, #20]
    9454:	f7fe f89e 	bl	7594 <connection_release>
		_radio.conn_curr = NULL;
    9458:	616c      	str	r4, [r5, #20]
	if (!radio_tmr_aa_restore()) {
    945a:	f002 fa2b 	bl	b8b4 <radio_tmr_aa_restore>
    945e:	2800      	cmp	r0, #0
    9460:	d103      	bne.n	946a <isr+0xc6e>
		radio_tmr_aa_save(radio_tmr_aa_get());
    9462:	f002 fa19 	bl	b898 <radio_tmr_aa_get>
    9466:	f002 fa1f 	bl	b8a8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    946a:	4d10      	ldr	r5, [pc, #64]	; (94ac <isr+0xcb0>)
    946c:	002b      	movs	r3, r5
    946e:	33fc      	adds	r3, #252	; 0xfc
    9470:	695b      	ldr	r3, [r3, #20]
    9472:	2b00      	cmp	r3, #0
    9474:	d101      	bne.n	947a <isr+0xc7e>
    9476:	f7ff fa41 	bl	88fc <isr+0x100>
	if (tx_release) {
    947a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    947c:	2a00      	cmp	r2, #0
    947e:	d003      	beq.n	9488 <isr+0xc8c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    9480:	8c18      	ldrh	r0, [r3, #32]
    9482:	0011      	movs	r1, r2
    9484:	f7fe f812 	bl	74ac <pdu_node_tx_release>
	if (rx_enqueue) {
    9488:	2c00      	cmp	r4, #0
    948a:	d101      	bne.n	9490 <isr+0xc94>
    948c:	f7ff fa36 	bl	88fc <isr+0x100>
		rx_fc_lock(_radio.conn_curr->handle);
    9490:	35fc      	adds	r5, #252	; 0xfc
    9492:	696b      	ldr	r3, [r5, #20]
    9494:	8c18      	ldrh	r0, [r3, #32]
    9496:	f7fd fd55 	bl	6f44 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    949a:	696b      	ldr	r3, [r5, #20]
    949c:	8c1b      	ldrh	r3, [r3, #32]
    949e:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    94a0:	f7fd fe68 	bl	7174 <packet_rx_enqueue>
    94a4:	f7ff fa2a 	bl	88fc <isr+0x100>
    94a8:	20000375 	.word	0x20000375
    94ac:	20000298 	.word	0x20000298
    94b0:	000004e2 	.word	0x000004e2
			_radio.conn_curr->empty = 0;
    94b4:	237f      	movs	r3, #127	; 0x7f
    94b6:	4013      	ands	r3, r2
    94b8:	7003      	strb	r3, [r0, #0]
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    94ba:	2300      	movs	r3, #0
    94bc:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    94be:	4e90      	ldr	r6, [pc, #576]	; (9700 <isr+0xf04>)
    94c0:	7a3a      	ldrb	r2, [r7, #8]
    94c2:	0034      	movs	r4, r6
    94c4:	34fc      	adds	r4, #252	; 0xfc
    94c6:	6963      	ldr	r3, [r4, #20]
    94c8:	0712      	lsls	r2, r2, #28
    94ca:	33a8      	adds	r3, #168	; 0xa8
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	0fd2      	lsrs	r2, r2, #31
    94d0:	079b      	lsls	r3, r3, #30
    94d2:	0fdb      	lsrs	r3, r3, #31
    94d4:	429a      	cmp	r2, r3
    94d6:	d041      	beq.n	955c <isr+0xd60>
	u8_t rx_enqueue = 0;
    94d8:	2400      	movs	r4, #0
		_radio.crc_expire = 0;
    94da:	4b89      	ldr	r3, [pc, #548]	; (9700 <isr+0xf04>)
    94dc:	2500      	movs	r5, #0
    94de:	001a      	movs	r2, r3
		_radio.conn_curr->supervision_expire = 0;
    94e0:	33fc      	adds	r3, #252	; 0xfc
    94e2:	695b      	ldr	r3, [r3, #20]
		_radio.crc_expire = 0;
    94e4:	32ff      	adds	r2, #255	; 0xff
    94e6:	7595      	strb	r5, [r2, #22]
		_radio.conn_curr->supervision_expire = 0;
    94e8:	861d      	strh	r5, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    94ea:	4e85      	ldr	r6, [pc, #532]	; (9700 <isr+0xf04>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    94ec:	a913      	add	r1, sp, #76	; 0x4c
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    94ee:	0033      	movs	r3, r6
    94f0:	33fc      	adds	r3, #252	; 0xfc
    94f2:	6958      	ldr	r0, [r3, #20]
    94f4:	0003      	movs	r3, r0
    94f6:	33a8      	adds	r3, #168	; 0xa8
    94f8:	781b      	ldrb	r3, [r3, #0]
    94fa:	09db      	lsrs	r3, r3, #7
    94fc:	930c      	str	r3, [sp, #48]	; 0x30
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    94fe:	f7ff f911 	bl	8724 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9502:	7c33      	ldrb	r3, [r6, #16]
    9504:	2b03      	cmp	r3, #3
    9506:	d014      	beq.n	9532 <isr+0xd36>
    9508:	2303      	movs	r3, #3
    950a:	2d00      	cmp	r5, #0
    950c:	d111      	bne.n	9532 <isr+0xd36>
    950e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9510:	2a00      	cmp	r2, #0
    9512:	d006      	beq.n	9522 <isr+0xd26>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    9514:	7a3a      	ldrb	r2, [r7, #8]
    9516:	06d2      	lsls	r2, r2, #27
    9518:	d403      	bmi.n	9522 <isr+0xd26>
    951a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    951c:	7852      	ldrb	r2, [r2, #1]
    951e:	2a00      	cmp	r2, #0
    9520:	d007      	beq.n	9532 <isr+0xd36>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    9522:	0033      	movs	r3, r6
    9524:	33fc      	adds	r3, #252	; 0xfc
    9526:	695b      	ldr	r3, [r3, #20]
    9528:	339b      	adds	r3, #155	; 0x9b
			 (pdu_data_tx->len == 0)) ||
    952a:	781b      	ldrb	r3, [r3, #0]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    952c:	1e5a      	subs	r2, r3, #1
    952e:	4193      	sbcs	r3, r2
    9530:	3302      	adds	r3, #2
    9532:	7433      	strb	r3, [r6, #16]
	if (_radio.state == STATE_CLOSE) {
    9534:	2b03      	cmp	r3, #3
    9536:	d000      	beq.n	953a <isr+0xd3e>
    9538:	e2e9      	b.n	9b0e <isr+0x1312>
		if (_radio.role == ROLE_MASTER) {
    953a:	7bf3      	ldrb	r3, [r6, #15]
    953c:	2b04      	cmp	r3, #4
    953e:	d000      	beq.n	9542 <isr+0xd46>
    9540:	e2c0      	b.n	9ac4 <isr+0x12c8>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    9542:	217f      	movs	r1, #127	; 0x7f
    9544:	36fc      	adds	r6, #252	; 0xfc
    9546:	6972      	ldr	r2, [r6, #20]
    9548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    954a:	32a8      	adds	r2, #168	; 0xa8
    954c:	7810      	ldrb	r0, [r2, #0]
    954e:	01db      	lsls	r3, r3, #7
    9550:	4001      	ands	r1, r0
    9552:	430b      	orrs	r3, r1
    9554:	7013      	strb	r3, [r2, #0]
			radio_disable();
    9556:	f002 f817 	bl	b588 <radio_disable>
    955a:	e77e      	b.n	945a <isr+0xc5e>
	    (packet_rx_reserve_get(3) != 0) &&
    955c:	2003      	movs	r0, #3
    955e:	f7fd fa87 	bl	6a70 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    9562:	2800      	cmp	r0, #0
    9564:	d0b8      	beq.n	94d8 <isr+0xcdc>
	    ((_radio.fc_ena == 0) ||
    9566:	23bb      	movs	r3, #187	; 0xbb
    9568:	005b      	lsls	r3, r3, #1
	    (packet_rx_reserve_get(3) != 0) &&
    956a:	5cf3      	ldrb	r3, [r6, r3]
    956c:	2b00      	cmp	r3, #0
    956e:	d033      	beq.n	95d8 <isr+0xddc>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9570:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9572:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	    ((_radio.fc_ena == 0) ||
    9574:	429a      	cmp	r2, r3
    9576:	d107      	bne.n	9588 <isr+0xd8c>
	      (_radio.fc_req == _radio.fc_ack)) ||
    9578:	23ba      	movs	r3, #186	; 0xba
    957a:	2176      	movs	r1, #118	; 0x76
    957c:	005b      	lsls	r3, r3, #1
    957e:	31ff      	adds	r1, #255	; 0xff
    9580:	5cf3      	ldrb	r3, [r6, r3]
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9582:	5c71      	ldrb	r1, [r6, r1]
    9584:	4299      	cmp	r1, r3
    9586:	d027      	beq.n	95d8 <isr+0xddc>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9588:	0033      	movs	r3, r6
    958a:	33fc      	adds	r3, #252	; 0xfc
    958c:	6c99      	ldr	r1, [r3, #72]	; 0x48
	      (_radio.fc_req == _radio.fc_ack)) ||
    958e:	428a      	cmp	r2, r1
    9590:	d0a2      	beq.n	94d8 <isr+0xcdc>
	      (_radio.fc_req != _radio.fc_ack) &&
    9592:	22ba      	movs	r2, #186	; 0xba
    9594:	2076      	movs	r0, #118	; 0x76
    9596:	0052      	lsls	r2, r2, #1
    9598:	30ff      	adds	r0, #255	; 0xff
    959a:	5cb1      	ldrb	r1, [r6, r2]
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    959c:	5c30      	ldrb	r0, [r6, r0]
    959e:	4288      	cmp	r0, r1
    95a0:	d09a      	beq.n	94d8 <isr+0xcdc>
		(((_radio.fc_req == 0) &&
    95a2:	5cb2      	ldrb	r2, [r6, r2]
	      (_radio.fc_req != _radio.fc_ack) &&
    95a4:	2a00      	cmp	r2, #0
    95a6:	d106      	bne.n	95b6 <isr+0xdba>
		   _radio.conn_curr->handle)) ||
    95a8:	695b      	ldr	r3, [r3, #20]
		(((_radio.fc_req == 0) &&
    95aa:	3273      	adds	r2, #115	; 0x73
    95ac:	32ff      	adds	r2, #255	; 0xff
    95ae:	5ab2      	ldrh	r2, [r6, r2]
    95b0:	8c1b      	ldrh	r3, [r3, #32]
    95b2:	429a      	cmp	r2, r3
    95b4:	d010      	beq.n	95d8 <isr+0xddc>
		 ((_radio.fc_req != 0) &&
    95b6:	23ba      	movs	r3, #186	; 0xba
    95b8:	005b      	lsls	r3, r3, #1
    95ba:	5cf2      	ldrb	r2, [r6, r3]
		   _radio.conn_curr->handle)) ||
    95bc:	2a00      	cmp	r2, #0
    95be:	d08b      	beq.n	94d8 <isr+0xcdc>
		   _radio.conn_curr->handle)))))) {
    95c0:	0032      	movs	r2, r6
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    95c2:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    95c4:	32fc      	adds	r2, #252	; 0xfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    95c6:	33b3      	adds	r3, #179	; 0xb3
		   _radio.conn_curr->handle)))))) {
    95c8:	6951      	ldr	r1, [r2, #20]
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    95ca:	005b      	lsls	r3, r3, #1
    95cc:	18f3      	adds	r3, r6, r3
		 ((_radio.fc_req != 0) &&
    95ce:	88da      	ldrh	r2, [r3, #6]
    95d0:	8c0b      	ldrh	r3, [r1, #32]
    95d2:	429a      	cmp	r2, r3
    95d4:	d000      	beq.n	95d8 <isr+0xddc>
    95d6:	e77f      	b.n	94d8 <isr+0xcdc>
		if (pdu_data_rx->len != 0) {
    95d8:	7a7b      	ldrb	r3, [r7, #9]
    95da:	930c      	str	r3, [sp, #48]	; 0x30
    95dc:	2b00      	cmp	r3, #0
    95de:	d100      	bne.n	95e2 <isr+0xde6>
    95e0:	e20f      	b.n	9a02 <isr+0x1206>
			if (_radio.conn_curr->enc_rx) {
    95e2:	0033      	movs	r3, r6
		u8_t ccm_rx_increment = 0;
    95e4:	2200      	movs	r2, #0
			if (_radio.conn_curr->enc_rx) {
    95e6:	33fc      	adds	r3, #252	; 0xfc
    95e8:	695b      	ldr	r3, [r3, #20]
		u8_t ccm_rx_increment = 0;
    95ea:	920c      	str	r2, [sp, #48]	; 0x30
			if (_radio.conn_curr->enc_rx) {
    95ec:	33a8      	adds	r3, #168	; 0xa8
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	06db      	lsls	r3, r3, #27
    95f2:	d507      	bpl.n	9604 <isr+0xe08>
				done = radio_ccm_is_done();
    95f4:	f002 f9fc 	bl	b9f0 <radio_ccm_is_done>
				ccm_rx_increment = 1;
    95f8:	2301      	movs	r3, #1
    95fa:	930c      	str	r3, [sp, #48]	; 0x30
				LL_ASSERT(done);
    95fc:	2800      	cmp	r0, #0
    95fe:	d101      	bne.n	9604 <isr+0xe08>
    9600:	f7ff f94d 	bl	889e <isr+0xa2>
			if ((_radio.conn_curr->enc_rx &&
    9604:	0033      	movs	r3, r6
    9606:	33fc      	adds	r3, #252	; 0xfc
    9608:	695b      	ldr	r3, [r3, #20]
    960a:	33a8      	adds	r3, #168	; 0xa8
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	06db      	lsls	r3, r3, #27
    9610:	d410      	bmi.n	9634 <isr+0xe38>
			    (_radio.conn_curr->pause_rx &&
    9612:	0033      	movs	r3, r6
    9614:	33fc      	adds	r3, #252	; 0xfc
    9616:	695d      	ldr	r5, [r3, #20]
    9618:	002b      	movs	r3, r5
    961a:	33a8      	adds	r3, #168	; 0xa8
    961c:	781a      	ldrb	r2, [r3, #0]
			     !radio_ccm_mic_is_valid()) ||
    961e:	0753      	lsls	r3, r2, #29
    9620:	d420      	bmi.n	9664 <isr+0xe68>
			switch (pdu_data_rx->ll_id) {
    9622:	7a3c      	ldrb	r4, [r7, #8]
    9624:	07a4      	lsls	r4, r4, #30
    9626:	0fa4      	lsrs	r4, r4, #30
    9628:	d100      	bne.n	962c <isr+0xe30>
    962a:	e0bf      	b.n	97ac <isr+0xfb0>
    962c:	2c02      	cmp	r4, #2
    962e:	d842      	bhi.n	96b6 <isr+0xeba>
				*rx_enqueue = 1;
    9630:	2401      	movs	r4, #1
    9632:	e0bb      	b.n	97ac <isr+0xfb0>
			     !radio_ccm_mic_is_valid()) ||
    9634:	f002 f9fe 	bl	ba34 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    9638:	2800      	cmp	r0, #0
    963a:	d1ea      	bne.n	9612 <isr+0xe16>
				_radio.state = STATE_CLOSE;
    963c:	2303      	movs	r3, #3
    963e:	7433      	strb	r3, [r6, #16]
				radio_disable();
    9640:	f001 ffa2 	bl	b588 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    9644:	f001 ffb2 	bl	b5ac <radio_is_ready>
    9648:	1e04      	subs	r4, r0, #0
    964a:	d001      	beq.n	9650 <isr+0xe54>
    964c:	f7ff f927 	bl	889e <isr+0xa2>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    9650:	36fc      	adds	r6, #252	; 0xfc
    9652:	213d      	movs	r1, #61	; 0x3d
    9654:	6970      	ldr	r0, [r6, #20]
    9656:	f7fd fd6b 	bl	7130 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    965a:	6970      	ldr	r0, [r6, #20]
    965c:	f7fd ff9a 	bl	7594 <connection_release>
				_radio.conn_curr = NULL;
    9660:	6174      	str	r4, [r6, #20]
    9662:	e6fa      	b.n	945a <isr+0xc5e>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    9664:	7a3b      	ldrb	r3, [r7, #8]
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    9666:	43db      	mvns	r3, r3
    9668:	079b      	lsls	r3, r3, #30
    966a:	d1e7      	bne.n	963c <isr+0xe40>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    966c:	7f68      	ldrb	r0, [r5, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    966e:	7afb      	ldrb	r3, [r7, #11]
    9670:	2140      	movs	r1, #64	; 0x40
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    9672:	287f      	cmp	r0, #127	; 0x7f
    9674:	d812      	bhi.n	969c <isr+0xea0>
	       (!conn->role &&
    9676:	420a      	tst	r2, r1
    9678:	d109      	bne.n	968e <isr+0xe92>
		((!conn->refresh &&
    967a:	2b02      	cmp	r3, #2
    967c:	d0d1      	beq.n	9622 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    967e:	1f5a      	subs	r2, r3, #5
    9680:	2a01      	cmp	r2, #1
    9682:	d9ce      	bls.n	9622 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9684:	22fb      	movs	r2, #251	; 0xfb
    9686:	3b0d      	subs	r3, #13
    9688:	4213      	tst	r3, r2
    968a:	d1d7      	bne.n	963c <isr+0xe40>
    968c:	e7c9      	b.n	9622 <isr+0xe26>
		 (conn->refresh &&
    968e:	21fd      	movs	r1, #253	; 0xfd
    9690:	1e9a      	subs	r2, r3, #2
    9692:	420a      	tst	r2, r1
    9694:	d0c5      	beq.n	9622 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    9696:	2b0b      	cmp	r3, #11
    9698:	d1f1      	bne.n	967e <isr+0xe82>
    969a:	e7c2      	b.n	9622 <isr+0xe26>
	       (conn->role &&
    969c:	420a      	tst	r2, r1
    969e:	d104      	bne.n	96aa <isr+0xeae>
		((!conn->refresh &&
    96a0:	2b02      	cmp	r3, #2
    96a2:	d0be      	beq.n	9622 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    96a4:	2b06      	cmp	r3, #6
    96a6:	d1ed      	bne.n	9684 <isr+0xe88>
    96a8:	e7bb      	b.n	9622 <isr+0xe26>
		 (conn->refresh &&
    96aa:	1e9a      	subs	r2, r3, #2
    96ac:	2a01      	cmp	r2, #1
    96ae:	d9b8      	bls.n	9622 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    96b0:	2b0b      	cmp	r3, #11
    96b2:	d1f7      	bne.n	96a4 <isr+0xea8>
    96b4:	e7b5      	b.n	9622 <isr+0xe26>
	pdu_data_rx = (void *)node_rx->pdu_data;
    96b6:	003b      	movs	r3, r7
    96b8:	3308      	adds	r3, #8
    96ba:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (pdu_data_rx->llctrl.opcode) {
    96bc:	7afc      	ldrb	r4, [r7, #11]
    96be:	2c19      	cmp	r4, #25
    96c0:	d900      	bls.n	96c4 <isr+0xec8>
    96c2:	e1a6      	b.n	9a12 <isr+0x1216>
    96c4:	0020      	movs	r0, r4
    96c6:	f7f6 fd75 	bl	1b4 <__gnu_thumb1_case_uhi>
    96ca:	001d      	.short	0x001d
    96cc:	00e700b0 	.word	0x00e700b0
    96d0:	01a401a4 	.word	0x01a401a4
    96d4:	01a401a4 	.word	0x01a401a4
    96d8:	00f2019e 	.word	0x00f2019e
    96dc:	01a4010c 	.word	0x01a4010c
    96e0:	012c01a4 	.word	0x012c01a4
    96e4:	010501a4 	.word	0x010501a4
    96e8:	01a401a4 	.word	0x01a401a4
    96ec:	01a40196 	.word	0x01a40196
    96f0:	01a401a4 	.word	0x01a401a4
    96f4:	01a401a4 	.word	0x01a401a4
    96f8:	01a401a4 	.word	0x01a401a4
    96fc:	01b9      	.short	0x01b9
    96fe:	46c0      	nop			; (mov r8, r8)
    9700:	20000298 	.word	0x20000298
		if (!_radio.conn_curr->role ||
    9704:	7f6b      	ldrb	r3, [r5, #29]
    9706:	2b7f      	cmp	r3, #127	; 0x7f
    9708:	d800      	bhi.n	970c <isr+0xf10>
    970a:	e182      	b.n	9a12 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    970c:	7a79      	ldrb	r1, [r7, #9]
    970e:	2000      	movs	r0, #0
    9710:	f7fd f96e 	bl	69f0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    9714:	2800      	cmp	r0, #0
    9716:	d100      	bne.n	971a <isr+0xf1e>
    9718:	e17b      	b.n	9a12 <isr+0x1216>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    971a:	7dbb      	ldrb	r3, [r7, #22]
    971c:	7d7a      	ldrb	r2, [r7, #21]
    971e:	021b      	lsls	r3, r3, #8
    9720:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    9722:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    9724:	1a9a      	subs	r2, r3, r2
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    9726:	0412      	lsls	r2, r2, #16
    9728:	d500      	bpl.n	972c <isr+0xf30>
    972a:	e3a3      	b.n	9e74 <isr+0x1678>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    972c:	002a      	movs	r2, r5
    972e:	325c      	adds	r2, #92	; 0x5c
    9730:	7811      	ldrb	r1, [r2, #0]
    9732:	3201      	adds	r2, #1
    9734:	7812      	ldrb	r2, [r2, #0]
    9736:	428a      	cmp	r2, r1
    9738:	d001      	beq.n	973e <isr+0xf42>
    973a:	f7ff f8b0 	bl	889e <isr+0xa2>
	if (_radio.conn_upd == 0) {
    973e:	22be      	movs	r2, #190	; 0xbe
    9740:	0052      	lsls	r2, r2, #1
    9742:	58b0      	ldr	r0, [r6, r2]
    9744:	2800      	cmp	r0, #0
    9746:	d100      	bne.n	974a <isr+0xf4e>
		_radio.conn_upd = conn;
    9748:	50b5      	str	r5, [r6, r2]
	conn->llcp.conn_upd.win_size =
    974a:	002a      	movs	r2, r5
    974c:	7b38      	ldrb	r0, [r7, #12]
    974e:	3270      	adds	r2, #112	; 0x70
    9750:	7010      	strb	r0, [r2, #0]
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    9752:	7bba      	ldrb	r2, [r7, #14]
    9754:	7b78      	ldrb	r0, [r7, #13]
    9756:	0212      	lsls	r2, r2, #8
    9758:	4302      	orrs	r2, r0
    975a:	48d7      	ldr	r0, [pc, #860]	; (9ab8 <isr+0x12bc>)
			_radio.conn_curr->procedure_expire = 0;
    975c:	2400      	movs	r4, #0
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    975e:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    9760:	66ea      	str	r2, [r5, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    9762:	7c3a      	ldrb	r2, [r7, #16]
    9764:	7bf8      	ldrb	r0, [r7, #15]
    9766:	0212      	lsls	r2, r2, #8
    9768:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.interval =
    976a:	0028      	movs	r0, r5
    976c:	3062      	adds	r0, #98	; 0x62
    976e:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.latency;
    9770:	7cba      	ldrb	r2, [r7, #18]
    9772:	7c78      	ldrb	r0, [r7, #17]
    9774:	0212      	lsls	r2, r2, #8
    9776:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.latency =
    9778:	0028      	movs	r0, r5
    977a:	3064      	adds	r0, #100	; 0x64
    977c:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    977e:	7d3a      	ldrb	r2, [r7, #20]
    9780:	7cf8      	ldrb	r0, [r7, #19]
    9782:	0212      	lsls	r2, r2, #8
    9784:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.timeout =
    9786:	0028      	movs	r0, r5
    9788:	3066      	adds	r0, #102	; 0x66
    978a:	8002      	strh	r2, [r0, #0]
	conn->llcp.conn_upd.instant =
    978c:	002a      	movs	r2, r5
	conn->llcp.conn_upd.is_internal = 0;
    978e:	20f8      	movs	r0, #248	; 0xf8
	conn->llcp.conn_upd.instant =
    9790:	3268      	adds	r2, #104	; 0x68
    9792:	8013      	strh	r3, [r2, #0]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    9794:	3a08      	subs	r2, #8
    9796:	7813      	ldrb	r3, [r2, #0]
	conn->llcp_ack--;
    9798:	3901      	subs	r1, #1
	conn->llcp.conn_upd.is_internal = 0;
    979a:	4003      	ands	r3, r0
    979c:	7013      	strb	r3, [r2, #0]
	conn->llcp_type = LLCP_CONN_UPD;
    979e:	002b      	movs	r3, r5
    97a0:	2201      	movs	r2, #1
    97a2:	335e      	adds	r3, #94	; 0x5e
    97a4:	701a      	strb	r2, [r3, #0]
	conn->llcp_ack--;
    97a6:	3b01      	subs	r3, #1
    97a8:	7019      	strb	r1, [r3, #0]
			_radio.conn_curr->procedure_expire = 0;
    97aa:	86ac      	strh	r4, [r5, #52]	; 0x34
			_radio.conn_curr->nesn++;
    97ac:	4bc3      	ldr	r3, [pc, #780]	; (9abc <isr+0x12c0>)
    97ae:	2102      	movs	r1, #2
    97b0:	33fc      	adds	r3, #252	; 0xfc
    97b2:	695d      	ldr	r5, [r3, #20]
    97b4:	002a      	movs	r2, r5
    97b6:	32a8      	adds	r2, #168	; 0xa8
    97b8:	7813      	ldrb	r3, [r2, #0]
    97ba:	404b      	eors	r3, r1
    97bc:	7013      	strb	r3, [r2, #0]
			if (ccm_rx_increment) {
    97be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    97c0:	2b00      	cmp	r3, #0
    97c2:	d100      	bne.n	97c6 <isr+0xfca>
    97c4:	e689      	b.n	94da <isr+0xcde>
				_radio.conn_curr->ccm_rx.counter++;
    97c6:	002b      	movs	r3, r5
    97c8:	002e      	movs	r6, r5
    97ca:	33b8      	adds	r3, #184	; 0xb8
    97cc:	36bc      	adds	r6, #188	; 0xbc
    97ce:	681b      	ldr	r3, [r3, #0]
    97d0:	7832      	ldrb	r2, [r6, #0]
    97d2:	0a1b      	lsrs	r3, r3, #8
    97d4:	0612      	lsls	r2, r2, #24
    97d6:	431a      	orrs	r2, r3
    97d8:	0010      	movs	r0, r2
    97da:	002a      	movs	r2, r5
    97dc:	32c0      	adds	r2, #192	; 0xc0
    97de:	6833      	ldr	r3, [r6, #0]
    97e0:	7812      	ldrb	r2, [r2, #0]
    97e2:	0a1b      	lsrs	r3, r3, #8
    97e4:	0612      	lsls	r2, r2, #24
    97e6:	431a      	orrs	r2, r3
    97e8:	0011      	movs	r1, r2
    97ea:	2300      	movs	r3, #0
    97ec:	2201      	movs	r2, #1
    97ee:	1812      	adds	r2, r2, r0
    97f0:	414b      	adcs	r3, r1
    97f2:	920c      	str	r2, [sp, #48]	; 0x30
    97f4:	930d      	str	r3, [sp, #52]	; 0x34
    97f6:	2230      	movs	r2, #48	; 0x30
    97f8:	466b      	mov	r3, sp
    97fa:	189b      	adds	r3, r3, r2
    97fc:	781b      	ldrb	r3, [r3, #0]
    97fe:	35b9      	adds	r5, #185	; 0xb9
    9800:	702b      	strb	r3, [r5, #0]
    9802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9804:	0a19      	lsrs	r1, r3, #8
    9806:	0e1a      	lsrs	r2, r3, #24
    9808:	7069      	strb	r1, [r5, #1]
    980a:	70ea      	strb	r2, [r5, #3]
    980c:	0c19      	lsrs	r1, r3, #16
    980e:	2234      	movs	r2, #52	; 0x34
    9810:	466b      	mov	r3, sp
    9812:	189b      	adds	r3, r3, r2
    9814:	781b      	ldrb	r3, [r3, #0]
    9816:	70a9      	strb	r1, [r5, #2]
    9818:	712b      	strb	r3, [r5, #4]
    981a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    981c:	0a1a      	lsrs	r2, r3, #8
    981e:	716a      	strb	r2, [r5, #5]
    9820:	0c1a      	lsrs	r2, r3, #16
    9822:	0e1b      	lsrs	r3, r3, #24
    9824:	71aa      	strb	r2, [r5, #6]
    9826:	71eb      	strb	r3, [r5, #7]
    9828:	e657      	b.n	94da <isr+0xcde>
		if (!_radio.conn_curr->role ||
    982a:	7f6b      	ldrb	r3, [r5, #29]
    982c:	2b7f      	cmp	r3, #127	; 0x7f
    982e:	d800      	bhi.n	9832 <isr+0x1036>
    9830:	e0ef      	b.n	9a12 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    9832:	7a79      	ldrb	r1, [r7, #9]
    9834:	2001      	movs	r0, #1
    9836:	f7fd f8db 	bl	69f0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    983a:	2800      	cmp	r0, #0
    983c:	d100      	bne.n	9840 <isr+0x1044>
    983e:	e0e8      	b.n	9a12 <isr+0x1216>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    9840:	7cbb      	ldrb	r3, [r7, #18]
    9842:	7c7a      	ldrb	r2, [r7, #17]
    9844:	021b      	lsls	r3, r3, #8
    9846:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xffff) > 0x7fff) {
    9848:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    984a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    984c:	041b      	lsls	r3, r3, #16
    984e:	d500      	bpl.n	9852 <isr+0x1056>
    9850:	e310      	b.n	9e74 <isr+0x1678>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    9852:	002e      	movs	r6, r5
    9854:	002b      	movs	r3, r5
    9856:	365d      	adds	r6, #93	; 0x5d
    9858:	335c      	adds	r3, #92	; 0x5c
    985a:	781a      	ldrb	r2, [r3, #0]
    985c:	7833      	ldrb	r3, [r6, #0]
    985e:	429a      	cmp	r2, r3
    9860:	d001      	beq.n	9866 <isr+0x106a>
    9862:	f7ff f81c 	bl	889e <isr+0xa2>
	memcpy(&conn->llcp.chan_map.chm[0],
    9866:	0028      	movs	r0, r5
    9868:	0039      	movs	r1, r7
    986a:	2205      	movs	r2, #5
    986c:	3061      	adds	r0, #97	; 0x61
    986e:	310c      	adds	r1, #12
    9870:	f7f8 fa5c 	bl	1d2c <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    9874:	7cbb      	ldrb	r3, [r7, #18]
    9876:	7c7a      	ldrb	r2, [r7, #17]
    9878:	021b      	lsls	r3, r3, #8
    987a:	4313      	orrs	r3, r2
	conn->llcp.chan_map.instant =
    987c:	002a      	movs	r2, r5
    987e:	3266      	adds	r2, #102	; 0x66
    9880:	8013      	strh	r3, [r2, #0]
	conn->llcp.chan_map.initiate = 0;
    9882:	002b      	movs	r3, r5
    9884:	2400      	movs	r4, #0
    9886:	3360      	adds	r3, #96	; 0x60
    9888:	701c      	strb	r4, [r3, #0]
			conn->llcp_type = LLCP_CHAN_MAP;
    988a:	2302      	movs	r3, #2
    988c:	355e      	adds	r5, #94	; 0x5e
    988e:	702b      	strb	r3, [r5, #0]
			conn->llcp_ack--;
    9890:	7833      	ldrb	r3, [r6, #0]
    9892:	3b01      	subs	r3, #1
    9894:	7033      	strb	r3, [r6, #0]
    9896:	e789      	b.n	97ac <isr+0xfb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    9898:	7a79      	ldrb	r1, [r7, #9]
    989a:	2002      	movs	r0, #2
    989c:	f7fd f8a8 	bl	69f0 <pdu_len_cmp>
    98a0:	2800      	cmp	r0, #0
    98a2:	d100      	bne.n	98a6 <isr+0x10aa>
    98a4:	e0b5      	b.n	9a12 <isr+0x1216>
		_radio.conn_curr->llcp_terminate.reason_peer =
    98a6:	7b3b      	ldrb	r3, [r7, #12]
    98a8:	359b      	adds	r5, #155	; 0x9b
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    98aa:	702b      	strb	r3, [r5, #0]
    98ac:	e0a9      	b.n	9a02 <isr+0x1206>
		if (!_radio.conn_curr->role ||
    98ae:	7f6b      	ldrb	r3, [r5, #29]
    98b0:	2b7f      	cmp	r3, #127	; 0x7f
    98b2:	d800      	bhi.n	98b6 <isr+0x10ba>
    98b4:	e0ad      	b.n	9a12 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    98b6:	2008      	movs	r0, #8
    98b8:	7a79      	ldrb	r1, [r7, #9]
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    98ba:	f7fd f899 	bl	69f0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    98be:	2800      	cmp	r0, #0
    98c0:	d100      	bne.n	98c4 <isr+0x10c8>
    98c2:	e0a6      	b.n	9a12 <isr+0x1216>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    98c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    98c6:	0028      	movs	r0, r5
    98c8:	f7fe faa8 	bl	7e1c <feature_rsp_send>
    98cc:	1e04      	subs	r4, r0, #0
		if (!nack) {
    98ce:	d000      	beq.n	98d2 <isr+0x10d6>
    98d0:	e602      	b.n	94d8 <isr+0xcdc>
    98d2:	e76b      	b.n	97ac <isr+0xfb0>
		if (_radio.conn_curr->role ||
    98d4:	7f6b      	ldrb	r3, [r5, #29]
    98d6:	2b7f      	cmp	r3, #127	; 0x7f
    98d8:	d900      	bls.n	98dc <isr+0x10e0>
    98da:	e09a      	b.n	9a12 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    98dc:	7a79      	ldrb	r1, [r7, #9]
    98de:	200e      	movs	r0, #14
    98e0:	e7eb      	b.n	98ba <isr+0x10be>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    98e2:	7a79      	ldrb	r1, [r7, #9]
    98e4:	2009      	movs	r0, #9
    98e6:	f7fd f883 	bl	69f0 <pdu_len_cmp>
    98ea:	2800      	cmp	r0, #0
    98ec:	d100      	bne.n	98f0 <isr+0x10f4>
    98ee:	e090      	b.n	9a12 <isr+0x1216>
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    98f0:	0029      	movs	r1, r5
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    98f2:	7b3a      	ldrb	r2, [r7, #12]
    98f4:	4b72      	ldr	r3, [pc, #456]	; (9ac0 <isr+0x12c4>)
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    98f6:	318c      	adds	r1, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    98f8:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    98fa:	7b7a      	ldrb	r2, [r7, #13]
    98fc:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    98fe:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    9900:	7bba      	ldrb	r2, [r7, #14]
    9902:	0412      	lsls	r2, r2, #16
    9904:	431a      	orrs	r2, r3
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    9906:	680b      	ldr	r3, [r1, #0]
    9908:	03db      	lsls	r3, r3, #15
    990a:	0bdb      	lsrs	r3, r3, #15
    990c:	4013      	ands	r3, r2
		_radio.conn_curr->common.fex_valid = 1;
    990e:	002a      	movs	r2, r5
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    9910:	600b      	str	r3, [r1, #0]
		_radio.conn_curr->common.fex_valid = 1;
    9912:	2320      	movs	r3, #32
    9914:	3238      	adds	r2, #56	; 0x38
    9916:	7811      	ldrb	r1, [r2, #0]
    9918:	430b      	orrs	r3, r1
    991a:	7013      	strb	r3, [r2, #0]
		_radio.conn_curr->procedure_expire = 0;
    991c:	2300      	movs	r3, #0
    991e:	86ab      	strh	r3, [r5, #52]	; 0x34
    9920:	e686      	b.n	9630 <isr+0xe34>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    9922:	7a79      	ldrb	r1, [r7, #9]
    9924:	200c      	movs	r0, #12
    9926:	f7fd f863 	bl	69f0 <pdu_len_cmp>
    992a:	2800      	cmp	r0, #0
    992c:	d071      	beq.n	9a12 <isr+0x1216>
	if (!conn->llcp_version.tx) {
    992e:	002c      	movs	r4, r5
    9930:	3490      	adds	r4, #144	; 0x90
    9932:	7823      	ldrb	r3, [r4, #0]
    9934:	2601      	movs	r6, #1
    9936:	001a      	movs	r2, r3
    9938:	4032      	ands	r2, r6
    993a:	920f      	str	r2, [sp, #60]	; 0x3c
    993c:	d154      	bne.n	99e8 <isr+0x11ec>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    993e:	485f      	ldr	r0, [pc, #380]	; (9abc <isr+0x12c0>)
    9940:	3051      	adds	r0, #81	; 0x51
    9942:	30ff      	adds	r0, #255	; 0xff
    9944:	f7fb fb34 	bl	4fb0 <mem_acquire>
    9948:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    994a:	d100      	bne.n	994e <isr+0x1152>
    994c:	e5c4      	b.n	94d8 <isr+0xcdc>
		conn->llcp_version.tx = 1;
    994e:	7823      	ldrb	r3, [r4, #0]
    9950:	4333      	orrs	r3, r6
    9952:	7023      	strb	r3, [r4, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9954:	2403      	movs	r4, #3
    9956:	7903      	ldrb	r3, [r0, #4]
    9958:	4323      	orrs	r3, r4
    995a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    995c:	2306      	movs	r3, #6
    995e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    9960:	18db      	adds	r3, r3, r3
    9962:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    9964:	3b03      	subs	r3, #3
    9966:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    9968:	3b18      	subs	r3, #24
    996a:	7243      	strb	r3, [r0, #9]
    996c:	3314      	adds	r3, #20
    996e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    9970:	3b06      	subs	r3, #6
    9972:	72c3      	strb	r3, [r0, #11]
    9974:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    9976:	0028      	movs	r0, r5
    9978:	f7fe fa37 	bl	7dea <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    997c:	002a      	movs	r2, r5
    997e:	2380      	movs	r3, #128	; 0x80
    9980:	32a8      	adds	r2, #168	; 0xa8
    9982:	7811      	ldrb	r1, [r2, #0]
    9984:	425b      	negs	r3, r3
    9986:	430b      	orrs	r3, r1
    9988:	7013      	strb	r3, [r2, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    998a:	f001 fe45 	bl	b618 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    998e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    9990:	223c      	movs	r2, #60	; 0x3c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9992:	43a3      	bics	r3, r4
    9994:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    9996:	466b      	mov	r3, sp
    9998:	189b      	adds	r3, r3, r2
    999a:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    999c:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    999e:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    99a0:	002b      	movs	r3, r5
    99a2:	33ec      	adds	r3, #236	; 0xec
    99a4:	681c      	ldr	r4, [r3, #0]
    99a6:	2310      	movs	r3, #16
    99a8:	2c00      	cmp	r4, #0
    99aa:	d01a      	beq.n	99e2 <isr+0x11e6>
		pdu_data_tx->md = 1;
    99ac:	431e      	orrs	r6, r3
	u8_t rx_enqueue = 0;
    99ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
		pdu_data_tx->md = 1;
    99b0:	7006      	strb	r6, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    99b2:	002b      	movs	r3, r5
    99b4:	7b3a      	ldrb	r2, [r7, #12]
    99b6:	3391      	adds	r3, #145	; 0x91
    99b8:	701a      	strb	r2, [r3, #0]
	conn->llcp_version.company_id = v->company_id;
    99ba:	7bbb      	ldrb	r3, [r7, #14]
    99bc:	7b7a      	ldrb	r2, [r7, #13]
    99be:	021b      	lsls	r3, r3, #8
    99c0:	4313      	orrs	r3, r2
    99c2:	002a      	movs	r2, r5
    99c4:	3292      	adds	r2, #146	; 0x92
    99c6:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.sub_version_number = v->sub_version_number;
    99c8:	7c3b      	ldrb	r3, [r7, #16]
    99ca:	7bfa      	ldrb	r2, [r7, #15]
    99cc:	021b      	lsls	r3, r3, #8
    99ce:	4313      	orrs	r3, r2
    99d0:	002a      	movs	r2, r5
    99d2:	3294      	adds	r2, #148	; 0x94
    99d4:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.rx = 1;
    99d6:	2302      	movs	r3, #2
    99d8:	3590      	adds	r5, #144	; 0x90
    99da:	782a      	ldrb	r2, [r5, #0]
    99dc:	4313      	orrs	r3, r2
    99de:	702b      	strb	r3, [r5, #0]
    99e0:	e6e4      	b.n	97ac <isr+0xfb0>
		pdu_data_tx->md = 0;
    99e2:	439e      	bics	r6, r3
    99e4:	7006      	strb	r6, [r0, #0]
    99e6:	e7e4      	b.n	99b2 <isr+0x11b6>
	u8_t rx_enqueue = 0;
    99e8:	2400      	movs	r4, #0
	} else if (!conn->llcp_version.rx) {
    99ea:	079b      	lsls	r3, r3, #30
    99ec:	d500      	bpl.n	99f0 <isr+0x11f4>
    99ee:	e6dd      	b.n	97ac <isr+0xfb0>
		conn->procedure_expire = 0;
    99f0:	86ac      	strh	r4, [r5, #52]	; 0x34
		*rx_enqueue = 1;
    99f2:	0034      	movs	r4, r6
    99f4:	e7dd      	b.n	99b2 <isr+0x11b6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    99f6:	7a79      	ldrb	r1, [r7, #9]
    99f8:	2011      	movs	r0, #17
    99fa:	f7fc fff9 	bl	69f0 <pdu_len_cmp>
    99fe:	2800      	cmp	r0, #0
    9a00:	d007      	beq.n	9a12 <isr+0x1216>
	u8_t rx_enqueue = 0;
    9a02:	2400      	movs	r4, #0
    9a04:	e6d2      	b.n	97ac <isr+0xfb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    9a06:	7a79      	ldrb	r1, [r7, #9]
    9a08:	2007      	movs	r0, #7
    9a0a:	f7fc fff1 	bl	69f0 <pdu_len_cmp>
    9a0e:	2800      	cmp	r0, #0
    9a10:	d184      	bne.n	991c <isr+0x1120>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9a12:	0030      	movs	r0, r6
    9a14:	3051      	adds	r0, #81	; 0x51
    9a16:	30ff      	adds	r0, #255	; 0xff
    9a18:	f7fb faca 	bl	4fb0 <mem_acquire>
    9a1c:	1e01      	subs	r1, r0, #0
	if (!node_tx) {
    9a1e:	d100      	bne.n	9a22 <isr+0x1226>
    9a20:	e55a      	b.n	94d8 <isr+0xcdc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9a22:	2303      	movs	r3, #3
    9a24:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    9a26:	7204      	strb	r4, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9a28:	4313      	orrs	r3, r2
    9a2a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    9a2c:	2302      	movs	r3, #2
    9a2e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    9a30:	3305      	adds	r3, #5
    9a32:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    9a34:	0028      	movs	r0, r5
    9a36:	f7fe f9a7 	bl	7d88 <ctrl_tx_enqueue>
    9a3a:	e7e2      	b.n	9a02 <isr+0x1206>
		if (_radio.conn_curr->role ||
    9a3c:	7f6b      	ldrb	r3, [r5, #29]
    9a3e:	2b7f      	cmp	r3, #127	; 0x7f
    9a40:	d8e7      	bhi.n	9a12 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    9a42:	7a79      	ldrb	r1, [r7, #9]
    9a44:	2019      	movs	r0, #25
    9a46:	f7fc ffd3 	bl	69f0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9a4a:	2800      	cmp	r0, #0
    9a4c:	d0e1      	beq.n	9a12 <isr+0x1216>
			if (!(p->phys & 0x01)) {
    9a4e:	2201      	movs	r2, #1
    9a50:	7b3b      	ldrb	r3, [r7, #12]
	u8_t rx_enqueue = 0;
    9a52:	2400      	movs	r4, #0
			if (!(p->phys & 0x01)) {
    9a54:	4213      	tst	r3, r2
    9a56:	d100      	bne.n	9a5a <isr+0x125e>
    9a58:	e6a8      	b.n	97ac <isr+0xfb0>
			if (conn->llcp_req != conn->llcp_ack) {
    9a5a:	002e      	movs	r6, r5
    9a5c:	002b      	movs	r3, r5
    9a5e:	365d      	adds	r6, #93	; 0x5d
    9a60:	335c      	adds	r3, #92	; 0x5c
    9a62:	781a      	ldrb	r2, [r3, #0]
    9a64:	7833      	ldrb	r3, [r6, #0]
    9a66:	429a      	cmp	r2, r3
    9a68:	d000      	beq.n	9a6c <isr+0x1270>
    9a6a:	e69f      	b.n	97ac <isr+0xfb0>
			memcpy(&conn->llcp.chan_map.chm[0],
    9a6c:	0028      	movs	r0, r5
    9a6e:	4913      	ldr	r1, [pc, #76]	; (9abc <isr+0x12c0>)
    9a70:	2205      	movs	r2, #5
    9a72:	3117      	adds	r1, #23
    9a74:	3061      	adds	r0, #97	; 0x61
    9a76:	31ff      	adds	r1, #255	; 0xff
    9a78:	f7f8 f958 	bl	1d2c <memcpy>
			conn->llcp.chan_map.initiate = 1;
    9a7c:	002b      	movs	r3, r5
    9a7e:	2201      	movs	r2, #1
    9a80:	3360      	adds	r3, #96	; 0x60
    9a82:	701a      	strb	r2, [r3, #0]
    9a84:	e701      	b.n	988a <isr+0x108e>
		if (_radio.crc_expire == 0) {
    9a86:	7d93      	ldrb	r3, [r2, #22]
    9a88:	2b00      	cmp	r3, #0
    9a8a:	d101      	bne.n	9a90 <isr+0x1294>
			_radio.crc_expire = 2;
    9a8c:	3302      	adds	r3, #2
    9a8e:	7593      	strb	r3, [r2, #22]
		_radio.crc_expire--;
    9a90:	0023      	movs	r3, r4
    9a92:	33ff      	adds	r3, #255	; 0xff
    9a94:	7d9d      	ldrb	r5, [r3, #22]
		if (!_radio.conn_curr->supervision_expire) {
    9a96:	34fc      	adds	r4, #252	; 0xfc
		_radio.crc_expire--;
    9a98:	3d01      	subs	r5, #1
    9a9a:	b2ea      	uxtb	r2, r5
    9a9c:	759a      	strb	r2, [r3, #22]
		crc_close = (_radio.crc_expire == 0);
    9a9e:	4255      	negs	r5, r2
    9aa0:	4155      	adcs	r5, r2
		if (!_radio.conn_curr->supervision_expire) {
    9aa2:	6963      	ldr	r3, [r4, #20]
		crc_close = (_radio.crc_expire == 0);
    9aa4:	b2ed      	uxtb	r5, r5
		if (!_radio.conn_curr->supervision_expire) {
    9aa6:	8e1c      	ldrh	r4, [r3, #48]	; 0x30
    9aa8:	2c00      	cmp	r4, #0
    9aaa:	d103      	bne.n	9ab4 <isr+0x12b8>
			_radio.conn_curr->supervision_expire =
    9aac:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    9aae:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    9ab0:	940b      	str	r4, [sp, #44]	; 0x2c
    9ab2:	e51a      	b.n	94ea <isr+0xcee>
	u8_t rx_enqueue = 0;
    9ab4:	2400      	movs	r4, #0
    9ab6:	e7fb      	b.n	9ab0 <isr+0x12b4>
    9ab8:	000004e2 	.word	0x000004e2
    9abc:	20000298 	.word	0x20000298
    9ac0:	fffe30d0 	.word	0xfffe30d0
			radio_switch_complete_and_disable();
    9ac4:	f001 fdc0 	bl	b648 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    9ac8:	36fc      	adds	r6, #252	; 0xfc
    9aca:	6970      	ldr	r0, [r6, #20]
    9acc:	2501      	movs	r5, #1
    9ace:	0006      	movs	r6, r0
    9ad0:	36a8      	adds	r6, #168	; 0xa8
    9ad2:	7832      	ldrb	r2, [r6, #0]
    9ad4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9ad6:	402a      	ands	r2, r5
    9ad8:	00d3      	lsls	r3, r2, #3
    9ada:	930c      	str	r3, [sp, #48]	; 0x30
    9adc:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    9ade:	7836      	ldrb	r6, [r6, #0]
	pdu_data_tx->sn = _radio.conn_curr->sn;
    9ae0:	001a      	movs	r2, r3
    9ae2:	2308      	movs	r3, #8
    9ae4:	439a      	bics	r2, r3
    9ae6:	0013      	movs	r3, r2
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    9ae8:	40ee      	lsrs	r6, r5
    9aea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9aec:	402e      	ands	r6, r5
    9aee:	4313      	orrs	r3, r2
    9af0:	001d      	movs	r5, r3
    9af2:	2304      	movs	r3, #4
    9af4:	00b6      	lsls	r6, r6, #2
    9af6:	439d      	bics	r5, r3
    9af8:	4335      	orrs	r5, r6
    9afa:	700d      	strb	r5, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    9afc:	f7fd faa2 	bl	7044 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    9b00:	f001 fd54 	bl	b5ac <radio_is_ready>
    9b04:	2800      	cmp	r0, #0
    9b06:	d100      	bne.n	9b0a <isr+0x130e>
    9b08:	e4a7      	b.n	945a <isr+0xc5e>
    9b0a:	f7fe fec8 	bl	889e <isr+0xa2>
		radio_tmr_tifs_set(RADIO_TIFS);
    9b0e:	2096      	movs	r0, #150	; 0x96
    9b10:	f001 fe1c 	bl	b74c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    9b14:	2000      	movs	r0, #0
    9b16:	f001 fd87 	bl	b628 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    9b1a:	f001 fed9 	bl	b8d0 <radio_tmr_end_capture>
    9b1e:	e7d3      	b.n	9ac8 <isr+0x12cc>
	switch (_radio.role) {
    9b20:	7be0      	ldrb	r0, [r4, #15]
    9b22:	b2c0      	uxtb	r0, r0
    9b24:	2804      	cmp	r0, #4
    9b26:	d901      	bls.n	9b2c <isr+0x1330>
    9b28:	f7fe feb9 	bl	889e <isr+0xa2>
    9b2c:	f7f6 fb42 	bl	1b4 <__gnu_thumb1_case_uhi>
    9b30:	00050199 	.word	0x00050199
    9b34:	008f0064 	.word	0x008f0064
    9b38:	008f      	.short	0x008f
	if ((_radio.state == STATE_CLOSE) &&
    9b3a:	2b03      	cmp	r3, #3
    9b3c:	d109      	bne.n	9b52 <isr+0x1356>
	    (_radio.advertiser.chan_map_current != 0)) {
    9b3e:	1d63      	adds	r3, r4, #5
    9b40:	7fdb      	ldrb	r3, [r3, #31]
	if ((_radio.state == STATE_CLOSE) &&
    9b42:	075b      	lsls	r3, r3, #29
    9b44:	d005      	beq.n	9b52 <isr+0x1356>
		adv_setup();
    9b46:	f7fd fc53 	bl	73f0 <adv_setup>
		radio_tx_enable();
    9b4a:	f001 fd17 	bl	b57c <radio_tx_enable>
    9b4e:	f7fe feb4 	bl	88ba <isr+0xbe>
		radio_filter_disable();
    9b52:	f001 fdcb 	bl	b6ec <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    9b56:	7c23      	ldrb	r3, [r4, #16]
    9b58:	2b03      	cmp	r3, #3
    9b5a:	d130      	bne.n	9bbe <isr+0x13c2>
		    (!_radio.advertiser.is_hdcd)) {
    9b5c:	1d63      	adds	r3, r4, #5
    9b5e:	7fdd      	ldrb	r5, [r3, #31]
		if ((_radio.state == STATE_CLOSE) &&
    9b60:	2340      	movs	r3, #64	; 0x40
    9b62:	401d      	ands	r5, r3
    9b64:	d12b      	bne.n	9bbe <isr+0x13c2>
			rand_isr_get(sizeof(random_delay), &random_delay);
    9b66:	ae13      	add	r6, sp, #76	; 0x4c
    9b68:	0031      	movs	r1, r6
    9b6a:	2001      	movs	r0, #1
    9b6c:	f001 fbae 	bl	b2cc <rand_isr_get>
			random_delay %= 10;
    9b70:	7830      	ldrb	r0, [r6, #0]
    9b72:	210a      	movs	r1, #10
    9b74:	f7f6 fb6c 	bl	250 <__aeabi_uidivmod>
			random_delay += 1;
    9b78:	3101      	adds	r1, #1
    9b7a:	b2c8      	uxtb	r0, r1
					HAL_TICKER_US_TO_TICKS(random_delay *
    9b7c:	4abf      	ldr	r2, [pc, #764]	; (9e7c <isr+0x1680>)
    9b7e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    9b80:	7030      	strb	r0, [r6, #0]
					HAL_TICKER_US_TO_TICKS(random_delay *
    9b82:	0029      	movs	r1, r5
    9b84:	f7f6 fc08 	bl	398 <__aeabi_lmul>
    9b88:	4abd      	ldr	r2, [pc, #756]	; (9e80 <isr+0x1684>)
    9b8a:	2307      	movs	r3, #7
    9b8c:	f7f6 fbe4 	bl	358 <__aeabi_uldivmod>
			ticker_status =
    9b90:	4abc      	ldr	r2, [pc, #752]	; (9e84 <isr+0x1688>)
    9b92:	b283      	uxth	r3, r0
    9b94:	9206      	str	r2, [sp, #24]
    9b96:	4abc      	ldr	r2, [pc, #752]	; (9e88 <isr+0x168c>)
    9b98:	9504      	str	r5, [sp, #16]
    9b9a:	9205      	str	r2, [sp, #20]
    9b9c:	9503      	str	r5, [sp, #12]
    9b9e:	9502      	str	r5, [sp, #8]
    9ba0:	9501      	str	r5, [sp, #4]
    9ba2:	9500      	str	r5, [sp, #0]
    9ba4:	2205      	movs	r2, #5
    9ba6:	0029      	movs	r1, r5
    9ba8:	0028      	movs	r0, r5
    9baa:	f7fc f86d 	bl	5c88 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9bae:	2302      	movs	r3, #2
    9bb0:	4398      	bics	r0, r3
    9bb2:	d004      	beq.n	9bbe <isr+0x13c2>
    9bb4:	7ba3      	ldrb	r3, [r4, #14]
    9bb6:	2b05      	cmp	r3, #5
    9bb8:	d001      	beq.n	9bbe <isr+0x13c2>
    9bba:	f7fe fe70 	bl	889e <isr+0xa2>
	_radio.role = ROLE_NONE;
    9bbe:	2400      	movs	r4, #0
    9bc0:	4db2      	ldr	r5, [pc, #712]	; (9e8c <isr+0x1690>)
    9bc2:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    9bc4:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    9bc6:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    9bc8:	f001 fe12 	bl	b7f0 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9bcc:	0022      	movs	r2, r4
    9bce:	0021      	movs	r1, r4
    9bd0:	0020      	movs	r0, r4
    9bd2:	4baf      	ldr	r3, [pc, #700]	; (9e90 <isr+0x1694>)
    9bd4:	f7fb faa2 	bl	511c <mayfly_enqueue>
    9bd8:	1e04      	subs	r4, r0, #0
	LL_ASSERT(!retval);
    9bda:	d001      	beq.n	9be0 <isr+0x13e4>
    9bdc:	f7fe fe5f 	bl	889e <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    9be0:	6828      	ldr	r0, [r5, #0]
    9be2:	0021      	movs	r1, r4
    9be4:	6843      	ldr	r3, [r0, #4]
    9be6:	685b      	ldr	r3, [r3, #4]
    9be8:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    9bea:	2201      	movs	r2, #1
    9bec:	0020      	movs	r0, r4
    9bee:	0011      	movs	r1, r2
    9bf0:	f7fb fa70 	bl	50d4 <mayfly_enable>
    9bf4:	f7fe fe82 	bl	88fc <isr+0x100>
	if (_radio.state == STATE_CLOSE) {
    9bf8:	2b03      	cmp	r3, #3
    9bfa:	d11b      	bne.n	9c34 <isr+0x1438>
		radio_tmr_tifs_set(RADIO_TIFS);
    9bfc:	2096      	movs	r0, #150	; 0x96
    9bfe:	f001 fda5 	bl	b74c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    9c02:	2300      	movs	r3, #0
    9c04:	0019      	movs	r1, r3
    9c06:	001a      	movs	r2, r3
    9c08:	0018      	movs	r0, r3
    9c0a:	f001 fd15 	bl	b638 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    9c0e:	2336      	movs	r3, #54	; 0x36
    9c10:	0022      	movs	r2, r4
    9c12:	33ff      	adds	r3, #255	; 0xff
    9c14:	5ce3      	ldrb	r3, [r4, r3]
    9c16:	32fc      	adds	r2, #252	; 0xfc
    9c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
    9c1a:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    9c1c:	5898      	ldr	r0, [r3, r2]
    9c1e:	3008      	adds	r0, #8
    9c20:	f001 fc8e 	bl	b540 <radio_pkt_rx_set>
		radio_rssi_measure();
    9c24:	f001 fd18 	bl	b658 <radio_rssi_measure>
		_radio.state = STATE_RX;
    9c28:	2301      	movs	r3, #1
    9c2a:	7423      	strb	r3, [r4, #16]
		radio_rx_enable();
    9c2c:	f001 fca0 	bl	b570 <radio_rx_enable>
    9c30:	f7fe fe43 	bl	88ba <isr+0xbe>
		radio_filter_disable();
    9c34:	f001 fd5a 	bl	b6ec <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    9c38:	7c23      	ldrb	r3, [r4, #16]
    9c3a:	2b05      	cmp	r3, #5
    9c3c:	d1bf      	bne.n	9bbe <isr+0x13c2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9c3e:	2000      	movs	r0, #0
    9c40:	2204      	movs	r2, #4
    9c42:	9000      	str	r0, [sp, #0]
    9c44:	0003      	movs	r3, r0
    9c46:	0001      	movs	r1, r0
    9c48:	f7fc f86e 	bl	5d28 <ticker_stop>
    9c4c:	e7b7      	b.n	9bbe <isr+0x13c2>
	if (_radio.conn_curr == 0) {
    9c4e:	0023      	movs	r3, r4
    9c50:	33fc      	adds	r3, #252	; 0xfc
    9c52:	6958      	ldr	r0, [r3, #20]
    9c54:	2800      	cmp	r0, #0
    9c56:	d0b2      	beq.n	9bbe <isr+0x13c2>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    9c58:	0003      	movs	r3, r0
    9c5a:	339b      	adds	r3, #155	; 0x9b
    9c5c:	7819      	ldrb	r1, [r3, #0]
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    9c5e:	2900      	cmp	r1, #0
    9c60:	d010      	beq.n	9c84 <isr+0x1488>
    9c62:	7be3      	ldrb	r3, [r4, #15]
    9c64:	2b03      	cmp	r3, #3
    9c66:	d004      	beq.n	9c72 <isr+0x1476>
    9c68:	0003      	movs	r3, r0
    9c6a:	3338      	adds	r3, #56	; 0x38
    9c6c:	781b      	ldrb	r3, [r3, #0]
    9c6e:	07db      	lsls	r3, r3, #31
    9c70:	d508      	bpl.n	9c84 <isr+0x1488>
			connection_release(_radio.conn_curr);
    9c72:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9c74:	f7fd fa5c 	bl	7130 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    9c78:	6960      	ldr	r0, [r4, #20]
    9c7a:	f7fd fc8b 	bl	7594 <connection_release>
			_radio.conn_curr = NULL;
    9c7e:	2300      	movs	r3, #0
    9c80:	6163      	str	r3, [r4, #20]
    9c82:	e79c      	b.n	9bbe <isr+0x13c2>
	latency_event = _radio.conn_curr->latency_event;
    9c84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    9c86:	930b      	str	r3, [sp, #44]	; 0x2c
	elapsed_event = latency_event + 1;
    9c88:	1c5e      	adds	r6, r3, #1
	if (_radio.packet_counter &&
    9c8a:	0023      	movs	r3, r4
    9c8c:	33ff      	adds	r3, #255	; 0xff
    9c8e:	7d5f      	ldrb	r7, [r3, #21]
	elapsed_event = latency_event + 1;
    9c90:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    9c92:	2f00      	cmp	r7, #0
    9c94:	d07b      	beq.n	9d8e <isr+0x1592>
		if (_radio.role == ROLE_SLAVE) {
    9c96:	7be3      	ldrb	r3, [r4, #15]
    9c98:	2b03      	cmp	r3, #3
    9c9a:	d16e      	bne.n	9d7a <isr+0x157e>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    9c9c:	f001 fe0a 	bl	b8b4 <radio_tmr_aa_restore>
    9ca0:	0007      	movs	r7, r0
						     radio_tmr_ready_get();
    9ca2:	f001 fe0d 	bl	b8c0 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    9ca6:	34fc      	adds	r4, #252	; 0xfc
    9ca8:	6964      	ldr	r4, [r4, #20]
			start_to_address_actual_us = radio_tmr_aa_restore() -
    9caa:	1a3f      	subs	r7, r7, r0
			window_widening_event_us =
    9cac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9cae:	4a79      	ldr	r2, [pc, #484]	; (9e94 <isr+0x1698>)
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    9cb0:	0003      	movs	r3, r0
    9cb2:	3358      	adds	r3, #88	; 0x58
    9cb4:	930c      	str	r3, [sp, #48]	; 0x30
			if (start_to_address_actual_us <=
    9cb6:	429f      	cmp	r7, r3
    9cb8:	d84c      	bhi.n	9d54 <isr+0x1558>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9cba:	2300      	movs	r3, #0
    9cbc:	2100      	movs	r1, #0
    9cbe:	f7f6 fb6b 	bl	398 <__aeabi_lmul>
    9cc2:	4a6f      	ldr	r2, [pc, #444]	; (9e80 <isr+0x1684>)
    9cc4:	2307      	movs	r3, #7
    9cc6:	f7f6 fb47 	bl	358 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    9cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ccc:	4a71      	ldr	r2, [pc, #452]	; (9e94 <isr+0x1698>)
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9cce:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    9cd0:	2100      	movs	r1, #0
    9cd2:	1bd8      	subs	r0, r3, r7
    9cd4:	2300      	movs	r3, #0
    9cd6:	f7f6 fb5f 	bl	398 <__aeabi_lmul>
    9cda:	4a69      	ldr	r2, [pc, #420]	; (9e80 <isr+0x1684>)
    9cdc:	2307      	movs	r3, #7
    9cde:	f7f6 fb3b 	bl	358 <__aeabi_uldivmod>
    9ce2:	b281      	uxth	r1, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    9ce4:	2300      	movs	r3, #0
    9ce6:	64a3      	str	r3, [r4, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    9ce8:	6523      	str	r3, [r4, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    9cea:	0023      	movs	r3, r4
    9cec:	33ec      	adds	r3, #236	; 0xec
    9cee:	681b      	ldr	r3, [r3, #0]
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d03b      	beq.n	9d6c <isr+0x1570>
				if (pdu_data_tx->len ||
    9cf4:	795b      	ldrb	r3, [r3, #5]
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d104      	bne.n	9d04 <isr+0x1508>
				    _radio.conn_curr->packet_tx_head_offset) {
    9cfa:	0023      	movs	r3, r4
    9cfc:	33ff      	adds	r3, #255	; 0xff
				if (pdu_data_tx->len ||
    9cfe:	789b      	ldrb	r3, [r3, #2]
    9d00:	2b00      	cmp	r3, #0
    9d02:	d001      	beq.n	9d08 <isr+0x150c>
					_radio.conn_curr->latency_event = 0;
    9d04:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    9d06:	8563      	strh	r3, [r4, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    9d08:	2200      	movs	r2, #0
    9d0a:	4b60      	ldr	r3, [pc, #384]	; (9e8c <isr+0x1690>)
    9d0c:	33fc      	adds	r3, #252	; 0xfc
    9d0e:	695b      	ldr	r3, [r3, #20]
    9d10:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    9d12:	4c5e      	ldr	r4, [pc, #376]	; (9e8c <isr+0x1690>)
    9d14:	0027      	movs	r7, r4
    9d16:	37fc      	adds	r7, #252	; 0xfc
    9d18:	6978      	ldr	r0, [r7, #20]
    9d1a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d017      	beq.n	9d50 <isr+0x1554>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    9d20:	429e      	cmp	r6, r3
    9d22:	d300      	bcc.n	9d26 <isr+0x152a>
    9d24:	e092      	b.n	9e4c <isr+0x1650>
			_radio.conn_curr->latency_event = 0;
    9d26:	2200      	movs	r2, #0
			_radio.conn_curr->supervision_expire -= elapsed_event;
    9d28:	1b9b      	subs	r3, r3, r6
    9d2a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    9d2c:	8542      	strh	r2, [r0, #42]	; 0x2a
			_radio.conn_curr->supervision_expire -= elapsed_event;
    9d2e:	8603      	strh	r3, [r0, #48]	; 0x30
				force = 1;
    9d30:	3201      	adds	r2, #1
			if (_radio.conn_curr->supervision_expire <= 6) {
    9d32:	2b06      	cmp	r3, #6
    9d34:	d949      	bls.n	9dca <isr+0x15ce>
			else if (_radio.role == ROLE_SLAVE) {
    9d36:	7be3      	ldrb	r3, [r4, #15]
    9d38:	2b03      	cmp	r3, #3
    9d3a:	d109      	bne.n	9d50 <isr+0x1554>
				if (latency_event != 0) {
    9d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d3e:	0017      	movs	r7, r2
    9d40:	2b00      	cmp	r3, #0
    9d42:	d142      	bne.n	9dca <isr+0x15ce>
					force = _radio.conn_curr->slave.force & 0x01;
    9d44:	6d43      	ldr	r3, [r0, #84]	; 0x54
    9d46:	401a      	ands	r2, r3
					_radio.conn_curr->slave.force >>= 1;
    9d48:	40fb      	lsrs	r3, r7
					if (force) {
    9d4a:	2a00      	cmp	r2, #0
    9d4c:	d139      	bne.n	9dc2 <isr+0x15c6>
					_radio.conn_curr->slave.force >>= 1;
    9d4e:	6543      	str	r3, [r0, #84]	; 0x54
	force = 0;
    9d50:	2200      	movs	r2, #0
    9d52:	e03a      	b.n	9dca <isr+0x15ce>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9d54:	2300      	movs	r3, #0
    9d56:	0038      	movs	r0, r7
    9d58:	2100      	movs	r1, #0
    9d5a:	f7f6 fb1d 	bl	398 <__aeabi_lmul>
    9d5e:	4a48      	ldr	r2, [pc, #288]	; (9e80 <isr+0x1684>)
    9d60:	2307      	movs	r3, #7
    9d62:	f7f6 faf9 	bl	358 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    9d66:	2102      	movs	r1, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9d68:	b285      	uxth	r5, r0
    9d6a:	e7bb      	b.n	9ce4 <isr+0x14e8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    9d6c:	0023      	movs	r3, r4
    9d6e:	3338      	adds	r3, #56	; 0x38
    9d70:	781b      	ldrb	r3, [r3, #0]
    9d72:	07db      	lsls	r3, r3, #31
    9d74:	d5c8      	bpl.n	9d08 <isr+0x150c>
				_radio.conn_curr->latency_event =
    9d76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    9d78:	e7c5      	b.n	9d06 <isr+0x150a>
		} else if (reason_peer) {
    9d7a:	2900      	cmp	r1, #0
    9d7c:	d005      	beq.n	9d8a <isr+0x158e>
			_radio.conn_curr->master.terminate_ack = 1;
    9d7e:	2301      	movs	r3, #1
	ticks_drift_minus = 0;
    9d80:	2100      	movs	r1, #0
			_radio.conn_curr->master.terminate_ack = 1;
    9d82:	3038      	adds	r0, #56	; 0x38
    9d84:	7802      	ldrb	r2, [r0, #0]
    9d86:	4313      	orrs	r3, r2
    9d88:	7003      	strb	r3, [r0, #0]
	ticks_drift_plus = 0;
    9d8a:	000d      	movs	r5, r1
    9d8c:	e7bc      	b.n	9d08 <isr+0x150c>
	else if (_radio.conn_curr->connect_expire) {
    9d8e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    9d90:	2d00      	cmp	r5, #0
    9d92:	d00f      	beq.n	9db4 <isr+0x15b8>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    9d94:	42ae      	cmp	r6, r5
    9d96:	d204      	bcs.n	9da2 <isr+0x15a6>
			_radio.conn_curr->connect_expire -= elapsed_event;
    9d98:	1bad      	subs	r5, r5, r6
    9d9a:	8585      	strh	r5, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    9d9c:	003d      	movs	r5, r7
    9d9e:	0029      	movs	r1, r5
    9da0:	e7b7      	b.n	9d12 <isr+0x1516>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    9da2:	213e      	movs	r1, #62	; 0x3e
			connection_release(_radio.conn_curr);
    9da4:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    9da6:	f7fd f9c3 	bl	7130 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    9daa:	6960      	ldr	r0, [r4, #20]
    9dac:	f7fd fbf2 	bl	7594 <connection_release>
			_radio.conn_curr = NULL;
    9db0:	6167      	str	r7, [r4, #20]
    9db2:	e704      	b.n	9bbe <isr+0x13c2>
		if (!_radio.conn_curr->supervision_expire) {
    9db4:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    9db6:	2900      	cmp	r1, #0
    9db8:	d1f1      	bne.n	9d9e <isr+0x15a2>
			_radio.conn_curr->supervision_expire =
    9dba:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
	ticks_drift_plus = 0;
    9dbc:	000d      	movs	r5, r1
			_radio.conn_curr->supervision_expire =
    9dbe:	8603      	strh	r3, [r0, #48]	; 0x30
    9dc0:	e7a7      	b.n	9d12 <isr+0x1516>
						_radio.conn_curr->slave.force |=
    9dc2:	2780      	movs	r7, #128	; 0x80
    9dc4:	063f      	lsls	r7, r7, #24
    9dc6:	433b      	orrs	r3, r7
    9dc8:	6543      	str	r3, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    9dca:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d003      	beq.n	9dd8 <isr+0x15dc>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    9dd0:	429e      	cmp	r6, r3
    9dd2:	d244      	bcs.n	9e5e <isr+0x1662>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    9dd4:	1b9e      	subs	r6, r3, r6
    9dd6:	8686      	strh	r6, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    9dd8:	0003      	movs	r3, r0
    9dda:	335d      	adds	r3, #93	; 0x5d
    9ddc:	781e      	ldrb	r6, [r3, #0]
    9dde:	3b01      	subs	r3, #1
    9de0:	781b      	ldrb	r3, [r3, #0]
    9de2:	429e      	cmp	r6, r3
    9de4:	d007      	beq.n	9df6 <isr+0x15fa>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    9de6:	0003      	movs	r3, r0
    9de8:	335e      	adds	r3, #94	; 0x5e
    9dea:	781b      	ldrb	r3, [r3, #0]
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    9dec:	3b01      	subs	r3, #1
    9dee:	2b01      	cmp	r3, #1
    9df0:	d801      	bhi.n	9df6 <isr+0x15fa>
		_radio.conn_curr->latency_event = 0;
    9df2:	2300      	movs	r3, #0
    9df4:	8543      	strh	r3, [r0, #42]	; 0x2a
    9df6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    9df8:	2a00      	cmp	r2, #0
    9dfa:	d103      	bne.n	9e04 <isr+0x1608>
    9dfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	lazy = 0;
    9dfe:	0017      	movs	r7, r2
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    9e00:	42b3      	cmp	r3, r6
    9e02:	d001      	beq.n	9e08 <isr+0x160c>
		lazy = _radio.conn_curr->latency_event + 1;
    9e04:	3301      	adds	r3, #1
    9e06:	b29f      	uxth	r7, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    9e08:	002b      	movs	r3, r5
    9e0a:	430b      	orrs	r3, r1
    9e0c:	433b      	orrs	r3, r7
    9e0e:	d102      	bne.n	9e16 <isr+0x161a>
	    (lazy != 0) || (force != 0)) {
    9e10:	2a00      	cmp	r2, #0
    9e12:	d100      	bne.n	9e16 <isr+0x161a>
    9e14:	e6d3      	b.n	9bbe <isr+0x13c2>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    9e16:	8c06      	ldrh	r6, [r0, #32]
		ticker_status =
    9e18:	2000      	movs	r0, #0
    9e1a:	4b1f      	ldr	r3, [pc, #124]	; (9e98 <isr+0x169c>)
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    9e1c:	3607      	adds	r6, #7
    9e1e:	b2f6      	uxtb	r6, r6
		ticker_status =
    9e20:	9305      	str	r3, [sp, #20]
    9e22:	9204      	str	r2, [sp, #16]
    9e24:	9100      	str	r1, [sp, #0]
    9e26:	002b      	movs	r3, r5
				      (void *)(u32_t)ticker_id);
    9e28:	9606      	str	r6, [sp, #24]
		ticker_status =
    9e2a:	9703      	str	r7, [sp, #12]
    9e2c:	9002      	str	r0, [sp, #8]
    9e2e:	9001      	str	r0, [sp, #4]
    9e30:	0032      	movs	r2, r6
    9e32:	0001      	movs	r1, r0
    9e34:	f7fb ff28 	bl	5c88 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9e38:	2302      	movs	r3, #2
    9e3a:	4398      	bics	r0, r3
    9e3c:	d100      	bne.n	9e40 <isr+0x1644>
    9e3e:	e6be      	b.n	9bbe <isr+0x13c2>
    9e40:	7ba3      	ldrb	r3, [r4, #14]
    9e42:	429e      	cmp	r6, r3
    9e44:	d100      	bne.n	9e48 <isr+0x164c>
    9e46:	e6ba      	b.n	9bbe <isr+0x13c2>
    9e48:	f7fe fd29 	bl	889e <isr+0xa2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9e4c:	2108      	movs	r1, #8
    9e4e:	f7fd f96f 	bl	7130 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    9e52:	6978      	ldr	r0, [r7, #20]
    9e54:	f7fd fb9e 	bl	7594 <connection_release>
			_radio.conn_curr = NULL;
    9e58:	2300      	movs	r3, #0
    9e5a:	617b      	str	r3, [r7, #20]
    9e5c:	e6af      	b.n	9bbe <isr+0x13c2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9e5e:	2122      	movs	r1, #34	; 0x22
    9e60:	e707      	b.n	9c72 <isr+0x1476>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    9e62:	3b04      	subs	r3, #4
    9e64:	2b01      	cmp	r3, #1
    9e66:	d901      	bls.n	9e6c <isr+0x1670>
    9e68:	f7fe fd19 	bl	889e <isr+0xa2>
		_radio.state = STATE_NONE;
    9e6c:	2300      	movs	r3, #0
    9e6e:	7423      	strb	r3, [r4, #16]
    9e70:	f7fe fd44 	bl	88fc <isr+0x100>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9e74:	359b      	adds	r5, #155	; 0x9b
    9e76:	2328      	movs	r3, #40	; 0x28
    9e78:	e517      	b.n	98aa <isr+0x10ae>
    9e7a:	46c0      	nop			; (mov r8, r8)
    9e7c:	d4a51000 	.word	0xd4a51000
    9e80:	1afd498d 	.word	0x1afd498d
    9e84:	00000f48 	.word	0x00000f48
    9e88:	00007769 	.word	0x00007769
    9e8c:	20000298 	.word	0x20000298
    9e90:	200023a8 	.word	0x200023a8
    9e94:	3b9aca00 	.word	0x3b9aca00
    9e98:	0000774d 	.word	0x0000774d

00009e9c <mayfly_xtal_stop_calc>:
{
    9e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9e9e:	2302      	movs	r3, #2
	ticker_id_next = 0xff;
    9ea0:	2523      	movs	r5, #35	; 0x23
{
    9ea2:	b091      	sub	sp, #68	; 0x44
	ticker_id_next = 0xff;
    9ea4:	aa02      	add	r2, sp, #8
    9ea6:	18ad      	adds	r5, r5, r2
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9ea8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    9eaa:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    9eac:	2300      	movs	r3, #0
{
    9eae:	0004      	movs	r4, r0
	struct connection *conn_curr = NULL;
    9eb0:	930c      	str	r3, [sp, #48]	; 0x30
	struct connection *conn_next = NULL;
    9eb2:	930d      	str	r3, [sp, #52]	; 0x34
	ticker_id_next = 0xff;
    9eb4:	702a      	strb	r2, [r5, #0]
	ticks_to_expire = 0;
    9eb6:	930e      	str	r3, [sp, #56]	; 0x38
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    9eb8:	ab0b      	add	r3, sp, #44	; 0x2c
    9eba:	9302      	str	r3, [sp, #8]
    9ebc:	4b6e      	ldr	r3, [pc, #440]	; (a078 <mayfly_xtal_stop_calc+0x1dc>)
    9ebe:	002a      	movs	r2, r5
    9ec0:	9301      	str	r3, [sp, #4]
    9ec2:	ab0e      	add	r3, sp, #56	; 0x38
    9ec4:	9300      	str	r3, [sp, #0]
    9ec6:	2101      	movs	r1, #1
    9ec8:	ab0f      	add	r3, sp, #60	; 0x3c
    9eca:	2000      	movs	r0, #0
    9ecc:	f7fb ff5a 	bl	5d84 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    9ed0:	2802      	cmp	r0, #2
    9ed2:	d009      	beq.n	9ee8 <mayfly_xtal_stop_calc+0x4c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    9ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d00a      	beq.n	9ef0 <mayfly_xtal_stop_calc+0x54>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9eda:	b662      	cpsie	i
    9edc:	2004      	movs	r0, #4
    9ede:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ee0:	2101      	movs	r1, #1
    9ee2:	2000      	movs	r0, #0
    9ee4:	f7fb ffb4 	bl	5e50 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9eea:	2b02      	cmp	r3, #2
    9eec:	d0f8      	beq.n	9ee0 <mayfly_xtal_stop_calc+0x44>
    9eee:	e7f1      	b.n	9ed4 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    9ef0:	782b      	ldrb	r3, [r5, #0]
				    _radio.connection_count));
    9ef2:	2bff      	cmp	r3, #255	; 0xff
    9ef4:	d005      	beq.n	9f02 <mayfly_xtal_stop_calc+0x66>
    9ef6:	4a61      	ldr	r2, [pc, #388]	; (a07c <mayfly_xtal_stop_calc+0x1e0>)
    9ef8:	32ff      	adds	r2, #255	; 0xff
    9efa:	7b52      	ldrb	r2, [r2, #13]
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    9efc:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    9efe:	4293      	cmp	r3, r2
    9f00:	dada      	bge.n	9eb8 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    9f02:	1f5a      	subs	r2, r3, #5
    9f04:	b2d2      	uxtb	r2, r2
    9f06:	4f5e      	ldr	r7, [pc, #376]	; (a080 <mayfly_xtal_stop_calc+0x1e4>)
    9f08:	2af9      	cmp	r2, #249	; 0xf9
    9f0a:	d805      	bhi.n	9f18 <mayfly_xtal_stop_calc+0x7c>
				_radio.connection_count))) {
    9f0c:	4a5b      	ldr	r2, [pc, #364]	; (a07c <mayfly_xtal_stop_calc+0x1e0>)
    9f0e:	32ff      	adds	r2, #255	; 0xff
    9f10:	7b52      	ldrb	r2, [r2, #13]
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    9f12:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    9f14:	4293      	cmp	r3, r2
    9f16:	db07      	blt.n	9f28 <mayfly_xtal_stop_calc+0x8c>
		if (s_xtal_retained) {
    9f18:	783b      	ldrb	r3, [r7, #0]
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	d002      	beq.n	9f24 <mayfly_xtal_stop_calc+0x88>
    9f1e:	2001      	movs	r0, #1
    9f20:	f7fd f858 	bl	6fd4 <mayfly_xtal_retain.part.15>
}
    9f24:	b011      	add	sp, #68	; 0x44
    9f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    9f28:	b2e0      	uxtb	r0, r4
    9f2a:	a90c      	add	r1, sp, #48	; 0x30
    9f2c:	f7fd f834 	bl	6f98 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    9f30:	2800      	cmp	r0, #0
    9f32:	d0d2      	beq.n	9eda <mayfly_xtal_stop_calc+0x3e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    9f34:	6802      	ldr	r2, [r0, #0]
    9f36:	6841      	ldr	r1, [r0, #4]
    9f38:	2a00      	cmp	r2, #0
    9f3a:	da2b      	bge.n	9f94 <mayfly_xtal_stop_calc+0xf8>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    9f3c:	6883      	ldr	r3, [r0, #8]
    9f3e:	428b      	cmp	r3, r1
    9f40:	d200      	bcs.n	9f44 <mayfly_xtal_stop_calc+0xa8>
    9f42:	000b      	movs	r3, r1
	ticks_slot_abs += hdr_curr->ticks_slot;
    9f44:	68c2      	ldr	r2, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    9f46:	a90d      	add	r1, sp, #52	; 0x34
	ticks_slot_abs += hdr_curr->ticks_slot;
    9f48:	189b      	adds	r3, r3, r2
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    9f4a:	7828      	ldrb	r0, [r5, #0]
	ticks_slot_abs += hdr_curr->ticks_slot;
    9f4c:	9309      	str	r3, [sp, #36]	; 0x24
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    9f4e:	f7fd f823 	bl	6f98 <hdr_conn_get>
    9f52:	1e04      	subs	r4, r0, #0
	LL_ASSERT(hdr_next);
    9f54:	d0c1      	beq.n	9eda <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    9f56:	6843      	ldr	r3, [r0, #4]
    9f58:	6886      	ldr	r6, [r0, #8]
    9f5a:	429e      	cmp	r6, r3
    9f5c:	d200      	bcs.n	9f60 <mayfly_xtal_stop_calc+0xc4>
    9f5e:	001e      	movs	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    9f60:	6823      	ldr	r3, [r4, #0]
    9f62:	2b00      	cmp	r3, #0
    9f64:	da05      	bge.n	9f72 <mayfly_xtal_stop_calc+0xd6>
		ticks_to_expire -=
    9f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			(hdr_next->ticks_xtal_to_start &
    9f68:	005b      	lsls	r3, r3, #1
		ticks_to_expire -=
    9f6a:	18b2      	adds	r2, r6, r2
			(hdr_next->ticks_xtal_to_start &
    9f6c:	085b      	lsrs	r3, r3, #1
		ticks_to_expire -=
    9f6e:	1ad3      	subs	r3, r2, r3
    9f70:	930e      	str	r3, [sp, #56]	; 0x38
	if (ticks_to_expire >
    9f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9f76:	3331      	adds	r3, #49	; 0x31
    9f78:	4293      	cmp	r3, r2
    9f7a:	d210      	bcs.n	9f9e <mayfly_xtal_stop_calc+0x102>
		if (s_xtal_retained) {
    9f7c:	783b      	ldrb	r3, [r7, #0]
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d002      	beq.n	9f88 <mayfly_xtal_stop_calc+0xec>
    9f82:	2001      	movs	r0, #1
    9f84:	f7fd f826 	bl	6fd4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    9f88:	782a      	ldrb	r2, [r5, #0]
    9f8a:	2101      	movs	r1, #1
    9f8c:	0020      	movs	r0, r4
    9f8e:	f7fd f8ab 	bl	70e8 <prepare_normal_set>
    9f92:	e7c7      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    9f94:	000b      	movs	r3, r1
    9f96:	4291      	cmp	r1, r2
    9f98:	d2d4      	bcs.n	9f44 <mayfly_xtal_stop_calc+0xa8>
    9f9a:	0013      	movs	r3, r2
    9f9c:	e7d2      	b.n	9f44 <mayfly_xtal_stop_calc+0xa8>
		if (!s_xtal_retained) {
    9f9e:	7839      	ldrb	r1, [r7, #0]
    9fa0:	2900      	cmp	r1, #0
    9fa2:	d108      	bne.n	9fb6 <mayfly_xtal_stop_calc+0x11a>
			s_xtal_retained = 1;
    9fa4:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    9fa6:	4b37      	ldr	r3, [pc, #220]	; (a084 <mayfly_xtal_stop_calc+0x1e8>)
    9fa8:	000a      	movs	r2, r1
			s_xtal_retained = 1;
    9faa:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    9fac:	f7fb f8b6 	bl	511c <mayfly_enqueue>
			LL_ASSERT(!retval);
    9fb0:	2800      	cmp	r0, #0
    9fb2:	d000      	beq.n	9fb6 <mayfly_xtal_stop_calc+0x11a>
    9fb4:	e791      	b.n	9eda <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    9fb6:	6823      	ldr	r3, [r4, #0]
    9fb8:	2b00      	cmp	r3, #0
    9fba:	db14      	blt.n	9fe6 <mayfly_xtal_stop_calc+0x14a>
    9fbc:	429e      	cmp	r6, r3
    9fbe:	d212      	bcs.n	9fe6 <mayfly_xtal_stop_calc+0x14a>
			ticker_status =
    9fc0:	2000      	movs	r0, #0
    9fc2:	4931      	ldr	r1, [pc, #196]	; (a088 <mayfly_xtal_stop_calc+0x1ec>)
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    9fc4:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    9fc6:	b29b      	uxth	r3, r3
			ticker_status =
    9fc8:	782a      	ldrb	r2, [r5, #0]
    9fca:	9105      	str	r1, [sp, #20]
    9fcc:	9302      	str	r3, [sp, #8]
    9fce:	9406      	str	r4, [sp, #24]
    9fd0:	9004      	str	r0, [sp, #16]
    9fd2:	9003      	str	r0, [sp, #12]
    9fd4:	9001      	str	r0, [sp, #4]
    9fd6:	9000      	str	r0, [sp, #0]
    9fd8:	2101      	movs	r1, #1
    9fda:	f7fb fe55 	bl	5c88 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9fde:	2302      	movs	r3, #2
    9fe0:	4398      	bics	r0, r3
    9fe2:	d000      	beq.n	9fe6 <mayfly_xtal_stop_calc+0x14a>
    9fe4:	e779      	b.n	9eda <mayfly_xtal_stop_calc+0x3e>
		if (!conn_curr || !conn_next) {
    9fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9fe8:	2d00      	cmp	r5, #0
    9fea:	d09b      	beq.n	9f24 <mayfly_xtal_stop_calc+0x88>
    9fec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9fee:	2c00      	cmp	r4, #0
    9ff0:	d098      	beq.n	9f24 <mayfly_xtal_stop_calc+0x88>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    9ff2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    9ff4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9ff6:	4298      	cmp	r0, r3
    9ff8:	d000      	beq.n	9ffc <mayfly_xtal_stop_calc+0x160>
    9ffa:	e793      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    9ffc:	2324      	movs	r3, #36	; 0x24
    9ffe:	4a23      	ldr	r2, [pc, #140]	; (a08c <mayfly_xtal_stop_calc+0x1f0>)
    a000:	33ff      	adds	r3, #255	; 0xff
    a002:	2100      	movs	r1, #0
    a004:	f7f6 f9c8 	bl	398 <__aeabi_lmul>
    a008:	4a21      	ldr	r2, [pc, #132]	; (a090 <mayfly_xtal_stop_calc+0x1f4>)
    a00a:	2307      	movs	r3, #7
    a00c:	f7f6 f9a4 	bl	358 <__aeabi_uldivmod>
			while (ticks_to_expire > ticks_conn_interval) {
    a010:	2200      	movs	r2, #0
    a012:	2101      	movs	r1, #1
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    a014:	0200      	lsls	r0, r0, #8
    a016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a018:	0a00      	lsrs	r0, r0, #8
			while (ticks_to_expire > ticks_conn_interval) {
    a01a:	4298      	cmp	r0, r3
    a01c:	d318      	bcc.n	a050 <mayfly_xtal_stop_calc+0x1b4>
    a01e:	2a00      	cmp	r2, #0
    a020:	d000      	beq.n	a024 <mayfly_xtal_stop_calc+0x188>
    a022:	930e      	str	r3, [sp, #56]	; 0x38
			if (conn_curr->role && !conn_next->role &&
    a024:	7f69      	ldrb	r1, [r5, #29]
    a026:	7f62      	ldrb	r2, [r4, #29]
    a028:	297f      	cmp	r1, #127	; 0x7f
    a02a:	d914      	bls.n	a056 <mayfly_xtal_stop_calc+0x1ba>
    a02c:	2a7f      	cmp	r2, #127	; 0x7f
    a02e:	d900      	bls.n	a032 <mayfly_xtal_stop_calc+0x196>
    a030:	e778      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
			     (ticks_slot_abs +
    a032:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a034:	3214      	adds	r2, #20
			if (conn_curr->role && !conn_next->role &&
    a036:	429a      	cmp	r2, r3
    a038:	d800      	bhi.n	a03c <mayfly_xtal_stop_calc+0x1a0>
    a03a:	e773      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_curr);
    a03c:	0028      	movs	r0, r5
    a03e:	f7fc fd37 	bl	6ab0 <conn_update_req>
				if (status == 2) {
    a042:	2802      	cmp	r0, #2
    a044:	d000      	beq.n	a048 <mayfly_xtal_stop_calc+0x1ac>
    a046:	e76d      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_next);
    a048:	980d      	ldr	r0, [sp, #52]	; 0x34
					conn_update_req(conn_curr);
    a04a:	f7fc fd31 	bl	6ab0 <conn_update_req>
    a04e:	e769      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
				ticks_to_expire -= ticks_conn_interval;
    a050:	1a1b      	subs	r3, r3, r0
    a052:	000a      	movs	r2, r1
    a054:	e7e1      	b.n	a01a <mayfly_xtal_stop_calc+0x17e>
			} else if (!conn_curr->role && conn_next->role &&
    a056:	2a7f      	cmp	r2, #127	; 0x7f
    a058:	d800      	bhi.n	a05c <mayfly_xtal_stop_calc+0x1c0>
    a05a:	e763      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
				    (ticks_slot_abs +
    a05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a05e:	3214      	adds	r2, #20
			} else if (!conn_curr->role && conn_next->role &&
    a060:	429a      	cmp	r2, r3
    a062:	d800      	bhi.n	a066 <mayfly_xtal_stop_calc+0x1ca>
    a064:	e75e      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_next);
    a066:	0020      	movs	r0, r4
    a068:	f7fc fd22 	bl	6ab0 <conn_update_req>
				if (status == 2) {
    a06c:	2802      	cmp	r0, #2
    a06e:	d000      	beq.n	a072 <mayfly_xtal_stop_calc+0x1d6>
    a070:	e758      	b.n	9f24 <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_curr);
    a072:	980c      	ldr	r0, [sp, #48]	; 0x30
    a074:	e7e9      	b.n	a04a <mayfly_xtal_stop_calc+0x1ae>
    a076:	46c0      	nop			; (mov r8, r8)
    a078:	00006a19 	.word	0x00006a19
    a07c:	20000298 	.word	0x20000298
    a080:	2000049c 	.word	0x2000049c
    a084:	20002408 	.word	0x20002408
    a088:	00006a1d 	.word	0x00006a1d
    a08c:	09ce5400 	.word	0x09ce5400
    a090:	1afd498d 	.word	0x1afd498d

0000a094 <event_master>:
{
    a094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a096:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    a098:	4b49      	ldr	r3, [pc, #292]	; (a1c0 <event_master+0x12c>)
{
    a09a:	0006      	movs	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    a09c:	7bdd      	ldrb	r5, [r3, #15]
    a09e:	b2ed      	uxtb	r5, r5
    a0a0:	2d00      	cmp	r5, #0
    a0a2:	d002      	beq.n	a0aa <event_master+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a0a4:	b662      	cpsie	i
    a0a6:	2004      	movs	r0, #4
    a0a8:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    a0aa:	7b1a      	ldrb	r2, [r3, #12]
    a0ac:	8c21      	ldrh	r1, [r4, #32]
    a0ae:	b2d2      	uxtb	r2, r2
    a0b0:	3107      	adds	r1, #7
    a0b2:	428a      	cmp	r2, r1
    a0b4:	d1f6      	bne.n	a0a4 <event_master+0x10>
	_radio.role = ROLE_MASTER;
    a0b6:	2704      	movs	r7, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    a0b8:	b2d2      	uxtb	r2, r2
	_radio.role = ROLE_MASTER;
    a0ba:	73df      	strb	r7, [r3, #15]
	_radio.state = STATE_TX;
    a0bc:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    a0be:	731d      	strb	r5, [r3, #12]
	_radio.ticker_id_event =
    a0c0:	735a      	strb	r2, [r3, #13]
	_radio.packet_counter = 0;
    a0c2:	001a      	movs	r2, r3
	_radio.state = STATE_TX;
    a0c4:	7418      	strb	r0, [r3, #16]
	_radio.packet_counter = 0;
    a0c6:	32ff      	adds	r2, #255	; 0xff
	_radio.ticks_anchor = ticks_at_expire;
    a0c8:	605e      	str	r6, [r3, #4]
	_radio.conn_curr = conn;
    a0ca:	33fc      	adds	r3, #252	; 0xfc
	_radio.packet_counter = 0;
    a0cc:	7555      	strb	r5, [r2, #21]
	_radio.crc_expire = 0;
    a0ce:	7595      	strb	r5, [r2, #22]
	_radio.conn_curr = conn;
    a0d0:	615c      	str	r4, [r3, #20]
	conn->latency_event = conn->latency_prepare;
    a0d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    a0d4:	8525      	strh	r5, [r4, #40]	; 0x28
	conn->latency_event = conn->latency_prepare;
    a0d6:	8563      	strh	r3, [r4, #42]	; 0x2a
	packet_tx_enqueue(2);
    a0d8:	f7fd fa0c 	bl	74f4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    a0dc:	a901      	add	r1, sp, #4
    a0de:	0020      	movs	r0, r4
    a0e0:	f7fe fb20 	bl	8724 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    a0e4:	0021      	movs	r1, r4
    a0e6:	2201      	movs	r2, #1
    a0e8:	31a8      	adds	r1, #168	; 0xa8
    a0ea:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    a0ec:	7809      	ldrb	r1, [r1, #0]
	pdu_data_tx->sn = conn->sn;
    a0ee:	4013      	ands	r3, r2
    a0f0:	00d8      	lsls	r0, r3, #3
    a0f2:	9b01      	ldr	r3, [sp, #4]
    a0f4:	3207      	adds	r2, #7
    a0f6:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
    a0f8:	0849      	lsrs	r1, r1, #1
	pdu_data_tx->sn = conn->sn;
    a0fa:	4393      	bics	r3, r2
	pdu_data_tx->nesn = conn->nesn;
    a0fc:	4303      	orrs	r3, r0
    a0fe:	43bb      	bics	r3, r7
    a100:	0027      	movs	r7, r4
    a102:	3a07      	subs	r2, #7
    a104:	4011      	ands	r1, r2
    a106:	0089      	lsls	r1, r1, #2
    a108:	9a01      	ldr	r2, [sp, #4]
    a10a:	430b      	orrs	r3, r1
    a10c:	7013      	strb	r3, [r2, #0]
	connection_configure(conn);
    a10e:	0020      	movs	r0, r4
    a110:	f7fe fa34 	bl	857c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    a114:	2096      	movs	r0, #150	; 0x96
    a116:	f001 fb19 	bl	b74c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    a11a:	0028      	movs	r0, r5
    a11c:	f001 fa84 	bl	b628 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    a120:	9901      	ldr	r1, [sp, #4]
    a122:	0020      	movs	r0, r4
    a124:	f7fc ff8e 	bl	7044 <tx_packet_set>
	if (conn->data_chan_sel) {
    a128:	7f63      	ldrb	r3, [r4, #29]
    a12a:	3717      	adds	r7, #23
    a12c:	069d      	lsls	r5, r3, #26
    a12e:	065b      	lsls	r3, r3, #25
    a130:	d520      	bpl.n	a174 <event_master+0xe0>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    a132:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    a134:	0eab      	lsrs	r3, r5, #26
    a136:	3801      	subs	r0, #1
    a138:	8be1      	ldrh	r1, [r4, #30]
    a13a:	b280      	uxth	r0, r0
    a13c:	003a      	movs	r2, r7
    a13e:	f7fd fd6d 	bl	7c1c <chan_sel_2>
	chan_set(data_chan_use);
    a142:	f7fd f939 	bl	73b8 <chan_set>
		remainder_us = radio_tmr_start(1,
    a146:	0031      	movs	r1, r6
    a148:	4d1d      	ldr	r5, [pc, #116]	; (a1c0 <event_master+0x12c>)
    a14a:	3109      	adds	r1, #9
    a14c:	68aa      	ldr	r2, [r5, #8]
    a14e:	2001      	movs	r0, #1
    a150:	f001 fb04 	bl	b75c <radio_tmr_start>
		radio_tmr_end_capture();
    a154:	f001 fbbc 	bl	b8d0 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    a158:	8c21      	ldrh	r1, [r4, #32]
    a15a:	0032      	movs	r2, r6
    a15c:	3107      	adds	r1, #7
    a15e:	b2c9      	uxtb	r1, r1
    a160:	0020      	movs	r0, r4
    a162:	f7fd fd9b 	bl	7c9c <preempt_calc>
	if (0 !=
    a166:	2800      	cmp	r0, #0
    a168:	d020      	beq.n	a1ac <event_master+0x118>
		_radio.state = STATE_STOP;
    a16a:	2304      	movs	r3, #4
    a16c:	742b      	strb	r3, [r5, #16]
		radio_disable();
    a16e:	f001 fa0b 	bl	b588 <radio_disable>
}
    a172:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    a174:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    a176:	7fa0      	ldrb	r0, [r4, #30]
    a178:	3301      	adds	r3, #1
    a17a:	4358      	muls	r0, r3
    a17c:	7fe3      	ldrb	r3, [r4, #31]
    a17e:	2125      	movs	r1, #37	; 0x25
    a180:	18c0      	adds	r0, r0, r3
    a182:	f7f6 f8c5 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    a186:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    a188:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    a18a:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    a18c:	08c3      	lsrs	r3, r0, #3
    a18e:	5cfb      	ldrb	r3, [r7, r3]
    a190:	4011      	ands	r1, r2
    a192:	410b      	asrs	r3, r1
    a194:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    a196:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    a198:	4213      	tst	r3, r2
    a19a:	d1d2      	bne.n	a142 <event_master+0xae>
		chan_index = chan_next % chan_count;
    a19c:	0029      	movs	r1, r5
    a19e:	f7f6 f857 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    a1a2:	0038      	movs	r0, r7
		chan_index = chan_next % chan_count;
    a1a4:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    a1a6:	f7fc fc48 	bl	6a3a <chan_sel_remap>
    a1aa:	e7ca      	b.n	a142 <event_master+0xae>
		ticker_status =
    a1ac:	0003      	movs	r3, r0
    a1ae:	4a05      	ldr	r2, [pc, #20]	; (a1c4 <event_master+0x130>)
    a1b0:	0001      	movs	r1, r0
    a1b2:	f7fb fe1d 	bl	5df0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a1b6:	2302      	movs	r3, #2
    a1b8:	4398      	bics	r0, r3
    a1ba:	d000      	beq.n	a1be <event_master+0x12a>
    a1bc:	e772      	b.n	a0a4 <event_master+0x10>
    a1be:	e7d8      	b.n	a172 <event_master+0xde>
    a1c0:	20000298 	.word	0x20000298
    a1c4:	00006f7d 	.word	0x00006f7d

0000a1c8 <radio_init>:
{
    a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ca:	b087      	sub	sp, #28
    a1cc:	9201      	str	r2, [sp, #4]
    a1ce:	aa0c      	add	r2, sp, #48	; 0x30
    a1d0:	7816      	ldrb	r6, [r2, #0]
    a1d2:	aa0d      	add	r2, sp, #52	; 0x34
    a1d4:	8817      	ldrh	r7, [r2, #0]
    a1d6:	aa0e      	add	r2, sp, #56	; 0x38
    a1d8:	8812      	ldrh	r2, [r2, #0]
    a1da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    a1dc:	9205      	str	r2, [sp, #20]
    a1de:	aa10      	add	r2, sp, #64	; 0x40
    a1e0:	8812      	ldrh	r2, [r2, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    a1e2:	2482      	movs	r4, #130	; 0x82
{
    a1e4:	9202      	str	r2, [sp, #8]
	_radio.hf_clock = hf_clock;
    a1e6:	4a35      	ldr	r2, [pc, #212]	; (a2bc <radio_init+0xf4>)
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    a1e8:	0064      	lsls	r4, r4, #1
	_radio.hf_clock = hf_clock;
    a1ea:	6010      	str	r0, [r2, #0]
	_radio.sca = sca;
    a1ec:	0010      	movs	r0, r2
    a1ee:	30ff      	adds	r0, #255	; 0xff
    a1f0:	7741      	strb	r1, [r0, #29]
	mem_radio_end = mem_radio + mem_size;
    a1f2:	9902      	ldr	r1, [sp, #8]
    a1f4:	1869      	adds	r1, r5, r1
    a1f6:	9103      	str	r1, [sp, #12]
	_radio.connection_count = connection_count_max;
    a1f8:	4669      	mov	r1, sp
    a1fa:	7909      	ldrb	r1, [r1, #4]
    a1fc:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
    a1fe:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    a200:	9901      	ldr	r1, [sp, #4]
	_radio.conn_pool = mem_radio;
    a202:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    a204:	434c      	muls	r4, r1
	_radio.conn_pool = mem_radio;
    a206:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    a208:	192c      	adds	r4, r5, r4
	tx_count_max += 1;
    a20a:	1c75      	adds	r5, r6, #1
	rx_count_max += 3;
    a20c:	1cd9      	adds	r1, r3, #3
	tx_count_max += 1;
    a20e:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
    a210:	3304      	adds	r3, #4
	tx_count_max += 1;
    a212:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
    a214:	b2dd      	uxtb	r5, r3
    a216:	239a      	movs	r3, #154	; 0x9a
	_radio.packet_tx_count = (tx_count_max + 1);
    a218:	3602      	adds	r6, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    a21a:	005b      	lsls	r3, r3, #1
    a21c:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    a21e:	b2f6      	uxtb	r6, r6
    a220:	3334      	adds	r3, #52	; 0x34
    a222:	54d6      	strb	r6, [r2, r3]
	rx_count_max += 3;
    a224:	b2c9      	uxtb	r1, r1
	_radio.link_rx_data_quota = rx_count_max;
    a226:	3b20      	subs	r3, #32
    a228:	54d1      	strb	r1, [r2, r3]
		(sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);
    a22a:	00ab      	lsls	r3, r5, #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    a22c:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx = (void *)mem_radio;
    a22e:	6344      	str	r4, [r0, #52]	; 0x34
	mem_radio +=
    a230:	18e4      	adds	r4, r4, r3
	_radio.pkt_tx = (void *)mem_radio;
    a232:	6644      	str	r4, [r0, #100]	; 0x64
	_radio.packet_data_octets_max = packet_data_octets_max;
    a234:	32fe      	adds	r2, #254	; 0xfe
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    a236:	19a4      	adds	r4, r4, r6
	    (offsetof(struct pdu_data, lldata) +
    a238:	1cfb      	adds	r3, r7, #3
	_radio.pkt_release = (void *)mem_radio;
    a23a:	6684      	str	r4, [r0, #104]	; 0x68
	_radio.packet_data_octets_max = packet_data_octets_max;
    a23c:	8557      	strh	r7, [r2, #42]	; 0x2a
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    a23e:	19a4      	adds	r4, r4, r6
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    a240:	2b28      	cmp	r3, #40	; 0x28
    a242:	d92f      	bls.n	a2a4 <radio_init+0xdc>
		_radio.packet_rx_data_pool_size =
    a244:	2303      	movs	r3, #3
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    a246:	370e      	adds	r7, #14
		_radio.packet_rx_data_pool_size =
    a248:	439f      	bics	r7, r3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    a24a:	4e1c      	ldr	r6, [pc, #112]	; (a2bc <radio_init+0xf4>)
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    a24c:	4379      	muls	r1, r7
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    a24e:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
    a250:	8591      	strh	r1, [r2, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    a252:	2130      	movs	r1, #48	; 0x30
    a254:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    a256:	8d9f      	ldrh	r7, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    a258:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    a25a:	0038      	movs	r0, r7
    a25c:	f7f5 ffb4 	bl	1c8 <__aeabi_uidiv>
    a260:	2397      	movs	r3, #151	; 0x97
	_radio.pkt_rx_data_pool = mem_radio;
    a262:	0032      	movs	r2, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    a264:	005b      	lsls	r3, r3, #1
    a266:	54f0      	strb	r0, [r6, r3]
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    a268:	9b01      	ldr	r3, [sp, #4]
	_radio.pkt_rx_data_pool = mem_radio;
    a26a:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    a26c:	18ed      	adds	r5, r5, r3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    a26e:	2303      	movs	r3, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    a270:	00ed      	lsls	r5, r5, #3
	_radio.pkt_rx_data_pool = mem_radio;
    a272:	6254      	str	r4, [r2, #36]	; 0x24
	mem_radio += _radio.packet_rx_data_pool_size;
    a274:	19e4      	adds	r4, r4, r7
	_radio.link_rx_pool = mem_radio;
    a276:	63d4      	str	r4, [r2, #60]	; 0x3c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    a278:	1964      	adds	r4, r4, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    a27a:	9d05      	ldr	r5, [sp, #20]
	_radio.pkt_tx_ctrl_pool = mem_radio;
    a27c:	6514      	str	r4, [r2, #80]	; 0x50
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    a27e:	350a      	adds	r5, #10
    a280:	439d      	bics	r5, r3
	_radio.packet_tx_data_size =
    a282:	335a      	adds	r3, #90	; 0x5a
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    a284:	b2ad      	uxth	r5, r5
	_radio.packet_tx_data_size =
    a286:	33ff      	adds	r3, #255	; 0xff
    a288:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    a28a:	9b04      	ldr	r3, [sp, #16]
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    a28c:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    a28e:	436b      	muls	r3, r5
    a290:	18e5      	adds	r5, r4, r3
	retcode = (mem_radio - mem_radio_end);
    a292:	9b03      	ldr	r3, [sp, #12]
	_radio.pkt_tx_data_pool = mem_radio;
    a294:	6594      	str	r4, [r2, #88]	; 0x58
	retcode = (mem_radio - mem_radio_end);
    a296:	1aed      	subs	r5, r5, r3
	if (retcode) {
    a298:	d006      	beq.n	a2a8 <radio_init+0xe0>
		return (retcode + mem_size);
    a29a:	9b02      	ldr	r3, [sp, #8]
    a29c:	18ed      	adds	r5, r5, r3
}
    a29e:	0028      	movs	r0, r5
    a2a0:	b007      	add	sp, #28
    a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    a2a4:	2730      	movs	r7, #48	; 0x30
    a2a6:	e7d0      	b.n	a24a <radio_init+0x82>
	_radio.fc_ena = 1;
    a2a8:	23bb      	movs	r3, #187	; 0xbb
    a2aa:	2201      	movs	r2, #1
    a2ac:	005b      	lsls	r3, r3, #1
    a2ae:	54f2      	strb	r2, [r6, r3]
	common_init();
    a2b0:	f7fd fc36 	bl	7b20 <common_init>
	radio_setup();
    a2b4:	f001 f8be 	bl	b434 <radio_setup>
	return retcode;
    a2b8:	e7f1      	b.n	a29e <radio_init+0xd6>
    a2ba:	46c0      	nop			; (mov r8, r8)
    a2bc:	20000298 	.word	0x20000298

0000a2c0 <ll_reset>:
{
    a2c0:	b570      	push	{r4, r5, r6, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    a2c2:	2103      	movs	r1, #3
    a2c4:	2005      	movs	r0, #5
    a2c6:	f7fc fc8d 	bl	6be4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    a2ca:	2104      	movs	r1, #4
    a2cc:	2006      	movs	r0, #6
    a2ce:	f7fc fc89 	bl	6be4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    a2d2:	4c25      	ldr	r4, [pc, #148]	; (a368 <ll_reset+0xa8>)
    a2d4:	2500      	movs	r5, #0
    a2d6:	0026      	movs	r6, r4
    a2d8:	36ff      	adds	r6, #255	; 0xff
    a2da:	7b73      	ldrb	r3, [r6, #13]
    a2dc:	42ab      	cmp	r3, r5
    a2de:	d83b      	bhi.n	a358 <ll_reset+0x98>
	_radio.advertiser.is_enabled = 0;
    a2e0:	217f      	movs	r1, #127	; 0x7f
    a2e2:	1d62      	adds	r2, r4, #5
    a2e4:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    a2e6:	2500      	movs	r5, #0
	_radio.advertiser.is_enabled = 0;
    a2e8:	400b      	ands	r3, r1
    a2ea:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    a2ec:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    a2ee:	0022      	movs	r2, r4
	_radio.advertiser.conn = NULL;
    a2f0:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
    a2f2:	32dc      	adds	r2, #220	; 0xdc
	_radio.advertiser.conn = NULL;
    a2f4:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
    a2f6:	7813      	ldrb	r3, [r2, #0]
    a2f8:	397e      	subs	r1, #126	; 0x7e
    a2fa:	438b      	bics	r3, r1
    a2fc:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
    a2fe:	0023      	movs	r3, r4
    a300:	33fc      	adds	r3, #252	; 0xfc
    a302:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    a304:	0023      	movs	r3, r4
    a306:	312f      	adds	r1, #47	; 0x2f
    a308:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    a30a:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    a30c:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    a30e:	f7f5 ff5b 	bl	1c8 <__aeabi_uidiv>
    a312:	2397      	movs	r3, #151	; 0x97
    a314:	005b      	lsls	r3, r3, #1
    a316:	54e0      	strb	r0, [r4, r3]
	_radio.packet_rx_last = 0;
    a318:	2336      	movs	r3, #54	; 0x36
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    a31a:	22a4      	movs	r2, #164	; 0xa4
	_radio.packet_rx_last = 0;
    a31c:	33ff      	adds	r3, #255	; 0xff
    a31e:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    a320:	3301      	adds	r3, #1
    a322:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    a324:	3b02      	subs	r3, #2
    a326:	5ce3      	ldrb	r3, [r4, r3]
    a328:	0052      	lsls	r2, r2, #1
    a32a:	3b01      	subs	r3, #1
    a32c:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    a32e:	236a      	movs	r3, #106	; 0x6a
    a330:	33ff      	adds	r3, #255	; 0xff
    a332:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    a334:	3301      	adds	r3, #1
    a336:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    a338:	236c      	movs	r3, #108	; 0x6c
    a33a:	33ff      	adds	r3, #255	; 0xff
    a33c:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;
    a33e:	3301      	adds	r3, #1
    a340:	54e5      	strb	r5, [r4, r3]
	_radio.fc_ack = _radio.fc_req;
    a342:	3308      	adds	r3, #8
    a344:	5ce2      	ldrb	r2, [r4, r3]
    a346:	2376      	movs	r3, #118	; 0x76
	ll_filter_reset(false);
    a348:	0028      	movs	r0, r5
	_radio.fc_ack = _radio.fc_req;
    a34a:	33ff      	adds	r3, #255	; 0xff
    a34c:	54e2      	strb	r2, [r4, r3]
	ll_filter_reset(false);
    a34e:	f000 fe8f 	bl	b070 <ll_filter_reset>
	common_init();
    a352:	f7fd fbe5 	bl	7b20 <common_init>
}
    a356:	bd70      	pop	{r4, r5, r6, pc}
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    a358:	1de8      	adds	r0, r5, #7
    a35a:	b2c0      	uxtb	r0, r0
    a35c:	21ff      	movs	r1, #255	; 0xff
	     conn_handle++) {
    a35e:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    a360:	f7fc fc40 	bl	6be4 <role_disable>
	     conn_handle++) {
    a364:	b2ad      	uxth	r5, r5
    a366:	e7b8      	b.n	a2da <ll_reset+0x1a>
    a368:	20000298 	.word	0x20000298

0000a36c <radio_adv_data_get>:
	return &_radio.advertiser.adv_data;
    a36c:	4801      	ldr	r0, [pc, #4]	; (a374 <radio_adv_data_get+0x8>)
}
    a36e:	3026      	adds	r0, #38	; 0x26
    a370:	4770      	bx	lr
    a372:	46c0      	nop			; (mov r8, r8)
    a374:	20000298 	.word	0x20000298

0000a378 <radio_scan_data_get>:
	return &_radio.advertiser.scan_data;
    a378:	4801      	ldr	r0, [pc, #4]	; (a380 <radio_scan_data_get+0x8>)
}
    a37a:	3076      	adds	r0, #118	; 0x76
    a37c:	4770      	bx	lr
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	20000298 	.word	0x20000298

0000a384 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    a384:	4b02      	ldr	r3, [pc, #8]	; (a390 <ll_adv_is_enabled+0xc>)
    a386:	3305      	adds	r3, #5
    a388:	7fd8      	ldrb	r0, [r3, #31]
    a38a:	09c0      	lsrs	r0, r0, #7
}
    a38c:	4770      	bx	lr
    a38e:	46c0      	nop			; (mov r8, r8)
    a390:	20000298 	.word	0x20000298

0000a394 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    a394:	4b04      	ldr	r3, [pc, #16]	; (a3a8 <radio_adv_filter_pol_get+0x14>)
    a396:	2000      	movs	r0, #0
    a398:	1d5a      	adds	r2, r3, #5
    a39a:	7fd2      	ldrb	r2, [r2, #31]
    a39c:	2a7f      	cmp	r2, #127	; 0x7f
    a39e:	d902      	bls.n	a3a6 <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
    a3a0:	3306      	adds	r3, #6
    a3a2:	7fd8      	ldrb	r0, [r3, #31]
    a3a4:	0980      	lsrs	r0, r0, #6
}
    a3a6:	4770      	bx	lr
    a3a8:	20000298 	.word	0x20000298

0000a3ac <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    a3ac:	4a09      	ldr	r2, [pc, #36]	; (a3d4 <ll_scan_is_enabled+0x28>)
    a3ae:	0013      	movs	r3, r2
    a3b0:	33dc      	adds	r3, #220	; 0xdc
    a3b2:	7818      	ldrb	r0, [r3, #0]
    a3b4:	0013      	movs	r3, r2
    a3b6:	33dd      	adds	r3, #221	; 0xdd
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	07c0      	lsls	r0, r0, #31
    a3bc:	071b      	lsls	r3, r3, #28
    a3be:	0fdb      	lsrs	r3, r3, #31
    a3c0:	0fc0      	lsrs	r0, r0, #31
    a3c2:	4098      	lsls	r0, r3
	       (_radio.scanner.conn ? BIT(2) : 0);
    a3c4:	32fc      	adds	r2, #252	; 0xfc
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    a3c6:	0003      	movs	r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    a3c8:	6810      	ldr	r0, [r2, #0]
    a3ca:	1e42      	subs	r2, r0, #1
    a3cc:	4190      	sbcs	r0, r2
    a3ce:	0080      	lsls	r0, r0, #2
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    a3d0:	4318      	orrs	r0, r3
}
    a3d2:	4770      	bx	lr
    a3d4:	20000298 	.word	0x20000298

0000a3d8 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    a3d8:	4b05      	ldr	r3, [pc, #20]	; (a3f0 <radio_scan_filter_pol_get+0x18>)
    a3da:	2000      	movs	r0, #0
    a3dc:	001a      	movs	r2, r3
    a3de:	32dc      	adds	r2, #220	; 0xdc
    a3e0:	7812      	ldrb	r2, [r2, #0]
    a3e2:	07d2      	lsls	r2, r2, #31
    a3e4:	d503      	bpl.n	a3ee <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
    a3e6:	33dd      	adds	r3, #221	; 0xdd
    a3e8:	7818      	ldrb	r0, [r3, #0]
    a3ea:	0680      	lsls	r0, r0, #26
    a3ec:	0f80      	lsrs	r0, r0, #30
}
    a3ee:	4770      	bx	lr
    a3f0:	20000298 	.word	0x20000298

0000a3f4 <ll_tx_pwr_lvl_get>:
{
    a3f4:	b510      	push	{r4, lr}
    a3f6:	0014      	movs	r4, r2
	conn = connection_get(handle);
    a3f8:	f7fc fbdc 	bl	6bb4 <connection_get>
    a3fc:	0003      	movs	r3, r0
		return 1;
    a3fe:	2001      	movs	r0, #1
	if (!conn) {
    a400:	2b00      	cmp	r3, #0
    a402:	d001      	beq.n	a408 <ll_tx_pwr_lvl_get+0x14>
	*tx_pwr_lvl = 0;
    a404:	2000      	movs	r0, #0
    a406:	7020      	strb	r0, [r4, #0]
}
    a408:	bd10      	pop	{r4, pc}
	...

0000a40c <ll_rx_get>:
{
    a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    a40e:	4d1b      	ldr	r5, [pc, #108]	; (a47c <ll_rx_get+0x70>)
{
    a410:	0006      	movs	r6, r0
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    a412:	002a      	movs	r2, r5
{
    a414:	0008      	movs	r0, r1
    a416:	0029      	movs	r1, r5
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    a418:	32fc      	adds	r2, #252	; 0xfc
    a41a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    a41c:	6c92      	ldr	r2, [r2, #72]	; 0x48
    a41e:	316c      	adds	r1, #108	; 0x6c
{
    a420:	b085      	sub	sp, #20
    a422:	31ff      	adds	r1, #255	; 0xff
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    a424:	4293      	cmp	r3, r2
    a426:	d020      	beq.n	a46a <ll_rx_get+0x5e>
		_node_rx = _radio.link_rx_head->mem;
    a428:	685b      	ldr	r3, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    a42a:	781a      	ldrb	r2, [r3, #0]
		_node_rx = _radio.link_rx_head->mem;
    a42c:	9301      	str	r3, [sp, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    a42e:	f7fc fb75 	bl	6b1c <tx_cmplt_get>
    a432:	1e04      	subs	r4, r0, #0
		if (!cmplt) {
    a434:	d120      	bne.n	a478 <ll_rx_get+0x6c>
			first = _radio.packet_release_first;
    a436:	ab02      	add	r3, sp, #8
    a438:	1d5f      	adds	r7, r3, #5
    a43a:	236c      	movs	r3, #108	; 0x6c
    a43c:	33ff      	adds	r3, #255	; 0xff
    a43e:	5ceb      	ldrb	r3, [r5, r3]
    a440:	703b      	strb	r3, [r7, #0]
				cmplt_curr = tx_cmplt_get(&h, &first,
    a442:	23b6      	movs	r3, #182	; 0xb6
    a444:	005b      	lsls	r3, r3, #1
    a446:	5cea      	ldrb	r2, [r5, r3]
    a448:	ab02      	add	r3, sp, #8
    a44a:	b2d2      	uxtb	r2, r2
    a44c:	0039      	movs	r1, r7
    a44e:	1d98      	adds	r0, r3, #6
    a450:	f7fc fb64 	bl	6b1c <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    a454:	2c00      	cmp	r4, #0
    a456:	d106      	bne.n	a466 <ll_rx_get+0x5a>
			} while ((cmplt_prev != 0) ||
    a458:	2800      	cmp	r0, #0
    a45a:	d104      	bne.n	a466 <ll_rx_get+0x5a>
			*node_rx = _node_rx;
    a45c:	9b01      	ldr	r3, [sp, #4]
}
    a45e:	0020      	movs	r0, r4
		*node_rx = NULL;
    a460:	6033      	str	r3, [r6, #0]
}
    a462:	b005      	add	sp, #20
    a464:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    a466:	0004      	movs	r4, r0
    a468:	e7eb      	b.n	a442 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    a46a:	23b6      	movs	r3, #182	; 0xb6
    a46c:	005b      	lsls	r3, r3, #1
    a46e:	5cea      	ldrb	r2, [r5, r3]
    a470:	b2d2      	uxtb	r2, r2
    a472:	f7fc fb53 	bl	6b1c <tx_cmplt_get>
    a476:	0004      	movs	r4, r0
		*node_rx = NULL;
    a478:	2300      	movs	r3, #0
    a47a:	e7f0      	b.n	a45e <ll_rx_get+0x52>
    a47c:	20000298 	.word	0x20000298

0000a480 <ll_rx_mem_release>:
{
    a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a482:	2680      	movs	r6, #128	; 0x80
    a484:	0005      	movs	r5, r0
	_node_rx = *node_rx;
    a486:	6800      	ldr	r0, [r0, #0]
	while (_node_rx) {
    a488:	2800      	cmp	r0, #0
    a48a:	d103      	bne.n	a494 <ll_rx_mem_release+0x14>
	*node_rx = _node_rx;
    a48c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    a48e:	f7fd fb01 	bl	7a94 <packet_rx_allocate.constprop.49>
}
    a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (_node_rx_free->hdr.type) {
    a494:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    a496:	6807      	ldr	r7, [r0, #0]
    a498:	2b0a      	cmp	r3, #10
    a49a:	d808      	bhi.n	a4ae <ll_rx_mem_release+0x2e>
    a49c:	2201      	movs	r2, #1
    a49e:	409a      	lsls	r2, r3
    a4a0:	0013      	movs	r3, r2
    a4a2:	4a0d      	ldr	r2, [pc, #52]	; (a4d8 <ll_rx_mem_release+0x58>)
    a4a4:	4c0d      	ldr	r4, [pc, #52]	; (a4dc <ll_rx_mem_release+0x5c>)
    a4a6:	4213      	tst	r3, r2
    a4a8:	d104      	bne.n	a4b4 <ll_rx_mem_release+0x34>
    a4aa:	4233      	tst	r3, r6
    a4ac:	d109      	bne.n	a4c2 <ll_rx_mem_release+0x42>
			LL_ASSERT(0);
    a4ae:	b662      	cpsie	i
    a4b0:	2004      	movs	r0, #4
    a4b2:	df02      	svc	2
			mem_release(_node_rx_free,
    a4b4:	0021      	movs	r1, r4
    a4b6:	3125      	adds	r1, #37	; 0x25
			mem_release(conn, &_radio.conn_free);
    a4b8:	31ff      	adds	r1, #255	; 0xff
    a4ba:	f7fa fd92 	bl	4fe2 <mem_release>
{
    a4be:	0038      	movs	r0, r7
    a4c0:	e7e2      	b.n	a488 <ll_rx_mem_release+0x8>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a4c2:	0023      	movs	r3, r4
    a4c4:	2182      	movs	r1, #130	; 0x82
    a4c6:	33fc      	adds	r3, #252	; 0xfc
    a4c8:	88c2      	ldrh	r2, [r0, #6]
    a4ca:	0049      	lsls	r1, r1, #1
    a4cc:	6898      	ldr	r0, [r3, #8]
    a4ce:	f7fa fd9e 	bl	500e <mem_get>
			mem_release(conn, &_radio.conn_free);
    a4d2:	0021      	movs	r1, r4
    a4d4:	3109      	adds	r1, #9
    a4d6:	e7ef      	b.n	a4b8 <ll_rx_mem_release+0x38>
    a4d8:	0000077e 	.word	0x0000077e
    a4dc:	20000298 	.word	0x20000298

0000a4e0 <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    a4e0:	b570      	push	{r4, r5, r6, lr}
    a4e2:	4b18      	ldr	r3, [pc, #96]	; (a544 <do_radio_rx_fc_set+0x64>)
    a4e4:	0004      	movs	r4, r0
	if (req == ack) {
    a4e6:	4291      	cmp	r1, r2
    a4e8:	d11c      	bne.n	a524 <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    a4ea:	0018      	movs	r0, r3
    a4ec:	30fc      	adds	r0, #252	; 0xfc
    a4ee:	6c85      	ldr	r5, [r0, #72]	; 0x48
    a4f0:	6c46      	ldr	r6, [r0, #68]	; 0x44
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    a4f2:	2001      	movs	r0, #1
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    a4f4:	42ae      	cmp	r6, r5
    a4f6:	d114      	bne.n	a522 <do_radio_rx_fc_set+0x42>
			if (ack1 == 0) {
    a4f8:	1e08      	subs	r0, r1, #0
    a4fa:	d100      	bne.n	a4fe <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
    a4fc:	2003      	movs	r0, #3
			_radio.fc_handle[--ack1] = handle;
    a4fe:	3801      	subs	r0, #1
    a500:	b2c0      	uxtb	r0, r0
    a502:	0005      	movs	r5, r0
    a504:	35b4      	adds	r5, #180	; 0xb4
    a506:	006d      	lsls	r5, r5, #1
    a508:	195d      	adds	r5, r3, r5
    a50a:	80ec      	strh	r4, [r5, #6]
			_radio.fc_ack = ack1;
    a50c:	2476      	movs	r4, #118	; 0x76
    a50e:	34ff      	adds	r4, #255	; 0xff
    a510:	5518      	strb	r0, [r3, r4]
			if (req != _radio.fc_req) {
    a512:	20ba      	movs	r0, #186	; 0xba
    a514:	0040      	lsls	r0, r0, #1
    a516:	5c1d      	ldrb	r5, [r3, r0]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    a518:	2000      	movs	r0, #0
			if (req != _radio.fc_req) {
    a51a:	42a9      	cmp	r1, r5
    a51c:	d001      	beq.n	a522 <do_radio_rx_fc_set+0x42>
				_radio.fc_ack = ack;
    a51e:	551a      	strb	r2, [r3, r4]
				return 1;
    a520:	3001      	adds	r0, #1
}
    a522:	bd70      	pop	{r4, r5, r6, pc}
	} else if (((req == 0) &&
    a524:	2900      	cmp	r1, #0
    a526:	d107      	bne.n	a538 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    a528:	22b9      	movs	r2, #185	; 0xb9
    a52a:	0052      	lsls	r2, r2, #1
	} else if (((req == 0) &&
    a52c:	5a98      	ldrh	r0, [r3, r2]
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    a52e:	1b00      	subs	r0, r0, r4
    a530:	1e43      	subs	r3, r0, #1
    a532:	4198      	sbcs	r0, r3
				return 1;
    a534:	b2c0      	uxtb	r0, r0
    a536:	e7f4      	b.n	a522 <do_radio_rx_fc_set+0x42>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    a538:	31b3      	adds	r1, #179	; 0xb3
    a53a:	0049      	lsls	r1, r1, #1
    a53c:	1859      	adds	r1, r3, r1
    a53e:	88c8      	ldrh	r0, [r1, #6]
    a540:	e7f5      	b.n	a52e <do_radio_rx_fc_set+0x4e>
    a542:	46c0      	nop			; (mov r8, r8)
    a544:	20000298 	.word	0x20000298

0000a548 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    a548:	22bb      	movs	r2, #187	; 0xbb
{
    a54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    a54c:	4b15      	ldr	r3, [pc, #84]	; (a5a4 <radio_rx_fc_set+0x5c>)
    a54e:	0052      	lsls	r2, r2, #1
    a550:	5c9a      	ldrb	r2, [r3, r2]
{
    a552:	0005      	movs	r5, r0
    a554:	0008      	movs	r0, r1
	if (_radio.fc_ena) {
    a556:	2a00      	cmp	r2, #0
    a558:	d101      	bne.n	a55e <radio_rx_fc_set+0x16>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    a55a:	2000      	movs	r0, #0
}
    a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		u8_t req = _radio.fc_req;
    a55e:	22ba      	movs	r2, #186	; 0xba
		u8_t ack = _radio.fc_ack;
    a560:	2476      	movs	r4, #118	; 0x76
		u8_t req = _radio.fc_req;
    a562:	0052      	lsls	r2, r2, #1
    a564:	5c99      	ldrb	r1, [r3, r2]
		u8_t ack = _radio.fc_ack;
    a566:	34ff      	adds	r4, #255	; 0xff
		u8_t req = _radio.fc_req;
    a568:	b2c9      	uxtb	r1, r1
		u8_t ack = _radio.fc_ack;
    a56a:	5d1a      	ldrb	r2, [r3, r4]
		if (fc) {
    a56c:	2800      	cmp	r0, #0
    a56e:	d006      	beq.n	a57e <radio_rx_fc_set+0x36>
			if (handle != 0xffff) {
    a570:	4b0d      	ldr	r3, [pc, #52]	; (a5a8 <radio_rx_fc_set+0x60>)
    a572:	429d      	cmp	r5, r3
    a574:	d0f1      	beq.n	a55a <radio_rx_fc_set+0x12>
				return do_radio_rx_fc_set(handle, req, ack);
    a576:	0028      	movs	r0, r5
    a578:	f7ff ffb2 	bl	a4e0 <do_radio_rx_fc_set>
    a57c:	e7ee      	b.n	a55c <radio_rx_fc_set+0x14>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    a57e:	001d      	movs	r5, r3
    a580:	35fc      	adds	r5, #252	; 0xfc
    a582:	6c6f      	ldr	r7, [r5, #68]	; 0x44
    a584:	6cae      	ldr	r6, [r5, #72]	; 0x48
    a586:	42b7      	cmp	r7, r6
    a588:	d1e7      	bne.n	a55a <radio_rx_fc_set+0x12>
    a58a:	4291      	cmp	r1, r2
    a58c:	d0e5      	beq.n	a55a <radio_rx_fc_set+0x12>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    a58e:	6cad      	ldr	r5, [r5, #72]	; 0x48
			_radio.fc_ack = req;
    a590:	5519      	strb	r1, [r3, r4]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    a592:	42af      	cmp	r7, r5
    a594:	d0e1      	beq.n	a55a <radio_rx_fc_set+0x12>
			    (req == _radio.fc_req)) {
    a596:	25ba      	movs	r5, #186	; 0xba
    a598:	006d      	lsls	r5, r5, #1
    a59a:	5d5d      	ldrb	r5, [r3, r5]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    a59c:	42a9      	cmp	r1, r5
    a59e:	d1dc      	bne.n	a55a <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
    a5a0:	551a      	strb	r2, [r3, r4]
    a5a2:	e7db      	b.n	a55c <radio_rx_fc_set+0x14>
    a5a4:	20000298 	.word	0x20000298
    a5a8:	0000ffff 	.word	0x0000ffff

0000a5ac <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    a5ac:	4770      	bx	lr
	...

0000a5b0 <radio_adv_enable>:
{
    a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5b2:	b093      	sub	sp, #76	; 0x4c
    a5b4:	930e      	str	r3, [sp, #56]	; 0x38
    a5b6:	232f      	movs	r3, #47	; 0x2f
    a5b8:	910c      	str	r1, [sp, #48]	; 0x30
    a5ba:	a904      	add	r1, sp, #16
    a5bc:	185b      	adds	r3, r3, r1
    a5be:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a5c0:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
    a5c2:	4dac      	ldr	r5, [pc, #688]	; (a874 <radio_adv_enable+0x2c4>)
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a5c4:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
    a5c6:	1d6b      	adds	r3, r5, #5
    a5c8:	7fdb      	ldrb	r3, [r3, #31]
{
    a5ca:	900d      	str	r0, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    a5cc:	2b7f      	cmp	r3, #127	; 0x7f
    a5ce:	d901      	bls.n	a5d4 <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    a5d0:	260c      	movs	r6, #12
    a5d2:	e023      	b.n	a61c <radio_adv_enable+0x6c>
					[_radio.advertiser.adv_data.last][0];
    a5d4:	002b      	movs	r3, r5
    a5d6:	3375      	adds	r3, #117	; 0x75
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    a5d8:	781a      	ldrb	r2, [r3, #0]
    a5da:	2327      	movs	r3, #39	; 0x27
    a5dc:	4353      	muls	r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    a5de:	220f      	movs	r2, #15
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    a5e0:	3326      	adds	r3, #38	; 0x26
    a5e2:	18eb      	adds	r3, r5, r3
    a5e4:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    a5e6:	781b      	ldrb	r3, [r3, #0]
		conn = NULL;
    a5e8:	2700      	movs	r7, #0
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    a5ea:	4013      	ands	r3, r2
    a5ec:	2b01      	cmp	r3, #1
    a5ee:	d864      	bhi.n	a6ba <radio_adv_enable+0x10a>
		if (_radio.advertiser.conn) {
    a5f0:	4ba1      	ldr	r3, [pc, #644]	; (a878 <radio_adv_enable+0x2c8>)
    a5f2:	681c      	ldr	r4, [r3, #0]
    a5f4:	42bc      	cmp	r4, r7
    a5f6:	d1eb      	bne.n	a5d0 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    a5f8:	48a0      	ldr	r0, [pc, #640]	; (a87c <radio_adv_enable+0x2cc>)
    a5fa:	f7fa fcd9 	bl	4fb0 <mem_acquire>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    a5fe:	2607      	movs	r6, #7
		link = mem_acquire(&_radio.link_rx_free);
    a600:	900a      	str	r0, [sp, #40]	; 0x28
		if (!link) {
    a602:	42b8      	cmp	r0, r7
    a604:	d00a      	beq.n	a61c <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    a606:	0028      	movs	r0, r5
    a608:	3009      	adds	r0, #9
    a60a:	30ff      	adds	r0, #255	; 0xff
    a60c:	f7fa fcd0 	bl	4fb0 <mem_acquire>
    a610:	1e07      	subs	r7, r0, #0
		if (!conn) {
    a612:	d106      	bne.n	a622 <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
    a614:	4999      	ldr	r1, [pc, #612]	; (a87c <radio_adv_enable+0x2cc>)
    a616:	980a      	ldr	r0, [sp, #40]	; 0x28
    a618:	f7fa fce3 	bl	4fe2 <mem_release>
}
    a61c:	0030      	movs	r0, r6
    a61e:	b013      	add	sp, #76	; 0x4c
    a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->handle = 0xFFFF;
    a622:	2301      	movs	r3, #1
    a624:	425b      	negs	r3, r3
    a626:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    a628:	0003      	movs	r3, r0
    a62a:	4a95      	ldr	r2, [pc, #596]	; (a880 <radio_adv_enable+0x2d0>)
    a62c:	338c      	adds	r3, #140	; 0x8c
    a62e:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
    a630:	2140      	movs	r1, #64	; 0x40
		conn->role = 1;
    a632:	2380      	movs	r3, #128	; 0x80
		conn->data_chan_sel = 0;
    a634:	7f42      	ldrb	r2, [r0, #29]
		conn->role = 1;
    a636:	425b      	negs	r3, r3
    a638:	438a      	bics	r2, r1
    a63a:	4313      	orrs	r3, r2
    a63c:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    a63e:	2306      	movs	r3, #6
		conn->common.fex_valid = 0;
    a640:	0002      	movs	r2, r0
		conn->data_chan_use = 0;
    a642:	77c4      	strb	r4, [r0, #31]
		conn->event_counter = 0;
    a644:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    a646:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    a648:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->connect_expire = 6;
    a64a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    a64c:	2020      	movs	r0, #32
		conn->slave.latency_enabled = 0;
    a64e:	2501      	movs	r5, #1
		conn->slave.latency_cancel = 0;
    a650:	2602      	movs	r6, #2
		conn->common.fex_valid = 0;
    a652:	3238      	adds	r2, #56	; 0x38
    a654:	7813      	ldrb	r3, [r2, #0]
		conn->slave.latency_enabled = 0;
    a656:	4383      	bics	r3, r0
		conn->slave.latency_cancel = 0;
    a658:	43ab      	bics	r3, r5
    a65a:	43b3      	bics	r3, r6
    a65c:	7013      	strb	r3, [r2, #0]
		conn->llcp_req = 0;
    a65e:	003b      	movs	r3, r7
    a660:	335c      	adds	r3, #92	; 0x5c
		conn->slave.window_widening_prepare_us = 0;
    a662:	647c      	str	r4, [r7, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    a664:	64bc      	str	r4, [r7, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    a666:	65bc      	str	r4, [r7, #88]	; 0x58
		conn->supervision_expire = 0;
    a668:	863c      	strh	r4, [r7, #48]	; 0x30
		conn->procedure_expire = 0;
    a66a:	86bc      	strh	r4, [r7, #52]	; 0x34
		conn->llcp_version.tx = 0;
    a66c:	3258      	adds	r2, #88	; 0x58
		conn->llcp_req = 0;
    a66e:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    a670:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    a672:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    a674:	43ab      	bics	r3, r5
    a676:	43b3      	bics	r3, r6
    a678:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    a67a:	003b      	movs	r3, r7
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    a67c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		conn->llcp_terminate.req = 0;
    a67e:	3398      	adds	r3, #152	; 0x98
    a680:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    a682:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
    a684:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    a686:	3304      	adds	r3, #4
    a688:	601a      	str	r2, [r3, #0]
		conn->sn = 0;
    a68a:	003a      	movs	r2, r7
    a68c:	32a8      	adds	r2, #168	; 0xa8
    a68e:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    a690:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
    a692:	0035      	movs	r5, r6
    a694:	43b3      	bics	r3, r6
		conn->enc_tx = 0;
    a696:	35e1      	adds	r5, #225	; 0xe1
    a698:	402b      	ands	r3, r5
		conn->refresh = 0;
    a69a:	4383      	bics	r3, r0
		conn->empty = 0;
    a69c:	438b      	bics	r3, r1
    a69e:	313f      	adds	r1, #63	; 0x3f
    a6a0:	400b      	ands	r3, r1
    a6a2:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    a6a4:	003b      	movs	r3, r7
    a6a6:	33ec      	adds	r3, #236	; 0xec
    a6a8:	601c      	str	r4, [r3, #0]
		conn->pkt_tx_ctrl = NULL;
    a6aa:	605c      	str	r4, [r3, #4]
		conn->pkt_tx_ctrl_last = NULL;
    a6ac:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_data = NULL;
    a6ae:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_last = NULL;
    a6b0:	611c      	str	r4, [r3, #16]
		conn->packet_tx_head_len = 0;
    a6b2:	751c      	strb	r4, [r3, #20]
		conn->packet_tx_head_offset = 0;
    a6b4:	755c      	strb	r4, [r3, #21]
		_radio.advertiser.conn = conn;
    a6b6:	4b70      	ldr	r3, [pc, #448]	; (a878 <radio_adv_enable+0x2c8>)
    a6b8:	601f      	str	r7, [r3, #0]
	_radio.advertiser.chan_map = chan_map;
    a6ba:	202f      	movs	r0, #47	; 0x2f
	_radio.advertiser.phy_p = phy_p;
    a6bc:	2107      	movs	r1, #7
    a6be:	4d6d      	ldr	r5, [pc, #436]	; (a874 <radio_adv_enable+0x2c4>)
    a6c0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a6c2:	1dac      	adds	r4, r5, #6
    a6c4:	7fe3      	ldrb	r3, [r4, #31]
	_radio.advertiser.chan_map = chan_map;
    a6c6:	aa04      	add	r2, sp, #16
    a6c8:	1880      	adds	r0, r0, r2
    a6ca:	7802      	ldrb	r2, [r0, #0]
	_radio.advertiser.phy_p = phy_p;
    a6cc:	400e      	ands	r6, r1
    a6ce:	438b      	bics	r3, r1
	_radio.advertiser.chan_map = chan_map;
    a6d0:	4333      	orrs	r3, r6
    a6d2:	4011      	ands	r1, r2
    a6d4:	001a      	movs	r2, r3
    a6d6:	2338      	movs	r3, #56	; 0x38
    a6d8:	439a      	bics	r2, r3
	_radio.advertiser.filter_policy = filter_policy;
    a6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	_radio.advertiser.chan_map = chan_map;
    a6dc:	00c9      	lsls	r1, r1, #3
	_radio.advertiser.filter_policy = filter_policy;
    a6de:	019e      	lsls	r6, r3, #6
    a6e0:	233f      	movs	r3, #63	; 0x3f
    a6e2:	430a      	orrs	r2, r1
    a6e4:	401a      	ands	r2, r3
		_radio.ticks_active_to_start;
    a6e6:	002b      	movs	r3, r5
	_radio.advertiser.filter_policy = filter_policy;
    a6e8:	4332      	orrs	r2, r6
    a6ea:	77e2      	strb	r2, [r4, #31]
		_radio.ticks_active_to_start;
    a6ec:	33fc      	adds	r3, #252	; 0xfc
	_radio.advertiser.hdr.ticks_active_to_start =
    a6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    a6f0:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_active_to_start =
    a6f2:	61ab      	str	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    a6f4:	2327      	movs	r3, #39	; 0x27
    a6f6:	616b      	str	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
    a6f8:	2300      	movs	r3, #0
    a6fa:	61eb      	str	r3, [r5, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    a6fc:	f7fa fdf0 	bl	52e0 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    a700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a702:	781e      	ldrb	r6, [r3, #0]
    a704:	230f      	movs	r3, #15
    a706:	401e      	ands	r6, r3
    a708:	2e01      	cmp	r6, #1
    a70a:	d16e      	bne.n	a7ea <radio_adv_enable+0x23a>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    a70c:	23a7      	movs	r3, #167	; 0xa7
    a70e:	009b      	lsls	r3, r3, #2
    a710:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    a712:	3039      	adds	r0, #57	; 0x39
    a714:	30ff      	adds	r0, #255	; 0xff
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    a716:	4a5b      	ldr	r2, [pc, #364]	; (a884 <radio_adv_enable+0x2d4>)
    a718:	2300      	movs	r3, #0
    a71a:	2100      	movs	r1, #0
    a71c:	f7f5 fe3c 	bl	398 <__aeabi_lmul>
    a720:	4a59      	ldr	r2, [pc, #356]	; (a888 <radio_adv_enable+0x2d8>)
    a722:	2307      	movs	r3, #7
    a724:	f7f5 fe18 	bl	358 <__aeabi_uldivmod>
	ticks_slot_offset =
    a728:	69aa      	ldr	r2, [r5, #24]
    a72a:	696b      	ldr	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    a72c:	6228      	str	r0, [r5, #32]
	ticks_slot_offset =
    a72e:	920a      	str	r2, [sp, #40]	; 0x28
    a730:	429a      	cmp	r2, r3
    a732:	d200      	bcs.n	a736 <radio_adv_enable+0x186>
    a734:	930a      	str	r3, [sp, #40]	; 0x28
    a736:	2400      	movs	r4, #0
	_radio.advertiser.is_hdcd = !interval &&
    a738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a73a:	42a3      	cmp	r3, r4
    a73c:	d103      	bne.n	a746 <radio_adv_enable+0x196>
    a73e:	3e01      	subs	r6, #1
    a740:	4273      	negs	r3, r6
    a742:	4173      	adcs	r3, r6
    a744:	b2dc      	uxtb	r4, r3
    a746:	2240      	movs	r2, #64	; 0x40
    a748:	1d6b      	adds	r3, r5, #5
    a74a:	01a6      	lsls	r6, r4, #6
    a74c:	7fdc      	ldrb	r4, [r3, #31]
    a74e:	4394      	bics	r4, r2
    a750:	4334      	orrs	r4, r6
    a752:	77dc      	strb	r4, [r3, #31]
    a754:	ae11      	add	r6, sp, #68	; 0x44
	if (_radio.advertiser.is_hdcd) {
    a756:	4014      	ands	r4, r2
    a758:	d055      	beq.n	a806 <radio_adv_enable+0x256>
		u32_t ticks_now = ticker_ticks_now_get();
    a75a:	f7fb fb89 	bl	5e70 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a75e:	6a29      	ldr	r1, [r5, #32]
    a760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a762:	468c      	mov	ip, r1
    a764:	4463      	add	r3, ip
    a766:	001a      	movs	r2, r3
		u32_t ticks_now = ticker_ticks_now_get();
    a768:	0004      	movs	r4, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a76a:	2000      	movs	r0, #0
    a76c:	4b47      	ldr	r3, [pc, #284]	; (a88c <radio_adv_enable+0x2dc>)
    a76e:	9204      	str	r2, [sp, #16]
    a770:	9307      	str	r3, [sp, #28]
    a772:	4b47      	ldr	r3, [pc, #284]	; (a890 <radio_adv_enable+0x2e0>)
    a774:	9201      	str	r2, [sp, #4]
    a776:	9305      	str	r3, [sp, #20]
    a778:	9608      	str	r6, [sp, #32]
    a77a:	9006      	str	r0, [sp, #24]
    a77c:	9003      	str	r0, [sp, #12]
    a77e:	9002      	str	r0, [sp, #8]
    a780:	9000      	str	r0, [sp, #0]
    a782:	0023      	movs	r3, r4
    a784:	2205      	movs	r2, #5
    a786:	2103      	movs	r1, #3
    a788:	f7fb fa3c 	bl	5c04 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    a78c:	2802      	cmp	r0, #2
    a78e:	d036      	beq.n	a7fe <radio_adv_enable+0x24e>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    a790:	9811      	ldr	r0, [sp, #68]	; 0x44
    a792:	2800      	cmp	r0, #0
    a794:	d117      	bne.n	a7c6 <radio_adv_enable+0x216>
		ret_cb = TICKER_STATUS_BUSY;
    a796:	2302      	movs	r3, #2
		ret =
    a798:	2203      	movs	r2, #3
		ret_cb = TICKER_STATUS_BUSY;
    a79a:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    a79c:	4b3b      	ldr	r3, [pc, #236]	; (a88c <radio_adv_enable+0x2dc>)
    a79e:	0011      	movs	r1, r2
    a7a0:	9307      	str	r3, [sp, #28]
    a7a2:	4b3c      	ldr	r3, [pc, #240]	; (a894 <radio_adv_enable+0x2e4>)
    a7a4:	9608      	str	r6, [sp, #32]
    a7a6:	9305      	str	r3, [sp, #20]
    a7a8:	4b3b      	ldr	r3, [pc, #236]	; (a898 <radio_adv_enable+0x2e8>)
    a7aa:	9006      	str	r0, [sp, #24]
    a7ac:	9300      	str	r3, [sp, #0]
    a7ae:	0023      	movs	r3, r4
    a7b0:	9004      	str	r0, [sp, #16]
    a7b2:	9003      	str	r0, [sp, #12]
    a7b4:	9002      	str	r0, [sp, #8]
    a7b6:	9001      	str	r0, [sp, #4]
		ret =
    a7b8:	f7fb fa24 	bl	5c04 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    a7bc:	2802      	cmp	r0, #2
    a7be:	d045      	beq.n	a84c <radio_adv_enable+0x29c>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    a7c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
    a7c2:	2e00      	cmp	r6, #0
    a7c4:	d046      	beq.n	a854 <radio_adv_enable+0x2a4>
	if (conn) {
    a7c6:	2f00      	cmp	r7, #0
    a7c8:	d100      	bne.n	a7cc <radio_adv_enable+0x21c>
    a7ca:	e701      	b.n	a5d0 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    a7cc:	0029      	movs	r1, r5
    a7ce:	003b      	movs	r3, r7
    a7d0:	313d      	adds	r1, #61	; 0x3d
    a7d2:	339c      	adds	r3, #156	; 0x9c
    a7d4:	6818      	ldr	r0, [r3, #0]
    a7d6:	31ff      	adds	r1, #255	; 0xff
    a7d8:	f7fa fc03 	bl	4fe2 <mem_release>
		mem_release(conn, &_radio.conn_free);
    a7dc:	0029      	movs	r1, r5
    a7de:	3109      	adds	r1, #9
    a7e0:	31ff      	adds	r1, #255	; 0xff
    a7e2:	0038      	movs	r0, r7
    a7e4:	f7fa fbfd 	bl	4fe2 <mem_release>
    a7e8:	e6f2      	b.n	a5d0 <radio_adv_enable+0x20>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    a7ea:	2e02      	cmp	r6, #2
    a7ec:	d103      	bne.n	a7f6 <radio_adv_enable+0x246>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    a7ee:	23a9      	movs	r3, #169	; 0xa9
    a7f0:	009b      	lsls	r3, r3, #2
			   152 + 376) * chan_cnt;
    a7f2:	4358      	muls	r0, r3
    a7f4:	e78f      	b.n	a716 <radio_adv_enable+0x166>
    a7f6:	4b29      	ldr	r3, [pc, #164]	; (a89c <radio_adv_enable+0x2ec>)
    a7f8:	e7fb      	b.n	a7f2 <radio_adv_enable+0x242>
				cpu_sleep();
    a7fa:	f7fc f8f5 	bl	69e8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a7fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a800:	2b02      	cmp	r3, #2
    a802:	d0fa      	beq.n	a7fa <radio_adv_enable+0x24a>
    a804:	e7c4      	b.n	a790 <radio_adv_enable+0x1e0>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a806:	f7fb fb33 	bl	5e70 <ticker_ticks_now_get>
		ret =
    a80a:	4b20      	ldr	r3, [pc, #128]	; (a88c <radio_adv_enable+0x2dc>)
    a80c:	9608      	str	r6, [sp, #32]
    a80e:	9307      	str	r3, [sp, #28]
    a810:	4b1f      	ldr	r3, [pc, #124]	; (a890 <radio_adv_enable+0x2e0>)
    a812:	9406      	str	r4, [sp, #24]
    a814:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a816:	6a2a      	ldr	r2, [r5, #32]
    a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a81a:	4694      	mov	ip, r2
    a81c:	4463      	add	r3, ip
    a81e:	900b      	str	r0, [sp, #44]	; 0x2c
		ret =
    a820:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    a822:	4a1f      	ldr	r2, [pc, #124]	; (a8a0 <radio_adv_enable+0x2f0>)
    a824:	2391      	movs	r3, #145	; 0x91
    a826:	980c      	ldr	r0, [sp, #48]	; 0x30
    a828:	0021      	movs	r1, r4
		ret =
    a82a:	9403      	str	r4, [sp, #12]
    a82c:	9402      	str	r4, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    a82e:	f7f5 fdb3 	bl	398 <__aeabi_lmul>
    a832:	4a15      	ldr	r2, [pc, #84]	; (a888 <radio_adv_enable+0x2d8>)
    a834:	2307      	movs	r3, #7
    a836:	f7f5 fd8f 	bl	358 <__aeabi_uldivmod>
		ret =
    a83a:	9400      	str	r4, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    a83c:	9001      	str	r0, [sp, #4]
		ret =
    a83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a840:	2205      	movs	r2, #5
    a842:	2103      	movs	r1, #3
    a844:	0020      	movs	r0, r4
    a846:	e7b7      	b.n	a7b8 <radio_adv_enable+0x208>
			cpu_sleep();
    a848:	f7fc f8ce 	bl	69e8 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a84c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a84e:	2b02      	cmp	r3, #2
    a850:	d0fa      	beq.n	a848 <radio_adv_enable+0x298>
    a852:	e7b5      	b.n	a7c0 <radio_adv_enable+0x210>
		_radio.advertiser.is_enabled = 1;
    a854:	2380      	movs	r3, #128	; 0x80
		if (!_radio.scanner.is_enabled) {
    a856:	2001      	movs	r0, #1
		_radio.advertiser.is_enabled = 1;
    a858:	1d6a      	adds	r2, r5, #5
    a85a:	7fd1      	ldrb	r1, [r2, #31]
    a85c:	425b      	negs	r3, r3
    a85e:	430b      	orrs	r3, r1
		if (!_radio.scanner.is_enabled) {
    a860:	35dc      	adds	r5, #220	; 0xdc
		_radio.advertiser.is_enabled = 1;
    a862:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    a864:	782b      	ldrb	r3, [r5, #0]
    a866:	4203      	tst	r3, r0
    a868:	d000      	beq.n	a86c <radio_adv_enable+0x2bc>
    a86a:	e6d7      	b.n	a61c <radio_adv_enable+0x6c>
			ll_adv_scan_state_cb(BIT(0));
    a86c:	f7ff fe9e 	bl	a5ac <ll_adv_scan_state_cb>
    a870:	e6d4      	b.n	a61c <radio_adv_enable+0x6c>
    a872:	46c0      	nop			; (mov r8, r8)
    a874:	20000298 	.word	0x20000298
    a878:	20000360 	.word	0x20000360
    a87c:	200003d4 	.word	0x200003d4
    a880:	0001400c 	.word	0x0001400c
    a884:	3b9aca00 	.word	0x3b9aca00
    a888:	1afd498d 	.word	0x1afd498d
    a88c:	00006a19 	.word	0x00006a19
    a890:	00007a31 	.word	0x00007a31
    a894:	00007a69 	.word	0x00007a69
    a898:	0000a3fe 	.word	0x0000a3fe
    a89c:	000005fc 	.word	0x000005fc
    a8a0:	84e72a00 	.word	0x84e72a00

0000a8a4 <radio_adv_disable>:
{
    a8a4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    a8a6:	2103      	movs	r1, #3
    a8a8:	2005      	movs	r0, #5
    a8aa:	f7fc f99b 	bl	6be4 <role_disable>
    a8ae:	1e05      	subs	r5, r0, #0
	if (!status) {
    a8b0:	d123      	bne.n	a8fa <radio_adv_disable+0x56>
		_radio.advertiser.is_enabled = 0;
    a8b2:	217f      	movs	r1, #127	; 0x7f
    a8b4:	4c12      	ldr	r4, [pc, #72]	; (a900 <radio_adv_disable+0x5c>)
    a8b6:	1d62      	adds	r2, r4, #5
    a8b8:	7fd3      	ldrb	r3, [r2, #31]
    a8ba:	400b      	ands	r3, r1
    a8bc:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    a8be:	0023      	movs	r3, r4
    a8c0:	33dc      	adds	r3, #220	; 0xdc
    a8c2:	781b      	ldrb	r3, [r3, #0]
    a8c4:	07db      	lsls	r3, r3, #31
    a8c6:	d401      	bmi.n	a8cc <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    a8c8:	f7ff fe70 	bl	a5ac <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    a8cc:	0023      	movs	r3, r4
    a8ce:	33c8      	adds	r3, #200	; 0xc8
    a8d0:	681e      	ldr	r6, [r3, #0]
		if (conn) {
    a8d2:	2e00      	cmp	r6, #0
    a8d4:	d00f      	beq.n	a8f6 <radio_adv_disable+0x52>
			_radio.advertiser.conn = NULL;
    a8d6:	2200      	movs	r2, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    a8d8:	0021      	movs	r1, r4
			_radio.advertiser.conn = NULL;
    a8da:	601a      	str	r2, [r3, #0]
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    a8dc:	0033      	movs	r3, r6
    a8de:	313d      	adds	r1, #61	; 0x3d
    a8e0:	339c      	adds	r3, #156	; 0x9c
    a8e2:	31ff      	adds	r1, #255	; 0xff
    a8e4:	6818      	ldr	r0, [r3, #0]
    a8e6:	f7fa fb7c 	bl	4fe2 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a8ea:	0021      	movs	r1, r4
    a8ec:	3109      	adds	r1, #9
    a8ee:	31ff      	adds	r1, #255	; 0xff
    a8f0:	0030      	movs	r0, r6
    a8f2:	f7fa fb76 	bl	4fe2 <mem_release>
}
    a8f6:	0028      	movs	r0, r5
    a8f8:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    a8fa:	250c      	movs	r5, #12
    a8fc:	e7fb      	b.n	a8f6 <radio_adv_disable+0x52>
    a8fe:	46c0      	nop			; (mov r8, r8)
    a900:	20000298 	.word	0x20000298

0000a904 <ll_rx_dequeue>:
	struct radio_pdu_node_rx *node_rx = NULL;
    a904:	2300      	movs	r3, #0
{
    a906:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a908:	4c35      	ldr	r4, [pc, #212]	; (a9e0 <ll_rx_dequeue+0xdc>)
	struct radio_pdu_node_rx *node_rx = NULL;
    a90a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a90c:	0021      	movs	r1, r4
    a90e:	0023      	movs	r3, r4
    a910:	3141      	adds	r1, #65	; 0x41
    a912:	33fc      	adds	r3, #252	; 0xfc
    a914:	6c98      	ldr	r0, [r3, #72]	; 0x48
    a916:	31ff      	adds	r1, #255	; 0xff
    a918:	aa01      	add	r2, sp, #4
    a91a:	f7fa fba5 	bl	5068 <memq_dequeue>
	LL_ASSERT(link);
    a91e:	2800      	cmp	r0, #0
    a920:	d102      	bne.n	a928 <ll_rx_dequeue+0x24>
			LL_ASSERT(_radio.scanner.is_enabled);
    a922:	b662      	cpsie	i
    a924:	2004      	movs	r0, #4
    a926:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    a928:	0021      	movs	r1, r4
    a92a:	313d      	adds	r1, #61	; 0x3d
    a92c:	31ff      	adds	r1, #255	; 0xff
    a92e:	f7fa fb58 	bl	4fe2 <mem_release>
	switch (node_rx->hdr.type) {
    a932:	9a01      	ldr	r2, [sp, #4]
    a934:	7911      	ldrb	r1, [r2, #4]
    a936:	290a      	cmp	r1, #10
    a938:	d8f3      	bhi.n	a922 <ll_rx_dequeue+0x1e>
    a93a:	2301      	movs	r3, #1
    a93c:	408b      	lsls	r3, r1
    a93e:	4829      	ldr	r0, [pc, #164]	; (a9e4 <ll_rx_dequeue+0xe0>)
    a940:	4203      	tst	r3, r0
    a942:	d114      	bne.n	a96e <ll_rx_dequeue+0x6a>
    a944:	061b      	lsls	r3, r3, #24
    a946:	d5ec      	bpl.n	a922 <ll_rx_dequeue+0x1e>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    a948:	2906      	cmp	r1, #6
    a94a:	d137      	bne.n	a9bc <ll_rx_dequeue+0xb8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    a94c:	0013      	movs	r3, r2
    a94e:	7ad2      	ldrb	r2, [r2, #11]
    a950:	330b      	adds	r3, #11
    a952:	2a3c      	cmp	r2, #60	; 0x3c
    a954:	d017      	beq.n	a986 <ll_rx_dequeue+0x82>
    a956:	785b      	ldrb	r3, [r3, #1]
    a958:	2b00      	cmp	r3, #0
    a95a:	d130      	bne.n	a9be <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    a95c:	0022      	movs	r2, r4
    a95e:	2101      	movs	r1, #1
    a960:	32dc      	adds	r2, #220	; 0xdc
    a962:	7813      	ldrb	r3, [r2, #0]
    a964:	420b      	tst	r3, r1
    a966:	d0dc      	beq.n	a922 <ll_rx_dequeue+0x1e>
			_radio.scanner.is_enabled = 0;
    a968:	438b      	bics	r3, r1
    a96a:	7013      	strb	r3, [r2, #0]
    a96c:	e019      	b.n	a9a2 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    a96e:	209a      	movs	r0, #154	; 0x9a
    a970:	25a4      	movs	r5, #164	; 0xa4
    a972:	0040      	lsls	r0, r0, #1
    a974:	006d      	lsls	r5, r5, #1
    a976:	5c20      	ldrb	r0, [r4, r0]
    a978:	5d63      	ldrb	r3, [r4, r5]
    a97a:	3801      	subs	r0, #1
    a97c:	4283      	cmp	r3, r0
    a97e:	dad0      	bge.n	a922 <ll_rx_dequeue+0x1e>
		_radio.link_rx_data_quota++;
    a980:	3301      	adds	r3, #1
    a982:	5563      	strb	r3, [r4, r5]
		break;
    a984:	e7e0      	b.n	a948 <ll_rx_dequeue+0x44>
				conn = _radio.advertiser.conn;
    a986:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    a988:	2200      	movs	r2, #0
				conn = _radio.advertiser.conn;
    a98a:	33c8      	adds	r3, #200	; 0xc8
    a98c:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
    a98e:	601a      	str	r2, [r3, #0]
			LL_ASSERT(_radio.advertiser.is_enabled);
    a990:	1d62      	adds	r2, r4, #5
    a992:	7fd3      	ldrb	r3, [r2, #31]
    a994:	2b7f      	cmp	r3, #127	; 0x7f
    a996:	d9c4      	bls.n	a922 <ll_rx_dequeue+0x1e>
			_radio.advertiser.is_enabled = 0;
    a998:	217f      	movs	r1, #127	; 0x7f
    a99a:	400b      	ands	r3, r1
    a99c:	77d3      	strb	r3, [r2, #31]
		if (conn) {
    a99e:	2d00      	cmp	r5, #0
    a9a0:	d10f      	bne.n	a9c2 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a9a2:	0023      	movs	r3, r4
    a9a4:	33dc      	adds	r3, #220	; 0xdc
    a9a6:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
    a9a8:	3405      	adds	r4, #5
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a9aa:	07c0      	lsls	r0, r0, #31
		     _radio.advertiser.is_enabled;
    a9ac:	7fe3      	ldrb	r3, [r4, #31]
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a9ae:	0fc0      	lsrs	r0, r0, #31
    a9b0:	0040      	lsls	r0, r0, #1
    a9b2:	09db      	lsrs	r3, r3, #7
		if (!bm) {
    a9b4:	4318      	orrs	r0, r3
    a9b6:	d101      	bne.n	a9bc <ll_rx_dequeue+0xb8>
			ll_adv_scan_state_cb(0);
    a9b8:	f7ff fdf8 	bl	a5ac <ll_adv_scan_state_cb>
}
    a9bc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		struct connection *conn = NULL;
    a9be:	2500      	movs	r5, #0
    a9c0:	e7e6      	b.n	a990 <ll_rx_dequeue+0x8c>
			mem_release(node_rx->hdr.onion.link,
    a9c2:	0021      	movs	r1, r4
    a9c4:	002b      	movs	r3, r5
    a9c6:	313d      	adds	r1, #61	; 0x3d
    a9c8:	339c      	adds	r3, #156	; 0x9c
    a9ca:	6818      	ldr	r0, [r3, #0]
    a9cc:	31ff      	adds	r1, #255	; 0xff
    a9ce:	f7fa fb08 	bl	4fe2 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a9d2:	0021      	movs	r1, r4
    a9d4:	3109      	adds	r1, #9
    a9d6:	31ff      	adds	r1, #255	; 0xff
    a9d8:	0028      	movs	r0, r5
    a9da:	f7fa fb02 	bl	4fe2 <mem_release>
    a9de:	e7e0      	b.n	a9a2 <ll_rx_dequeue+0x9e>
    a9e0:	20000298 	.word	0x20000298
    a9e4:	0000077e 	.word	0x0000077e

0000a9e8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    a9e8:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    a9ea:	4c0a      	ldr	r4, [pc, #40]	; (aa14 <rtc0_nrf5_isr+0x2c>)
    a9ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    a9ee:	6ca5      	ldr	r5, [r4, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    a9f0:	2a00      	cmp	r2, #0
    a9f2:	d003      	beq.n	a9fc <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    a9f4:	2000      	movs	r0, #0
    a9f6:	6460      	str	r0, [r4, #68]	; 0x44

		ticker_trigger(0);
    a9f8:	f7fb f8f4 	bl	5be4 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    a9fc:	2d00      	cmp	r5, #0
    a9fe:	d004      	beq.n	aa0a <rtc0_nrf5_isr+0x22>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    aa00:	2300      	movs	r3, #0

		ticker_trigger(1);
    aa02:	2001      	movs	r0, #1
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    aa04:	64a3      	str	r3, [r4, #72]	; 0x48
		ticker_trigger(1);
    aa06:	f7fb f8ed 	bl	5be4 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    aa0a:	2000      	movs	r0, #0
    aa0c:	f7fa fbd8 	bl	51c0 <mayfly_run>
}
    aa10:	bd70      	pop	{r4, r5, r6, pc}
    aa12:	46c0      	nop			; (mov r8, r8)
    aa14:	4000b0fc 	.word	0x4000b0fc

0000aa18 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    aa18:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    aa1a:	2001      	movs	r0, #1
    aa1c:	f7fa fbd0 	bl	51c0 <mayfly_run>
}
    aa20:	bd10      	pop	{r4, pc}

0000aa22 <rng_nrf5_isr>:
{
    aa22:	b510      	push	{r4, lr}
	isr_rand(arg);
    aa24:	f000 fc5c 	bl	b2e0 <isr_rand>
}
    aa28:	bd10      	pop	{r4, pc}

0000aa2a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    aa2a:	b510      	push	{r4, lr}
	isr_radio();
    aa2c:	f000 fce0 	bl	b3f0 <isr_radio>
	ISR_DIRECT_PM();
    aa30:	f7f8 f858 	bl	2ae4 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    aa34:	f7f7 ff44 	bl	28c0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    aa38:	bd10      	pop	{r4, pc}

0000aa3a <radio_active_callback>:
}
    aa3a:	4770      	bx	lr

0000aa3c <radio_event_callback>:
{
    aa3c:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    aa3e:	4b02      	ldr	r3, [pc, #8]	; (aa48 <radio_event_callback+0xc>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    aa40:	6818      	ldr	r0, [r3, #0]
    aa42:	f001 fed5 	bl	c7f0 <_impl_k_sem_give>
}
    aa46:	bd10      	pop	{r4, pc}
    aa48:	20000a58 	.word	0x20000a58

0000aa4c <ll_init>:

int ll_init(struct k_sem *sem_rx)
{
    aa4c:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    aa4e:	4b3c      	ldr	r3, [pc, #240]	; (ab40 <ll_init+0xf4>)
{
    aa50:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    aa52:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
    aa54:	2204      	movs	r2, #4
    aa56:	2109      	movs	r1, #9
    aa58:	483a      	ldr	r0, [pc, #232]	; (ab44 <ll_init+0xf8>)
    aa5a:	f000 fc19 	bl	b290 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
    aa5e:	483a      	ldr	r0, [pc, #232]	; (ab48 <ll_init+0xfc>)
    aa60:	220c      	movs	r2, #12
    aa62:	2111      	movs	r1, #17
    aa64:	f000 fc1e 	bl	b2a4 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    aa68:	4838      	ldr	r0, [pc, #224]	; (ab4c <ll_init+0x100>)
    aa6a:	f001 f9bb 	bl	bde4 <device_get_binding>
	if (!clk_k32) {
    aa6e:	2800      	cmp	r0, #0
    aa70:	d102      	bne.n	aa78 <ll_init+0x2c>
		return -ENODEV;
    aa72:	2013      	movs	r0, #19
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
    aa74:	4240      	negs	r0, r0
    aa76:	e05e      	b.n	ab36 <ll_init+0xea>
	return api->on(dev, sys);
    aa78:	6843      	ldr	r3, [r0, #4]
    aa7a:	2100      	movs	r1, #0
    aa7c:	681b      	ldr	r3, [r3, #0]
    aa7e:	4798      	blx	r3
	cntr_init();
    aa80:	f000 fb02 	bl	b088 <cntr_init>
	mayfly_init();
    aa84:	f7fa fb00 	bl	5088 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    aa88:	2208      	movs	r2, #8
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    aa8a:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    aa8c:	2402      	movs	r4, #2
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa8e:	250d      	movs	r5, #13
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    aa90:	4b2f      	ldr	r3, [pc, #188]	; (ab50 <ll_init+0x104>)
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa92:	2107      	movs	r1, #7
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    aa94:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    aa96:	3a05      	subs	r2, #5
    aa98:	721a      	strb	r2, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa9a:	4a2e      	ldr	r2, [pc, #184]	; (ab54 <ll_init+0x108>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    aa9c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    aa9e:	761c      	strb	r4, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    aaa0:	9205      	str	r2, [sp, #20]
    aaa2:	4a2d      	ldr	r2, [pc, #180]	; (ab58 <ll_init+0x10c>)
    aaa4:	9300      	str	r3, [sp, #0]
    aaa6:	9204      	str	r2, [sp, #16]
    aaa8:	4a2c      	ldr	r2, [pc, #176]	; (ab5c <ll_init+0x110>)
    aaaa:	9501      	str	r5, [sp, #4]
    aaac:	9203      	str	r2, [sp, #12]
    aaae:	4a2c      	ldr	r2, [pc, #176]	; (ab60 <ll_init+0x114>)
    aab0:	2304      	movs	r3, #4
    aab2:	9202      	str	r2, [sp, #8]
    aab4:	4a2b      	ldr	r2, [pc, #172]	; (ab64 <ll_init+0x118>)
    aab6:	f7fb f85d 	bl	5b74 <ticker_init>
    aaba:	1e06      	subs	r6, r0, #0
	LL_ASSERT(!err);
    aabc:	d002      	beq.n	aac4 <ll_init+0x78>
    aabe:	b662      	cpsie	i
    aac0:	2004      	movs	r0, #4
    aac2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    aac4:	4828      	ldr	r0, [pc, #160]	; (ab68 <ll_init+0x11c>)
    aac6:	f001 f98d 	bl	bde4 <device_get_binding>
	if (!clk_m16) {
    aaca:	2800      	cmp	r0, #0
    aacc:	d0d1      	beq.n	aa72 <ll_init+0x26>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    aace:	23f8      	movs	r3, #248	; 0xf8
    aad0:	005b      	lsls	r3, r3, #1
    aad2:	9304      	str	r3, [sp, #16]
    aad4:	4b25      	ldr	r3, [pc, #148]	; (ab6c <ll_init+0x120>)
    aad6:	9400      	str	r4, [sp, #0]
    aad8:	9303      	str	r3, [sp, #12]
    aada:	231b      	movs	r3, #27
    aadc:	9302      	str	r3, [sp, #8]
    aade:	9301      	str	r3, [sp, #4]
    aae0:	3b1a      	subs	r3, #26
    aae2:	0032      	movs	r2, r6
    aae4:	0019      	movs	r1, r3
    aae6:	f7ff fb6f 	bl	a1c8 <radio_init>
    aaea:	1e04      	subs	r4, r0, #0
	if (err) {
    aaec:	d125      	bne.n	ab3a <ll_init+0xee>
	}

	ll_filter_reset(true);
    aaee:	2001      	movs	r0, #1
    aaf0:	f000 fabe 	bl	b070 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    aaf4:	0022      	movs	r2, r4
    aaf6:	0021      	movs	r1, r4
    aaf8:	2001      	movs	r0, #1
    aafa:	f7f7 ffbd 	bl	2a78 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    aafe:	0022      	movs	r2, r4
    ab00:	0021      	movs	r1, r4
    ab02:	200b      	movs	r0, #11
    ab04:	f7f7 ffb8 	bl	2a78 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    ab08:	0022      	movs	r2, r4
    ab0a:	0021      	movs	r1, r4
    ab0c:	2018      	movs	r0, #24
    ab0e:	f7f7 ffb3 	bl	2a78 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    ab12:	0022      	movs	r2, r4
    ab14:	2101      	movs	r1, #1
    ab16:	0028      	movs	r0, r5
    ab18:	f7f7 ffae 	bl	2a78 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    ab1c:	2001      	movs	r0, #1
    ab1e:	f7f7 ff81 	bl	2a24 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    ab22:	200b      	movs	r0, #11
    ab24:	f7f7 ff7e 	bl	2a24 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    ab28:	2018      	movs	r0, #24
    ab2a:	f7f7 ff7b 	bl	2a24 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    ab2e:	0028      	movs	r0, r5
    ab30:	f7f7 ff78 	bl	2a24 <_arch_irq_enable>

	return 0;
    ab34:	0020      	movs	r0, r4
}
    ab36:	b006      	add	sp, #24
    ab38:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ab3a:	200c      	movs	r0, #12
    ab3c:	e79a      	b.n	aa74 <ll_init+0x28>
    ab3e:	46c0      	nop			; (mov r8, r8)
    ab40:	20000a58 	.word	0x20000a58
    ab44:	20000a38 	.word	0x20000a38
    ab48:	20000a44 	.word	0x20000a44
    ab4c:	0000d8f8 	.word	0x0000d8f8
    ab50:	20000a18 	.word	0x20000a18
    ab54:	0000bba1 	.word	0x0000bba1
    ab58:	0000bb2d 	.word	0x0000bb2d
    ab5c:	0000bb15 	.word	0x0000bb15
    ab60:	200007a8 	.word	0x200007a8
    ab64:	20000690 	.word	0x20000690
    ab68:	0000d903 	.word	0x0000d903
    ab6c:	200004a0 	.word	0x200004a0

0000ab70 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab72:	b08b      	sub	sp, #44	; 0x2c
    ab74:	9201      	str	r2, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    ab76:	2200      	movs	r2, #0
{
    ab78:	001d      	movs	r5, r3
    ab7a:	ab10      	add	r3, sp, #64	; 0x40
    ab7c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    ab7e:	2601      	movs	r6, #1
{
    ab80:	9302      	str	r3, [sp, #8]
    ab82:	ab11      	add	r3, sp, #68	; 0x44
    ab84:	781b      	ldrb	r3, [r3, #0]
    ab86:	000f      	movs	r7, r1
    ab88:	9303      	str	r3, [sp, #12]
    ab8a:	ab13      	add	r3, sp, #76	; 0x4c
    ab8c:	781b      	ldrb	r3, [r3, #0]
    ab8e:	9304      	str	r3, [sp, #16]
    ab90:	ab14      	add	r3, sp, #80	; 0x50
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	9305      	str	r3, [sp, #20]
    ab96:	ab16      	add	r3, sp, #88	; 0x58
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	9300      	str	r3, [sp, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    ab9c:	ab08      	add	r3, sp, #32
    ab9e:	701a      	strb	r2, [r3, #0]
    aba0:	3206      	adds	r2, #6
    aba2:	709a      	strb	r2, [r3, #2]
    aba4:	3a04      	subs	r2, #4
    aba6:	70da      	strb	r2, [r3, #3]
    aba8:	2207      	movs	r2, #7
    abaa:	705e      	strb	r6, [r3, #1]
    abac:	711e      	strb	r6, [r3, #4]
    abae:	715a      	strb	r2, [r3, #5]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    abb0:	f7ff fbe8 	bl	a384 <ll_adv_is_enabled>
    abb4:	1e04      	subs	r4, r0, #0
    abb6:	d000      	beq.n	abba <ll_adv_params_set+0x4a>
    abb8:	e0ce      	b.n	ad58 <ll_adv_params_set+0x1e8>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    abba:	201f      	movs	r0, #31
    abbc:	2320      	movs	r3, #32
    abbe:	4a68      	ldr	r2, [pc, #416]	; (ad60 <ll_adv_params_set+0x1f0>)
    abc0:	7811      	ldrb	r1, [r2, #0]
    abc2:	4001      	ands	r1, r0
    abc4:	430b      	orrs	r3, r1
    abc6:	7013      	strb	r3, [r2, #0]

	/* extended */
	if (adv_type > 0x04) {
    abc8:	2d04      	cmp	r5, #4
    abca:	d967      	bls.n	ac9c <ll_adv_params_set+0x12c>
    abcc:	2303      	movs	r3, #3
		/* legacy */
		if (evt_prop & BIT(4)) {
    abce:	06f9      	lsls	r1, r7, #27
    abd0:	d50e      	bpl.n	abf0 <ll_adv_params_set+0x80>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    abd2:	2104      	movs	r1, #4
    abd4:	aa07      	add	r2, sp, #28
    abd6:	7051      	strb	r1, [r2, #1]
    abd8:	3902      	subs	r1, #2
    abda:	7013      	strb	r3, [r2, #0]
    abdc:	7091      	strb	r1, [r2, #2]
    abde:	70d4      	strb	r4, [r2, #3]

			adv_type = leg_adv_type[evt_prop & 0x03];
    abe0:	403b      	ands	r3, r7
    abe2:	5cd5      	ldrb	r5, [r2, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    abe4:	073b      	lsls	r3, r7, #28
    abe6:	d559      	bpl.n	ac9c <ll_adv_params_set+0x12c>
				adv_type = 0x01;
    abe8:	0035      	movs	r5, r6
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    abea:	2200      	movs	r2, #0
    abec:	4b5c      	ldr	r3, [pc, #368]	; (ad60 <ll_adv_params_set+0x1f0>)
    abee:	e011      	b.n	ac14 <ll_adv_params_set+0xa4>
			if (((evt_prop & 0x03) == 0x03) ||
    abf0:	403b      	ands	r3, r7
    abf2:	2b03      	cmp	r3, #3
    abf4:	d100      	bne.n	abf8 <ll_adv_params_set+0x88>
    abf6:	e0b1      	b.n	ad5c <ll_adv_params_set+0x1ec>
    abf8:	230c      	movs	r3, #12
    abfa:	403b      	ands	r3, r7
    abfc:	2b0c      	cmp	r3, #12
    abfe:	d100      	bne.n	ac02 <ll_adv_params_set+0x92>
    ac00:	e0ac      	b.n	ad5c <ll_adv_params_set+0x1ec>
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    ac02:	2505      	movs	r5, #5
			ll_adv.phy_p = phy_p;
    ac04:	9b00      	ldr	r3, [sp, #0]
    ac06:	0159      	lsls	r1, r3, #5
    ac08:	7813      	ldrb	r3, [r2, #0]
    ac0a:	4003      	ands	r3, r0
    ac0c:	430b      	orrs	r3, r1
    ac0e:	7013      	strb	r3, [r2, #0]
		ll_adv.interval = interval;
    ac10:	4b53      	ldr	r3, [pc, #332]	; (ad60 <ll_adv_params_set+0x1f0>)
    ac12:	9a01      	ldr	r2, [sp, #4]
	}
	ll_adv.chan_map = chan_map;
    ac14:	2107      	movs	r1, #7
		ll_adv.interval = 0;
    ac16:	605a      	str	r2, [r3, #4]
	ll_adv.chan_map = chan_map;
    ac18:	4a51      	ldr	r2, [pc, #324]	; (ad60 <ll_adv_params_set+0x1f0>)
    ac1a:	9804      	ldr	r0, [sp, #16]
    ac1c:	7813      	ldrb	r3, [r2, #0]
    ac1e:	4008      	ands	r0, r1
    ac20:	438b      	bics	r3, r1
	ll_adv.filter_policy = filter_policy;
    ac22:	4303      	orrs	r3, r0
    ac24:	2018      	movs	r0, #24
    ac26:	9e05      	ldr	r6, [sp, #20]
    ac28:	3904      	subs	r1, #4
    ac2a:	400e      	ands	r6, r1
    ac2c:	00f1      	lsls	r1, r6, #3
    ac2e:	4383      	bics	r3, r0
    ac30:	430b      	orrs	r3, r1
    ac32:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    ac34:	f7ff fb9a 	bl	a36c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac38:	0003      	movs	r3, r0
    ac3a:	2627      	movs	r6, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
    ac3c:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac3e:	334f      	adds	r3, #79	; 0x4f
    ac40:	781b      	ldrb	r3, [r3, #0]
    ac42:	435e      	muls	r6, r3
	pdu->type = pdu_adv_type[adv_type];
    ac44:	ab08      	add	r3, sp, #32
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac46:	1986      	adds	r6, r0, r6
	pdu->type = pdu_adv_type[adv_type];
    ac48:	5d59      	ldrb	r1, [r3, r5]
    ac4a:	7833      	ldrb	r3, [r6, #0]
    ac4c:	4011      	ands	r1, r2
    ac4e:	4393      	bics	r3, r2
	pdu->rfu = 0;
    ac50:	430b      	orrs	r3, r1
    ac52:	2110      	movs	r1, #16
    ac54:	438b      	bics	r3, r1
    ac56:	7033      	strb	r3, [r6, #0]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    ac58:	401a      	ands	r2, r3
    ac5a:	1849      	adds	r1, r1, r1
    ac5c:	2a01      	cmp	r2, #1
    ac5e:	d820      	bhi.n	aca2 <ll_adv_params_set+0x132>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    ac60:	430b      	orrs	r3, r1
	} else {
		pdu->chan_sel = 0;
    ac62:	7033      	strb	r3, [r6, #0]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    ac64:	2301      	movs	r3, #1
    ac66:	2040      	movs	r0, #64	; 0x40
    ac68:	9d02      	ldr	r5, [sp, #8]
    ac6a:	401d      	ands	r5, r3
    ac6c:	7833      	ldrb	r3, [r6, #0]
    ac6e:	01a9      	lsls	r1, r5, #6
    ac70:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    ac72:	430b      	orrs	r3, r1
    ac74:	217f      	movs	r1, #127	; 0x7f
    ac76:	400b      	ands	r3, r1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    ac78:	3970      	subs	r1, #112	; 0x70
	pdu->rx_addr = 0;
    ac7a:	7033      	strb	r3, [r6, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    ac7c:	4019      	ands	r1, r3
    ac7e:	2901      	cmp	r1, #1
    ac80:	d111      	bne.n	aca6 <ll_adv_params_set+0x136>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ac82:	0030      	movs	r0, r6
		pdu->rx_addr = direct_addr_type;
    ac84:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ac86:	3008      	adds	r0, #8
		pdu->rx_addr = direct_addr_type;
    ac88:	01d2      	lsls	r2, r2, #7
    ac8a:	4313      	orrs	r3, r2
    ac8c:	7033      	strb	r3, [r6, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ac8e:	2206      	movs	r2, #6
    ac90:	9912      	ldr	r1, [sp, #72]	; 0x48
    ac92:	f7f7 f84b 	bl	1d2c <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    ac96:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    ac98:	7073      	strb	r3, [r6, #1]
    ac9a:	e039      	b.n	ad10 <ll_adv_params_set+0x1a0>
	if (adv_type != 0x01) {
    ac9c:	2d01      	cmp	r5, #1
    ac9e:	d1b7      	bne.n	ac10 <ll_adv_params_set+0xa0>
    aca0:	e7a3      	b.n	abea <ll_adv_params_set+0x7a>
		pdu->chan_sel = 0;
    aca2:	438b      	bics	r3, r1
    aca4:	e7dd      	b.n	ac62 <ll_adv_params_set+0xf2>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    aca6:	2907      	cmp	r1, #7
    aca8:	d151      	bne.n	ad4e <ll_adv_params_set+0x1de>
		p->adv_mode = evt_prop & 0x03;
    acaa:	01b9      	lsls	r1, r7, #6
    acac:	70b1      	strb	r1, [r6, #2]
		*(u8_t *)h = 0;
    acae:	2100      	movs	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    acb0:	1cb0      	adds	r0, r6, #2
		ptr = (u8_t *)h + sizeof(*h);
    acb2:	1d33      	adds	r3, r6, #4
		*(u8_t *)h = 0;
    acb4:	70f1      	strb	r1, [r6, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    acb6:	06ba      	lsls	r2, r7, #26
    acb8:	d40a      	bmi.n	acd0 <ll_adv_params_set+0x160>
    acba:	223f      	movs	r2, #63	; 0x3f
    acbc:	78b1      	ldrb	r1, [r6, #2]
    acbe:	4391      	bics	r1, r2
    acc0:	d106      	bne.n	acd0 <ll_adv_params_set+0x160>
    acc2:	9a00      	ldr	r2, [sp, #0]
    acc4:	2a04      	cmp	r2, #4
    acc6:	d003      	beq.n	acd0 <ll_adv_params_set+0x160>
			h->adv_addr = 1;
    acc8:	2301      	movs	r3, #1
    acca:	70f3      	strb	r3, [r6, #3]
			ptr += BDADDR_SIZE;
    accc:	0033      	movs	r3, r6
    acce:	330a      	adds	r3, #10
		if (evt_prop & BIT(6)) {
    acd0:	2140      	movs	r1, #64	; 0x40
    acd2:	420f      	tst	r7, r1
    acd4:	d003      	beq.n	acde <ll_adv_params_set+0x16e>
			h->tx_pwr = 1;
    acd6:	78f2      	ldrb	r2, [r6, #3]
			ptr++;
    acd8:	3301      	adds	r3, #1
			h->tx_pwr = 1;
    acda:	4311      	orrs	r1, r2
    acdc:	70f1      	strb	r1, [r6, #3]
		len = ptr - (u8_t *)p;
    acde:	1a1a      	subs	r2, r3, r0
    ace0:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    ace2:	2a02      	cmp	r2, #2
    ace4:	d931      	bls.n	ad4a <ll_adv_params_set+0x1da>
			p->ext_hdr_len = len -
    ace6:	273f      	movs	r7, #63	; 0x3f
    ace8:	78b1      	ldrb	r1, [r6, #2]
    acea:	1e50      	subs	r0, r2, #1
    acec:	4038      	ands	r0, r7
    acee:	43b9      	bics	r1, r7
    acf0:	4301      	orrs	r1, r0
    acf2:	70b1      	strb	r1, [r6, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    acf4:	7072      	strb	r2, [r6, #1]
		if (h->tx_pwr) {
    acf6:	78f2      	ldrb	r2, [r6, #3]
    acf8:	0652      	lsls	r2, r2, #25
    acfa:	d509      	bpl.n	ad10 <ll_adv_params_set+0x1a0>
			_tx_pwr = 0;
    acfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
			if (tx_pwr) {
    acfe:	1e11      	subs	r1, r2, #0
    ad00:	d004      	beq.n	ad0c <ll_adv_params_set+0x19c>
				if (*tx_pwr != 0x7F) {
    ad02:	7812      	ldrb	r2, [r2, #0]
    ad04:	2a7f      	cmp	r2, #127	; 0x7f
    ad06:	d101      	bne.n	ad0c <ll_adv_params_set+0x19c>
					*tx_pwr = _tx_pwr;
    ad08:	2200      	movs	r2, #0
    ad0a:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    ad0c:	3b01      	subs	r3, #1
    ad0e:	701a      	strb	r2, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    ad10:	f7ff fb32 	bl	a378 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ad14:	0003      	movs	r3, r0
    ad16:	334f      	adds	r3, #79	; 0x4f
    ad18:	781a      	ldrb	r2, [r3, #0]
    ad1a:	2327      	movs	r3, #39	; 0x27
    ad1c:	4353      	muls	r3, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ad1e:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ad20:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ad22:	7803      	ldrb	r3, [r0, #0]
    ad24:	4393      	bics	r3, r2
    ad26:	001a      	movs	r2, r3
	pdu->rfu = 0;
    ad28:	2304      	movs	r3, #4
    ad2a:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    ad2c:	01aa      	lsls	r2, r5, #6
    ad2e:	258f      	movs	r5, #143	; 0x8f
    ad30:	401d      	ands	r5, r3
	pdu->rx_addr = 0;
    ad32:	237f      	movs	r3, #127	; 0x7f
    ad34:	4315      	orrs	r5, r2
    ad36:	401d      	ands	r5, r3
	if (pdu->len == 0) {
    ad38:	7843      	ldrb	r3, [r0, #1]
	pdu->rx_addr = 0;
    ad3a:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d101      	bne.n	ad44 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
    ad40:	3306      	adds	r3, #6
    ad42:	7043      	strb	r3, [r0, #1]
	}

	return 0;
}
    ad44:	0020      	movs	r0, r4
    ad46:	b00b      	add	sp, #44	; 0x2c
    ad48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    ad4a:	2201      	movs	r2, #1
    ad4c:	e7d2      	b.n	acf4 <ll_adv_params_set+0x184>
	} else if (pdu->len == 0) {
    ad4e:	7873      	ldrb	r3, [r6, #1]
    ad50:	2b00      	cmp	r3, #0
    ad52:	d1dd      	bne.n	ad10 <ll_adv_params_set+0x1a0>
		pdu->len = BDADDR_SIZE;
    ad54:	3306      	adds	r3, #6
    ad56:	e79f      	b.n	ac98 <ll_adv_params_set+0x128>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ad58:	240c      	movs	r4, #12
    ad5a:	e7f3      	b.n	ad44 <ll_adv_params_set+0x1d4>
				return 0x12; /* invalid HCI cmd param */
    ad5c:	2412      	movs	r4, #18
    ad5e:	e7f1      	b.n	ad44 <ll_adv_params_set+0x1d4>
    ad60:	20000a5c 	.word	0x20000a5c

0000ad64 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    ad64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ad66:	0007      	movs	r7, r0
    ad68:	9100      	str	r1, [sp, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    ad6a:	f7ff faff 	bl	a36c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ad6e:	0003      	movs	r3, r0
    ad70:	2127      	movs	r1, #39	; 0x27
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ad72:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ad74:	334f      	adds	r3, #79	; 0x4f
    ad76:	781d      	ldrb	r5, [r3, #0]
	radio_adv_data = radio_adv_data_get();
    ad78:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ad7a:	4369      	muls	r1, r5
    ad7c:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ad7e:	780b      	ldrb	r3, [r1, #0]
    ad80:	401a      	ands	r2, r3
    ad82:	2a01      	cmp	r2, #1
    ad84:	d045      	beq.n	ae12 <ll_adv_data_set+0xae>
    ad86:	2a07      	cmp	r2, #7
    ad88:	d043      	beq.n	ae12 <ll_adv_data_set+0xae>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    ad8a:	0002      	movs	r2, r0
    ad8c:	324e      	adds	r2, #78	; 0x4e
    ad8e:	7812      	ldrb	r2, [r2, #0]
    ad90:	42aa      	cmp	r2, r5
    ad92:	d104      	bne.n	ad9e <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
    ad94:	3501      	adds	r5, #1
    ad96:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    ad98:	2d02      	cmp	r5, #2
    ad9a:	d100      	bne.n	ad9e <ll_adv_data_set+0x3a>
			last = 0;
    ad9c:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    ad9e:	200f      	movs	r0, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    ada0:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
    ada2:	4003      	ands	r3, r0
    ada4:	001a      	movs	r2, r3
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    ada6:	436c      	muls	r4, r5
    ada8:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
    adaa:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    adac:	364f      	adds	r6, #79	; 0x4f
	pdu->type = prev->type;
    adae:	4383      	bics	r3, r0
	pdu->rfu = 0;
    adb0:	4313      	orrs	r3, r2
    adb2:	2210      	movs	r2, #16
    adb4:	4393      	bics	r3, r2
    adb6:	7023      	strb	r3, [r4, #0]
		pdu->chan_sel = prev->chan_sel;
    adb8:	780a      	ldrb	r2, [r1, #0]
    adba:	380e      	subs	r0, #14
    adbc:	0952      	lsrs	r2, r2, #5
    adbe:	4002      	ands	r2, r0
    adc0:	0153      	lsls	r3, r2, #5
    adc2:	9301      	str	r3, [sp, #4]
    adc4:	7823      	ldrb	r3, [r4, #0]
    adc6:	001a      	movs	r2, r3
    adc8:	2320      	movs	r3, #32
    adca:	439a      	bics	r2, r3
    adcc:	0013      	movs	r3, r2
    adce:	9a01      	ldr	r2, [sp, #4]
    add0:	431a      	orrs	r2, r3
    add2:	7022      	strb	r2, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
    add4:	780b      	ldrb	r3, [r1, #0]
    add6:	b2d2      	uxtb	r2, r2
    add8:	099b      	lsrs	r3, r3, #6
    adda:	4003      	ands	r3, r0
    addc:	303f      	adds	r0, #63	; 0x3f
    adde:	4382      	bics	r2, r0
    ade0:	019b      	lsls	r3, r3, #6
    ade2:	4313      	orrs	r3, r2
    ade4:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
    ade6:	780b      	ldrb	r3, [r1, #0]
    ade8:	303f      	adds	r0, #63	; 0x3f
    adea:	09db      	lsrs	r3, r3, #7
    adec:	01da      	lsls	r2, r3, #7
    adee:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    adf0:	3102      	adds	r1, #2
	pdu->rx_addr = prev->rx_addr;
    adf2:	4003      	ands	r3, r0
    adf4:	4313      	orrs	r3, r2
    adf6:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    adf8:	2206      	movs	r2, #6
    adfa:	1ca0      	adds	r0, r4, #2
    adfc:	f7f6 ff96 	bl	1d2c <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    ae00:	0020      	movs	r0, r4
    ae02:	003a      	movs	r2, r7
    ae04:	3008      	adds	r0, #8
    ae06:	9900      	ldr	r1, [sp, #0]
    ae08:	f7f6 ff90 	bl	1d2c <memcpy>
	pdu->len = BDADDR_SIZE + len;
    ae0c:	1dbb      	adds	r3, r7, #6
    ae0e:	7063      	strb	r3, [r4, #1]
	radio_adv_data->last = last;
    ae10:	7035      	strb	r5, [r6, #0]
}
    ae12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000ae14 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    ae14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ae16:	0007      	movs	r7, r0
    ae18:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    ae1a:	f7ff faad 	bl	a378 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    ae1e:	0003      	movs	r3, r0
    ae20:	334f      	adds	r3, #79	; 0x4f
    ae22:	7819      	ldrb	r1, [r3, #0]
    ae24:	3b01      	subs	r3, #1
    ae26:	781b      	ldrb	r3, [r3, #0]
	radio_scan_data = radio_scan_data_get();
    ae28:	0005      	movs	r5, r0
    ae2a:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
    ae2c:	428b      	cmp	r3, r1
    ae2e:	d104      	bne.n	ae3a <ll_scan_data_set+0x26>
		last = radio_scan_data->last + 1;
    ae30:	1c4e      	adds	r6, r1, #1
    ae32:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    ae34:	2e02      	cmp	r6, #2
    ae36:	d100      	bne.n	ae3a <ll_scan_data_set+0x26>
			last = 0;
    ae38:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    ae3a:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ae3c:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)
    ae3e:	4361      	muls	r1, r4
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    ae40:	4374      	muls	r4, r6
    ae42:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ae44:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    ae46:	2040      	movs	r0, #64	; 0x40
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ae48:	4393      	bics	r3, r2
    ae4a:	001a      	movs	r2, r3
	pdu->rfu = 0;
    ae4c:	2304      	movs	r3, #4
    ae4e:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
    ae50:	22cf      	movs	r2, #207	; 0xcf
    ae52:	4013      	ands	r3, r2
    ae54:	7023      	strb	r3, [r4, #0]
	prev = (struct pdu_adv *)
    ae56:	1869      	adds	r1, r5, r1
	pdu->tx_addr = prev->tx_addr;
    ae58:	780b      	ldrb	r3, [r1, #0]
    ae5a:	3a8f      	subs	r2, #143	; 0x8f
    ae5c:	401a      	ands	r2, r3
    ae5e:	7823      	ldrb	r3, [r4, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    ae60:	3102      	adds	r1, #2
	pdu->tx_addr = prev->tx_addr;
    ae62:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    ae64:	4313      	orrs	r3, r2
    ae66:	227f      	movs	r2, #127	; 0x7f
    ae68:	4013      	ands	r3, r2
    ae6a:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    ae6c:	1dbb      	adds	r3, r7, #6
    ae6e:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    ae70:	1ca0      	adds	r0, r4, #2
    ae72:	3a79      	subs	r2, #121	; 0x79
    ae74:	f7f6 ff5a 	bl	1d2c <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    ae78:	0020      	movs	r0, r4
    ae7a:	003a      	movs	r2, r7

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    ae7c:	354f      	adds	r5, #79	; 0x4f
	memcpy(&pdu->scan_rsp.data[0], data, len);
    ae7e:	9901      	ldr	r1, [sp, #4]
    ae80:	3008      	adds	r0, #8
    ae82:	f7f6 ff53 	bl	1d2c <memcpy>
	radio_scan_data->last = last;
    ae86:	702e      	strb	r6, [r5, #0]
}
    ae88:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0000ae8c <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    ae8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae8e:	b085      	sub	sp, #20
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    ae90:	2800      	cmp	r0, #0
    ae92:	d103      	bne.n	ae9c <ll_adv_enable+0x10>
		return radio_adv_disable();
    ae94:	f7ff fd06 	bl	a8a4 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    ae98:	b005      	add	sp, #20
    ae9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ll_adv_is_enabled()) {
    ae9c:	f7ff fa72 	bl	a384 <ll_adv_is_enabled>
    aea0:	0007      	movs	r7, r0
		return 0;
    aea2:	2000      	movs	r0, #0
	} else if (ll_adv_is_enabled()) {
    aea4:	4287      	cmp	r7, r0
    aea6:	d1f7      	bne.n	ae98 <ll_adv_enable+0xc>
	radio_adv_data = radio_adv_data_get();
    aea8:	f7ff fa60 	bl	a36c <radio_adv_data_get>
    aeac:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
    aeae:	f7ff fa63 	bl	a378 <radio_scan_data_get>
			[radio_adv_data->last][0];
    aeb2:	0023      	movs	r3, r4
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    aeb4:	2627      	movs	r6, #39	; 0x27
			[radio_adv_data->last][0];
    aeb6:	334f      	adds	r3, #79	; 0x4f
	radio_scan_data = radio_scan_data_get();
    aeb8:	0005      	movs	r5, r0
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    aeba:	7818      	ldrb	r0, [r3, #0]
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    aebc:	230f      	movs	r3, #15
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    aebe:	4370      	muls	r0, r6
    aec0:	1824      	adds	r4, r4, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    aec2:	7820      	ldrb	r0, [r4, #0]
    aec4:	4003      	ands	r3, r0
    aec6:	2b07      	cmp	r3, #7
    aec8:	d11a      	bne.n	af00 <ll_adv_enable+0x74>
		if (h->adv_addr) {
    aeca:	78e3      	ldrb	r3, [r4, #3]
    aecc:	07db      	lsls	r3, r3, #31
    aece:	d509      	bpl.n	aee4 <ll_adv_enable+0x58>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    aed0:	0640      	lsls	r0, r0, #25
    aed2:	0039      	movs	r1, r7
    aed4:	0fc0      	lsrs	r0, r0, #31
    aed6:	f7fa ffd3 	bl	5e80 <ll_addr_get>
    aeda:	0001      	movs	r1, r0
		ptr = (u8_t *)h + sizeof(*h);
    aedc:	1d20      	adds	r0, r4, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    aede:	2206      	movs	r2, #6
    aee0:	f7f6 ff24 	bl	1d2c <memcpy>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    aee4:	24ff      	movs	r4, #255	; 0xff
				  ll_adv.chan_map, ll_adv.filter_policy,
    aee6:	4913      	ldr	r1, [pc, #76]	; (af34 <ll_adv_enable+0xa8>)
    aee8:	7808      	ldrb	r0, [r1, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    aeea:	6849      	ldr	r1, [r1, #4]
				  ll_adv.chan_map, ll_adv.filter_policy,
    aeec:	06c3      	lsls	r3, r0, #27
    aeee:	0742      	lsls	r2, r0, #29
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    aef0:	0f9b      	lsrs	r3, r3, #30
    aef2:	0f52      	lsrs	r2, r2, #29
    aef4:	b289      	uxth	r1, r1
    aef6:	9400      	str	r4, [sp, #0]
    aef8:	0940      	lsrs	r0, r0, #5
    aefa:	f7ff fb59 	bl	a5b0 <radio_adv_enable>
	return status;
    aefe:	e7cb      	b.n	ae98 <ll_adv_enable+0xc>
			[radio_scan_data->last][0];
    af00:	002b      	movs	r3, r5
    af02:	334f      	adds	r3, #79	; 0x4f
    af04:	781b      	ldrb	r3, [r3, #0]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    af06:	0640      	lsls	r0, r0, #25
    af08:	0039      	movs	r1, r7
    af0a:	0fc0      	lsrs	r0, r0, #31
			[radio_scan_data->last][0];
    af0c:	9303      	str	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    af0e:	f7fa ffb7 	bl	5e80 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    af12:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    af14:	0001      	movs	r1, r0
			memcpy(&pdu_adv->adv_ind.addr[0],
    af16:	1ca0      	adds	r0, r4, #2
    af18:	f7f6 ff08 	bl	1d2c <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    af1c:	7820      	ldrb	r0, [r4, #0]
    af1e:	0039      	movs	r1, r7
    af20:	0640      	lsls	r0, r0, #25
    af22:	0fc0      	lsrs	r0, r0, #31
    af24:	f7fa ffac 	bl	5e80 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    af28:	9b03      	ldr	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    af2a:	0001      	movs	r1, r0
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    af2c:	435e      	muls	r6, r3
    af2e:	19ad      	adds	r5, r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    af30:	1ca8      	adds	r0, r5, #2
    af32:	e7d4      	b.n	aede <ll_adv_enable+0x52>
    af34:	20000a5c 	.word	0x20000a5c

0000af38 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    af38:	2800      	cmp	r0, #0
    af3a:	d102      	bne.n	af42 <ctrl_filter_get+0xa>
    af3c:	b662      	cpsie	i
    af3e:	2004      	movs	r0, #4
    af40:	df02      	svc	2
	return &wl_filter;
#endif
}
    af42:	4801      	ldr	r0, [pc, #4]	; (af48 <ctrl_filter_get+0x10>)
    af44:	4770      	bx	lr
    af46:	46c0      	nop			; (mov r8, r8)
    af48:	20000a64 	.word	0x20000a64

0000af4c <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    af4c:	2008      	movs	r0, #8
    af4e:	4770      	bx	lr

0000af50 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    af50:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    af52:	f7ff fa1f 	bl	a394 <radio_adv_filter_pol_get>
    af56:	1e04      	subs	r4, r0, #0
    af58:	d002      	beq.n	af60 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    af5a:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    af5c:	0020      	movs	r0, r4
    af5e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    af60:	f7ff fa3a 	bl	a3d8 <radio_scan_filter_pol_get>
    af64:	07c3      	lsls	r3, r0, #31
    af66:	d4f8      	bmi.n	af5a <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    af68:	4b02      	ldr	r3, [pc, #8]	; (af74 <ll_wl_clear+0x24>)
    af6a:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    af6c:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    af6e:	4b02      	ldr	r3, [pc, #8]	; (af78 <ll_wl_clear+0x28>)
    af70:	701c      	strb	r4, [r3, #0]
	return 0;
    af72:	e7f3      	b.n	af5c <ll_wl_clear+0xc>
    af74:	20000a64 	.word	0x20000a64
    af78:	20000dd8 	.word	0x20000dd8

0000af7c <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af7e:	0005      	movs	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    af80:	f7ff fa08 	bl	a394 <radio_adv_filter_pol_get>
    af84:	1e04      	subs	r4, r0, #0
    af86:	d002      	beq.n	af8e <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    af88:	240c      	movs	r4, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    af8a:	0020      	movs	r0, r4
    af8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    af8e:	f7ff fa23 	bl	a3d8 <radio_scan_filter_pol_get>
    af92:	2101      	movs	r1, #1
    af94:	4208      	tst	r0, r1
    af96:	d1f7      	bne.n	af88 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    af98:	782a      	ldrb	r2, [r5, #0]
    af9a:	2aff      	cmp	r2, #255	; 0xff
    af9c:	d102      	bne.n	afa4 <ll_wl_add+0x28>
		wl_anon = 1;
    af9e:	4b10      	ldr	r3, [pc, #64]	; (afe0 <ll_wl_add+0x64>)
    afa0:	7019      	strb	r1, [r3, #0]
		return 0;
    afa2:	e7f2      	b.n	af8a <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    afa4:	480f      	ldr	r0, [pc, #60]	; (afe4 <ll_wl_add+0x68>)
    afa6:	0023      	movs	r3, r4
    afa8:	7806      	ldrb	r6, [r0, #0]
    afaa:	2eff      	cmp	r6, #255	; 0xff
    afac:	d102      	bne.n	afb4 <ll_wl_add+0x38>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    afae:	2407      	movs	r4, #7
    afb0:	e7eb      	b.n	af8a <ll_wl_add+0xe>
	     index++) {
    afb2:	3301      	adds	r3, #1
	     (filter->enable_bitmask & BIT(index));
    afb4:	0037      	movs	r7, r6
    afb6:	40df      	lsrs	r7, r3
	for (index = 0;
    afb8:	420f      	tst	r7, r1
    afba:	d1fa      	bne.n	afb2 <ll_wl_add+0x36>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    afbc:	400a      	ands	r2, r1
    afbe:	409a      	lsls	r2, r3
	filter->enable_bitmask |= BIT(index);
    afc0:	000f      	movs	r7, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    afc2:	7841      	ldrb	r1, [r0, #1]
	filter->enable_bitmask |= BIT(index);
    afc4:	409f      	lsls	r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    afc6:	430a      	orrs	r2, r1
    afc8:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    afca:	2206      	movs	r2, #6
    afcc:	4353      	muls	r3, r2
	filter->enable_bitmask |= BIT(index);
    afce:	433e      	orrs	r6, r7
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    afd0:	3302      	adds	r3, #2
	filter->enable_bitmask |= BIT(index);
    afd2:	7006      	strb	r6, [r0, #0]
	return filter_add(&wl_filter, addr->type, addr->a.val);
    afd4:	1c69      	adds	r1, r5, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    afd6:	18c0      	adds	r0, r0, r3
    afd8:	f7f6 fea8 	bl	1d2c <memcpy>
    afdc:	e7d5      	b.n	af8a <ll_wl_add+0xe>
    afde:	46c0      	nop			; (mov r8, r8)
    afe0:	20000dd8 	.word	0x20000dd8
    afe4:	20000a64 	.word	0x20000a64

0000afe8 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    afe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    afea:	9001      	str	r0, [sp, #4]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    afec:	f7ff f9d2 	bl	a394 <radio_adv_filter_pol_get>
    aff0:	1e07      	subs	r7, r0, #0
    aff2:	d002      	beq.n	affa <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aff4:	270c      	movs	r7, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    aff6:	0038      	movs	r0, r7
    aff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    affa:	f7ff f9ed 	bl	a3d8 <radio_scan_filter_pol_get>
    affe:	2401      	movs	r4, #1
    b000:	4220      	tst	r0, r4
    b002:	d1f7      	bne.n	aff4 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    b004:	9b01      	ldr	r3, [sp, #4]
    b006:	781b      	ldrb	r3, [r3, #0]
    b008:	9300      	str	r3, [sp, #0]
    b00a:	2bff      	cmp	r3, #255	; 0xff
    b00c:	d102      	bne.n	b014 <ll_wl_remove+0x2c>
		wl_anon = 0;
    b00e:	4b16      	ldr	r3, [pc, #88]	; (b068 <ll_wl_remove+0x80>)
    b010:	701f      	strb	r7, [r3, #0]
		return 0;
    b012:	e7f0      	b.n	aff6 <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
    b014:	4b15      	ldr	r3, [pc, #84]	; (b06c <ll_wl_remove+0x84>)
    b016:	2508      	movs	r5, #8
    b018:	781b      	ldrb	r3, [r3, #0]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d101      	bne.n	b022 <ll_wl_remove+0x3a>
		return BT_HCI_ERR_INVALID_PARAM;
    b01e:	2712      	movs	r7, #18
    b020:	e7e9      	b.n	aff6 <ll_wl_remove+0xe>
	while (index--) {
    b022:	3d01      	subs	r5, #1
    b024:	d3fb      	bcc.n	b01e <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
    b026:	4e11      	ldr	r6, [pc, #68]	; (b06c <ll_wl_remove+0x84>)
    b028:	7833      	ldrb	r3, [r6, #0]
    b02a:	40eb      	lsrs	r3, r5
    b02c:	4223      	tst	r3, r4
    b02e:	d0f8      	beq.n	b022 <ll_wl_remove+0x3a>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    b030:	7873      	ldrb	r3, [r6, #1]
    b032:	9a00      	ldr	r2, [sp, #0]
    b034:	412b      	asrs	r3, r5
    b036:	4053      	eors	r3, r2
		if ((filter->enable_bitmask & BIT(index)) &&
    b038:	4223      	tst	r3, r4
    b03a:	d1f2      	bne.n	b022 <ll_wl_remove+0x3a>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    b03c:	2006      	movs	r0, #6
    b03e:	4368      	muls	r0, r5
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    b040:	9b01      	ldr	r3, [sp, #4]
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    b042:	3002      	adds	r0, #2
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    b044:	1c59      	adds	r1, r3, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    b046:	1830      	adds	r0, r6, r0
    b048:	2206      	movs	r2, #6
    b04a:	f7f6 fe4b 	bl	1ce4 <memcmp>
		     (addr_type & 0x01)) &&
    b04e:	2800      	cmp	r0, #0
    b050:	d1e7      	bne.n	b022 <ll_wl_remove+0x3a>
			filter->enable_bitmask &= ~BIT(index);
    b052:	40ac      	lsls	r4, r5
    b054:	43e4      	mvns	r4, r4
    b056:	7833      	ldrb	r3, [r6, #0]
    b058:	b2e4      	uxtb	r4, r4
    b05a:	4023      	ands	r3, r4
    b05c:	7033      	strb	r3, [r6, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    b05e:	7873      	ldrb	r3, [r6, #1]
    b060:	401c      	ands	r4, r3
    b062:	7074      	strb	r4, [r6, #1]
    b064:	e7c7      	b.n	aff6 <ll_wl_remove+0xe>
    b066:	46c0      	nop			; (mov r8, r8)
    b068:	20000dd8 	.word	0x20000dd8
    b06c:	20000a64 	.word	0x20000a64

0000b070 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    b070:	2300      	movs	r3, #0
    b072:	4a03      	ldr	r2, [pc, #12]	; (b080 <ll_filter_reset+0x10>)
    b074:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    b076:	4a03      	ldr	r2, [pc, #12]	; (b084 <ll_filter_reset+0x14>)
    b078:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    b07a:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    b07c:	4770      	bx	lr
    b07e:	46c0      	nop			; (mov r8, r8)
    b080:	20000dd8 	.word	0x20000dd8
    b084:	20000a64 	.word	0x20000a64

0000b088 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    b088:	22a1      	movs	r2, #161	; 0xa1
    b08a:	2100      	movs	r1, #0
    b08c:	4b05      	ldr	r3, [pc, #20]	; (b0a4 <cntr_init+0x1c>)
    b08e:	00d2      	lsls	r2, r2, #3
    b090:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    b092:	22c0      	movs	r2, #192	; 0xc0
    b094:	21d1      	movs	r1, #209	; 0xd1
    b096:	0292      	lsls	r2, r2, #10
    b098:	0089      	lsls	r1, r1, #2
    b09a:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    b09c:	3940      	subs	r1, #64	; 0x40
    b09e:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif
}
    b0a0:	4770      	bx	lr
    b0a2:	46c0      	nop			; (mov r8, r8)
    b0a4:	4000b000 	.word	0x4000b000

0000b0a8 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    b0a8:	4a05      	ldr	r2, [pc, #20]	; (b0c0 <cntr_start+0x18>)
    b0aa:	2001      	movs	r0, #1
    b0ac:	7813      	ldrb	r3, [r2, #0]
    b0ae:	1c59      	adds	r1, r3, #1
    b0b0:	7011      	strb	r1, [r2, #0]
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d102      	bne.n	b0bc <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    b0b6:	4a03      	ldr	r2, [pc, #12]	; (b0c4 <cntr_start+0x1c>)
    b0b8:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    b0ba:	0018      	movs	r0, r3
}
    b0bc:	4770      	bx	lr
    b0be:	46c0      	nop			; (mov r8, r8)
    b0c0:	20000a96 	.word	0x20000a96
    b0c4:	4000b000 	.word	0x4000b000

0000b0c8 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    b0c8:	4a08      	ldr	r2, [pc, #32]	; (b0ec <cntr_stop+0x24>)
    b0ca:	7813      	ldrb	r3, [r2, #0]
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	d102      	bne.n	b0d6 <cntr_stop+0xe>
    b0d0:	b662      	cpsie	i
    b0d2:	2004      	movs	r0, #4
    b0d4:	df02      	svc	2

	if (--_refcount) {
    b0d6:	3b01      	subs	r3, #1
    b0d8:	b2db      	uxtb	r3, r3
    b0da:	7013      	strb	r3, [r2, #0]
    b0dc:	2001      	movs	r0, #1
    b0de:	2b00      	cmp	r3, #0
    b0e0:	d102      	bne.n	b0e8 <cntr_stop+0x20>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    b0e2:	4a03      	ldr	r2, [pc, #12]	; (b0f0 <cntr_stop+0x28>)
    b0e4:	6050      	str	r0, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    b0e6:	0018      	movs	r0, r3
}
    b0e8:	4770      	bx	lr
    b0ea:	46c0      	nop			; (mov r8, r8)
    b0ec:	20000a96 	.word	0x20000a96
    b0f0:	4000b000 	.word	0x4000b000

0000b0f4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    b0f4:	4b01      	ldr	r3, [pc, #4]	; (b0fc <cntr_cnt_get+0x8>)
    b0f6:	4a02      	ldr	r2, [pc, #8]	; (b100 <cntr_cnt_get+0xc>)
    b0f8:	58d0      	ldr	r0, [r2, r3]
}
    b0fa:	4770      	bx	lr
    b0fc:	00000504 	.word	0x00000504
    b100:	4000b000 	.word	0x4000b000

0000b104 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    b104:	3051      	adds	r0, #81	; 0x51
    b106:	4b02      	ldr	r3, [pc, #8]	; (b110 <cntr_cmp_set+0xc>)
    b108:	30ff      	adds	r0, #255	; 0xff
    b10a:	0080      	lsls	r0, r0, #2
    b10c:	50c1      	str	r1, [r0, r3]
}
    b10e:	4770      	bx	lr
    b110:	4000b000 	.word	0x4000b000

0000b114 <isr>:
{
	return get(rng_isr, octets, rand);
}

static int isr(struct rand *rng, bool store)
{
    b114:	b570      	push	{r4, r5, r6, lr}
	u8_t last;

	if (!rng) {
    b116:	2800      	cmp	r0, #0
    b118:	d01d      	beq.n	b156 <isr+0x42>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    b11a:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    b11c:	7805      	ldrb	r5, [r0, #0]
	last = rng->last + 1;
    b11e:	1c53      	adds	r3, r2, #1
    b120:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    b122:	42ab      	cmp	r3, r5
    b124:	d100      	bne.n	b128 <isr+0x14>
		last = 0;
    b126:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
    b128:	7884      	ldrb	r4, [r0, #2]
    b12a:	42a3      	cmp	r3, r4
    b12c:	d013      	beq.n	b156 <isr+0x42>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    b12e:	2900      	cmp	r1, #0
    b130:	d00e      	beq.n	b150 <isr+0x3c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    b132:	21a1      	movs	r1, #161	; 0xa1
    b134:	4e09      	ldr	r6, [pc, #36]	; (b15c <isr+0x48>)
    b136:	00c9      	lsls	r1, r1, #3
    b138:	5871      	ldr	r1, [r6, r1]
    b13a:	1882      	adds	r2, r0, r2
    b13c:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    b13e:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    b140:	3301      	adds	r3, #1
    b142:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    b144:	429d      	cmp	r5, r3
    b146:	d100      	bne.n	b14a <isr+0x36>
		last = 0;
    b148:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
		return 0;
    b14a:	2000      	movs	r0, #0
	if (last == rng->first) {
    b14c:	42a3      	cmp	r3, r4
    b14e:	d001      	beq.n	b154 <isr+0x40>
	}

	return -EBUSY;
    b150:	2010      	movs	r0, #16
		return -ENOBUFS;
    b152:	4240      	negs	r0, r0
}
    b154:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b156:	2037      	movs	r0, #55	; 0x37
    b158:	e7fb      	b.n	b152 <isr+0x3e>
    b15a:	46c0      	nop			; (mov r8, r8)
    b15c:	4000d000 	.word	0x4000d000

0000b160 <get>:
{
    b160:	b5f0      	push	{r4, r5, r6, r7, lr}
    b162:	b085      	sub	sp, #20
	LL_ASSERT(rng);
    b164:	2800      	cmp	r0, #0
    b166:	d102      	bne.n	b16e <get+0xe>
    b168:	b662      	cpsie	i
    b16a:	2004      	movs	r0, #4
    b16c:	df02      	svc	2
	first = rng->first;
    b16e:	7884      	ldrb	r4, [r0, #2]
	last = rng->last;
    b170:	78c3      	ldrb	r3, [r0, #3]
    b172:	1852      	adds	r2, r2, r1
    b174:	1d25      	adds	r5, r4, #4
    b176:	4694      	mov	ip, r2
		s = &rng->rand[first];
    b178:	1945      	adds	r5, r0, r5
	if (first <= last) {
    b17a:	429c      	cmp	r4, r3
    b17c:	d81d      	bhi.n	b1ba <get+0x5a>
		avail = last - first;
    b17e:	1b1b      	subs	r3, r3, r4
    b180:	b2db      	uxtb	r3, r3
			remaining = 0;
    b182:	2700      	movs	r7, #0
		if (octets < avail) {
    b184:	4299      	cmp	r1, r3
    b186:	d203      	bcs.n	b190 <get+0x30>
			remaining = avail - octets;
    b188:	b2ce      	uxtb	r6, r1
    b18a:	1b9b      	subs	r3, r3, r6
    b18c:	b2df      	uxtb	r7, r3
			avail = octets;
    b18e:	0033      	movs	r3, r6
		first += avail;
    b190:	191c      	adds	r4, r3, r4
		octets -= avail;
    b192:	1ac9      	subs	r1, r1, r3
		first += avail;
    b194:	b2e4      	uxtb	r4, r4
    b196:	18eb      	adds	r3, r5, r3
		while (avail--) {
    b198:	42ab      	cmp	r3, r5
    b19a:	d109      	bne.n	b1b0 <get+0x50>
	if (remaining < rng->threshold) {
    b19c:	7843      	ldrb	r3, [r0, #1]
		rng->first = first;
    b19e:	7084      	strb	r4, [r0, #2]
	if (remaining < rng->threshold) {
    b1a0:	42bb      	cmp	r3, r7
    b1a2:	d902      	bls.n	b1aa <get+0x4a>
		NRF_RNG->TASKS_START = 1;
    b1a4:	2201      	movs	r2, #1
    b1a6:	4b23      	ldr	r3, [pc, #140]	; (b234 <get+0xd4>)
    b1a8:	601a      	str	r2, [r3, #0]
}
    b1aa:	0008      	movs	r0, r1
    b1ac:	b005      	add	sp, #20
    b1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*(--d) = *s++;
    b1b0:	782e      	ldrb	r6, [r5, #0]
    b1b2:	3a01      	subs	r2, #1
    b1b4:	7016      	strb	r6, [r2, #0]
    b1b6:	3501      	adds	r5, #1
    b1b8:	e7ee      	b.n	b198 <get+0x38>
		avail = rng->count - first;
    b1ba:	7802      	ldrb	r2, [r0, #0]
    b1bc:	1b12      	subs	r2, r2, r4
    b1be:	b2d2      	uxtb	r2, r2
		if (octets < avail) {
    b1c0:	4291      	cmp	r1, r2
    b1c2:	d225      	bcs.n	b210 <get+0xb0>
			remaining = avail + last - octets;
    b1c4:	b2ce      	uxtb	r6, r1
    b1c6:	1b9f      	subs	r7, r3, r6
    b1c8:	19d7      	adds	r7, r2, r7
			avail = octets;
    b1ca:	0032      	movs	r2, r6
			first += avail;
    b1cc:	19a4      	adds	r4, r4, r6
			remaining = avail + last - octets;
    b1ce:	b2ff      	uxtb	r7, r7
			first += avail;
    b1d0:	b2e4      	uxtb	r4, r4
    b1d2:	18ae      	adds	r6, r5, r2
    b1d4:	9501      	str	r5, [sp, #4]
		d = &rand[octets];
    b1d6:	4665      	mov	r5, ip
		octets -= avail;
    b1d8:	1a89      	subs	r1, r1, r2
    b1da:	9603      	str	r6, [sp, #12]
		d = &rand[octets];
    b1dc:	9502      	str	r5, [sp, #8]
		while (avail--) {
    b1de:	9e03      	ldr	r6, [sp, #12]
    b1e0:	9d01      	ldr	r5, [sp, #4]
    b1e2:	42b5      	cmp	r5, r6
    b1e4:	d117      	bne.n	b216 <get+0xb6>
    b1e6:	4665      	mov	r5, ip
    b1e8:	1aaa      	subs	r2, r5, r2
		if (octets && last) {
    b1ea:	2900      	cmp	r1, #0
    b1ec:	d0d6      	beq.n	b19c <get+0x3c>
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	d0d4      	beq.n	b19c <get+0x3c>
			s = &rng->rand[0];
    b1f2:	1d05      	adds	r5, r0, #4
			if (octets < last) {
    b1f4:	4299      	cmp	r1, r3
    b1f6:	d219      	bcs.n	b22c <get+0xcc>
				remaining = last - octets;
    b1f8:	b2cc      	uxtb	r4, r1
    b1fa:	1b1b      	subs	r3, r3, r4
    b1fc:	b2df      	uxtb	r7, r3
			octets -= last;
    b1fe:	1b09      	subs	r1, r1, r4
    b200:	192b      	adds	r3, r5, r4
			while (last--) {
    b202:	429d      	cmp	r5, r3
    b204:	d0ca      	beq.n	b19c <get+0x3c>
				*(--d) = *s++;
    b206:	782e      	ldrb	r6, [r5, #0]
    b208:	3a01      	subs	r2, #1
    b20a:	7016      	strb	r6, [r2, #0]
    b20c:	3501      	adds	r5, #1
    b20e:	e7f8      	b.n	b202 <get+0xa2>
    b210:	001f      	movs	r7, r3
			first = 0;
    b212:	2400      	movs	r4, #0
    b214:	e7dd      	b.n	b1d2 <get+0x72>
			*(--d) = *s++;
    b216:	9e02      	ldr	r6, [sp, #8]
    b218:	9d01      	ldr	r5, [sp, #4]
    b21a:	3e01      	subs	r6, #1
    b21c:	9602      	str	r6, [sp, #8]
    b21e:	782e      	ldrb	r6, [r5, #0]
    b220:	9d02      	ldr	r5, [sp, #8]
    b222:	702e      	strb	r6, [r5, #0]
    b224:	9e01      	ldr	r6, [sp, #4]
    b226:	3601      	adds	r6, #1
    b228:	9601      	str	r6, [sp, #4]
    b22a:	e7d8      	b.n	b1de <get+0x7e>
    b22c:	001c      	movs	r4, r3
				remaining = 0;
    b22e:	2700      	movs	r7, #0
    b230:	e7e5      	b.n	b1fe <get+0x9e>
    b232:	46c0      	nop			; (mov r8, r8)
    b234:	4000d000 	.word	0x4000d000

0000b238 <init>:
{
    b238:	b510      	push	{r4, lr}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    b23a:	1d1c      	adds	r4, r3, #4
    b23c:	42a2      	cmp	r2, r4
    b23e:	d802      	bhi.n	b246 <init+0xe>
    b240:	b662      	cpsie	i
    b242:	2004      	movs	r0, #4
    b244:	df02      	svc	2
	*rng = (struct rand *)context;
    b246:	6001      	str	r1, [r0, #0]
	p->threshold = threshold;
    b248:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    b24a:	2300      	movs	r3, #0
	p->count = len - offsetof(struct rand, rand);
    b24c:	3a04      	subs	r2, #4
	p->first = p->last = 0;
    b24e:	70cb      	strb	r3, [r1, #3]
    b250:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    b252:	4b0a      	ldr	r3, [pc, #40]	; (b27c <init+0x44>)
	p->count = len - offsetof(struct rand, rand);
    b254:	700a      	strb	r2, [r1, #0]
	if (!rng_isr || !rng_thr) {
    b256:	681b      	ldr	r3, [r3, #0]
    b258:	2b00      	cmp	r3, #0
    b25a:	d003      	beq.n	b264 <init+0x2c>
    b25c:	4b08      	ldr	r3, [pc, #32]	; (b280 <init+0x48>)
    b25e:	681b      	ldr	r3, [r3, #0]
    b260:	2b00      	cmp	r3, #0
    b262:	d10a      	bne.n	b27a <init+0x42>
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    b264:	2201      	movs	r2, #1
		NRF_RNG->EVENTS_VALRDY = 0;
    b266:	2000      	movs	r0, #0
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    b268:	4b06      	ldr	r3, [pc, #24]	; (b284 <init+0x4c>)
    b26a:	4907      	ldr	r1, [pc, #28]	; (b288 <init+0x50>)
    b26c:	505a      	str	r2, [r3, r1]
		NRF_RNG->EVENTS_VALRDY = 0;
    b26e:	4907      	ldr	r1, [pc, #28]	; (b28c <init+0x54>)
    b270:	6048      	str	r0, [r1, #4]
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    b272:	21c1      	movs	r1, #193	; 0xc1
    b274:	0089      	lsls	r1, r1, #2
    b276:	505a      	str	r2, [r3, r1]
		NRF_RNG->TASKS_START = 1;
    b278:	601a      	str	r2, [r3, #0]
}
    b27a:	bd10      	pop	{r4, pc}
    b27c:	20000a98 	.word	0x20000a98
    b280:	20000a9c 	.word	0x20000a9c
    b284:	4000d000 	.word	0x4000d000
    b288:	00000504 	.word	0x00000504
    b28c:	4000d0fc 	.word	0x4000d0fc

0000b290 <rand_init>:
{
    b290:	b510      	push	{r4, lr}
    b292:	0013      	movs	r3, r2
	init(&rng_thr, context, context_len, threshold);
    b294:	000a      	movs	r2, r1
    b296:	0001      	movs	r1, r0
    b298:	4801      	ldr	r0, [pc, #4]	; (b2a0 <rand_init+0x10>)
    b29a:	f7ff ffcd 	bl	b238 <init>
}
    b29e:	bd10      	pop	{r4, pc}
    b2a0:	20000a9c 	.word	0x20000a9c

0000b2a4 <rand_isr_init>:
{
    b2a4:	b510      	push	{r4, lr}
    b2a6:	0013      	movs	r3, r2
	init(&rng_isr, context, context_len, threshold);
    b2a8:	000a      	movs	r2, r1
    b2aa:	0001      	movs	r1, r0
    b2ac:	4801      	ldr	r0, [pc, #4]	; (b2b4 <rand_isr_init+0x10>)
    b2ae:	f7ff ffc3 	bl	b238 <init>
}
    b2b2:	bd10      	pop	{r4, pc}
    b2b4:	20000a98 	.word	0x20000a98

0000b2b8 <rand_get>:
{
    b2b8:	b510      	push	{r4, lr}
	return get(rng_thr, octets, rand);
    b2ba:	4b03      	ldr	r3, [pc, #12]	; (b2c8 <rand_get+0x10>)
{
    b2bc:	000a      	movs	r2, r1
	return get(rng_thr, octets, rand);
    b2be:	0001      	movs	r1, r0
    b2c0:	6818      	ldr	r0, [r3, #0]
    b2c2:	f7ff ff4d 	bl	b160 <get>
}
    b2c6:	bd10      	pop	{r4, pc}
    b2c8:	20000a9c 	.word	0x20000a9c

0000b2cc <rand_isr_get>:
{
    b2cc:	b510      	push	{r4, lr}
	return get(rng_isr, octets, rand);
    b2ce:	4b03      	ldr	r3, [pc, #12]	; (b2dc <rand_isr_get+0x10>)
{
    b2d0:	000a      	movs	r2, r1
	return get(rng_isr, octets, rand);
    b2d2:	0001      	movs	r1, r0
    b2d4:	6818      	ldr	r0, [r3, #0]
    b2d6:	f7ff ff43 	bl	b160 <get>
}
    b2da:	bd10      	pop	{r4, pc}
    b2dc:	20000a98 	.word	0x20000a98

0000b2e0 <isr_rand>:

void isr_rand(void *param)
{
    b2e0:	b510      	push	{r4, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    b2e2:	4c0e      	ldr	r4, [pc, #56]	; (b31c <isr_rand+0x3c>)
    b2e4:	6863      	ldr	r3, [r4, #4]
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d016      	beq.n	b318 <isr_rand+0x38>
		int ret;

		ret = isr(rng_isr, true);
    b2ea:	4b0d      	ldr	r3, [pc, #52]	; (b320 <isr_rand+0x40>)
    b2ec:	2101      	movs	r1, #1
    b2ee:	6818      	ldr	r0, [r3, #0]
    b2f0:	f7ff ff10 	bl	b114 <isr>
		if (ret != -EBUSY) {
    b2f4:	0003      	movs	r3, r0
    b2f6:	3310      	adds	r3, #16
    b2f8:	d007      	beq.n	b30a <isr_rand+0x2a>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    b2fa:	3037      	adds	r0, #55	; 0x37
    b2fc:	4241      	negs	r1, r0
    b2fe:	4141      	adcs	r1, r0
    b300:	4b08      	ldr	r3, [pc, #32]	; (b324 <isr_rand+0x44>)
    b302:	b2c9      	uxtb	r1, r1
    b304:	6818      	ldr	r0, [r3, #0]
    b306:	f7ff ff05 	bl	b114 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    b30a:	2300      	movs	r3, #0
    b30c:	6063      	str	r3, [r4, #4]

		if (ret != -EBUSY) {
    b30e:	3010      	adds	r0, #16
    b310:	d002      	beq.n	b318 <isr_rand+0x38>
			NRF_RNG->TASKS_STOP = 1;
    b312:	2201      	movs	r2, #1
    b314:	4b04      	ldr	r3, [pc, #16]	; (b328 <isr_rand+0x48>)
    b316:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
			NRF_RNG_regw_sideeffects();
#endif
		}
	}
}
    b318:	bd10      	pop	{r4, pc}
    b31a:	46c0      	nop			; (mov r8, r8)
    b31c:	4000d0fc 	.word	0x4000d0fc
    b320:	20000a98 	.word	0x20000a98
    b324:	20000a9c 	.word	0x20000a9c
    b328:	4000d000 	.word	0x4000d000

0000b32c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    b32c:	b570      	push	{r4, r5, r6, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    b32e:	2401      	movs	r4, #1
    b330:	4b0d      	ldr	r3, [pc, #52]	; (b368 <do_ecb+0x3c>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    b332:	4a0e      	ldr	r2, [pc, #56]	; (b36c <do_ecb+0x40>)
		NRF_ECB->EVENTS_ENDECB = 0;
    b334:	2500      	movs	r5, #0
    b336:	490e      	ldr	r1, [pc, #56]	; (b370 <do_ecb+0x44>)
		NRF_ECB->TASKS_STOPECB = 1;
    b338:	605c      	str	r4, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    b33a:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    b33c:	604d      	str	r5, [r1, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    b33e:	608d      	str	r5, [r1, #8]
    b340:	000d      	movs	r5, r1
		NRF_ECB->TASKS_STARTECB = 1;
    b342:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    b344:	686e      	ldr	r6, [r5, #4]
    b346:	2e00      	cmp	r6, #0
    b348:	d105      	bne.n	b356 <do_ecb+0x2a>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    b34a:	68ae      	ldr	r6, [r5, #8]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    b34c:	2e00      	cmp	r6, #0
    b34e:	d102      	bne.n	b356 <do_ecb+0x2a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    b350:	589e      	ldr	r6, [r3, r2]
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    b352:	2e00      	cmp	r6, #0
    b354:	d1f6      	bne.n	b344 <do_ecb+0x18>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    b356:	605c      	str	r4, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    b358:	6889      	ldr	r1, [r1, #8]
    b35a:	2900      	cmp	r1, #0
    b35c:	d1ea      	bne.n	b334 <do_ecb+0x8>
    b35e:	589d      	ldr	r5, [r3, r2]
    b360:	2d00      	cmp	r5, #0
    b362:	d0e7      	beq.n	b334 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    b364:	5099      	str	r1, [r3, r2]
}
    b366:	bd70      	pop	{r4, r5, r6, pc}
    b368:	4000e000 	.word	0x4000e000
    b36c:	00000504 	.word	0x00000504
    b370:	4000e0fc 	.word	0x4000e0fc

0000b374 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    b374:	b570      	push	{r4, r5, r6, lr}
    b376:	000e      	movs	r6, r1
    b378:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    b37a:	0001      	movs	r1, r0
{
    b37c:	0015      	movs	r5, r2
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    b37e:	4668      	mov	r0, sp
    b380:	2210      	movs	r2, #16
{
    b382:	001c      	movs	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    b384:	f7f9 fe4e 	bl	5024 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    b388:	a804      	add	r0, sp, #16
    b38a:	2210      	movs	r2, #16
    b38c:	0031      	movs	r1, r6
    b38e:	f7f9 fe49 	bl	5024 <mem_rcopy>

	do_ecb(&ecb);
    b392:	4668      	mov	r0, sp
    b394:	f7ff ffca 	bl	b32c <do_ecb>

	if (cipher_text_le) {
    b398:	2d00      	cmp	r5, #0
    b39a:	d004      	beq.n	b3a6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    b39c:	2210      	movs	r2, #16
    b39e:	a908      	add	r1, sp, #32
    b3a0:	0028      	movs	r0, r5
    b3a2:	f7f9 fe3f 	bl	5024 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    b3a6:	2c00      	cmp	r4, #0
    b3a8:	d004      	beq.n	b3b4 <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    b3aa:	2210      	movs	r2, #16
    b3ac:	a908      	add	r1, sp, #32
    b3ae:	0020      	movs	r0, r4
    b3b0:	f7f6 fcbc 	bl	1d2c <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    b3b4:	b00c      	add	sp, #48	; 0x30
    b3b6:	bd70      	pop	{r4, r5, r6, pc}

0000b3b8 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    b3b8:	22a2      	movs	r2, #162	; 0xa2
    b3ba:	4b07      	ldr	r3, [pc, #28]	; (b3d8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    b3bc:	4907      	ldr	r1, [pc, #28]	; (b3dc <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    b3be:	00d2      	lsls	r2, r2, #3
    b3c0:	5099      	str	r1, [r3, r2]
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    b3c2:	2800      	cmp	r0, #0
    b3c4:	d106      	bne.n	b3d4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x1c>
    b3c6:	4a06      	ldr	r2, [pc, #24]	; (b3e0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    b3c8:	4906      	ldr	r1, [pc, #24]	; (b3e4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    b3ca:	505a      	str	r2, [r3, r1]
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    b3cc:	2101      	movs	r1, #1
    b3ce:	4a06      	ldr	r2, [pc, #24]	; (b3e8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x30>)
    b3d0:	5099      	str	r1, [r3, r2]
}
    b3d2:	4770      	bx	lr
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    b3d4:	4a05      	ldr	r2, [pc, #20]	; (b3ec <hal_radio_enable_on_tick_ppi_config_and_enable+0x34>)
    b3d6:	e7f7      	b.n	b3c8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x10>
    b3d8:	4001f000 	.word	0x4001f000
    b3dc:	40008140 	.word	0x40008140
    b3e0:	40001004 	.word	0x40001004
    b3e4:	00000514 	.word	0x00000514
    b3e8:	00000504 	.word	0x00000504
    b3ec:	40001000 	.word	0x40001000

0000b3f0 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    b3f0:	4b03      	ldr	r3, [pc, #12]	; (b400 <isr_radio+0x10>)
{
    b3f2:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    b3f4:	681b      	ldr	r3, [r3, #0]
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d000      	beq.n	b3fc <isr_radio+0xc>
		sfp_radio_isr();
    b3fa:	4798      	blx	r3
	}
}
    b3fc:	bd10      	pop	{r4, pc}
    b3fe:	46c0      	nop			; (mov r8, r8)
    b400:	20000afc 	.word	0x20000afc

0000b404 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    b404:	4b08      	ldr	r3, [pc, #32]	; (b428 <radio_isr_set+0x24>)
{
    b406:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    b408:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    b40a:	23c1      	movs	r3, #193	; 0xc1
    b40c:	2110      	movs	r1, #16
    b40e:	4a07      	ldr	r2, [pc, #28]	; (b42c <radio_isr_set+0x28>)
    b410:	009b      	lsls	r3, r3, #2
    b412:	50d1      	str	r1, [r2, r3]
    b414:	4a06      	ldr	r2, [pc, #24]	; (b430 <radio_isr_set+0x2c>)
    b416:	3b85      	subs	r3, #133	; 0x85
    b418:	390e      	subs	r1, #14
    b41a:	3bff      	subs	r3, #255	; 0xff
    b41c:	50d1      	str	r1, [r2, r3]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_INTENSET();
#endif
	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    b41e:	2001      	movs	r0, #1
    b420:	f7f7 fb00 	bl	2a24 <_arch_irq_enable>
}
    b424:	bd10      	pop	{r4, pc}
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	20000afc 	.word	0x20000afc
    b42c:	40001000 	.word	0x40001000
    b430:	e000e100 	.word	0xe000e100

0000b434 <radio_setup>:

	radio_gpio_lna_off();
#endif /* CONFIG_BT_CTLR_GPIO_LNA_PIN */

	hal_radio_ram_prio_setup();
}
    b434:	4770      	bx	lr
	...

0000b438 <radio_reset>:

void radio_reset(void)
{
    b438:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    b43a:	2001      	movs	r0, #1
    b43c:	f7f7 fafe 	bl	2a3c <_arch_irq_disable>

	NRF_RADIO->POWER =
    b440:	2100      	movs	r1, #0
    b442:	4a03      	ldr	r2, [pc, #12]	; (b450 <radio_reset+0x18>)
    b444:	4b03      	ldr	r3, [pc, #12]	; (b454 <radio_reset+0x1c>)
    b446:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif
	NRF_RADIO->POWER =
    b448:	3101      	adds	r1, #1
    b44a:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif

	hal_radio_reset();
}
    b44c:	bd10      	pop	{r4, pc}
    b44e:	46c0      	nop			; (mov r8, r8)
    b450:	40001000 	.word	0x40001000
    b454:	00000ffc 	.word	0x00000ffc

0000b458 <radio_phy_set>:
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    b458:	2301      	movs	r3, #1
	switch (phy) {
    b45a:	2802      	cmp	r0, #2
    b45c:	d000      	beq.n	b460 <radio_phy_set+0x8>
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    b45e:	3302      	adds	r3, #2
{
	u32_t mode;

	mode = hal_radio_phy_mode_get(phy, flags);

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    b460:	22a2      	movs	r2, #162	; 0xa2
    b462:	4902      	ldr	r1, [pc, #8]	; (b46c <radio_phy_set+0x14>)
    b464:	00d2      	lsls	r2, r2, #3
    b466:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BT_CTLR_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BT_CTLR_RADIO_ENABLE_FAST */
}
    b468:	4770      	bx	lr
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	40001000 	.word	0x40001000

0000b470 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    b470:	4b01      	ldr	r3, [pc, #4]	; (b478 <radio_tx_power_set+0x8>)
    b472:	4a02      	ldr	r2, [pc, #8]	; (b47c <radio_tx_power_set+0xc>)
    b474:	50d0      	str	r0, [r2, r3]
}
    b476:	4770      	bx	lr
    b478:	0000050c 	.word	0x0000050c
    b47c:	40001000 	.word	0x40001000

0000b480 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    b480:	23a1      	movs	r3, #161	; 0xa1
    b482:	4a02      	ldr	r2, [pc, #8]	; (b48c <radio_freq_chan_set+0xc>)
    b484:	00db      	lsls	r3, r3, #3
    b486:	50d0      	str	r0, [r2, r3]
}
    b488:	4770      	bx	lr
    b48a:	46c0      	nop			; (mov r8, r8)
    b48c:	40001000 	.word	0x40001000

0000b490 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    b490:	4b06      	ldr	r3, [pc, #24]	; (b4ac <radio_whiten_iv_set+0x1c>)
    b492:	4a07      	ldr	r2, [pc, #28]	; (b4b0 <radio_whiten_iv_set+0x20>)
    b494:	5098      	str	r0, [r3, r2]

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    b496:	3a3c      	subs	r2, #60	; 0x3c
    b498:	5899      	ldr	r1, [r3, r2]
    b49a:	4806      	ldr	r0, [pc, #24]	; (b4b4 <radio_whiten_iv_set+0x24>)
    b49c:	4001      	ands	r1, r0
    b49e:	5099      	str	r1, [r3, r2]
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    b4a0:	2180      	movs	r1, #128	; 0x80
    b4a2:	5898      	ldr	r0, [r3, r2]
    b4a4:	0489      	lsls	r1, r1, #18
    b4a6:	4301      	orrs	r1, r0
    b4a8:	5099      	str	r1, [r3, r2]
			    RADIO_PCNF1_WHITEEN_Msk;
}
    b4aa:	4770      	bx	lr
    b4ac:	40001000 	.word	0x40001000
    b4b0:	00000554 	.word	0x00000554
    b4b4:	fdffffff 	.word	0xfdffffff

0000b4b8 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    b4b8:	2100      	movs	r1, #0
    b4ba:	4a0a      	ldr	r2, [pc, #40]	; (b4e4 <radio_aa_set+0x2c>)
    b4bc:	4b0a      	ldr	r3, [pc, #40]	; (b4e8 <radio_aa_set+0x30>)
    b4be:	50d1      	str	r1, [r2, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    b4c0:	3101      	adds	r1, #1
    b4c2:	3304      	adds	r3, #4
    b4c4:	50d1      	str	r1, [r2, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    b4c6:	78c1      	ldrb	r1, [r0, #3]
    b4c8:	4b08      	ldr	r3, [pc, #32]	; (b4ec <radio_aa_set+0x34>)
    b4ca:	50d1      	str	r1, [r2, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    b4cc:	7883      	ldrb	r3, [r0, #2]
    b4ce:	7841      	ldrb	r1, [r0, #1]
    b4d0:	061b      	lsls	r3, r3, #24
    b4d2:	0409      	lsls	r1, r1, #16
    b4d4:	430b      	orrs	r3, r1
    b4d6:	7801      	ldrb	r1, [r0, #0]
    b4d8:	0209      	lsls	r1, r1, #8
    b4da:	430b      	orrs	r3, r1
    b4dc:	4904      	ldr	r1, [pc, #16]	; (b4f0 <radio_aa_set+0x38>)
    b4de:	5053      	str	r3, [r2, r1]
}
    b4e0:	4770      	bx	lr
    b4e2:	46c0      	nop			; (mov r8, r8)
    b4e4:	40001000 	.word	0x40001000
    b4e8:	0000052c 	.word	0x0000052c
    b4ec:	00000524 	.word	0x00000524
    b4f0:	0000051c 	.word	0x0000051c

0000b4f4 <radio_pkt_configure>:

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    b4f4:	b510      	push	{r4, lr}
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DATA_LENGTH_CLEAR) && dc) {
    b4f6:	07d3      	lsls	r3, r2, #31
    b4f8:	d500      	bpl.n	b4fc <radio_pkt_configure+0x8>
		bits_len = 5;
    b4fa:	2005      	movs	r0, #5

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    b4fc:	2308      	movs	r3, #8
    b4fe:	22f0      	movs	r2, #240	; 0xf0
    b500:	1a1b      	subs	r3, r3, r0
    b502:	0312      	lsls	r2, r2, #12
    b504:	041b      	lsls	r3, r3, #16
    b506:	4013      	ands	r3, r2
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    b508:	220f      	movs	r2, #15
    b50a:	4010      	ands	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    b50c:	32f1      	adds	r2, #241	; 0xf1
    b50e:	4310      	orrs	r0, r2
    b510:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    b512:	4a08      	ldr	r2, [pc, #32]	; (b534 <radio_pkt_configure+0x40>)
    b514:	4b08      	ldr	r3, [pc, #32]	; (b538 <radio_pkt_configure+0x44>)
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    b516:	4c09      	ldr	r4, [pc, #36]	; (b53c <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    b518:	5098      	str	r0, [r3, r2]
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    b51a:	20a3      	movs	r0, #163	; 0xa3
    b51c:	00c0      	lsls	r0, r0, #3
    b51e:	581a      	ldr	r2, [r3, r0]
    b520:	4022      	ands	r2, r4
    b522:	501a      	str	r2, [r3, r0]
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    b524:	22c0      	movs	r2, #192	; 0xc0
    b526:	581c      	ldr	r4, [r3, r0]
    b528:	0292      	lsls	r2, r2, #10
    b52a:	4322      	orrs	r2, r4
    b52c:	4311      	orrs	r1, r2
    b52e:	5019      	str	r1, [r3, r0]
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    b530:	bd10      	pop	{r4, pc}
    b532:	46c0      	nop			; (mov r8, r8)
    b534:	00000514 	.word	0x00000514
    b538:	40001000 	.word	0x40001000
    b53c:	fef80000 	.word	0xfef80000

0000b540 <radio_pkt_rx_set>:
    b540:	4b01      	ldr	r3, [pc, #4]	; (b548 <radio_pkt_rx_set+0x8>)
    b542:	4a02      	ldr	r2, [pc, #8]	; (b54c <radio_pkt_rx_set+0xc>)
    b544:	50d0      	str	r0, [r2, r3]
    b546:	4770      	bx	lr
    b548:	00000504 	.word	0x00000504
    b54c:	40001000 	.word	0x40001000

0000b550 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    b550:	4b01      	ldr	r3, [pc, #4]	; (b558 <radio_pkt_tx_set+0x8>)
    b552:	4a02      	ldr	r2, [pc, #8]	; (b55c <radio_pkt_tx_set+0xc>)
    b554:	50d0      	str	r0, [r2, r3]
}
    b556:	4770      	bx	lr
    b558:	00000504 	.word	0x00000504
    b55c:	40001000 	.word	0x40001000

0000b560 <radio_tx_ready_delay_get>:

u32_t radio_tx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_ready_delay_us_get(phy, flags);
}
    b560:	208c      	movs	r0, #140	; 0x8c
    b562:	4770      	bx	lr

0000b564 <radio_tx_chain_delay_get>:

u32_t radio_tx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_chain_delay_us_get(phy, flags);
}
    b564:	2001      	movs	r0, #1
    b566:	4770      	bx	lr

0000b568 <radio_rx_ready_delay_get>:

u32_t radio_rx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_ready_delay_us_get(phy, flags);
}
    b568:	208a      	movs	r0, #138	; 0x8a
    b56a:	4770      	bx	lr

0000b56c <radio_rx_chain_delay_get>:

u32_t radio_rx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_chain_delay_us_get(phy, flags);
}
    b56c:	2003      	movs	r0, #3
    b56e:	4770      	bx	lr

0000b570 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    b570:	2201      	movs	r2, #1
    b572:	4b01      	ldr	r3, [pc, #4]	; (b578 <radio_rx_enable+0x8>)
    b574:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_RXEN();
#endif
}
    b576:	4770      	bx	lr
    b578:	40001000 	.word	0x40001000

0000b57c <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    b57c:	2201      	movs	r2, #1
    b57e:	4b01      	ldr	r3, [pc, #4]	; (b584 <radio_tx_enable+0x8>)
    b580:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_TXEN();
#endif
}
    b582:	4770      	bx	lr
    b584:	40001000 	.word	0x40001000

0000b588 <radio_disable>:
	NRF_PPI_regw_sideeffects_CHEN();
	NRF_PPI_tasw_sideeffects();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    b588:	2280      	movs	r2, #128	; 0x80
    b58a:	2100      	movs	r1, #0
    b58c:	4b02      	ldr	r3, [pc, #8]	; (b598 <radio_disable+0x10>)
    b58e:	0092      	lsls	r2, r2, #2
    b590:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    b592:	2201      	movs	r2, #1
    b594:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_DISABLE();
#endif
}
    b596:	4770      	bx	lr
    b598:	40001000 	.word	0x40001000

0000b59c <radio_status_reset>:
	/* NOTE: Only EVENTS_* registers read (checked) by software needs reset
	 *       between Radio IRQs. In PPI use, irrespective of stored EVENT_*
	 *       register value, PPI task will be triggered. Hence, other
	 *       EVENT_* registers are not reset to save code and CPU time.
	 */
	NRF_RADIO->EVENTS_READY = 0;
    b59c:	2200      	movs	r2, #0
    b59e:	4b02      	ldr	r3, [pc, #8]	; (b5a8 <radio_status_reset+0xc>)
    b5a0:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_END = 0;
    b5a2:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    b5a4:	615a      	str	r2, [r3, #20]
}
    b5a6:	4770      	bx	lr
    b5a8:	400010fc 	.word	0x400010fc

0000b5ac <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    b5ac:	4b02      	ldr	r3, [pc, #8]	; (b5b8 <radio_is_ready+0xc>)
    b5ae:	6858      	ldr	r0, [r3, #4]
    b5b0:	1e43      	subs	r3, r0, #1
    b5b2:	4198      	sbcs	r0, r3
}
    b5b4:	4770      	bx	lr
    b5b6:	46c0      	nop			; (mov r8, r8)
    b5b8:	400010fc 	.word	0x400010fc

0000b5bc <radio_is_done>:
}

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    b5bc:	4b02      	ldr	r3, [pc, #8]	; (b5c8 <radio_is_done+0xc>)
    b5be:	6918      	ldr	r0, [r3, #16]
    b5c0:	1e43      	subs	r3, r0, #1
    b5c2:	4198      	sbcs	r0, r3
}
    b5c4:	4770      	bx	lr
    b5c6:	46c0      	nop			; (mov r8, r8)
    b5c8:	400010fc 	.word	0x400010fc

0000b5cc <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    b5cc:	23aa      	movs	r3, #170	; 0xaa
    b5ce:	4a03      	ldr	r2, [pc, #12]	; (b5dc <radio_is_idle+0x10>)
    b5d0:	00db      	lsls	r3, r3, #3
    b5d2:	58d0      	ldr	r0, [r2, r3]
    b5d4:	4243      	negs	r3, r0
    b5d6:	4158      	adcs	r0, r3
}
    b5d8:	4770      	bx	lr
    b5da:	46c0      	nop			; (mov r8, r8)
    b5dc:	40001000 	.word	0x40001000

0000b5e0 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    b5e0:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    b5e2:	2404      	movs	r4, #4
    b5e4:	4b04      	ldr	r3, [pc, #16]	; (b5f8 <radio_crc_configure+0x18>)
    b5e6:	4a05      	ldr	r2, [pc, #20]	; (b5fc <radio_crc_configure+0x1c>)
    b5e8:	34ff      	adds	r4, #255	; 0xff
    b5ea:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    b5ec:	3204      	adds	r2, #4
    b5ee:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    b5f0:	4a03      	ldr	r2, [pc, #12]	; (b600 <radio_crc_configure+0x20>)
    b5f2:	5099      	str	r1, [r3, r2]
}
    b5f4:	bd10      	pop	{r4, pc}
    b5f6:	46c0      	nop			; (mov r8, r8)
    b5f8:	40001000 	.word	0x40001000
    b5fc:	00000534 	.word	0x00000534
    b600:	0000053c 	.word	0x0000053c

0000b604 <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    b604:	2380      	movs	r3, #128	; 0x80
    b606:	4a03      	ldr	r2, [pc, #12]	; (b614 <radio_crc_is_valid+0x10>)
    b608:	00db      	lsls	r3, r3, #3
    b60a:	58d0      	ldr	r0, [r2, r3]
    b60c:	1e43      	subs	r3, r0, #1
    b60e:	4198      	sbcs	r0, r3
}
    b610:	4770      	bx	lr
    b612:	46c0      	nop			; (mov r8, r8)
    b614:	40001000 	.word	0x40001000

0000b618 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    b618:	4800      	ldr	r0, [pc, #0]	; (b61c <radio_pkt_empty_get+0x4>)
    b61a:	4770      	bx	lr
    b61c:	20000acc 	.word	0x20000acc

0000b620 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    b620:	4800      	ldr	r0, [pc, #0]	; (b624 <radio_pkt_scratch_get+0x4>)
    b622:	4770      	bx	lr
    b624:	20000ad0 	.word	0x20000ad0

0000b628 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b628:	2380      	movs	r3, #128	; 0x80
    b62a:	210b      	movs	r1, #11
    b62c:	4a01      	ldr	r2, [pc, #4]	; (b634 <radio_switch_complete_and_rx+0xc>)
    b62e:	009b      	lsls	r3, r3, #2
    b630:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    b632:	4770      	bx	lr
    b634:	40001000 	.word	0x40001000

0000b638 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b638:	2380      	movs	r3, #128	; 0x80
    b63a:	2107      	movs	r1, #7
    b63c:	4a01      	ldr	r2, [pc, #4]	; (b644 <radio_switch_complete_and_tx+0xc>)
    b63e:	009b      	lsls	r3, r3, #2
    b640:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    b642:	4770      	bx	lr
    b644:	40001000 	.word	0x40001000

0000b648 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    b648:	2380      	movs	r3, #128	; 0x80
    b64a:	2103      	movs	r1, #3
    b64c:	4a01      	ldr	r2, [pc, #4]	; (b654 <radio_switch_complete_and_disable+0xc>)
    b64e:	009b      	lsls	r3, r3, #2
    b650:	50d1      	str	r1, [r2, r3]
			   HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    b652:	4770      	bx	lr
    b654:	40001000 	.word	0x40001000

0000b658 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    b658:	2280      	movs	r2, #128	; 0x80
    b65a:	2388      	movs	r3, #136	; 0x88
    b65c:	4903      	ldr	r1, [pc, #12]	; (b66c <radio_rssi_measure+0x14>)
    b65e:	0092      	lsls	r2, r2, #2
    b660:	5888      	ldr	r0, [r1, r2]
    b662:	005b      	lsls	r3, r3, #1
    b664:	4303      	orrs	r3, r0
    b666:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    b668:	4770      	bx	lr
    b66a:	46c0      	nop			; (mov r8, r8)
    b66c:	40001000 	.word	0x40001000

0000b670 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    b670:	23a9      	movs	r3, #169	; 0xa9
    b672:	4a02      	ldr	r2, [pc, #8]	; (b67c <radio_rssi_get+0xc>)
    b674:	00db      	lsls	r3, r3, #3
    b676:	58d0      	ldr	r0, [r2, r3]
}
    b678:	4770      	bx	lr
    b67a:	46c0      	nop			; (mov r8, r8)
    b67c:	40001000 	.word	0x40001000

0000b680 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    b680:	2200      	movs	r2, #0
    b682:	4b01      	ldr	r3, [pc, #4]	; (b688 <radio_rssi_status_reset+0x8>)
    b684:	621a      	str	r2, [r3, #32]
}
    b686:	4770      	bx	lr
    b688:	400010fc 	.word	0x400010fc

0000b68c <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    b68c:	4b02      	ldr	r3, [pc, #8]	; (b698 <radio_rssi_is_ready+0xc>)
    b68e:	6a18      	ldr	r0, [r3, #32]
    b690:	1e43      	subs	r3, r0, #1
    b692:	4198      	sbcs	r0, r3
}
    b694:	4770      	bx	lr
    b696:	46c0      	nop			; (mov r8, r8)
    b698:	400010fc 	.word	0x400010fc

0000b69c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    b69c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b69e:	27c0      	movs	r7, #192	; 0xc0
{
    b6a0:	2400      	movs	r4, #0
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b6a2:	00ff      	lsls	r7, r7, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    b6a4:	7855      	ldrb	r5, [r2, #1]
    b6a6:	7813      	ldrb	r3, [r2, #0]
    b6a8:	022d      	lsls	r5, r5, #8
    b6aa:	431d      	orrs	r5, r3
    b6ac:	7893      	ldrb	r3, [r2, #2]
    b6ae:	4e0e      	ldr	r6, [pc, #56]	; (b6e8 <radio_filter_configure+0x4c>)
    b6b0:	041b      	lsls	r3, r3, #16
    b6b2:	431d      	orrs	r5, r3
    b6b4:	78d3      	ldrb	r3, [r2, #3]
    b6b6:	061b      	lsls	r3, r3, #24
    b6b8:	432b      	orrs	r3, r5
    b6ba:	00a5      	lsls	r5, r4, #2
    b6bc:	19ad      	adds	r5, r5, r6
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b6be:	51eb      	str	r3, [r5, r7]
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    b6c0:	7913      	ldrb	r3, [r2, #4]
    b6c2:	3401      	adds	r4, #1
    b6c4:	469c      	mov	ip, r3
    b6c6:	4666      	mov	r6, ip
    b6c8:	7953      	ldrb	r3, [r2, #5]
		bdaddr += 6;
    b6ca:	3206      	adds	r2, #6
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    b6cc:	021b      	lsls	r3, r3, #8
    b6ce:	4333      	orrs	r3, r6
    b6d0:	26c4      	movs	r6, #196	; 0xc4
    b6d2:	00f6      	lsls	r6, r6, #3
    b6d4:	51ab      	str	r3, [r5, r6]
	for (index = 0; index < 8; index++) {
    b6d6:	2c08      	cmp	r4, #8
    b6d8:	d1e4      	bne.n	b6a4 <radio_filter_configure+0x8>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    b6da:	23c8      	movs	r3, #200	; 0xc8
    b6dc:	0209      	lsls	r1, r1, #8
    b6de:	4a02      	ldr	r2, [pc, #8]	; (b6e8 <radio_filter_configure+0x4c>)
    b6e0:	4308      	orrs	r0, r1
    b6e2:	00db      	lsls	r3, r3, #3
    b6e4:	50d0      	str	r0, [r2, r3]
}
    b6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6e8:	40001000 	.word	0x40001000

0000b6ec <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    b6ec:	22c8      	movs	r2, #200	; 0xc8
    b6ee:	20ff      	movs	r0, #255	; 0xff
    b6f0:	4902      	ldr	r1, [pc, #8]	; (b6fc <radio_filter_disable+0x10>)
    b6f2:	00d2      	lsls	r2, r2, #3
    b6f4:	588b      	ldr	r3, [r1, r2]
    b6f6:	4383      	bics	r3, r0
    b6f8:	508b      	str	r3, [r1, r2]
}
    b6fa:	4770      	bx	lr
    b6fc:	40001000 	.word	0x40001000

0000b700 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    b700:	2200      	movs	r2, #0
    b702:	4b01      	ldr	r3, [pc, #4]	; (b708 <radio_filter_status_reset+0x8>)
    b704:	619a      	str	r2, [r3, #24]
}
    b706:	4770      	bx	lr
    b708:	400010fc 	.word	0x400010fc

0000b70c <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    b70c:	4b02      	ldr	r3, [pc, #8]	; (b718 <radio_filter_has_match+0xc>)
    b70e:	6998      	ldr	r0, [r3, #24]
    b710:	1e43      	subs	r3, r0, #1
    b712:	4198      	sbcs	r0, r3
}
    b714:	4770      	bx	lr
    b716:	46c0      	nop			; (mov r8, r8)
    b718:	400010fc 	.word	0x400010fc

0000b71c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    b71c:	2382      	movs	r3, #130	; 0x82
    b71e:	4a02      	ldr	r2, [pc, #8]	; (b728 <radio_filter_match_get+0xc>)
    b720:	00db      	lsls	r3, r3, #3
    b722:	58d0      	ldr	r0, [r2, r3]
}
    b724:	4770      	bx	lr
    b726:	46c0      	nop			; (mov r8, r8)
    b728:	40001000 	.word	0x40001000

0000b72c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    b72c:	2180      	movs	r1, #128	; 0x80
    b72e:	23d2      	movs	r3, #210	; 0xd2
    b730:	4a04      	ldr	r2, [pc, #16]	; (b744 <radio_tmr_status_reset+0x18>)
    b732:	02c9      	lsls	r1, r1, #11
    b734:	009b      	lsls	r3, r3, #2
    b736:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    b738:	217f      	movs	r1, #127	; 0x7f
    b73a:	4a03      	ldr	r2, [pc, #12]	; (b748 <radio_tmr_status_reset+0x1c>)
    b73c:	33c1      	adds	r3, #193	; 0xc1
    b73e:	33ff      	adds	r3, #255	; 0xff
    b740:	50d1      	str	r1, [r2, r3]
			HAL_TRIGGER_CRYPT_PPI_DISABLE;

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
}
    b742:	4770      	bx	lr
    b744:	4000b000 	.word	0x4000b000
    b748:	4001f000 	.word	0x4001f000

0000b74c <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    b74c:	4b01      	ldr	r3, [pc, #4]	; (b754 <radio_tmr_tifs_set+0x8>)
    b74e:	4a02      	ldr	r2, [pc, #8]	; (b758 <radio_tmr_tifs_set+0xc>)
    b750:	50d0      	str	r0, [r2, r3]
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    b752:	4770      	bx	lr
    b754:	00000544 	.word	0x00000544
    b758:	40001000 	.word	0x40001000

0000b75c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b75e:	4b1a      	ldr	r3, [pc, #104]	; (b7c8 <radio_tmr_start+0x6c>)
{
    b760:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b762:	18d1      	adds	r1, r2, r3
    b764:	4b19      	ldr	r3, [pc, #100]	; (b7cc <radio_tmr_start+0x70>)
{
    b766:	0005      	movs	r5, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b768:	4299      	cmp	r1, r3
    b76a:	d902      	bls.n	b772 <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    b76c:	4b18      	ldr	r3, [pc, #96]	; (b7d0 <radio_tmr_start+0x74>)
		ticks_start--;
    b76e:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    b770:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    b772:	4918      	ldr	r1, [pc, #96]	; (b7d4 <radio_tmr_start+0x78>)
    b774:	0010      	movs	r0, r2
    b776:	f7f4 fd27 	bl	1c8 <__aeabi_uidiv>

	EVENT_TIMER->TASKS_CLEAR = 1;
    b77a:	2201      	movs	r2, #1
    b77c:	4b16      	ldr	r3, [pc, #88]	; (b7d8 <radio_tmr_start+0x7c>)
	EVENT_TIMER->MODE = 0;
    b77e:	4917      	ldr	r1, [pc, #92]	; (b7dc <radio_tmr_start+0x80>)
	EVENT_TIMER->TASKS_CLEAR = 1;
    b780:	60da      	str	r2, [r3, #12]
	EVENT_TIMER->MODE = 0;
    b782:	2200      	movs	r2, #0
    b784:	505a      	str	r2, [r3, r1]
	EVENT_TIMER->PRESCALER = 4;
    b786:	22a2      	movs	r2, #162	; 0xa2
	remainder /= 1000000UL;
    b788:	0006      	movs	r6, r0
	EVENT_TIMER->PRESCALER = 4;
    b78a:	2004      	movs	r0, #4

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    b78c:	27a9      	movs	r7, #169	; 0xa9
	EVENT_TIMER->PRESCALER = 4;
    b78e:	00d2      	lsls	r2, r2, #3
    b790:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b792:	3802      	subs	r0, #2
    b794:	3a08      	subs	r2, #8
    b796:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->CC[0] = remainder;
    b798:	3238      	adds	r2, #56	; 0x38
    b79a:	509e      	str	r6, [r3, r2]
	NRF_RTC0->CC[2] = ticks_start;
    b79c:	4a10      	ldr	r2, [pc, #64]	; (b7e0 <radio_tmr_start+0x84>)
    b79e:	00ff      	lsls	r7, r7, #3
    b7a0:	51d4      	str	r4, [r2, r7]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    b7a2:	2780      	movs	r7, #128	; 0x80
    b7a4:	24d1      	movs	r4, #209	; 0xd1
    b7a6:	02ff      	lsls	r7, r7, #11
    b7a8:	00a4      	lsls	r4, r4, #2
    b7aa:	5117      	str	r7, [r2, r4]

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    b7ac:	4a0d      	ldr	r2, [pc, #52]	; (b7e4 <radio_tmr_start+0x88>)
    b7ae:	4f0e      	ldr	r7, [pc, #56]	; (b7e8 <radio_tmr_start+0x8c>)
    b7b0:	34d5      	adds	r4, #213	; 0xd5
    b7b2:	34ff      	adds	r4, #255	; 0xff
    b7b4:	5117      	str	r7, [r2, r4]
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    b7b6:	4c0d      	ldr	r4, [pc, #52]	; (b7ec <radio_tmr_start+0x90>)
    b7b8:	5113      	str	r3, [r2, r4]
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    b7ba:	5050      	str	r0, [r2, r1]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    b7bc:	0028      	movs	r0, r5
    b7be:	f7ff fdfb 	bl	b3b8 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    b7c2:	0030      	movs	r0, r6
    b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7c6:	46c0      	nop			; (mov r8, r8)
    b7c8:	fff0bdc0 	.word	0xfff0bdc0
    b7cc:	7ff0bdbf 	.word	0x7ff0bdbf
    b7d0:	01d1a94a 	.word	0x01d1a94a
    b7d4:	000f4240 	.word	0x000f4240
    b7d8:	40008000 	.word	0x40008000
    b7dc:	00000504 	.word	0x00000504
    b7e0:	4000b000 	.word	0x4000b000
    b7e4:	4001f000 	.word	0x4001f000
    b7e8:	4000b148 	.word	0x4000b148
    b7ec:	0000051c 	.word	0x0000051c

0000b7f0 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    b7f0:	2201      	movs	r2, #1
    b7f2:	4b02      	ldr	r3, [pc, #8]	; (b7fc <radio_tmr_stop+0xc>)
    b7f4:	605a      	str	r2, [r3, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    b7f6:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_STOP(SW_SWITCH_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    b7f8:	4770      	bx	lr
    b7fa:	46c0      	nop			; (mov r8, r8)
    b7fc:	40008000 	.word	0x40008000

0000b800 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    b800:	4b0a      	ldr	r3, [pc, #40]	; (b82c <radio_tmr_hcto_configure+0x2c>)
    b802:	4a0b      	ldr	r2, [pc, #44]	; (b830 <radio_tmr_hcto_configure+0x30>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b804:	490b      	ldr	r1, [pc, #44]	; (b834 <radio_tmr_hcto_configure+0x34>)
	EVENT_TIMER->CC[1] = hcto;
    b806:	50d0      	str	r0, [r2, r3]
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b808:	22a5      	movs	r2, #165	; 0xa5
    b80a:	4b0b      	ldr	r3, [pc, #44]	; (b838 <radio_tmr_hcto_configure+0x38>)
    b80c:	00d2      	lsls	r2, r2, #3
    b80e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b810:	490a      	ldr	r1, [pc, #40]	; (b83c <radio_tmr_hcto_configure+0x3c>)
    b812:	4a0b      	ldr	r2, [pc, #44]	; (b840 <radio_tmr_hcto_configure+0x40>)
    b814:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    b816:	490b      	ldr	r1, [pc, #44]	; (b844 <radio_tmr_hcto_configure+0x44>)
    b818:	3204      	adds	r2, #4
    b81a:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    b81c:	490a      	ldr	r1, [pc, #40]	; (b848 <radio_tmr_hcto_configure+0x48>)
    b81e:	4a0b      	ldr	r2, [pc, #44]	; (b84c <radio_tmr_hcto_configure+0x4c>)
    b820:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    b822:	2118      	movs	r1, #24
    b824:	4a0a      	ldr	r2, [pc, #40]	; (b850 <radio_tmr_hcto_configure+0x50>)
    b826:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
		HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    b828:	4770      	bx	lr
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	00000544 	.word	0x00000544
    b830:	40008000 	.word	0x40008000
    b834:	40001104 	.word	0x40001104
    b838:	4001f000 	.word	0x4001f000
    b83c:	40008044 	.word	0x40008044
    b840:	0000052c 	.word	0x0000052c
    b844:	40008144 	.word	0x40008144
    b848:	40001010 	.word	0x40001010
    b84c:	00000534 	.word	0x00000534
    b850:	00000504 	.word	0x00000504

0000b854 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    b854:	22a4      	movs	r2, #164	; 0xa4
    b856:	4b08      	ldr	r3, [pc, #32]	; (b878 <radio_tmr_aa_capture+0x24>)
    b858:	4908      	ldr	r1, [pc, #32]	; (b87c <radio_tmr_aa_capture+0x28>)
    b85a:	00d2      	lsls	r2, r2, #3
    b85c:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    b85e:	4908      	ldr	r1, [pc, #32]	; (b880 <radio_tmr_aa_capture+0x2c>)
    b860:	4a08      	ldr	r2, [pc, #32]	; (b884 <radio_tmr_aa_capture+0x30>)
    b862:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b864:	4908      	ldr	r1, [pc, #32]	; (b888 <radio_tmr_aa_capture+0x34>)
    b866:	3204      	adds	r2, #4
    b868:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b86a:	4908      	ldr	r1, [pc, #32]	; (b88c <radio_tmr_aa_capture+0x38>)
    b86c:	4a08      	ldr	r2, [pc, #32]	; (b890 <radio_tmr_aa_capture+0x3c>)
    b86e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    b870:	210c      	movs	r1, #12
    b872:	4a08      	ldr	r2, [pc, #32]	; (b894 <radio_tmr_aa_capture+0x40>)
    b874:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    b876:	4770      	bx	lr
    b878:	4001f000 	.word	0x4001f000
    b87c:	40001100 	.word	0x40001100
    b880:	40008040 	.word	0x40008040
    b884:	00000524 	.word	0x00000524
    b888:	40001104 	.word	0x40001104
    b88c:	40008044 	.word	0x40008044
    b890:	0000052c 	.word	0x0000052c
    b894:	00000504 	.word	0x00000504

0000b898 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    b898:	4b01      	ldr	r3, [pc, #4]	; (b8a0 <radio_tmr_aa_get+0x8>)
    b89a:	4a02      	ldr	r2, [pc, #8]	; (b8a4 <radio_tmr_aa_get+0xc>)
    b89c:	58d0      	ldr	r0, [r2, r3]
}
    b89e:	4770      	bx	lr
    b8a0:	00000544 	.word	0x00000544
    b8a4:	40008000 	.word	0x40008000

0000b8a8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    b8a8:	4b01      	ldr	r3, [pc, #4]	; (b8b0 <radio_tmr_aa_save+0x8>)
    b8aa:	6018      	str	r0, [r3, #0]
}
    b8ac:	4770      	bx	lr
    b8ae:	46c0      	nop			; (mov r8, r8)
    b8b0:	20000af8 	.word	0x20000af8

0000b8b4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
    b8b4:	4b01      	ldr	r3, [pc, #4]	; (b8bc <radio_tmr_aa_restore+0x8>)
    b8b6:	6818      	ldr	r0, [r3, #0]
}
    b8b8:	4770      	bx	lr
    b8ba:	46c0      	nop			; (mov r8, r8)
    b8bc:	20000af8 	.word	0x20000af8

0000b8c0 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    b8c0:	23a8      	movs	r3, #168	; 0xa8
    b8c2:	4a02      	ldr	r2, [pc, #8]	; (b8cc <radio_tmr_ready_get+0xc>)
    b8c4:	00db      	lsls	r3, r3, #3
    b8c6:	58d0      	ldr	r0, [r2, r3]
}
    b8c8:	4770      	bx	lr
    b8ca:	46c0      	nop			; (mov r8, r8)
    b8cc:	40008000 	.word	0x40008000

0000b8d0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    b8d0:	22a7      	movs	r2, #167	; 0xa7
    b8d2:	4b05      	ldr	r3, [pc, #20]	; (b8e8 <radio_tmr_end_capture+0x18>)
    b8d4:	4905      	ldr	r1, [pc, #20]	; (b8ec <radio_tmr_end_capture+0x1c>)
    b8d6:	00d2      	lsls	r2, r2, #3
    b8d8:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    b8da:	4905      	ldr	r1, [pc, #20]	; (b8f0 <radio_tmr_end_capture+0x20>)
    b8dc:	4a05      	ldr	r2, [pc, #20]	; (b8f4 <radio_tmr_end_capture+0x24>)
    b8de:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    b8e0:	2120      	movs	r1, #32
    b8e2:	4a05      	ldr	r2, [pc, #20]	; (b8f8 <radio_tmr_end_capture+0x28>)
    b8e4:	5099      	str	r1, [r3, r2]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    b8e6:	4770      	bx	lr
    b8e8:	4001f000 	.word	0x4001f000
    b8ec:	4000110c 	.word	0x4000110c
    b8f0:	40008048 	.word	0x40008048
    b8f4:	0000053c 	.word	0x0000053c
    b8f8:	00000504 	.word	0x00000504

0000b8fc <radio_tmr_end_get>:
    b8fc:	23a9      	movs	r3, #169	; 0xa9
    b8fe:	4a02      	ldr	r2, [pc, #8]	; (b908 <radio_tmr_end_get+0xc>)
    b900:	00db      	lsls	r3, r3, #3
    b902:	58d0      	ldr	r0, [r2, r3]
    b904:	4770      	bx	lr
    b906:	46c0      	nop			; (mov r8, r8)
    b908:	40008000 	.word	0x40008000

0000b90c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    b90c:	23a9      	movs	r3, #169	; 0xa9
    b90e:	4a02      	ldr	r2, [pc, #8]	; (b918 <radio_tmr_tifs_base_get+0xc>)
    b910:	00db      	lsls	r3, r3, #3
    b912:	58d0      	ldr	r0, [r2, r3]
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    b914:	4770      	bx	lr
    b916:	46c0      	nop			; (mov r8, r8)
    b918:	40008000 	.word	0x40008000

0000b91c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    b91c:	b570      	push	{r4, r5, r6, lr}

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b91e:	24a0      	movs	r4, #160	; 0xa0
    b920:	2100      	movs	r1, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b922:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b924:	4b12      	ldr	r3, [pc, #72]	; (b970 <radio_ccm_rx_pkt_set+0x54>)
    b926:	00e4      	lsls	r4, r4, #3
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b928:	26a1      	movs	r6, #161	; 0xa1
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b92a:	5119      	str	r1, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b92c:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE = mode;
    b92e:	2401      	movs	r4, #1
    b930:	4d10      	ldr	r5, [pc, #64]	; (b974 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b932:	00f6      	lsls	r6, r6, #3
	NRF_CCM->MODE = mode;
    b934:	515c      	str	r4, [r3, r5]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b936:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    b938:	480f      	ldr	r0, [pc, #60]	; (b978 <radio_ccm_rx_pkt_set+0x5c>)
    b93a:	4e10      	ldr	r6, [pc, #64]	; (b97c <radio_ccm_rx_pkt_set+0x60>)
    b93c:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    b93e:	3604      	adds	r6, #4
    b940:	519a      	str	r2, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b942:	4e0f      	ldr	r6, [pc, #60]	; (b980 <radio_ccm_rx_pkt_set+0x64>)
    b944:	4a0f      	ldr	r2, [pc, #60]	; (b984 <radio_ccm_rx_pkt_set+0x68>)
    b946:	509e      	str	r6, [r3, r2]
	NRF_CCM->SHORTS = 0;
    b948:	2280      	movs	r2, #128	; 0x80
    b94a:	0092      	lsls	r2, r2, #2
    b94c:	5099      	str	r1, [r3, r2]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b94e:	001a      	movs	r2, r3
    b950:	32fc      	adds	r2, #252	; 0xfc
    b952:	6091      	str	r1, [r2, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    b954:	60d1      	str	r1, [r2, #12]

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b956:	21a8      	movs	r1, #168	; 0xa8
    b958:	4a0b      	ldr	r2, [pc, #44]	; (b988 <radio_ccm_rx_pkt_set+0x6c>)
    b95a:	4e0c      	ldr	r6, [pc, #48]	; (b98c <radio_ccm_rx_pkt_set+0x70>)
    b95c:	00c9      	lsls	r1, r1, #3
    b95e:	5056      	str	r6, [r2, r1]
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    b960:	4e0b      	ldr	r6, [pc, #44]	; (b990 <radio_ccm_rx_pkt_set+0x74>)
    b962:	490c      	ldr	r1, [pc, #48]	; (b994 <radio_ccm_rx_pkt_set+0x78>)
    b964:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    b966:	2140      	movs	r1, #64	; 0x40
    b968:	5151      	str	r1, [r2, r5]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    b96a:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b96c:	bd70      	pop	{r4, r5, r6, pc}
    b96e:	46c0      	nop			; (mov r8, r8)
    b970:	4000f000 	.word	0x4000f000
    b974:	00000504 	.word	0x00000504
    b978:	20000ad0 	.word	0x20000ad0
    b97c:	0000050c 	.word	0x0000050c
    b980:	20000aa0 	.word	0x20000aa0
    b984:	00000514 	.word	0x00000514
    b988:	4001f000 	.word	0x4001f000
    b98c:	40001104 	.word	0x40001104
    b990:	4000f004 	.word	0x4000f004
    b994:	00000544 	.word	0x00000544

0000b998 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    b998:	b530      	push	{r4, r5, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b99a:	24a0      	movs	r4, #160	; 0xa0
    b99c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b99e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b9a0:	4b0d      	ldr	r3, [pc, #52]	; (b9d8 <radio_ccm_tx_pkt_set+0x40>)
    b9a2:	00e4      	lsls	r4, r4, #3
    b9a4:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b9a6:	511d      	str	r5, [r3, r4]
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    b9a8:	4c0c      	ldr	r4, [pc, #48]	; (b9dc <radio_ccm_tx_pkt_set+0x44>)
    b9aa:	511a      	str	r2, [r3, r4]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b9ac:	3404      	adds	r4, #4
    b9ae:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    b9b0:	480b      	ldr	r0, [pc, #44]	; (b9e0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b9b2:	4c0c      	ldr	r4, [pc, #48]	; (b9e4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (u32_t)pkt;
    b9b4:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b9b6:	21a2      	movs	r1, #162	; 0xa2
    b9b8:	480b      	ldr	r0, [pc, #44]	; (b9e8 <radio_ccm_tx_pkt_set+0x50>)
    b9ba:	00c9      	lsls	r1, r1, #3
    b9bc:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b9be:	490b      	ldr	r1, [pc, #44]	; (b9ec <radio_ccm_tx_pkt_set+0x54>)
    b9c0:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    b9c2:	2480      	movs	r4, #128	; 0x80
    b9c4:	2101      	movs	r1, #1
    b9c6:	00a4      	lsls	r4, r4, #2
    b9c8:	5119      	str	r1, [r3, r4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b9ca:	001c      	movs	r4, r3
    b9cc:	34fc      	adds	r4, #252	; 0xfc
    b9ce:	60a2      	str	r2, [r4, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    b9d0:	60e2      	str	r2, [r4, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    b9d2:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b9d4:	bd30      	pop	{r4, r5, pc}
    b9d6:	46c0      	nop			; (mov r8, r8)
    b9d8:	4000f000 	.word	0x4000f000
    b9dc:	00000504 	.word	0x00000504
    b9e0:	0000050c 	.word	0x0000050c
    b9e4:	20000aa0 	.word	0x20000aa0
    b9e8:	20000ad0 	.word	0x20000ad0
    b9ec:	00000514 	.word	0x00000514

0000b9f0 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    b9f0:	22c1      	movs	r2, #193	; 0xc1
    b9f2:	2102      	movs	r1, #2
    b9f4:	4b0c      	ldr	r3, [pc, #48]	; (ba28 <radio_ccm_is_done+0x38>)
    b9f6:	0092      	lsls	r2, r2, #2
    b9f8:	5099      	str	r1, [r3, r2]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    b9fa:	4a0c      	ldr	r2, [pc, #48]	; (ba2c <radio_ccm_is_done+0x3c>)
    b9fc:	6891      	ldr	r1, [r2, #8]
    b9fe:	2900      	cmp	r1, #0
    ba00:	d00d      	beq.n	ba1e <radio_ccm_is_done+0x2e>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    ba02:	21c2      	movs	r1, #194	; 0xc2
    ba04:	2002      	movs	r0, #2
    ba06:	0089      	lsls	r1, r1, #2
    ba08:	5058      	str	r0, [r3, r1]
    ba0a:	2080      	movs	r0, #128	; 0x80
    ba0c:	23c0      	movs	r3, #192	; 0xc0
    ba0e:	4908      	ldr	r1, [pc, #32]	; (ba30 <radio_ccm_is_done+0x40>)
    ba10:	005b      	lsls	r3, r3, #1
    ba12:	0200      	lsls	r0, r0, #8
    ba14:	50c8      	str	r0, [r1, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    ba16:	68d0      	ldr	r0, [r2, #12]
    ba18:	4243      	negs	r3, r0
    ba1a:	4158      	adcs	r0, r3
}
    ba1c:	4770      	bx	lr
		__WFE();
    ba1e:	bf20      	wfe
		__SEV();
    ba20:	bf40      	sev
		__WFE();
    ba22:	bf20      	wfe
    ba24:	e7ea      	b.n	b9fc <radio_ccm_is_done+0xc>
    ba26:	46c0      	nop			; (mov r8, r8)
    ba28:	4000f000 	.word	0x4000f000
    ba2c:	4000f0fc 	.word	0x4000f0fc
    ba30:	e000e100 	.word	0xe000e100

0000ba34 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    ba34:	2380      	movs	r3, #128	; 0x80
    ba36:	4a03      	ldr	r2, [pc, #12]	; (ba44 <radio_ccm_mic_is_valid+0x10>)
    ba38:	00db      	lsls	r3, r3, #3
    ba3a:	58d0      	ldr	r0, [r2, r3]
    ba3c:	1e43      	subs	r3, r0, #1
    ba3e:	4198      	sbcs	r0, r3
}
    ba40:	4770      	bx	lr
    ba42:	46c0      	nop			; (mov r8, r8)
    ba44:	4000f000 	.word	0x4000f000

0000ba48 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    ba48:	2380      	movs	r3, #128	; 0x80
    ba4a:	4a02      	ldr	r2, [pc, #8]	; (ba54 <radio_ar_match_get+0xc>)
    ba4c:	00db      	lsls	r3, r3, #3
    ba4e:	58d0      	ldr	r0, [r2, r3]
}
    ba50:	4770      	bx	lr
    ba52:	46c0      	nop			; (mov r8, r8)
    ba54:	4000f000 	.word	0x4000f000

0000ba58 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    ba58:	2300      	movs	r3, #0
    ba5a:	4a03      	ldr	r2, [pc, #12]	; (ba68 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    ba5c:	4903      	ldr	r1, [pc, #12]	; (ba6c <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
    ba5e:	62d3      	str	r3, [r2, #44]	; 0x2c
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    ba60:	22a0      	movs	r2, #160	; 0xa0
    ba62:	00d2      	lsls	r2, r2, #3
    ba64:	508b      	str	r3, [r1, r2]
			  AAR_ENABLE_ENABLE_Msk;
}
    ba66:	4770      	bx	lr
    ba68:	400010fc 	.word	0x400010fc
    ba6c:	4000f000 	.word	0x4000f000

0000ba70 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    ba70:	2000      	movs	r0, #0
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    ba72:	4b07      	ldr	r3, [pc, #28]	; (ba90 <radio_ar_has_match+0x20>)
    ba74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED &&
    ba76:	4283      	cmp	r3, r0
    ba78:	d009      	beq.n	ba8e <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_END &&
    ba7a:	4b06      	ldr	r3, [pc, #24]	; (ba94 <radio_ar_has_match+0x24>)
    ba7c:	685a      	ldr	r2, [r3, #4]
	return (radio_bc_has_match() &&
    ba7e:	4282      	cmp	r2, r0
    ba80:	d005      	beq.n	ba8e <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_RESOLVED &&
    ba82:	689a      	ldr	r2, [r3, #8]
		NRF_AAR->EVENTS_END &&
    ba84:	4282      	cmp	r2, r0
    ba86:	d002      	beq.n	ba8e <radio_ar_has_match+0x1e>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    ba88:	68d8      	ldr	r0, [r3, #12]
		NRF_AAR->EVENTS_RESOLVED &&
    ba8a:	4243      	negs	r3, r0
    ba8c:	4158      	adcs	r0, r3
}
    ba8e:	4770      	bx	lr
    ba90:	400010fc 	.word	0x400010fc
    ba94:	4000f0fc 	.word	0x4000f0fc

0000ba98 <mayfly_enable_cb>:
#else
#error Unknown LL variant.
#endif

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    ba98:	b510      	push	{r4, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    ba9a:	2901      	cmp	r1, #1
    ba9c:	d002      	beq.n	baa4 <mayfly_enable_cb+0xc>
    ba9e:	b662      	cpsie	i
    baa0:	2004      	movs	r0, #4
    baa2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    baa4:	2018      	movs	r0, #24
	if (enable) {
    baa6:	2a00      	cmp	r2, #0
    baa8:	d002      	beq.n	bab0 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    baaa:	f7f6 ffbb 	bl	2a24 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    baae:	bd10      	pop	{r4, pc}
		irq_disable(SWI4_IRQn);
    bab0:	f7f6 ffc4 	bl	2a3c <_arch_irq_disable>
}
    bab4:	e7fb      	b.n	baae <mayfly_enable_cb+0x16>

0000bab6 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    bab6:	b510      	push	{r4, lr}
	(void)caller_id;

	switch (callee_id) {
    bab8:	2900      	cmp	r1, #0
    baba:	d004      	beq.n	bac6 <mayfly_is_enabled+0x10>
    babc:	2901      	cmp	r1, #1
    babe:	d006      	beq.n	bace <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    bac0:	b662      	cpsie	i
    bac2:	2004      	movs	r0, #4
    bac4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    bac6:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    bac8:	f7f6 ffc8 	bl	2a5c <_arch_irq_is_enabled>
		break;
	}

	return 0;
}
    bacc:	bd10      	pop	{r4, pc}
		return irq_is_enabled(SWI4_IRQn);
    bace:	2018      	movs	r0, #24
    bad0:	e7fa      	b.n	bac8 <mayfly_is_enabled+0x12>

0000bad2 <mayfly_prio_is_equal>:

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    bad2:	0003      	movs	r3, r0
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    bad4:	2001      	movs	r0, #1
    bad6:	428b      	cmp	r3, r1
    bad8:	d008      	beq.n	baec <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    bada:	2b00      	cmp	r3, #0
    badc:	d103      	bne.n	bae6 <mayfly_prio_is_equal+0x14>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    bade:	3901      	subs	r1, #1
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    bae0:	4248      	negs	r0, r1
    bae2:	4148      	adcs	r0, r1
    bae4:	e002      	b.n	baec <mayfly_prio_is_equal+0x1a>
    bae6:	2000      	movs	r0, #0
    bae8:	2b01      	cmp	r3, #1
    baea:	d0f9      	beq.n	bae0 <mayfly_prio_is_equal+0xe>
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    baec:	4770      	bx	lr
	...

0000baf0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    baf0:	4b07      	ldr	r3, [pc, #28]	; (bb10 <mayfly_pend+0x20>)
	(void)caller_id;

	switch (callee_id) {
    baf2:	2900      	cmp	r1, #0
    baf4:	d004      	beq.n	bb00 <mayfly_pend+0x10>
    baf6:	2901      	cmp	r1, #1
    baf8:	d006      	beq.n	bb08 <mayfly_pend+0x18>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    bafa:	b662      	cpsie	i
    bafc:	2004      	movs	r0, #4
    bafe:	df02      	svc	2
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    bb00:	2280      	movs	r2, #128	; 0x80
    bb02:	0112      	lsls	r2, r2, #4
    bb04:	605a      	str	r2, [r3, #4]
		break;
	}
}
    bb06:	4770      	bx	lr
    bb08:	2280      	movs	r2, #128	; 0x80
    bb0a:	0452      	lsls	r2, r2, #17
    bb0c:	e7fa      	b.n	bb04 <mayfly_pend+0x14>
    bb0e:	46c0      	nop			; (mov r8, r8)
    bb10:	e000e1fc 	.word	0xe000e1fc

0000bb14 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    bb14:	2803      	cmp	r0, #3
    bb16:	d902      	bls.n	bb1e <hal_ticker_instance0_caller_id_get+0xa>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    bb18:	b662      	cpsie	i
    bb1a:	2004      	movs	r0, #4
    bb1c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    bb1e:	4b02      	ldr	r3, [pc, #8]	; (bb28 <hal_ticker_instance0_caller_id_get+0x14>)
    bb20:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    bb22:	2800      	cmp	r0, #0
    bb24:	d0f8      	beq.n	bb18 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    bb26:	4770      	bx	lr
    bb28:	0000dabe 	.word	0x0000dabe

0000bb2c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    bb2c:	3802      	subs	r0, #2
{
    bb2e:	b510      	push	{r4, lr}
    bb30:	001c      	movs	r4, r3
	switch (caller_id) {
    bb32:	2803      	cmp	r0, #3
    bb34:	d817      	bhi.n	bb66 <hal_ticker_instance0_sched+0x3a>
    bb36:	f7f4 fb29 	bl	18c <__gnu_thumb1_case_uqi>
    bb3a:	0902      	.short	0x0902
    bb3c:	2212      	.short	0x2212
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    bb3e:	2903      	cmp	r1, #3
    bb40:	d111      	bne.n	bb66 <hal_ticker_instance0_sched+0x3a>
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    bb42:	2100      	movs	r1, #0
			m.param = instance;
    bb44:	4b11      	ldr	r3, [pc, #68]	; (bb8c <hal_ticker_instance0_sched+0x60>)
    bb46:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    bb48:	0008      	movs	r0, r1
    bb4a:	e005      	b.n	bb58 <hal_ticker_instance0_sched+0x2c>
		switch (callee_id) {
    bb4c:	2904      	cmp	r1, #4
    bb4e:	d10a      	bne.n	bb66 <hal_ticker_instance0_sched+0x3a>
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    bb50:	2000      	movs	r0, #0
			m.param = instance;
    bb52:	4b0f      	ldr	r3, [pc, #60]	; (bb90 <hal_ticker_instance0_sched+0x64>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    bb54:	3903      	subs	r1, #3
			m.param = instance;
    bb56:	609c      	str	r4, [r3, #8]
						  ticker_job};

			m.param = instance;

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    bb58:	f7f9 fae0 	bl	511c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    bb5c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
    bb5e:	2903      	cmp	r1, #3
    bb60:	d004      	beq.n	bb6c <hal_ticker_instance0_sched+0x40>
    bb62:	2904      	cmp	r1, #4
    bb64:	d007      	beq.n	bb76 <hal_ticker_instance0_sched+0x4a>
		LL_ASSERT(0);
    bb66:	b662      	cpsie	i
    bb68:	2004      	movs	r0, #4
    bb6a:	df02      	svc	2
			m.param = instance;
    bb6c:	4b09      	ldr	r3, [pc, #36]	; (bb94 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    bb6e:	2100      	movs	r1, #0
			m.param = instance;
    bb70:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    bb72:	2001      	movs	r0, #1
    bb74:	e7f0      	b.n	bb58 <hal_ticker_instance0_sched+0x2c>
			m.param = instance;
    bb76:	4b08      	ldr	r3, [pc, #32]	; (bb98 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    bb78:	2101      	movs	r1, #1
			m.param = instance;
    bb7a:	609c      	str	r4, [r3, #8]
    bb7c:	e7e4      	b.n	bb48 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    bb7e:	2904      	cmp	r1, #4
    bb80:	d1f1      	bne.n	bb66 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    bb82:	4b06      	ldr	r3, [pc, #24]	; (bb9c <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    bb84:	3903      	subs	r1, #3
			m.param = instance;
    bb86:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    bb88:	2003      	movs	r0, #3
    bb8a:	e7e5      	b.n	bb58 <hal_ticker_instance0_sched+0x2c>
    bb8c:	20002468 	.word	0x20002468
    bb90:	20002478 	.word	0x20002478
    bb94:	20002488 	.word	0x20002488
    bb98:	20002498 	.word	0x20002498
    bb9c:	200024a8 	.word	0x200024a8

0000bba0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
    bba0:	b510      	push	{r4, lr}
    bba2:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    bba4:	2000      	movs	r0, #0
    bba6:	f7ff faad 	bl	b104 <cntr_cmp_set>
}
    bbaa:	bd10      	pop	{r4, pc}

0000bbac <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    bbac:	4770      	bx	lr
	...

0000bbb0 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
    bbb0:	4b01      	ldr	r3, [pc, #4]	; (bbb8 <net_buf_pool_get+0x8>)
    bbb2:	0140      	lsls	r0, r0, #5
    bbb4:	18c0      	adds	r0, r0, r3
}
    bbb6:	4770      	bx	lr
    bbb8:	200025b4 	.word	0x200025b4

0000bbbc <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    bbbc:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    bbbe:	4b04      	ldr	r3, [pc, #16]	; (bbd0 <net_buf_id+0x14>)
    bbc0:	0152      	lsls	r2, r2, #5
    bbc2:	189b      	adds	r3, r3, r2
    bbc4:	69db      	ldr	r3, [r3, #28]
    bbc6:	1ac0      	subs	r0, r0, r3
    bbc8:	4b02      	ldr	r3, [pc, #8]	; (bbd4 <net_buf_id+0x18>)
    bbca:	10c0      	asrs	r0, r0, #3
    bbcc:	4358      	muls	r0, r3
}
    bbce:	4770      	bx	lr
    bbd0:	200025b4 	.word	0x200025b4
    bbd4:	aaaaaaab 	.word	0xaaaaaaab

0000bbd8 <fixed_data_alloc>:
{
    bbd8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    bbda:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    bbdc:	4b08      	ldr	r3, [pc, #32]	; (bc00 <fixed_data_alloc+0x28>)
    bbde:	0152      	lsls	r2, r2, #5
    bbe0:	189b      	adds	r3, r3, r2
    bbe2:	699b      	ldr	r3, [r3, #24]
    bbe4:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    bbe6:	680b      	ldr	r3, [r1, #0]
    bbe8:	6822      	ldr	r2, [r4, #0]
    bbea:	4293      	cmp	r3, r2
    bbec:	d900      	bls.n	bbf0 <fixed_data_alloc+0x18>
    bbee:	0013      	movs	r3, r2
    bbf0:	600b      	str	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    bbf2:	f7ff ffe3 	bl	bbbc <net_buf_id>
    bbf6:	6823      	ldr	r3, [r4, #0]
    bbf8:	4343      	muls	r3, r0
    bbfa:	6860      	ldr	r0, [r4, #4]
    bbfc:	18c0      	adds	r0, r0, r3
}
    bbfe:	bd10      	pop	{r4, pc}
    bc00:	200025b4 	.word	0x200025b4

0000bc04 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    bc04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bc06:	0005      	movs	r5, r0
    bc08:	9101      	str	r1, [sp, #4]
    bc0a:	0016      	movs	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    bc0c:	f000 fe68 	bl	c8e0 <_impl_k_uptime_get_32>
    bc10:	9000      	str	r0, [sp, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    bc12:	f3ef 8710 	mrs	r7, PRIMASK
    bc16:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    bc18:	8a6b      	ldrh	r3, [r5, #18]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d040      	beq.n	bca0 <net_buf_alloc_len+0x9c>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    bc1e:	8a2a      	ldrh	r2, [r5, #16]
    bc20:	429a      	cmp	r2, r3
    bc22:	d92c      	bls.n	bc7e <net_buf_alloc_len+0x7a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    bc24:	2100      	movs	r1, #0
    bc26:	0028      	movs	r0, r5
    bc28:	f000 fba0 	bl	c36c <k_queue_get>
    bc2c:	1e04      	subs	r4, r0, #0
			if (buf) {
    bc2e:	d026      	beq.n	bc7e <net_buf_alloc_len+0x7a>
	if (key) {
    bc30:	2f00      	cmp	r7, #0
    bc32:	d100      	bne.n	bc36 <net_buf_alloc_len+0x32>
	__asm__ volatile("cpsie i" : : : "memory");
    bc34:	b662      	cpsie	i
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    bc36:	9b01      	ldr	r3, [sp, #4]
    bc38:	2b00      	cmp	r3, #0
    bc3a:	d03c      	beq.n	bcb6 <net_buf_alloc_len+0xb2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    bc3c:	1c73      	adds	r3, r6, #1
    bc3e:	2b01      	cmp	r3, #1
    bc40:	d907      	bls.n	bc52 <net_buf_alloc_len+0x4e>
    bc42:	f000 fe4d 	bl	c8e0 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    bc46:	9b00      	ldr	r3, [sp, #0]
    bc48:	1ac0      	subs	r0, r0, r3

			timeout -= min(timeout, diff);
    bc4a:	42b0      	cmp	r0, r6
    bc4c:	d900      	bls.n	bc50 <net_buf_alloc_len+0x4c>
    bc4e:	0030      	movs	r0, r6
    bc50:	1a36      	subs	r6, r6, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    bc52:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    bc54:	4f1e      	ldr	r7, [pc, #120]	; (bcd0 <net_buf_alloc_len+0xcc>)
    bc56:	015b      	lsls	r3, r3, #5
    bc58:	18fb      	adds	r3, r7, r3
    bc5a:	699b      	ldr	r3, [r3, #24]
    bc5c:	0032      	movs	r2, r6
    bc5e:	681b      	ldr	r3, [r3, #0]
    bc60:	a901      	add	r1, sp, #4
    bc62:	681b      	ldr	r3, [r3, #0]
    bc64:	0020      	movs	r0, r4
    bc66:	4798      	blx	r3
    bc68:	1e05      	subs	r5, r0, #0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    bc6a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    bc6c:	d124      	bne.n	bcb8 <net_buf_alloc_len+0xb4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    bc6e:	79a0      	ldrb	r0, [r4, #6]
    bc70:	0021      	movs	r1, r4
    bc72:	0140      	lsls	r0, r0, #5
    bc74:	19c0      	adds	r0, r0, r7
    bc76:	f000 fb58 	bl	c32a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    bc7a:	002c      	movs	r4, r5
    bc7c:	e019      	b.n	bcb2 <net_buf_alloc_len+0xae>
		uninit_count = pool->uninit_count--;
    bc7e:	8a6b      	ldrh	r3, [r5, #18]
    bc80:	1e5a      	subs	r2, r3, #1
    bc82:	826a      	strh	r2, [r5, #18]
	if (key) {
    bc84:	2f00      	cmp	r7, #0
    bc86:	d100      	bne.n	bc8a <net_buf_alloc_len+0x86>
	__asm__ volatile("cpsie i" : : : "memory");
    bc88:	b662      	cpsie	i
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    bc8a:	8a2c      	ldrh	r4, [r5, #16]
    bc8c:	1ae3      	subs	r3, r4, r3
    bc8e:	2418      	movs	r4, #24
    bc90:	435c      	muls	r4, r3
    bc92:	69eb      	ldr	r3, [r5, #28]
    bc94:	191c      	adds	r4, r3, r4
	return pool - _net_buf_pool_list;
    bc96:	4b0e      	ldr	r3, [pc, #56]	; (bcd0 <net_buf_alloc_len+0xcc>)
    bc98:	1aed      	subs	r5, r5, r3
    bc9a:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    bc9c:	71a5      	strb	r5, [r4, #6]
		goto success;
    bc9e:	e7ca      	b.n	bc36 <net_buf_alloc_len+0x32>
	if (key) {
    bca0:	2f00      	cmp	r7, #0
    bca2:	d100      	bne.n	bca6 <net_buf_alloc_len+0xa2>
	__asm__ volatile("cpsie i" : : : "memory");
    bca4:	b662      	cpsie	i
	buf = k_lifo_get(&pool->free, timeout);
    bca6:	0031      	movs	r1, r6
    bca8:	0028      	movs	r0, r5
    bcaa:	f000 fb5f 	bl	c36c <k_queue_get>
    bcae:	1e04      	subs	r4, r0, #0
	if (!buf) {
    bcb0:	d1c1      	bne.n	bc36 <net_buf_alloc_len+0x32>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    bcb2:	0020      	movs	r0, r4
    bcb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		buf->__buf = NULL;
    bcb6:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    bcb8:	2301      	movs	r3, #1
    bcba:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    bcbc:	2300      	movs	r3, #0
	buf->size  = size;
    bcbe:	466a      	mov	r2, sp
	buf->frags = NULL;
    bcc0:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    bcc2:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    bcc4:	8892      	ldrh	r2, [r2, #4]
	buf->len  = 0;
    bcc6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    bcc8:	6923      	ldr	r3, [r4, #16]
    bcca:	81e2      	strh	r2, [r4, #14]
    bccc:	60a3      	str	r3, [r4, #8]
	return buf;
    bcce:	e7f0      	b.n	bcb2 <net_buf_alloc_len+0xae>
    bcd0:	200025b4 	.word	0x200025b4

0000bcd4 <net_buf_alloc_fixed>:
	return net_buf_alloc_len_debug(pool, fixed->data_size, timeout, func,
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
    bcd4:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    bcd6:	6983      	ldr	r3, [r0, #24]
{
    bcd8:	000a      	movs	r2, r1

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    bcda:	685b      	ldr	r3, [r3, #4]
    bcdc:	6819      	ldr	r1, [r3, #0]
    bcde:	f7ff ff91 	bl	bc04 <net_buf_alloc_len>
}
    bce2:	bd10      	pop	{r4, pc}

0000bce4 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    bce4:	6883      	ldr	r3, [r0, #8]
    bce6:	1859      	adds	r1, r3, r1
    bce8:	6001      	str	r1, [r0, #0]
}
    bcea:	4770      	bx	lr

0000bcec <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    bcec:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    bcee:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
    bcf0:	2501      	movs	r5, #1
	for (tail = buf; tail->frags; tail = tail->frags) {
    bcf2:	6814      	ldr	r4, [r2, #0]
    bcf4:	2c00      	cmp	r4, #0
    bcf6:	d102      	bne.n	bcfe <net_buf_put+0x12>
	}

	k_fifo_put_list(fifo, buf, tail);
    bcf8:	f000 fb1d 	bl	c336 <k_queue_append_list>
}
    bcfc:	bd70      	pop	{r4, r5, r6, pc}
		tail->flags |= NET_BUF_FRAGS;
    bcfe:	7953      	ldrb	r3, [r2, #5]
    bd00:	432b      	orrs	r3, r5
    bd02:	7153      	strb	r3, [r2, #5]
    bd04:	0022      	movs	r2, r4
    bd06:	e7f4      	b.n	bcf2 <net_buf_put+0x6>

0000bd08 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd0a:	0004      	movs	r4, r0
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    bd0c:	2502      	movs	r5, #2
	NET_BUF_ASSERT(buf);

	while (buf) {
    bd0e:	2c00      	cmp	r4, #0
    bd10:	d100      	bne.n	bd14 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    bd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    bd14:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    bd16:	6826      	ldr	r6, [r4, #0]
		if (--buf->ref > 0) {
    bd18:	3b01      	subs	r3, #1
    bd1a:	b2db      	uxtb	r3, r3
    bd1c:	7123      	strb	r3, [r4, #4]
    bd1e:	2b00      	cmp	r3, #0
    bd20:	d1f7      	bne.n	bd12 <net_buf_unref+0xa>
		if (buf->__buf) {
    bd22:	6921      	ldr	r1, [r4, #16]
    bd24:	4f10      	ldr	r7, [pc, #64]	; (bd68 <net_buf_unref+0x60>)
    bd26:	2900      	cmp	r1, #0
    bd28:	d00c      	beq.n	bd44 <net_buf_unref+0x3c>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    bd2a:	7963      	ldrb	r3, [r4, #5]
    bd2c:	422b      	tst	r3, r5
    bd2e:	d107      	bne.n	bd40 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    bd30:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    bd32:	0020      	movs	r0, r4
    bd34:	015b      	lsls	r3, r3, #5
    bd36:	18fb      	adds	r3, r7, r3
    bd38:	699b      	ldr	r3, [r3, #24]
    bd3a:	681b      	ldr	r3, [r3, #0]
    bd3c:	689b      	ldr	r3, [r3, #8]
    bd3e:	4798      	blx	r3
			buf->__buf = NULL;
    bd40:	2300      	movs	r3, #0
    bd42:	6123      	str	r3, [r4, #16]
		buf->data = NULL;
    bd44:	2300      	movs	r3, #0
		pool = net_buf_pool_get(buf->pool_id);
    bd46:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    bd48:	60a3      	str	r3, [r4, #8]
		if (pool->destroy) {
    bd4a:	0140      	lsls	r0, r0, #5
		buf->frags = NULL;
    bd4c:	6023      	str	r3, [r4, #0]
		if (pool->destroy) {
    bd4e:	1838      	adds	r0, r7, r0
    bd50:	6943      	ldr	r3, [r0, #20]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d003      	beq.n	bd5e <net_buf_unref+0x56>
			pool->destroy(buf);
    bd56:	0020      	movs	r0, r4
    bd58:	4798      	blx	r3
{
    bd5a:	0034      	movs	r4, r6
    bd5c:	e7d7      	b.n	bd0e <net_buf_unref+0x6>
	k_lifo_put(&pool->free, buf);
    bd5e:	0021      	movs	r1, r4
    bd60:	f000 fae3 	bl	c32a <k_queue_prepend>
    bd64:	e7f9      	b.n	bd5a <net_buf_unref+0x52>
    bd66:	46c0      	nop			; (mov r8, r8)
    bd68:	200025b4 	.word	0x200025b4

0000bd6c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    bd6c:	7903      	ldrb	r3, [r0, #4]
    bd6e:	3301      	adds	r3, #1
    bd70:	7103      	strb	r3, [r0, #4]
	return buf;
}
    bd72:	4770      	bx	lr

0000bd74 <net_buf_simple_add>:
	return buf->data + buf->len;
    bd74:	8883      	ldrh	r3, [r0, #4]
    bd76:	6802      	ldr	r2, [r0, #0]
    bd78:	18d2      	adds	r2, r2, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    bd7a:	185b      	adds	r3, r3, r1
    bd7c:	8083      	strh	r3, [r0, #4]
	return tail;
}
    bd7e:	0010      	movs	r0, r2
    bd80:	4770      	bx	lr

0000bd82 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    bd82:	b510      	push	{r4, lr}
    bd84:	0004      	movs	r4, r0
    bd86:	8883      	ldrh	r3, [r0, #4]
    bd88:	6800      	ldr	r0, [r0, #0]
    bd8a:	18c0      	adds	r0, r0, r3
	buf->len += len;
    bd8c:	189b      	adds	r3, r3, r2
    bd8e:	80a3      	strh	r3, [r4, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    bd90:	f7f5 ffcc 	bl	1d2c <memcpy>
}
    bd94:	bd10      	pop	{r4, pc}

0000bd96 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    bd96:	8883      	ldrh	r3, [r0, #4]
    bd98:	1a5b      	subs	r3, r3, r1
    bd9a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    bd9c:	6803      	ldr	r3, [r0, #0]
    bd9e:	1859      	adds	r1, r3, r1
    bda0:	6001      	str	r1, [r0, #0]
}
    bda2:	0008      	movs	r0, r1
    bda4:	4770      	bx	lr

0000bda6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    bda6:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
    bda8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    bdaa:	2101      	movs	r1, #1
	val = buf->data[0];
    bdac:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
    bdae:	f7ff fff2 	bl	bd96 <net_buf_simple_pull>

	return val;
}
    bdb2:	0020      	movs	r0, r4
    bdb4:	bd10      	pop	{r4, pc}

0000bdb6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    bdb6:	6803      	ldr	r3, [r0, #0]
    bdb8:	6880      	ldr	r0, [r0, #8]
    bdba:	1a18      	subs	r0, r3, r0
}
    bdbc:	4770      	bx	lr
	...

0000bdc0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    bdc0:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    bdc2:	4e07      	ldr	r6, [pc, #28]	; (bde0 <_sys_device_do_config_level+0x20>)
    bdc4:	0083      	lsls	r3, r0, #2
    bdc6:	599d      	ldr	r5, [r3, r6]
    bdc8:	3001      	adds	r0, #1
    bdca:	0084      	lsls	r4, r0, #2
    bdcc:	5933      	ldr	r3, [r6, r4]
    bdce:	429d      	cmp	r5, r3
    bdd0:	d300      	bcc.n	bdd4 <_sys_device_do_config_level+0x14>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    bdd2:	bd70      	pop	{r4, r5, r6, pc}
		device->init(info);
    bdd4:	682b      	ldr	r3, [r5, #0]
    bdd6:	0028      	movs	r0, r5
    bdd8:	685b      	ldr	r3, [r3, #4]
    bdda:	4798      	blx	r3
								info++) {
    bddc:	350c      	adds	r5, #12
    bdde:	e7f5      	b.n	bdcc <_sys_device_do_config_level+0xc>
    bde0:	0000dad0 	.word	0x0000dad0

0000bde4 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    bde4:	b570      	push	{r4, r5, r6, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    bde6:	4c11      	ldr	r4, [pc, #68]	; (be2c <device_get_binding+0x48>)
{
    bde8:	0006      	movs	r6, r0
    bdea:	0023      	movs	r3, r4
	for (info = __device_init_start; info != __device_init_end; info++) {
    bdec:	4d10      	ldr	r5, [pc, #64]	; (be30 <device_get_binding+0x4c>)
    bdee:	42ac      	cmp	r4, r5
    bdf0:	d104      	bne.n	bdfc <device_get_binding+0x18>
    bdf2:	001c      	movs	r4, r3
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    bdf4:	42ac      	cmp	r4, r5
    bdf6:	d10a      	bne.n	be0e <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    bdf8:	2400      	movs	r4, #0
    bdfa:	e014      	b.n	be26 <device_get_binding+0x42>
		if (info->driver_api != NULL && info->config->name == name) {
    bdfc:	6862      	ldr	r2, [r4, #4]
    bdfe:	2a00      	cmp	r2, #0
    be00:	d003      	beq.n	be0a <device_get_binding+0x26>
    be02:	6822      	ldr	r2, [r4, #0]
    be04:	6812      	ldr	r2, [r2, #0]
    be06:	42b2      	cmp	r2, r6
    be08:	d00d      	beq.n	be26 <device_get_binding+0x42>
	for (info = __device_init_start; info != __device_init_end; info++) {
    be0a:	340c      	adds	r4, #12
    be0c:	e7ef      	b.n	bdee <device_get_binding+0xa>
		if (!info->driver_api) {
    be0e:	6863      	ldr	r3, [r4, #4]
    be10:	2b00      	cmp	r3, #0
    be12:	d101      	bne.n	be18 <device_get_binding+0x34>
	for (info = __device_init_start; info != __device_init_end; info++) {
    be14:	340c      	adds	r4, #12
    be16:	e7ed      	b.n	bdf4 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    be18:	6823      	ldr	r3, [r4, #0]
    be1a:	0030      	movs	r0, r6
    be1c:	6819      	ldr	r1, [r3, #0]
    be1e:	f7f5 ff55 	bl	1ccc <strcmp>
    be22:	2800      	cmp	r0, #0
    be24:	d1f6      	bne.n	be14 <device_get_binding+0x30>
}
    be26:	0020      	movs	r0, r4
    be28:	bd70      	pop	{r4, r5, r6, pc}
    be2a:	46c0      	nop			; (mov r8, r8)
    be2c:	200024c4 	.word	0x200024c4
    be30:	20002578 	.word	0x20002578

0000be34 <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    be34:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    be36:	1c43      	adds	r3, r0, #1
    be38:	d003      	beq.n	be42 <_sys_power_save_idle_exit+0xe>
    be3a:	4b03      	ldr	r3, [pc, #12]	; (be48 <_sys_power_save_idle_exit+0x14>)
    be3c:	681b      	ldr	r3, [r3, #0]
    be3e:	4298      	cmp	r0, r3
    be40:	db01      	blt.n	be46 <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    be42:	f7f8 fbc7 	bl	45d4 <_timer_idle_exit>
	}
}
    be46:	bd10      	pop	{r4, pc}
    be48:	200024b8 	.word	0x200024b8

0000be4c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    be4c:	b570      	push	{r4, r5, r6, lr}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be4e:	2601      	movs	r6, #1
    be50:	4276      	negs	r6, r6
	__asm__ volatile("mrs %0, PRIMASK;"
    be52:	f3ef 8310 	mrs	r3, PRIMASK
    be56:	b672      	cpsid	i
	return list->head == list;
    be58:	4d0b      	ldr	r5, [pc, #44]	; (be88 <idle+0x3c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be5a:	4a0c      	ldr	r2, [pc, #48]	; (be8c <idle+0x40>)
	return list->head == list;
    be5c:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be5e:	4293      	cmp	r3, r2
    be60:	d00c      	beq.n	be7c <idle+0x30>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    be62:	2b00      	cmp	r3, #0
    be64:	d00a      	beq.n	be7c <idle+0x30>
    be66:	691c      	ldr	r4, [r3, #16]
	if (_must_enter_tickless_idle(ticks)) {
    be68:	1c63      	adds	r3, r4, #1
    be6a:	d008      	beq.n	be7e <idle+0x32>
    be6c:	4b08      	ldr	r3, [pc, #32]	; (be90 <idle+0x44>)
    be6e:	681b      	ldr	r3, [r3, #0]
    be70:	42a3      	cmp	r3, r4
    be72:	dd04      	ble.n	be7e <idle+0x32>
	_kernel.idle = ticks;
    be74:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    be76:	f7f6 fe73 	bl	2b60 <k_cpu_idle>
    be7a:	e7ea      	b.n	be52 <idle+0x6>
    be7c:	0034      	movs	r4, r6
		_timer_idle_enter(ticks);
    be7e:	0020      	movs	r0, r4
    be80:	f7f8 fb92 	bl	45a8 <_timer_idle_enter>
    be84:	e7f6      	b.n	be74 <idle+0x28>
    be86:	46c0      	nop			; (mov r8, r8)
    be88:	20000be8 	.word	0x20000be8
    be8c:	20000bf8 	.word	0x20000bf8
    be90:	200024b8 	.word	0x200024b8

0000be94 <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    be94:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
    be96:	4803      	ldr	r0, [pc, #12]	; (bea4 <_bss_zero+0x10>)
    be98:	4a03      	ldr	r2, [pc, #12]	; (bea8 <_bss_zero+0x14>)
    be9a:	2100      	movs	r1, #0
    be9c:	1a12      	subs	r2, r2, r0
    be9e:	f7f5 ff6f 	bl	1d80 <memset>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
    bea2:	bd10      	pop	{r4, pc}
    bea4:	20000000 	.word	0x20000000
    bea8:	20000e60 	.word	0x20000e60

0000beac <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    beac:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
    beae:	4803      	ldr	r0, [pc, #12]	; (bebc <_data_copy+0x10>)
    beb0:	4a03      	ldr	r2, [pc, #12]	; (bec0 <_data_copy+0x14>)
    beb2:	4904      	ldr	r1, [pc, #16]	; (bec4 <_data_copy+0x18>)
    beb4:	1a12      	subs	r2, r2, r0
    beb6:	f7f5 ff39 	bl	1d2c <memcpy>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
    beba:	bd10      	pop	{r4, pc}
    bebc:	20002198 	.word	0x20002198
    bec0:	200025f4 	.word	0x200025f4
    bec4:	0000db34 	.word	0x0000db34

0000bec8 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    bec8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    beca:	2002      	movs	r0, #2
    becc:	f7ff ff78 	bl	bdc0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    bed0:	4908      	ldr	r1, [pc, #32]	; (bef4 <_main+0x2c>)
    bed2:	4809      	ldr	r0, [pc, #36]	; (bef8 <_main+0x30>)
    bed4:	f7f7 f8c8 	bl	3068 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    bed8:	2003      	movs	r0, #3
    beda:	f7ff ff71 	bl	bdc0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    bede:	f000 fef9 	bl	ccd4 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    bee2:	f7f6 fc0b 	bl	26fc <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    bee6:	2101      	movs	r1, #1
    bee8:	4a04      	ldr	r2, [pc, #16]	; (befc <_main+0x34>)
    beea:	7a13      	ldrb	r3, [r2, #8]
    beec:	438b      	bics	r3, r1
    beee:	7213      	strb	r3, [r2, #8]
}
    bef0:	bd10      	pop	{r4, pc}
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	0000daec 	.word	0x0000daec
    bef8:	0000db08 	.word	0x0000db08
    befc:	20000b88 	.word	0x20000b88

0000bf00 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf02:	b087      	sub	sp, #28
    bf04:	af06      	add	r7, sp, #24
	_IntLibInit();
    bf06:	f7f6 fcf3 	bl	28f0 <_IntLibInit>
    bf0a:	4b30      	ldr	r3, [pc, #192]	; (bfcc <_Cstart+0xcc>)
    bf0c:	4a30      	ldr	r2, [pc, #192]	; (bfd0 <_Cstart+0xd0>)
	list->head = (sys_dnode_t *)list;
    bf0e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    bf10:	605b      	str	r3, [r3, #4]
    bf12:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    bf14:	4293      	cmp	r3, r2
    bf16:	d1fa      	bne.n	bf0e <_Cstart+0xe>
	_setup_new_thread(_main_thread, _main_stack,
    bf18:	2400      	movs	r4, #0
    bf1a:	2301      	movs	r3, #1
    bf1c:	2280      	movs	r2, #128	; 0x80
	_ready_q.cache = _main_thread;
    bf1e:	4d2d      	ldr	r5, [pc, #180]	; (bfd4 <_Cstart+0xd4>)
    bf20:	4e2d      	ldr	r6, [pc, #180]	; (bfd8 <_Cstart+0xd8>)
	_setup_new_thread(_main_thread, _main_stack,
    bf22:	492e      	ldr	r1, [pc, #184]	; (bfdc <_Cstart+0xdc>)
	_ready_q.cache = _main_thread;
    bf24:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    bf26:	0028      	movs	r0, r5
    bf28:	9304      	str	r3, [sp, #16]
    bf2a:	9403      	str	r4, [sp, #12]
    bf2c:	9402      	str	r4, [sp, #8]
    bf2e:	9401      	str	r4, [sp, #4]
    bf30:	9400      	str	r4, [sp, #0]
    bf32:	4b2b      	ldr	r3, [pc, #172]	; (bfe0 <_Cstart+0xe0>)
    bf34:	00d2      	lsls	r2, r2, #3
    bf36:	f000 fe75 	bl	cc24 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bf3a:	2204      	movs	r2, #4
    bf3c:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    bf3e:	0028      	movs	r0, r5
    bf40:	4393      	bics	r3, r2
    bf42:	726b      	strb	r3, [r5, #9]
    bf44:	f000 fa5a 	bl	c3fc <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    bf48:	2301      	movs	r3, #1
    bf4a:	2280      	movs	r2, #128	; 0x80
    bf4c:	9304      	str	r3, [sp, #16]
    bf4e:	330e      	adds	r3, #14
    bf50:	9303      	str	r3, [sp, #12]
    bf52:	4924      	ldr	r1, [pc, #144]	; (bfe4 <_Cstart+0xe4>)
    bf54:	9402      	str	r4, [sp, #8]
    bf56:	9401      	str	r4, [sp, #4]
    bf58:	9400      	str	r4, [sp, #0]
    bf5a:	4b23      	ldr	r3, [pc, #140]	; (bfe8 <_Cstart+0xe8>)
    bf5c:	0052      	lsls	r2, r2, #1
    bf5e:	4823      	ldr	r0, [pc, #140]	; (bfec <_Cstart+0xec>)
    bf60:	f000 fe60 	bl	cc24 <_setup_new_thread>
    bf64:	2204      	movs	r2, #4
    bf66:	4b21      	ldr	r3, [pc, #132]	; (bfec <_Cstart+0xec>)
    bf68:	7a5b      	ldrb	r3, [r3, #9]
    bf6a:	4393      	bics	r3, r2
    bf6c:	4a1f      	ldr	r2, [pc, #124]	; (bfec <_Cstart+0xec>)
    bf6e:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    bf70:	0010      	movs	r0, r2
    bf72:	f000 fa43 	bl	c3fc <_add_thread_to_ready_q>
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    bf76:	22a0      	movs	r2, #160	; 0xa0
	list->head = (sys_dnode_t *)list;
    bf78:	4b1d      	ldr	r3, [pc, #116]	; (bff0 <_Cstart+0xf0>)
    bf7a:	0092      	lsls	r2, r2, #2
    bf7c:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    bf7e:	6173      	str	r3, [r6, #20]
    bf80:	4b1c      	ldr	r3, [pc, #112]	; (bff4 <_Cstart+0xf4>)
    bf82:	189b      	adds	r3, r3, r2
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    bf84:	f383 8808 	msr	MSP, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    bf88:	491b      	ldr	r1, [pc, #108]	; (bff8 <_Cstart+0xf8>)
    bf8a:	4a1c      	ldr	r2, [pc, #112]	; (bffc <_Cstart+0xfc>)
    bf8c:	6a0b      	ldr	r3, [r1, #32]
    bf8e:	401a      	ands	r2, r3
    bf90:	23c0      	movs	r3, #192	; 0xc0
    bf92:	041b      	lsls	r3, r3, #16
    bf94:	4313      	orrs	r3, r2
    bf96:	620b      	str	r3, [r1, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    bf98:	f7f6 fd42 	bl	2a20 <_FaultInit>
	_CpuIdleInit();
    bf9c:	f7f6 fdda 	bl	2b54 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    bfa0:	0020      	movs	r0, r4
    bfa2:	f7ff ff0d 	bl	bdc0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bfa6:	2001      	movs	r0, #1
    bfa8:	f7ff ff0a 	bl	bdc0 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    bfac:	2280      	movs	r2, #128	; 0x80
    bfae:	4b0b      	ldr	r3, [pc, #44]	; (bfdc <_Cstart+0xdc>)
    bfb0:	00d2      	lsls	r2, r2, #3
    bfb2:	189b      	adds	r3, r3, r2
    bfb4:	2207      	movs	r2, #7

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    bfb6:	490a      	ldr	r1, [pc, #40]	; (bfe0 <_Cstart+0xe0>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    bfb8:	4393      	bics	r3, r2
	_current = main_thread;
    bfba:	60b5      	str	r5, [r6, #8]
	__asm__ __volatile__(
    bfbc:	4a10      	ldr	r2, [pc, #64]	; (c000 <_Cstart+0x100>)
    bfbe:	000c      	movs	r4, r1
    bfc0:	f383 8809 	msr	PSP, r3
    bfc4:	b662      	cpsie	i
    bfc6:	1c20      	adds	r0, r4, #0
    bfc8:	4710      	bx	r2
    bfca:	46c0      	nop			; (mov r8, r8)
    bfcc:	20000c0c 	.word	0x20000c0c
    bfd0:	20000d0c 	.word	0x20000d0c
    bfd4:	20000b88 	.word	0x20000b88
    bfd8:	20000be8 	.word	0x20000be8
    bfdc:	20001618 	.word	0x20001618
    bfe0:	0000bec9 	.word	0x0000bec9
    bfe4:	20001a18 	.word	0x20001a18
    bfe8:	0000be4d 	.word	0x0000be4d
    bfec:	20000b28 	.word	0x20000b28
    bff0:	20000bf8 	.word	0x20000bf8
    bff4:	20001b18 	.word	0x20001b18
    bff8:	e000ed00 	.word	0xe000ed00
    bffc:	ff00ffff 	.word	0xff00ffff
    c000:	0000cbc1 	.word	0x0000cbc1

0000c004 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    c004:	b570      	push	{r4, r5, r6, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    c006:	7ac6      	ldrb	r6, [r0, #11]
    c008:	250c      	movs	r5, #12
    c00a:	68c4      	ldr	r4, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    c00c:	428e      	cmp	r6, r1
    c00e:	db0b      	blt.n	c028 <get_bit_ptr+0x24>
    c010:	4369      	muls	r1, r5
    c012:	1861      	adds	r1, r4, r1

	*word = &bitarray[bn / 32];
    c014:	201f      	movs	r0, #31
    c016:	17d4      	asrs	r4, r2, #31
    c018:	4004      	ands	r4, r0
    c01a:	18a4      	adds	r4, r4, r2
    c01c:	1164      	asrs	r4, r4, #5
    c01e:	00a4      	lsls	r4, r4, #2
    c020:	190c      	adds	r4, r1, r4

	return bn & 0x1f;
    c022:	4010      	ands	r0, r2
	*word = &bitarray[bn / 32];
    c024:	601c      	str	r4, [r3, #0]
}
    c026:	bd70      	pop	{r4, r5, r6, pc}
		&p->levels[level].bits : p->levels[level].bits_p;
    c028:	434d      	muls	r5, r1
    c02a:	5961      	ldr	r1, [r4, r5]
    c02c:	e7f2      	b.n	c014 <get_bit_ptr+0x10>

0000c02e <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    c02e:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    c030:	ab01      	add	r3, sp, #4
    c032:	f7ff ffe7 	bl	c004 <get_bit_ptr>

	*word |= (1<<bit);
    c036:	2301      	movs	r3, #1
    c038:	4083      	lsls	r3, r0
    c03a:	9a01      	ldr	r2, [sp, #4]
    c03c:	6811      	ldr	r1, [r2, #0]
    c03e:	430b      	orrs	r3, r1
    c040:	6013      	str	r3, [r2, #0]
}
    c042:	bd07      	pop	{r0, r1, r2, pc}

0000c044 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    c044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    c046:	4c26      	ldr	r4, [pc, #152]	; (c0e0 <init_static_pools+0x9c>)
    c048:	4b26      	ldr	r3, [pc, #152]	; (c0e4 <init_static_pools+0xa0>)
    c04a:	429c      	cmp	r4, r3
    c04c:	d301      	bcc.n	c052 <init_static_pools+0xe>
		init_mem_pool(p);
	}

	return 0;
}
    c04e:	2000      	movs	r0, #0
    c050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    c052:	6865      	ldr	r5, [r4, #4]
    c054:	8923      	ldrh	r3, [r4, #8]
	for (i = 0; i < p->n_levels; i++) {
    c056:	2600      	movs	r6, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    c058:	436b      	muls	r3, r5
    c05a:	9301      	str	r3, [sp, #4]
	u32_t *bits = p->buf + buflen;
    c05c:	9a01      	ldr	r2, [sp, #4]
    c05e:	6823      	ldr	r3, [r4, #0]
    c060:	189f      	adds	r7, r3, r2
    c062:	0023      	movs	r3, r4
    c064:	3310      	adds	r3, #16
	list->head = (sys_dnode_t *)list;
    c066:	6123      	str	r3, [r4, #16]
	list->tail = (sys_dnode_t *)list;
    c068:	6163      	str	r3, [r4, #20]
	for (i = 0; i < p->n_levels; i++) {
    c06a:	7aa3      	ldrb	r3, [r4, #10]
    c06c:	429e      	cmp	r6, r3
    c06e:	db05      	blt.n	c07c <init_static_pools+0x38>
    c070:	2500      	movs	r5, #0
	for (i = 0; i < p->n_max; i++) {
    c072:	8923      	ldrh	r3, [r4, #8]
    c074:	429d      	cmp	r5, r3
    c076:	db20      	blt.n	c0ba <init_static_pools+0x76>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    c078:	3418      	adds	r4, #24
    c07a:	e7e5      	b.n	c048 <init_static_pools+0x4>
		int nblocks = buflen / sz;
    c07c:	0029      	movs	r1, r5
    c07e:	9801      	ldr	r0, [sp, #4]
    c080:	f7f4 f8a2 	bl	1c8 <__aeabi_uidiv>
		sys_dlist_init(&p->levels[i].free_list);
    c084:	230c      	movs	r3, #12
    c086:	4373      	muls	r3, r6
    c088:	68e2      	ldr	r2, [r4, #12]
    c08a:	18d3      	adds	r3, r2, r3
    c08c:	1d1a      	adds	r2, r3, #4
	list->head = (sys_dnode_t *)list;
    c08e:	605a      	str	r2, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    c090:	609a      	str	r2, [r3, #8]
		if (nblocks < 32) {
    c092:	281f      	cmp	r0, #31
    c094:	dc06      	bgt.n	c0a4 <init_static_pools+0x60>
			p->max_inline_level = i;
    c096:	72e6      	strb	r6, [r4, #11]
		sz = _ALIGN4(sz / 4);
    c098:	2303      	movs	r3, #3
    c09a:	08ad      	lsrs	r5, r5, #2
    c09c:	3503      	adds	r5, #3
    c09e:	439d      	bics	r5, r3
	for (i = 0; i < p->n_levels; i++) {
    c0a0:	3601      	adds	r6, #1
    c0a2:	e7e2      	b.n	c06a <init_static_pools+0x26>
			p->levels[i].bits_p = bits;
    c0a4:	601f      	str	r7, [r3, #0]
			bits += (nblocks + 31)/32;
    c0a6:	0003      	movs	r3, r0
    c0a8:	221f      	movs	r2, #31
    c0aa:	331f      	adds	r3, #31
    c0ac:	17d8      	asrs	r0, r3, #31
    c0ae:	4010      	ands	r0, r2
    c0b0:	18c0      	adds	r0, r0, r3
    c0b2:	1140      	asrs	r0, r0, #5
    c0b4:	0080      	lsls	r0, r0, #2
    c0b6:	183f      	adds	r7, r7, r0
    c0b8:	e7ee      	b.n	c098 <init_static_pools+0x54>
	return p->buf + lsz * block;
    c0ba:	6863      	ldr	r3, [r4, #4]
    c0bc:	6822      	ldr	r2, [r4, #0]
    c0be:	436b      	muls	r3, r5
    c0c0:	18d3      	adds	r3, r2, r3
		sys_dlist_append(&p->levels[0].free_list, block);
    c0c2:	68e2      	ldr	r2, [r4, #12]
		set_free_bit(p, 0, i);
    c0c4:	0020      	movs	r0, r4
		sys_dlist_append(&p->levels[0].free_list, block);
    c0c6:	1d11      	adds	r1, r2, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    c0c8:	6019      	str	r1, [r3, #0]
	node->prev = list->tail;
    c0ca:	6891      	ldr	r1, [r2, #8]
    c0cc:	6059      	str	r1, [r3, #4]

	list->tail->next = node;
    c0ce:	6891      	ldr	r1, [r2, #8]
    c0d0:	600b      	str	r3, [r1, #0]
	list->tail = node;
    c0d2:	6093      	str	r3, [r2, #8]
		set_free_bit(p, 0, i);
    c0d4:	2100      	movs	r1, #0
    c0d6:	002a      	movs	r2, r5
    c0d8:	f7ff ffa9 	bl	c02e <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    c0dc:	3501      	adds	r5, #1
    c0de:	e7c8      	b.n	c072 <init_static_pools+0x2e>
    c0e0:	20002578 	.word	0x20002578
    c0e4:	20002578 	.word	0x20002578

0000c0e8 <adjust_owner_prio.isra.7>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    c0e8:	230a      	movs	r3, #10
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    c0ea:	b570      	push	{r4, r5, r6, lr}
	if (mutex->owner->base.prio != new_prio) {
    c0ec:	56c3      	ldrsb	r3, [r0, r3]
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    c0ee:	0004      	movs	r4, r0
    c0f0:	000d      	movs	r5, r1
	if (mutex->owner->base.prio != new_prio) {
    c0f2:	428b      	cmp	r3, r1
    c0f4:	d00b      	beq.n	c10e <adjust_owner_prio.isra.7+0x26>
	return !(_is_thread_prevented_from_running(thread) ||
    c0f6:	7a43      	ldrb	r3, [r0, #9]
    c0f8:	06db      	lsls	r3, r3, #27
    c0fa:	d109      	bne.n	c110 <adjust_owner_prio.isra.7+0x28>
    c0fc:	6a03      	ldr	r3, [r0, #32]
    c0fe:	3301      	adds	r3, #1
    c100:	d106      	bne.n	c110 <adjust_owner_prio.isra.7+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    c102:	f000 fa03 	bl	c50c <_remove_thread_from_ready_q>
		thread->base.prio = prio;
    c106:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
    c108:	0020      	movs	r0, r4
    c10a:	f000 f977 	bl	c3fc <_add_thread_to_ready_q>
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    c10e:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		thread->base.prio = prio;
    c110:	72a5      	strb	r5, [r4, #10]
    c112:	e7fc      	b.n	c10e <adjust_owner_prio.isra.7+0x26>

0000c114 <_impl_k_mutex_lock>:

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    c114:	b570      	push	{r4, r5, r6, lr}
	--_current->base.sched_locked;
    c116:	4b2f      	ldr	r3, [pc, #188]	; (c1d4 <_impl_k_mutex_lock+0xc0>)
    c118:	000d      	movs	r5, r1
    c11a:	6899      	ldr	r1, [r3, #8]
    c11c:	0004      	movs	r4, r0
    c11e:	7aca      	ldrb	r2, [r1, #11]
    c120:	3a01      	subs	r2, #1
    c122:	72ca      	strb	r2, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    c124:	68c2      	ldr	r2, [r0, #12]
    c126:	2a00      	cmp	r2, #0
    c128:	d00a      	beq.n	c140 <_impl_k_mutex_lock+0x2c>
    c12a:	6880      	ldr	r0, [r0, #8]
    c12c:	6899      	ldr	r1, [r3, #8]
    c12e:	4288      	cmp	r0, r1
    c130:	d012      	beq.n	c158 <_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    c132:	2d00      	cmp	r5, #0
    c134:	d112      	bne.n	c15c <_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    c136:	f000 fa83 	bl	c640 <k_sched_unlock>
		return -EBUSY;
    c13a:	2010      	movs	r0, #16
	adjust_owner_prio(mutex, new_prio);
	irq_unlock(key);

	k_sched_unlock();

	return -EAGAIN;
    c13c:	4240      	negs	r0, r0
    c13e:	e00a      	b.n	c156 <_impl_k_mutex_lock+0x42>
					_current->base.prio :
    c140:	6899      	ldr	r1, [r3, #8]
    c142:	7a89      	ldrb	r1, [r1, #10]
    c144:	b249      	sxtb	r1, r1
		mutex->owner = _current;
    c146:	689b      	ldr	r3, [r3, #8]
		mutex->lock_count++;
    c148:	3201      	adds	r2, #1
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    c14a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    c14c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    c14e:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    c150:	f000 fa76 	bl	c640 <k_sched_unlock>
		return 0;
    c154:	2000      	movs	r0, #0
}
    c156:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    c158:	6921      	ldr	r1, [r4, #16]
    c15a:	e7f4      	b.n	c146 <_impl_k_mutex_lock+0x32>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    c15c:	230a      	movs	r3, #10
    c15e:	7a89      	ldrb	r1, [r1, #10]
    c160:	56c3      	ldrsb	r3, [r0, r3]
    c162:	b249      	sxtb	r1, r1
    c164:	4299      	cmp	r1, r3
    c166:	dd00      	ble.n	c16a <_impl_k_mutex_lock+0x56>
    c168:	0019      	movs	r1, r3
    c16a:	43cb      	mvns	r3, r1
    c16c:	17db      	asrs	r3, r3, #31
    c16e:	4019      	ands	r1, r3
    c170:	f3ef 8610 	mrs	r6, PRIMASK
    c174:	b672      	cpsid	i
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    c176:	230a      	movs	r3, #10
    c178:	68a0      	ldr	r0, [r4, #8]
    c17a:	56c3      	ldrsb	r3, [r0, r3]
    c17c:	4299      	cmp	r1, r3
    c17e:	da01      	bge.n	c184 <_impl_k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
    c180:	f7ff ffb2 	bl	c0e8 <adjust_owner_prio.isra.7>
	_pend_current_thread(&mutex->wait_q, timeout);
    c184:	0020      	movs	r0, r4
    c186:	0029      	movs	r1, r5
    c188:	f000 fa1e 	bl	c5c8 <_pend_current_thread>
	_update_time_slice_before_swap();
    c18c:	f000 fafa 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    c190:	0030      	movs	r0, r6
    c192:	f7f6 fc07 	bl	29a4 <__swap>
	if (got_mutex == 0) {
    c196:	2800      	cmp	r0, #0
    c198:	d0da      	beq.n	c150 <_impl_k_mutex_lock+0x3c>
	return list->head == list;
    c19a:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c19c:	429c      	cmp	r4, r3
    c19e:	d100      	bne.n	c1a2 <_impl_k_mutex_lock+0x8e>
    c1a0:	2300      	movs	r3, #0
	new_prio = mutex->owner_orig_prio;
    c1a2:	6921      	ldr	r1, [r4, #16]
						     new_prio) : new_prio;
    c1a4:	2b00      	cmp	r3, #0
    c1a6:	d007      	beq.n	c1b8 <_impl_k_mutex_lock+0xa4>
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    c1a8:	7a9b      	ldrb	r3, [r3, #10]
    c1aa:	b25b      	sxtb	r3, r3
    c1ac:	4299      	cmp	r1, r3
    c1ae:	dd00      	ble.n	c1b2 <_impl_k_mutex_lock+0x9e>
    c1b0:	0019      	movs	r1, r3
    c1b2:	43cb      	mvns	r3, r1
    c1b4:	17db      	asrs	r3, r3, #31
    c1b6:	4019      	ands	r1, r3
    c1b8:	f3ef 8510 	mrs	r5, PRIMASK
    c1bc:	b672      	cpsid	i
	adjust_owner_prio(mutex, new_prio);
    c1be:	68a0      	ldr	r0, [r4, #8]
    c1c0:	f7ff ff92 	bl	c0e8 <adjust_owner_prio.isra.7>
	if (key) {
    c1c4:	2d00      	cmp	r5, #0
    c1c6:	d100      	bne.n	c1ca <_impl_k_mutex_lock+0xb6>
	__asm__ volatile("cpsie i" : : : "memory");
    c1c8:	b662      	cpsie	i
	k_sched_unlock();
    c1ca:	f000 fa39 	bl	c640 <k_sched_unlock>
	return -EAGAIN;
    c1ce:	200b      	movs	r0, #11
    c1d0:	e7b4      	b.n	c13c <_impl_k_mutex_lock+0x28>
    c1d2:	46c0      	nop			; (mov r8, r8)
    c1d4:	20000be8 	.word	0x20000be8

0000c1d8 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1da:	4f35      	ldr	r7, [pc, #212]	; (c2b0 <_impl_k_mutex_unlock+0xd8>)
    c1dc:	0005      	movs	r5, r0
    c1de:	68ba      	ldr	r2, [r7, #8]
    c1e0:	7ad3      	ldrb	r3, [r2, #11]
    c1e2:	3b01      	subs	r3, #1
    c1e4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    c1e6:	68c3      	ldr	r3, [r0, #12]
    c1e8:	1e5c      	subs	r4, r3, #1
    c1ea:	60c4      	str	r4, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    c1ec:	2c00      	cmp	r4, #0
    c1ee:	d002      	beq.n	c1f6 <_impl_k_mutex_unlock+0x1e>
		k_sched_unlock();
    c1f0:	f000 fa26 	bl	c640 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    c1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    c1f6:	f3ef 8610 	mrs	r6, PRIMASK
    c1fa:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    c1fc:	6901      	ldr	r1, [r0, #16]
    c1fe:	6880      	ldr	r0, [r0, #8]
    c200:	f7ff ff72 	bl	c0e8 <adjust_owner_prio.isra.7>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c204:	4b2b      	ldr	r3, [pc, #172]	; (c2b4 <_impl_k_mutex_unlock+0xdc>)
    c206:	681a      	ldr	r2, [r3, #0]
    c208:	682b      	ldr	r3, [r5, #0]
    c20a:	2a00      	cmp	r2, #0
    c20c:	d012      	beq.n	c234 <_impl_k_mutex_unlock+0x5c>
    c20e:	429d      	cmp	r5, r3
    c210:	d100      	bne.n	c214 <_impl_k_mutex_unlock+0x3c>
    c212:	0023      	movs	r3, r4
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    c214:	2b00      	cmp	r3, #0
    c216:	d105      	bne.n	c224 <_impl_k_mutex_unlock+0x4c>
	if (key) {
    c218:	2e00      	cmp	r6, #0
    c21a:	d100      	bne.n	c21e <_impl_k_mutex_unlock+0x46>
	__asm__ volatile("cpsie i" : : : "memory");
    c21c:	b662      	cpsie	i
		mutex->owner = NULL;
    c21e:	2300      	movs	r3, #0
    c220:	60ab      	str	r3, [r5, #8]
    c222:	e7e5      	b.n	c1f0 <_impl_k_mutex_unlock+0x18>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    c224:	6a1a      	ldr	r2, [r3, #32]
    c226:	3202      	adds	r2, #2
    c228:	d108      	bne.n	c23c <_impl_k_mutex_unlock+0x64>
	return (node == list->tail) ? NULL : node->next;
    c22a:	686a      	ldr	r2, [r5, #4]
    c22c:	4293      	cmp	r3, r2
    c22e:	d0f3      	beq.n	c218 <_impl_k_mutex_unlock+0x40>
    c230:	681b      	ldr	r3, [r3, #0]
    c232:	e7ef      	b.n	c214 <_impl_k_mutex_unlock+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c234:	429d      	cmp	r5, r3
    c236:	d0ef      	beq.n	c218 <_impl_k_mutex_unlock+0x40>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    c238:	2b00      	cmp	r3, #0
    c23a:	d0ed      	beq.n	c218 <_impl_k_mutex_unlock+0x40>
			if (_is_thread_timeout_expired(thread)) {
    c23c:	001c      	movs	r4, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    c23e:	685b      	ldr	r3, [r3, #4]
    c240:	6822      	ldr	r2, [r4, #0]
	return _abort_timeout(&thread->base.timeout);
    c242:	0021      	movs	r1, r4
    c244:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c246:	6822      	ldr	r2, [r4, #0]
    c248:	3110      	adds	r1, #16
    c24a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c24c:	2202      	movs	r2, #2
    c24e:	7a63      	ldrb	r3, [r4, #9]
    c250:	4393      	bics	r3, r2
    c252:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c254:	6a23      	ldr	r3, [r4, #32]
    c256:	1c5a      	adds	r2, r3, #1
    c258:	d00e      	beq.n	c278 <_impl_k_mutex_unlock+0xa0>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c25a:	697a      	ldr	r2, [r7, #20]
    c25c:	4291      	cmp	r1, r2
    c25e:	d003      	beq.n	c268 <_impl_k_mutex_unlock+0x90>
	return (node == list->tail) ? NULL : node->next;
    c260:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c262:	6911      	ldr	r1, [r2, #16]
    c264:	18cb      	adds	r3, r1, r3
    c266:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    c268:	6963      	ldr	r3, [r4, #20]
    c26a:	6922      	ldr	r2, [r4, #16]
    c26c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c26e:	6922      	ldr	r2, [r4, #16]
    c270:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c272:	2301      	movs	r3, #1
    c274:	425b      	negs	r3, r3
    c276:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c278:	7a63      	ldrb	r3, [r4, #9]
    c27a:	2204      	movs	r2, #4
    c27c:	0019      	movs	r1, r3
    c27e:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    c280:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c282:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c284:	4213      	tst	r3, r2
    c286:	d102      	bne.n	c28e <_impl_k_mutex_unlock+0xb6>
    c288:	6a23      	ldr	r3, [r4, #32]
    c28a:	3301      	adds	r3, #1
    c28c:	d00c      	beq.n	c2a8 <_impl_k_mutex_unlock+0xd0>
	if (key) {
    c28e:	2e00      	cmp	r6, #0
    c290:	d100      	bne.n	c294 <_impl_k_mutex_unlock+0xbc>
	__asm__ volatile("cpsie i" : : : "memory");
    c292:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c294:	2300      	movs	r3, #0
    c296:	65e3      	str	r3, [r4, #92]	; 0x5c
		mutex->lock_count++;
    c298:	68eb      	ldr	r3, [r5, #12]
		mutex->owner = new_owner;
    c29a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    c29c:	3301      	adds	r3, #1
    c29e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    c2a0:	230a      	movs	r3, #10
    c2a2:	56e3      	ldrsb	r3, [r4, r3]
    c2a4:	612b      	str	r3, [r5, #16]
    c2a6:	e7a3      	b.n	c1f0 <_impl_k_mutex_unlock+0x18>
		_add_thread_to_ready_q(thread);
    c2a8:	0020      	movs	r0, r4
    c2aa:	f000 f8a7 	bl	c3fc <_add_thread_to_ready_q>
    c2ae:	e7ee      	b.n	c28e <_impl_k_mutex_unlock+0xb6>
    c2b0:	20000be8 	.word	0x20000be8
    c2b4:	20000de0 	.word	0x20000de0

0000c2b8 <k_queue_init>:
	list->head = NULL;
    c2b8:	2300      	movs	r3, #0
    c2ba:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    c2bc:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    c2be:	0003      	movs	r3, r0
    c2c0:	3308      	adds	r3, #8
	list->head = (sys_dnode_t *)list;
    c2c2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    c2c4:	60c3      	str	r3, [r0, #12]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    c2c6:	4770      	bx	lr

0000c2c8 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    c2c8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    c2ca:	f3ef 8410 	mrs	r4, PRIMASK
    c2ce:	b672      	cpsid	i
	if (!prev) {
    c2d0:	2900      	cmp	r1, #0
    c2d2:	d107      	bne.n	c2e4 <k_queue_insert+0x1c>
	node->next = list->head;
    c2d4:	6803      	ldr	r3, [r0, #0]
    c2d6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    c2d8:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    c2da:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d10a      	bne.n	c2f6 <k_queue_insert+0x2e>
		list->tail = node;
    c2e0:	6042      	str	r2, [r0, #4]
    c2e2:	e008      	b.n	c2f6 <k_queue_insert+0x2e>
	} else if (!prev->next) {
    c2e4:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    c2e6:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d112      	bne.n	c312 <k_queue_insert+0x4a>
	if (!list->tail) {
    c2ec:	6843      	ldr	r3, [r0, #4]
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d10d      	bne.n	c30e <k_queue_insert+0x46>
		list->tail = node;
    c2f2:	6042      	str	r2, [r0, #4]
		list->head = node;
    c2f4:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    c2f6:	3008      	adds	r0, #8
    c2f8:	2104      	movs	r1, #4
    c2fa:	f000 ffed 	bl	d2d8 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    c2fe:	2800      	cmp	r0, #0
    c300:	d009      	beq.n	c316 <k_queue_insert+0x4e>
	_update_time_slice_before_swap();
    c302:	f000 fa3f 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    c306:	0020      	movs	r0, r4
    c308:	f7f6 fb4c 	bl	29a4 <__swap>
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    c30c:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    c30e:	601a      	str	r2, [r3, #0]
    c310:	e7e6      	b.n	c2e0 <k_queue_insert+0x18>
		prev->next = node;
    c312:	600a      	str	r2, [r1, #0]
    c314:	e7ef      	b.n	c2f6 <k_queue_insert+0x2e>
	if (key) {
    c316:	2c00      	cmp	r4, #0
    c318:	d1f8      	bne.n	c30c <k_queue_insert+0x44>
	__asm__ volatile("cpsie i" : : : "memory");
    c31a:	b662      	cpsie	i
    c31c:	e7f6      	b.n	c30c <k_queue_insert+0x44>

0000c31e <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
    c31e:	b510      	push	{r4, lr}
    c320:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
    c322:	6841      	ldr	r1, [r0, #4]
    c324:	f7ff ffd0 	bl	c2c8 <k_queue_insert>
}
    c328:	bd10      	pop	{r4, pc}

0000c32a <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
    c32a:	b510      	push	{r4, lr}
    c32c:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
    c32e:	2100      	movs	r1, #0
    c330:	f7ff ffca 	bl	c2c8 <k_queue_insert>
}
    c334:	bd10      	pop	{r4, pc}

0000c336 <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    c336:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    c338:	f3ef 8410 	mrs	r4, PRIMASK
    c33c:	b672      	cpsid	i
	if (!list->tail) {
    c33e:	6843      	ldr	r3, [r0, #4]
    c340:	2b00      	cmp	r3, #0
    c342:	d10d      	bne.n	c360 <k_queue_append_list+0x2a>
		list->head = (sys_snode_t *)head;
    c344:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    c346:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    c348:	2104      	movs	r1, #4
    c34a:	3008      	adds	r0, #8
    c34c:	f000 ffc4 	bl	d2d8 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    c350:	2800      	cmp	r0, #0
    c352:	d007      	beq.n	c364 <k_queue_append_list+0x2e>
	_update_time_slice_before_swap();
    c354:	f000 fa16 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    c358:	0020      	movs	r0, r4
    c35a:	f7f6 fb23 	bl	29a4 <__swap>
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    c35e:	bd10      	pop	{r4, pc}
		list->tail->next = (sys_snode_t *)head;
    c360:	6019      	str	r1, [r3, #0]
    c362:	e7f0      	b.n	c346 <k_queue_append_list+0x10>
	if (key) {
    c364:	2c00      	cmp	r4, #0
    c366:	d1fa      	bne.n	c35e <k_queue_append_list+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    c368:	b662      	cpsie	i
    c36a:	e7f8      	b.n	c35e <k_queue_append_list+0x28>

0000c36c <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    c36c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c36e:	0004      	movs	r4, r0
    c370:	b087      	sub	sp, #28
    c372:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    c374:	f3ef 8310 	mrs	r3, PRIMASK
    c378:	b672      	cpsid	i
    c37a:	6800      	ldr	r0, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    c37c:	2800      	cmp	r0, #0
    c37e:	d00a      	beq.n	c396 <k_queue_get+0x2a>
	list->head = node->next;
    c380:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    c382:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    c384:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    c386:	4288      	cmp	r0, r1
    c388:	d100      	bne.n	c38c <k_queue_get+0x20>
		list->tail = list->head;
    c38a:	6062      	str	r2, [r4, #4]
	if (key) {
    c38c:	2b00      	cmp	r3, #0
    c38e:	d100      	bne.n	c392 <k_queue_get+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    c390:	b662      	cpsie	i
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    c392:	b007      	add	sp, #28
    c394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (timeout == K_NO_WAIT) {
    c396:	2900      	cmp	r1, #0
    c398:	d101      	bne.n	c39e <k_queue_get+0x32>
		return NULL;
    c39a:	0008      	movs	r0, r1
    c39c:	e7f6      	b.n	c38c <k_queue_get+0x20>
	if (key) {
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d100      	bne.n	c3a4 <k_queue_get+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    c3a2:	b662      	cpsie	i
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    c3a4:	ae01      	add	r6, sp, #4
    c3a6:	0023      	movs	r3, r4
    c3a8:	2200      	movs	r2, #0
    c3aa:	2104      	movs	r1, #4
    c3ac:	0030      	movs	r0, r6
    c3ae:	f000 fee5 	bl	d17c <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    c3b2:	270f      	movs	r7, #15
    c3b4:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    c3b6:	002a      	movs	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    c3b8:	403b      	ands	r3, r7
		err = k_poll(&event, 1, timeout);
    c3ba:	2101      	movs	r1, #1
    c3bc:	0030      	movs	r0, r6
		event.state = K_POLL_STATE_NOT_READY;
    c3be:	7373      	strb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    c3c0:	f000 fef4 	bl	d1ac <k_poll>
		if (err) {
    c3c4:	2800      	cmp	r0, #0
    c3c6:	d001      	beq.n	c3cc <k_queue_get+0x60>
			return NULL;
    c3c8:	2000      	movs	r0, #0
    c3ca:	e7e2      	b.n	c392 <k_queue_get+0x26>
	__asm__ volatile("mrs %0, PRIMASK;"
    c3cc:	f3ef 8310 	mrs	r3, PRIMASK
    c3d0:	b672      	cpsid	i
    c3d2:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    c3d4:	2800      	cmp	r0, #0
    c3d6:	d008      	beq.n	c3ea <k_queue_get+0x7e>
	list->head = node->next;
    c3d8:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    c3da:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    c3dc:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    c3de:	4288      	cmp	r0, r1
    c3e0:	d100      	bne.n	c3e4 <k_queue_get+0x78>
		list->tail = list->head;
    c3e2:	6062      	str	r2, [r4, #4]
	if (key) {
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d002      	beq.n	c3ee <k_queue_get+0x82>
    c3e8:	e7d3      	b.n	c392 <k_queue_get+0x26>
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d102      	bne.n	c3f4 <k_queue_get+0x88>
	__asm__ volatile("cpsie i" : : : "memory");
    c3ee:	b662      	cpsie	i
	} while (!val && timeout == K_FOREVER);
    c3f0:	2800      	cmp	r0, #0
    c3f2:	d1ce      	bne.n	c392 <k_queue_get+0x26>
    c3f4:	1c6b      	adds	r3, r5, #1
    c3f6:	d0dd      	beq.n	c3b4 <k_queue_get+0x48>
    c3f8:	e7e6      	b.n	c3c8 <k_queue_get+0x5c>
	...

0000c3fc <_add_thread_to_ready_q>:
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c3fc:	230a      	movs	r3, #10
{
    c3fe:	b530      	push	{r4, r5, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c400:	56c3      	ldrsb	r3, [r0, r3]
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    c402:	251f      	movs	r5, #31
	return prio + _NUM_COOP_PRIO;
    c404:	001c      	movs	r4, r3
    c406:	3410      	adds	r4, #16
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    c408:	4025      	ands	r5, r4
	return (prio + _NUM_COOP_PRIO) >> 5;
    c40a:	1162      	asrs	r2, r4, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    c40c:	2401      	movs	r4, #1
    c40e:	40ac      	lsls	r4, r5
	*bmap |= _get_ready_q_prio_bit(prio);
    c410:	490d      	ldr	r1, [pc, #52]	; (c448 <_add_thread_to_ready_q+0x4c>)
    c412:	3206      	adds	r2, #6
    c414:	0092      	lsls	r2, r2, #2
    c416:	188a      	adds	r2, r1, r2
    c418:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c41a:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    c41c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    c41e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    c420:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c422:	1d1a      	adds	r2, r3, #4
    c424:	188a      	adds	r2, r1, r2
	node->next = list;
    c426:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    c428:	18cb      	adds	r3, r1, r3
    c42a:	689a      	ldr	r2, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    c42c:	240a      	movs	r4, #10
    c42e:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    c430:	689a      	ldr	r2, [r3, #8]
    c432:	6010      	str	r0, [r2, #0]
    c434:	220a      	movs	r2, #10
	list->tail = node;
    c436:	6098      	str	r0, [r3, #8]
    c438:	69cb      	ldr	r3, [r1, #28]
    c43a:	5704      	ldrsb	r4, [r0, r4]
    c43c:	569a      	ldrsb	r2, [r3, r2]
    c43e:	4294      	cmp	r4, r2
    c440:	db00      	blt.n	c444 <_add_thread_to_ready_q+0x48>
    c442:	0018      	movs	r0, r3
    c444:	61c8      	str	r0, [r1, #28]
	_ready_q.prio_bmap[0] = 1;
# ifndef CONFIG_SMP
	_ready_q.cache = thread;
# endif
#endif
}
    c446:	bd30      	pop	{r4, r5, pc}
    c448:	20000be8 	.word	0x20000be8

0000c44c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c44c:	7a43      	ldrb	r3, [r0, #9]
    c44e:	2204      	movs	r2, #4
    c450:	0019      	movs	r1, r3
    c452:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    c454:	221b      	movs	r2, #27
{
    c456:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c458:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c45a:	4213      	tst	r3, r2
    c45c:	d104      	bne.n	c468 <_ready_thread+0x1c>
    c45e:	6a03      	ldr	r3, [r0, #32]
    c460:	3301      	adds	r3, #1
    c462:	d101      	bne.n	c468 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    c464:	f7ff ffca 	bl	c3fc <_add_thread_to_ready_q>
}
    c468:	bd10      	pop	{r4, pc}
	...

0000c46c <_add_timeout>:
{
    c46c:	b510      	push	{r4, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c46e:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    c470:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c472:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    c474:	2b00      	cmp	r3, #0
    c476:	d123      	bne.n	c4c0 <_add_timeout+0x54>
	__asm__ volatile("mrs %0, PRIMASK;"
    c478:	f3ef 8410 	mrs	r4, PRIMASK
    c47c:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    c47e:	2201      	movs	r2, #1
    c480:	4252      	negs	r2, r2
    c482:	610a      	str	r2, [r1, #16]
	if (thread) {
    c484:	2800      	cmp	r0, #0
    c486:	d012      	beq.n	c4ae <_add_timeout+0x42>
	if (timeout_obj->wait_q) {
    c488:	68ca      	ldr	r2, [r1, #12]
    c48a:	2a00      	cmp	r2, #0
    c48c:	d009      	beq.n	c4a2 <_add_timeout+0x36>
	node->prev->next = node->next;
    c48e:	6842      	ldr	r2, [r0, #4]
    c490:	6801      	ldr	r1, [r0, #0]
    c492:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    c494:	6801      	ldr	r1, [r0, #0]
    c496:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c498:	2102      	movs	r1, #2
    c49a:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    c49c:	61c3      	str	r3, [r0, #28]
    c49e:	438a      	bics	r2, r1
    c4a0:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    c4a2:	f7ff ffd3 	bl	c44c <_ready_thread>
	if (key) {
    c4a6:	2c00      	cmp	r4, #0
    c4a8:	d100      	bne.n	c4ac <_add_timeout+0x40>
	__asm__ volatile("cpsie i" : : : "memory");
    c4aa:	b662      	cpsie	i
}
    c4ac:	bd10      	pop	{r4, pc}
	if (key) {
    c4ae:	2c00      	cmp	r4, #0
    c4b0:	d100      	bne.n	c4b4 <_add_timeout+0x48>
	__asm__ volatile("cpsie i" : : : "memory");
    c4b2:	b662      	cpsie	i
		if (timeout->func) {
    c4b4:	694b      	ldr	r3, [r1, #20]
    c4b6:	2b00      	cmp	r3, #0
    c4b8:	d0f8      	beq.n	c4ac <_add_timeout+0x40>
			timeout->func(timeout);
    c4ba:	0008      	movs	r0, r1
    c4bc:	4798      	blx	r3
    c4be:	e7f5      	b.n	c4ac <_add_timeout+0x40>
	return list->head == list;
    c4c0:	4a11      	ldr	r2, [pc, #68]	; (c508 <_add_timeout+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c4c2:	0010      	movs	r0, r2
	return list->head == list;
    c4c4:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c4c6:	3010      	adds	r0, #16
    c4c8:	4283      	cmp	r3, r0
    c4ca:	d10e      	bne.n	c4ea <_add_timeout+0x7e>
	node->next = list;
    c4cc:	0013      	movs	r3, r2
    c4ce:	3310      	adds	r3, #16
    c4d0:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
    c4d2:	6953      	ldr	r3, [r2, #20]
    c4d4:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    c4d6:	6953      	ldr	r3, [r2, #20]
    c4d8:	6019      	str	r1, [r3, #0]
	list->tail = node;
    c4da:	6151      	str	r1, [r2, #20]
    c4dc:	e7e6      	b.n	c4ac <_add_timeout+0x40>
		*delta -= in_q->delta_ticks_from_prev;
    c4de:	1b00      	subs	r0, r0, r4
    c4e0:	6108      	str	r0, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    c4e2:	6950      	ldr	r0, [r2, #20]
    c4e4:	4283      	cmp	r3, r0
    c4e6:	d0f1      	beq.n	c4cc <_add_timeout+0x60>
    c4e8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c4ea:	2b00      	cmp	r3, #0
    c4ec:	d0ee      	beq.n	c4cc <_add_timeout+0x60>
		if (*delta <= in_q->delta_ticks_from_prev) {
    c4ee:	6908      	ldr	r0, [r1, #16]
    c4f0:	691c      	ldr	r4, [r3, #16]
    c4f2:	42a0      	cmp	r0, r4
    c4f4:	dcf3      	bgt.n	c4de <_add_timeout+0x72>
		node->prev = insert_point->prev;
    c4f6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c4f8:	1a20      	subs	r0, r4, r0
    c4fa:	6118      	str	r0, [r3, #16]
    c4fc:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    c4fe:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    c500:	685a      	ldr	r2, [r3, #4]
    c502:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    c504:	6059      	str	r1, [r3, #4]
    c506:	e7d1      	b.n	c4ac <_add_timeout+0x40>
    c508:	20000be8 	.word	0x20000be8

0000c50c <_remove_thread_from_ready_q>:
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c50c:	230a      	movs	r3, #10
{
    c50e:	b510      	push	{r4, lr}
	node->prev->next = node->next;
    c510:	6842      	ldr	r2, [r0, #4]
    c512:	6801      	ldr	r1, [r0, #0]
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c514:	56c3      	ldrsb	r3, [r0, r3]
    c516:	6011      	str	r1, [r2, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c518:	4c12      	ldr	r4, [pc, #72]	; (c564 <_remove_thread_from_ready_q+0x58>)
	node->next->prev = node->prev;
    c51a:	6801      	ldr	r1, [r0, #0]
    c51c:	3314      	adds	r3, #20
    c51e:	00db      	lsls	r3, r3, #3
    c520:	604a      	str	r2, [r1, #4]
    c522:	1d1a      	adds	r2, r3, #4
	return list->head == list;
    c524:	18e3      	adds	r3, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    c526:	685b      	ldr	r3, [r3, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c528:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_empty(q)) {
    c52a:	4293      	cmp	r3, r2
    c52c:	d10d      	bne.n	c54a <_remove_thread_from_ready_q+0x3e>
		_clear_ready_q_prio_bit(thread->base.prio);
    c52e:	220a      	movs	r2, #10
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    c530:	211f      	movs	r1, #31
    c532:	5682      	ldrsb	r2, [r0, r2]
	return (prio + _NUM_COOP_PRIO) >> 5;
    c534:	3210      	adds	r2, #16
    c536:	1153      	asrs	r3, r2, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    c538:	400a      	ands	r2, r1
    c53a:	391e      	subs	r1, #30
    c53c:	4091      	lsls	r1, r2
	*bmap &= ~_get_ready_q_prio_bit(prio);
    c53e:	3306      	adds	r3, #6
    c540:	009b      	lsls	r3, r3, #2
    c542:	18e3      	adds	r3, r4, r3
    c544:	689a      	ldr	r2, [r3, #8]
    c546:	438a      	bics	r2, r1
    c548:	609a      	str	r2, [r3, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    c54a:	69e3      	ldr	r3, [r4, #28]
    c54c:	4298      	cmp	r0, r3
    c54e:	d106      	bne.n	c55e <_remove_thread_from_ready_q+0x52>
	return __builtin_ffs(op);
    c550:	6a20      	ldr	r0, [r4, #32]
    c552:	f7f3 ff4b 	bl	3ec <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    c556:	3003      	adds	r0, #3
    c558:	00c0      	lsls	r0, r0, #3
    c55a:	1820      	adds	r0, r4, r0
    c55c:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    c55e:	61e3      	str	r3, [r4, #28]
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
# endif
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    c560:	bd10      	pop	{r4, pc}
    c562:	46c0      	nop			; (mov r8, r8)
    c564:	20000be8 	.word	0x20000be8

0000c568 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    c568:	b570      	push	{r4, r5, r6, lr}
    c56a:	680c      	ldr	r4, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c56c:	42a1      	cmp	r1, r4
    c56e:	d100      	bne.n	c572 <_pend_thread+0xa>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    c570:	2400      	movs	r4, #0
    c572:	2c00      	cmp	r4, #0
    c574:	d021      	beq.n	c5ba <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    c576:	250a      	movs	r5, #10
    c578:	230a      	movs	r3, #10
    c57a:	5745      	ldrsb	r5, [r0, r5]
    c57c:	56e3      	ldrsb	r3, [r4, r3]
    c57e:	429d      	cmp	r5, r3
    c580:	da15      	bge.n	c5ae <_pend_thread+0x46>
		node->prev = insert_point->prev;
    c582:	6863      	ldr	r3, [r4, #4]
		node->next = insert_point;
    c584:	6004      	str	r4, [r0, #0]
		node->prev = insert_point->prev;
    c586:	6043      	str	r3, [r0, #4]
		insert_point->prev->next = node;
    c588:	6863      	ldr	r3, [r4, #4]
    c58a:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    c58c:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    c58e:	2302      	movs	r3, #2
    c590:	7a44      	ldrb	r4, [r0, #9]
    c592:	4323      	orrs	r3, r4
    c594:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    c596:	1c53      	adds	r3, r2, #1
    c598:	d008      	beq.n	c5ac <_pend_thread+0x44>
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c59a:	0004      	movs	r4, r0
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c59c:	1cd3      	adds	r3, r2, #3
    c59e:	089b      	lsrs	r3, r3, #2
    c5a0:	3410      	adds	r4, #16
    c5a2:	000a      	movs	r2, r1
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
    c5a4:	3301      	adds	r3, #1
    c5a6:	0021      	movs	r1, r4
    c5a8:	f7ff ff60 	bl	c46c <_add_timeout>

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    c5ac:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    c5ae:	684b      	ldr	r3, [r1, #4]
    c5b0:	429c      	cmp	r4, r3
    c5b2:	d002      	beq.n	c5ba <_pend_thread+0x52>
    c5b4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    c5b6:	2c00      	cmp	r4, #0
    c5b8:	d1db      	bne.n	c572 <_pend_thread+0xa>
	node->next = list;
    c5ba:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    c5bc:	684b      	ldr	r3, [r1, #4]
    c5be:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    c5c0:	684b      	ldr	r3, [r1, #4]
    c5c2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    c5c4:	6048      	str	r0, [r1, #4]
    c5c6:	e7e2      	b.n	c58e <_pend_thread+0x26>

0000c5c8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    c5c8:	b570      	push	{r4, r5, r6, lr}
    c5ca:	000e      	movs	r6, r1
    c5cc:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
    c5ce:	4c05      	ldr	r4, [pc, #20]	; (c5e4 <_pend_current_thread+0x1c>)
    c5d0:	68a0      	ldr	r0, [r4, #8]
    c5d2:	f7ff ff9b 	bl	c50c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    c5d6:	0032      	movs	r2, r6
    c5d8:	0029      	movs	r1, r5
    c5da:	68a0      	ldr	r0, [r4, #8]
    c5dc:	f7ff ffc4 	bl	c568 <_pend_thread>
}
    c5e0:	bd70      	pop	{r4, r5, r6, pc}
    c5e2:	46c0      	nop			; (mov r8, r8)
    c5e4:	20000be8 	.word	0x20000be8

0000c5e8 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    c5e8:	b510      	push	{r4, lr}
	ready_range = _ready_q.prio_bmap[0];
    c5ea:	4c07      	ldr	r4, [pc, #28]	; (c608 <__must_switch_threads+0x20>)
    c5ec:	6a20      	ldr	r0, [r4, #32]
    c5ee:	f7f3 fefd 	bl	3ec <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    c5f2:	220a      	movs	r2, #10
    c5f4:	68a3      	ldr	r3, [r4, #8]
    c5f6:	569a      	ldrsb	r2, [r3, r2]
	return abs_prio - _NUM_COOP_PRIO;
    c5f8:	0003      	movs	r3, r0
    c5fa:	3b11      	subs	r3, #17
	return prio1 < prio2;
    c5fc:	2001      	movs	r0, #1
    c5fe:	429a      	cmp	r2, r3
    c600:	dc00      	bgt.n	c604 <__must_switch_threads+0x1c>
    c602:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    c604:	bd10      	pop	{r4, pc}
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	20000be8 	.word	0x20000be8

0000c60c <_reschedule_threads>:
{
    c60c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    c60e:	4b0a      	ldr	r3, [pc, #40]	; (c638 <_reschedule_threads+0x2c>)
    c610:	0004      	movs	r4, r0
    c612:	689b      	ldr	r3, [r3, #8]
    c614:	895b      	ldrh	r3, [r3, #10]
    c616:	2b7f      	cmp	r3, #127	; 0x7f
    c618:	d80a      	bhi.n	c630 <_reschedule_threads+0x24>
    c61a:	f7ff ffe5 	bl	c5e8 <__must_switch_threads>
    c61e:	2800      	cmp	r0, #0
    c620:	d006      	beq.n	c630 <_reschedule_threads+0x24>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    c622:	2200      	movs	r2, #0
    c624:	4b05      	ldr	r3, [pc, #20]	; (c63c <_reschedule_threads+0x30>)
    c626:	0020      	movs	r0, r4
    c628:	601a      	str	r2, [r3, #0]
    c62a:	f7f6 f9bb 	bl	29a4 <__swap>
    c62e:	e002      	b.n	c636 <_reschedule_threads+0x2a>
	if (key) {
    c630:	2c00      	cmp	r4, #0
    c632:	d100      	bne.n	c636 <_reschedule_threads+0x2a>
	__asm__ volatile("cpsie i" : : : "memory");
    c634:	b662      	cpsie	i
}
    c636:	bd10      	pop	{r4, pc}
    c638:	20000be8 	.word	0x20000be8
    c63c:	20000de4 	.word	0x20000de4

0000c640 <k_sched_unlock>:
{
    c640:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    c642:	f3ef 8010 	mrs	r0, PRIMASK
    c646:	b672      	cpsid	i
	++_current->base.sched_locked;
    c648:	4b03      	ldr	r3, [pc, #12]	; (c658 <k_sched_unlock+0x18>)
    c64a:	689a      	ldr	r2, [r3, #8]
    c64c:	7ad3      	ldrb	r3, [r2, #11]
    c64e:	3301      	adds	r3, #1
    c650:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    c652:	f7ff ffdb 	bl	c60c <_reschedule_threads>
}
    c656:	bd10      	pop	{r4, pc}
    c658:	20000be8 	.word	0x20000be8

0000c65c <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c65c:	230a      	movs	r3, #10
{
    c65e:	b570      	push	{r4, r5, r6, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c660:	56c3      	ldrsb	r3, [r0, r3]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c662:	4c10      	ldr	r4, [pc, #64]	; (c6a4 <_move_thread_to_end_of_prio_q+0x48>)
    c664:	3314      	adds	r3, #20
    c666:	00db      	lsls	r3, r3, #3
    c668:	1d1a      	adds	r2, r3, #4
    c66a:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    c66c:	6851      	ldr	r1, [r2, #4]
    c66e:	4288      	cmp	r0, r1
    c670:	d016      	beq.n	c6a0 <_move_thread_to_end_of_prio_q+0x44>
	node->prev->next = node->next;
    c672:	6805      	ldr	r5, [r0, #0]
    c674:	6841      	ldr	r1, [r0, #4]
	node->prev = list->tail;
    c676:	18e3      	adds	r3, r4, r3
	node->prev->next = node->next;
    c678:	600d      	str	r5, [r1, #0]
	node->next->prev = node->prev;
    c67a:	6805      	ldr	r5, [r0, #0]
    c67c:	6069      	str	r1, [r5, #4]
	node->next = list;
    c67e:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    c680:	689a      	ldr	r2, [r3, #8]
    c682:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    c684:	689a      	ldr	r2, [r3, #8]
    c686:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c688:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    c68a:	69e3      	ldr	r3, [r4, #28]
    c68c:	4298      	cmp	r0, r3
    c68e:	d106      	bne.n	c69e <_move_thread_to_end_of_prio_q+0x42>
	return __builtin_ffs(op);
    c690:	6a20      	ldr	r0, [r4, #32]
    c692:	f7f3 feab 	bl	3ec <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    c696:	3003      	adds	r0, #3
    c698:	00c0      	lsls	r0, r0, #3
    c69a:	1820      	adds	r0, r4, r0
    c69c:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    c69e:	61e3      	str	r3, [r4, #28]
}
    c6a0:	bd70      	pop	{r4, r5, r6, pc}
    c6a2:	46c0      	nop			; (mov r8, r8)
    c6a4:	20000be8 	.word	0x20000be8

0000c6a8 <_impl_k_yield>:
{
    c6a8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    c6aa:	f3ef 8510 	mrs	r5, PRIMASK
    c6ae:	b672      	cpsid	i
	_move_thread_to_end_of_prio_q(_current);
    c6b0:	4c09      	ldr	r4, [pc, #36]	; (c6d8 <_impl_k_yield+0x30>)
    c6b2:	68a0      	ldr	r0, [r4, #8]
    c6b4:	f7ff ffd2 	bl	c65c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    c6b8:	68a2      	ldr	r2, [r4, #8]
    c6ba:	69e3      	ldr	r3, [r4, #28]
    c6bc:	429a      	cmp	r2, r3
    c6be:	d103      	bne.n	c6c8 <_impl_k_yield+0x20>
	if (key) {
    c6c0:	2d00      	cmp	r5, #0
    c6c2:	d100      	bne.n	c6c6 <_impl_k_yield+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
    c6c4:	b662      	cpsie	i
}
    c6c6:	bd70      	pop	{r4, r5, r6, pc}
	_time_slice_elapsed = 0;
    c6c8:	2200      	movs	r2, #0
    c6ca:	4b04      	ldr	r3, [pc, #16]	; (c6dc <_impl_k_yield+0x34>)
    c6cc:	0028      	movs	r0, r5
    c6ce:	601a      	str	r2, [r3, #0]
    c6d0:	f7f6 f968 	bl	29a4 <__swap>
}
    c6d4:	e7f7      	b.n	c6c6 <_impl_k_yield+0x1e>
    c6d6:	46c0      	nop			; (mov r8, r8)
    c6d8:	20000be8 	.word	0x20000be8
    c6dc:	20000de4 	.word	0x20000de4

0000c6e0 <_impl_k_sleep>:
{
    c6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
    c6e2:	2800      	cmp	r0, #0
    c6e4:	d102      	bne.n	c6ec <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c6e6:	f7ff ffdf 	bl	c6a8 <_impl_k_yield>
}
    c6ea:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    c6ec:	3003      	adds	r0, #3
    c6ee:	0880      	lsrs	r0, r0, #2
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    c6f0:	3001      	adds	r0, #1
    c6f2:	9001      	str	r0, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    c6f4:	f3ef 8510 	mrs	r5, PRIMASK
    c6f8:	b672      	cpsid	i
	_remove_thread_from_ready_q(_current);
    c6fa:	4c09      	ldr	r4, [pc, #36]	; (c720 <_impl_k_sleep+0x40>)
    c6fc:	68a0      	ldr	r0, [r4, #8]
    c6fe:	f7ff ff05 	bl	c50c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    c702:	68a0      	ldr	r0, [r4, #8]
    c704:	9b01      	ldr	r3, [sp, #4]
    c706:	0001      	movs	r1, r0
    c708:	2200      	movs	r2, #0
    c70a:	3110      	adds	r1, #16
    c70c:	f7ff feae 	bl	c46c <_add_timeout>
	_time_slice_elapsed = 0;
    c710:	2200      	movs	r2, #0
    c712:	4b04      	ldr	r3, [pc, #16]	; (c724 <_impl_k_sleep+0x44>)
    c714:	0028      	movs	r0, r5
    c716:	601a      	str	r2, [r3, #0]
    c718:	f7f6 f944 	bl	29a4 <__swap>
    c71c:	e7e5      	b.n	c6ea <_impl_k_sleep+0xa>
    c71e:	46c0      	nop			; (mov r8, r8)
    c720:	20000be8 	.word	0x20000be8
    c724:	20000de4 	.word	0x20000de4

0000c728 <_impl_k_current_get>:
	return _current;
    c728:	4b01      	ldr	r3, [pc, #4]	; (c730 <_impl_k_current_get+0x8>)
    c72a:	6898      	ldr	r0, [r3, #8]
}
    c72c:	4770      	bx	lr
    c72e:	46c0      	nop			; (mov r8, r8)
    c730:	20000be8 	.word	0x20000be8

0000c734 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c734:	4b0f      	ldr	r3, [pc, #60]	; (c774 <_is_thread_time_slicing+0x40>)
{
    c736:	b082      	sub	sp, #8
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c738:	681a      	ldr	r2, [r3, #0]
		return 0;
    c73a:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c73c:	429a      	cmp	r2, r3
    c73e:	dd16      	ble.n	c76e <_is_thread_time_slicing+0x3a>
	return thread == _idle_thread;
    c740:	4b0d      	ldr	r3, [pc, #52]	; (c778 <_is_thread_time_slicing+0x44>)
    c742:	681b      	ldr	r3, [r3, #0]
    c744:	9301      	str	r3, [sp, #4]
    c746:	9a01      	ldr	r2, [sp, #4]
		return 0;
    c748:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c74a:	4290      	cmp	r0, r2
    c74c:	d00f      	beq.n	c76e <_is_thread_time_slicing+0x3a>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c74e:	220a      	movs	r2, #10
    c750:	4b0a      	ldr	r3, [pc, #40]	; (c77c <_is_thread_time_slicing+0x48>)
    c752:	5682      	ldrsb	r2, [r0, r2]
    c754:	6819      	ldr	r1, [r3, #0]
		return 0;
    c756:	2300      	movs	r3, #0
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c758:	428a      	cmp	r2, r1
    c75a:	db08      	blt.n	c76e <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
    c75c:	4b08      	ldr	r3, [pc, #32]	; (c780 <_is_thread_time_slicing+0x4c>)
    c75e:	3214      	adds	r2, #20
    c760:	00d2      	lsls	r2, r2, #3
    c762:	189a      	adds	r2, r3, r2
    c764:	6890      	ldr	r0, [r2, #8]
    c766:	6853      	ldr	r3, [r2, #4]
    c768:	1a1b      	subs	r3, r3, r0
    c76a:	1e58      	subs	r0, r3, #1
    c76c:	4183      	sbcs	r3, r0
}
    c76e:	0018      	movs	r0, r3
    c770:	b002      	add	sp, #8
    c772:	4770      	bx	lr
    c774:	20000d0c 	.word	0x20000d0c
    c778:	0000dae8 	.word	0x0000dae8
    c77c:	20000d10 	.word	0x20000d10
    c780:	20000be8 	.word	0x20000be8

0000c784 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    c784:	2200      	movs	r2, #0
    c786:	4b01      	ldr	r3, [pc, #4]	; (c78c <_update_time_slice_before_swap+0x8>)
    c788:	601a      	str	r2, [r3, #0]
}
    c78a:	4770      	bx	lr
    c78c:	20000de4 	.word	0x20000de4

0000c790 <_unpend_first_thread>:
	if (_handling_timeouts) {
    c790:	4b11      	ldr	r3, [pc, #68]	; (c7d8 <_unpend_first_thread+0x48>)
    c792:	6802      	ldr	r2, [r0, #0]
    c794:	681b      	ldr	r3, [r3, #0]
    c796:	2b00      	cmp	r3, #0
    c798:	d010      	beq.n	c7bc <_unpend_first_thread+0x2c>
	return list->head == list;
    c79a:	0013      	movs	r3, r2
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c79c:	4290      	cmp	r0, r2
    c79e:	d100      	bne.n	c7a2 <_unpend_first_thread+0x12>
    c7a0:	2300      	movs	r3, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d102      	bne.n	c7ac <_unpend_first_thread+0x1c>
    c7a6:	2300      	movs	r3, #0
		_unpend_thread(thread);
	}

	return thread;
}
    c7a8:	0018      	movs	r0, r3
    c7aa:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    c7ac:	6a1a      	ldr	r2, [r3, #32]
    c7ae:	3202      	adds	r2, #2
    c7b0:	d108      	bne.n	c7c4 <_unpend_first_thread+0x34>
	return (node == list->tail) ? NULL : node->next;
    c7b2:	6842      	ldr	r2, [r0, #4]
    c7b4:	4293      	cmp	r3, r2
    c7b6:	d0f6      	beq.n	c7a6 <_unpend_first_thread+0x16>
    c7b8:	681b      	ldr	r3, [r3, #0]
    c7ba:	e7f2      	b.n	c7a2 <_unpend_first_thread+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c7bc:	4290      	cmp	r0, r2
    c7be:	d0f3      	beq.n	c7a8 <_unpend_first_thread+0x18>
    c7c0:	1e13      	subs	r3, r2, #0
	if (thread) {
    c7c2:	d0f1      	beq.n	c7a8 <_unpend_first_thread+0x18>
	node->prev->next = node->next;
    c7c4:	685a      	ldr	r2, [r3, #4]
    c7c6:	6819      	ldr	r1, [r3, #0]
    c7c8:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    c7ca:	6819      	ldr	r1, [r3, #0]
    c7cc:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c7ce:	2102      	movs	r1, #2
    c7d0:	7a5a      	ldrb	r2, [r3, #9]
    c7d2:	438a      	bics	r2, r1
    c7d4:	725a      	strb	r2, [r3, #9]
    c7d6:	e7e7      	b.n	c7a8 <_unpend_first_thread+0x18>
    c7d8:	20000de0 	.word	0x20000de0

0000c7dc <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    c7dc:	0003      	movs	r3, r0
    c7de:	3310      	adds	r3, #16
	sem->count = initial_count;
    c7e0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c7e2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c7e4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c7e6:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    c7e8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    c7ea:	6143      	str	r3, [r0, #20]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    c7ec:	4770      	bx	lr
	...

0000c7f0 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    c7f0:	b570      	push	{r4, r5, r6, lr}
    c7f2:	0005      	movs	r5, r0
    c7f4:	f3ef 8610 	mrs	r6, PRIMASK
    c7f8:	b672      	cpsid	i
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    c7fa:	f7ff ffc9 	bl	c790 <_unpend_first_thread>
    c7fe:	1e04      	subs	r4, r0, #0
	if (!thread) {
    c800:	d113      	bne.n	c82a <_impl_k_sem_give+0x3a>
	sem->count += (sem->count != sem->limit);
    c802:	68aa      	ldr	r2, [r5, #8]
    c804:	68eb      	ldr	r3, [r5, #12]
	return _handle_obj_poll_events(&sem->poll_events, state);
    c806:	0028      	movs	r0, r5
	sem->count += (sem->count != sem->limit);
    c808:	1a9b      	subs	r3, r3, r2
    c80a:	1e59      	subs	r1, r3, #1
    c80c:	418b      	sbcs	r3, r1
    c80e:	189b      	adds	r3, r3, r2
    c810:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    c812:	3010      	adds	r0, #16
    c814:	2102      	movs	r1, #2
    c816:	f000 fd5f 	bl	d2d8 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    c81a:	2800      	cmp	r0, #0
    c81c:	d02d      	beq.n	c87a <_impl_k_sem_give+0x8a>
	_update_time_slice_before_swap();
    c81e:	f7ff ffb1 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    c822:	0030      	movs	r0, r6
    c824:	f7f6 f8be 	bl	29a4 <__swap>
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    c828:	bd70      	pop	{r4, r5, r6, pc}
	return _abort_timeout(&thread->base.timeout);
    c82a:	0001      	movs	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c82c:	6a03      	ldr	r3, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    c82e:	3110      	adds	r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c830:	1c5a      	adds	r2, r3, #1
    c832:	d00f      	beq.n	c854 <_impl_k_sem_give+0x64>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c834:	4a1a      	ldr	r2, [pc, #104]	; (c8a0 <_impl_k_sem_give+0xb0>)
    c836:	6952      	ldr	r2, [r2, #20]
    c838:	4291      	cmp	r1, r2
    c83a:	d003      	beq.n	c844 <_impl_k_sem_give+0x54>
	return (node == list->tail) ? NULL : node->next;
    c83c:	6902      	ldr	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c83e:	6911      	ldr	r1, [r2, #16]
    c840:	18cb      	adds	r3, r1, r3
    c842:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    c844:	6963      	ldr	r3, [r4, #20]
    c846:	6922      	ldr	r2, [r4, #16]
    c848:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c84a:	6922      	ldr	r2, [r4, #16]
    c84c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c84e:	2301      	movs	r3, #1
    c850:	425b      	negs	r3, r3
    c852:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c854:	7a63      	ldrb	r3, [r4, #9]
    c856:	2204      	movs	r2, #4
    c858:	0019      	movs	r1, r3
    c85a:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    c85c:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c85e:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c860:	4213      	tst	r3, r2
    c862:	d102      	bne.n	c86a <_impl_k_sem_give+0x7a>
    c864:	6a23      	ldr	r3, [r4, #32]
    c866:	3301      	adds	r3, #1
    c868:	d00b      	beq.n	c882 <_impl_k_sem_give+0x92>
    c86a:	2300      	movs	r3, #0
    c86c:	65e3      	str	r3, [r4, #92]	; 0x5c
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    c86e:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
    c872:	2b0d      	cmp	r3, #13
    c874:	d801      	bhi.n	c87a <_impl_k_sem_give+0x8a>
    c876:	2b03      	cmp	r3, #3
    c878:	d107      	bne.n	c88a <_impl_k_sem_give+0x9a>
	if (key) {
    c87a:	2e00      	cmp	r6, #0
    c87c:	d1d4      	bne.n	c828 <_impl_k_sem_give+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    c87e:	b662      	cpsie	i
    c880:	e7d2      	b.n	c828 <_impl_k_sem_give+0x38>
		_add_thread_to_ready_q(thread);
    c882:	0020      	movs	r0, r4
    c884:	f7ff fdba 	bl	c3fc <_add_thread_to_ready_q>
    c888:	e7ef      	b.n	c86a <_impl_k_sem_give+0x7a>
	return _is_preempt(_current) && __must_switch_threads();
    c88a:	4b05      	ldr	r3, [pc, #20]	; (c8a0 <_impl_k_sem_give+0xb0>)
    c88c:	689b      	ldr	r3, [r3, #8]
    c88e:	895b      	ldrh	r3, [r3, #10]
    c890:	2b7f      	cmp	r3, #127	; 0x7f
    c892:	d8f2      	bhi.n	c87a <_impl_k_sem_give+0x8a>
    c894:	f7ff fea8 	bl	c5e8 <__must_switch_threads>
		return handle_poll_events(sem);
    c898:	1e43      	subs	r3, r0, #1
    c89a:	4198      	sbcs	r0, r3
    c89c:	e7bd      	b.n	c81a <_impl_k_sem_give+0x2a>
    c89e:	46c0      	nop			; (mov r8, r8)
    c8a0:	20000be8 	.word	0x20000be8

0000c8a4 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    c8a4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    c8a6:	f3ef 8410 	mrs	r4, PRIMASK
    c8aa:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    c8ac:	6883      	ldr	r3, [r0, #8]
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d006      	beq.n	c8c0 <_impl_k_sem_take+0x1c>
		sem->count--;
    c8b2:	3b01      	subs	r3, #1
    c8b4:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
    c8b6:	2000      	movs	r0, #0
	if (key) {
    c8b8:	4284      	cmp	r4, r0
    c8ba:	d100      	bne.n	c8be <_impl_k_sem_take+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    c8bc:	b662      	cpsie	i
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    c8be:	bd10      	pop	{r4, pc}
	if (timeout == K_NO_WAIT) {
    c8c0:	2900      	cmp	r1, #0
    c8c2:	d105      	bne.n	c8d0 <_impl_k_sem_take+0x2c>
	if (key) {
    c8c4:	2c00      	cmp	r4, #0
    c8c6:	d100      	bne.n	c8ca <_impl_k_sem_take+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    c8c8:	b662      	cpsie	i
		return -EBUSY;
    c8ca:	2010      	movs	r0, #16
    c8cc:	4240      	negs	r0, r0
    c8ce:	e7f6      	b.n	c8be <_impl_k_sem_take+0x1a>
	_pend_current_thread(&sem->wait_q, timeout);
    c8d0:	f7ff fe7a 	bl	c5c8 <_pend_current_thread>
	_update_time_slice_before_swap();
    c8d4:	f7ff ff56 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    c8d8:	0020      	movs	r0, r4
    c8da:	f7f6 f863 	bl	29a4 <__swap>
	return _Swap(key);
    c8de:	e7ee      	b.n	c8be <_impl_k_sem_take+0x1a>

0000c8e0 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    c8e0:	4b02      	ldr	r3, [pc, #8]	; (c8ec <_impl_k_uptime_get_32+0xc>)
    c8e2:	6818      	ldr	r0, [r3, #0]
    c8e4:	6859      	ldr	r1, [r3, #4]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    c8e6:	0080      	lsls	r0, r0, #2
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    c8e8:	4770      	bx	lr
    c8ea:	46c0      	nop			; (mov r8, r8)
    c8ec:	20000de8 	.word	0x20000de8

0000c8f0 <_tick_get>:
	__asm__ volatile("mrs %0, PRIMASK;"
    c8f0:	f3ef 8310 	mrs	r3, PRIMASK
    c8f4:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    c8f6:	4a03      	ldr	r2, [pc, #12]	; (c904 <_tick_get+0x14>)
    c8f8:	6810      	ldr	r0, [r2, #0]
    c8fa:	6851      	ldr	r1, [r2, #4]
	if (key) {
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d100      	bne.n	c902 <_tick_get+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    c900:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    c902:	4770      	bx	lr
    c904:	20000de8 	.word	0x20000de8

0000c908 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    c908:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    c90a:	f7ff fff1 	bl	c8f0 <_tick_get>
    c90e:	0f83      	lsrs	r3, r0, #30
    c910:	0089      	lsls	r1, r1, #2
    c912:	4319      	orrs	r1, r3
    c914:	0080      	lsls	r0, r0, #2
}
    c916:	bd10      	pop	{r4, pc}

0000c918 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    c918:	b5f0      	push	{r4, r5, r6, r7, lr}
    c91a:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
    c91c:	f3ef 8410 	mrs	r4, PRIMASK
    c920:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    c922:	4960      	ldr	r1, [pc, #384]	; (caa4 <_nano_sys_clock_tick_announce+0x18c>)
    c924:	17c3      	asrs	r3, r0, #31
    c926:	9301      	str	r3, [sp, #4]
    c928:	9000      	str	r0, [sp, #0]
    c92a:	680a      	ldr	r2, [r1, #0]
    c92c:	684b      	ldr	r3, [r1, #4]
    c92e:	9d00      	ldr	r5, [sp, #0]
    c930:	9e01      	ldr	r6, [sp, #4]
    c932:	1952      	adds	r2, r2, r5
    c934:	4173      	adcs	r3, r6
    c936:	600a      	str	r2, [r1, #0]
    c938:	604b      	str	r3, [r1, #4]
	if (key) {
    c93a:	2c00      	cmp	r4, #0
    c93c:	d100      	bne.n	c940 <_nano_sys_clock_tick_announce+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    c93e:	b662      	cpsie	i
	list->head = (sys_dnode_t *)list;
    c940:	aa04      	add	r2, sp, #16
    c942:	9204      	str	r2, [sp, #16]
	list->tail = (sys_dnode_t *)list;
    c944:	6052      	str	r2, [r2, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    c946:	f3ef 8510 	mrs	r5, PRIMASK
    c94a:	b672      	cpsid	i
	return list->head == list;
    c94c:	4c56      	ldr	r4, [pc, #344]	; (caa8 <_nano_sys_clock_tick_announce+0x190>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c94e:	4e57      	ldr	r6, [pc, #348]	; (caac <_nano_sys_clock_tick_announce+0x194>)
	return list->head == list;
    c950:	6923      	ldr	r3, [r4, #16]
    c952:	0029      	movs	r1, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c954:	42b3      	cmp	r3, r6
    c956:	d001      	beq.n	c95c <_nano_sys_clock_tick_announce+0x44>
	if (!next) {
    c958:	2b00      	cmp	r3, #0
    c95a:	d11f      	bne.n	c99c <_nano_sys_clock_tick_announce+0x84>
	if (key) {
    c95c:	2d00      	cmp	r5, #0
    c95e:	d100      	bne.n	c962 <_nano_sys_clock_tick_announce+0x4a>
	__asm__ volatile("cpsie i" : : : "memory");
    c960:	b662      	cpsie	i
	if (!_is_thread_time_slicing(_current)) {
    c962:	4c51      	ldr	r4, [pc, #324]	; (caa8 <_nano_sys_clock_tick_announce+0x190>)
    c964:	68a0      	ldr	r0, [r4, #8]
    c966:	f7ff fee5 	bl	c734 <_is_thread_time_slicing>
    c96a:	2800      	cmp	r0, #0
    c96c:	d014      	beq.n	c998 <_nano_sys_clock_tick_announce+0x80>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c96e:	4a50      	ldr	r2, [pc, #320]	; (cab0 <_nano_sys_clock_tick_announce+0x198>)
    c970:	9b00      	ldr	r3, [sp, #0]
    c972:	6811      	ldr	r1, [r2, #0]
    c974:	009b      	lsls	r3, r3, #2
    c976:	18cb      	adds	r3, r1, r3
	if (_time_slice_elapsed >= _time_slice_duration) {
    c978:	494e      	ldr	r1, [pc, #312]	; (cab4 <_nano_sys_clock_tick_announce+0x19c>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c97a:	6013      	str	r3, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    c97c:	6809      	ldr	r1, [r1, #0]
    c97e:	428b      	cmp	r3, r1
    c980:	db0a      	blt.n	c998 <_nano_sys_clock_tick_announce+0x80>
		_time_slice_elapsed = 0;
    c982:	2300      	movs	r3, #0
    c984:	6013      	str	r3, [r2, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    c986:	f3ef 8510 	mrs	r5, PRIMASK
    c98a:	b672      	cpsid	i
		_move_thread_to_end_of_prio_q(_current);
    c98c:	68a0      	ldr	r0, [r4, #8]
    c98e:	f7ff fe65 	bl	c65c <_move_thread_to_end_of_prio_q>
	if (key) {
    c992:	2d00      	cmp	r5, #0
    c994:	d100      	bne.n	c998 <_nano_sys_clock_tick_announce+0x80>
	__asm__ volatile("cpsie i" : : : "memory");
    c996:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    c998:	b007      	add	sp, #28
    c99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_handling_timeouts = 1;
    c99c:	2601      	movs	r6, #1
    c99e:	4d46      	ldr	r5, [pc, #280]	; (cab8 <_nano_sys_clock_tick_announce+0x1a0>)
			timeout->delta_ticks_from_prev = 0;
    c9a0:	2700      	movs	r7, #0
	_handling_timeouts = 1;
    c9a2:	602e      	str	r6, [r5, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c9a4:	2502      	movs	r5, #2
    c9a6:	426d      	negs	r5, r5
    c9a8:	46ac      	mov	ip, r5
	return (node == list->tail) ? NULL : node->next;
    c9aa:	9403      	str	r4, [sp, #12]
		s32_t tmp = timeout->delta_ticks_from_prev;
    c9ac:	691d      	ldr	r5, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    c9ae:	4285      	cmp	r5, r0
    c9b0:	da20      	bge.n	c9f4 <_nano_sys_clock_tick_announce+0xdc>
			timeout->delta_ticks_from_prev = 0;
    c9b2:	611f      	str	r7, [r3, #16]
    c9b4:	9c03      	ldr	r4, [sp, #12]
		ticks -= tmp;
    c9b6:	1b40      	subs	r0, r0, r5
    c9b8:	6966      	ldr	r6, [r4, #20]
    c9ba:	2500      	movs	r5, #0
    c9bc:	429e      	cmp	r6, r3
    c9be:	d000      	beq.n	c9c2 <_nano_sys_clock_tick_announce+0xaa>
    c9c0:	681d      	ldr	r5, [r3, #0]
		if (timeout->delta_ticks_from_prev == 0) {
    c9c2:	691e      	ldr	r6, [r3, #16]
    c9c4:	2e00      	cmp	r6, #0
    c9c6:	d118      	bne.n	c9fa <_nano_sys_clock_tick_announce+0xe2>
	node->prev->next = node->next;
    c9c8:	681c      	ldr	r4, [r3, #0]
    c9ca:	685e      	ldr	r6, [r3, #4]
    c9cc:	6034      	str	r4, [r6, #0]
	node->next->prev = node->prev;
    c9ce:	681c      	ldr	r4, [r3, #0]
    c9d0:	6066      	str	r6, [r4, #4]
	node->next = list->head;
    c9d2:	6814      	ldr	r4, [r2, #0]
	node->prev = list;
    c9d4:	605a      	str	r2, [r3, #4]
	node->next = list->head;
    c9d6:	601c      	str	r4, [r3, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c9d8:	4664      	mov	r4, ip
	list->head->prev = node;
    c9da:	6816      	ldr	r6, [r2, #0]
	list->head = node;
    c9dc:	6013      	str	r3, [r2, #0]
	list->head->prev = node;
    c9de:	6073      	str	r3, [r6, #4]
    c9e0:	611c      	str	r4, [r3, #16]
	if (key) {
    c9e2:	2900      	cmp	r1, #0
    c9e4:	d100      	bne.n	c9e8 <_nano_sys_clock_tick_announce+0xd0>
	__asm__ volatile("cpsie i" : : : "memory");
    c9e6:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    c9e8:	f3ef 8110 	mrs	r1, PRIMASK
    c9ec:	b672      	cpsid	i
    c9ee:	1e2b      	subs	r3, r5, #0
	while (next) {
    c9f0:	d1dc      	bne.n	c9ac <_nano_sys_clock_tick_announce+0x94>
    c9f2:	e004      	b.n	c9fe <_nano_sys_clock_tick_announce+0xe6>
			timeout->delta_ticks_from_prev -= ticks;
    c9f4:	1a2e      	subs	r6, r5, r0
    c9f6:	611e      	str	r6, [r3, #16]
    c9f8:	e7dc      	b.n	c9b4 <_nano_sys_clock_tick_announce+0x9c>
		} else if (ticks <= 0) {
    c9fa:	2800      	cmp	r0, #0
    c9fc:	dcf1      	bgt.n	c9e2 <_nano_sys_clock_tick_announce+0xca>
	if (key) {
    c9fe:	2900      	cmp	r1, #0
    ca00:	d100      	bne.n	ca04 <_nano_sys_clock_tick_announce+0xec>
	__asm__ volatile("cpsie i" : : : "memory");
    ca02:	b662      	cpsie	i
	return list->head == list;
    ca04:	9804      	ldr	r0, [sp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ca06:	4290      	cmp	r0, r2
    ca08:	d103      	bne.n	ca12 <_nano_sys_clock_tick_announce+0xfa>
	_handling_timeouts = 0;
    ca0a:	2200      	movs	r2, #0
    ca0c:	4b2a      	ldr	r3, [pc, #168]	; (cab8 <_nano_sys_clock_tick_announce+0x1a0>)
    ca0e:	601a      	str	r2, [r3, #0]
    ca10:	e7a7      	b.n	c962 <_nano_sys_clock_tick_announce+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    ca12:	2800      	cmp	r0, #0
    ca14:	d0f9      	beq.n	ca0a <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    ca16:	9b05      	ldr	r3, [sp, #20]
    ca18:	2400      	movs	r4, #0
    ca1a:	4298      	cmp	r0, r3
    ca1c:	d000      	beq.n	ca20 <_nano_sys_clock_tick_announce+0x108>
    ca1e:	6804      	ldr	r4, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    ca20:	2601      	movs	r6, #1
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ca22:	2704      	movs	r7, #4
    ca24:	4276      	negs	r6, r6
	node->prev->next = node->next;
    ca26:	6843      	ldr	r3, [r0, #4]
    ca28:	6802      	ldr	r2, [r0, #0]
    ca2a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ca2c:	6802      	ldr	r2, [r0, #0]
    ca2e:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    ca30:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
    ca32:	f3ef 8510 	mrs	r5, PRIMASK
    ca36:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    ca38:	6106      	str	r6, [r0, #16]
	if (thread) {
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d021      	beq.n	ca82 <_nano_sys_clock_tick_announce+0x16a>
	if (timeout_obj->wait_q) {
    ca3e:	68c2      	ldr	r2, [r0, #12]
    ca40:	2a00      	cmp	r2, #0
    ca42:	d00a      	beq.n	ca5a <_nano_sys_clock_tick_announce+0x142>
	node->prev->next = node->next;
    ca44:	685a      	ldr	r2, [r3, #4]
    ca46:	6819      	ldr	r1, [r3, #0]
    ca48:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    ca4a:	6819      	ldr	r1, [r3, #0]
    ca4c:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ca4e:	2102      	movs	r1, #2
    ca50:	7a5a      	ldrb	r2, [r3, #9]
    ca52:	438a      	bics	r2, r1
    ca54:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    ca56:	2200      	movs	r2, #0
    ca58:	61da      	str	r2, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ca5a:	7a5a      	ldrb	r2, [r3, #9]
    ca5c:	0011      	movs	r1, r2
    ca5e:	43b9      	bics	r1, r7
    ca60:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    ca62:	211b      	movs	r1, #27
    ca64:	420a      	tst	r2, r1
    ca66:	d102      	bne.n	ca6e <_nano_sys_clock_tick_announce+0x156>
    ca68:	6a1a      	ldr	r2, [r3, #32]
    ca6a:	3201      	adds	r2, #1
    ca6c:	d015      	beq.n	ca9a <_nano_sys_clock_tick_announce+0x182>
	if (key) {
    ca6e:	2d00      	cmp	r5, #0
    ca70:	d100      	bne.n	ca74 <_nano_sys_clock_tick_announce+0x15c>
	__asm__ volatile("cpsie i" : : : "memory");
    ca72:	b662      	cpsie	i
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    ca74:	2c00      	cmp	r4, #0
    ca76:	d0c8      	beq.n	ca0a <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    ca78:	9b05      	ldr	r3, [sp, #20]
    ca7a:	42a3      	cmp	r3, r4
    ca7c:	d109      	bne.n	ca92 <_nano_sys_clock_tick_announce+0x17a>
    ca7e:	2300      	movs	r3, #0
    ca80:	e008      	b.n	ca94 <_nano_sys_clock_tick_announce+0x17c>
	if (key) {
    ca82:	2d00      	cmp	r5, #0
    ca84:	d100      	bne.n	ca88 <_nano_sys_clock_tick_announce+0x170>
	__asm__ volatile("cpsie i" : : : "memory");
    ca86:	b662      	cpsie	i
		if (timeout->func) {
    ca88:	6943      	ldr	r3, [r0, #20]
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d0f2      	beq.n	ca74 <_nano_sys_clock_tick_announce+0x15c>
			timeout->func(timeout);
    ca8e:	4798      	blx	r3
    ca90:	e7f0      	b.n	ca74 <_nano_sys_clock_tick_announce+0x15c>
    ca92:	6823      	ldr	r3, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    ca94:	0020      	movs	r0, r4
    ca96:	001c      	movs	r4, r3
    ca98:	e7c5      	b.n	ca26 <_nano_sys_clock_tick_announce+0x10e>
		_add_thread_to_ready_q(thread);
    ca9a:	0018      	movs	r0, r3
    ca9c:	f7ff fcae 	bl	c3fc <_add_thread_to_ready_q>
    caa0:	e7e5      	b.n	ca6e <_nano_sys_clock_tick_announce+0x156>
    caa2:	46c0      	nop			; (mov r8, r8)
    caa4:	20000de8 	.word	0x20000de8
    caa8:	20000be8 	.word	0x20000be8
    caac:	20000bf8 	.word	0x20000bf8
    cab0:	20000de4 	.word	0x20000de4
    cab4:	20000d0c 	.word	0x20000d0c
    cab8:	20000de0 	.word	0x20000de0

0000cabc <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    cabc:	2301      	movs	r3, #1
    cabe:	2280      	movs	r2, #128	; 0x80
{
    cac0:	b510      	push	{r4, lr}
	k_work_q_start(&k_sys_work_q,
    cac2:	4804      	ldr	r0, [pc, #16]	; (cad4 <k_sys_work_q_init+0x18>)
    cac4:	425b      	negs	r3, r3
    cac6:	00d2      	lsls	r2, r2, #3
    cac8:	4903      	ldr	r1, [pc, #12]	; (cad8 <k_sys_work_q_init+0x1c>)
    caca:	f000 f967 	bl	cd9c <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    cace:	2000      	movs	r0, #0
    cad0:	bd10      	pop	{r4, pc}
    cad2:	46c0      	nop			; (mov r8, r8)
    cad4:	20000df0 	.word	0x20000df0
    cad8:	20001d98 	.word	0x20001d98

0000cadc <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    cadc:	7a42      	ldrb	r2, [r0, #9]
    cade:	2300      	movs	r3, #0
    cae0:	06d2      	lsls	r2, r2, #27
    cae2:	d104      	bne.n	caee <_is_thread_ready+0x12>
    cae4:	6a03      	ldr	r3, [r0, #32]
    cae6:	3301      	adds	r3, #1
    cae8:	4258      	negs	r0, r3
    caea:	4143      	adcs	r3, r0
    caec:	b2db      	uxtb	r3, r3
}
    caee:	0018      	movs	r0, r3
    caf0:	4770      	bx	lr
	...

0000caf4 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    caf4:	6902      	ldr	r2, [r0, #16]
{
    caf6:	0003      	movs	r3, r0
		return _INACTIVE;
    caf8:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    cafa:	1c51      	adds	r1, r2, #1
    cafc:	d010      	beq.n	cb20 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    cafe:	4909      	ldr	r1, [pc, #36]	; (cb24 <_abort_timeout+0x30>)
    cb00:	6949      	ldr	r1, [r1, #20]
    cb02:	428b      	cmp	r3, r1
    cb04:	d003      	beq.n	cb0e <_abort_timeout+0x1a>
    cb06:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    cb08:	6908      	ldr	r0, [r1, #16]
    cb0a:	1882      	adds	r2, r0, r2
    cb0c:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    cb0e:	685a      	ldr	r2, [r3, #4]
    cb10:	6819      	ldr	r1, [r3, #0]
	return 0;
    cb12:	2000      	movs	r0, #0
    cb14:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    cb16:	6819      	ldr	r1, [r3, #0]
    cb18:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    cb1a:	2201      	movs	r2, #1
    cb1c:	4252      	negs	r2, r2
    cb1e:	611a      	str	r2, [r3, #16]
}
    cb20:	4770      	bx	lr
    cb22:	46c0      	nop			; (mov r8, r8)
    cb24:	20000be8 	.word	0x20000be8

0000cb28 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    cb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    cb2a:	f3ef 8310 	mrs	r3, PRIMASK
    cb2e:	b672      	cpsid	i
    cb30:	9301      	str	r3, [sp, #4]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    cb32:	2300      	movs	r3, #0
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    cb34:	0004      	movs	r4, r0
	return list->head == list;
    cb36:	4a17      	ldr	r2, [pc, #92]	; (cb94 <schedule_new_thread.part.13+0x6c>)
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    cb38:	3103      	adds	r1, #3
    cb3a:	0889      	lsrs	r1, r1, #2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    cb3c:	61c3      	str	r3, [r0, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb3e:	4e16      	ldr	r6, [pc, #88]	; (cb98 <schedule_new_thread.part.13+0x70>)
	return list->head == list;
    cb40:	6913      	ldr	r3, [r2, #16]
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    cb42:	3101      	adds	r1, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    cb44:	3410      	adds	r4, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    cb46:	6201      	str	r1, [r0, #32]
	timeout->thread = thread;
    cb48:	6180      	str	r0, [r0, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb4a:	42b3      	cmp	r3, r6
    cb4c:	d10a      	bne.n	cb64 <schedule_new_thread.part.13+0x3c>
	node->next = list;
    cb4e:	6106      	str	r6, [r0, #16]
	node->prev = list->tail;
    cb50:	6953      	ldr	r3, [r2, #20]
    cb52:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    cb54:	6953      	ldr	r3, [r2, #20]
    cb56:	601c      	str	r4, [r3, #0]
	list->tail = node;
    cb58:	6154      	str	r4, [r2, #20]
	if (key) {
    cb5a:	9b01      	ldr	r3, [sp, #4]
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	d100      	bne.n	cb62 <schedule_new_thread.part.13+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    cb60:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    cb62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    cb64:	2b00      	cmp	r3, #0
    cb66:	d0f2      	beq.n	cb4e <schedule_new_thread.part.13+0x26>
    cb68:	6957      	ldr	r7, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    cb6a:	6a01      	ldr	r1, [r0, #32]
    cb6c:	691d      	ldr	r5, [r3, #16]
    cb6e:	42a9      	cmp	r1, r5
    cb70:	dc08      	bgt.n	cb84 <schedule_new_thread.part.13+0x5c>
		node->prev = insert_point->prev;
    cb72:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    cb74:	1a69      	subs	r1, r5, r1
    cb76:	6119      	str	r1, [r3, #16]
    cb78:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    cb7a:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    cb7c:	685a      	ldr	r2, [r3, #4]
    cb7e:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    cb80:	605c      	str	r4, [r3, #4]
    cb82:	e7ea      	b.n	cb5a <schedule_new_thread.part.13+0x32>
		*delta -= in_q->delta_ticks_from_prev;
    cb84:	1b49      	subs	r1, r1, r5
    cb86:	6201      	str	r1, [r0, #32]
	return (node == list->tail) ? NULL : node->next;
    cb88:	42bb      	cmp	r3, r7
    cb8a:	d0e0      	beq.n	cb4e <schedule_new_thread.part.13+0x26>
    cb8c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d1eb      	bne.n	cb6a <schedule_new_thread.part.13+0x42>
    cb92:	e7dc      	b.n	cb4e <schedule_new_thread.part.13+0x26>
    cb94:	20000be8 	.word	0x20000be8
    cb98:	20000bf8 	.word	0x20000bf8

0000cb9c <k_is_in_isr>:
    cb9c:	f3ef 8305 	mrs	r3, IPSR
    cba0:	2001      	movs	r0, #1
    cba2:	2b0d      	cmp	r3, #13
    cba4:	d803      	bhi.n	cbae <k_is_in_isr+0x12>
    cba6:	3b03      	subs	r3, #3
    cba8:	4258      	negs	r0, r3
    cbaa:	4158      	adcs	r0, r3
    cbac:	b2c0      	uxtb	r0, r0
}
    cbae:	4770      	bx	lr

0000cbb0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    cbb0:	4b02      	ldr	r3, [pc, #8]	; (cbbc <_is_thread_essential+0xc>)
    cbb2:	689b      	ldr	r3, [r3, #8]
    cbb4:	7a18      	ldrb	r0, [r3, #8]
    cbb6:	2301      	movs	r3, #1
    cbb8:	4018      	ands	r0, r3
}
    cbba:	4770      	bx	lr
    cbbc:	20000be8 	.word	0x20000be8

0000cbc0 <_thread_entry>:
{
    cbc0:	b510      	push	{r4, lr}
    cbc2:	0004      	movs	r4, r0
    cbc4:	0008      	movs	r0, r1
    cbc6:	0011      	movs	r1, r2
	entry(p1, p2, p3);
    cbc8:	001a      	movs	r2, r3
    cbca:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    cbcc:	f7ff fdac 	bl	c728 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    cbd0:	f7f6 f832 	bl	2c38 <_impl_k_thread_abort>

0000cbd4 <_impl_k_thread_start>:
{
    cbd4:	b570      	push	{r4, r5, r6, lr}
    cbd6:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    cbd8:	f3ef 8510 	mrs	r5, PRIMASK
    cbdc:	b672      	cpsid	i
	if (_has_thread_started(thread)) {
    cbde:	2204      	movs	r2, #4
    cbe0:	7a43      	ldrb	r3, [r0, #9]
    cbe2:	4213      	tst	r3, r2
    cbe4:	d102      	bne.n	cbec <_impl_k_thread_start+0x18>
	if (key) {
    cbe6:	2d00      	cmp	r5, #0
    cbe8:	d018      	beq.n	cc1c <_impl_k_thread_start+0x48>
}
    cbea:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cbec:	4393      	bics	r3, r2
    cbee:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    cbf0:	f7ff ff74 	bl	cadc <_is_thread_ready>
    cbf4:	2800      	cmp	r0, #0
    cbf6:	d0f6      	beq.n	cbe6 <_impl_k_thread_start+0x12>
		_add_thread_to_ready_q(thread);
    cbf8:	0020      	movs	r0, r4
    cbfa:	f7ff fbff 	bl	c3fc <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    cbfe:	4b08      	ldr	r3, [pc, #32]	; (cc20 <_impl_k_thread_start+0x4c>)
    cc00:	689b      	ldr	r3, [r3, #8]
    cc02:	895b      	ldrh	r3, [r3, #10]
    cc04:	2b7f      	cmp	r3, #127	; 0x7f
    cc06:	d8ee      	bhi.n	cbe6 <_impl_k_thread_start+0x12>
    cc08:	f7ff fcee 	bl	c5e8 <__must_switch_threads>
    cc0c:	2800      	cmp	r0, #0
    cc0e:	d0ea      	beq.n	cbe6 <_impl_k_thread_start+0x12>
	_update_time_slice_before_swap();
    cc10:	f7ff fdb8 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    cc14:	0028      	movs	r0, r5
    cc16:	f7f5 fec5 	bl	29a4 <__swap>
    cc1a:	e7e6      	b.n	cbea <_impl_k_thread_start+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    cc1c:	b662      	cpsie	i
    cc1e:	e7e4      	b.n	cbea <_impl_k_thread_start+0x16>
    cc20:	20000be8 	.word	0x20000be8

0000cc24 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    cc24:	b510      	push	{r4, lr}
    cc26:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    cc28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cc2a:	9404      	str	r4, [sp, #16]
    cc2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cc2e:	9403      	str	r4, [sp, #12]
    cc30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cc32:	9402      	str	r4, [sp, #8]
    cc34:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cc36:	9401      	str	r4, [sp, #4]
    cc38:	9c08      	ldr	r4, [sp, #32]
    cc3a:	9400      	str	r4, [sp, #0]
    cc3c:	f7f5 ff64 	bl	2b08 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    cc40:	b006      	add	sp, #24
    cc42:	bd10      	pop	{r4, pc}

0000cc44 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    cc44:	b530      	push	{r4, r5, lr}
    cc46:	0004      	movs	r4, r0
    cc48:	b087      	sub	sp, #28
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    cc4a:	980e      	ldr	r0, [sp, #56]	; 0x38
{
    cc4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    cc4e:	9004      	str	r0, [sp, #16]
    cc50:	980d      	ldr	r0, [sp, #52]	; 0x34
    cc52:	9003      	str	r0, [sp, #12]
    cc54:	980c      	ldr	r0, [sp, #48]	; 0x30
    cc56:	9002      	str	r0, [sp, #8]
    cc58:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cc5a:	9001      	str	r0, [sp, #4]
    cc5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    cc5e:	9000      	str	r0, [sp, #0]
    cc60:	0020      	movs	r0, r4
    cc62:	f7f5 ff51 	bl	2b08 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    cc66:	1c6b      	adds	r3, r5, #1
    cc68:	d004      	beq.n	cc74 <_impl_k_thread_create+0x30>
	if (delay == 0) {
    cc6a:	2d00      	cmp	r5, #0
    cc6c:	d105      	bne.n	cc7a <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    cc6e:	0020      	movs	r0, r4
    cc70:	f7ff ffb0 	bl	cbd4 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    cc74:	0020      	movs	r0, r4
    cc76:	b007      	add	sp, #28
    cc78:	bd30      	pop	{r4, r5, pc}
    cc7a:	0029      	movs	r1, r5
    cc7c:	0020      	movs	r0, r4
    cc7e:	f7ff ff53 	bl	cb28 <schedule_new_thread.part.13>
    cc82:	e7f7      	b.n	cc74 <_impl_k_thread_create+0x30>

0000cc84 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    cc84:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    cc86:	b510      	push	{r4, lr}
    cc88:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d000      	beq.n	cc90 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    cc8e:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    cc90:	0020      	movs	r0, r4
    cc92:	f7ff ff23 	bl	cadc <_is_thread_ready>
    cc96:	2800      	cmp	r0, #0
    cc98:	d007      	beq.n	ccaa <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    cc9a:	0020      	movs	r0, r4
    cc9c:	f7ff fc36 	bl	c50c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    cca0:	2308      	movs	r3, #8
    cca2:	7a62      	ldrb	r2, [r4, #9]
    cca4:	4313      	orrs	r3, r2
    cca6:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    cca8:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    ccaa:	2202      	movs	r2, #2
    ccac:	7a63      	ldrb	r3, [r4, #9]
    ccae:	4213      	tst	r3, r2
    ccb0:	d007      	beq.n	ccc2 <_k_thread_single_abort+0x3e>
	node->prev->next = node->next;
    ccb2:	6863      	ldr	r3, [r4, #4]
    ccb4:	6821      	ldr	r1, [r4, #0]
    ccb6:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    ccb8:	6821      	ldr	r1, [r4, #0]
    ccba:	604b      	str	r3, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ccbc:	7a63      	ldrb	r3, [r4, #9]
    ccbe:	4393      	bics	r3, r2
    ccc0:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    ccc2:	6a23      	ldr	r3, [r4, #32]
    ccc4:	3301      	adds	r3, #1
    ccc6:	d0eb      	beq.n	cca0 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    ccc8:	0020      	movs	r0, r4
    ccca:	3010      	adds	r0, #16
    cccc:	f7ff ff12 	bl	caf4 <_abort_timeout>
    ccd0:	e7e6      	b.n	cca0 <_k_thread_single_abort+0x1c>
	...

0000ccd4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    ccd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    ccd6:	4c1c      	ldr	r4, [pc, #112]	; (cd48 <_init_static_threads+0x74>)
{
    ccd8:	b087      	sub	sp, #28
    ccda:	0025      	movs	r5, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    ccdc:	4e1b      	ldr	r6, [pc, #108]	; (cd4c <_init_static_threads+0x78>)
    ccde:	42b4      	cmp	r4, r6
    cce0:	d310      	bcc.n	cd04 <_init_static_threads+0x30>
	--_current->base.sched_locked;
    cce2:	4b1b      	ldr	r3, [pc, #108]	; (cd50 <_init_static_threads+0x7c>)
    cce4:	689a      	ldr	r2, [r3, #8]
    cce6:	7ad3      	ldrb	r3, [r2, #11]
    cce8:	3b01      	subs	r3, #1
    ccea:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile("mrs %0, PRIMASK;"
    ccec:	f3ef 8710 	mrs	r7, PRIMASK
    ccf0:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    ccf2:	42b5      	cmp	r5, r6
    ccf4:	d31a      	bcc.n	cd2c <_init_static_threads+0x58>
	if (key) {
    ccf6:	2f00      	cmp	r7, #0
    ccf8:	d100      	bne.n	ccfc <_init_static_threads+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    ccfa:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    ccfc:	f7ff fca0 	bl	c640 <k_sched_unlock>
}
    cd00:	b007      	add	sp, #28
    cd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    cd04:	6a23      	ldr	r3, [r4, #32]
    cd06:	9304      	str	r3, [sp, #16]
    cd08:	69e3      	ldr	r3, [r4, #28]
    cd0a:	9303      	str	r3, [sp, #12]
    cd0c:	69a3      	ldr	r3, [r4, #24]
    cd0e:	9302      	str	r3, [sp, #8]
    cd10:	6963      	ldr	r3, [r4, #20]
    cd12:	9301      	str	r3, [sp, #4]
    cd14:	6923      	ldr	r3, [r4, #16]
    cd16:	9300      	str	r3, [sp, #0]
    cd18:	68e3      	ldr	r3, [r4, #12]
    cd1a:	68a2      	ldr	r2, [r4, #8]
    cd1c:	6861      	ldr	r1, [r4, #4]
    cd1e:	6820      	ldr	r0, [r4, #0]
    cd20:	f7f5 fef2 	bl	2b08 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    cd24:	6823      	ldr	r3, [r4, #0]
    cd26:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
    cd28:	342c      	adds	r4, #44	; 0x2c
    cd2a:	e7d7      	b.n	ccdc <_init_static_threads+0x8>
		if (thread_data->init_delay != K_FOREVER) {
    cd2c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cd2e:	1c4b      	adds	r3, r1, #1
    cd30:	d004      	beq.n	cd3c <_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    cd32:	6828      	ldr	r0, [r5, #0]
	if (delay == 0) {
    cd34:	2900      	cmp	r1, #0
    cd36:	d103      	bne.n	cd40 <_init_static_threads+0x6c>
    cd38:	f7ff ff4c 	bl	cbd4 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    cd3c:	352c      	adds	r5, #44	; 0x2c
    cd3e:	e7d8      	b.n	ccf2 <_init_static_threads+0x1e>
    cd40:	f7ff fef2 	bl	cb28 <schedule_new_thread.part.13>
    cd44:	e7fa      	b.n	cd3c <_init_static_threads+0x68>
    cd46:	46c0      	nop			; (mov r8, r8)
    cd48:	20002578 	.word	0x20002578
    cd4c:	20002578 	.word	0x20002578
    cd50:	20000be8 	.word	0x20000be8

0000cd54 <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    cd54:	7242      	strb	r2, [r0, #9]
	t->delta_ticks_from_prev = _INACTIVE;
    cd56:	2201      	movs	r2, #1
	thread_base->user_options = (u8_t)options;
    cd58:	7203      	strb	r3, [r0, #8]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    cd5a:	2300      	movs	r3, #0
    cd5c:	4252      	negs	r2, r2
	thread_base->prio = priority;
    cd5e:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    cd60:	72c3      	strb	r3, [r0, #11]
    cd62:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    cd64:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    cd66:	6183      	str	r3, [r0, #24]
	t->func = func;
    cd68:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    cd6a:	4770      	bx	lr

0000cd6c <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cd6e:	2602      	movs	r6, #2
    cd70:	0005      	movs	r5, r0
    cd72:	4276      	negs	r6, r6

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    cd74:	2101      	movs	r1, #1
    cd76:	0028      	movs	r0, r5
    cd78:	4249      	negs	r1, r1
    cd7a:	f7ff faf7 	bl	c36c <k_queue_get>
    cd7e:	1e04      	subs	r4, r0, #0
		if (!work) {
    cd80:	d0f8      	beq.n	cd74 <work_q_main+0x8>
			continue;
		}

		handler = work->handler;
    cd82:	6847      	ldr	r7, [r0, #4]
    cd84:	0031      	movs	r1, r6
    cd86:	3008      	adds	r0, #8
    cd88:	f000 f937 	bl	cffa <atomic_and>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    cd8c:	07c3      	lsls	r3, r0, #31
    cd8e:	d501      	bpl.n	cd94 <work_q_main+0x28>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    cd90:	0020      	movs	r0, r4
    cd92:	47b8      	blx	r7
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    cd94:	f7ff fc88 	bl	c6a8 <_impl_k_yield>
    cd98:	e7ec      	b.n	cd74 <work_q_main+0x8>
	...

0000cd9c <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    cd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd9e:	0004      	movs	r4, r0
    cda0:	b087      	sub	sp, #28
    cda2:	001f      	movs	r7, r3
    cda4:	000d      	movs	r5, r1
    cda6:	0016      	movs	r6, r2
	k_queue_init(&work_q->queue);
    cda8:	f7ff fa86 	bl	c2b8 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    cdac:	2300      	movs	r3, #0
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
    cdae:	0020      	movs	r0, r4
    cdb0:	9305      	str	r3, [sp, #20]
    cdb2:	9304      	str	r3, [sp, #16]
    cdb4:	9302      	str	r3, [sp, #8]
    cdb6:	9301      	str	r3, [sp, #4]
    cdb8:	9703      	str	r7, [sp, #12]
    cdba:	9400      	str	r4, [sp, #0]
    cdbc:	4b03      	ldr	r3, [pc, #12]	; (cdcc <k_work_q_start+0x30>)
    cdbe:	0032      	movs	r2, r6
    cdc0:	0029      	movs	r1, r5
    cdc2:	3010      	adds	r0, #16
    cdc4:	f7ff ff3e 	bl	cc44 <_impl_k_thread_create>
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    cdc8:	b007      	add	sp, #28
    cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdcc:	0000cd6d 	.word	0x0000cd6d

0000cdd0 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cdd0:	7a43      	ldrb	r3, [r0, #9]
    cdd2:	2204      	movs	r2, #4
    cdd4:	0019      	movs	r1, r3
    cdd6:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    cdd8:	221b      	movs	r2, #27
{
    cdda:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cddc:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    cdde:	4213      	tst	r3, r2
    cde0:	d104      	bne.n	cdec <_ready_thread+0x1c>
    cde2:	6a03      	ldr	r3, [r0, #32]
    cde4:	3301      	adds	r3, #1
    cde6:	d101      	bne.n	cdec <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    cde8:	f7ff fb08 	bl	c3fc <_add_thread_to_ready_q>
}
    cdec:	bd10      	pop	{r4, pc}

0000cdee <_unpend_thread>:
	node->prev->next = node->next;
    cdee:	6843      	ldr	r3, [r0, #4]
    cdf0:	6802      	ldr	r2, [r0, #0]
    cdf2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    cdf4:	6802      	ldr	r2, [r0, #0]
    cdf6:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    cdf8:	2202      	movs	r2, #2
    cdfa:	7a43      	ldrb	r3, [r0, #9]
    cdfc:	4393      	bics	r3, r2
    cdfe:	7243      	strb	r3, [r0, #9]
}
    ce00:	4770      	bx	lr
	...

0000ce04 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ce04:	6902      	ldr	r2, [r0, #16]
{
    ce06:	0003      	movs	r3, r0
		return _INACTIVE;
    ce08:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ce0a:	1c51      	adds	r1, r2, #1
    ce0c:	d010      	beq.n	ce30 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ce0e:	4909      	ldr	r1, [pc, #36]	; (ce34 <_abort_timeout+0x30>)
    ce10:	6949      	ldr	r1, [r1, #20]
    ce12:	428b      	cmp	r3, r1
    ce14:	d003      	beq.n	ce1e <_abort_timeout+0x1a>
	return (node == list->tail) ? NULL : node->next;
    ce16:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    ce18:	6908      	ldr	r0, [r1, #16]
    ce1a:	1882      	adds	r2, r0, r2
    ce1c:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    ce1e:	685a      	ldr	r2, [r3, #4]
    ce20:	6819      	ldr	r1, [r3, #0]
	return 0;
    ce22:	2000      	movs	r0, #0
    ce24:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    ce26:	6819      	ldr	r1, [r3, #0]
    ce28:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    ce2a:	2201      	movs	r2, #1
    ce2c:	4252      	negs	r2, r2
    ce2e:	611a      	str	r2, [r3, #16]
}
    ce30:	4770      	bx	lr
    ce32:	46c0      	nop			; (mov r8, r8)
    ce34:	20000be8 	.word	0x20000be8

0000ce38 <_add_timeout.constprop.9>:
	timeout->thread = thread;
    ce38:	2300      	movs	r3, #0
static inline void _add_timeout(struct k_thread *thread,
    ce3a:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    ce3c:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    ce3e:	6083      	str	r3, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    ce40:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    ce42:	429a      	cmp	r2, r3
    ce44:	d10d      	bne.n	ce62 <_add_timeout.constprop.9+0x2a>
	__asm__ volatile("mrs %0, PRIMASK;"
    ce46:	f3ef 8310 	mrs	r3, PRIMASK
    ce4a:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    ce4c:	2201      	movs	r2, #1
    ce4e:	4252      	negs	r2, r2
    ce50:	6102      	str	r2, [r0, #16]
	if (key) {
    ce52:	2b00      	cmp	r3, #0
    ce54:	d100      	bne.n	ce58 <_add_timeout.constprop.9+0x20>
	__asm__ volatile("cpsie i" : : : "memory");
    ce56:	b662      	cpsie	i
		if (timeout->func) {
    ce58:	6943      	ldr	r3, [r0, #20]
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d000      	beq.n	ce60 <_add_timeout.constprop.9+0x28>
			timeout->func(timeout);
    ce5e:	4798      	blx	r3
}
    ce60:	bd70      	pop	{r4, r5, r6, pc}
	return list->head == list;
    ce62:	4a10      	ldr	r2, [pc, #64]	; (cea4 <_add_timeout.constprop.9+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ce64:	4d10      	ldr	r5, [pc, #64]	; (cea8 <_add_timeout.constprop.9+0x70>)
	return list->head == list;
    ce66:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ce68:	42ab      	cmp	r3, r5
    ce6a:	d10c      	bne.n	ce86 <_add_timeout.constprop.9+0x4e>
	node->next = list;
    ce6c:	6005      	str	r5, [r0, #0]
	node->prev = list->tail;
    ce6e:	6953      	ldr	r3, [r2, #20]
    ce70:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    ce72:	6953      	ldr	r3, [r2, #20]
    ce74:	6018      	str	r0, [r3, #0]
	list->tail = node;
    ce76:	6150      	str	r0, [r2, #20]
    ce78:	e7f2      	b.n	ce60 <_add_timeout.constprop.9+0x28>
		*delta -= in_q->delta_ticks_from_prev;
    ce7a:	1b09      	subs	r1, r1, r4
    ce7c:	6101      	str	r1, [r0, #16]
	return (node == list->tail) ? NULL : node->next;
    ce7e:	6951      	ldr	r1, [r2, #20]
    ce80:	428b      	cmp	r3, r1
    ce82:	d0f3      	beq.n	ce6c <_add_timeout.constprop.9+0x34>
    ce84:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    ce86:	2b00      	cmp	r3, #0
    ce88:	d0f0      	beq.n	ce6c <_add_timeout.constprop.9+0x34>
		if (*delta <= in_q->delta_ticks_from_prev) {
    ce8a:	6901      	ldr	r1, [r0, #16]
    ce8c:	691c      	ldr	r4, [r3, #16]
    ce8e:	42a1      	cmp	r1, r4
    ce90:	dcf3      	bgt.n	ce7a <_add_timeout.constprop.9+0x42>
		node->prev = insert_point->prev;
    ce92:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    ce94:	1a61      	subs	r1, r4, r1
    ce96:	6119      	str	r1, [r3, #16]
    ce98:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
    ce9a:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
    ce9c:	685a      	ldr	r2, [r3, #4]
    ce9e:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
    cea0:	6058      	str	r0, [r3, #4]
    cea2:	e7dd      	b.n	ce60 <_add_timeout.constprop.9+0x28>
    cea4:	20000be8 	.word	0x20000be8
    cea8:	20000bf8 	.word	0x20000bf8

0000ceac <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
    ceac:	b570      	push	{r4, r5, r6, lr}
    ceae:	0005      	movs	r5, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    ceb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    ceb2:	0004      	movs	r4, r0
    ceb4:	3518      	adds	r5, #24
	if (timer->period > 0) {
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	dd09      	ble.n	cece <_timer_expiration_handler+0x22>
	__asm__ volatile("mrs %0, PRIMASK;"
    ceba:	f3ef 8610 	mrs	r6, PRIMASK
    cebe:	b672      	cpsid	i
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    cec0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    cec2:	0029      	movs	r1, r5
    cec4:	f7ff ffb8 	bl	ce38 <_add_timeout.constprop.9>
	if (key) {
    cec8:	2e00      	cmp	r6, #0
    ceca:	d100      	bne.n	cece <_timer_expiration_handler+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    cecc:	b662      	cpsie	i
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    cece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ced0:	3301      	adds	r3, #1
    ced2:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    ced4:	6a23      	ldr	r3, [r4, #32]
    ced6:	2b00      	cmp	r3, #0
    ced8:	d001      	beq.n	cede <_timer_expiration_handler+0x32>
		timer->expiry_fn(timer);
    ceda:	0020      	movs	r0, r4
    cedc:	4798      	blx	r3
	return list->head == list;
    cede:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cee0:	42ac      	cmp	r4, r5
    cee2:	d00f      	beq.n	cf04 <_timer_expiration_handler+0x58>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    cee4:	2c00      	cmp	r4, #0
    cee6:	d00d      	beq.n	cf04 <_timer_expiration_handler+0x58>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    cee8:	0020      	movs	r0, r4
    ceea:	f7ff ff80 	bl	cdee <_unpend_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
    ceee:	f3ef 8510 	mrs	r5, PRIMASK
    cef2:	b672      	cpsid	i

	key = irq_lock();
	_ready_thread(thread);
    cef4:	0020      	movs	r0, r4
    cef6:	f7ff ff6b 	bl	cdd0 <_ready_thread>
	if (key) {
    cefa:	2d00      	cmp	r5, #0
    cefc:	d100      	bne.n	cf00 <_timer_expiration_handler+0x54>
	__asm__ volatile("cpsie i" : : : "memory");
    cefe:	b662      	cpsie	i
    cf00:	2300      	movs	r3, #0
    cf02:	65e3      	str	r3, [r4, #92]	; 0x5c
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
    cf04:	bd70      	pop	{r4, r5, r6, pc}

0000cf06 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    cf06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cf08:	3203      	adds	r2, #3
    cf0a:	3103      	adds	r1, #3
    cf0c:	0892      	lsrs	r2, r2, #2
    cf0e:	0889      	lsrs	r1, r1, #2
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
    cf10:	9200      	str	r2, [sp, #0]
{
    cf12:	0004      	movs	r4, r0
	duration_in_ticks = _ms_to_ticks(duration);
    cf14:	9101      	str	r1, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    cf16:	f3ef 8510 	mrs	r5, PRIMASK
    cf1a:	b672      	cpsid	i

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
    cf1c:	6903      	ldr	r3, [r0, #16]
    cf1e:	3301      	adds	r3, #1
    cf20:	d001      	beq.n	cf26 <_impl_k_timer_start+0x20>
		_abort_timeout(&timer->timeout);
    cf22:	f7ff ff6f 	bl	ce04 <_abort_timeout>
	}

	timer->period = period_in_ticks;
    cf26:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0;
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    cf28:	0021      	movs	r1, r4
	timer->period = period_in_ticks;
    cf2a:	62a3      	str	r3, [r4, #40]	; 0x28
	timer->status = 0;
    cf2c:	2300      	movs	r3, #0
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    cf2e:	9a01      	ldr	r2, [sp, #4]
	timer->status = 0;
    cf30:	62e3      	str	r3, [r4, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    cf32:	3118      	adds	r1, #24
    cf34:	0020      	movs	r0, r4
    cf36:	f7ff ff7f 	bl	ce38 <_add_timeout.constprop.9>
	if (key) {
    cf3a:	2d00      	cmp	r5, #0
    cf3c:	d100      	bne.n	cf40 <_impl_k_timer_start+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    cf3e:	b662      	cpsie	i
	irq_unlock(key);
}
    cf40:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

0000cf44 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
    cf44:	b570      	push	{r4, r5, r6, lr}
    cf46:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    cf48:	f3ef 8510 	mrs	r5, PRIMASK
    cf4c:	b672      	cpsid	i
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
    cf4e:	f7ff ff59 	bl	ce04 <_abort_timeout>
	if (key) {
    cf52:	2d00      	cmp	r5, #0
    cf54:	d100      	bne.n	cf58 <_impl_k_timer_stop+0x14>
	__asm__ volatile("cpsie i" : : : "memory");
    cf56:	b662      	cpsie	i

	irq_unlock(key);

	if (inactive) {
    cf58:	1c43      	adds	r3, r0, #1
    cf5a:	d01c      	beq.n	cf96 <_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn) {
    cf5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d001      	beq.n	cf66 <_impl_k_timer_stop+0x22>
		timer->stop_fn(timer);
    cf62:	0020      	movs	r0, r4
    cf64:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
    cf66:	f3ef 8510 	mrs	r5, PRIMASK
    cf6a:	b672      	cpsid	i
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
    cf6c:	0023      	movs	r3, r4
	if (_handling_timeouts) {
    cf6e:	4a16      	ldr	r2, [pc, #88]	; (cfc8 <_impl_k_timer_stop+0x84>)
    cf70:	3318      	adds	r3, #24
    cf72:	6812      	ldr	r2, [r2, #0]
    cf74:	69a0      	ldr	r0, [r4, #24]
    cf76:	2a00      	cmp	r2, #0
    cf78:	d016      	beq.n	cfa8 <_impl_k_timer_stop+0x64>
    cf7a:	4283      	cmp	r3, r0
    cf7c:	d100      	bne.n	cf80 <_impl_k_timer_stop+0x3c>
    cf7e:	2000      	movs	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    cf80:	2800      	cmp	r0, #0
    cf82:	d109      	bne.n	cf98 <_impl_k_timer_stop+0x54>
    cf84:	f3ef 8305 	mrs	r3, IPSR
    cf88:	2b0d      	cmp	r3, #13
    cf8a:	d801      	bhi.n	cf90 <_impl_k_timer_stop+0x4c>
    cf8c:	2b03      	cmp	r3, #3
    cf8e:	d116      	bne.n	cfbe <_impl_k_timer_stop+0x7a>
	if (key) {
    cf90:	2d00      	cmp	r5, #0
    cf92:	d100      	bne.n	cf96 <_impl_k_timer_stop+0x52>
	__asm__ volatile("cpsie i" : : : "memory");
    cf94:	b662      	cpsie	i
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
	}
}
    cf96:	bd70      	pop	{r4, r5, r6, pc}
			if (_is_thread_timeout_expired(thread)) {
    cf98:	6a03      	ldr	r3, [r0, #32]
    cf9a:	3302      	adds	r3, #2
    cf9c:	d108      	bne.n	cfb0 <_impl_k_timer_stop+0x6c>
	return (node == list->tail) ? NULL : node->next;
    cf9e:	69e3      	ldr	r3, [r4, #28]
    cfa0:	4298      	cmp	r0, r3
    cfa2:	d0ef      	beq.n	cf84 <_impl_k_timer_stop+0x40>
    cfa4:	6800      	ldr	r0, [r0, #0]
    cfa6:	e7eb      	b.n	cf80 <_impl_k_timer_stop+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cfa8:	4283      	cmp	r3, r0
    cfaa:	d0eb      	beq.n	cf84 <_impl_k_timer_stop+0x40>
	if (thread) {
    cfac:	2800      	cmp	r0, #0
    cfae:	d0e9      	beq.n	cf84 <_impl_k_timer_stop+0x40>
			if (_is_thread_timeout_expired(thread)) {
    cfb0:	0004      	movs	r4, r0
		_unpend_thread(thread);
    cfb2:	f7ff ff1c 	bl	cdee <_unpend_thread>
		_ready_thread(pending_thread);
    cfb6:	0020      	movs	r0, r4
    cfb8:	f7ff ff0a 	bl	cdd0 <_ready_thread>
    cfbc:	e7e2      	b.n	cf84 <_impl_k_timer_stop+0x40>
		_reschedule_threads(key);
    cfbe:	0028      	movs	r0, r5
    cfc0:	f7ff fb24 	bl	c60c <_reschedule_threads>
    cfc4:	e7e7      	b.n	cf96 <_impl_k_timer_stop+0x52>
    cfc6:	46c0      	nop			; (mov r8, r8)
    cfc8:	20000de0 	.word	0x20000de0

0000cfcc <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
    cfcc:	6800      	ldr	r0, [r0, #0]
}
    cfce:	4770      	bx	lr

0000cfd0 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    cfd0:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    cfd2:	f3ef 8210 	mrs	r2, PRIMASK
    cfd6:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    cfd8:	6800      	ldr	r0, [r0, #0]
	*target = value;
    cfda:	6019      	str	r1, [r3, #0]
	if (key) {
    cfdc:	2a00      	cmp	r2, #0
    cfde:	d100      	bne.n	cfe2 <atomic_set+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    cfe0:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    cfe2:	4770      	bx	lr

0000cfe4 <atomic_or>:
	__asm__ volatile("mrs %0, PRIMASK;"
    cfe4:	f3ef 8210 	mrs	r2, PRIMASK
    cfe8:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    cfea:	6803      	ldr	r3, [r0, #0]
	*target |= value;
    cfec:	4319      	orrs	r1, r3
    cfee:	6001      	str	r1, [r0, #0]
	if (key) {
    cff0:	2a00      	cmp	r2, #0
    cff2:	d100      	bne.n	cff6 <atomic_or+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    cff4:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    cff6:	0018      	movs	r0, r3
    cff8:	4770      	bx	lr

0000cffa <atomic_and>:
	__asm__ volatile("mrs %0, PRIMASK;"
    cffa:	f3ef 8210 	mrs	r2, PRIMASK
    cffe:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    d000:	6803      	ldr	r3, [r0, #0]
	*target &= value;
    d002:	4019      	ands	r1, r3
    d004:	6001      	str	r1, [r0, #0]
	if (key) {
    d006:	2a00      	cmp	r2, #0
    d008:	d100      	bne.n	d00c <atomic_and+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    d00a:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    d00c:	0018      	movs	r0, r3
    d00e:	4770      	bx	lr

0000d010 <sys_dlist_remove>:
	node->prev->next = node->next;
    d010:	6802      	ldr	r2, [r0, #0]
    d012:	6843      	ldr	r3, [r0, #4]
    d014:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    d016:	6802      	ldr	r2, [r0, #0]
    d018:	6053      	str	r3, [r2, #4]
}
    d01a:	4770      	bx	lr

0000d01c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    d01c:	b570      	push	{r4, r5, r6, lr}
    d01e:	2414      	movs	r4, #20
    d020:	000d      	movs	r5, r1
    d022:	0016      	movs	r6, r2
    d024:	434c      	muls	r4, r1
    d026:	1904      	adds	r4, r0, r4
	for (; last_registered >= 0; last_registered--) {
    d028:	2d00      	cmp	r5, #0
    d02a:	da00      	bge.n	d02e <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    d02c:	bd70      	pop	{r4, r5, r6, pc}
	event->poller = NULL;
    d02e:	2300      	movs	r3, #0
    d030:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
    d032:	7b63      	ldrb	r3, [r4, #13]
    d034:	071b      	lsls	r3, r3, #28
    d036:	0f1b      	lsrs	r3, r3, #28
    d038:	2b02      	cmp	r3, #2
    d03a:	d003      	beq.n	d044 <clear_event_registrations+0x28>
    d03c:	2b04      	cmp	r3, #4
    d03e:	d001      	beq.n	d044 <clear_event_registrations+0x28>
    d040:	2b01      	cmp	r3, #1
    d042:	d102      	bne.n	d04a <clear_event_registrations+0x2e>
		sys_dlist_remove(&event->_node);
    d044:	0020      	movs	r0, r4
    d046:	f7ff ffe3 	bl	d010 <sys_dlist_remove>
	if (key) {
    d04a:	2e00      	cmp	r6, #0
    d04c:	d100      	bne.n	d050 <clear_event_registrations+0x34>
	__asm__ volatile("cpsie i" : : : "memory");
    d04e:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    d050:	f3ef 8610 	mrs	r6, PRIMASK
    d054:	b672      	cpsid	i
	for (; last_registered >= 0; last_registered--) {
    d056:	3d01      	subs	r5, #1
    d058:	3c14      	subs	r4, #20
    d05a:	e7e5      	b.n	d028 <clear_event_registrations+0xc>

0000d05c <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
    d05c:	2300      	movs	r3, #0
{
    d05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    d060:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    d062:	6883      	ldr	r3, [r0, #8]
{
    d064:	0006      	movs	r6, r0
    d066:	9101      	str	r1, [sp, #4]
    d068:	0017      	movs	r7, r2
	if (!event->poller) {
    d06a:	2b00      	cmp	r3, #0
    d06c:	d039      	beq.n	d0e2 <_signal_poll_event+0x86>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    d06e:	681c      	ldr	r4, [r3, #0]
	thread->base.thread_state &= ~states;
    d070:	2220      	movs	r2, #32
    d072:	7a63      	ldrb	r3, [r4, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    d074:	2502      	movs	r5, #2
    d076:	0019      	movs	r1, r3
    d078:	4391      	bics	r1, r2
    d07a:	7261      	strb	r1, [r4, #9]
    d07c:	422b      	tst	r3, r5
    d07e:	d030      	beq.n	d0e2 <_signal_poll_event+0x86>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    d080:	6a23      	ldr	r3, [r4, #32]
    d082:	3302      	adds	r3, #2
    d084:	d03c      	beq.n	d100 <_signal_poll_event+0xa4>
	sys_dlist_remove(&thread->base.k_q_node);
    d086:	0020      	movs	r0, r4
    d088:	f7ff ffc2 	bl	d010 <sys_dlist_remove>
	return _abort_timeout(&thread->base.timeout);
    d08c:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PENDING;
    d08e:	7a63      	ldrb	r3, [r4, #9]
    d090:	3010      	adds	r0, #16
    d092:	43ab      	bics	r3, r5
    d094:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    d096:	6a23      	ldr	r3, [r4, #32]
    d098:	1c5a      	adds	r2, r3, #1
    d09a:	d00c      	beq.n	d0b6 <_signal_poll_event+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    d09c:	4a1f      	ldr	r2, [pc, #124]	; (d11c <_signal_poll_event+0xc0>)
    d09e:	6952      	ldr	r2, [r2, #20]
    d0a0:	4290      	cmp	r0, r2
    d0a2:	d003      	beq.n	d0ac <_signal_poll_event+0x50>
	return (node == list->tail) ? NULL : node->next;
    d0a4:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    d0a6:	6911      	ldr	r1, [r2, #16]
    d0a8:	18cb      	adds	r3, r1, r3
    d0aa:	6113      	str	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    d0ac:	f7ff ffb0 	bl	d010 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    d0b0:	2301      	movs	r3, #1
    d0b2:	425b      	negs	r3, r3
    d0b4:	6223      	str	r3, [r4, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    d0b6:	9b01      	ldr	r3, [sp, #4]
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d01e      	beq.n	d0fa <_signal_poll_event+0x9e>
    d0bc:	2300      	movs	r3, #0
	return !(_is_thread_prevented_from_running(thread) ||
    d0be:	201f      	movs	r0, #31
    d0c0:	7a65      	ldrb	r5, [r4, #9]
    d0c2:	65e3      	str	r3, [r4, #92]	; 0x5c
    d0c4:	4005      	ands	r5, r0
    d0c6:	d10c      	bne.n	d0e2 <_signal_poll_event+0x86>
    d0c8:	6a23      	ldr	r3, [r4, #32]
    d0ca:	3301      	adds	r3, #1
    d0cc:	d109      	bne.n	d0e2 <_signal_poll_event+0x86>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    d0ce:	0020      	movs	r0, r4
    d0d0:	f7ff f994 	bl	c3fc <_add_thread_to_ready_q>
    d0d4:	f3ef 8305 	mrs	r3, IPSR
    d0d8:	2b0d      	cmp	r3, #13
    d0da:	d801      	bhi.n	d0e0 <_signal_poll_event+0x84>
    d0dc:	2b03      	cmp	r3, #3
    d0de:	d112      	bne.n	d106 <_signal_poll_event+0xaa>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    d0e0:	603d      	str	r5, [r7, #0]
	event->state |= state;
    d0e2:	7b73      	ldrb	r3, [r6, #13]
    d0e4:	9901      	ldr	r1, [sp, #4]
    d0e6:	091a      	lsrs	r2, r3, #4
    d0e8:	4311      	orrs	r1, r2
    d0ea:	010a      	lsls	r2, r1, #4
    d0ec:	210f      	movs	r1, #15
	event->poller = NULL;
    d0ee:	2000      	movs	r0, #0
	event->state |= state;
    d0f0:	400b      	ands	r3, r1
    d0f2:	4313      	orrs	r3, r2
	event->poller = NULL;
    d0f4:	60b0      	str	r0, [r6, #8]
	event->state |= state;
    d0f6:	7373      	strb	r3, [r6, #13]

ready_event:
	set_event_ready(event, state);
	return 0;
}
    d0f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	_set_thread_return_value(thread,
    d0fa:	2304      	movs	r3, #4
    d0fc:	425b      	negs	r3, r3
    d0fe:	e7de      	b.n	d0be <_signal_poll_event+0x62>
		return -EAGAIN;
    d100:	200b      	movs	r0, #11
    d102:	4240      	negs	r0, r0
    d104:	e7f8      	b.n	d0f8 <_signal_poll_event+0x9c>
	return _is_preempt(_current) && __must_switch_threads();
    d106:	4b05      	ldr	r3, [pc, #20]	; (d11c <_signal_poll_event+0xc0>)
    d108:	689b      	ldr	r3, [r3, #8]
    d10a:	895b      	ldrh	r3, [r3, #10]
    d10c:	2b7f      	cmp	r3, #127	; 0x7f
    d10e:	d8e7      	bhi.n	d0e0 <_signal_poll_event+0x84>
    d110:	f7ff fa6a 	bl	c5e8 <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    d114:	0005      	movs	r5, r0
    d116:	1e68      	subs	r0, r5, #1
    d118:	4185      	sbcs	r5, r0
    d11a:	e7e1      	b.n	d0e0 <_signal_poll_event+0x84>
    d11c:	20000be8 	.word	0x20000be8

0000d120 <add_event>:
	return list->head == list;
    d120:	6803      	ldr	r3, [r0, #0]
{
    d122:	b530      	push	{r4, r5, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    d124:	4298      	cmp	r0, r3
    d126:	d00b      	beq.n	d140 <add_event+0x20>
    d128:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    d12a:	2c00      	cmp	r4, #0
    d12c:	d008      	beq.n	d140 <add_event+0x20>
    d12e:	68a5      	ldr	r5, [r4, #8]
    d130:	6812      	ldr	r2, [r2, #0]
    d132:	682d      	ldr	r5, [r5, #0]
    d134:	7a92      	ldrb	r2, [r2, #10]
    d136:	7aad      	ldrb	r5, [r5, #10]
    d138:	b252      	sxtb	r2, r2
    d13a:	b26d      	sxtb	r5, r5
    d13c:	4295      	cmp	r5, r2
    d13e:	da18      	bge.n	d172 <add_event+0x52>
	node->next = list;
    d140:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    d142:	6843      	ldr	r3, [r0, #4]
    d144:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    d146:	6843      	ldr	r3, [r0, #4]
    d148:	6019      	str	r1, [r3, #0]
	list->tail = node;
    d14a:	6041      	str	r1, [r0, #4]
    d14c:	e00b      	b.n	d166 <add_event+0x46>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    d14e:	689d      	ldr	r5, [r3, #8]
    d150:	682d      	ldr	r5, [r5, #0]
    d152:	7aad      	ldrb	r5, [r5, #10]
    d154:	b26d      	sxtb	r5, r5
    d156:	4295      	cmp	r5, r2
    d158:	dd06      	ble.n	d168 <add_event+0x48>
		node->prev = insert_point->prev;
    d15a:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    d15c:	600b      	str	r3, [r1, #0]
		node->prev = insert_point->prev;
    d15e:	604a      	str	r2, [r1, #4]
		insert_point->prev->next = node;
    d160:	685a      	ldr	r2, [r3, #4]
    d162:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    d164:	6059      	str	r1, [r3, #4]
}
    d166:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    d168:	42a3      	cmp	r3, r4
    d16a:	d004      	beq.n	d176 <add_event+0x56>
    d16c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    d16e:	2b00      	cmp	r3, #0
    d170:	d001      	beq.n	d176 <add_event+0x56>
    d172:	2b00      	cmp	r3, #0
    d174:	d1eb      	bne.n	d14e <add_event+0x2e>
	node->next = list;
    d176:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    d178:	604c      	str	r4, [r1, #4]
    d17a:	e7e4      	b.n	d146 <add_event+0x26>

0000d17c <k_poll_event_init>:
{
    d17c:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
    d17e:	2400      	movs	r4, #0
    d180:	6084      	str	r4, [r0, #8]
	event->type = type;
    d182:	340f      	adds	r4, #15
    d184:	4021      	ands	r1, r4
    d186:	000d      	movs	r5, r1
    d188:	7b41      	ldrb	r1, [r0, #13]
	event->obj = obj;
    d18a:	6103      	str	r3, [r0, #16]
	event->type = type;
    d18c:	43a1      	bics	r1, r4
	event->state = K_POLL_STATE_NOT_READY;
    d18e:	4329      	orrs	r1, r5
    d190:	4021      	ands	r1, r4
    d192:	7341      	strb	r1, [r0, #13]
	event->mode = mode;
    d194:	2101      	movs	r1, #1
    d196:	400a      	ands	r2, r1
    d198:	0014      	movs	r4, r2
    d19a:	7b82      	ldrb	r2, [r0, #14]
    d19c:	438a      	bics	r2, r1
    d19e:	4322      	orrs	r2, r4
    d1a0:	7382      	strb	r2, [r0, #14]
	event->unused = 0;
    d1a2:	89c2      	ldrh	r2, [r0, #14]
    d1a4:	400a      	ands	r2, r1
    d1a6:	81c2      	strh	r2, [r0, #14]
}
    d1a8:	bd30      	pop	{r4, r5, pc}
	...

0000d1ac <k_poll>:
{
    d1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ae:	b089      	sub	sp, #36	; 0x24
    d1b0:	0007      	movs	r7, r0
    d1b2:	9102      	str	r1, [sp, #8]
    d1b4:	9201      	str	r2, [sp, #4]
    d1b6:	f3ef 8010 	mrs	r0, PRIMASK
    d1ba:	b672      	cpsid	i
	thread->base.thread_state |= states;
    d1bc:	2320      	movs	r3, #32
	set_polling_state(_current);
    d1be:	4a45      	ldr	r2, [pc, #276]	; (d2d4 <k_poll+0x128>)
    d1c0:	6891      	ldr	r1, [r2, #8]
    d1c2:	7a4c      	ldrb	r4, [r1, #9]
    d1c4:	4323      	orrs	r3, r4
    d1c6:	724b      	strb	r3, [r1, #9]
	if (key) {
    d1c8:	2800      	cmp	r0, #0
    d1ca:	d100      	bne.n	d1ce <k_poll+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    d1cc:	b662      	cpsie	i
	int last_registered = -1, rc;
    d1ce:	2501      	movs	r5, #1
    d1d0:	003c      	movs	r4, r7
	for (int ii = 0; ii < num_events; ii++) {
    d1d2:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current };
    d1d4:	6893      	ldr	r3, [r2, #8]
	int last_registered = -1, rc;
    d1d6:	426d      	negs	r5, r5
	struct _poller poller = { .thread = _current };
    d1d8:	9305      	str	r3, [sp, #20]
	for (int ii = 0; ii < num_events; ii++) {
    d1da:	9b02      	ldr	r3, [sp, #8]
    d1dc:	429e      	cmp	r6, r3
    d1de:	db14      	blt.n	d20a <k_poll+0x5e>
	__asm__ volatile("mrs %0, PRIMASK;"
    d1e0:	f3ef 8610 	mrs	r6, PRIMASK
    d1e4:	b672      	cpsid	i
	return _is_thread_polling(_current);
    d1e6:	4b3b      	ldr	r3, [pc, #236]	; (d2d4 <k_poll+0x128>)
	if (!is_polling()) {
    d1e8:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    d1ea:	689a      	ldr	r2, [r3, #8]
    d1ec:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    d1ee:	001c      	movs	r4, r3
    d1f0:	400c      	ands	r4, r1
    d1f2:	d144      	bne.n	d27e <k_poll+0xd2>
	clear_event_registrations(events, last_registered, key);
    d1f4:	0032      	movs	r2, r6
    d1f6:	0029      	movs	r1, r5
    d1f8:	0038      	movs	r0, r7
    d1fa:	f7ff ff0f 	bl	d01c <clear_event_registrations>
	if (key) {
    d1fe:	2e00      	cmp	r6, #0
    d200:	d100      	bne.n	d204 <k_poll+0x58>
	__asm__ volatile("cpsie i" : : : "memory");
    d202:	b662      	cpsie	i
}
    d204:	0020      	movs	r0, r4
    d206:	b009      	add	sp, #36	; 0x24
    d208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    d20a:	f3ef 8310 	mrs	r3, PRIMASK
    d20e:	b672      	cpsid	i
	switch (event->type) {
    d210:	7b62      	ldrb	r2, [r4, #13]
    d212:	9303      	str	r3, [sp, #12]
    d214:	0713      	lsls	r3, r2, #28
    d216:	0f1b      	lsrs	r3, r3, #28
    d218:	2b02      	cmp	r3, #2
    d21a:	d003      	beq.n	d224 <k_poll+0x78>
    d21c:	2b04      	cmp	r3, #4
    d21e:	d004      	beq.n	d22a <k_poll+0x7e>
    d220:	2b01      	cmp	r3, #1
    d222:	d106      	bne.n	d232 <k_poll+0x86>
		if (event->signal->signaled) {
    d224:	6921      	ldr	r1, [r4, #16]
    d226:	6889      	ldr	r1, [r1, #8]
    d228:	e001      	b.n	d22e <k_poll+0x82>
		if (!k_queue_is_empty(event->queue)) {
    d22a:	6921      	ldr	r1, [r4, #16]
    d22c:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
    d22e:	2900      	cmp	r1, #0
    d230:	d140      	bne.n	d2b4 <k_poll+0x108>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    d232:	9a01      	ldr	r2, [sp, #4]
    d234:	2a00      	cmp	r2, #0
    d236:	d018      	beq.n	d26a <k_poll+0xbe>
    d238:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    d23a:	4a26      	ldr	r2, [pc, #152]	; (d2d4 <k_poll+0x128>)
		} else if (timeout != K_NO_WAIT && is_polling()) {
    d23c:	6892      	ldr	r2, [r2, #8]
    d23e:	7a52      	ldrb	r2, [r2, #9]
    d240:	420a      	tst	r2, r1
    d242:	d012      	beq.n	d26a <k_poll+0xbe>
	switch (event->type) {
    d244:	2b02      	cmp	r3, #2
    d246:	d007      	beq.n	d258 <k_poll+0xac>
    d248:	2b04      	cmp	r3, #4
    d24a:	d015      	beq.n	d278 <k_poll+0xcc>
    d24c:	2b01      	cmp	r3, #1
    d24e:	d109      	bne.n	d264 <k_poll+0xb8>
		add_event(&event->signal->poll_events, event, poller);
    d250:	aa05      	add	r2, sp, #20
    d252:	0021      	movs	r1, r4
    d254:	6920      	ldr	r0, [r4, #16]
    d256:	e003      	b.n	d260 <k_poll+0xb4>
		add_event(&event->sem->poll_events, event, poller);
    d258:	6920      	ldr	r0, [r4, #16]
    d25a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
    d25c:	0021      	movs	r1, r4
    d25e:	aa05      	add	r2, sp, #20
		add_event(&event->signal->poll_events, event, poller);
    d260:	f7ff ff5e 	bl	d120 <add_event>
	event->poller = poller;
    d264:	ab05      	add	r3, sp, #20
    d266:	60a3      	str	r3, [r4, #8]
				++last_registered;
    d268:	3501      	adds	r5, #1
	if (key) {
    d26a:	9b03      	ldr	r3, [sp, #12]
    d26c:	2b00      	cmp	r3, #0
    d26e:	d100      	bne.n	d272 <k_poll+0xc6>
	__asm__ volatile("cpsie i" : : : "memory");
    d270:	b662      	cpsie	i
	for (int ii = 0; ii < num_events; ii++) {
    d272:	3601      	adds	r6, #1
    d274:	3414      	adds	r4, #20
    d276:	e7b0      	b.n	d1da <k_poll+0x2e>
		add_event(&event->queue->poll_events, event, poller);
    d278:	6920      	ldr	r0, [r4, #16]
    d27a:	3008      	adds	r0, #8
    d27c:	e7ee      	b.n	d25c <k_poll+0xb0>
	thread->base.thread_state &= ~states;
    d27e:	438b      	bics	r3, r1
    d280:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    d282:	9b01      	ldr	r3, [sp, #4]
    d284:	2b00      	cmp	r3, #0
    d286:	d105      	bne.n	d294 <k_poll+0xe8>
	if (key) {
    d288:	2e00      	cmp	r6, #0
    d28a:	d100      	bne.n	d28e <k_poll+0xe2>
	__asm__ volatile("cpsie i" : : : "memory");
    d28c:	b662      	cpsie	i
		return -EAGAIN;
    d28e:	240b      	movs	r4, #11
    d290:	4264      	negs	r4, r4
    d292:	e7b7      	b.n	d204 <k_poll+0x58>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    d294:	a806      	add	r0, sp, #24
	_pend_current_thread(&wait_q, timeout);
    d296:	9901      	ldr	r1, [sp, #4]
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    d298:	9006      	str	r0, [sp, #24]
    d29a:	6040      	str	r0, [r0, #4]
	_pend_current_thread(&wait_q, timeout);
    d29c:	f7ff f994 	bl	c5c8 <_pend_current_thread>
	_update_time_slice_before_swap();
    d2a0:	f7ff fa70 	bl	c784 <_update_time_slice_before_swap>
	return __swap(key);
    d2a4:	0030      	movs	r0, r6
    d2a6:	f7f5 fb7d 	bl	29a4 <__swap>
    d2aa:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    d2ac:	f3ef 8610 	mrs	r6, PRIMASK
    d2b0:	b672      	cpsid	i
    d2b2:	e79f      	b.n	d1f4 <k_poll+0x48>
	event->poller = NULL;
    d2b4:	2100      	movs	r1, #0
    d2b6:	60a1      	str	r1, [r4, #8]
	event->state |= state;
    d2b8:	0911      	lsrs	r1, r2, #4
    d2ba:	430b      	orrs	r3, r1
    d2bc:	210f      	movs	r1, #15
    d2be:	011b      	lsls	r3, r3, #4
    d2c0:	400a      	ands	r2, r1
    d2c2:	4313      	orrs	r3, r2
    d2c4:	7363      	strb	r3, [r4, #13]
			clear_polling_state(_current);
    d2c6:	4b03      	ldr	r3, [pc, #12]	; (d2d4 <k_poll+0x128>)
    d2c8:	3111      	adds	r1, #17
    d2ca:	689a      	ldr	r2, [r3, #8]
    d2cc:	7a53      	ldrb	r3, [r2, #9]
    d2ce:	438b      	bics	r3, r1
    d2d0:	7253      	strb	r3, [r2, #9]
    d2d2:	e7ca      	b.n	d26a <k_poll+0xbe>
    d2d4:	20000be8 	.word	0x20000be8

0000d2d8 <_handle_obj_poll_events>:

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    d2d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return list->head == list;
    d2da:	6804      	ldr	r4, [r0, #0]
    d2dc:	000d      	movs	r5, r1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    d2de:	42a0      	cmp	r0, r4
    d2e0:	d101      	bne.n	d2e6 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    d2e2:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    d2e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    d2e6:	0020      	movs	r0, r4
    d2e8:	f7ff fe92 	bl	d010 <sys_dlist_remove>
	if (!poll_event) {
    d2ec:	2c00      	cmp	r4, #0
    d2ee:	d0f8      	beq.n	d2e2 <_handle_obj_poll_events+0xa>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
    d2f0:	aa01      	add	r2, sp, #4
    d2f2:	0029      	movs	r1, r5
    d2f4:	0020      	movs	r0, r4
    d2f6:	f7ff feb1 	bl	d05c <_signal_poll_event>
	return must_reschedule;
    d2fa:	9801      	ldr	r0, [sp, #4]
    d2fc:	e7f2      	b.n	d2e4 <_handle_obj_poll_events+0xc>

0000d2fe <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    d2fe:	4770      	bx	lr
