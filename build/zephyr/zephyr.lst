
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
GEN_ABS_SYM_END
       0:	200019d8 	.word	0x200019d8
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
       4:	00000cd5 	.word	0x00000cd5
}
       8:	00000d09 	.word	0x00000d09
       c:	00000b89 	.word	0x00000b89
      10:	00000b89 	.word	0x00000b89
      14:	00000b89 	.word	0x00000b89
      18:	00000b89 	.word	0x00000b89
      1c:	00000b89 	.word	0x00000b89
      20:	00000b89 	.word	0x00000b89
      24:	00000b89 	.word	0x00000b89
      28:	00000b89 	.word	0x00000b89
      2c:	0000099d 	.word	0x0000099d
      30:	00000b89 	.word	0x00000b89
      34:	00000b89 	.word	0x00000b89
      38:	00000941 	.word	0x00000941
      3c:	00000b89 	.word	0x00000b89

00000040 <_irq_vector_table>:
      40:	00000c9d 0000830b 00000c9d 00000c9d     ................
      50:	00000c9d 00000c9d 00000c9d 00000c9d     ................
      60:	00000c9d 00000c9d 00000c9d 00000c9d     ................
      70:	00000c9d 00000c9d 00000c9d 00000c9d     ................
      80:	00000c9d 00000c9d 00000c9d 00000c9d     ................
      90:	00000c9d 00000c9d 00000c9d 00000c9d     ................
      a0:	00000c9d 00000c9d                       ........

000000a8 <_sw_isr_table>:
      a8:	00000000 000017ad 00000000 00000afd     ................
      b8:	00000000 00000afd 00000000 00000afd     ................
      c8:	00000000 00000afd 00000000 00000afd     ................
      d8:	20002494 000019b1 00000000 00000afd     .$. ............
      e8:	00000000 00000afd 00000000 00000afd     ................
      f8:	00000000 00000afd 00000000 000082c9     ................
     108:	00000000 00000afd 00000000 00008303     ................
     118:	00000000 00000afd 00000000 00000afd     ................
     128:	00000000 00000afd 00000000 00001eb1     ................
     138:	00000000 00000afd 00000000 00000afd     ................
     148:	00000000 00000afd 00000000 00000afd     ................
     158:	00000000 00000afd 00000000 00000afd     ................
     168:	00000000 000082f9 00000000 00000afd     ................

00000178 <__gnu_thumb1_case_sqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5609      	ldrsb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uqi>:
     18c:	b402      	push	{r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0049      	lsls	r1, r1, #1
     194:	5c09      	ldrb	r1, [r1, r0]
     196:	0049      	lsls	r1, r1, #1
     198:	448e      	add	lr, r1
     19a:	bc02      	pop	{r1}
     19c:	4770      	bx	lr
     19e:	46c0      	nop			; (mov r8, r8)

000001a0 <__gnu_thumb1_case_shi>:
     1a0:	b403      	push	{r0, r1}
     1a2:	4671      	mov	r1, lr
     1a4:	0849      	lsrs	r1, r1, #1
     1a6:	0040      	lsls	r0, r0, #1
     1a8:	0049      	lsls	r1, r1, #1
     1aa:	5e09      	ldrsh	r1, [r1, r0]
     1ac:	0049      	lsls	r1, r1, #1
     1ae:	448e      	add	lr, r1
     1b0:	bc03      	pop	{r0, r1}
     1b2:	4770      	bx	lr

000001b4 <__gnu_thumb1_case_uhi>:
     1b4:	b403      	push	{r0, r1}
     1b6:	4671      	mov	r1, lr
     1b8:	0849      	lsrs	r1, r1, #1
     1ba:	0040      	lsls	r0, r0, #1
     1bc:	0049      	lsls	r1, r1, #1
     1be:	5a09      	ldrh	r1, [r1, r0]
     1c0:	0049      	lsls	r1, r1, #1
     1c2:	448e      	add	lr, r1
     1c4:	bc03      	pop	{r0, r1}
     1c6:	4770      	bx	lr

000001c8 <__aeabi_uidiv>:
     1c8:	2900      	cmp	r1, #0
     1ca:	d034      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>

000001cc <.udivsi3_skip_div0_test>:
     1cc:	2301      	movs	r3, #1
     1ce:	2200      	movs	r2, #0
     1d0:	b410      	push	{r4}
     1d2:	4288      	cmp	r0, r1
     1d4:	d32c      	bcc.n	230 <.udivsi3_skip_div0_test+0x64>
     1d6:	2401      	movs	r4, #1
     1d8:	0724      	lsls	r4, r4, #28
     1da:	42a1      	cmp	r1, r4
     1dc:	d204      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1de:	4281      	cmp	r1, r0
     1e0:	d202      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1e2:	0109      	lsls	r1, r1, #4
     1e4:	011b      	lsls	r3, r3, #4
     1e6:	e7f8      	b.n	1da <.udivsi3_skip_div0_test+0xe>
     1e8:	00e4      	lsls	r4, r4, #3
     1ea:	42a1      	cmp	r1, r4
     1ec:	d204      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1ee:	4281      	cmp	r1, r0
     1f0:	d202      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1f2:	0049      	lsls	r1, r1, #1
     1f4:	005b      	lsls	r3, r3, #1
     1f6:	e7f8      	b.n	1ea <.udivsi3_skip_div0_test+0x1e>
     1f8:	4288      	cmp	r0, r1
     1fa:	d301      	bcc.n	200 <.udivsi3_skip_div0_test+0x34>
     1fc:	1a40      	subs	r0, r0, r1
     1fe:	431a      	orrs	r2, r3
     200:	084c      	lsrs	r4, r1, #1
     202:	42a0      	cmp	r0, r4
     204:	d302      	bcc.n	20c <.udivsi3_skip_div0_test+0x40>
     206:	1b00      	subs	r0, r0, r4
     208:	085c      	lsrs	r4, r3, #1
     20a:	4322      	orrs	r2, r4
     20c:	088c      	lsrs	r4, r1, #2
     20e:	42a0      	cmp	r0, r4
     210:	d302      	bcc.n	218 <.udivsi3_skip_div0_test+0x4c>
     212:	1b00      	subs	r0, r0, r4
     214:	089c      	lsrs	r4, r3, #2
     216:	4322      	orrs	r2, r4
     218:	08cc      	lsrs	r4, r1, #3
     21a:	42a0      	cmp	r0, r4
     21c:	d302      	bcc.n	224 <.udivsi3_skip_div0_test+0x58>
     21e:	1b00      	subs	r0, r0, r4
     220:	08dc      	lsrs	r4, r3, #3
     222:	4322      	orrs	r2, r4
     224:	2800      	cmp	r0, #0
     226:	d003      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     228:	091b      	lsrs	r3, r3, #4
     22a:	d001      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     22c:	0909      	lsrs	r1, r1, #4
     22e:	e7e3      	b.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     230:	1c10      	adds	r0, r2, #0
     232:	bc10      	pop	{r4}
     234:	4770      	bx	lr
     236:	2800      	cmp	r0, #0
     238:	d001      	beq.n	23e <.udivsi3_skip_div0_test+0x72>
     23a:	2000      	movs	r0, #0
     23c:	43c0      	mvns	r0, r0
     23e:	b407      	push	{r0, r1, r2}
     240:	4802      	ldr	r0, [pc, #8]	; (24c <.udivsi3_skip_div0_test+0x80>)
     242:	a102      	add	r1, pc, #8	; (adr r1, 24c <.udivsi3_skip_div0_test+0x80>)
     244:	1840      	adds	r0, r0, r1
     246:	9002      	str	r0, [sp, #8]
     248:	bd03      	pop	{r0, r1, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	000000d9 	.word	0x000000d9

00000250 <__aeabi_uidivmod>:
     250:	2900      	cmp	r1, #0
     252:	d0f0      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>
     254:	b503      	push	{r0, r1, lr}
     256:	f7ff ffb9 	bl	1cc <.udivsi3_skip_div0_test>
     25a:	bc0e      	pop	{r1, r2, r3}
     25c:	4342      	muls	r2, r0
     25e:	1a89      	subs	r1, r1, r2
     260:	4718      	bx	r3
     262:	46c0      	nop			; (mov r8, r8)

00000264 <__aeabi_idiv>:
     264:	2900      	cmp	r1, #0
     266:	d041      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>

00000268 <.divsi3_skip_div0_test>:
     268:	b410      	push	{r4}
     26a:	1c04      	adds	r4, r0, #0
     26c:	404c      	eors	r4, r1
     26e:	46a4      	mov	ip, r4
     270:	2301      	movs	r3, #1
     272:	2200      	movs	r2, #0
     274:	2900      	cmp	r1, #0
     276:	d500      	bpl.n	27a <.divsi3_skip_div0_test+0x12>
     278:	4249      	negs	r1, r1
     27a:	2800      	cmp	r0, #0
     27c:	d500      	bpl.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     27e:	4240      	negs	r0, r0
     280:	4288      	cmp	r0, r1
     282:	d32c      	bcc.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     284:	2401      	movs	r4, #1
     286:	0724      	lsls	r4, r4, #28
     288:	42a1      	cmp	r1, r4
     28a:	d204      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     28c:	4281      	cmp	r1, r0
     28e:	d202      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     290:	0109      	lsls	r1, r1, #4
     292:	011b      	lsls	r3, r3, #4
     294:	e7f8      	b.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     296:	00e4      	lsls	r4, r4, #3
     298:	42a1      	cmp	r1, r4
     29a:	d204      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     29c:	4281      	cmp	r1, r0
     29e:	d202      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2a0:	0049      	lsls	r1, r1, #1
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	e7f8      	b.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     2a6:	4288      	cmp	r0, r1
     2a8:	d301      	bcc.n	2ae <CONFIG_BT_HCI_TX_STACK_SIZE+0x2e>
     2aa:	1a40      	subs	r0, r0, r1
     2ac:	431a      	orrs	r2, r3
     2ae:	084c      	lsrs	r4, r1, #1
     2b0:	42a0      	cmp	r0, r4
     2b2:	d302      	bcc.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2b4:	1b00      	subs	r0, r0, r4
     2b6:	085c      	lsrs	r4, r3, #1
     2b8:	4322      	orrs	r2, r4
     2ba:	088c      	lsrs	r4, r1, #2
     2bc:	42a0      	cmp	r0, r4
     2be:	d302      	bcc.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2c0:	1b00      	subs	r0, r0, r4
     2c2:	089c      	lsrs	r4, r3, #2
     2c4:	4322      	orrs	r2, r4
     2c6:	08cc      	lsrs	r4, r1, #3
     2c8:	42a0      	cmp	r0, r4
     2ca:	d302      	bcc.n	2d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x52>
     2cc:	1b00      	subs	r0, r0, r4
     2ce:	08dc      	lsrs	r4, r3, #3
     2d0:	4322      	orrs	r2, r4
     2d2:	2800      	cmp	r0, #0
     2d4:	d003      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2d6:	091b      	lsrs	r3, r3, #4
     2d8:	d001      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2da:	0909      	lsrs	r1, r1, #4
     2dc:	e7e3      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2de:	1c10      	adds	r0, r2, #0
     2e0:	4664      	mov	r4, ip
     2e2:	2c00      	cmp	r4, #0
     2e4:	d500      	bpl.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     2e6:	4240      	negs	r0, r0
     2e8:	bc10      	pop	{r4}
     2ea:	4770      	bx	lr
     2ec:	2800      	cmp	r0, #0
     2ee:	d006      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f0:	db03      	blt.n	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     2f2:	2000      	movs	r0, #0
     2f4:	43c0      	mvns	r0, r0
     2f6:	0840      	lsrs	r0, r0, #1
     2f8:	e001      	b.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2fa:	2080      	movs	r0, #128	; 0x80
     2fc:	0600      	lsls	r0, r0, #24
     2fe:	b407      	push	{r0, r1, r2}
     300:	4802      	ldr	r0, [pc, #8]	; (30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     302:	a102      	add	r1, pc, #8	; (adr r1, 30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     304:	1840      	adds	r0, r0, r1
     306:	9002      	str	r0, [sp, #8]
     308:	bd03      	pop	{r0, r1, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000019 	.word	0x00000019

00000310 <__aeabi_idivmod>:
     310:	2900      	cmp	r1, #0
     312:	d0eb      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     314:	b503      	push	{r0, r1, lr}
     316:	f7ff ffa7 	bl	268 <.divsi3_skip_div0_test>
     31a:	bc0e      	pop	{r1, r2, r3}
     31c:	4342      	muls	r2, r0
     31e:	1a89      	subs	r1, r1, r2
     320:	4718      	bx	r3
     322:	46c0      	nop			; (mov r8, r8)

00000324 <__aeabi_idiv0>:
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)

00000328 <__aeabi_uldivmod>:
     328:	2b00      	cmp	r3, #0
     32a:	d111      	bne.n	350 <__aeabi_uldivmod+0x28>
     32c:	2a00      	cmp	r2, #0
     32e:	d10f      	bne.n	350 <__aeabi_uldivmod+0x28>
     330:	2900      	cmp	r1, #0
     332:	d100      	bne.n	336 <__aeabi_uldivmod+0xe>
     334:	2800      	cmp	r0, #0
     336:	d002      	beq.n	33e <__aeabi_uldivmod+0x16>
     338:	2100      	movs	r1, #0
     33a:	43c9      	mvns	r1, r1
     33c:	1c08      	adds	r0, r1, #0
     33e:	b407      	push	{r0, r1, r2}
     340:	4802      	ldr	r0, [pc, #8]	; (34c <__aeabi_uldivmod+0x24>)
     342:	a102      	add	r1, pc, #8	; (adr r1, 34c <__aeabi_uldivmod+0x24>)
     344:	1840      	adds	r0, r0, r1
     346:	9002      	str	r0, [sp, #8]
     348:	bd03      	pop	{r0, r1, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	ffffffd9 	.word	0xffffffd9
     350:	b403      	push	{r0, r1}
     352:	4668      	mov	r0, sp
     354:	b501      	push	{r0, lr}
     356:	9802      	ldr	r0, [sp, #8]
     358:	f000 f854 	bl	404 <__udivmoddi4>
     35c:	9b01      	ldr	r3, [sp, #4]
     35e:	469e      	mov	lr, r3
     360:	b002      	add	sp, #8
     362:	bc0c      	pop	{r2, r3}
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)

00000368 <__aeabi_lmul>:
     368:	b5f0      	push	{r4, r5, r6, r7, lr}
     36a:	464f      	mov	r7, r9
     36c:	4646      	mov	r6, r8
     36e:	0415      	lsls	r5, r2, #16
     370:	0c2d      	lsrs	r5, r5, #16
     372:	b4c0      	push	{r6, r7}
     374:	002e      	movs	r6, r5
     376:	0407      	lsls	r7, r0, #16
     378:	0c14      	lsrs	r4, r2, #16
     37a:	0c3f      	lsrs	r7, r7, #16
     37c:	4699      	mov	r9, r3
     37e:	0c03      	lsrs	r3, r0, #16
     380:	437e      	muls	r6, r7
     382:	435d      	muls	r5, r3
     384:	4367      	muls	r7, r4
     386:	4363      	muls	r3, r4
     388:	197f      	adds	r7, r7, r5
     38a:	0c34      	lsrs	r4, r6, #16
     38c:	19e4      	adds	r4, r4, r7
     38e:	469c      	mov	ip, r3
     390:	42a5      	cmp	r5, r4
     392:	d903      	bls.n	39c <__aeabi_lmul+0x34>
     394:	2380      	movs	r3, #128	; 0x80
     396:	025b      	lsls	r3, r3, #9
     398:	4698      	mov	r8, r3
     39a:	44c4      	add	ip, r8
     39c:	464b      	mov	r3, r9
     39e:	4351      	muls	r1, r2
     3a0:	4343      	muls	r3, r0
     3a2:	0436      	lsls	r6, r6, #16
     3a4:	0c36      	lsrs	r6, r6, #16
     3a6:	0c25      	lsrs	r5, r4, #16
     3a8:	0424      	lsls	r4, r4, #16
     3aa:	4465      	add	r5, ip
     3ac:	19a4      	adds	r4, r4, r6
     3ae:	1859      	adds	r1, r3, r1
     3b0:	1949      	adds	r1, r1, r5
     3b2:	0020      	movs	r0, r4
     3b4:	bc0c      	pop	{r2, r3}
     3b6:	4690      	mov	r8, r2
     3b8:	4699      	mov	r9, r3
     3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003bc <__ffssi2>:
     3bc:	b510      	push	{r4, lr}
     3be:	2300      	movs	r3, #0
     3c0:	2800      	cmp	r0, #0
     3c2:	d002      	beq.n	3ca <__ffssi2+0xe>
     3c4:	f000 f8ea 	bl	59c <__ctzsi2>
     3c8:	1c43      	adds	r3, r0, #1
     3ca:	0018      	movs	r0, r3
     3cc:	bd10      	pop	{r4, pc}
     3ce:	46c0      	nop			; (mov r8, r8)

000003d0 <__popcountsi2>:
     3d0:	4a09      	ldr	r2, [pc, #36]	; (3f8 <__popcountsi2+0x28>)
     3d2:	0843      	lsrs	r3, r0, #1
     3d4:	4013      	ands	r3, r2
     3d6:	1ac0      	subs	r0, r0, r3
     3d8:	0003      	movs	r3, r0
     3da:	4a08      	ldr	r2, [pc, #32]	; (3fc <__popcountsi2+0x2c>)
     3dc:	0880      	lsrs	r0, r0, #2
     3de:	4010      	ands	r0, r2
     3e0:	4013      	ands	r3, r2
     3e2:	181b      	adds	r3, r3, r0
     3e4:	0918      	lsrs	r0, r3, #4
     3e6:	18c0      	adds	r0, r0, r3
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <CONFIG_BT_RX_STACK_SIZE>)
     3ea:	4003      	ands	r3, r0
     3ec:	0218      	lsls	r0, r3, #8
     3ee:	18c0      	adds	r0, r0, r3
     3f0:	0403      	lsls	r3, r0, #16
     3f2:	18c0      	adds	r0, r0, r3
     3f4:	0e00      	lsrs	r0, r0, #24
     3f6:	4770      	bx	lr
     3f8:	55555555 	.word	0x55555555
     3fc:	33333333 	.word	0x33333333
     400:	0f0f0f0f 	.word	0x0f0f0f0f

00000404 <__udivmoddi4>:
     404:	b5f0      	push	{r4, r5, r6, r7, lr}
     406:	464d      	mov	r5, r9
     408:	4656      	mov	r6, sl
     40a:	4644      	mov	r4, r8
     40c:	465f      	mov	r7, fp
     40e:	b4f0      	push	{r4, r5, r6, r7}
     410:	4692      	mov	sl, r2
     412:	b083      	sub	sp, #12
     414:	0004      	movs	r4, r0
     416:	000d      	movs	r5, r1
     418:	4699      	mov	r9, r3
     41a:	428b      	cmp	r3, r1
     41c:	d82f      	bhi.n	47e <__udivmoddi4+0x7a>
     41e:	d02c      	beq.n	47a <__udivmoddi4+0x76>
     420:	4649      	mov	r1, r9
     422:	4650      	mov	r0, sl
     424:	f000 f8ae 	bl	584 <__clzdi2>
     428:	0029      	movs	r1, r5
     42a:	0006      	movs	r6, r0
     42c:	0020      	movs	r0, r4
     42e:	f000 f8a9 	bl	584 <__clzdi2>
     432:	1a33      	subs	r3, r6, r0
     434:	4698      	mov	r8, r3
     436:	3b20      	subs	r3, #32
     438:	469b      	mov	fp, r3
     43a:	d500      	bpl.n	43e <__udivmoddi4+0x3a>
     43c:	e074      	b.n	528 <__udivmoddi4+0x124>
     43e:	4653      	mov	r3, sl
     440:	465a      	mov	r2, fp
     442:	4093      	lsls	r3, r2
     444:	001f      	movs	r7, r3
     446:	4653      	mov	r3, sl
     448:	4642      	mov	r2, r8
     44a:	4093      	lsls	r3, r2
     44c:	001e      	movs	r6, r3
     44e:	42af      	cmp	r7, r5
     450:	d829      	bhi.n	4a6 <__udivmoddi4+0xa2>
     452:	d026      	beq.n	4a2 <__udivmoddi4+0x9e>
     454:	465b      	mov	r3, fp
     456:	1ba4      	subs	r4, r4, r6
     458:	41bd      	sbcs	r5, r7
     45a:	2b00      	cmp	r3, #0
     45c:	da00      	bge.n	460 <__udivmoddi4+0x5c>
     45e:	e079      	b.n	554 <__udivmoddi4+0x150>
     460:	2200      	movs	r2, #0
     462:	2300      	movs	r3, #0
     464:	9200      	str	r2, [sp, #0]
     466:	9301      	str	r3, [sp, #4]
     468:	2301      	movs	r3, #1
     46a:	465a      	mov	r2, fp
     46c:	4093      	lsls	r3, r2
     46e:	9301      	str	r3, [sp, #4]
     470:	2301      	movs	r3, #1
     472:	4642      	mov	r2, r8
     474:	4093      	lsls	r3, r2
     476:	9300      	str	r3, [sp, #0]
     478:	e019      	b.n	4ae <__udivmoddi4+0xaa>
     47a:	4282      	cmp	r2, r0
     47c:	d9d0      	bls.n	420 <__udivmoddi4+0x1c>
     47e:	2200      	movs	r2, #0
     480:	2300      	movs	r3, #0
     482:	9200      	str	r2, [sp, #0]
     484:	9301      	str	r3, [sp, #4]
     486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     488:	2b00      	cmp	r3, #0
     48a:	d001      	beq.n	490 <__udivmoddi4+0x8c>
     48c:	601c      	str	r4, [r3, #0]
     48e:	605d      	str	r5, [r3, #4]
     490:	9800      	ldr	r0, [sp, #0]
     492:	9901      	ldr	r1, [sp, #4]
     494:	b003      	add	sp, #12
     496:	bc3c      	pop	{r2, r3, r4, r5}
     498:	4690      	mov	r8, r2
     49a:	4699      	mov	r9, r3
     49c:	46a2      	mov	sl, r4
     49e:	46ab      	mov	fp, r5
     4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a2:	42a3      	cmp	r3, r4
     4a4:	d9d6      	bls.n	454 <__udivmoddi4+0x50>
     4a6:	2200      	movs	r2, #0
     4a8:	2300      	movs	r3, #0
     4aa:	9200      	str	r2, [sp, #0]
     4ac:	9301      	str	r3, [sp, #4]
     4ae:	4643      	mov	r3, r8
     4b0:	2b00      	cmp	r3, #0
     4b2:	d0e8      	beq.n	486 <__udivmoddi4+0x82>
     4b4:	07fb      	lsls	r3, r7, #31
     4b6:	0872      	lsrs	r2, r6, #1
     4b8:	431a      	orrs	r2, r3
     4ba:	4646      	mov	r6, r8
     4bc:	087b      	lsrs	r3, r7, #1
     4be:	e00e      	b.n	4de <__udivmoddi4+0xda>
     4c0:	42ab      	cmp	r3, r5
     4c2:	d101      	bne.n	4c8 <__udivmoddi4+0xc4>
     4c4:	42a2      	cmp	r2, r4
     4c6:	d80c      	bhi.n	4e2 <__udivmoddi4+0xde>
     4c8:	1aa4      	subs	r4, r4, r2
     4ca:	419d      	sbcs	r5, r3
     4cc:	2001      	movs	r0, #1
     4ce:	1924      	adds	r4, r4, r4
     4d0:	416d      	adcs	r5, r5
     4d2:	2100      	movs	r1, #0
     4d4:	3e01      	subs	r6, #1
     4d6:	1824      	adds	r4, r4, r0
     4d8:	414d      	adcs	r5, r1
     4da:	2e00      	cmp	r6, #0
     4dc:	d006      	beq.n	4ec <__udivmoddi4+0xe8>
     4de:	42ab      	cmp	r3, r5
     4e0:	d9ee      	bls.n	4c0 <__udivmoddi4+0xbc>
     4e2:	3e01      	subs	r6, #1
     4e4:	1924      	adds	r4, r4, r4
     4e6:	416d      	adcs	r5, r5
     4e8:	2e00      	cmp	r6, #0
     4ea:	d1f8      	bne.n	4de <__udivmoddi4+0xda>
     4ec:	465b      	mov	r3, fp
     4ee:	9800      	ldr	r0, [sp, #0]
     4f0:	9901      	ldr	r1, [sp, #4]
     4f2:	1900      	adds	r0, r0, r4
     4f4:	4169      	adcs	r1, r5
     4f6:	2b00      	cmp	r3, #0
     4f8:	db22      	blt.n	540 <__udivmoddi4+0x13c>
     4fa:	002b      	movs	r3, r5
     4fc:	465a      	mov	r2, fp
     4fe:	40d3      	lsrs	r3, r2
     500:	002a      	movs	r2, r5
     502:	4644      	mov	r4, r8
     504:	40e2      	lsrs	r2, r4
     506:	001c      	movs	r4, r3
     508:	465b      	mov	r3, fp
     50a:	0015      	movs	r5, r2
     50c:	2b00      	cmp	r3, #0
     50e:	db2c      	blt.n	56a <__udivmoddi4+0x166>
     510:	0026      	movs	r6, r4
     512:	409e      	lsls	r6, r3
     514:	0033      	movs	r3, r6
     516:	0026      	movs	r6, r4
     518:	4647      	mov	r7, r8
     51a:	40be      	lsls	r6, r7
     51c:	0032      	movs	r2, r6
     51e:	1a80      	subs	r0, r0, r2
     520:	4199      	sbcs	r1, r3
     522:	9000      	str	r0, [sp, #0]
     524:	9101      	str	r1, [sp, #4]
     526:	e7ae      	b.n	486 <__udivmoddi4+0x82>
     528:	4642      	mov	r2, r8
     52a:	2320      	movs	r3, #32
     52c:	1a9b      	subs	r3, r3, r2
     52e:	4652      	mov	r2, sl
     530:	40da      	lsrs	r2, r3
     532:	4641      	mov	r1, r8
     534:	0013      	movs	r3, r2
     536:	464a      	mov	r2, r9
     538:	408a      	lsls	r2, r1
     53a:	0017      	movs	r7, r2
     53c:	431f      	orrs	r7, r3
     53e:	e782      	b.n	446 <__udivmoddi4+0x42>
     540:	4642      	mov	r2, r8
     542:	2320      	movs	r3, #32
     544:	1a9b      	subs	r3, r3, r2
     546:	002a      	movs	r2, r5
     548:	4646      	mov	r6, r8
     54a:	409a      	lsls	r2, r3
     54c:	0023      	movs	r3, r4
     54e:	40f3      	lsrs	r3, r6
     550:	4313      	orrs	r3, r2
     552:	e7d5      	b.n	500 <__udivmoddi4+0xfc>
     554:	4642      	mov	r2, r8
     556:	2320      	movs	r3, #32
     558:	2100      	movs	r1, #0
     55a:	1a9b      	subs	r3, r3, r2
     55c:	2200      	movs	r2, #0
     55e:	9100      	str	r1, [sp, #0]
     560:	9201      	str	r2, [sp, #4]
     562:	2201      	movs	r2, #1
     564:	40da      	lsrs	r2, r3
     566:	9201      	str	r2, [sp, #4]
     568:	e782      	b.n	470 <__udivmoddi4+0x6c>
     56a:	4642      	mov	r2, r8
     56c:	2320      	movs	r3, #32
     56e:	0026      	movs	r6, r4
     570:	1a9b      	subs	r3, r3, r2
     572:	40de      	lsrs	r6, r3
     574:	002f      	movs	r7, r5
     576:	46b4      	mov	ip, r6
     578:	4097      	lsls	r7, r2
     57a:	4666      	mov	r6, ip
     57c:	003b      	movs	r3, r7
     57e:	4333      	orrs	r3, r6
     580:	e7c9      	b.n	516 <__udivmoddi4+0x112>
     582:	46c0      	nop			; (mov r8, r8)

00000584 <__clzdi2>:
     584:	b510      	push	{r4, lr}
     586:	2900      	cmp	r1, #0
     588:	d103      	bne.n	592 <__clzdi2+0xe>
     58a:	f000 f827 	bl	5dc <__clzsi2>
     58e:	3020      	adds	r0, #32
     590:	e002      	b.n	598 <__clzdi2+0x14>
     592:	1c08      	adds	r0, r1, #0
     594:	f000 f822 	bl	5dc <__clzsi2>
     598:	bd10      	pop	{r4, pc}
     59a:	46c0      	nop			; (mov r8, r8)

0000059c <__ctzsi2>:
     59c:	4241      	negs	r1, r0
     59e:	4008      	ands	r0, r1
     5a0:	211c      	movs	r1, #28
     5a2:	2301      	movs	r3, #1
     5a4:	041b      	lsls	r3, r3, #16
     5a6:	4298      	cmp	r0, r3
     5a8:	d301      	bcc.n	5ae <__ctzsi2+0x12>
     5aa:	0c00      	lsrs	r0, r0, #16
     5ac:	3910      	subs	r1, #16
     5ae:	0a1b      	lsrs	r3, r3, #8
     5b0:	4298      	cmp	r0, r3
     5b2:	d301      	bcc.n	5b8 <__ctzsi2+0x1c>
     5b4:	0a00      	lsrs	r0, r0, #8
     5b6:	3908      	subs	r1, #8
     5b8:	091b      	lsrs	r3, r3, #4
     5ba:	4298      	cmp	r0, r3
     5bc:	d301      	bcc.n	5c2 <__ctzsi2+0x26>
     5be:	0900      	lsrs	r0, r0, #4
     5c0:	3904      	subs	r1, #4
     5c2:	a202      	add	r2, pc, #8	; (adr r2, 5cc <__ctzsi2+0x30>)
     5c4:	5c10      	ldrb	r0, [r2, r0]
     5c6:	1a40      	subs	r0, r0, r1
     5c8:	4770      	bx	lr
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	1d1d1c1b 	.word	0x1d1d1c1b
     5d0:	1e1e1e1e 	.word	0x1e1e1e1e
     5d4:	1f1f1f1f 	.word	0x1f1f1f1f
     5d8:	1f1f1f1f 	.word	0x1f1f1f1f

000005dc <__clzsi2>:
     5dc:	211c      	movs	r1, #28
     5de:	2301      	movs	r3, #1
     5e0:	041b      	lsls	r3, r3, #16
     5e2:	4298      	cmp	r0, r3
     5e4:	d301      	bcc.n	5ea <__clzsi2+0xe>
     5e6:	0c00      	lsrs	r0, r0, #16
     5e8:	3910      	subs	r1, #16
     5ea:	0a1b      	lsrs	r3, r3, #8
     5ec:	4298      	cmp	r0, r3
     5ee:	d301      	bcc.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     5f0:	0a00      	lsrs	r0, r0, #8
     5f2:	3908      	subs	r1, #8
     5f4:	091b      	lsrs	r3, r3, #4
     5f6:	4298      	cmp	r0, r3
     5f8:	d301      	bcc.n	5fe <CONFIG_BT_CTLR_COMPANY_ID+0xd>
     5fa:	0900      	lsrs	r0, r0, #4
     5fc:	3904      	subs	r1, #4
     5fe:	a202      	add	r2, pc, #8	; (adr r2, 608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     600:	5c10      	ldrb	r0, [r2, r0]
     602:	1840      	adds	r0, r0, r1
     604:	4770      	bx	lr
     606:	46c0      	nop			; (mov r8, r8)
     608:	02020304 	.word	0x02020304
     60c:	01010101 	.word	0x01010101
	...

00000618 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     618:	0003      	movs	r3, r0
     61a:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
     61c:	701a      	strb	r2, [r3, #0]
	while (*s != '\0') {
     61e:	2a00      	cmp	r2, #0
     620:	d100      	bne.n	624 <strcpy+0xc>
	}

	*d = '\0';

	return dest;
}
     622:	4770      	bx	lr
		d++;
     624:	3301      	adds	r3, #1
		s++;
     626:	3101      	adds	r1, #1
     628:	e7f7      	b.n	61a <strcpy+0x2>

0000062a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     62a:	7803      	ldrb	r3, [r0, #0]
     62c:	780a      	ldrb	r2, [r1, #0]
     62e:	4293      	cmp	r3, r2
     630:	d102      	bne.n	638 <strcmp+0xe>
     632:	2b00      	cmp	r3, #0
     634:	d102      	bne.n	63c <strcmp+0x12>
     636:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
     638:	1a98      	subs	r0, r3, r2
}
     63a:	4770      	bx	lr
		s1++;
     63c:	3001      	adds	r0, #1
		s2++;
     63e:	3101      	adds	r1, #1
     640:	e7f3      	b.n	62a <strcmp>

00000642 <memcmp>:
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     642:	2300      	movs	r3, #0
{
     644:	b510      	push	{r4, lr}
	if (!n)
     646:	429a      	cmp	r2, r3
     648:	d005      	beq.n	656 <memcmp+0x14>

	while ((--n > 0) && (*c1 == *c2)) {
     64a:	3a01      	subs	r2, #1
     64c:	2a00      	cmp	r2, #0
     64e:	d104      	bne.n	65a <memcmp+0x18>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     650:	7803      	ldrb	r3, [r0, #0]
     652:	7808      	ldrb	r0, [r1, #0]
     654:	1a1b      	subs	r3, r3, r0
}
     656:	0018      	movs	r0, r3
     658:	bd10      	pop	{r4, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     65a:	7804      	ldrb	r4, [r0, #0]
     65c:	780b      	ldrb	r3, [r1, #0]
     65e:	429c      	cmp	r4, r3
     660:	d1f6      	bne.n	650 <memcmp+0xe>
		c1++;
     662:	3001      	adds	r0, #1
		c2++;
     664:	3101      	adds	r1, #1
     666:	e7f0      	b.n	64a <memcmp+0x8>

00000668 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     668:	0003      	movs	r3, r0
{
     66a:	b530      	push	{r4, r5, lr}
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     66c:	2503      	movs	r5, #3
     66e:	404b      	eors	r3, r1
     670:	422b      	tst	r3, r5
     672:	d019      	beq.n	6a8 <memcpy+0x40>
	unsigned char *d_byte = (unsigned char *)d;
     674:	0003      	movs	r3, r0
     676:	2400      	movs	r4, #0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     678:	42a2      	cmp	r2, r4
     67a:	d11b      	bne.n	6b4 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     67c:	bd30      	pop	{r4, r5, pc}
			if (n == 0) {
     67e:	2a00      	cmp	r2, #0
     680:	d0fc      	beq.n	67c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
     682:	780c      	ldrb	r4, [r1, #0]
			n--;
     684:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
     686:	701c      	strb	r4, [r3, #0]
     688:	3101      	adds	r1, #1
     68a:	3301      	adds	r3, #1
		while (((unsigned int)d_byte) & 0x3) {
     68c:	001c      	movs	r4, r3
     68e:	402c      	ands	r4, r5
     690:	d1f5      	bne.n	67e <memcpy+0x16>
		while (n >= sizeof(unsigned int)) {
     692:	1b15      	subs	r5, r2, r4
     694:	2d03      	cmp	r5, #3
     696:	d809      	bhi.n	6ac <memcpy+0x44>
     698:	2403      	movs	r4, #3
     69a:	0015      	movs	r5, r2
     69c:	43a5      	bics	r5, r4
     69e:	2403      	movs	r4, #3
     6a0:	1949      	adds	r1, r1, r5
     6a2:	195b      	adds	r3, r3, r5
     6a4:	4022      	ands	r2, r4
     6a6:	e7e6      	b.n	676 <memcpy+0xe>
     6a8:	0003      	movs	r3, r0
     6aa:	e7ef      	b.n	68c <memcpy+0x24>
			*(d_word++) = *(s_word++);
     6ac:	590d      	ldr	r5, [r1, r4]
     6ae:	511d      	str	r5, [r3, r4]
     6b0:	3404      	adds	r4, #4
     6b2:	e7ee      	b.n	692 <memcpy+0x2a>
		*(d_byte++) = *(s_byte++);
     6b4:	5d0d      	ldrb	r5, [r1, r4]
     6b6:	551d      	strb	r5, [r3, r4]
     6b8:	3401      	adds	r4, #1
     6ba:	e7dd      	b.n	678 <memcpy+0x10>

000006bc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	0005      	movs	r5, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     6c0:	2603      	movs	r6, #3
	unsigned char c_byte = (unsigned char)c;
     6c2:	b2cb      	uxtb	r3, r1
     6c4:	002c      	movs	r4, r5
	while (((unsigned int)d_byte) & 0x3) {
     6c6:	4235      	tst	r5, r6
     6c8:	d111      	bne.n	6ee <memset+0x32>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
     6ca:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
     6cc:	020e      	lsls	r6, r1, #8
     6ce:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
     6d0:	040e      	lsls	r6, r1, #16
     6d2:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
     6d4:	0016      	movs	r6, r2
     6d6:	2e03      	cmp	r6, #3
     6d8:	d80f      	bhi.n	6fa <memset+0x3e>
     6da:	2103      	movs	r1, #3
     6dc:	0015      	movs	r5, r2
     6de:	438d      	bics	r5, r1
     6e0:	1961      	adds	r1, r4, r5
     6e2:	2403      	movs	r4, #3
     6e4:	4022      	ands	r2, r4
     6e6:	188a      	adds	r2, r1, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     6e8:	4291      	cmp	r1, r2
     6ea:	d109      	bne.n	700 <memset+0x44>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     6ec:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     6ee:	2a00      	cmp	r2, #0
     6f0:	d0fc      	beq.n	6ec <memset+0x30>
		*(d_byte++) = c_byte;
     6f2:	702b      	strb	r3, [r5, #0]
		n--;
     6f4:	3a01      	subs	r2, #1
     6f6:	3501      	adds	r5, #1
     6f8:	e7e4      	b.n	6c4 <memset+0x8>
		*(d_word++) = c_word;
     6fa:	c502      	stmia	r5!, {r1}
		n -= sizeof(unsigned int);
     6fc:	3e04      	subs	r6, #4
     6fe:	e7ea      	b.n	6d6 <memset+0x1a>
		*(d_byte++) = c_byte;
     700:	700b      	strb	r3, [r1, #0]
     702:	3101      	adds	r1, #1
     704:	e7f0      	b.n	6e8 <memset+0x2c>
	...

00000708 <s1_display>:

static event_t current_event = IDLE;
static state_t current_state = Q1;


void s1_display() { /* Show some scrolling text ("ECOM042.2017.2") */
     708:	b510      	push	{r4, lr}

	struct mb_display *disp = mb_display_get();
     70a:	f000 ff43 	bl	1594 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_DEFAULT | MB_DISPLAY_FLAG_LOOP, K_MSEC(500), "ECOM042.2017.2");
     70e:	22fa      	movs	r2, #250	; 0xfa
     710:	2180      	movs	r1, #128	; 0x80
     712:	4b03      	ldr	r3, [pc, #12]	; (720 <s1_display+0x18>)
     714:	0052      	lsls	r2, r2, #1
     716:	0249      	lsls	r1, r1, #9
     718:	f000 feec 	bl	14f4 <mb_display_print>
}
     71c:	bd10      	pop	{r4, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	0000ac74 	.word	0x0000ac74

00000724 <s2_accelerometer>:

void s2_accelerometer() {
     724:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
     726:	f000 ff35 	bl	1594 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
     72a:	22fa      	movs	r2, #250	; 0xfa
     72c:	4b02      	ldr	r3, [pc, #8]	; (738 <s2_accelerometer+0x14>)
     72e:	0092      	lsls	r2, r2, #2
     730:	2101      	movs	r1, #1
     732:	f000 fedf 	bl	14f4 <mb_display_print>
			 K_SECONDS(1), "2");
}
     736:	bd10      	pop	{r4, pc}
     738:	0000ac81 	.word	0x0000ac81

0000073c <s3_compass>:

void s3_compass() {
     73c:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
     73e:	f000 ff29 	bl	1594 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
     742:	22fa      	movs	r2, #250	; 0xfa
     744:	4b02      	ldr	r3, [pc, #8]	; (750 <s3_compass+0x14>)
     746:	0092      	lsls	r2, r2, #2
     748:	2101      	movs	r1, #1
     74a:	f000 fed3 	bl	14f4 <mb_display_print>
			 K_SECONDS(1), "3");
}
     74e:	bd10      	pop	{r4, pc}
     750:	0000ac83 	.word	0x0000ac83

00000754 <s4_temperature>:

void s4_temperature() {
     754:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
     756:	f000 ff1d 	bl	1594 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
     75a:	22fa      	movs	r2, #250	; 0xfa
     75c:	4b02      	ldr	r3, [pc, #8]	; (768 <s4_temperature+0x14>)
     75e:	0092      	lsls	r2, r2, #2
     760:	2101      	movs	r1, #1
     762:	f000 fec7 	bl	14f4 <mb_display_print>
			 K_SECONDS(1), "4");
}
     766:	bd10      	pop	{r4, pc}
     768:	0000ac85 	.word	0x0000ac85

0000076c <s5_bluetooth>:

void s5_bluetooth() {
     76c:	b510      	push	{r4, lr}
	struct mb_display *disp = mb_display_get();
     76e:	f000 ff11 	bl	1594 <mb_display_get>
	mb_display_print(disp, MB_DISPLAY_MODE_SINGLE,
     772:	22fa      	movs	r2, #250	; 0xfa
     774:	4b02      	ldr	r3, [pc, #8]	; (780 <s5_bluetooth+0x14>)
     776:	0092      	lsls	r2, r2, #2
     778:	2101      	movs	r1, #1
     77a:	f000 febb 	bl	14f4 <mb_display_print>
			 K_SECONDS(1), "5");
}
     77e:	bd10      	pop	{r4, pc}
     780:	0000ac87 	.word	0x0000ac87

00000784 <button_pressed>:

static struct device *pwm;
static struct device *gpio;

static void button_pressed(struct device *dev, struct gpio_callback *cb, u32_t pins)
{
     784:	b510      	push	{r4, lr}
     786:	4c0d      	ldr	r4, [pc, #52]	; (7bc <button_pressed+0x38>)
	if (pins & BIT(SW0_GPIO_PIN)) {
     788:	0393      	lsls	r3, r2, #14
     78a:	d511      	bpl.n	7b0 <button_pressed+0x2c>
		printk("A pressed\n");
     78c:	480c      	ldr	r0, [pc, #48]	; (7c0 <button_pressed+0x3c>)
     78e:	f000 fc7b 	bl	1088 <printk>
		current_event = BACKWARD;
     792:	2302      	movs	r3, #2
	} else {
		printk("B pressed\n");
		current_event = FORWARD;
	}

	current_state = machine[current_state].events[current_event];
     794:	490b      	ldr	r1, [pc, #44]	; (7c4 <button_pressed+0x40>)
		current_event = FORWARD;
     796:	7023      	strb	r3, [r4, #0]
	current_state = machine[current_state].events[current_event];
     798:	780b      	ldrb	r3, [r1, #0]
     79a:	4a0b      	ldr	r2, [pc, #44]	; (7c8 <button_pressed+0x44>)
     79c:	7820      	ldrb	r0, [r4, #0]
     79e:	00db      	lsls	r3, r3, #3
     7a0:	18d3      	adds	r3, r2, r3
     7a2:	5c1b      	ldrb	r3, [r3, r0]
     7a4:	700b      	strb	r3, [r1, #0]
	machine[current_state].action();
     7a6:	00db      	lsls	r3, r3, #3
     7a8:	18d2      	adds	r2, r2, r3
     7aa:	6853      	ldr	r3, [r2, #4]
     7ac:	4798      	blx	r3
}
     7ae:	bd10      	pop	{r4, pc}
		printk("B pressed\n");
     7b0:	4806      	ldr	r0, [pc, #24]	; (7cc <button_pressed+0x48>)
     7b2:	f000 fc69 	bl	1088 <printk>
		current_event = FORWARD;
     7b6:	2301      	movs	r3, #1
     7b8:	e7ec      	b.n	794 <button_pressed+0x10>
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	2000000c 	.word	0x2000000c
     7c0:	0000ac51 	.word	0x0000ac51
     7c4:	2000000d 	.word	0x2000000d
     7c8:	20002158 	.word	0x20002158
     7cc:	0000ac5c 	.word	0x0000ac5c

000007d0 <main>:


/***************************************************************************************/
/** MAIN **/
void main(void)
{
     7d0:	b570      	push	{r4, r5, r6, lr}
	gpio = device_get_binding(SW0_GPIO_NAME);
     7d2:	4816      	ldr	r0, [pc, #88]	; (82c <main+0x5c>)
     7d4:	f008 ff76 	bl	96c4 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
     7d8:	6843      	ldr	r3, [r0, #4]
     7da:	4c15      	ldr	r4, [pc, #84]	; (830 <main+0x60>)
     7dc:	681d      	ldr	r5, [r3, #0]
     7de:	2211      	movs	r2, #17
     7e0:	2322      	movs	r3, #34	; 0x22
     7e2:	2100      	movs	r1, #0
     7e4:	6020      	str	r0, [r4, #0]
     7e6:	47a8      	blx	r5
	gpio_pin_configure(gpio, SW1_GPIO_PIN, (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE | GPIO_INT_ACTIVE_LOW));
     7e8:	6820      	ldr	r0, [r4, #0]
     7ea:	221a      	movs	r2, #26
     7ec:	6843      	ldr	r3, [r0, #4]
     7ee:	2100      	movs	r1, #0
     7f0:	681d      	ldr	r5, [r3, #0]
     7f2:	2322      	movs	r3, #34	; 0x22
     7f4:	47a8      	blx	r5
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     7f6:	490f      	ldr	r1, [pc, #60]	; (834 <main+0x64>)
     7f8:	4b0f      	ldr	r3, [pc, #60]	; (838 <main+0x68>)
	gpio_add_callback(gpio, &button_cb);
     7fa:	6820      	ldr	r0, [r4, #0]
     7fc:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     7fe:	4b0f      	ldr	r3, [pc, #60]	; (83c <main+0x6c>)
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
     800:	2201      	movs	r2, #1
	callback->pin_mask = pin_mask;
     802:	608b      	str	r3, [r1, #8]
	return api->manage_callback(port, callback, true);
     804:	6843      	ldr	r3, [r0, #4]
     806:	68db      	ldr	r3, [r3, #12]
     808:	4798      	blx	r3
	pwm = device_get_binding(CONFIG_PWM_NRF5_SW_0_DEV_NAME);
     80a:	480d      	ldr	r0, [pc, #52]	; (840 <main+0x70>)
     80c:	f008 ff5a 	bl	96c4 <device_get_binding>
	gpio_pin_enable_callback(gpio, SW0_GPIO_PIN);
     810:	6820      	ldr	r0, [r4, #0]
	return api->enable_callback(port, access_op, pin);
     812:	2211      	movs	r2, #17
     814:	6843      	ldr	r3, [r0, #4]
     816:	2100      	movs	r1, #0
     818:	691b      	ldr	r3, [r3, #16]
     81a:	4798      	blx	r3
	gpio_pin_enable_callback(gpio, SW1_GPIO_PIN);
     81c:	6820      	ldr	r0, [r4, #0]
     81e:	221a      	movs	r2, #26
     820:	6843      	ldr	r3, [r0, #4]
     822:	2100      	movs	r1, #0
     824:	691b      	ldr	r3, [r3, #16]
     826:	4798      	blx	r3
	configure_buttons();
}
     828:	bd70      	pop	{r4, r5, r6, pc}
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	0000ac67 	.word	0x0000ac67
     830:	20000010 	.word	0x20000010
     834:	20000000 	.word	0x20000000
     838:	00000785 	.word	0x00000785
     83c:	04020000 	.word	0x04020000
     840:	0000ac6e 	.word	0x0000ac6e

00000844 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
     844:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
     846:	f3ef 8010 	mrs	r0, PRIMASK
     84a:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     84c:	491d      	ldr	r1, [pc, #116]	; (8c4 <nordicsemi_nrf51_init+0x80>)
     84e:	780b      	ldrb	r3, [r1, #0]
     850:	2b01      	cmp	r3, #1
     852:	d10f      	bne.n	874 <nordicsemi_nrf51_init+0x30>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     854:	4b1c      	ldr	r3, [pc, #112]	; (8c8 <nordicsemi_nrf51_init+0x84>)
     856:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     858:	071b      	lsls	r3, r3, #28
     85a:	d10b      	bne.n	874 <nordicsemi_nrf51_init+0x30>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
     85c:	4b1b      	ldr	r3, [pc, #108]	; (8cc <nordicsemi_nrf51_init+0x88>)
     85e:	25e0      	movs	r5, #224	; 0xe0
     860:	681a      	ldr	r2, [r3, #0]
     862:	23f0      	movs	r3, #240	; 0xf0
     864:	0014      	movs	r4, r2
     866:	401c      	ands	r4, r3
     868:	422a      	tst	r2, r5
     86a:	d11a      	bne.n	8a2 <nordicsemi_nrf51_init+0x5e>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     86c:	4a18      	ldr	r2, [pc, #96]	; (8d0 <nordicsemi_nrf51_init+0x8c>)
     86e:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
     870:	421a      	tst	r2, r3
     872:	d019      	beq.n	8a8 <nordicsemi_nrf51_init+0x64>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     874:	680b      	ldr	r3, [r1, #0]
     876:	b2db      	uxtb	r3, r3
     878:	2b01      	cmp	r3, #1
     87a:	d10d      	bne.n	898 <nordicsemi_nrf51_init+0x54>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     87c:	4a12      	ldr	r2, [pc, #72]	; (8c8 <nordicsemi_nrf51_init+0x84>)
     87e:	6812      	ldr	r2, [r2, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     880:	0712      	lsls	r2, r2, #28
     882:	d109      	bne.n	898 <nordicsemi_nrf51_init+0x54>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
     884:	21f0      	movs	r1, #240	; 0xf0
     886:	4a11      	ldr	r2, [pc, #68]	; (8cc <nordicsemi_nrf51_init+0x88>)
     888:	6812      	ldr	r2, [r2, #0]
     88a:	400a      	ands	r2, r1
     88c:	2a40      	cmp	r2, #64	; 0x40
     88e:	d103      	bne.n	898 <nordicsemi_nrf51_init+0x54>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     890:	4a0f      	ldr	r2, [pc, #60]	; (8d0 <nordicsemi_nrf51_init+0x8c>)
     892:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
     894:	420a      	tst	r2, r1
     896:	d00f      	beq.n	8b8 <nordicsemi_nrf51_init+0x74>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key) {
     898:	2800      	cmp	r0, #0
     89a:	d100      	bne.n	89e <nordicsemi_nrf51_init+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     89c:	b662      	cpsie	i
}
     89e:	2000      	movs	r0, #0
     8a0:	bd30      	pop	{r4, r5, pc}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     8a2:	2c30      	cmp	r4, #48	; 0x30
     8a4:	d0e2      	beq.n	86c <nordicsemi_nrf51_init+0x28>
     8a6:	e7e5      	b.n	874 <nordicsemi_nrf51_init+0x30>
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
     8a8:	4a0a      	ldr	r2, [pc, #40]	; (8d4 <nordicsemi_nrf51_init+0x90>)
     8aa:	4b0b      	ldr	r3, [pc, #44]	; (8d8 <nordicsemi_nrf51_init+0x94>)
     8ac:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
     8ae:	2280      	movs	r2, #128	; 0x80
     8b0:	4b0a      	ldr	r3, [pc, #40]	; (8dc <nordicsemi_nrf51_init+0x98>)
     8b2:	0212      	lsls	r2, r2, #8
     8b4:	601a      	str	r2, [r3, #0]
     8b6:	e7dd      	b.n	874 <nordicsemi_nrf51_init+0x30>
		NRF_MPU->DISABLEINDEBUG =
     8b8:	22c1      	movs	r2, #193	; 0xc1
     8ba:	2180      	movs	r1, #128	; 0x80
     8bc:	00d2      	lsls	r2, r2, #3
     8be:	05c9      	lsls	r1, r1, #23
     8c0:	508b      	str	r3, [r1, r2]
     8c2:	e7e9      	b.n	898 <nordicsemi_nrf51_init+0x54>
     8c4:	f0000fe0 	.word	0xf0000fe0
     8c8:	f0000fe4 	.word	0xf0000fe4
     8cc:	f0000fe8 	.word	0xf0000fe8
     8d0:	f0000fec 	.word	0xf0000fec
     8d4:	c007ffdf 	.word	0xc007ffdf
     8d8:	40000504 	.word	0x40000504
     8dc:	40006c18 	.word	0x40006c18

000008e0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     8e0:	4808      	ldr	r0, [pc, #32]	; (904 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
     8e2:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     8e4:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     8e6:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     8e8:	d80a      	bhi.n	900 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     8ea:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     8ec:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     8ee:	d007      	beq.n	900 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     8f0:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     8f2:	f009 fb93 	bl	a01c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
     8f6:	bc01      	pop	{r0}
    mov lr, r0
     8f8:	4686      	mov	lr, r0
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     8fa:	4903      	ldr	r1, [pc, #12]	; (908 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
     8fc:	4a03      	ldr	r2, [pc, #12]	; (90c <_EXIT_EXC+0xc>)
    str r2, [r1]
     8fe:	600a      	str	r2, [r1, #0]

00000900 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     900:	4770      	bx	lr
     902:	0000      	.short	0x0000
    ldr r0, =_kernel
     904:	20000ba8 	.word	0x20000ba8
    ldr r1, =_SCS_ICSR
     908:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
     90c:	10000000 	.word	0x10000000

00000910 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
     910:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     912:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
     914:	2200      	movs	r2, #0
     916:	2603      	movs	r6, #3
     918:	25ff      	movs	r5, #255	; 0xff
     91a:	00a4      	lsls	r4, r4, #2
     91c:	0010      	movs	r0, r2
     91e:	002f      	movs	r7, r5
     920:	4030      	ands	r0, r6
     922:	00c0      	lsls	r0, r0, #3
     924:	4087      	lsls	r7, r0
     926:	0893      	lsrs	r3, r2, #2
     928:	4904      	ldr	r1, [pc, #16]	; (93c <_IntLibInit+0x2c>)
     92a:	009b      	lsls	r3, r3, #2
     92c:	185b      	adds	r3, r3, r1
     92e:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     930:	3201      	adds	r2, #1
     932:	43b9      	bics	r1, r7
     934:	5119      	str	r1, [r3, r4]
     936:	2a1a      	cmp	r2, #26
     938:	d1f0      	bne.n	91c <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     93c:	e000e100 	.word	0xe000e100

00000940 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     940:	4913      	ldr	r1, [pc, #76]	; (990 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
     942:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     944:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     946:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     948:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
     94c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
     94e:	4643      	mov	r3, r8
    mov r4, r9
     950:	464c      	mov	r4, r9
    mov r5, r10
     952:	4655      	mov	r5, sl
    mov r6, r11
     954:	465e      	mov	r6, fp
    mov r7, ip
     956:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
     958:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     95a:	4f0e      	ldr	r7, [pc, #56]	; (994 <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     95c:	4e0e      	ldr	r6, [pc, #56]	; (998 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
     95e:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     960:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     962:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     964:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     966:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
     968:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     96a:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
     96c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
     96e:	d100      	bne.n	972 <_thread_irq_disabled>
    cpsie i
     970:	b662      	cpsie	i

00000972 <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
     972:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
     974:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
     976:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
     978:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
     97a:	4698      	mov	r8, r3
    mov r9, r4
     97c:	46a1      	mov	r9, r4
    mov r10, r5
     97e:	46aa      	mov	sl, r5
    mov r11, r6
     980:	46b3      	mov	fp, r6
    mov ip, r7
     982:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
     984:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
     986:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     988:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     98c:	4770      	bx	lr
     98e:	0000      	.short	0x0000
    ldr r1, =_kernel
     990:	20000ba8 	.word	0x20000ba8
    ldr v4, =_SCS_ICSR
     994:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
     998:	08000000 	.word	0x08000000

0000099c <__svc>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
     99c:	2004      	movs	r0, #4
    mov r1, lr
     99e:	4671      	mov	r1, lr
    tst r1, r0
     9a0:	4201      	tst	r1, r0
    beq _stack_frame_msp
     9a2:	d002      	beq.n	9aa <_stack_frame_msp>
    mrs r0, PSP
     9a4:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
     9a8:	d101      	bne.n	9ae <_stack_frame_endif>

000009aa <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
     9aa:	f3ef 8008 	mrs	r0, MSP

000009ae <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     9ae:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
     9b0:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
     9b2:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
     9b4:	2902      	cmp	r1, #2
    beq _oops
     9b6:	d000      	beq.n	9ba <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
     9b8:	e792      	b.n	8e0 <_ExcExit>

000009ba <_oops>:

_oops:
    push {lr}
     9ba:	b500      	push	{lr}
    blx _do_kernel_oops
     9bc:	f000 f91c 	bl	bf8 <_do_kernel_oops>
    pop {pc}
     9c0:	bd00      	pop	{pc}
     9c2:	46c0      	nop			; (mov r8, r8)

000009c4 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
     9c4:	4905      	ldr	r1, [pc, #20]	; (9dc <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
     9c6:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
     9c8:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
     9ca:	4905      	ldr	r1, [pc, #20]	; (9e0 <__swap+0x1c>)
    ldr r1, [r1]
     9cc:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
     9ce:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
     9d0:	4904      	ldr	r1, [pc, #16]	; (9e4 <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
     9d2:	4b05      	ldr	r3, [pc, #20]	; (9e8 <__swap+0x24>)
    str r3, [r1, #0]
     9d4:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
     9d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
     9d8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
     9da:	4770      	bx	lr
    ldr r1, =_kernel
     9dc:	20000ba8 	.word	0x20000ba8
    ldr r1, =_k_neg_eagain
     9e0:	0000b1ec 	.word	0x0000b1ec
    ldr r1, =_SCS_ICSR
     9e4:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
     9e8:	10000000 	.word	0x10000000

000009ec <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     9ec:	4b0e      	ldr	r3, [pc, #56]	; (a28 <_Fault+0x3c>)
{
     9ee:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     9f0:	685a      	ldr	r2, [r3, #4]
{
     9f2:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     9f4:	05d2      	lsls	r2, r2, #23
     9f6:	0dd2      	lsrs	r2, r2, #23
	switch (fault) {
     9f8:	2a03      	cmp	r2, #3
     9fa:	d10e      	bne.n	a1a <_Fault+0x2e>
	PR_EXC("***** HARD FAULT *****\n");
     9fc:	480b      	ldr	r0, [pc, #44]	; (a2c <_Fault+0x40>)
     9fe:	f000 fb43 	bl	1088 <printk>

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     a02:	f009 fadd 	bl	9fc0 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
     a06:	69a2      	ldr	r2, [r4, #24]
     a08:	0001      	movs	r1, r0
     a0a:	4809      	ldr	r0, [pc, #36]	; (a30 <_Fault+0x44>)
	PR_EXC("***** %s %d) *****\n",
     a0c:	f000 fb3c 	bl	1088 <printk>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     a10:	0021      	movs	r1, r4
     a12:	2000      	movs	r0, #0
     a14:	f000 f8f6 	bl	c04 <_SysFatalErrorHandler>
}
     a18:	bd10      	pop	{r4, pc}
	PR_EXC("***** %s %d) *****\n",
     a1a:	4906      	ldr	r1, [pc, #24]	; (a34 <_Fault+0x48>)
     a1c:	2a0f      	cmp	r2, #15
     a1e:	dd00      	ble.n	a22 <_Fault+0x36>
     a20:	4905      	ldr	r1, [pc, #20]	; (a38 <_Fault+0x4c>)
     a22:	3a10      	subs	r2, #16
     a24:	4805      	ldr	r0, [pc, #20]	; (a3c <_Fault+0x50>)
     a26:	e7f1      	b.n	a0c <_Fault+0x20>
     a28:	e000ed00 	.word	0xe000ed00
     a2c:	0000acb7 	.word	0x0000acb7
     a30:	0000accf 	.word	0x0000accf
     a34:	0000ac89 	.word	0x0000ac89
     a38:	0000ac9e 	.word	0x0000ac9e
     a3c:	0000ad19 	.word	0x0000ad19

00000a40 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     a40:	4770      	bx	lr
	...

00000a44 <_arch_irq_enable>:
  if ((int32_t)(IRQn) >= 0)
     a44:	0603      	lsls	r3, r0, #24
     a46:	d405      	bmi.n	a54 <_arch_irq_enable+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     a48:	231f      	movs	r3, #31
     a4a:	4018      	ands	r0, r3
     a4c:	3b1e      	subs	r3, #30
     a4e:	4083      	lsls	r3, r0
     a50:	4a01      	ldr	r2, [pc, #4]	; (a58 <_arch_irq_enable+0x14>)
     a52:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
     a54:	4770      	bx	lr
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	e000e100 	.word	0xe000e100

00000a5c <_arch_irq_disable>:
  if ((int32_t)(IRQn) >= 0)
     a5c:	0603      	lsls	r3, r0, #24
     a5e:	d409      	bmi.n	a74 <_arch_irq_disable+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     a60:	231f      	movs	r3, #31
     a62:	4018      	ands	r0, r3
     a64:	3b1e      	subs	r3, #30
     a66:	4083      	lsls	r3, r0
     a68:	4a03      	ldr	r2, [pc, #12]	; (a78 <_arch_irq_disable+0x1c>)
     a6a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a70:	f3bf 8f6f 	isb	sy
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
     a74:	4770      	bx	lr
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	e000e104 	.word	0xe000e104

00000a7c <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     a7c:	0943      	lsrs	r3, r0, #5
     a7e:	4a05      	ldr	r2, [pc, #20]	; (a94 <_arch_irq_is_enabled+0x18>)
     a80:	009b      	lsls	r3, r3, #2
     a82:	589b      	ldr	r3, [r3, r2]
     a84:	221f      	movs	r2, #31
     a86:	4010      	ands	r0, r2
     a88:	3a1e      	subs	r2, #30
     a8a:	4082      	lsls	r2, r0
     a8c:	0010      	movs	r0, r2
     a8e:	4018      	ands	r0, r3
}
     a90:	4770      	bx	lr
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	e000e100 	.word	0xe000e100

00000a98 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     a98:	b243      	sxtb	r3, r0
{
     a9a:	b570      	push	{r4, r5, r6, lr}
     a9c:	0189      	lsls	r1, r1, #6
  if ((int32_t)(IRQn) >= 0)
     a9e:	2b00      	cmp	r3, #0
     aa0:	db12      	blt.n	ac8 <_irq_priority_set+0x30>
     aa2:	4a14      	ldr	r2, [pc, #80]	; (af4 <_irq_priority_set+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     aa4:	089b      	lsrs	r3, r3, #2
     aa6:	2503      	movs	r5, #3
     aa8:	009b      	lsls	r3, r3, #2
     aaa:	189b      	adds	r3, r3, r2
     aac:	22ff      	movs	r2, #255	; 0xff
     aae:	4028      	ands	r0, r5
     ab0:	40a8      	lsls	r0, r5
     ab2:	0015      	movs	r5, r2
     ab4:	24c0      	movs	r4, #192	; 0xc0
     ab6:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     ab8:	4011      	ands	r1, r2
     aba:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     abc:	00a4      	lsls	r4, r4, #2
     abe:	591e      	ldr	r6, [r3, r4]
     ac0:	43ae      	bics	r6, r5
     ac2:	4331      	orrs	r1, r6
     ac4:	5119      	str	r1, [r3, r4]
}
     ac6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     ac8:	2403      	movs	r4, #3
     aca:	230f      	movs	r3, #15
     acc:	b2c0      	uxtb	r0, r0
     ace:	4003      	ands	r3, r0
     ad0:	4020      	ands	r0, r4
     ad2:	40a0      	lsls	r0, r4
     ad4:	34fc      	adds	r4, #252	; 0xfc
     ad6:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     ad8:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     ada:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     adc:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     ade:	3b08      	subs	r3, #8
     ae0:	4a05      	ldr	r2, [pc, #20]	; (af8 <_irq_priority_set+0x60>)
     ae2:	089b      	lsrs	r3, r3, #2
     ae4:	009b      	lsls	r3, r3, #2
     ae6:	189b      	adds	r3, r3, r2
     ae8:	69da      	ldr	r2, [r3, #28]
     aea:	43aa      	bics	r2, r5
     aec:	4311      	orrs	r1, r2
     aee:	61d9      	str	r1, [r3, #28]
     af0:	e7e9      	b.n	ac6 <_irq_priority_set+0x2e>
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	e000e100 	.word	0xe000e100
     af8:	e000ed00 	.word	0xe000ed00

00000afc <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
     afc:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
     afe:	f000 f843 	bl	b88 <__hard_fault>
}
     b02:	bd10      	pop	{r4, pc}

00000b04 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     b04:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
     b06:	f3ef 8410 	mrs	r4, PRIMASK
     b0a:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <_arch_isr_direct_pm+0x20>)
     b0e:	6998      	ldr	r0, [r3, #24]
     b10:	2800      	cmp	r0, #0
     b12:	d003      	beq.n	b1c <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     b14:	2200      	movs	r2, #0
     b16:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     b18:	f008 fdfc 	bl	9714 <_sys_power_save_idle_exit>
	if (key) {
     b1c:	2c00      	cmp	r4, #0
     b1e:	d100      	bne.n	b22 <_arch_isr_direct_pm+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
     b20:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
     b22:	bd10      	pop	{r4, pc}
     b24:	20000ba8 	.word	0x20000ba8

00000b28 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b2a:	0017      	movs	r7, r2
     b2c:	001e      	movs	r6, r3
     b2e:	000c      	movs	r4, r1
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b32:	9909      	ldr	r1, [sp, #36]	; 0x24
     b34:	2204      	movs	r2, #4
     b36:	0005      	movs	r5, r0
     b38:	f009 fd58 	bl	a5ec <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     b3c:	0039      	movs	r1, r7
     b3e:	2207      	movs	r2, #7
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     b40:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
     b42:	2300      	movs	r3, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     b44:	3920      	subs	r1, #32
     b46:	1861      	adds	r1, r4, r1
     b48:	4391      	bics	r1, r2
	pInitCtx->pc &= 0xfffffffe;
     b4a:	4a09      	ldr	r2, [pc, #36]	; (b70 <_new_thread+0x48>)
     b4c:	64eb      	str	r3, [r5, #76]	; 0x4c
     b4e:	4382      	bics	r2, r0
	thread->fn_abort = NULL;
     b50:	652b      	str	r3, [r5, #80]	; 0x50
     b52:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     b54:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->a1 = (u32_t)pEntry;
     b56:	600e      	str	r6, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
     b58:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     b5a:	9a07      	ldr	r2, [sp, #28]
     b5c:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     b5e:	9a08      	ldr	r2, [sp, #32]
     b60:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
     b62:	2280      	movs	r2, #128	; 0x80
     b64:	0452      	lsls	r2, r2, #17
     b66:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     b68:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     b6a:	65ab      	str	r3, [r5, #88]	; 0x58
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
	thread_monitor_init(thread);
#endif
}
     b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	0000a459 	.word	0x0000a459

00000b74 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     b74:	4901      	ldr	r1, [pc, #4]	; (b7c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     b76:	2210      	movs	r2, #16
	str r2, [r1]
     b78:	600a      	str	r2, [r1, #0]
	bx lr
     b7a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     b7c:	e000ed10 	.word	0xe000ed10

00000b80 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
     b80:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     b82:	bf30      	wfi

	bx lr
     b84:	4770      	bx	lr
     b86:	46c0      	nop			; (mov r8, r8)

00000b88 <__hard_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* force unlock interrupts */
	cpsie i
     b88:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
     b8a:	2004      	movs	r0, #4
	mov r1, lr
     b8c:	4671      	mov	r1, lr
	tst r1, r0
     b8e:	4201      	tst	r1, r0
	beq _stack_frame_msp
     b90:	d002      	beq.n	b98 <_stack_frame_msp>
	mrs r0, PSP
     b92:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
     b96:	d101      	bne.n	b9c <_stack_frame_endif>

00000b98 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
     b98:	f3ef 8008 	mrs	r0, MSP

00000b9c <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     b9c:	b500      	push	{lr}
	bl _Fault
     b9e:	f7ff ff25 	bl	9ec <_Fault>

	pop {pc}
     ba2:	bd00      	pop	{pc}

00000ba4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
     ba4:	b570      	push	{r4, r5, r6, lr}
     ba6:	0004      	movs	r4, r0
     ba8:	000d      	movs	r5, r1
	switch (reason) {
     baa:	2804      	cmp	r0, #4
     bac:	d009      	beq.n	bc2 <_NanoFatalErrorHandler+0x1e>
     bae:	2805      	cmp	r0, #5
     bb0:	d016      	beq.n	be0 <_NanoFatalErrorHandler+0x3c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     bb2:	480c      	ldr	r0, [pc, #48]	; (be4 <_NanoFatalErrorHandler+0x40>)
	switch (reason) {
     bb4:	2c03      	cmp	r4, #3
     bb6:	d005      	beq.n	bc4 <_NanoFatalErrorHandler+0x20>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     bb8:	0021      	movs	r1, r4
     bba:	480b      	ldr	r0, [pc, #44]	; (be8 <_NanoFatalErrorHandler+0x44>)
     bbc:	f000 fa64 	bl	1088 <printk>
		break;
     bc0:	e002      	b.n	bc8 <_NanoFatalErrorHandler+0x24>
		printk("***** Kernel OOPS! *****\n");
     bc2:	480a      	ldr	r0, [pc, #40]	; (bec <_NanoFatalErrorHandler+0x48>)
     bc4:	f000 fa60 	bl	1088 <printk>
     bc8:	f009 f9fa 	bl	9fc0 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
     bcc:	69aa      	ldr	r2, [r5, #24]
     bce:	0001      	movs	r1, r0
     bd0:	4807      	ldr	r0, [pc, #28]	; (bf0 <_NanoFatalErrorHandler+0x4c>)
     bd2:	f000 fa59 	bl	1088 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     bd6:	0029      	movs	r1, r5
     bd8:	0020      	movs	r0, r4
     bda:	f000 f813 	bl	c04 <_SysFatalErrorHandler>
}
     bde:	bd70      	pop	{r4, r5, r6, pc}
		printk("***** Kernel Panic! *****\n");
     be0:	4804      	ldr	r0, [pc, #16]	; (bf4 <_NanoFatalErrorHandler+0x50>)
     be2:	e7ef      	b.n	bc4 <_NanoFatalErrorHandler+0x20>
     be4:	0000ad2d 	.word	0x0000ad2d
     be8:	0000ad88 	.word	0x0000ad88
     bec:	0000ad53 	.word	0x0000ad53
     bf0:	0000adab 	.word	0x0000adab
     bf4:	0000ad6d 	.word	0x0000ad6d

00000bf8 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     bf8:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
     bfa:	0001      	movs	r1, r0
     bfc:	6800      	ldr	r0, [r0, #0]
     bfe:	f7ff ffd1 	bl	ba4 <_NanoFatalErrorHandler>
}
     c02:	bd10      	pop	{r4, pc}

00000c04 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
     c04:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     c06:	2805      	cmp	r0, #5
     c08:	d00c      	beq.n	c24 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     c0a:	f009 fc13 	bl	a434 <k_is_in_isr>
     c0e:	2800      	cmp	r0, #0
     c10:	d00b      	beq.n	c2a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     c12:	f009 fc0f 	bl	a434 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     c16:	490b      	ldr	r1, [pc, #44]	; (c44 <_SysFatalErrorHandler+0x40>)
     c18:	2800      	cmp	r0, #0
     c1a:	d100      	bne.n	c1e <_SysFatalErrorHandler+0x1a>
     c1c:	490a      	ldr	r1, [pc, #40]	; (c48 <_SysFatalErrorHandler+0x44>)
     c1e:	480b      	ldr	r0, [pc, #44]	; (c4c <_SysFatalErrorHandler+0x48>)
     c20:	f000 fa32 	bl	1088 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     c24:	f7ff ffac 	bl	b80 <k_cpu_idle>
     c28:	e7fc      	b.n	c24 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     c2a:	f009 fc0d 	bl	a448 <_is_thread_essential>
     c2e:	2800      	cmp	r0, #0
     c30:	d1ef      	bne.n	c12 <_SysFatalErrorHandler+0xe>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     c32:	4c07      	ldr	r4, [pc, #28]	; (c50 <_SysFatalErrorHandler+0x4c>)
     c34:	4807      	ldr	r0, [pc, #28]	; (c54 <_SysFatalErrorHandler+0x50>)
     c36:	68a1      	ldr	r1, [r4, #8]
     c38:	f000 fa26 	bl	1088 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     c3c:	68a0      	ldr	r0, [r4, #8]
     c3e:	f000 f80b 	bl	c58 <_impl_k_thread_abort>
	}
	CODE_UNREACHABLE;
}
     c42:	bd10      	pop	{r4, pc}
     c44:	0000ade7 	.word	0x0000ade7
     c48:	0000adeb 	.word	0x0000adeb
     c4c:	0000adfc 	.word	0x0000adfc
     c50:	20000ba8 	.word	0x20000ba8
     c54:	0000ae1c 	.word	0x0000ae1c

00000c58 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     c58:	b570      	push	{r4, r5, r6, lr}
     c5a:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
     c5c:	f3ef 8410 	mrs	r4, PRIMASK
     c60:	b672      	cpsid	i
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     c62:	f009 fc5b 	bl	a51c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     c66:	4b0b      	ldr	r3, [pc, #44]	; (c94 <_impl_k_thread_abort+0x3c>)
     c68:	689b      	ldr	r3, [r3, #8]
     c6a:	429d      	cmp	r5, r3
     c6c:	d10d      	bne.n	c8a <_impl_k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     c6e:	4b0a      	ldr	r3, [pc, #40]	; (c98 <_impl_k_thread_abort+0x40>)
     c70:	685a      	ldr	r2, [r3, #4]
     c72:	05d2      	lsls	r2, r2, #23
     c74:	d104      	bne.n	c80 <_impl_k_thread_abort+0x28>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     c76:	f009 f9d1 	bl	a01c <_update_time_slice_before_swap>

	return __swap(key);
     c7a:	0020      	movs	r0, r4
     c7c:	f7ff fea2 	bl	9c4 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     c80:	2280      	movs	r2, #128	; 0x80
     c82:	6859      	ldr	r1, [r3, #4]
     c84:	0552      	lsls	r2, r2, #21
     c86:	430a      	orrs	r2, r1
     c88:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     c8a:	0020      	movs	r0, r4
     c8c:	f009 f92e 	bl	9eec <_reschedule_threads>
}
     c90:	bd70      	pop	{r4, r5, r6, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	20000ba8 	.word	0x20000ba8
     c98:	e000ed00 	.word	0xe000ed00

00000c9c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     c9c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     c9e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     ca0:	4a0a      	ldr	r2, [pc, #40]	; (ccc <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     ca2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     ca4:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	beq _idle_state_cleared
     ca6:	d003      	beq.n	cb0 <_idle_state_cleared>
	movs.n r1, #0
     ca8:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
     caa:	6191      	str	r1, [r2, #24]
	blx _sys_power_save_idle_exit
     cac:	f008 fd32 	bl	9714 <_sys_power_save_idle_exit>

00000cb0 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     cb0:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     cb2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
     cb6:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
     cb8:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
     cba:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     cbc:	4904      	ldr	r1, [pc, #16]	; (cd0 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     cbe:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     cc0:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     cc2:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
     cc4:	bc08      	pop	{r3}
	mov lr, r3
     cc6:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     cc8:	e60a      	b.n	8e0 <_ExcExit>
     cca:	0000      	.short	0x0000
	ldr r2, =_kernel
     ccc:	20000ba8 	.word	0x20000ba8
	ldr r1, =_sw_isr_table
     cd0:	000000a8 	.word	0x000000a8

00000cd4 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
     cd4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     cd6:	4804      	ldr	r0, [pc, #16]	; (ce8 <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     cd8:	4904      	ldr	r1, [pc, #16]	; (cec <__reset+0x18>)
    adds r0, r0, r1
     cda:	1840      	adds	r0, r0, r1
    msr PSP, r0
     cdc:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     ce0:	2002      	movs	r0, #2
    msr CONTROL, r0
     ce2:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     ce6:	e006      	b.n	cf6 <_PrepC>
    ldr r0, =_interrupt_stack
     ce8:	20001ad8 	.word	0x20001ad8
    ldr r1, =CONFIG_ISR_STACK_SIZE
     cec:	00000280 	.word	0x00000280

00000cf0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     cf0:	bf30      	wfi
    b _SysNmiOnReset
     cf2:	e7fd      	b.n	cf0 <_SysNmiOnReset>

00000cf4 <relocate_vector_table>:
	size_t vector_size = (size_t)_vector_end - (size_t)_vector_start;
	memcpy(VECTOR_ADDRESS, _vector_start, vector_size);
#elif defined(CONFIG_SW_VECTOR_RELAY)
	_vector_table_pointer = _vector_start;
#endif
}
     cf4:	4770      	bx	lr

00000cf6 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     cf6:	b510      	push	{r4, lr}
	relocate_vector_table();
     cf8:	f7ff fffc 	bl	cf4 <relocate_vector_table>
	enable_floating_point();
	_bss_zero();
     cfc:	f008 fd3a 	bl	9774 <_bss_zero>
	_data_copy();
     d00:	f008 fd44 	bl	978c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     d04:	f008 fd6c 	bl	97e0 <_Cstart>

00000d08 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     d08:	b510      	push	{r4, lr}
	handler();
     d0a:	f7ff fff1 	bl	cf0 <_SysNmiOnReset>
	_ExcExit();
     d0e:	f7ff fde7 	bl	8e0 <_ExcExit>
}
     d12:	bd10      	pop	{r4, pc}

00000d14 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     d14:	2000      	movs	r0, #0
     d16:	4770      	bx	lr

00000d18 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     d18:	680b      	ldr	r3, [r1, #0]
{
     d1a:	b510      	push	{r4, lr}
	ctx->count++;
     d1c:	3301      	adds	r3, #1
     d1e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     d20:	4b01      	ldr	r3, [pc, #4]	; (d28 <char_out+0x10>)
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	4798      	blx	r3
}
     d26:	bd10      	pop	{r4, pc}
     d28:	20002180 	.word	0x20002180

00000d2c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2e:	b087      	sub	sp, #28
     d30:	9303      	str	r3, [sp, #12]
     d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     d34:	0007      	movs	r7, r0
     d36:	9102      	str	r1, [sp, #8]
     d38:	9300      	str	r3, [sp, #0]
     d3a:	2b00      	cmp	r3, #0
     d3c:	dc01      	bgt.n	d42 <_printk_dec_ulong+0x16>
     d3e:	2301      	movs	r3, #1
     d40:	9300      	str	r3, [sp, #0]
     d42:	2320      	movs	r3, #32
     d44:	9305      	str	r3, [sp, #20]
     d46:	9b03      	ldr	r3, [sp, #12]
     d48:	2b01      	cmp	r3, #1
     d4a:	d101      	bne.n	d50 <_printk_dec_ulong+0x24>
     d4c:	332f      	adds	r3, #47	; 0x2f
     d4e:	9305      	str	r3, [sp, #20]
     d50:	230a      	movs	r3, #10
     d52:	9301      	str	r3, [sp, #4]
     d54:	2300      	movs	r3, #0
     d56:	0014      	movs	r4, r2
     d58:	2601      	movs	r6, #1
     d5a:	4d1f      	ldr	r5, [pc, #124]	; (dd8 <_printk_dec_ulong+0xac>)
     d5c:	9304      	str	r3, [sp, #16]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     d5e:	9b04      	ldr	r3, [sp, #16]
     d60:	2b00      	cmp	r3, #0
     d62:	d101      	bne.n	d68 <_printk_dec_ulong+0x3c>
     d64:	42a5      	cmp	r5, r4
     d66:	d226      	bcs.n	db6 <_printk_dec_ulong+0x8a>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     d68:	1c69      	adds	r1, r5, #1
     d6a:	0020      	movs	r0, r4
     d6c:	f7ff fa2c 	bl	1c8 <__aeabi_uidiv>
     d70:	9902      	ldr	r1, [sp, #8]
     d72:	3030      	adds	r0, #48	; 0x30
     d74:	47b8      	blx	r7
			found_largest_digit = 1;
     d76:	2301      	movs	r3, #1
			digits++;
     d78:	3601      	adds	r6, #1
			found_largest_digit = 1;
     d7a:	9304      	str	r3, [sp, #16]
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     d7c:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
     d7e:	1c69      	adds	r1, r5, #1
		remaining--;
     d80:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
     d82:	0020      	movs	r0, r4
		remaining--;
     d84:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
     d86:	f7ff fa63 	bl	250 <__aeabi_uidivmod>
		pos /= 10;
     d8a:	0028      	movs	r0, r5
		remainder %= (pos + 1);
     d8c:	000c      	movs	r4, r1
		pos /= 10;
     d8e:	210a      	movs	r1, #10
     d90:	f7ff fa1a 	bl	1c8 <__aeabi_uidiv>
	while (pos >= 9) {
     d94:	9b01      	ldr	r3, [sp, #4]
		pos /= 10;
     d96:	0005      	movs	r5, r0
	while (pos >= 9) {
     d98:	2b01      	cmp	r3, #1
     d9a:	d1e0      	bne.n	d5e <_printk_dec_ulong+0x32>
	}
	out((int)(remainder + 48), ctx);
     d9c:	0020      	movs	r0, r4
     d9e:	9902      	ldr	r1, [sp, #8]
     da0:	3030      	adds	r0, #48	; 0x30
     da2:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
     da4:	9b03      	ldr	r3, [sp, #12]
     da6:	2b03      	cmp	r3, #3
     da8:	d103      	bne.n	db2 <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
     daa:	9b00      	ldr	r3, [sp, #0]
     dac:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     dae:	2c00      	cmp	r4, #0
     db0:	dc0d      	bgt.n	dce <_printk_dec_ulong+0xa2>
			out(' ', ctx);
		}
	}
}
     db2:	b007      	add	sp, #28
     db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (remaining <= min_width
     db6:	9b00      	ldr	r3, [sp, #0]
     db8:	9a01      	ldr	r2, [sp, #4]
     dba:	4293      	cmp	r3, r2
     dbc:	dbde      	blt.n	d7c <_printk_dec_ulong+0x50>
				&& padding < PAD_SPACE_AFTER) {
     dbe:	9b03      	ldr	r3, [sp, #12]
     dc0:	2b02      	cmp	r3, #2
     dc2:	d8db      	bhi.n	d7c <_printk_dec_ulong+0x50>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     dc4:	9902      	ldr	r1, [sp, #8]
     dc6:	9805      	ldr	r0, [sp, #20]
     dc8:	47b8      	blx	r7
			digits++;
     dca:	3601      	adds	r6, #1
     dcc:	e7d6      	b.n	d7c <_printk_dec_ulong+0x50>
			out(' ', ctx);
     dce:	9902      	ldr	r1, [sp, #8]
     dd0:	2020      	movs	r0, #32
     dd2:	47b8      	blx	r7
     dd4:	3c01      	subs	r4, #1
     dd6:	e7ea      	b.n	dae <_printk_dec_ulong+0x82>
     dd8:	3b9ac9ff 	.word	0x3b9ac9ff

00000ddc <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     ddc:	680a      	ldr	r2, [r1, #0]
{
     dde:	b530      	push	{r4, r5, lr}
     de0:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
     de2:	2a00      	cmp	r2, #0
     de4:	d002      	beq.n	dec <str_out+0x10>
     de6:	684c      	ldr	r4, [r1, #4]
     de8:	42a3      	cmp	r3, r4
     dea:	db02      	blt.n	df2 <str_out+0x16>
		ctx->count++;
     dec:	3301      	adds	r3, #1
     dee:	608b      	str	r3, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
     df0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
     df2:	1e65      	subs	r5, r4, #1
     df4:	42ab      	cmp	r3, r5
     df6:	d103      	bne.n	e00 <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
     df8:	608c      	str	r4, [r1, #8]
     dfa:	2100      	movs	r1, #0
     dfc:	54d1      	strb	r1, [r2, r3]
     dfe:	e7f7      	b.n	df0 <str_out+0x14>
		ctx->str[ctx->count++] = c;
     e00:	1c5c      	adds	r4, r3, #1
     e02:	608c      	str	r4, [r1, #8]
     e04:	54d0      	strb	r0, [r2, r3]
     e06:	e7f3      	b.n	df0 <str_out+0x14>

00000e08 <__printk_hook_install>:
	_char_out = fn;
     e08:	4b01      	ldr	r3, [pc, #4]	; (e10 <__printk_hook_install+0x8>)
     e0a:	6018      	str	r0, [r3, #0]
}
     e0c:	4770      	bx	lr
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	20002180 	.word	0x20002180

00000e14 <_vprintk>:
{
     e14:	b5f0      	push	{r4, r5, r6, r7, lr}
     e16:	001c      	movs	r4, r3
	int long_ctr = 0;
     e18:	2300      	movs	r3, #0
{
     e1a:	b08d      	sub	sp, #52	; 0x34
	int long_ctr = 0;
     e1c:	9305      	str	r3, [sp, #20]
	int min_width = -1;
     e1e:	3b01      	subs	r3, #1
     e20:	9303      	str	r3, [sp, #12]
	enum pad_type padding = PAD_NONE;
     e22:	2300      	movs	r3, #0
{
     e24:	0007      	movs	r7, r0
	int might_format = 0; /* 1 if encountered a '%' */
     e26:	001e      	movs	r6, r3
{
     e28:	9102      	str	r1, [sp, #8]
     e2a:	9207      	str	r2, [sp, #28]
	enum pad_type padding = PAD_NONE;
     e2c:	9304      	str	r3, [sp, #16]
	while (*fmt) {
     e2e:	9b07      	ldr	r3, [sp, #28]
     e30:	7818      	ldrb	r0, [r3, #0]
     e32:	2800      	cmp	r0, #0
     e34:	d101      	bne.n	e3a <_vprintk+0x26>
}
     e36:	b00d      	add	sp, #52	; 0x34
     e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!might_format) {
     e3a:	2e00      	cmp	r6, #0
     e3c:	d108      	bne.n	e50 <_vprintk+0x3c>
			if (*fmt != '%') {
     e3e:	2825      	cmp	r0, #37	; 0x25
     e40:	d100      	bne.n	e44 <_vprintk+0x30>
     e42:	e107      	b.n	1054 <_vprintk+0x240>
				out((int)*fmt, ctx);
     e44:	9902      	ldr	r1, [sp, #8]
     e46:	47b8      	blx	r7
		++fmt;
     e48:	9b07      	ldr	r3, [sp, #28]
     e4a:	3301      	adds	r3, #1
     e4c:	9307      	str	r3, [sp, #28]
     e4e:	e7ee      	b.n	e2e <_vprintk+0x1a>
			switch (*fmt) {
     e50:	2864      	cmp	r0, #100	; 0x64
     e52:	d05d      	beq.n	f10 <_vprintk+0xfc>
     e54:	d818      	bhi.n	e88 <_vprintk+0x74>
     e56:	2839      	cmp	r0, #57	; 0x39
     e58:	d80a      	bhi.n	e70 <_vprintk+0x5c>
     e5a:	2831      	cmp	r0, #49	; 0x31
     e5c:	d24c      	bcs.n	ef8 <_vprintk+0xe4>
     e5e:	282d      	cmp	r0, #45	; 0x2d
     e60:	d039      	beq.n	ed6 <_vprintk+0xc2>
     e62:	2830      	cmp	r0, #48	; 0x30
     e64:	d03a      	beq.n	edc <_vprintk+0xc8>
     e66:	2825      	cmp	r0, #37	; 0x25
     e68:	d108      	bne.n	e7c <_vprintk+0x68>
				out((int)*fmt, ctx);
     e6a:	9902      	ldr	r1, [sp, #8]
     e6c:	47b8      	blx	r7
     e6e:	e065      	b.n	f3c <_vprintk+0x128>
			switch (*fmt) {
     e70:	2858      	cmp	r0, #88	; 0x58
     e72:	d100      	bne.n	e76 <_vprintk+0x62>
     e74:	e087      	b.n	f86 <_vprintk+0x172>
     e76:	2863      	cmp	r0, #99	; 0x63
     e78:	d100      	bne.n	e7c <_vprintk+0x68>
     e7a:	e0e6      	b.n	104a <_vprintk+0x236>
				out((int)'%', ctx);
     e7c:	9902      	ldr	r1, [sp, #8]
     e7e:	2025      	movs	r0, #37	; 0x25
     e80:	47b8      	blx	r7
				out((int)*fmt, ctx);
     e82:	9b07      	ldr	r3, [sp, #28]
     e84:	7818      	ldrb	r0, [r3, #0]
     e86:	e7f0      	b.n	e6a <_vprintk+0x56>
			switch (*fmt) {
     e88:	2870      	cmp	r0, #112	; 0x70
     e8a:	d072      	beq.n	f72 <_vprintk+0x15e>
     e8c:	d806      	bhi.n	e9c <_vprintk+0x88>
     e8e:	2869      	cmp	r0, #105	; 0x69
     e90:	d03e      	beq.n	f10 <_vprintk+0xfc>
     e92:	286c      	cmp	r0, #108	; 0x6c
     e94:	d038      	beq.n	f08 <_vprintk+0xf4>
     e96:	2868      	cmp	r0, #104	; 0x68
     e98:	d1f0      	bne.n	e7c <_vprintk+0x68>
     e9a:	e7d5      	b.n	e48 <_vprintk+0x34>
     e9c:	2875      	cmp	r0, #117	; 0x75
     e9e:	d057      	beq.n	f50 <_vprintk+0x13c>
     ea0:	d814      	bhi.n	ecc <_vprintk+0xb8>
     ea2:	2873      	cmp	r0, #115	; 0x73
     ea4:	d1ea      	bne.n	e7c <_vprintk+0x68>
				char *s = va_arg(ap, char *);
     ea6:	6826      	ldr	r6, [r4, #0]
     ea8:	1d25      	adds	r5, r4, #4
     eaa:	0034      	movs	r4, r6
				while (*s)
     eac:	7820      	ldrb	r0, [r4, #0]
     eae:	2800      	cmp	r0, #0
     eb0:	d000      	beq.n	eb4 <_vprintk+0xa0>
     eb2:	e0c1      	b.n	1038 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     eb4:	9b04      	ldr	r3, [sp, #16]
     eb6:	2b03      	cmp	r3, #3
     eb8:	d000      	beq.n	ebc <_vprintk+0xa8>
     eba:	e0d4      	b.n	1066 <_vprintk+0x252>
					int remaining = min_width - (s - start);
     ebc:	9b03      	ldr	r3, [sp, #12]
     ebe:	1ba4      	subs	r4, r4, r6
     ec0:	1b1c      	subs	r4, r3, r4
					while (remaining-- > 0) {
     ec2:	2c00      	cmp	r4, #0
     ec4:	dd00      	ble.n	ec8 <_vprintk+0xb4>
     ec6:	e0bb      	b.n	1040 <_vprintk+0x22c>
				int c = va_arg(ap, int);
     ec8:	002c      	movs	r4, r5
     eca:	e037      	b.n	f3c <_vprintk+0x128>
			switch (*fmt) {
     ecc:	2878      	cmp	r0, #120	; 0x78
     ece:	d05a      	beq.n	f86 <_vprintk+0x172>
     ed0:	287a      	cmp	r0, #122	; 0x7a
     ed2:	d0b9      	beq.n	e48 <_vprintk+0x34>
     ed4:	e7d2      	b.n	e7c <_vprintk+0x68>
				padding = PAD_SPACE_AFTER;
     ed6:	2303      	movs	r3, #3
					padding = PAD_ZERO_BEFORE;
     ed8:	9304      	str	r3, [sp, #16]
     eda:	e7b5      	b.n	e48 <_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
     edc:	9b03      	ldr	r3, [sp, #12]
     ede:	2b00      	cmp	r3, #0
     ee0:	da0d      	bge.n	efe <_vprintk+0xea>
     ee2:	9b04      	ldr	r3, [sp, #16]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d100      	bne.n	eea <_vprintk+0xd6>
     ee8:	e0bb      	b.n	1062 <_vprintk+0x24e>
				if (padding == PAD_NONE) {
     eea:	9b04      	ldr	r3, [sp, #16]
					min_width = 10 * min_width + *fmt - '0';
     eec:	3830      	subs	r0, #48	; 0x30
     eee:	9003      	str	r0, [sp, #12]
				if (padding == PAD_NONE) {
     ef0:	2b00      	cmp	r3, #0
     ef2:	d1a9      	bne.n	e48 <_vprintk+0x34>
					padding = PAD_SPACE_BEFORE;
     ef4:	3302      	adds	r3, #2
     ef6:	e7ef      	b.n	ed8 <_vprintk+0xc4>
				if (min_width < 0) {
     ef8:	9b03      	ldr	r3, [sp, #12]
     efa:	2b00      	cmp	r3, #0
     efc:	dbf5      	blt.n	eea <_vprintk+0xd6>
					min_width = 10 * min_width + *fmt - '0';
     efe:	230a      	movs	r3, #10
     f00:	9a03      	ldr	r2, [sp, #12]
     f02:	4353      	muls	r3, r2
     f04:	1818      	adds	r0, r3, r0
     f06:	e7f0      	b.n	eea <_vprintk+0xd6>
				long_ctr++;
     f08:	9b05      	ldr	r3, [sp, #20]
     f0a:	3301      	adds	r3, #1
     f0c:	9305      	str	r3, [sp, #20]
     f0e:	e79b      	b.n	e48 <_vprintk+0x34>
				if (long_ctr < 2) {
     f10:	9b05      	ldr	r3, [sp, #20]
     f12:	2b01      	cmp	r3, #1
     f14:	dc14      	bgt.n	f40 <_vprintk+0x12c>
					d = va_arg(ap, long);
     f16:	6825      	ldr	r5, [r4, #0]
     f18:	3404      	adds	r4, #4
				if (d < 0) {
     f1a:	2d00      	cmp	r5, #0
     f1c:	da06      	bge.n	f2c <_vprintk+0x118>
					out((int)'-', ctx);
     f1e:	9902      	ldr	r1, [sp, #8]
     f20:	202d      	movs	r0, #45	; 0x2d
     f22:	47b8      	blx	r7
					min_width--;
     f24:	9b03      	ldr	r3, [sp, #12]
					d = -d;
     f26:	426d      	negs	r5, r5
					min_width--;
     f28:	3b01      	subs	r3, #1
     f2a:	9303      	str	r3, [sp, #12]
				_printk_dec_ulong(out, ctx, d, padding,
     f2c:	002a      	movs	r2, r5
     f2e:	9b03      	ldr	r3, [sp, #12]
     f30:	9300      	str	r3, [sp, #0]
     f32:	9b04      	ldr	r3, [sp, #16]
				_printk_dec_ulong(out, ctx, u, padding,
     f34:	9902      	ldr	r1, [sp, #8]
     f36:	0038      	movs	r0, r7
     f38:	f7ff fef8 	bl	d2c <_printk_dec_ulong>
			might_format = 0;
     f3c:	2600      	movs	r6, #0
				break;
     f3e:	e783      	b.n	e48 <_vprintk+0x34>
					d = (long)va_arg(ap, long long);
     f40:	3407      	adds	r4, #7
     f42:	0023      	movs	r3, r4
     f44:	2207      	movs	r2, #7
     f46:	4393      	bics	r3, r2
     f48:	001c      	movs	r4, r3
     f4a:	681d      	ldr	r5, [r3, #0]
     f4c:	3408      	adds	r4, #8
     f4e:	e7e4      	b.n	f1a <_vprintk+0x106>
				if (long_ctr < 2) {
     f50:	9b05      	ldr	r3, [sp, #20]
     f52:	2b01      	cmp	r3, #1
     f54:	dc05      	bgt.n	f62 <_vprintk+0x14e>
					u = va_arg(ap, unsigned long);
     f56:	6822      	ldr	r2, [r4, #0]
     f58:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     f5a:	9b03      	ldr	r3, [sp, #12]
     f5c:	9300      	str	r3, [sp, #0]
     f5e:	9b04      	ldr	r3, [sp, #16]
     f60:	e7e8      	b.n	f34 <_vprintk+0x120>
					u = (unsigned long)va_arg(ap,
     f62:	3407      	adds	r4, #7
     f64:	0023      	movs	r3, r4
     f66:	2207      	movs	r2, #7
     f68:	4393      	bics	r3, r2
     f6a:	001c      	movs	r4, r3
     f6c:	681a      	ldr	r2, [r3, #0]
     f6e:	3408      	adds	r4, #8
     f70:	e7f3      	b.n	f5a <_vprintk+0x146>
				  out('0', ctx);
     f72:	9902      	ldr	r1, [sp, #8]
     f74:	2030      	movs	r0, #48	; 0x30
     f76:	47b8      	blx	r7
				  out('x', ctx);
     f78:	9902      	ldr	r1, [sp, #8]
     f7a:	2078      	movs	r0, #120	; 0x78
     f7c:	47b8      	blx	r7
				  min_width = 8;
     f7e:	2308      	movs	r3, #8
     f80:	9303      	str	r3, [sp, #12]
				  padding = PAD_ZERO_BEFORE;
     f82:	3b07      	subs	r3, #7
     f84:	9304      	str	r3, [sp, #16]
				if (long_ctr < 2) {
     f86:	9b05      	ldr	r3, [sp, #20]
     f88:	2b01      	cmp	r3, #1
     f8a:	dc16      	bgt.n	fba <_vprintk+0x1a6>
					x = va_arg(ap, unsigned long);
     f8c:	6823      	ldr	r3, [r4, #0]
     f8e:	3404      	adds	r4, #4
     f90:	9309      	str	r3, [sp, #36]	; 0x24
	int remaining = 8; /* 8 digits max */
     f92:	2308      	movs	r3, #8
     f94:	9306      	str	r3, [sp, #24]
	int digits = 0;
     f96:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
     f98:	2508      	movs	r5, #8
	int digits = 0;
     f9a:	9308      	str	r3, [sp, #32]
	int found_largest_digit = 0;
     f9c:	930b      	str	r3, [sp, #44]	; 0x2c
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     f9e:	3d01      	subs	r5, #1
     fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
     fa2:	00ab      	lsls	r3, r5, #2
     fa4:	40d8      	lsrs	r0, r3
     fa6:	230f      	movs	r3, #15
     fa8:	4018      	ands	r0, r3
		if (nibble || found_largest_digit || size == 1) {
     faa:	d112      	bne.n	fd2 <_vprintk+0x1be>
     fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     fae:	2b00      	cmp	r3, #0
     fb0:	d101      	bne.n	fb6 <_vprintk+0x1a2>
     fb2:	2d00      	cmp	r5, #0
     fb4:	d12c      	bne.n	1010 <_vprintk+0x1fc>
			nibble += nibble > 9 ? 87 : 48;
     fb6:	2330      	movs	r3, #48	; 0x30
     fb8:	e00f      	b.n	fda <_vprintk+0x1c6>
					x = (unsigned long)va_arg(ap,
     fba:	3407      	adds	r4, #7
     fbc:	0023      	movs	r3, r4
     fbe:	2207      	movs	r2, #7
     fc0:	4393      	bics	r3, r2
     fc2:	001c      	movs	r4, r3
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	3408      	adds	r4, #8
     fc8:	9309      	str	r3, [sp, #36]	; 0x24
     fca:	e7e2      	b.n	f92 <_vprintk+0x17e>
	for (; size; size--) {
     fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fce:	9306      	str	r3, [sp, #24]
     fd0:	e7e5      	b.n	f9e <_vprintk+0x18a>
			nibble += nibble > 9 ? 87 : 48;
     fd2:	2357      	movs	r3, #87	; 0x57
     fd4:	2809      	cmp	r0, #9
     fd6:	d800      	bhi.n	fda <_vprintk+0x1c6>
     fd8:	3b27      	subs	r3, #39	; 0x27
			out((int)nibble, ctx);
     fda:	18c0      	adds	r0, r0, r3
     fdc:	9902      	ldr	r1, [sp, #8]
     fde:	47b8      	blx	r7
			digits++;
     fe0:	9b08      	ldr	r3, [sp, #32]
			found_largest_digit = 1;
     fe2:	960b      	str	r6, [sp, #44]	; 0x2c
			digits++;
     fe4:	3301      	adds	r3, #1
     fe6:	9308      	str	r3, [sp, #32]
     fe8:	9b06      	ldr	r3, [sp, #24]
     fea:	930a      	str	r3, [sp, #40]	; 0x28
	for (; size; size--) {
     fec:	2d00      	cmp	r5, #0
     fee:	d1ed      	bne.n	fcc <_vprintk+0x1b8>
	if (padding == PAD_SPACE_AFTER) {
     ff0:	9b04      	ldr	r3, [sp, #16]
			might_format = 0;
     ff2:	002e      	movs	r6, r5
	if (padding == PAD_SPACE_AFTER) {
     ff4:	2b03      	cmp	r3, #3
     ff6:	d000      	beq.n	ffa <_vprintk+0x1e6>
     ff8:	e726      	b.n	e48 <_vprintk+0x34>
		remaining = min_width * 2 - digits;
     ffa:	9b03      	ldr	r3, [sp, #12]
     ffc:	005d      	lsls	r5, r3, #1
     ffe:	9b08      	ldr	r3, [sp, #32]
    1000:	1aed      	subs	r5, r5, r3
		while (remaining-- > 0) {
    1002:	2d00      	cmp	r5, #0
    1004:	dd9a      	ble.n	f3c <_vprintk+0x128>
			out(' ', ctx);
    1006:	9902      	ldr	r1, [sp, #8]
    1008:	2020      	movs	r0, #32
    100a:	47b8      	blx	r7
    100c:	3d01      	subs	r5, #1
    100e:	e7f8      	b.n	1002 <_vprintk+0x1ee>
		if (remaining-- <= min_width) {
    1010:	9b06      	ldr	r3, [sp, #24]
    1012:	9a06      	ldr	r2, [sp, #24]
    1014:	3b01      	subs	r3, #1
    1016:	930a      	str	r3, [sp, #40]	; 0x28
    1018:	9b03      	ldr	r3, [sp, #12]
    101a:	4293      	cmp	r3, r2
    101c:	dbe6      	blt.n	fec <_vprintk+0x1d8>
			if (padding == PAD_ZERO_BEFORE) {
    101e:	9b04      	ldr	r3, [sp, #16]
    1020:	2b01      	cmp	r3, #1
    1022:	d103      	bne.n	102c <_vprintk+0x218>
				out('0', ctx);
    1024:	2030      	movs	r0, #48	; 0x30
    1026:	9902      	ldr	r1, [sp, #8]
				out(' ', ctx);
    1028:	47b8      	blx	r7
    102a:	e7df      	b.n	fec <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
    102c:	9b04      	ldr	r3, [sp, #16]
    102e:	2b02      	cmp	r3, #2
    1030:	d1dc      	bne.n	fec <_vprintk+0x1d8>
				out(' ', ctx);
    1032:	9902      	ldr	r1, [sp, #8]
    1034:	2020      	movs	r0, #32
    1036:	e7f7      	b.n	1028 <_vprintk+0x214>
					out((int)(*s++), ctx);
    1038:	9902      	ldr	r1, [sp, #8]
    103a:	3401      	adds	r4, #1
    103c:	47b8      	blx	r7
    103e:	e735      	b.n	eac <_vprintk+0x98>
						out(' ', ctx);
    1040:	9902      	ldr	r1, [sp, #8]
    1042:	2020      	movs	r0, #32
    1044:	47b8      	blx	r7
    1046:	3c01      	subs	r4, #1
    1048:	e73b      	b.n	ec2 <_vprintk+0xae>
				out(c, ctx);
    104a:	9902      	ldr	r1, [sp, #8]
    104c:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    104e:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    1050:	47b8      	blx	r7
    1052:	e739      	b.n	ec8 <_vprintk+0xb4>
				min_width = -1;
    1054:	2301      	movs	r3, #1
    1056:	425b      	negs	r3, r3
				long_ctr = 0;
    1058:	9605      	str	r6, [sp, #20]
				padding = PAD_NONE;
    105a:	9604      	str	r6, [sp, #16]
				min_width = -1;
    105c:	9303      	str	r3, [sp, #12]
				might_format = 1;
    105e:	2601      	movs	r6, #1
    1060:	e6f2      	b.n	e48 <_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
    1062:	2301      	movs	r3, #1
    1064:	e738      	b.n	ed8 <_vprintk+0xc4>
				char *s = va_arg(ap, char *);
    1066:	002c      	movs	r4, r5
			might_format = 0;
    1068:	0006      	movs	r6, r0
    106a:	e6ed      	b.n	e48 <_vprintk+0x34>

0000106c <vprintk>:
{
    106c:	b507      	push	{r0, r1, r2, lr}
    106e:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    1070:	2100      	movs	r1, #0
{
    1072:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    1074:	9101      	str	r1, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
    1076:	4803      	ldr	r0, [pc, #12]	; (1084 <vprintk+0x18>)
    1078:	a901      	add	r1, sp, #4
    107a:	f7ff fecb 	bl	e14 <_vprintk>
}
    107e:	9801      	ldr	r0, [sp, #4]
    1080:	bd0e      	pop	{r1, r2, r3, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	00000d19 	.word	0x00000d19

00001088 <printk>:
{
    1088:	b40f      	push	{r0, r1, r2, r3}
    108a:	b507      	push	{r0, r1, r2, lr}
    108c:	a904      	add	r1, sp, #16
    108e:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
    1090:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1092:	f7ff ffeb 	bl	106c <vprintk>
}
    1096:	b003      	add	sp, #12
    1098:	bc08      	pop	{r3}
    109a:	b004      	add	sp, #16
    109c:	4718      	bx	r3
	...

000010a0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    10a0:	b40c      	push	{r2, r3}
    10a2:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    10a4:	2500      	movs	r5, #0
{
    10a6:	b085      	sub	sp, #20
    10a8:	ab08      	add	r3, sp, #32
    10aa:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    10ac:	9001      	str	r0, [sp, #4]
    10ae:	9102      	str	r1, [sp, #8]
{
    10b0:	0004      	movs	r4, r0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    10b2:	a901      	add	r1, sp, #4
    10b4:	4807      	ldr	r0, [pc, #28]	; (10d4 <snprintk+0x34>)
	va_start(ap, fmt);
    10b6:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    10b8:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    10ba:	f7ff feab 	bl	e14 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    10be:	9803      	ldr	r0, [sp, #12]
    10c0:	9b02      	ldr	r3, [sp, #8]
    10c2:	4298      	cmp	r0, r3
    10c4:	da00      	bge.n	10c8 <snprintk+0x28>
		str[ctx.count] = '\0';
    10c6:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    10c8:	b005      	add	sp, #20
    10ca:	bc30      	pop	{r4, r5}
    10cc:	bc08      	pop	{r3}
    10ce:	b002      	add	sp, #8
    10d0:	4718      	bx	r3
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	00000ddd 	.word	0x00000ddd

000010d8 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    10d8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    10da:	2500      	movs	r5, #0
{
    10dc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    10de:	9001      	str	r0, [sp, #4]
    10e0:	9102      	str	r1, [sp, #8]
{
    10e2:	0004      	movs	r4, r0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    10e4:	a901      	add	r1, sp, #4
    10e6:	4805      	ldr	r0, [pc, #20]	; (10fc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    10e8:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    10ea:	f7ff fe93 	bl	e14 <_vprintk>

	if (ctx.count < ctx.max) {
    10ee:	9803      	ldr	r0, [sp, #12]
    10f0:	9b02      	ldr	r3, [sp, #8]
    10f2:	4298      	cmp	r0, r3
    10f4:	da00      	bge.n	10f8 <vsnprintk+0x20>
		str[ctx.count] = '\0';
    10f6:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    10f8:	b005      	add	sp, #20
    10fa:	bd30      	pop	{r4, r5, pc}
    10fc:	00000ddd 	.word	0x00000ddd

00001100 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 26);

GEN_ABS_SYM_END
    1100:	4770      	bx	lr
	...

00001104 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1104:	b570      	push	{r4, r5, r6, lr}
    1106:	0004      	movs	r4, r0
    1108:	4d07      	ldr	r5, [pc, #28]	; (1128 <console_out+0x24>)
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    110a:	280a      	cmp	r0, #10
    110c:	d104      	bne.n	1118 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    110e:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    1110:	210d      	movs	r1, #13
    1112:	6843      	ldr	r3, [r0, #4]
    1114:	685b      	ldr	r3, [r3, #4]
    1116:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1118:	6828      	ldr	r0, [r5, #0]
    111a:	b2e1      	uxtb	r1, r4
    111c:	6843      	ldr	r3, [r0, #4]
    111e:	685b      	ldr	r3, [r3, #4]
    1120:	4798      	blx	r3

	return c;
}
    1122:	0020      	movs	r0, r4
    1124:	bd70      	pop	{r4, r5, r6, pc}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	20000014 	.word	0x20000014

0000112c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    112c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    112e:	4802      	ldr	r0, [pc, #8]	; (1138 <uart_console_hook_install+0xc>)
    1130:	f7ff fe6a 	bl	e08 <__printk_hook_install>
}
    1134:	bd10      	pop	{r4, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	00001105 	.word	0x00001105

0000113c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    113c:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    113e:	4804      	ldr	r0, [pc, #16]	; (1150 <uart_console_init+0x14>)
    1140:	f008 fac0 	bl	96c4 <device_get_binding>
    1144:	4b03      	ldr	r3, [pc, #12]	; (1154 <uart_console_init+0x18>)
    1146:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1148:	f7ff fff0 	bl	112c <uart_console_hook_install>

	return 0;
}
    114c:	2000      	movs	r0, #0
    114e:	bd10      	pop	{r4, pc}
    1150:	0000ae41 	.word	0x0000ae41
    1154:	20000014 	.word	0x20000014

00001158 <reset_display>:
		gpio_port_write(disp->dev, val);
	}
}

static void reset_display(struct mb_display *disp)
{
    1158:	b510      	push	{r4, lr}
    115a:	0004      	movs	r4, r0
	k_timer_stop(&disp->timer);
    115c:	3004      	adds	r0, #4

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
    115e:	f009 fb3d 	bl	a7dc <_impl_k_timer_stop>

	disp->str = NULL;
	disp->cur_img = 0;
    1162:	0022      	movs	r2, r4
	disp->str = NULL;
    1164:	2300      	movs	r3, #0
	disp->cur_img = 0;
    1166:	3239      	adds	r2, #57	; 0x39
	disp->str = NULL;
    1168:	6563      	str	r3, [r4, #84]	; 0x54
	disp->img = NULL;
	disp->img_count = 0;
    116a:	3a01      	subs	r2, #1
	disp->cur_img = 0;
    116c:	7053      	strb	r3, [r2, #1]
	disp->img_count = 0;
    116e:	7013      	strb	r3, [r2, #0]
	disp->scroll = SCROLL_OFF;
    1170:	2207      	movs	r2, #7
    1172:	343a      	adds	r4, #58	; 0x3a
    1174:	7823      	ldrb	r3, [r4, #0]
    1176:	4393      	bics	r3, r2
    1178:	7023      	strb	r3, [r4, #0]
}
    117a:	bd10      	pop	{r4, pc}

0000117c <start_image>:
{
    117c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    117e:	0002      	movs	r2, r0
    1180:	0004      	movs	r4, r0
    1182:	468c      	mov	ip, r1
	for (row = 0; row < DISPLAY_ROWS; row++) {
    1184:	2300      	movs	r3, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    1186:	2601      	movs	r6, #1
    1188:	323c      	adds	r2, #60	; 0x3c
    118a:	2709      	movs	r7, #9
		disp->row[row] = 0;
    118c:	2100      	movs	r1, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    118e:	435f      	muls	r7, r3
		disp->row[row] = 0;
    1190:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    1192:	000d      	movs	r5, r1
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    1194:	491d      	ldr	r1, [pc, #116]	; (120c <start_image+0x90>)
    1196:	19c9      	adds	r1, r1, r7
    1198:	9101      	str	r1, [sp, #4]
    119a:	4667      	mov	r7, ip
    119c:	9901      	ldr	r1, [sp, #4]
    119e:	5d48      	ldrb	r0, [r1, r5]
    11a0:	0901      	lsrs	r1, r0, #4
    11a2:	5c79      	ldrb	r1, [r7, r1]
    11a4:	0700      	lsls	r0, r0, #28
    11a6:	0f00      	lsrs	r0, r0, #28
    11a8:	40c1      	lsrs	r1, r0
    11aa:	4231      	tst	r1, r6
    11ac:	d006      	beq.n	11bc <start_image+0x40>
				disp->row[row] |= BIT(LED_COL1_GPIO_PIN + col);
    11ae:	0030      	movs	r0, r6
    11b0:	1d29      	adds	r1, r5, #4
    11b2:	4088      	lsls	r0, r1
    11b4:	0001      	movs	r1, r0
    11b6:	6810      	ldr	r0, [r2, #0]
    11b8:	4301      	orrs	r1, r0
    11ba:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    11bc:	3501      	adds	r5, #1
    11be:	2d09      	cmp	r5, #9
    11c0:	d1eb      	bne.n	119a <start_image+0x1e>
		disp->row[row] = ~disp->row[row] & col_mask;
    11c2:	6810      	ldr	r0, [r2, #0]
    11c4:	4912      	ldr	r1, [pc, #72]	; (1210 <start_image+0x94>)
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    11c6:	0035      	movs	r5, r6
		disp->row[row] = ~disp->row[row] & col_mask;
    11c8:	4381      	bics	r1, r0
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    11ca:	0018      	movs	r0, r3
    11cc:	300d      	adds	r0, #13
    11ce:	4085      	lsls	r5, r0
	for (row = 0; row < DISPLAY_ROWS; row++) {
    11d0:	3301      	adds	r3, #1
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    11d2:	4329      	orrs	r1, r5
    11d4:	c202      	stmia	r2!, {r1}
	for (row = 0; row < DISPLAY_ROWS; row++) {
    11d6:	2b03      	cmp	r3, #3
    11d8:	d1d7      	bne.n	118a <start_image+0xe>
	disp->cur = 0;
    11da:	0023      	movs	r3, r4
    11dc:	2200      	movs	r2, #0
    11de:	333b      	adds	r3, #59	; 0x3b
    11e0:	701a      	strb	r2, [r3, #0]
	if (disp->duration == K_FOREVER) {
    11e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    11e4:	3301      	adds	r3, #1
    11e6:	d10a      	bne.n	11fe <start_image+0x82>
		disp->expiry = K_FOREVER;
    11e8:	2201      	movs	r2, #1
    11ea:	4252      	negs	r2, r2
    11ec:	17d3      	asrs	r3, r2, #31
		disp->expiry = k_uptime_get() + disp->duration;
    11ee:	64a2      	str	r2, [r4, #72]	; 0x48
    11f0:	64e3      	str	r3, [r4, #76]	; 0x4c
	k_timer_start(&disp->timer, K_NO_WAIT, K_MSEC(4));
    11f2:	1d20      	adds	r0, r4, #4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
    11f4:	2204      	movs	r2, #4
    11f6:	2100      	movs	r1, #0
    11f8:	f009 fad1 	bl	a79e <_impl_k_timer_start>
}
    11fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_TIMER_USER_DATA_SET, k_timer_user_data_set, struct k_timer *, timer, void *, user_data);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer);

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    11fe:	f008 ffcf 	bl	a1a0 <_impl_k_uptime_get>
		disp->expiry = k_uptime_get() + disp->duration;
    1202:	6d22      	ldr	r2, [r4, #80]	; 0x50
    1204:	17d3      	asrs	r3, r2, #31
    1206:	1812      	adds	r2, r2, r0
    1208:	414b      	adcs	r3, r1
    120a:	e7f0      	b.n	11ee <start_image+0x72>
    120c:	0000ae48 	.word	0x0000ae48
    1210:	00001ff0 	.word	0x00001ff0

00001214 <gpio_pin_configure.constprop.4>:
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    1214:	b510      	push	{r4, lr}
	return api->config(port, access_op, pin, flags);
    1216:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    1218:	000a      	movs	r2, r1
	return api->config(port, access_op, pin, flags);
    121a:	681c      	ldr	r4, [r3, #0]
    121c:	2100      	movs	r1, #0
    121e:	2301      	movs	r3, #1
    1220:	47a0      	blx	r4
}
    1222:	bd10      	pop	{r4, pc}

00001224 <mb_display_init>:
{
	return &display;
}

static int mb_display_init(struct device *dev)
{
    1224:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1226:	481b      	ldr	r0, [pc, #108]	; (1294 <mb_display_init+0x70>)
    1228:	f008 fa4c 	bl	96c4 <device_get_binding>
    122c:	4c1a      	ldr	r4, [pc, #104]	; (1298 <mb_display_init+0x74>)

	__ASSERT(dev, "No GPIO device found");

	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    122e:	210d      	movs	r1, #13
	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1230:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    1232:	f7ff ffef 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW2_GPIO_PIN, GPIO_DIR_OUT);
    1236:	210e      	movs	r1, #14
    1238:	6820      	ldr	r0, [r4, #0]
    123a:	f7ff ffeb 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW3_GPIO_PIN, GPIO_DIR_OUT);
    123e:	210f      	movs	r1, #15
    1240:	6820      	ldr	r0, [r4, #0]
    1242:	f7ff ffe7 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL1_GPIO_PIN, GPIO_DIR_OUT);
    1246:	2104      	movs	r1, #4
    1248:	6820      	ldr	r0, [r4, #0]
    124a:	f7ff ffe3 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL2_GPIO_PIN, GPIO_DIR_OUT);
    124e:	2105      	movs	r1, #5
    1250:	6820      	ldr	r0, [r4, #0]
    1252:	f7ff ffdf 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL3_GPIO_PIN, GPIO_DIR_OUT);
    1256:	2106      	movs	r1, #6
    1258:	6820      	ldr	r0, [r4, #0]
    125a:	f7ff ffdb 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL4_GPIO_PIN, GPIO_DIR_OUT);
    125e:	2107      	movs	r1, #7
    1260:	6820      	ldr	r0, [r4, #0]
    1262:	f7ff ffd7 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL5_GPIO_PIN, GPIO_DIR_OUT);
    1266:	2108      	movs	r1, #8
    1268:	6820      	ldr	r0, [r4, #0]
    126a:	f7ff ffd3 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL6_GPIO_PIN, GPIO_DIR_OUT);
    126e:	2109      	movs	r1, #9
    1270:	6820      	ldr	r0, [r4, #0]
    1272:	f7ff ffcf 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL7_GPIO_PIN, GPIO_DIR_OUT);
    1276:	210a      	movs	r1, #10
    1278:	6820      	ldr	r0, [r4, #0]
    127a:	f7ff ffcb 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL8_GPIO_PIN, GPIO_DIR_OUT);
    127e:	210b      	movs	r1, #11
    1280:	6820      	ldr	r0, [r4, #0]
    1282:	f7ff ffc7 	bl	1214 <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL9_GPIO_PIN, GPIO_DIR_OUT);
    1286:	210c      	movs	r1, #12
    1288:	6820      	ldr	r0, [r4, #0]
    128a:	f7ff ffc3 	bl	1214 <gpio_pin_configure.constprop.4>

	return 0;
}
    128e:	2000      	movs	r0, #0
    1290:	bd10      	pop	{r4, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	0000ac67 	.word	0x0000ac67
    1298:	20002188 	.word	0x20002188

0000129c <current_img>:
	if (disp->scroll && disp->first) {
    129c:	0002      	movs	r2, r0
    129e:	323a      	adds	r2, #58	; 0x3a
    12a0:	7812      	ldrb	r2, [r2, #0]
{
    12a2:	0003      	movs	r3, r0
	if (disp->scroll && disp->first) {
    12a4:	0751      	lsls	r1, r2, #29
    12a6:	d002      	beq.n	12ae <current_img+0x12>
		return get_font(' ');
    12a8:	480c      	ldr	r0, [pc, #48]	; (12dc <current_img+0x40>)
	if (disp->scroll && disp->first) {
    12aa:	0711      	lsls	r1, r2, #28
    12ac:	d40e      	bmi.n	12cc <current_img+0x30>
    12ae:	0019      	movs	r1, r3
    12b0:	3139      	adds	r1, #57	; 0x39
	if (disp->text) {
    12b2:	0692      	lsls	r2, r2, #26
    12b4:	d50b      	bpl.n	12ce <current_img+0x32>
		return get_font(disp->str[disp->cur_img]);
    12b6:	780a      	ldrb	r2, [r1, #0]
    12b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    12ba:	4808      	ldr	r0, [pc, #32]	; (12dc <current_img+0x40>)
    12bc:	5c9b      	ldrb	r3, [r3, r2]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    12be:	3b20      	subs	r3, #32
    12c0:	b2da      	uxtb	r2, r3
    12c2:	2a5e      	cmp	r2, #94	; 0x5e
    12c4:	d802      	bhi.n	12cc <current_img+0x30>
	return &mb_font[ch - MB_FONT_START];
    12c6:	2205      	movs	r2, #5
    12c8:	4353      	muls	r3, r2
    12ca:	18c0      	adds	r0, r0, r3
}
    12cc:	4770      	bx	lr
		return &disp->img[disp->cur_img];
    12ce:	2005      	movs	r0, #5
    12d0:	780a      	ldrb	r2, [r1, #0]
    12d2:	4342      	muls	r2, r0
    12d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
    12d6:	1880      	adds	r0, r0, r2
    12d8:	e7f8      	b.n	12cc <current_img+0x30>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	0000ae63 	.word	0x0000ae63

000012e0 <start_single>:
	if (disp->text) {
    12e0:	0003      	movs	r3, r0
	disp->duration = duration;
    12e2:	6501      	str	r1, [r0, #80]	; 0x50
	if (disp->text) {
    12e4:	333a      	adds	r3, #58	; 0x3a
    12e6:	781b      	ldrb	r3, [r3, #0]
{
    12e8:	b510      	push	{r4, lr}
	if (disp->text) {
    12ea:	069b      	lsls	r3, r3, #26
    12ec:	d50c      	bpl.n	1308 <start_single+0x28>
		start_image(disp, get_font(disp->str[0]));
    12ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
    12f0:	4906      	ldr	r1, [pc, #24]	; (130c <start_single+0x2c>)
    12f2:	781b      	ldrb	r3, [r3, #0]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    12f4:	3b20      	subs	r3, #32
    12f6:	b2da      	uxtb	r2, r3
    12f8:	2a5e      	cmp	r2, #94	; 0x5e
    12fa:	d802      	bhi.n	1302 <start_single+0x22>
	return &mb_font[ch - MB_FONT_START];
    12fc:	2205      	movs	r2, #5
    12fe:	4353      	muls	r3, r2
    1300:	18c9      	adds	r1, r1, r3
		start_image(disp, disp->img);
    1302:	f7ff ff3b 	bl	117c <start_image>
}
    1306:	bd10      	pop	{r4, pc}
		start_image(disp, disp->img);
    1308:	6d41      	ldr	r1, [r0, #84]	; 0x54
    130a:	e7fa      	b.n	1302 <start_single+0x22>
    130c:	0000ae63 	.word	0x0000ae63

00001310 <clear_display>:
{
    1310:	3804      	subs	r0, #4
    1312:	b510      	push	{r4, lr}
    1314:	6800      	ldr	r0, [r0, #0]
	return api->write(port, access_op, pin, value);
    1316:	2200      	movs	r2, #0
    1318:	6843      	ldr	r3, [r0, #4]
    131a:	2101      	movs	r1, #1
    131c:	685c      	ldr	r4, [r3, #4]
    131e:	4b01      	ldr	r3, [pc, #4]	; (1324 <clear_display+0x14>)
    1320:	47a0      	blx	r4
}
    1322:	bd10      	pop	{r4, pc}
    1324:	00001ff0 	.word	0x00001ff0

00001328 <show_row>:
{
    1328:	b5f0      	push	{r4, r5, r6, r7, lr}
    132a:	0004      	movs	r4, r0
	update_pins(disp, disp->row[disp->cur]);
    132c:	0026      	movs	r6, r4
    132e:	3637      	adds	r6, #55	; 0x37
    1330:	1f05      	subs	r5, r0, #4
    1332:	7833      	ldrb	r3, [r6, #0]
    1334:	6828      	ldr	r0, [r5, #0]
    1336:	330e      	adds	r3, #14
    1338:	6842      	ldr	r2, [r0, #4]
    133a:	009b      	lsls	r3, r3, #2
    133c:	18eb      	adds	r3, r5, r3
    133e:	6857      	ldr	r7, [r2, #4]
{
    1340:	b087      	sub	sp, #28
    1342:	685b      	ldr	r3, [r3, #4]
    1344:	2200      	movs	r2, #0
    1346:	2101      	movs	r1, #1
    1348:	47b8      	blx	r7
	disp->cur = (disp->cur + 1) % DISPLAY_ROWS;
    134a:	7830      	ldrb	r0, [r6, #0]
    134c:	2103      	movs	r1, #3
    134e:	3001      	adds	r0, #1
    1350:	f7fe ffde 	bl	310 <__aeabi_idivmod>
    1354:	1e0f      	subs	r7, r1, #0
    1356:	7031      	strb	r1, [r6, #0]
	if (disp->cur == 0 && disp->expiry != K_FOREVER &&
    1358:	d000      	beq.n	135c <show_row+0x34>
    135a:	e091      	b.n	1480 <show_row+0x158>
    135c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    135e:	3301      	adds	r3, #1
    1360:	d103      	bne.n	136a <show_row+0x42>
    1362:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1364:	3301      	adds	r3, #1
    1366:	d100      	bne.n	136a <show_row+0x42>
    1368:	e08a      	b.n	1480 <show_row+0x158>
    136a:	f008 ff19 	bl	a1a0 <_impl_k_uptime_get>
    136e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1370:	428b      	cmp	r3, r1
    1372:	db05      	blt.n	1380 <show_row+0x58>
    1374:	d000      	beq.n	1378 <show_row+0x50>
    1376:	e083      	b.n	1480 <show_row+0x158>
    1378:	6cab      	ldr	r3, [r5, #72]	; 0x48
    137a:	4283      	cmp	r3, r0
    137c:	d300      	bcc.n	1380 <show_row+0x58>
    137e:	e07f      	b.n	1480 <show_row+0x158>
		if (disp->scroll) {
    1380:	0021      	movs	r1, r4
    1382:	3136      	adds	r1, #54	; 0x36
    1384:	780a      	ldrb	r2, [r1, #0]
    1386:	0753      	lsls	r3, r2, #29
    1388:	d100      	bne.n	138c <show_row+0x64>
    138a:	e097      	b.n	14bc <show_row+0x194>
	return 5 + disp->img_sep;
    138c:	0653      	lsls	r3, r2, #25
    138e:	0fdb      	lsrs	r3, r3, #31
    1390:	3305      	adds	r3, #5
	if (disp->scroll < scroll_steps(disp)) {
    1392:	0756      	lsls	r6, r2, #29
    1394:	b2db      	uxtb	r3, r3
    1396:	0f76      	lsrs	r6, r6, #29
    1398:	9300      	str	r3, [sp, #0]
    139a:	429e      	cmp	r6, r3
    139c:	da58      	bge.n	1450 <show_row+0x128>
	if (disp->text) {
    139e:	2320      	movs	r3, #32
    13a0:	4013      	ands	r3, r2
    13a2:	9303      	str	r3, [sp, #12]
		if (disp->first) {
    13a4:	2308      	movs	r3, #8
    13a6:	401a      	ands	r2, r3
    13a8:	9201      	str	r2, [sp, #4]
			const struct mb_image *i1 = current_img(disp);
    13aa:	0028      	movs	r0, r5
    13ac:	f7ff ff76 	bl	129c <current_img>
	if (disp->text) {
    13b0:	9b03      	ldr	r3, [sp, #12]
			const struct mb_image *i1 = current_img(disp);
    13b2:	9002      	str	r0, [sp, #8]
    13b4:	1f22      	subs	r2, r4, #4
	if (disp->text) {
    13b6:	2b00      	cmp	r3, #0
    13b8:	d035      	beq.n	1426 <show_row+0xfe>
		if (disp->first) {
    13ba:	9b01      	ldr	r3, [sp, #4]
    13bc:	2b00      	cmp	r3, #0
    13be:	d023      	beq.n	1408 <show_row+0xe0>
			return get_font(disp->str[0]);
    13c0:	6d53      	ldr	r3, [r2, #84]	; 0x54
    13c2:	781a      	ldrb	r2, [r3, #0]
    13c4:	4b4a      	ldr	r3, [pc, #296]	; (14f0 <show_row+0x1c8>)
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    13c6:	3a20      	subs	r2, #32
    13c8:	b2d1      	uxtb	r1, r2
    13ca:	295e      	cmp	r1, #94	; 0x5e
    13cc:	d802      	bhi.n	13d4 <show_row+0xac>
	return &mb_font[ch - MB_FONT_START];
    13ce:	2105      	movs	r1, #5
    13d0:	434a      	muls	r2, r1
    13d2:	189b      	adds	r3, r3, r2
				      (i2->row[i] << (scroll_steps(disp) -
    13d4:	9a00      	ldr	r2, [sp, #0]
    13d6:	5ddb      	ldrb	r3, [r3, r7]
    13d8:	1b92      	subs	r2, r2, r6
    13da:	4093      	lsls	r3, r2
			img.row[i] = ((i1->row[i] >> disp->scroll) |
    13dc:	9a02      	ldr	r2, [sp, #8]
    13de:	5dd2      	ldrb	r2, [r2, r7]
    13e0:	4132      	asrs	r2, r6
    13e2:	4313      	orrs	r3, r2
    13e4:	aa04      	add	r2, sp, #16
    13e6:	54bb      	strb	r3, [r7, r2]
		for (i = 0; i < 5; i++) {
    13e8:	3701      	adds	r7, #1
    13ea:	2f05      	cmp	r7, #5
    13ec:	d1dd      	bne.n	13aa <show_row+0x82>
		disp->scroll++;
    13ee:	2207      	movs	r2, #7
    13f0:	3436      	adds	r4, #54	; 0x36
    13f2:	7823      	ldrb	r3, [r4, #0]
    13f4:	3601      	adds	r6, #1
    13f6:	4016      	ands	r6, r2
    13f8:	4393      	bics	r3, r2
    13fa:	431e      	orrs	r6, r3
    13fc:	7026      	strb	r6, [r4, #0]
		start_image(disp, &img);
    13fe:	a904      	add	r1, sp, #16
	start_image(disp, current_img(disp));
    1400:	0028      	movs	r0, r5
    1402:	f7ff febb 	bl	117c <start_image>
}
    1406:	e03b      	b.n	1480 <show_row+0x158>
		} else if (disp->str[disp->cur_img]) {
    1408:	0023      	movs	r3, r4
    140a:	3335      	adds	r3, #53	; 0x35
    140c:	6d52      	ldr	r2, [r2, #84]	; 0x54
    140e:	7819      	ldrb	r1, [r3, #0]
    1410:	5c53      	ldrb	r3, [r2, r1]
    1412:	469c      	mov	ip, r3
    1414:	4660      	mov	r0, ip
			return get_font(' ');
    1416:	4b36      	ldr	r3, [pc, #216]	; (14f0 <show_row+0x1c8>)
		} else if (disp->str[disp->cur_img]) {
    1418:	2800      	cmp	r0, #0
    141a:	d0db      	beq.n	13d4 <show_row+0xac>
			return get_font(disp->str[disp->cur_img + 1]);
    141c:	1852      	adds	r2, r2, r1
    141e:	7852      	ldrb	r2, [r2, #1]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    1420:	3a20      	subs	r2, #32
    1422:	b2d1      	uxtb	r1, r2
    1424:	e7d1      	b.n	13ca <show_row+0xa2>
		if (disp->first) {
    1426:	9b01      	ldr	r3, [sp, #4]
    1428:	2b00      	cmp	r3, #0
    142a:	d001      	beq.n	1430 <show_row+0x108>
			return &disp->img[0];
    142c:	6d53      	ldr	r3, [r2, #84]	; 0x54
    142e:	e7d1      	b.n	13d4 <show_row+0xac>
		} else if (disp->cur_img < (disp->img_count - 1)) {
    1430:	0023      	movs	r3, r4
    1432:	3335      	adds	r3, #53	; 0x35
    1434:	7819      	ldrb	r1, [r3, #0]
    1436:	3b01      	subs	r3, #1
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	3b01      	subs	r3, #1
    143c:	469c      	mov	ip, r3
			return get_font(' ');
    143e:	4b2c      	ldr	r3, [pc, #176]	; (14f0 <show_row+0x1c8>)
		} else if (disp->cur_img < (disp->img_count - 1)) {
    1440:	4561      	cmp	r1, ip
    1442:	dac7      	bge.n	13d4 <show_row+0xac>
			return &disp->img[disp->cur_img + 1];
    1444:	2305      	movs	r3, #5
    1446:	3101      	adds	r1, #1
    1448:	4359      	muls	r1, r3
    144a:	6d53      	ldr	r3, [r2, #84]	; 0x54
    144c:	185b      	adds	r3, r3, r1
    144e:	e7c1      	b.n	13d4 <show_row+0xac>
    1450:	0020      	movs	r0, r4
		if (disp->first) {
    1452:	2308      	movs	r3, #8
    1454:	3035      	adds	r0, #53	; 0x35
    1456:	421a      	tst	r2, r3
    1458:	d014      	beq.n	1484 <show_row+0x15c>
			disp->first = 0;
    145a:	439a      	bics	r2, r3
    145c:	700a      	strb	r2, [r1, #0]
	if (disp->text) {
    145e:	2320      	movs	r3, #32
    1460:	780a      	ldrb	r2, [r1, #0]
    1462:	4013      	ands	r3, r2
    1464:	d012      	beq.n	148c <show_row+0x164>
		return (disp->str[disp->cur_img] == '\0');
    1466:	7803      	ldrb	r3, [r0, #0]
    1468:	6d6c      	ldr	r4, [r5, #84]	; 0x54
    146a:	5ce4      	ldrb	r4, [r4, r3]
    146c:	4263      	negs	r3, r4
    146e:	4163      	adcs	r3, r4
		return (disp->cur_img >= disp->img_count);
    1470:	b2db      	uxtb	r3, r3
		if (last_frame(disp)) {
    1472:	2b00      	cmp	r3, #0
    1474:	d016      	beq.n	14a4 <show_row+0x17c>
			if (!disp->loop) {
    1476:	06d3      	lsls	r3, r2, #27
    1478:	d40e      	bmi.n	1498 <show_row+0x170>
			reset_display(disp);
    147a:	0028      	movs	r0, r5
    147c:	f7ff fe6c 	bl	1158 <reset_display>
}
    1480:	b007      	add	sp, #28
    1482:	bdf0      	pop	{r4, r5, r6, r7, pc}
			disp->cur_img++;
    1484:	7803      	ldrb	r3, [r0, #0]
    1486:	3301      	adds	r3, #1
    1488:	7003      	strb	r3, [r0, #0]
    148a:	e7e8      	b.n	145e <show_row+0x136>
		return (disp->cur_img >= disp->img_count);
    148c:	3434      	adds	r4, #52	; 0x34
    148e:	7806      	ldrb	r6, [r0, #0]
    1490:	7824      	ldrb	r4, [r4, #0]
    1492:	42a6      	cmp	r6, r4
    1494:	415b      	adcs	r3, r3
    1496:	e7eb      	b.n	1470 <show_row+0x148>
			disp->cur_img = 0;
    1498:	2300      	movs	r3, #0
    149a:	7003      	strb	r3, [r0, #0]
			disp->first = 1;
    149c:	780a      	ldrb	r2, [r1, #0]
    149e:	3308      	adds	r3, #8
    14a0:	4313      	orrs	r3, r2
    14a2:	700b      	strb	r3, [r1, #0]
		disp->scroll = SCROLL_START;
    14a4:	2207      	movs	r2, #7
    14a6:	780b      	ldrb	r3, [r1, #0]
    14a8:	4393      	bics	r3, r2
    14aa:	001a      	movs	r2, r3
    14ac:	2301      	movs	r3, #1
    14ae:	4313      	orrs	r3, r2
		disp->cur_img = 0;
    14b0:	700b      	strb	r3, [r1, #0]
	start_image(disp, current_img(disp));
    14b2:	0028      	movs	r0, r5
    14b4:	f7ff fef2 	bl	129c <current_img>
    14b8:	0001      	movs	r1, r0
    14ba:	e7a1      	b.n	1400 <show_row+0xd8>
	disp->cur_img++;
    14bc:	0021      	movs	r1, r4
	if (disp->text) {
    14be:	2320      	movs	r3, #32
	disp->cur_img++;
    14c0:	3135      	adds	r1, #53	; 0x35
    14c2:	7808      	ldrb	r0, [r1, #0]
	if (disp->text) {
    14c4:	4013      	ands	r3, r2
	disp->cur_img++;
    14c6:	3001      	adds	r0, #1
    14c8:	b2c0      	uxtb	r0, r0
    14ca:	7008      	strb	r0, [r1, #0]
	if (disp->text) {
    14cc:	2b00      	cmp	r3, #0
    14ce:	d00a      	beq.n	14e6 <show_row+0x1be>
		return (disp->str[disp->cur_img] == '\0');
    14d0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    14d2:	5c18      	ldrb	r0, [r3, r0]
    14d4:	4243      	negs	r3, r0
    14d6:	4143      	adcs	r3, r0
		return (disp->cur_img >= disp->img_count);
    14d8:	b2db      	uxtb	r3, r3
	if (last_frame(disp)) {
    14da:	2b00      	cmp	r3, #0
    14dc:	d0e9      	beq.n	14b2 <show_row+0x18a>
		if (!disp->loop) {
    14de:	06d3      	lsls	r3, r2, #27
    14e0:	d5cb      	bpl.n	147a <show_row+0x152>
		disp->cur_img = 0;
    14e2:	2300      	movs	r3, #0
    14e4:	e7e4      	b.n	14b0 <show_row+0x188>
		return (disp->cur_img >= disp->img_count);
    14e6:	3434      	adds	r4, #52	; 0x34
    14e8:	7824      	ldrb	r4, [r4, #0]
    14ea:	42a0      	cmp	r0, r4
    14ec:	415b      	adcs	r3, r3
    14ee:	e7f3      	b.n	14d8 <show_row+0x1b0>
    14f0:	0000ae63 	.word	0x0000ae63

000014f4 <mb_display_print>:
{
    14f4:	b408      	push	{r3}
    14f6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    14f8:	0004      	movs	r4, r0
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    14fa:	0027      	movs	r7, r4
{
    14fc:	ad09      	add	r5, sp, #36	; 0x24
    14fe:	cd08      	ldmia	r5!, {r3}
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    1500:	3758      	adds	r7, #88	; 0x58
{
    1502:	9100      	str	r1, [sp, #0]
    1504:	0016      	movs	r6, r2
    1506:	9301      	str	r3, [sp, #4]
	reset_display(disp);
    1508:	f7ff fe26 	bl	1158 <reset_display>
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    150c:	002b      	movs	r3, r5
    150e:	9a01      	ldr	r2, [sp, #4]
    1510:	2128      	movs	r1, #40	; 0x28
    1512:	0038      	movs	r0, r7
	va_start(ap, fmt);
    1514:	9503      	str	r5, [sp, #12]
	vsnprintk(disp->str_buf, sizeof(disp->str_buf), fmt, ap);
    1516:	f7ff fddf 	bl	10d8 <vsnprintk>
	if (disp->str_buf[0] == '\0') {
    151a:	783b      	ldrb	r3, [r7, #0]
    151c:	2b00      	cmp	r3, #0
    151e:	d02a      	beq.n	1576 <mb_display_print+0x82>
	disp->text = 1;
    1520:	0025      	movs	r5, r4
	disp->cur_img = 0;
    1522:	0022      	movs	r2, r4
    1524:	2100      	movs	r1, #0
	disp->str = disp->str_buf;
    1526:	6567      	str	r7, [r4, #84]	; 0x54
	disp->text = 1;
    1528:	353a      	adds	r5, #58	; 0x3a
	disp->cur_img = 0;
    152a:	3239      	adds	r2, #57	; 0x39
	disp->text = 1;
    152c:	782b      	ldrb	r3, [r5, #0]
	disp->cur_img = 0;
    152e:	7011      	strb	r1, [r2, #0]
	disp->loop = !!(mode & MB_DISPLAY_FLAG_LOOP);
    1530:	9a00      	ldr	r2, [sp, #0]
    1532:	3160      	adds	r1, #96	; 0x60
    1534:	03d2      	lsls	r2, r2, #15
    1536:	430b      	orrs	r3, r1
    1538:	0fd2      	lsrs	r2, r2, #31
    153a:	3950      	subs	r1, #80	; 0x50
    153c:	0112      	lsls	r2, r2, #4
    153e:	438b      	bics	r3, r1
    1540:	4313      	orrs	r3, r2
    1542:	702b      	strb	r3, [r5, #0]
	switch (mode & MODE_MASK) {
    1544:	466b      	mov	r3, sp
    1546:	881b      	ldrh	r3, [r3, #0]
    1548:	2b01      	cmp	r3, #1
    154a:	d01b      	beq.n	1584 <mb_display_print+0x90>
    154c:	2b00      	cmp	r3, #0
    154e:	d001      	beq.n	1554 <mb_display_print+0x60>
    1550:	2b02      	cmp	r3, #2
    1552:	d110      	bne.n	1576 <mb_display_print+0x82>
	if (duration) {
    1554:	2e00      	cmp	r6, #0
    1556:	d012      	beq.n	157e <mb_display_print+0x8a>
		disp->duration = duration / scroll_steps(disp);
    1558:	2106      	movs	r1, #6
    155a:	0030      	movs	r0, r6
    155c:	f7fe fe82 	bl	264 <__aeabi_idiv>
    1560:	6520      	str	r0, [r4, #80]	; 0x50
	disp->scroll = SCROLL_START;
    1562:	2207      	movs	r2, #7
    1564:	782b      	ldrb	r3, [r5, #0]
	start_image(disp, get_font(' '));
    1566:	490a      	ldr	r1, [pc, #40]	; (1590 <mb_display_print+0x9c>)
	disp->scroll = SCROLL_START;
    1568:	4393      	bics	r3, r2
	disp->first = 1;
    156a:	3202      	adds	r2, #2
    156c:	4313      	orrs	r3, r2
    156e:	702b      	strb	r3, [r5, #0]
	start_image(disp, get_font(' '));
    1570:	0020      	movs	r0, r4
    1572:	f7ff fe03 	bl	117c <start_image>
}
    1576:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1578:	bc08      	pop	{r3}
    157a:	b001      	add	sp, #4
    157c:	4718      	bx	r3
		disp->duration = SCROLL_DEFAULT_DURATION;
    157e:	2350      	movs	r3, #80	; 0x50
    1580:	6523      	str	r3, [r4, #80]	; 0x50
    1582:	e7ee      	b.n	1562 <mb_display_print+0x6e>
		start_single(disp, duration);
    1584:	0031      	movs	r1, r6
    1586:	0020      	movs	r0, r4
    1588:	f7ff feaa 	bl	12e0 <start_single>
		break;
    158c:	e7f3      	b.n	1576 <mb_display_print+0x82>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	0000ae63 	.word	0x0000ae63

00001594 <mb_display_get>:
}
    1594:	4800      	ldr	r0, [pc, #0]	; (1598 <mb_display_get+0x4>)
    1596:	4770      	bx	lr
    1598:	20002188 	.word	0x20002188

0000159c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    159c:	b510      	push	{r4, lr}
    159e:	f3ef 8210 	mrs	r2, PRIMASK
    15a2:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    15a4:	4915      	ldr	r1, [pc, #84]	; (15fc <_m16src_stop+0x60>)
    15a6:	780b      	ldrb	r3, [r1, #0]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d105      	bne.n	15b8 <_m16src_stop+0x1c>
	if (key) {
    15ac:	2a00      	cmp	r2, #0
    15ae:	d100      	bne.n	15b2 <_m16src_stop+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    15b0:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    15b2:	2045      	movs	r0, #69	; 0x45
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    15b4:	4240      	negs	r0, r0
    15b6:	e013      	b.n	15e0 <_m16src_stop+0x44>
	if (--m16src_ref) {
    15b8:	3b01      	subs	r3, #1
    15ba:	b2db      	uxtb	r3, r3
    15bc:	700b      	strb	r3, [r1, #0]
    15be:	2b00      	cmp	r3, #0
    15c0:	d004      	beq.n	15cc <_m16src_stop+0x30>
	if (key) {
    15c2:	2a00      	cmp	r2, #0
    15c4:	d100      	bne.n	15c8 <_m16src_stop+0x2c>
	__asm__ volatile("cpsie i" : : : "memory");
    15c6:	b662      	cpsie	i
		return -EBUSY;
    15c8:	2010      	movs	r0, #16
    15ca:	e7f3      	b.n	15b4 <_m16src_stop+0x18>
	if (m16src_grd) {
    15cc:	4b0c      	ldr	r3, [pc, #48]	; (1600 <_m16src_stop+0x64>)
    15ce:	2001      	movs	r0, #1
    15d0:	781c      	ldrb	r4, [r3, #0]
    15d2:	2c00      	cmp	r4, #0
    15d4:	d005      	beq.n	15e2 <_m16src_stop+0x46>
		m16src_ref++;
    15d6:	7008      	strb	r0, [r1, #0]
	if (key) {
    15d8:	2a00      	cmp	r2, #0
    15da:	d10d      	bne.n	15f8 <_m16src_stop+0x5c>
	__asm__ volatile("cpsie i" : : : "memory");
    15dc:	b662      	cpsie	i
		return -EAGAIN;
    15de:	380c      	subs	r0, #12

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    15e0:	bd10      	pop	{r4, pc}
	m16src_grd = 1;
    15e2:	7018      	strb	r0, [r3, #0]
	if (key) {
    15e4:	2a00      	cmp	r2, #0
    15e6:	d100      	bne.n	15ea <_m16src_stop+0x4e>
	__asm__ volatile("cpsie i" : : : "memory");
    15e8:	b662      	cpsie	i
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    15ea:	2280      	movs	r2, #128	; 0x80
    15ec:	2101      	movs	r1, #1
	m16src_grd = 0;
    15ee:	2000      	movs	r0, #0
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    15f0:	05d2      	lsls	r2, r2, #23
    15f2:	6051      	str	r1, [r2, #4]
	m16src_grd = 0;
    15f4:	7018      	strb	r0, [r3, #0]
	return 0;
    15f6:	e7f3      	b.n	15e0 <_m16src_stop+0x44>
		return -EAGAIN;
    15f8:	200b      	movs	r0, #11
    15fa:	e7db      	b.n	15b4 <_m16src_stop+0x18>
    15fc:	2000001a 	.word	0x2000001a
    1600:	20000019 	.word	0x20000019

00001604 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1604:	2200      	movs	r2, #0
{
    1606:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1608:	0010      	movs	r0, r2
    160a:	2101      	movs	r1, #1
    160c:	f7ff fa44 	bl	a98 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1610:	2000      	movs	r0, #0
    1612:	f7ff fa17 	bl	a44 <_arch_irq_enable>

	return 0;
}
    1616:	2000      	movs	r0, #0
    1618:	bd10      	pop	{r4, pc}
	...

0000161c <_m16src_start>:
{
    161c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    161e:	f3ef 8310 	mrs	r3, PRIMASK
    1622:	b672      	cpsid	i
	if (m16src_ref++) {
    1624:	4a27      	ldr	r2, [pc, #156]	; (16c4 <_m16src_start+0xa8>)
    1626:	7810      	ldrb	r0, [r2, #0]
    1628:	1c44      	adds	r4, r0, #1
    162a:	7014      	strb	r4, [r2, #0]
    162c:	2800      	cmp	r0, #0
    162e:	d00b      	beq.n	1648 <_m16src_start+0x2c>
	if (key) {
    1630:	2b00      	cmp	r3, #0
    1632:	d100      	bne.n	1636 <_m16src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    1634:	b662      	cpsie	i
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1636:	2280      	movs	r2, #128	; 0x80
    1638:	4b23      	ldr	r3, [pc, #140]	; (16c8 <_m16src_start+0xac>)
    163a:	05d2      	lsls	r2, r2, #23
    163c:	58d3      	ldr	r3, [r2, r3]
		return 0;
    163e:	2000      	movs	r0, #0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1640:	03db      	lsls	r3, r3, #15
    1642:	d400      	bmi.n	1646 <_m16src_start+0x2a>
		return -EINPROGRESS;
    1644:	3844      	subs	r0, #68	; 0x44
}
    1646:	bd70      	pop	{r4, r5, r6, pc}
	if (m16src_grd) {
    1648:	4e20      	ldr	r6, [pc, #128]	; (16cc <_m16src_start+0xb0>)
    164a:	7834      	ldrb	r4, [r6, #0]
    164c:	2c00      	cmp	r4, #0
    164e:	d006      	beq.n	165e <_m16src_start+0x42>
		m16src_ref--;
    1650:	7010      	strb	r0, [r2, #0]
	if (key) {
    1652:	2b00      	cmp	r3, #0
    1654:	d100      	bne.n	1658 <_m16src_start+0x3c>
	__asm__ volatile("cpsie i" : : : "memory");
    1656:	b662      	cpsie	i
		return -EAGAIN;
    1658:	200b      	movs	r0, #11
    165a:	4240      	negs	r0, r0
    165c:	e7f3      	b.n	1646 <_m16src_start+0x2a>
	m16src_grd = 1;
    165e:	2201      	movs	r2, #1
    1660:	7032      	strb	r2, [r6, #0]
	if (key) {
    1662:	2b00      	cmp	r3, #0
    1664:	d100      	bne.n	1668 <_m16src_start+0x4c>
	__asm__ volatile("cpsie i" : : : "memory");
    1666:	b662      	cpsie	i
    1668:	2480      	movs	r4, #128	; 0x80
    166a:	4d19      	ldr	r5, [pc, #100]	; (16d0 <_m16src_start+0xb4>)
    166c:	05e4      	lsls	r4, r4, #23
	if (blocking) {
    166e:	2900      	cmp	r1, #0
    1670:	d024      	beq.n	16bc <_m16src_start+0xa0>
		irq_disable(POWER_CLOCK_IRQn);
    1672:	2000      	movs	r0, #0
    1674:	f7ff f9f2 	bl	a5c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1678:	2300      	movs	r3, #0
		intenset = NRF_CLOCK->INTENSET;
    167a:	22c1      	movs	r2, #193	; 0xc1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    167c:	606b      	str	r3, [r5, #4]
		intenset = NRF_CLOCK->INTENSET;
    167e:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1680:	3301      	adds	r3, #1
		intenset = NRF_CLOCK->INTENSET;
    1682:	58a1      	ldr	r1, [r4, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1684:	50a3      	str	r3, [r4, r2]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1686:	6023      	str	r3, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1688:	686b      	ldr	r3, [r5, #4]
    168a:	2b00      	cmp	r3, #0
    168c:	d012      	beq.n	16b4 <_m16src_start+0x98>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    168e:	2300      	movs	r3, #0
    1690:	606b      	str	r3, [r5, #4]
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1692:	3301      	adds	r3, #1
    1694:	4219      	tst	r1, r3
    1696:	d102      	bne.n	169e <_m16src_start+0x82>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1698:	22c2      	movs	r2, #194	; 0xc2
    169a:	0092      	lsls	r2, r2, #2
    169c:	50a3      	str	r3, [r4, r2]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    169e:	23c0      	movs	r3, #192	; 0xc0
    16a0:	2101      	movs	r1, #1
    16a2:	4a0c      	ldr	r2, [pc, #48]	; (16d4 <_m16src_start+0xb8>)
    16a4:	005b      	lsls	r3, r3, #1
    16a6:	50d1      	str	r1, [r2, r3]
		irq_enable(POWER_CLOCK_IRQn);
    16a8:	2000      	movs	r0, #0
    16aa:	f7ff f9cb 	bl	a44 <_arch_irq_enable>
	m16src_grd = 0;
    16ae:	2300      	movs	r3, #0
    16b0:	7033      	strb	r3, [r6, #0]
    16b2:	e7c0      	b.n	1636 <_m16src_start+0x1a>
			__WFE();
    16b4:	bf20      	wfe
			__SEV();
    16b6:	bf40      	sev
			__WFE();
    16b8:	bf20      	wfe
    16ba:	e7e5      	b.n	1688 <_m16src_start+0x6c>
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    16bc:	2301      	movs	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16be:	6069      	str	r1, [r5, #4]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    16c0:	6023      	str	r3, [r4, #0]
    16c2:	e7f4      	b.n	16ae <_m16src_start+0x92>
    16c4:	2000001a 	.word	0x2000001a
    16c8:	0000040c 	.word	0x0000040c
    16cc:	20000019 	.word	0x20000019
    16d0:	400000fc 	.word	0x400000fc
    16d4:	e000e100 	.word	0xe000e100

000016d8 <_k32src_start>:
{
    16d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16da:	0007      	movs	r7, r0
    16dc:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    16de:	f3ef 8310 	mrs	r3, PRIMASK
    16e2:	b672      	cpsid	i
	if (k32src_initialized) {
    16e4:	4a2d      	ldr	r2, [pc, #180]	; (179c <_k32src_start+0xc4>)
    16e6:	7811      	ldrb	r1, [r2, #0]
    16e8:	2900      	cmp	r1, #0
    16ea:	d00c      	beq.n	1706 <_k32src_start+0x2e>
	if (key) {
    16ec:	2b00      	cmp	r3, #0
    16ee:	d100      	bne.n	16f2 <_k32src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    16f0:	b662      	cpsie	i
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    16f2:	2383      	movs	r3, #131	; 0x83
    16f4:	2280      	movs	r2, #128	; 0x80
    16f6:	00db      	lsls	r3, r3, #3
    16f8:	05d2      	lsls	r2, r2, #23
    16fa:	58d3      	ldr	r3, [r2, r3]
		return 0;
    16fc:	2000      	movs	r0, #0
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    16fe:	03db      	lsls	r3, r3, #15
    1700:	d400      	bmi.n	1704 <_k32src_start+0x2c>
		return -EINPROGRESS;
    1702:	3844      	subs	r0, #68	; 0x44
}
    1704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1706:	2101      	movs	r1, #1
    1708:	7011      	strb	r1, [r2, #0]
	if (key) {
    170a:	2b00      	cmp	r3, #0
    170c:	d100      	bne.n	1710 <_k32src_start+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    170e:	b662      	cpsie	i
	irq_disable(POWER_CLOCK_IRQn);
    1710:	2000      	movs	r0, #0
    1712:	f7ff f9a3 	bl	a5c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1716:	2200      	movs	r2, #0
    1718:	4c21      	ldr	r4, [pc, #132]	; (17a0 <_k32src_start+0xc8>)
    171a:	2380      	movs	r3, #128	; 0x80
    171c:	60a2      	str	r2, [r4, #8]
	intenset = NRF_CLOCK->INTENSET;
    171e:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1720:	2002      	movs	r0, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1722:	05db      	lsls	r3, r3, #23
	intenset = NRF_CLOCK->INTENSET;
    1724:	0092      	lsls	r2, r2, #2
    1726:	5899      	ldr	r1, [r3, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1728:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    172a:	22a3      	movs	r2, #163	; 0xa3
    172c:	00d2      	lsls	r2, r2, #3
    172e:	509d      	str	r5, [r3, r2]
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1730:	2201      	movs	r2, #1
    1732:	609a      	str	r2, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1734:	68a2      	ldr	r2, [r4, #8]
    1736:	2a00      	cmp	r2, #0
    1738:	d02c      	beq.n	1794 <_k32src_start+0xbc>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    173a:	2200      	movs	r2, #0
    173c:	60a2      	str	r2, [r4, #8]
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    173e:	3202      	adds	r2, #2
    1740:	4211      	tst	r1, r2
    1742:	d102      	bne.n	174a <_k32src_start+0x72>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1744:	21c2      	movs	r1, #194	; 0xc2
    1746:	0089      	lsls	r1, r1, #2
    1748:	505a      	str	r2, [r3, r1]
    174a:	23c0      	movs	r3, #192	; 0xc0
    174c:	2601      	movs	r6, #1
    174e:	4a15      	ldr	r2, [pc, #84]	; (17a4 <_k32src_start+0xcc>)
    1750:	005b      	lsls	r3, r3, #1
    1752:	50d6      	str	r6, [r2, r3]
	irq_enable(POWER_CLOCK_IRQn);
    1754:	2000      	movs	r0, #0
    1756:	f7ff f975 	bl	a44 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    175a:	2380      	movs	r3, #128	; 0x80
    175c:	22c2      	movs	r2, #194	; 0xc2
    175e:	2018      	movs	r0, #24
    1760:	0092      	lsls	r2, r2, #2
    1762:	05db      	lsls	r3, r3, #23
    1764:	5098      	str	r0, [r3, r2]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1766:	2103      	movs	r1, #3
	NRF_CLOCK->EVENTS_DONE = 0;
    1768:	2200      	movs	r2, #0
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    176a:	4029      	ands	r1, r5
	NRF_CLOCK->EVENTS_DONE = 0;
    176c:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    176e:	6162      	str	r2, [r4, #20]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1770:	4291      	cmp	r1, r2
    1772:	d1be      	bne.n	16f2 <_k32src_start+0x1a>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1774:	22a7      	movs	r2, #167	; 0xa7
    1776:	2410      	movs	r4, #16
    1778:	00d2      	lsls	r2, r2, #3
    177a:	509c      	str	r4, [r3, r2]
		NRF_CLOCK->INTENSET =
    177c:	22c1      	movs	r2, #193	; 0xc1
    177e:	0092      	lsls	r2, r2, #2
    1780:	5098      	str	r0, [r3, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1782:	509e      	str	r6, [r3, r2]
		err = _m16src_start(dev, false);
    1784:	0038      	movs	r0, r7
    1786:	f7ff ff49 	bl	161c <_m16src_start>
		if (!err) {
    178a:	2800      	cmp	r0, #0
    178c:	d1b1      	bne.n	16f2 <_k32src_start+0x1a>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    178e:	4b06      	ldr	r3, [pc, #24]	; (17a8 <_k32src_start+0xd0>)
    1790:	605e      	str	r6, [r3, #4]
    1792:	e7ae      	b.n	16f2 <_k32src_start+0x1a>
		__WFE();
    1794:	bf20      	wfe
		__SEV();
    1796:	bf40      	sev
		__WFE();
    1798:	bf20      	wfe
    179a:	e7cb      	b.n	1734 <_k32src_start+0x5c>
    179c:	20000018 	.word	0x20000018
    17a0:	400000fc 	.word	0x400000fc
    17a4:	e000e100 	.word	0xe000e100
    17a8:	e000e1fc 	.word	0xe000e1fc

000017ac <_power_clock_isr>:
{
    17ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    17ae:	4c24      	ldr	r4, [pc, #144]	; (1840 <_power_clock_isr+0x94>)
    17b0:	2380      	movs	r3, #128	; 0x80
    17b2:	68e2      	ldr	r2, [r4, #12]
    17b4:	05db      	lsls	r3, r3, #23
    17b6:	4694      	mov	ip, r2
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    17b8:	22c1      	movs	r2, #193	; 0xc1
    17ba:	0092      	lsls	r2, r2, #2
    17bc:	5899      	ldr	r1, [r3, r2]
    17be:	2201      	movs	r2, #1
    17c0:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    17c2:	4920      	ldr	r1, [pc, #128]	; (1844 <_power_clock_isr+0x98>)
{
    17c4:	0005      	movs	r5, r0
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    17c6:	585e      	ldr	r6, [r3, r1]
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    17c8:	9200      	str	r2, [sp, #0]
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    17ca:	6867      	ldr	r7, [r4, #4]
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    17cc:	68a0      	ldr	r0, [r4, #8]
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    17ce:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    17d0:	6962      	ldr	r2, [r4, #20]
    17d2:	9201      	str	r2, [sp, #4]
	if (pof) {
    17d4:	4662      	mov	r2, ip
    17d6:	2a00      	cmp	r2, #0
    17d8:	d001      	beq.n	17de <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    17da:	2200      	movs	r2, #0
    17dc:	60e2      	str	r2, [r4, #12]
	if (hf) {
    17de:	2f00      	cmp	r7, #0
    17e0:	d001      	beq.n	17e6 <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    17e2:	2700      	movs	r7, #0
    17e4:	6067      	str	r7, [r4, #4]
	if (hf_intenset && hf_stat) {
    17e6:	9a00      	ldr	r2, [sp, #0]
    17e8:	2a00      	cmp	r2, #0
    17ea:	d006      	beq.n	17fa <_power_clock_isr+0x4e>
    17ec:	03f2      	lsls	r2, r6, #15
    17ee:	d504      	bpl.n	17fa <_power_clock_isr+0x4e>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    17f0:	26c2      	movs	r6, #194	; 0xc2
    17f2:	2201      	movs	r2, #1
    17f4:	00b6      	lsls	r6, r6, #2
    17f6:	519a      	str	r2, [r3, r6]
		NRF_CLOCK->TASKS_CAL = 1;
    17f8:	611a      	str	r2, [r3, #16]
	if (lf) {
    17fa:	2800      	cmp	r0, #0
    17fc:	d001      	beq.n	1802 <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17fe:	2300      	movs	r3, #0
    1800:	60a3      	str	r3, [r4, #8]
	if (done) {
    1802:	2900      	cmp	r1, #0
    1804:	d008      	beq.n	1818 <_power_clock_isr+0x6c>
		NRF_CLOCK->EVENTS_DONE = 0;
    1806:	2100      	movs	r1, #0
		err = _m16src_stop(dev, NULL);
    1808:	0028      	movs	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    180a:	6121      	str	r1, [r4, #16]
		err = _m16src_stop(dev, NULL);
    180c:	f7ff fec6 	bl	159c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    1810:	2380      	movs	r3, #128	; 0x80
    1812:	2201      	movs	r2, #1
    1814:	05db      	lsls	r3, r3, #23
    1816:	615a      	str	r2, [r3, #20]
	if (ctto) {
    1818:	9b01      	ldr	r3, [sp, #4]
    181a:	2b00      	cmp	r3, #0
    181c:	d00e      	beq.n	183c <_power_clock_isr+0x90>
		NRF_CLOCK->EVENTS_CTTO = 0;
    181e:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1820:	23c1      	movs	r3, #193	; 0xc1
    1822:	2280      	movs	r2, #128	; 0x80
		NRF_CLOCK->EVENTS_CTTO = 0;
    1824:	6161      	str	r1, [r4, #20]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1826:	2401      	movs	r4, #1
    1828:	009b      	lsls	r3, r3, #2
    182a:	05d2      	lsls	r2, r2, #23
    182c:	50d4      	str	r4, [r2, r3]
		err = _m16src_start(dev, false);
    182e:	0028      	movs	r0, r5
    1830:	f7ff fef4 	bl	161c <_m16src_start>
		if (!err) {
    1834:	2800      	cmp	r0, #0
    1836:	d101      	bne.n	183c <_power_clock_isr+0x90>
    1838:	4b03      	ldr	r3, [pc, #12]	; (1848 <_power_clock_isr+0x9c>)
    183a:	605c      	str	r4, [r3, #4]
}
    183c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	400000fc 	.word	0x400000fc
    1844:	0000040c 	.word	0x0000040c
    1848:	e000e1fc 	.word	0xe000e1fc

0000184c <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    184c:	6803      	ldr	r3, [r0, #0]
{
    184e:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1850:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1852:	2501      	movs	r5, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1854:	689a      	ldr	r2, [r3, #8]
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    1856:	261f      	movs	r6, #31
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1858:	6883      	ldr	r3, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    185a:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    185c:	68dc      	ldr	r4, [r3, #12]
    185e:	0023      	movs	r3, r4
    1860:	40c3      	lsrs	r3, r0
    1862:	422b      	tst	r3, r5
    1864:	d008      	beq.n	1878 <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    1866:	0003      	movs	r3, r0
    1868:	3345      	adds	r3, #69	; 0x45
    186a:	33ff      	adds	r3, #255	; 0xff
    186c:	009b      	lsls	r3, r3, #2
    186e:	589b      	ldr	r3, [r3, r2]
    1870:	0a1b      	lsrs	r3, r3, #8
    1872:	4033      	ands	r3, r6
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1874:	428b      	cmp	r3, r1
    1876:	d003      	beq.n	1880 <gpiote_find_channel+0x34>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1878:	3001      	adds	r0, #1
    187a:	2804      	cmp	r0, #4
    187c:	d1ef      	bne.n	185e <gpiote_find_channel+0x12>
			return i;
		}
	}

	return -ENODEV;
    187e:	3817      	subs	r0, #23
}
    1880:	bd70      	pop	{r4, r5, r6, pc}

00001882 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
    1882:	b530      	push	{r4, r5, lr}
    1884:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1886:	6802      	ldr	r2, [r0, #0]
    1888:	20a2      	movs	r0, #162	; 0xa2
    188a:	6892      	ldr	r2, [r2, #8]
    188c:	00c0      	lsls	r0, r0, #3
    188e:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
    1890:	5822      	ldr	r2, [r4, r0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1892:	2900      	cmp	r1, #0
    1894:	d102      	bne.n	189c <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1896:	40ea      	lsrs	r2, r5
    1898:	3101      	adds	r1, #1
    189a:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
    189c:	2000      	movs	r0, #0
		*value = gpio->IN;
    189e:	601a      	str	r2, [r3, #0]
}
    18a0:	bd30      	pop	{r4, r5, pc}
	...

000018a4 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    18a4:	6800      	ldr	r0, [r0, #0]
    18a6:	6880      	ldr	r0, [r0, #8]
    18a8:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    18aa:	2900      	cmp	r1, #0
    18ac:	d10a      	bne.n	18c4 <gpio_nrf5_write+0x20>
    18ae:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    18b0:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    18b2:	2b00      	cmp	r3, #0
    18b4:	d004      	beq.n	18c0 <gpio_nrf5_write+0x1c>
			gpio->OUTSET = BIT(pin);
    18b6:	23a1      	movs	r3, #161	; 0xa1
    18b8:	00db      	lsls	r3, r3, #3
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    18ba:	50c1      	str	r1, [r0, r3]
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    18bc:	2000      	movs	r0, #0
    18be:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    18c0:	4b02      	ldr	r3, [pc, #8]	; (18cc <gpio_nrf5_write+0x28>)
    18c2:	e7fa      	b.n	18ba <gpio_nrf5_write+0x16>
		gpio->OUT = value;
    18c4:	4a02      	ldr	r2, [pc, #8]	; (18d0 <gpio_nrf5_write+0x2c>)
    18c6:	5083      	str	r3, [r0, r2]
    18c8:	e7f8      	b.n	18bc <gpio_nrf5_write+0x18>
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	0000050c 	.word	0x0000050c
    18d0:	00000504 	.word	0x00000504

000018d4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    18d4:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18d6:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    18d8:	2a00      	cmp	r2, #0
    18da:	d008      	beq.n	18ee <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    18dc:	681a      	ldr	r2, [r3, #0]
    18de:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    18e0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    18e2:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    18e4:	2a00      	cmp	r2, #0
    18e6:	d100      	bne.n	18ea <gpio_nrf5_manage_callback+0x16>
		list->tail = list->head;
    18e8:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    18ea:	2000      	movs	r0, #0
    18ec:	bd10      	pop	{r4, pc}
    18ee:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    18f0:	2800      	cmp	r0, #0
    18f2:	d0fa      	beq.n	18ea <gpio_nrf5_manage_callback+0x16>
		if (test == node) {
    18f4:	4281      	cmp	r1, r0
    18f6:	d10f      	bne.n	1918 <gpio_nrf5_manage_callback+0x44>
    18f8:	685c      	ldr	r4, [r3, #4]
    18fa:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    18fc:	2a00      	cmp	r2, #0
    18fe:	d106      	bne.n	190e <gpio_nrf5_manage_callback+0x3a>
		list->head = node->next;
    1900:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    1902:	42a1      	cmp	r1, r4
    1904:	d100      	bne.n	1908 <gpio_nrf5_manage_callback+0x34>
			list->tail = list->head;
    1906:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    1908:	2300      	movs	r3, #0
    190a:	600b      	str	r3, [r1, #0]
    190c:	e7ed      	b.n	18ea <gpio_nrf5_manage_callback+0x16>
		prev_node->next = node->next;
    190e:	6010      	str	r0, [r2, #0]
		if (list->tail == node) {
    1910:	42a1      	cmp	r1, r4
    1912:	d1f9      	bne.n	1908 <gpio_nrf5_manage_callback+0x34>
			list->tail = prev_node;
    1914:	605a      	str	r2, [r3, #4]
    1916:	e7f7      	b.n	1908 <gpio_nrf5_manage_callback+0x34>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1918:	0002      	movs	r2, r0
    191a:	6800      	ldr	r0, [r0, #0]
    191c:	e7e8      	b.n	18f0 <gpio_nrf5_manage_callback+0x1c>

0000191e <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    191e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1920:	6803      	ldr	r3, [r0, #0]
{
    1922:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1924:	689b      	ldr	r3, [r3, #8]
{
    1926:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1928:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    192a:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    192c:	2900      	cmp	r1, #0
    192e:	d114      	bne.n	195a <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    1930:	0011      	movs	r1, r2
    1932:	f7ff ff8b 	bl	184c <gpiote_find_channel>
		if (i < 0) {
    1936:	2800      	cmp	r0, #0
    1938:	db0e      	blt.n	1958 <gpio_nrf5_enable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    193a:	2301      	movs	r3, #1
    193c:	001a      	movs	r2, r3
    193e:	40ba      	lsls	r2, r7
    1940:	68b1      	ldr	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1942:	4083      	lsls	r3, r0
		data->pin_callback_enables |= BIT(pin);
    1944:	430a      	orrs	r2, r1
    1946:	60b2      	str	r2, [r6, #8]
		gpiote->EVENTS_IN[i] = 0;
    1948:	0002      	movs	r2, r0
    194a:	3240      	adds	r2, #64	; 0x40
    194c:	0092      	lsls	r2, r2, #2
    194e:	5154      	str	r4, [r2, r5]
		gpiote->INTENSET = BIT(i);
    1950:	22c1      	movs	r2, #193	; 0xc1
	} else {
		return -ENOTSUP;
	}

	return 0;
    1952:	0020      	movs	r0, r4
		gpiote->INTENSET = BIT(i);
    1954:	0092      	lsls	r2, r2, #2
    1956:	50ab      	str	r3, [r5, r2]
}
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    195a:	2023      	movs	r0, #35	; 0x23
    195c:	4240      	negs	r0, r0
    195e:	e7fb      	b.n	1958 <gpio_nrf5_enable_callback+0x3a>

00001960 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1962:	6803      	ldr	r3, [r0, #0]
{
    1964:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1966:	689b      	ldr	r3, [r3, #8]
{
    1968:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    196a:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    196c:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    196e:	2900      	cmp	r1, #0
    1970:	d110      	bne.n	1994 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    1972:	0011      	movs	r1, r2
    1974:	f7ff ff6a 	bl	184c <gpiote_find_channel>
		if (i < 0) {
    1978:	2800      	cmp	r0, #0
    197a:	db0a      	blt.n	1992 <gpio_nrf5_disable_callback+0x32>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    197c:	2301      	movs	r3, #1
    197e:	001a      	movs	r2, r3
    1980:	40b2      	lsls	r2, r6
    1982:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    1984:	4083      	lsls	r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    1986:	4391      	bics	r1, r2
		gpiote->INTENCLR = BIT(i);
    1988:	22c2      	movs	r2, #194	; 0xc2
	} else {
		return -ENOTSUP;
	}

	return 0;
    198a:	0020      	movs	r0, r4
		gpiote->INTENCLR = BIT(i);
    198c:	0092      	lsls	r2, r2, #2
		data->pin_callback_enables &= ~(BIT(pin));
    198e:	60a9      	str	r1, [r5, #8]
		gpiote->INTENCLR = BIT(i);
    1990:	50bb      	str	r3, [r7, r2]
}
    1992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1994:	2023      	movs	r0, #35	; 0x23
    1996:	4240      	negs	r0, r0
    1998:	e7fb      	b.n	1992 <gpio_nrf5_disable_callback+0x32>

0000199a <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    199a:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    199c:	2200      	movs	r2, #0
    199e:	2101      	movs	r1, #1
    19a0:	2006      	movs	r0, #6
    19a2:	f7ff f879 	bl	a98 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    19a6:	2006      	movs	r0, #6
    19a8:	f7ff f84c 	bl	a44 <_arch_irq_enable>

	return 0;
}
    19ac:	2000      	movs	r0, #0
    19ae:	bd10      	pop	{r4, pc}

000019b0 <gpio_nrf5_port_isr>:
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19b0:	6803      	ldr	r3, [r0, #0]
{
    19b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19b4:	689b      	ldr	r3, [r3, #8]
{
    19b6:	0004      	movs	r4, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19b8:	689b      	ldr	r3, [r3, #8]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    19ba:	2701      	movs	r7, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19bc:	9301      	str	r3, [sp, #4]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    19be:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    19c0:	001a      	movs	r2, r3
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    19c2:	6885      	ldr	r5, [r0, #8]
    19c4:	9801      	ldr	r0, [sp, #4]
    19c6:	0099      	lsls	r1, r3, #2
    19c8:	1841      	adds	r1, r0, r1
		if (gpiote->EVENTS_IN[i]) {
    19ca:	0008      	movs	r0, r1
    19cc:	30fc      	adds	r0, #252	; 0xfc
    19ce:	6846      	ldr	r6, [r0, #4]
    19d0:	2e00      	cmp	r6, #0
    19d2:	d00a      	beq.n	19ea <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    19d4:	2600      	movs	r6, #0
    19d6:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    19d8:	20a2      	movs	r0, #162	; 0xa2
    19da:	00c0      	lsls	r0, r0, #3
    19dc:	5809      	ldr	r1, [r1, r0]
    19de:	201f      	movs	r0, #31
    19e0:	0a09      	lsrs	r1, r1, #8
    19e2:	4001      	ands	r1, r0
    19e4:	0038      	movs	r0, r7
    19e6:	4088      	lsls	r0, r1
    19e8:	4302      	orrs	r2, r0
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    19ea:	3301      	adds	r3, #1
    19ec:	2b04      	cmp	r3, #4
    19ee:	d1e9      	bne.n	19c4 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    19f0:	68ae      	ldr	r6, [r5, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    19f2:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    19f4:	4016      	ands	r6, r2
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    19f6:	f7ff f831 	bl	a5c <_arch_irq_disable>
    19fa:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    19fc:	2d00      	cmp	r5, #0
    19fe:	d103      	bne.n	1a08 <gpio_nrf5_port_isr+0x58>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1a00:	2006      	movs	r0, #6
    1a02:	f7ff f81f 	bl	a44 <_arch_irq_enable>
}
    1a06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    1a08:	68ab      	ldr	r3, [r5, #8]
    1a0a:	4233      	tst	r3, r6
    1a0c:	d0f5      	beq.n	19fa <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1a0e:	0032      	movs	r2, r6
    1a10:	0029      	movs	r1, r5
    1a12:	0020      	movs	r0, r4
    1a14:	686b      	ldr	r3, [r5, #4]
    1a16:	4798      	blx	r3
    1a18:	e7ef      	b.n	19fa <gpio_nrf5_port_isr+0x4a>
	...

00001a1c <gpio_nrf5_config>:
{
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1e:	0006      	movs	r6, r0
    1a20:	0014      	movs	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a22:	6802      	ldr	r2, [r0, #0]
{
    1a24:	b085      	sub	sp, #20
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a26:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1a28:	68b5      	ldr	r5, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a2a:	6890      	ldr	r0, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1a2c:	6817      	ldr	r7, [r2, #0]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a2e:	9003      	str	r0, [sp, #12]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1a30:	2900      	cmp	r1, #0
    1a32:	d002      	beq.n	1a3a <gpio_nrf5_config+0x1e>
		return -ENOTSUP;
    1a34:	2023      	movs	r0, #35	; 0x23
			return -EIO;
    1a36:	4240      	negs	r0, r0
    1a38:	e063      	b.n	1b02 <gpio_nrf5_config+0xe6>
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1a3a:	2203      	movs	r2, #3
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1a3c:	20c0      	movs	r0, #192	; 0xc0
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1a3e:	1319      	asrs	r1, r3, #12
    1a40:	4011      	ands	r1, r2
    1a42:	468c      	mov	ip, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1a44:	1399      	asrs	r1, r3, #14
    1a46:	4011      	ands	r1, r2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1a48:	0280      	lsls	r0, r0, #10
    1a4a:	4018      	ands	r0, r3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1a4c:	9102      	str	r1, [sp, #8]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a4e:	21c0      	movs	r1, #192	; 0xc0
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1a50:	9001      	str	r0, [sp, #4]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a52:	2080      	movs	r0, #128	; 0x80
    1a54:	0089      	lsls	r1, r1, #2
    1a56:	4019      	ands	r1, r3
			pull = GPIO_PULL_UP;
    1a58:	3209      	adds	r2, #9
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a5a:	0040      	lsls	r0, r0, #1
    1a5c:	4281      	cmp	r1, r0
    1a5e:	d004      	beq.n	1a6a <gpio_nrf5_config+0x4e>
		u8_t pull = GPIO_PULL_DISABLE;
    1a60:	4a35      	ldr	r2, [pc, #212]	; (1b38 <gpio_nrf5_config+0x11c>)
    1a62:	1889      	adds	r1, r1, r2
    1a64:	424a      	negs	r2, r1
    1a66:	414a      	adcs	r2, r1
    1a68:	0092      	lsls	r2, r2, #2
		if (sense == GPIO_SENSE_INVALID) {
    1a6a:	2180      	movs	r1, #128	; 0x80
    1a6c:	9801      	ldr	r0, [sp, #4]
    1a6e:	0249      	lsls	r1, r1, #9
    1a70:	4288      	cmp	r0, r1
    1a72:	d101      	bne.n	1a78 <gpio_nrf5_config+0x5c>
			sense = GPIO_SENSE_DISABLE;
    1a74:	2100      	movs	r1, #0
    1a76:	9101      	str	r1, [sp, #4]
    1a78:	4660      	mov	r0, ip
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1a7a:	2101      	movs	r1, #1
    1a7c:	0080      	lsls	r0, r0, #2
    1a7e:	4684      	mov	ip, r0
    1a80:	420b      	tst	r3, r1
    1a82:	d045      	beq.n	1b10 <gpio_nrf5_config+0xf4>
			if (pull == GPIO_PULL_UP) {
    1a84:	2a0c      	cmp	r2, #12
    1a86:	d13e      	bne.n	1b06 <gpio_nrf5_config+0xea>
				gpio->OUTSET = BIT(pin);
    1a88:	20a1      	movs	r0, #161	; 0xa1
    1a8a:	40a1      	lsls	r1, r4
    1a8c:	00c0      	lsls	r0, r0, #3
				gpio->OUTCLR = BIT(pin);
    1a8e:	5039      	str	r1, [r7, r0]
					      drive_strength[ds_low][ds_high] |
    1a90:	9902      	ldr	r1, [sp, #8]
					      GPIO_INPUT_DISCONNECT |
    1a92:	482a      	ldr	r0, [pc, #168]	; (1b3c <gpio_nrf5_config+0x120>)
					      drive_strength[ds_low][ds_high] |
    1a94:	4461      	add	r1, ip
    1a96:	0089      	lsls	r1, r1, #2
					      GPIO_INPUT_DISCONNECT |
    1a98:	5808      	ldr	r0, [r1, r0]
    1a9a:	2103      	movs	r1, #3
    1a9c:	4301      	orrs	r1, r0
    1a9e:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    1aa0:	0021      	movs	r1, r4
    1aa2:	31c1      	adds	r1, #193	; 0xc1
    1aa4:	31ff      	adds	r1, #255	; 0xff
    1aa6:	0089      	lsls	r1, r1, #2
    1aa8:	51ca      	str	r2, [r1, r7]
	if (flags & GPIO_INT) {
    1aaa:	2002      	movs	r0, #2
    1aac:	4018      	ands	r0, r3
    1aae:	d028      	beq.n	1b02 <gpio_nrf5_config+0xe6>
		if (flags & GPIO_INT_EDGE) {
    1ab0:	069a      	lsls	r2, r3, #26
    1ab2:	d5bf      	bpl.n	1a34 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1ab4:	065a      	lsls	r2, r3, #25
    1ab6:	d439      	bmi.n	1b2c <gpio_nrf5_config+0x110>
				config |= GPIOTE_CFG_POL_L2H;
    1ab8:	2780      	movs	r7, #128	; 0x80
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    1aba:	075b      	lsls	r3, r3, #29
    1abc:	d438      	bmi.n	1b30 <gpio_nrf5_config+0x114>
				config |= GPIOTE_CFG_POL_TOGG;
    1abe:	02bf      	lsls	r7, r7, #10
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1ac0:	68e8      	ldr	r0, [r5, #12]
    1ac2:	f7fe fc85 	bl	3d0 <__popcountsi2>
    1ac6:	2804      	cmp	r0, #4
    1ac8:	d034      	beq.n	1b34 <gpio_nrf5_config+0x118>
		int i = gpiote_find_channel(dev, pin);
    1aca:	0030      	movs	r0, r6
    1acc:	0021      	movs	r1, r4
    1ace:	f7ff febd 	bl	184c <gpiote_find_channel>
    1ad2:	68ee      	ldr	r6, [r5, #12]
		if (i < 0) {
    1ad4:	2800      	cmp	r0, #0
    1ad6:	da03      	bge.n	1ae0 <gpio_nrf5_config+0xc4>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1ad8:	43f0      	mvns	r0, r6
    1ada:	f7fe fc6f 	bl	3bc <__ffssi2>
    1ade:	3801      	subs	r0, #1
		data->gpiote_chan_mask |= BIT(i);
    1ae0:	2301      	movs	r3, #1
    1ae2:	001a      	movs	r2, r3
    1ae4:	4082      	lsls	r2, r0
    1ae6:	4316      	orrs	r6, r2
		config |= GPIOTE_CFG_PIN(pin);
    1ae8:	22f8      	movs	r2, #248	; 0xf8
    1aea:	0224      	lsls	r4, r4, #8
    1aec:	0152      	lsls	r2, r2, #5
    1aee:	4014      	ands	r4, r2
		gpiote->CONFIG[i] = config;
    1af0:	3045      	adds	r0, #69	; 0x45
		config |= GPIOTE_CFG_PIN(pin);
    1af2:	431c      	orrs	r4, r3
		gpiote->CONFIG[i] = config;
    1af4:	30ff      	adds	r0, #255	; 0xff
    1af6:	9b03      	ldr	r3, [sp, #12]
    1af8:	0080      	lsls	r0, r0, #2
		config |= GPIOTE_CFG_PIN(pin);
    1afa:	4327      	orrs	r7, r4
		data->gpiote_chan_mask |= BIT(i);
    1afc:	60ee      	str	r6, [r5, #12]
		gpiote->CONFIG[i] = config;
    1afe:	50c7      	str	r7, [r0, r3]
	return 0;
    1b00:	2000      	movs	r0, #0
}
    1b02:	b005      	add	sp, #20
    1b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if (pull == GPIO_PULL_DOWN) {
    1b06:	2a04      	cmp	r2, #4
    1b08:	d1c2      	bne.n	1a90 <gpio_nrf5_config+0x74>
				gpio->OUTCLR = BIT(pin);
    1b0a:	40a1      	lsls	r1, r4
    1b0c:	480c      	ldr	r0, [pc, #48]	; (1b40 <gpio_nrf5_config+0x124>)
    1b0e:	e7be      	b.n	1a8e <gpio_nrf5_config+0x72>
					      drive_strength[ds_low][ds_high] |
    1b10:	9902      	ldr	r1, [sp, #8]
    1b12:	480a      	ldr	r0, [pc, #40]	; (1b3c <gpio_nrf5_config+0x120>)
    1b14:	4461      	add	r1, ip
    1b16:	0089      	lsls	r1, r1, #2
    1b18:	5809      	ldr	r1, [r1, r0]
    1b1a:	9801      	ldr	r0, [sp, #4]
    1b1c:	430a      	orrs	r2, r1
    1b1e:	4310      	orrs	r0, r2
			gpio->PIN_CNF[pin] = (sense |
    1b20:	0022      	movs	r2, r4
    1b22:	32c1      	adds	r2, #193	; 0xc1
    1b24:	32ff      	adds	r2, #255	; 0xff
    1b26:	0092      	lsls	r2, r2, #2
    1b28:	51d0      	str	r0, [r2, r7]
    1b2a:	e7be      	b.n	1aaa <gpio_nrf5_config+0x8e>
				config |= GPIOTE_CFG_POL_TOGG;
    1b2c:	27c0      	movs	r7, #192	; 0xc0
    1b2e:	e7c6      	b.n	1abe <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_L2H;
    1b30:	027f      	lsls	r7, r7, #9
    1b32:	e7c5      	b.n	1ac0 <gpio_nrf5_config+0xa4>
			return -EIO;
    1b34:	2005      	movs	r0, #5
    1b36:	e77e      	b.n	1a36 <gpio_nrf5_config+0x1a>
    1b38:	fffffe00 	.word	0xfffffe00
    1b3c:	0000b070 	.word	0x0000b070
    1b40:	0000050c 	.word	0x0000050c

00001b44 <pwm_nrf5_sw_pin_set>:
	return i;
}

static int pwm_nrf5_sw_pin_set(struct device *dev, u32_t pwm,
			       u32_t period_cycles, u32_t pulse_cycles)
{
    1b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b46:	b087      	sub	sp, #28
    1b48:	9301      	str	r3, [sp, #4]
	u8_t ppi_index;
	u8_t channel;
	u16_t div;
	u32_t ret;

	config = (struct pwm_config *)dev->config->config_info;
    1b4a:	6803      	ldr	r3, [r0, #0]
{
    1b4c:	9200      	str	r2, [sp, #0]
	config = (struct pwm_config *)dev->config->config_info;
    1b4e:	689e      	ldr	r6, [r3, #8]
	timer = config->timer;
	data = dev->driver_data;
    1b50:	6882      	ldr	r2, [r0, #8]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    1b52:	9801      	ldr	r0, [sp, #4]
{
    1b54:	9102      	str	r1, [sp, #8]

	/* check if requested period is allowed while other channels are
	 * active.
	 */
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    1b56:	79b1      	ldrb	r1, [r6, #6]
    1b58:	1d13      	adds	r3, r2, #4
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d009      	beq.n	1b72 <pwm_nrf5_sw_pin_set+0x2e>
    1b5e:	9800      	ldr	r0, [sp, #0]
    1b60:	9c01      	ldr	r4, [sp, #4]
    1b62:	42a0      	cmp	r0, r4
    1b64:	d005      	beq.n	1b72 <pwm_nrf5_sw_pin_set+0x2e>
    1b66:	001c      	movs	r4, r3
    1b68:	00c8      	lsls	r0, r1, #3
    1b6a:	3004      	adds	r0, #4
    1b6c:	1810      	adds	r0, r2, r0
	for (i = 0; i < map_size; i++) {
    1b6e:	4284      	cmp	r4, r0
    1b70:	d105      	bne.n	1b7e <pwm_nrf5_sw_pin_set+0x3a>
{
    1b72:	2000      	movs	r0, #0
	for (i = 0; i < map_size; i++) {
    1b74:	4281      	cmp	r1, r0
    1b76:	d110      	bne.n	1b9a <pwm_nrf5_sw_pin_set+0x56>
    1b78:	1e4b      	subs	r3, r1, #1
    1b7a:	b2db      	uxtb	r3, r3
    1b7c:	e01f      	b.n	1bbe <pwm_nrf5_sw_pin_set+0x7a>
		if ((data->map[i].pwm != pwm) &&
    1b7e:	9d02      	ldr	r5, [sp, #8]
    1b80:	6827      	ldr	r7, [r4, #0]
    1b82:	42bd      	cmp	r5, r7
    1b84:	d007      	beq.n	1b96 <pwm_nrf5_sw_pin_set+0x52>
    1b86:	6865      	ldr	r5, [r4, #4]
    1b88:	2d00      	cmp	r5, #0
    1b8a:	d004      	beq.n	1b96 <pwm_nrf5_sw_pin_set+0x52>
		    (data->map[i].pulse_cycles != 0) &&
    1b8c:	9d00      	ldr	r5, [sp, #0]
    1b8e:	6817      	ldr	r7, [r2, #0]
    1b90:	42bd      	cmp	r5, r7
    1b92:	d000      	beq.n	1b96 <pwm_nrf5_sw_pin_set+0x52>
    1b94:	e0b7      	b.n	1d06 <pwm_nrf5_sw_pin_set+0x1c2>
    1b96:	3408      	adds	r4, #8
    1b98:	e7e9      	b.n	1b6e <pwm_nrf5_sw_pin_set+0x2a>
    1b9a:	3308      	adds	r3, #8
		if (pwm == data->map[i].pwm) {
    1b9c:	001c      	movs	r4, r3
    1b9e:	3c08      	subs	r4, #8
    1ba0:	6824      	ldr	r4, [r4, #0]
    1ba2:	9d02      	ldr	r5, [sp, #8]
    1ba4:	42a5      	cmp	r5, r4
    1ba6:	d044      	beq.n	1c32 <pwm_nrf5_sw_pin_set+0xee>
	for (i = 0; i < map_size; i++) {
    1ba8:	3001      	adds	r0, #1
    1baa:	b2c0      	uxtb	r0, r0
    1bac:	e7e2      	b.n	1b74 <pwm_nrf5_sw_pin_set+0x30>
		if (data->map[i].pulse_cycles == 0) {
    1bae:	00dd      	lsls	r5, r3, #3
    1bb0:	1955      	adds	r5, r2, r5
    1bb2:	68ad      	ldr	r5, [r5, #8]
    1bb4:	1e5c      	subs	r4, r3, #1
    1bb6:	b2e4      	uxtb	r4, r4
    1bb8:	2d00      	cmp	r5, #0
    1bba:	d004      	beq.n	1bc6 <pwm_nrf5_sw_pin_set+0x82>
    1bbc:	0023      	movs	r3, r4
	while (i--) {
    1bbe:	2bff      	cmp	r3, #255	; 0xff
    1bc0:	d1f5      	bne.n	1bae <pwm_nrf5_sw_pin_set+0x6a>

	/* map pwm pin to GPIOTE config/channel */
	channel = pwm_channel_map(data, config->map_size, pwm);
	if (channel >= config->map_size) {
		SYS_LOG_ERR("No more channels available");
		return -ENOMEM;
    1bc2:	200c      	movs	r0, #12
    1bc4:	e0a0      	b.n	1d08 <pwm_nrf5_sw_pin_set+0x1c4>
	if (channel >= config->map_size) {
    1bc6:	4283      	cmp	r3, r0
    1bc8:	d2fb      	bcs.n	1bc2 <pwm_nrf5_sw_pin_set+0x7e>

	SYS_LOG_DBG("PWM %d, period %u, pulse %u", pwm,
			period_cycles, pulse_cycles);

	/* clear GPIOTE config */
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    1bca:	7930      	ldrb	r0, [r6, #4]
    1bcc:	4d4f      	ldr	r5, [pc, #316]	; (1d0c <pwm_nrf5_sw_pin_set+0x1c8>)
    1bce:	18c0      	adds	r0, r0, r3
    1bd0:	0080      	lsls	r0, r0, #2
    1bd2:	1940      	adds	r0, r0, r5
    1bd4:	27a2      	movs	r7, #162	; 0xa2
    1bd6:	9004      	str	r0, [sp, #16]
    1bd8:	2000      	movs	r0, #0
    1bda:	9d04      	ldr	r5, [sp, #16]
    1bdc:	00ff      	lsls	r7, r7, #3
	timer = config->timer;
    1bde:	6834      	ldr	r4, [r6, #0]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    1be0:	51e8      	str	r0, [r5, r7]

	/* clear PPI used */
	ppi_index = config->ppi_base + (channel << 1);
    1be2:	7976      	ldrb	r6, [r6, #5]
    1be4:	005d      	lsls	r5, r3, #1
    1be6:	1975      	adds	r5, r6, r5
    1be8:	b2ed      	uxtb	r5, r5
    1bea:	46ac      	mov	ip, r5
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    1bec:	2601      	movs	r6, #1
    1bee:	3501      	adds	r5, #1
    1bf0:	40ae      	lsls	r6, r5
    1bf2:	4667      	mov	r7, ip
    1bf4:	2501      	movs	r5, #1
    1bf6:	40bd      	lsls	r5, r7
    1bf8:	27a1      	movs	r7, #161	; 0xa1
    1bfa:	432e      	orrs	r6, r5
    1bfc:	4d44      	ldr	r5, [pc, #272]	; (1d10 <pwm_nrf5_sw_pin_set+0x1cc>)
    1bfe:	00ff      	lsls	r7, r7, #3
    1c00:	9603      	str	r6, [sp, #12]
    1c02:	51ee      	str	r6, [r5, r7]

	/* configure GPIO pin as output */
	NRF_GPIO->DIRSET = BIT(pwm);
    1c04:	2601      	movs	r6, #1
    1c06:	9d02      	ldr	r5, [sp, #8]
    1c08:	3710      	adds	r7, #16
    1c0a:	40ae      	lsls	r6, r5
    1c0c:	25a0      	movs	r5, #160	; 0xa0
    1c0e:	05ed      	lsls	r5, r5, #23
    1c10:	51ee      	str	r6, [r5, r7]
	if (pulse_cycles == 0) {
    1c12:	9f01      	ldr	r7, [sp, #4]
    1c14:	4287      	cmp	r7, r0
    1c16:	d10e      	bne.n	1c36 <pwm_nrf5_sw_pin_set+0xf2>
		/* 0% duty cycle, keep pin low */
		NRF_GPIO->OUTCLR = BIT(pwm);
    1c18:	483e      	ldr	r0, [pc, #248]	; (1d14 <pwm_nrf5_sw_pin_set+0x1d0>)

		goto pin_set_pwm_off;
	} else if (pulse_cycles == period_cycles) {
		/* 100% duty cycle, keep pin high */
		NRF_GPIO->OUTSET = BIT(pwm);
    1c1a:	502e      	str	r6, [r5, r0]
	data->map[channel].pulse_cycles = pulse_cycles;

	return 0;

pin_set_pwm_off:
	data->map[channel].pulse_cycles = 0;
    1c1c:	2000      	movs	r0, #0
    1c1e:	00db      	lsls	r3, r3, #3
    1c20:	18d3      	adds	r3, r2, r3
    1c22:	00c9      	lsls	r1, r1, #3
    1c24:	6098      	str	r0, [r3, #8]
    1c26:	1851      	adds	r1, r2, r1
	bool pwm_active = false;

	/* stop timer if all channels are inactive */
	for (channel = 0; channel < config->map_size; channel++) {
    1c28:	4291      	cmp	r1, r2
    1c2a:	d165      	bne.n	1cf8 <pwm_nrf5_sw_pin_set+0x1b4>
		}
	}

	if (!pwm_active) {
		/* No active PWM, stop timer */
		timer->TASKS_STOP = 1;
    1c2c:	2301      	movs	r3, #1
    1c2e:	6063      	str	r3, [r4, #4]
    1c30:	e067      	b.n	1d02 <pwm_nrf5_sw_pin_set+0x1be>
		if (pwm == data->map[i].pwm) {
    1c32:	0003      	movs	r3, r0
    1c34:	e7c9      	b.n	1bca <pwm_nrf5_sw_pin_set+0x86>
	} else if (pulse_cycles == period_cycles) {
    1c36:	9f00      	ldr	r7, [sp, #0]
    1c38:	9d01      	ldr	r5, [sp, #4]
    1c3a:	42af      	cmp	r7, r5
    1c3c:	d104      	bne.n	1c48 <pwm_nrf5_sw_pin_set+0x104>
		NRF_GPIO->OUTSET = BIT(pwm);
    1c3e:	20a1      	movs	r0, #161	; 0xa1
    1c40:	25a0      	movs	r5, #160	; 0xa0
    1c42:	00c0      	lsls	r0, r0, #3
    1c44:	05ed      	lsls	r5, r5, #23
    1c46:	e7e8      	b.n	1c1a <pwm_nrf5_sw_pin_set+0xd6>
		NRF_GPIO->OUTCLR = BIT(pwm);
    1c48:	25a0      	movs	r5, #160	; 0xa0
    1c4a:	4f32      	ldr	r7, [pc, #200]	; (1d14 <pwm_nrf5_sw_pin_set+0x1d0>)
    1c4c:	05ed      	lsls	r5, r5, #23
    1c4e:	51ee      	str	r6, [r5, r7]
	timer->MODE = TIMER_MODE_MODE_Timer;
    1c50:	4d31      	ldr	r5, [pc, #196]	; (1d18 <pwm_nrf5_sw_pin_set+0x1d4>)
    1c52:	0089      	lsls	r1, r1, #2
    1c54:	5160      	str	r0, [r4, r5]
	timer->PRESCALER = 0;
    1c56:	350c      	adds	r5, #12
    1c58:	5160      	str	r0, [r4, r5]
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    1c5a:	3d08      	subs	r5, #8
    1c5c:	5160      	str	r0, [r4, r5]
    1c5e:	009d      	lsls	r5, r3, #2
    1c60:	1967      	adds	r7, r4, r5
	timer->EVENTS_COMPARE[channel] = 0;
    1c62:	003d      	movs	r5, r7
    1c64:	1861      	adds	r1, r4, r1
    1c66:	35fc      	adds	r5, #252	; 0xfc
    1c68:	6468      	str	r0, [r5, #68]	; 0x44
	timer->EVENTS_COMPARE[config->map_size] = 0;
    1c6a:	000d      	movs	r5, r1
    1c6c:	35fc      	adds	r5, #252	; 0xfc
    1c6e:	6468      	str	r0, [r5, #68]	; 0x44
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    1c70:	2580      	movs	r5, #128	; 0x80
    1c72:	2608      	movs	r6, #8
    1c74:	00ad      	lsls	r5, r5, #2
    1c76:	5166      	str	r6, [r4, r5]
	div = period_cycles >> 16;
    1c78:	9d00      	ldr	r5, [sp, #0]
    1c7a:	9105      	str	r1, [sp, #20]
    1c7c:	0c2e      	lsrs	r6, r5, #16
	timer->CC[channel] = pulse_cycles >> div;
    1c7e:	9d01      	ldr	r5, [sp, #4]
    1c80:	40f5      	lsrs	r5, r6
    1c82:	0029      	movs	r1, r5
    1c84:	25a8      	movs	r5, #168	; 0xa8
    1c86:	00ed      	lsls	r5, r5, #3
    1c88:	5179      	str	r1, [r7, r5]
	timer->CC[config->map_size] = period_cycles >> div;
    1c8a:	9f00      	ldr	r7, [sp, #0]
    1c8c:	9905      	ldr	r1, [sp, #20]
    1c8e:	40f7      	lsrs	r7, r6
    1c90:	514f      	str	r7, [r1, r5]
	timer->TASKS_CLEAR = 1;
    1c92:	2101      	movs	r1, #1
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1c94:	26a2      	movs	r6, #162	; 0xa2
	timer->TASKS_CLEAR = 1;
    1c96:	60e1      	str	r1, [r4, #12]
							    (pwm << 8);
    1c98:	9902      	ldr	r1, [sp, #8]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1c9a:	00f6      	lsls	r6, r6, #3
							    (pwm << 8);
    1c9c:	020d      	lsls	r5, r1, #8
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1c9e:	491f      	ldr	r1, [pc, #124]	; (1d1c <pwm_nrf5_sw_pin_set+0x1d8>)
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1ca0:	27a3      	movs	r7, #163	; 0xa3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1ca2:	4329      	orrs	r1, r5
    1ca4:	9d04      	ldr	r5, [sp, #16]
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1ca6:	00ff      	lsls	r7, r7, #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1ca8:	51a9      	str	r1, [r5, r6]
    1caa:	4661      	mov	r1, ip
				     &(timer->EVENTS_COMPARE[channel]);
    1cac:	001d      	movs	r5, r3
    1cae:	4e18      	ldr	r6, [pc, #96]	; (1d10 <pwm_nrf5_sw_pin_set+0x1cc>)
    1cb0:	00c9      	lsls	r1, r1, #3
    1cb2:	1989      	adds	r1, r1, r6
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    1cb4:	26a2      	movs	r6, #162	; 0xa2
				     &(timer->EVENTS_COMPARE[channel]);
    1cb6:	3550      	adds	r5, #80	; 0x50
    1cb8:	00ad      	lsls	r5, r5, #2
    1cba:	1965      	adds	r5, r4, r5
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    1cbc:	00f6      	lsls	r6, r6, #3
    1cbe:	518d      	str	r5, [r1, r6]
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    1cc0:	4e12      	ldr	r6, [pc, #72]	; (1d0c <pwm_nrf5_sw_pin_set+0x1c8>)
    1cc2:	009d      	lsls	r5, r3, #2
    1cc4:	46b4      	mov	ip, r6
    1cc6:	4e16      	ldr	r6, [pc, #88]	; (1d20 <pwm_nrf5_sw_pin_set+0x1dc>)
    1cc8:	4465      	add	r5, ip
    1cca:	518d      	str	r5, [r1, r6]
					 &(timer->EVENTS_COMPARE[3]);
    1ccc:	0026      	movs	r6, r4
    1cce:	364d      	adds	r6, #77	; 0x4d
    1cd0:	36ff      	adds	r6, #255	; 0xff
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1cd2:	51ce      	str	r6, [r1, r7]
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    1cd4:	4e13      	ldr	r6, [pc, #76]	; (1d24 <pwm_nrf5_sw_pin_set+0x1e0>)
    1cd6:	00db      	lsls	r3, r3, #3
    1cd8:	518d      	str	r5, [r1, r6]
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    1cda:	490d      	ldr	r1, [pc, #52]	; (1d10 <pwm_nrf5_sw_pin_set+0x1cc>)
    1cdc:	4d0e      	ldr	r5, [pc, #56]	; (1d18 <pwm_nrf5_sw_pin_set+0x1d4>)
    1cde:	9e03      	ldr	r6, [sp, #12]
    1ce0:	514e      	str	r6, [r1, r5]
	timer->TASKS_START = 1;
    1ce2:	2101      	movs	r1, #1
    1ce4:	6021      	str	r1, [r4, #0]
	data->period_cycles = period_cycles;
    1ce6:	9900      	ldr	r1, [sp, #0]
    1ce8:	6011      	str	r1, [r2, #0]
    1cea:	18d2      	adds	r2, r2, r3
	data->map[channel].pwm = pwm;
    1cec:	9b02      	ldr	r3, [sp, #8]
    1cee:	6053      	str	r3, [r2, #4]
	data->map[channel].pulse_cycles = pulse_cycles;
    1cf0:	9b01      	ldr	r3, [sp, #4]
    1cf2:	6093      	str	r3, [r2, #8]
	}

	return 0;
}
    1cf4:	b007      	add	sp, #28
    1cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cf8:	3208      	adds	r2, #8
		if (data->map[channel].pulse_cycles) {
    1cfa:	6813      	ldr	r3, [r2, #0]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d100      	bne.n	1d02 <pwm_nrf5_sw_pin_set+0x1be>
    1d00:	e792      	b.n	1c28 <pwm_nrf5_sw_pin_set+0xe4>
	return 0;
    1d02:	2000      	movs	r0, #0
    1d04:	e7f6      	b.n	1cf4 <pwm_nrf5_sw_pin_set+0x1b0>
		return ret;
    1d06:	2016      	movs	r0, #22
		return -ENOMEM;
    1d08:	4240      	negs	r0, r0
    1d0a:	e7f3      	b.n	1cf4 <pwm_nrf5_sw_pin_set+0x1b0>
    1d0c:	40006000 	.word	0x40006000
    1d10:	4001f000 	.word	0x4001f000
    1d14:	0000050c 	.word	0x0000050c
    1d18:	00000504 	.word	0x00000504
    1d1c:	00130003 	.word	0x00130003
    1d20:	00000514 	.word	0x00000514
    1d24:	0000051c 	.word	0x0000051c

00001d28 <pwm_nrf5_sw_get_cycles_per_sec>:
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;

	/* HF timer frequency is derived from 16MHz source and prescaler is 0 */
	*cycles = 16 * 1024 * 1024;
    1d28:	2080      	movs	r0, #128	; 0x80
    1d2a:	2100      	movs	r1, #0
    1d2c:	0440      	lsls	r0, r0, #17
    1d2e:	6010      	str	r0, [r2, #0]
    1d30:	6051      	str	r1, [r2, #4]

	return 0;
}
    1d32:	2000      	movs	r0, #0
    1d34:	4770      	bx	lr

00001d36 <pwm_nrf5_sw_init>:
};

static int pwm_nrf5_sw_init(struct device *dev)
{
	return 0;
}
    1d36:	2000      	movs	r0, #0
    1d38:	4770      	bx	lr

00001d3a <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1d3a:	6803      	ldr	r3, [r0, #0]
    1d3c:	689b      	ldr	r3, [r3, #8]
    1d3e:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1d40:	001a      	movs	r2, r3
    1d42:	32fc      	adds	r2, #252	; 0xfc
    1d44:	68d0      	ldr	r0, [r2, #12]
    1d46:	2800      	cmp	r0, #0
    1d48:	d006      	beq.n	1d58 <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1d4a:	2000      	movs	r0, #0
    1d4c:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1d4e:	22a3      	movs	r2, #163	; 0xa3
    1d50:	00d2      	lsls	r2, r2, #3
    1d52:	589b      	ldr	r3, [r3, r2]
    1d54:	700b      	strb	r3, [r1, #0]

	return 0;
}
    1d56:	4770      	bx	lr
		return -1;
    1d58:	2001      	movs	r0, #1
    1d5a:	4240      	negs	r0, r0
    1d5c:	e7fb      	b.n	1d56 <uart_nrf5_poll_in+0x1c>
	...

00001d60 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1d60:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1d62:	4a06      	ldr	r2, [pc, #24]	; (1d7c <uart_nrf5_poll_out+0x1c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1d64:	689b      	ldr	r3, [r3, #8]
    1d66:	681b      	ldr	r3, [r3, #0]
	uart->TXD = (u8_t)c;
    1d68:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1d6a:	33fc      	adds	r3, #252	; 0xfc
    1d6c:	6a1a      	ldr	r2, [r3, #32]
    1d6e:	2a00      	cmp	r2, #0
    1d70:	d0fc      	beq.n	1d6c <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
    1d72:	2200      	movs	r2, #0

	return c;
}
    1d74:	0008      	movs	r0, r1
	uart->EVENTS_TXDRDY = 0;
    1d76:	621a      	str	r2, [r3, #32]
}
    1d78:	4770      	bx	lr
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	0000051c 	.word	0x0000051c

00001d80 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1d80:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
    1d82:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    1d84:	689b      	ldr	r3, [r3, #8]
    1d86:	681b      	ldr	r3, [r3, #0]

	if (uart->EVENTS_ERROR) {
    1d88:	001a      	movs	r2, r3
    1d8a:	32fc      	adds	r2, #252	; 0xfc
    1d8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1d8e:	4282      	cmp	r2, r0
    1d90:	d003      	beq.n	1d9a <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1d92:	2290      	movs	r2, #144	; 0x90
    1d94:	00d2      	lsls	r2, r2, #3
    1d96:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
    1d98:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;
    1d9a:	230f      	movs	r3, #15
    1d9c:	4018      	ands	r0, r3

	return error;
}
    1d9e:	4770      	bx	lr

00001da0 <uart_nrf5_init>:
{
    1da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1da2:	6803      	ldr	r3, [r0, #0]
{
    1da4:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    1da6:	689b      	ldr	r3, [r3, #8]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1da8:	4818      	ldr	r0, [pc, #96]	; (1e0c <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1daa:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1dac:	f007 fc8a 	bl	96c4 <device_get_binding>
	return api->config(port, access_op, pin, flags);
    1db0:	6843      	ldr	r3, [r0, #4]
    1db2:	0006      	movs	r6, r0
    1db4:	681f      	ldr	r7, [r3, #0]
    1db6:	2302      	movs	r3, #2
    1db8:	2218      	movs	r2, #24
    1dba:	33ff      	adds	r3, #255	; 0xff
    1dbc:	2100      	movs	r1, #0
    1dbe:	47b8      	blx	r7
    1dc0:	6873      	ldr	r3, [r6, #4]
    1dc2:	0030      	movs	r0, r6
    1dc4:	681f      	ldr	r7, [r3, #0]
    1dc6:	2300      	movs	r3, #0
    1dc8:	2219      	movs	r2, #25
    1dca:	0019      	movs	r1, r3
    1dcc:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1dce:	2218      	movs	r2, #24
    1dd0:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <uart_nrf5_init+0x70>)
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1dd2:	21eb      	movs	r1, #235	; 0xeb
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1dd4:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1dd6:	4b0f      	ldr	r3, [pc, #60]	; (1e14 <uart_nrf5_init+0x74>)
    1dd8:	3201      	adds	r2, #1
    1dda:	50e2      	str	r2, [r4, r3]
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1ddc:	22e1      	movs	r2, #225	; 0xe1
    1dde:	68ab      	ldr	r3, [r5, #8]
    1de0:	0252      	lsls	r2, r2, #9
    1de2:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1de4:	682b      	ldr	r3, [r5, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1de6:	0449      	lsls	r1, r1, #17
	volatile struct _uart *uart = UART_STRUCT(dev);
    1de8:	689b      	ldr	r3, [r3, #8]
	uart->EVENTS_TXDRDY = 0;
    1dea:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    1dec:	681a      	ldr	r2, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1dee:	4b0a      	ldr	r3, [pc, #40]	; (1e18 <uart_nrf5_init+0x78>)
    1df0:	50d1      	str	r1, [r2, r3]
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1df2:	2204      	movs	r2, #4
    1df4:	3b24      	subs	r3, #36	; 0x24
    1df6:	50e2      	str	r2, [r4, r3]
	uart->EVENTS_TXDRDY = 0;
    1df8:	0023      	movs	r3, r4
    1dfa:	33fc      	adds	r3, #252	; 0xfc
    1dfc:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
    1dfe:	60d8      	str	r0, [r3, #12]
	uart->TASKS_STARTTX = 1;
    1e00:	2301      	movs	r3, #1
    1e02:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1e04:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1e06:	4b05      	ldr	r3, [pc, #20]	; (1e1c <uart_nrf5_init+0x7c>)
    1e08:	606b      	str	r3, [r5, #4]
}
    1e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e0c:	0000ac67 	.word	0x0000ac67
    1e10:	0000050c 	.word	0x0000050c
    1e14:	00000514 	.word	0x00000514
    1e18:	00000524 	.word	0x00000524
    1e1c:	0000b0f0 	.word	0x0000b0f0

00001e20 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1e20:	22a8      	movs	r2, #168	; 0xa8
    1e22:	4b08      	ldr	r3, [pc, #32]	; (1e44 <rtc_compare_set+0x24>)
    1e24:	00d2      	lsls	r2, r2, #3
    1e26:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
    1e28:	4a07      	ldr	r2, [pc, #28]	; (1e48 <rtc_compare_set+0x28>)
    1e2a:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1e2c:	1ac0      	subs	r0, r0, r3
    1e2e:	0200      	lsls	r0, r0, #8
    1e30:	0a00      	lsrs	r0, r0, #8
    1e32:	4b06      	ldr	r3, [pc, #24]	; (1e4c <rtc_compare_set+0x2c>)
    1e34:	3802      	subs	r0, #2
    1e36:	4298      	cmp	r0, r3
    1e38:	d903      	bls.n	1e42 <rtc_compare_set+0x22>
    1e3a:	2280      	movs	r2, #128	; 0x80
    1e3c:	4b04      	ldr	r3, [pc, #16]	; (1e50 <rtc_compare_set+0x30>)
    1e3e:	0292      	lsls	r2, r2, #10
    1e40:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    1e42:	4770      	bx	lr
    1e44:	40011000 	.word	0x40011000
    1e48:	00000504 	.word	0x00000504
    1e4c:	007ffffd 	.word	0x007ffffd
    1e50:	e000e1fc 	.word	0xe000e1fc

00001e54 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1e54:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1e56:	4b11      	ldr	r3, [pc, #68]	; (1e9c <rtc_announce_set_next+0x48>)
    1e58:	4a11      	ldr	r2, [pc, #68]	; (1ea0 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1e5a:	4c12      	ldr	r4, [pc, #72]	; (1ea4 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1e5c:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1e5e:	6825      	ldr	r5, [r4, #0]
    1e60:	1b40      	subs	r0, r0, r5
    1e62:	0200      	lsls	r0, r0, #8
    1e64:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1e66:	2882      	cmp	r0, #130	; 0x82
    1e68:	d912      	bls.n	1e90 <rtc_announce_set_next+0x3c>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1e6a:	2183      	movs	r1, #131	; 0x83
    1e6c:	f7fe f9ac 	bl	1c8 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
    1e70:	4b0d      	ldr	r3, [pc, #52]	; (1ea8 <rtc_announce_set_next+0x54>)
    1e72:	681a      	ldr	r2, [r3, #0]
    1e74:	4282      	cmp	r2, r0
    1e76:	d900      	bls.n	1e7a <rtc_announce_set_next+0x26>
    1e78:	0002      	movs	r2, r0
		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
    1e7a:	2383      	movs	r3, #131	; 0x83
    1e7c:	4353      	muls	r3, r2
		rtc_past = (rtc_past +
    1e7e:	195b      	adds	r3, r3, r5
			   ) & RTC_MASK;
    1e80:	021b      	lsls	r3, r3, #8
    1e82:	0a1b      	lsrs	r3, r3, #8
		rtc_past = (rtc_past +
    1e84:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1e86:	4b09      	ldr	r3, [pc, #36]	; (1eac <rtc_announce_set_next+0x58>)
		_sys_clock_tick_announce();
    1e88:	0010      	movs	r0, r2
		_sys_idle_elapsed_ticks = sys_elapsed;
    1e8a:	601a      	str	r2, [r3, #0]
		_sys_clock_tick_announce();
    1e8c:	f008 f990 	bl	a1b0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1e90:	6820      	ldr	r0, [r4, #0]
    1e92:	3083      	adds	r0, #131	; 0x83
    1e94:	f7ff ffc4 	bl	1e20 <rtc_compare_set>
}
    1e98:	bd70      	pop	{r4, r5, r6, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	00000504 	.word	0x00000504
    1ea0:	40011000 	.word	0x40011000
    1ea4:	2000004c 	.word	0x2000004c
    1ea8:	20000048 	.word	0x20000048
    1eac:	2000243c 	.word	0x2000243c

00001eb0 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1eb0:	2200      	movs	r2, #0
{
    1eb2:	b510      	push	{r4, lr}
	RTC_CC_EVENT = 0;
    1eb4:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <rtc1_nrf5_isr+0x10>)
    1eb6:	645a      	str	r2, [r3, #68]	; 0x44
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1eb8:	f7ff ffcc 	bl	1e54 <rtc_announce_set_next>
#ifdef CONFIG_EXECUTION_BENCHMARKING
	extern void read_timer_end_of_tick_handler(void);
	read_timer_end_of_tick_handler();
#endif

}
    1ebc:	bd10      	pop	{r4, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	400110fc 	.word	0x400110fc

00001ec4 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1ec4:	4a07      	ldr	r2, [pc, #28]	; (1ee4 <_timer_idle_enter+0x20>)
{
    1ec6:	b510      	push	{r4, lr}
    1ec8:	0003      	movs	r3, r0
	if ((sys_ticks < 0) ||
    1eca:	4290      	cmp	r0, r2
    1ecc:	d900      	bls.n	1ed0 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1ece:	0013      	movs	r3, r2
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1ed0:	2083      	movs	r0, #131	; 0x83
	expected_sys_ticks = sys_ticks;
    1ed2:	4a05      	ldr	r2, [pc, #20]	; (1ee8 <_timer_idle_enter+0x24>)
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1ed4:	4358      	muls	r0, r3
	expected_sys_ticks = sys_ticks;
    1ed6:	6013      	str	r3, [r2, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1ed8:	4b04      	ldr	r3, [pc, #16]	; (1eec <_timer_idle_enter+0x28>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	18c0      	adds	r0, r0, r3
    1ede:	f7ff ff9f 	bl	1e20 <rtc_compare_set>
}
    1ee2:	bd10      	pop	{r4, pc}
    1ee4:	0000fa23 	.word	0x0000fa23
    1ee8:	20000048 	.word	0x20000048
    1eec:	2000004c 	.word	0x2000004c

00001ef0 <_timer_idle_exit>:
	RTC_CC_EVENT = 0;
    1ef0:	2200      	movs	r2, #0
    1ef2:	4b07      	ldr	r3, [pc, #28]	; (1f10 <_timer_idle_exit+0x20>)
{
    1ef4:	b510      	push	{r4, lr}
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ef6:	2180      	movs	r1, #128	; 0x80
	RTC_CC_EVENT = 0;
    1ef8:	645a      	str	r2, [r3, #68]	; 0x44
    1efa:	23c0      	movs	r3, #192	; 0xc0
    1efc:	4a05      	ldr	r2, [pc, #20]	; (1f14 <_timer_idle_exit+0x24>)
    1efe:	005b      	lsls	r3, r3, #1
    1f00:	0289      	lsls	r1, r1, #10
    1f02:	50d1      	str	r1, [r2, r3]
	rtc_announce_set_next();
    1f04:	f7ff ffa6 	bl	1e54 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1f08:	2201      	movs	r2, #1
    1f0a:	4b03      	ldr	r3, [pc, #12]	; (1f18 <_timer_idle_exit+0x28>)
    1f0c:	601a      	str	r2, [r3, #0]
}
    1f0e:	bd10      	pop	{r4, pc}
    1f10:	400110fc 	.word	0x400110fc
    1f14:	e000e100 	.word	0xe000e100
    1f18:	20000048 	.word	0x20000048

00001f1c <_sys_clock_driver_init>:

int _sys_clock_driver_init(struct device *device)
{
    1f1c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1f1e:	481a      	ldr	r0, [pc, #104]	; (1f88 <_sys_clock_driver_init+0x6c>)
    1f20:	f007 fbd0 	bl	96c4 <device_get_binding>
	if (!clock) {
    1f24:	2800      	cmp	r0, #0
    1f26:	d02b      	beq.n	1f80 <_sys_clock_driver_init+0x64>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    1f28:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    1f2a:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1f2c:	6843      	ldr	r3, [r0, #4]
    1f2e:	2100      	movs	r1, #0
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	4798      	blx	r3
	rtc_past = 0;
    1f34:	4b15      	ldr	r3, [pc, #84]	; (1f8c <_sys_clock_driver_init+0x70>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1f36:	2283      	movs	r2, #131	; 0x83
	rtc_past = 0;
    1f38:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1f3a:	4b15      	ldr	r3, [pc, #84]	; (1f90 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1f3c:	4d15      	ldr	r5, [pc, #84]	; (1f94 <_sys_clock_driver_init+0x78>)
	expected_sys_ticks = 1;
    1f3e:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->PRESCALER = 0;
    1f40:	23a1      	movs	r3, #161	; 0xa1
    1f42:	00db      	lsls	r3, r3, #3
    1f44:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1f46:	3338      	adds	r3, #56	; 0x38
    1f48:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1f4a:	2380      	movs	r3, #128	; 0x80
    1f4c:	22d1      	movs	r2, #209	; 0xd1
    1f4e:	025b      	lsls	r3, r3, #9
    1f50:	0092      	lsls	r2, r2, #2
    1f52:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1f54:	3a40      	subs	r2, #64	; 0x40
    1f56:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1f58:	4b0f      	ldr	r3, [pc, #60]	; (1f98 <_sys_clock_driver_init+0x7c>)
    1f5a:	2180      	movs	r1, #128	; 0x80
    1f5c:	645c      	str	r4, [r3, #68]	; 0x44
    1f5e:	23c0      	movs	r3, #192	; 0xc0
    1f60:	4a0e      	ldr	r2, [pc, #56]	; (1f9c <_sys_clock_driver_init+0x80>)
    1f62:	005b      	lsls	r3, r3, #1
    1f64:	0289      	lsls	r1, r1, #10
    1f66:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1f68:	2011      	movs	r0, #17
    1f6a:	0022      	movs	r2, r4
    1f6c:	0031      	movs	r1, r6
    1f6e:	f7fe fd93 	bl	a98 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1f72:	2011      	movs	r0, #17
    1f74:	f7fe fd66 	bl	a44 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1f78:	0020      	movs	r0, r4
	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1f7a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    1f7c:	602e      	str	r6, [r5, #0]
}
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1f80:	2001      	movs	r0, #1
    1f82:	4240      	negs	r0, r0
    1f84:	e7fb      	b.n	1f7e <_sys_clock_driver_init+0x62>
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	0000b058 	.word	0x0000b058
    1f8c:	2000004c 	.word	0x2000004c
    1f90:	20000048 	.word	0x20000048
    1f94:	40011000 	.word	0x40011000
    1f98:	400110fc 	.word	0x400110fc
    1f9c:	e000e100 	.word	0xe000e100

00001fa0 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1fa0:	b570      	push	{r4, r5, r6, lr}
    1fa2:	0006      	movs	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1fa4:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1fa6:	000d      	movs	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1fa8:	f007 fa72 	bl	9490 <net_buf_pool_get>
    1fac:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <hci_cmd_done.isra.9+0x48>)
    1fae:	4298      	cmp	r0, r3
    1fb0:	d118      	bne.n	1fe4 <hci_cmd_done.isra.9+0x44>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1fb2:	0028      	movs	r0, r5
    1fb4:	f007 fa72 	bl	949c <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1fb8:	0028      	movs	r0, r5
    1fba:	f007 fa6f 	bl	949c <net_buf_id>
    1fbe:	4c0b      	ldr	r4, [pc, #44]	; (1fec <hci_cmd_done.isra.9+0x4c>)
    1fc0:	00c0      	lsls	r0, r0, #3
    1fc2:	1820      	adds	r0, r4, r0
    1fc4:	6843      	ldr	r3, [r0, #4]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d00c      	beq.n	1fe4 <hci_cmd_done.isra.9+0x44>
		cmd(buf)->status = status;
    1fca:	0028      	movs	r0, r5
    1fcc:	f007 fa66 	bl	949c <net_buf_id>
    1fd0:	00c0      	lsls	r0, r0, #3
    1fd2:	5506      	strb	r6, [r0, r4]
		k_sem_give(cmd(buf)->sync);
    1fd4:	0028      	movs	r0, r5
    1fd6:	f007 fa61 	bl	949c <net_buf_id>
    1fda:	00c0      	lsls	r0, r0, #3
    1fdc:	1824      	adds	r4, r4, r0

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1fde:	6860      	ldr	r0, [r4, #4]
    1fe0:	f008 f852 	bl	a088 <_impl_k_sem_give>
	}
}
    1fe4:	bd70      	pop	{r4, r5, r6, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	2000250c 	.word	0x2000250c
    1fec:	20000050 	.word	0x20000050

00001ff0 <atomic_test_bit.constprop.24>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
    1ff0:	b510      	push	{r4, lr}
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1ff2:	0942      	lsrs	r2, r0, #5
static inline int atomic_test_bit(const atomic_t *target, int bit)
    1ff4:	0004      	movs	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1ff6:	4806      	ldr	r0, [pc, #24]	; (2010 <atomic_test_bit.constprop.24+0x20>)
    1ff8:	0092      	lsls	r2, r2, #2
    1ffa:	3070      	adds	r0, #112	; 0x70
    1ffc:	1880      	adds	r0, r0, r2
    1ffe:	f008 fc31 	bl	a864 <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2002:	231f      	movs	r3, #31
    2004:	401c      	ands	r4, r3
    2006:	4120      	asrs	r0, r4
    2008:	3b1e      	subs	r3, #30
    200a:	4018      	ands	r0, r3
}
    200c:	bd10      	pop	{r4, pc}
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	20002210 	.word	0x20002210

00002014 <bt_hci_cmd_create>:
{
    2014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2016:	9101      	str	r1, [sp, #4]
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2018:	2101      	movs	r1, #1
{
    201a:	0005      	movs	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    201c:	4249      	negs	r1, r1
    201e:	4813      	ldr	r0, [pc, #76]	; (206c <bt_hci_cmd_create+0x58>)
    2020:	f007 fac8 	bl	95b4 <net_buf_alloc_fixed>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2024:	0007      	movs	r7, r0
    2026:	3708      	adds	r7, #8
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2028:	0004      	movs	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    202a:	2100      	movs	r1, #0
    202c:	0038      	movs	r0, r7
    202e:	f007 fac9 	bl	95c4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2032:	2300      	movs	r3, #0
	cmd(buf)->opcode = opcode;
    2034:	0020      	movs	r0, r4
    2036:	7523      	strb	r3, [r4, #20]
    2038:	f007 fa30 	bl	949c <net_buf_id>
    203c:	4e0c      	ldr	r6, [pc, #48]	; (2070 <bt_hci_cmd_create+0x5c>)
    203e:	00c0      	lsls	r0, r0, #3
    2040:	1830      	adds	r0, r6, r0
    2042:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    2044:	0020      	movs	r0, r4
    2046:	f007 fa29 	bl	949c <net_buf_id>
    204a:	2300      	movs	r3, #0
    204c:	00c0      	lsls	r0, r0, #3
    204e:	1836      	adds	r6, r6, r0
    2050:	6073      	str	r3, [r6, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2052:	0038      	movs	r0, r7
    2054:	2103      	movs	r1, #3
    2056:	f007 fafd 	bl	9654 <net_buf_simple_add>
	hdr->param_len = param_len;
    205a:	466b      	mov	r3, sp
    205c:	791b      	ldrb	r3, [r3, #4]
	hdr->opcode = sys_cpu_to_le16(opcode);
    205e:	7005      	strb	r5, [r0, #0]
    2060:	0a2d      	lsrs	r5, r5, #8
    2062:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    2064:	7083      	strb	r3, [r0, #2]
}
    2066:	0020      	movs	r0, r4
    2068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	2000250c 	.word	0x2000250c
    2070:	20000050 	.word	0x20000050

00002074 <bt_hci_cmd_send_sync>:
{
    2074:	b570      	push	{r4, r5, r6, lr}
    2076:	000c      	movs	r4, r1
    2078:	b086      	sub	sp, #24
    207a:	0015      	movs	r5, r2
	if (!buf) {
    207c:	2900      	cmp	r1, #0
    207e:	d103      	bne.n	2088 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    2080:	f7ff ffc8 	bl	2014 <bt_hci_cmd_create>
    2084:	1e04      	subs	r4, r0, #0
		if (!buf) {
    2086:	d02f      	beq.n	20e8 <bt_hci_cmd_send_sync+0x74>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2088:	2201      	movs	r2, #1
    208a:	2100      	movs	r1, #0
    208c:	4668      	mov	r0, sp
    208e:	f007 fff1 	bl	a074 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2092:	0020      	movs	r0, r4
    2094:	f007 fa02 	bl	949c <net_buf_id>
    2098:	466b      	mov	r3, sp
    209a:	4e14      	ldr	r6, [pc, #80]	; (20ec <bt_hci_cmd_send_sync+0x78>)
    209c:	00c0      	lsls	r0, r0, #3
    209e:	1830      	adds	r0, r6, r0
    20a0:	6043      	str	r3, [r0, #4]
	net_buf_ref(buf);
    20a2:	0020      	movs	r0, r4
    20a4:	f007 fad2 	bl	964c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    20a8:	4811      	ldr	r0, [pc, #68]	; (20f0 <bt_hci_cmd_send_sync+0x7c>)
    20aa:	0021      	movs	r1, r4
    20ac:	30b4      	adds	r0, #180	; 0xb4
    20ae:	f007 fa8d 	bl	95cc <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    20b2:	4910      	ldr	r1, [pc, #64]	; (20f4 <bt_hci_cmd_send_sync+0x80>)
    20b4:	4668      	mov	r0, sp
    20b6:	f008 f841 	bl	a13c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    20ba:	0020      	movs	r0, r4
    20bc:	f007 f9ee 	bl	949c <net_buf_id>
    20c0:	00c0      	lsls	r0, r0, #3
    20c2:	5d80      	ldrb	r0, [r0, r6]
    20c4:	2800      	cmp	r0, #0
    20c6:	d005      	beq.n	20d4 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
    20c8:	0020      	movs	r0, r4
    20ca:	f007 fa8d 	bl	95e8 <net_buf_unref>
		err = -EIO;
    20ce:	2005      	movs	r0, #5
			return -ENOBUFS;
    20d0:	4240      	negs	r0, r0
    20d2:	e002      	b.n	20da <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    20d4:	2d00      	cmp	r5, #0
    20d6:	d002      	beq.n	20de <bt_hci_cmd_send_sync+0x6a>
			*rsp = buf;
    20d8:	602c      	str	r4, [r5, #0]
}
    20da:	b006      	add	sp, #24
    20dc:	bd70      	pop	{r4, r5, r6, pc}
			net_buf_unref(buf);
    20de:	0020      	movs	r0, r4
    20e0:	f007 fa82 	bl	95e8 <net_buf_unref>
		err = 0;
    20e4:	0028      	movs	r0, r5
    20e6:	e7f8      	b.n	20da <bt_hci_cmd_send_sync+0x66>
			return -ENOBUFS;
    20e8:	2037      	movs	r0, #55	; 0x37
    20ea:	e7f1      	b.n	20d0 <bt_hci_cmd_send_sync+0x5c>
    20ec:	20000050 	.word	0x20000050
    20f0:	20002210 	.word	0x20002210
    20f4:	00002710 	.word	0x00002710

000020f8 <set_random_address>:
{
    20f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    20fa:	4e14      	ldr	r6, [pc, #80]	; (214c <set_random_address+0x54>)
    20fc:	2206      	movs	r2, #6
    20fe:	0037      	movs	r7, r6
    2100:	3708      	adds	r7, #8
    2102:	0039      	movs	r1, r7
    2104:	0005      	movs	r5, r0
    2106:	f7fe fa9c 	bl	642 <memcmp>
    210a:	1e04      	subs	r4, r0, #0
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    210c:	d018      	beq.n	2140 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    210e:	2106      	movs	r1, #6
    2110:	480f      	ldr	r0, [pc, #60]	; (2150 <set_random_address+0x58>)
    2112:	f7ff ff7f 	bl	2014 <bt_hci_cmd_create>
    2116:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2118:	d014      	beq.n	2144 <set_random_address+0x4c>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    211a:	2206      	movs	r2, #6
    211c:	0029      	movs	r1, r5
    211e:	3008      	adds	r0, #8
    2120:	f007 fa9f 	bl	9662 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2124:	0021      	movs	r1, r4
    2126:	2200      	movs	r2, #0
    2128:	4809      	ldr	r0, [pc, #36]	; (2150 <set_random_address+0x58>)
    212a:	f7ff ffa3 	bl	2074 <bt_hci_cmd_send_sync>
    212e:	1e04      	subs	r4, r0, #0
	if (err) {
    2130:	d106      	bne.n	2140 <set_random_address+0x48>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2132:	2206      	movs	r2, #6
    2134:	0029      	movs	r1, r5
    2136:	0038      	movs	r0, r7
    2138:	f7fe fa96 	bl	668 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    213c:	2301      	movs	r3, #1
    213e:	71f3      	strb	r3, [r6, #7]
}
    2140:	0020      	movs	r0, r4
    2142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2144:	2437      	movs	r4, #55	; 0x37
    2146:	4264      	negs	r4, r4
    2148:	e7fa      	b.n	2140 <set_random_address+0x48>
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	20002210 	.word	0x20002210
    2150:	00002005 	.word	0x00002005

00002154 <set_le_scan_enable>:
{
    2154:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2156:	2102      	movs	r1, #2
{
    2158:	0005      	movs	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    215a:	4816      	ldr	r0, [pc, #88]	; (21b4 <set_le_scan_enable+0x60>)
    215c:	f7ff ff5a 	bl	2014 <bt_hci_cmd_create>
    2160:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2162:	d023      	beq.n	21ac <set_le_scan_enable+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    2164:	2102      	movs	r1, #2
    2166:	3008      	adds	r0, #8
    2168:	f007 fa74 	bl	9654 <net_buf_simple_add>
    216c:	0006      	movs	r6, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    216e:	2d01      	cmp	r5, #1
    2170:	d114      	bne.n	219c <set_le_scan_enable+0x48>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2172:	200a      	movs	r0, #10
    2174:	f7ff ff3c 	bl	1ff0 <atomic_test_bit.constprop.24>
    2178:	7070      	strb	r0, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    217a:	0021      	movs	r1, r4
	cp->enable = enable;
    217c:	7035      	strb	r5, [r6, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    217e:	2200      	movs	r2, #0
    2180:	480c      	ldr	r0, [pc, #48]	; (21b4 <set_le_scan_enable+0x60>)
    2182:	f7ff ff77 	bl	2074 <bt_hci_cmd_send_sync>
    2186:	1e04      	subs	r4, r0, #0
	if (err) {
    2188:	d106      	bne.n	2198 <set_le_scan_enable+0x44>
    218a:	480b      	ldr	r0, [pc, #44]	; (21b8 <set_le_scan_enable+0x64>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    218c:	3070      	adds	r0, #112	; 0x70
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    218e:	2d01      	cmp	r5, #1
    2190:	d107      	bne.n	21a2 <set_le_scan_enable+0x4e>
    2192:	2180      	movs	r1, #128	; 0x80
    2194:	f008 fb72 	bl	a87c <atomic_or>
}
    2198:	0020      	movs	r0, r4
    219a:	bd70      	pop	{r4, r5, r6, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    219c:	2300      	movs	r3, #0
    219e:	7043      	strb	r3, [r0, #1]
    21a0:	e7eb      	b.n	217a <set_le_scan_enable+0x26>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    21a2:	2181      	movs	r1, #129	; 0x81
    21a4:	4249      	negs	r1, r1
    21a6:	f008 fb74 	bl	a892 <atomic_and>
    21aa:	e7f5      	b.n	2198 <set_le_scan_enable+0x44>
		return -ENOBUFS;
    21ac:	2437      	movs	r4, #55	; 0x37
    21ae:	4264      	negs	r4, r4
    21b0:	e7f2      	b.n	2198 <set_le_scan_enable+0x44>
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	0000200c 	.word	0x0000200c
    21b8:	20002210 	.word	0x20002210

000021bc <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    21bc:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    21be:	2008      	movs	r0, #8
    21c0:	f7ff ff16 	bl	1ff0 <atomic_test_bit.constprop.24>
    21c4:	1e04      	subs	r4, r0, #0
    21c6:	d001      	beq.n	21cc <bt_le_scan_update+0x10>
		return 0;
    21c8:	2000      	movs	r0, #0

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    21ca:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    21cc:	2007      	movs	r0, #7
    21ce:	f7ff ff0f 	bl	1ff0 <atomic_test_bit.constprop.24>
    21d2:	2800      	cmp	r0, #0
    21d4:	d0f8      	beq.n	21c8 <bt_le_scan_update+0xc>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    21d6:	0020      	movs	r0, r4
    21d8:	f7ff ffbc 	bl	2154 <set_le_scan_enable>
    21dc:	e7f5      	b.n	21ca <bt_le_scan_update+0xe>

000021de <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    21de:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    21e0:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    21e2:	2106      	movs	r1, #6
{
    21e4:	0004      	movs	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    21e6:	7003      	strb	r3, [r0, #0]
	return bt_rand(addr->a.val, 6);
    21e8:	18c0      	adds	r0, r0, r3
    21ea:	f001 faf1 	bl	37d0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    21ee:	2800      	cmp	r0, #0
    21f0:	d104      	bne.n	21fc <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    21f2:	2340      	movs	r3, #64	; 0x40
    21f4:	79a2      	ldrb	r2, [r4, #6]
    21f6:	425b      	negs	r3, r3
    21f8:	4313      	orrs	r3, r2
    21fa:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    21fc:	bd10      	pop	{r4, pc}
	...

00002200 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    2200:	b5f0      	push	{r4, r5, r6, r7, lr}
    2202:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2204:	aa04      	add	r2, sp, #16
    2206:	2100      	movs	r1, #0
    2208:	48c5      	ldr	r0, [pc, #788]	; (2520 <hci_init+0x320>)
    220a:	f7ff ff33 	bl	2074 <bt_hci_cmd_send_sync>
    220e:	1e04      	subs	r4, r0, #0
	if (err) {
    2210:	d000      	beq.n	2214 <hci_init+0x14>
    2212:	e135      	b.n	2480 <hci_init+0x280>
	u8_t status = buf->data[0];
    2214:	9b04      	ldr	r3, [sp, #16]
    2216:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	2b00      	cmp	r3, #0
    221c:	d106      	bne.n	222c <hci_init+0x2c>
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    221e:	48c1      	ldr	r0, [pc, #772]	; (2524 <hci_init+0x324>)
	scan_dev_found_cb = NULL;
    2220:	4ac1      	ldr	r2, [pc, #772]	; (2528 <hci_init+0x328>)
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    2222:	2101      	movs	r1, #1
    2224:	3070      	adds	r0, #112	; 0x70
	scan_dev_found_cb = NULL;
    2226:	6013      	str	r3, [r2, #0]
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    2228:	f008 fb1e 	bl	a868 <atomic_set>
	net_buf_unref(rsp);
    222c:	9804      	ldr	r0, [sp, #16]
    222e:	f007 f9db 	bl	95e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2232:	aa04      	add	r2, sp, #16
    2234:	2100      	movs	r1, #0
    2236:	48bd      	ldr	r0, [pc, #756]	; (252c <hci_init+0x32c>)
    2238:	f7ff ff1c 	bl	2074 <bt_hci_cmd_send_sync>
    223c:	1e04      	subs	r4, r0, #0
	if (err) {
    223e:	d000      	beq.n	2242 <hci_init+0x42>
    2240:	e11e      	b.n	2480 <hci_init+0x280>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2242:	4db8      	ldr	r5, [pc, #736]	; (2524 <hci_init+0x324>)
    2244:	9b04      	ldr	r3, [sp, #16]
    2246:	0028      	movs	r0, r5
    2248:	6899      	ldr	r1, [r3, #8]
    224a:	2208      	movs	r2, #8
    224c:	3101      	adds	r1, #1
    224e:	3016      	adds	r0, #22
    2250:	f7fe fa0a 	bl	668 <memcpy>
	net_buf_unref(rsp);
    2254:	9804      	ldr	r0, [sp, #16]
    2256:	f007 f9c7 	bl	95e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    225a:	0021      	movs	r1, r4
    225c:	aa04      	add	r2, sp, #16
    225e:	48b4      	ldr	r0, [pc, #720]	; (2530 <hci_init+0x330>)
    2260:	f7ff ff08 	bl	2074 <bt_hci_cmd_send_sync>
    2264:	1e04      	subs	r4, r0, #0
	if (err) {
    2266:	d000      	beq.n	226a <hci_init+0x6a>
    2268:	e10a      	b.n	2480 <hci_init+0x280>
	read_local_ver_complete(rsp);
    226a:	9804      	ldr	r0, [sp, #16]
    226c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    226e:	785a      	ldrb	r2, [r3, #1]
    2270:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2272:	78da      	ldrb	r2, [r3, #3]
    2274:	7899      	ldrb	r1, [r3, #2]
    2276:	0212      	lsls	r2, r2, #8
    2278:	430a      	orrs	r2, r1
    227a:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    227c:	791a      	ldrb	r2, [r3, #4]
    227e:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2280:	7a1a      	ldrb	r2, [r3, #8]
    2282:	79d9      	ldrb	r1, [r3, #7]
    2284:	0212      	lsls	r2, r2, #8
    2286:	430a      	orrs	r2, r1
    2288:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    228a:	795a      	ldrb	r2, [r3, #5]
    228c:	799b      	ldrb	r3, [r3, #6]
    228e:	021b      	lsls	r3, r3, #8
    2290:	4313      	orrs	r3, r2
    2292:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2294:	f007 f9a8 	bl	95e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2298:	0021      	movs	r1, r4
    229a:	aa04      	add	r2, sp, #16
    229c:	48a5      	ldr	r0, [pc, #660]	; (2534 <hci_init+0x334>)
    229e:	f7ff fee9 	bl	2074 <bt_hci_cmd_send_sync>
    22a2:	1e04      	subs	r4, r0, #0
	if (err) {
    22a4:	d000      	beq.n	22a8 <hci_init+0xa8>
    22a6:	e0eb      	b.n	2480 <hci_init+0x280>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    22a8:	9b04      	ldr	r3, [sp, #16]
    22aa:	2206      	movs	r2, #6
    22ac:	6899      	ldr	r1, [r3, #8]
    22ae:	1c68      	adds	r0, r5, #1
    22b0:	3101      	adds	r1, #1
    22b2:	f7fe f9d9 	bl	668 <memcpy>
	net_buf_unref(rsp);
    22b6:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    22b8:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    22ba:	f007 f995 	bl	95e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    22be:	0021      	movs	r1, r4
    22c0:	aa04      	add	r2, sp, #16
    22c2:	489d      	ldr	r0, [pc, #628]	; (2538 <hci_init+0x338>)
    22c4:	f7ff fed6 	bl	2074 <bt_hci_cmd_send_sync>
    22c8:	1e04      	subs	r4, r0, #0
	if (err) {
    22ca:	d000      	beq.n	22ce <hci_init+0xce>
    22cc:	e0d8      	b.n	2480 <hci_init+0x280>
	memcpy(bt_dev.supported_commands, rp->commands,
    22ce:	0028      	movs	r0, r5
    22d0:	9b04      	ldr	r3, [sp, #16]
    22d2:	2240      	movs	r2, #64	; 0x40
    22d4:	6899      	ldr	r1, [r3, #8]
    22d6:	301e      	adds	r0, #30
    22d8:	3101      	adds	r1, #1
    22da:	f7fe f9c5 	bl	668 <memcpy>
	net_buf_unref(rsp);
    22de:	9804      	ldr	r0, [sp, #16]
    22e0:	f007 f982 	bl	95e8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    22e4:	7eab      	ldrb	r3, [r5, #26]
    22e6:	065b      	lsls	r3, r3, #25
    22e8:	d400      	bmi.n	22ec <hci_init+0xec>
    22ea:	e157      	b.n	259c <hci_init+0x39c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    22ec:	0021      	movs	r1, r4
    22ee:	aa04      	add	r2, sp, #16
    22f0:	4892      	ldr	r0, [pc, #584]	; (253c <hci_init+0x33c>)
    22f2:	f7ff febf 	bl	2074 <bt_hci_cmd_send_sync>
    22f6:	1e04      	subs	r4, r0, #0
	if (err) {
    22f8:	d000      	beq.n	22fc <hci_init+0xfc>
    22fa:	e0c1      	b.n	2480 <hci_init+0x280>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    22fc:	0028      	movs	r0, r5
    22fe:	9b04      	ldr	r3, [sp, #16]
    2300:	2208      	movs	r2, #8
    2302:	6899      	ldr	r1, [r3, #8]
    2304:	3078      	adds	r0, #120	; 0x78
    2306:	3101      	adds	r1, #1
    2308:	f7fe f9ae 	bl	668 <memcpy>
	net_buf_unref(rsp);
    230c:	9804      	ldr	r0, [sp, #16]
    230e:	f007 f96b 	bl	95e8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2312:	7eab      	ldrb	r3, [r5, #26]
    2314:	069b      	lsls	r3, r3, #26
    2316:	d400      	bmi.n	231a <hci_init+0x11a>
    2318:	e09a      	b.n	2450 <hci_init+0x250>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    231a:	002b      	movs	r3, r5
    231c:	333a      	adds	r3, #58	; 0x3a
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	071b      	lsls	r3, r3, #28
    2322:	d500      	bpl.n	2326 <hci_init+0x126>
    2324:	e0af      	b.n	2486 <hci_init+0x286>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2326:	2108      	movs	r1, #8
    2328:	4885      	ldr	r0, [pc, #532]	; (2540 <hci_init+0x340>)
    232a:	f7ff fe73 	bl	2014 <bt_hci_cmd_create>
    232e:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2330:	d100      	bne.n	2334 <hci_init+0x134>
    2332:	e093      	b.n	245c <hci_init+0x25c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2334:	2108      	movs	r1, #8
    2336:	1840      	adds	r0, r0, r1
    2338:	f007 f98c 	bl	9654 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    233c:	002b      	movs	r3, r5
    233e:	3340      	adds	r3, #64	; 0x40
    2340:	781a      	ldrb	r2, [r3, #0]
    2342:	2306      	movs	r3, #6
    2344:	401a      	ands	r2, r3
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;
    2346:	3b04      	subs	r3, #4
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2348:	2a06      	cmp	r2, #6
    234a:	d101      	bne.n	2350 <hci_init+0x150>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    234c:	3381      	adds	r3, #129	; 0x81
    234e:	33ff      	adds	r3, #255	; 0xff
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2350:	2200      	movs	r2, #0
    2352:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2354:	0a1b      	lsrs	r3, r3, #8
    2356:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    2358:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    235a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    235c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    235e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2360:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2362:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2364:	0021      	movs	r1, r4
    2366:	4876      	ldr	r0, [pc, #472]	; (2540 <hci_init+0x340>)
    2368:	f7ff fe84 	bl	2074 <bt_hci_cmd_send_sync>
    236c:	1e04      	subs	r4, r0, #0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    236e:	d000      	beq.n	2372 <hci_init+0x172>
    2370:	e086      	b.n	2480 <hci_init+0x280>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2372:	2108      	movs	r1, #8
    2374:	4873      	ldr	r0, [pc, #460]	; (2544 <hci_init+0x344>)
    2376:	f7ff fe4d 	bl	2014 <bt_hci_cmd_create>
    237a:	1e06      	subs	r6, r0, #0
	if (!buf) {
    237c:	d06e      	beq.n	245c <hci_init+0x25c>
	ev = net_buf_add(buf, sizeof(*ev));
    237e:	2108      	movs	r1, #8
    2380:	3008      	adds	r0, #8
    2382:	f007 f967 	bl	9654 <net_buf_simple_add>
    2386:	2380      	movs	r3, #128	; 0x80
    2388:	2702      	movs	r7, #2
    238a:	7043      	strb	r3, [r0, #1]
    238c:	3b60      	subs	r3, #96	; 0x60
	dst[0] = val;
    238e:	7004      	strb	r4, [r0, #0]
    2390:	7084      	strb	r4, [r0, #2]
    2392:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2394:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2396:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2398:	70c7      	strb	r7, [r0, #3]
    239a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    239c:	0022      	movs	r2, r4
    239e:	0031      	movs	r1, r6
    23a0:	4868      	ldr	r0, [pc, #416]	; (2544 <hci_init+0x344>)
    23a2:	f7ff fe67 	bl	2074 <bt_hci_cmd_send_sync>
    23a6:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    23a8:	d16a      	bne.n	2480 <hci_init+0x280>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    23aa:	0001      	movs	r1, r0
    23ac:	aa04      	add	r2, sp, #16
    23ae:	4866      	ldr	r0, [pc, #408]	; (2548 <hci_init+0x348>)
    23b0:	f7ff fe60 	bl	2074 <bt_hci_cmd_send_sync>
	if (err) {
    23b4:	2800      	cmp	r0, #0
    23b6:	d126      	bne.n	2406 <hci_init+0x206>
	net_buf_unref(rsp);
    23b8:	9804      	ldr	r0, [sp, #16]
    23ba:	f007 f915 	bl	95e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    23be:	aa04      	add	r2, sp, #16
    23c0:	0021      	movs	r1, r4
    23c2:	4862      	ldr	r0, [pc, #392]	; (254c <hci_init+0x34c>)
    23c4:	f7ff fe56 	bl	2074 <bt_hci_cmd_send_sync>
	if (err) {
    23c8:	2800      	cmp	r0, #0
    23ca:	d11c      	bne.n	2406 <hci_init+0x206>
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    23cc:	0028      	movs	r0, r5
	rp.cmds = (void *)rsp->data;
    23ce:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    23d0:	003a      	movs	r2, r7
    23d2:	6899      	ldr	r1, [r3, #8]
    23d4:	305f      	adds	r0, #95	; 0x5f
    23d6:	3101      	adds	r1, #1
    23d8:	f7fe f946 	bl	668 <memcpy>
	net_buf_unref(rsp);
    23dc:	9804      	ldr	r0, [sp, #16]
    23de:	f007 f903 	bl	95e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    23e2:	aa04      	add	r2, sp, #16
    23e4:	0021      	movs	r1, r4
    23e6:	485a      	ldr	r0, [pc, #360]	; (2550 <hci_init+0x350>)
    23e8:	f7ff fe44 	bl	2074 <bt_hci_cmd_send_sync>
	if (err) {
    23ec:	2800      	cmp	r0, #0
    23ee:	d10a      	bne.n	2406 <hci_init+0x206>
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    23f0:	0028      	movs	r0, r5
	rp.feat = (void *)rsp->data;
    23f2:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    23f4:	305e      	adds	r0, #94	; 0x5e
    23f6:	6899      	ldr	r1, [r3, #8]
    23f8:	2201      	movs	r2, #1
    23fa:	3101      	adds	r1, #1
    23fc:	f7fe f934 	bl	668 <memcpy>
	net_buf_unref(rsp);
    2400:	9804      	ldr	r0, [sp, #16]
    2402:	f007 f8f1 	bl	95e8 <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2406:	2207      	movs	r2, #7
    2408:	2100      	movs	r1, #0
    240a:	a802      	add	r0, sp, #8
    240c:	f7fe f956 	bl	6bc <memset>
	return memcmp(a, b, sizeof(*a));
    2410:	2207      	movs	r2, #7
    2412:	a902      	add	r1, sp, #8
    2414:	0028      	movs	r0, r5
    2416:	f7fe f914 	bl	642 <memcmp>
    241a:	2800      	cmp	r0, #0
    241c:	d157      	bne.n	24ce <hci_init+0x2ce>
	if (bt_storage) {
    241e:	4e4d      	ldr	r6, [pc, #308]	; (2554 <hci_init+0x354>)
    2420:	6833      	ldr	r3, [r6, #0]
    2422:	2b00      	cmp	r3, #0
    2424:	d160      	bne.n	24e8 <hci_init+0x2e8>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2426:	002b      	movs	r3, r5
    2428:	2401      	movs	r4, #1
    242a:	3360      	adds	r3, #96	; 0x60
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	4223      	tst	r3, r4
    2430:	d000      	beq.n	2434 <hci_init+0x234>
    2432:	e097      	b.n	2564 <hci_init+0x364>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2434:	0028      	movs	r0, r5
    2436:	f7ff fed2 	bl	21de <bt_addr_le_create_static>
    243a:	1e04      	subs	r4, r0, #0
	if (err) {
    243c:	d120      	bne.n	2480 <hci_init+0x280>
	if (bt_storage) {
    243e:	6833      	ldr	r3, [r6, #0]
    2440:	2b00      	cmp	r3, #0
    2442:	d05a      	beq.n	24fa <hci_init+0x2fa>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2444:	685e      	ldr	r6, [r3, #4]
    2446:	002a      	movs	r2, r5
    2448:	2307      	movs	r3, #7
    244a:	0001      	movs	r1, r0
    244c:	47b0      	blx	r6
    244e:	e054      	b.n	24fa <hci_init+0x2fa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2450:	2102      	movs	r1, #2
    2452:	4841      	ldr	r0, [pc, #260]	; (2558 <hci_init+0x358>)
    2454:	f7ff fdde 	bl	2014 <bt_hci_cmd_create>
    2458:	1e06      	subs	r6, r0, #0
		if (!buf) {
    245a:	d102      	bne.n	2462 <hci_init+0x262>
		return -ENOBUFS;
    245c:	2437      	movs	r4, #55	; 0x37
		return -ENODEV;
    245e:	4264      	negs	r4, r4
    2460:	e00e      	b.n	2480 <hci_init+0x280>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2462:	2102      	movs	r1, #2
    2464:	3008      	adds	r0, #8
    2466:	f007 f8f5 	bl	9654 <net_buf_simple_add>
		cp_le->le = 0x01;
    246a:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    246c:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    246e:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2470:	0022      	movs	r2, r4
    2472:	0031      	movs	r1, r6
    2474:	4838      	ldr	r0, [pc, #224]	; (2558 <hci_init+0x358>)
    2476:	f7ff fdfd 	bl	2074 <bt_hci_cmd_send_sync>
    247a:	1e04      	subs	r4, r0, #0
		if (err) {
    247c:	d100      	bne.n	2480 <hci_init+0x280>
    247e:	e74c      	b.n	231a <hci_init+0x11a>
	}

	show_dev_info();

	return 0;
}
    2480:	0020      	movs	r0, r4
    2482:	b007      	add	sp, #28
    2484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2486:	aa04      	add	r2, sp, #16
    2488:	2100      	movs	r1, #0
    248a:	4834      	ldr	r0, [pc, #208]	; (255c <hci_init+0x35c>)
    248c:	f7ff fdf2 	bl	2074 <bt_hci_cmd_send_sync>
    2490:	1e04      	subs	r4, r0, #0
		if (err) {
    2492:	d1f5      	bne.n	2480 <hci_init+0x280>
		le_read_supp_states_complete(rsp);
    2494:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2496:	6882      	ldr	r2, [r0, #8]
    2498:	1c53      	adds	r3, r2, #1
    249a:	7859      	ldrb	r1, [r3, #1]
    249c:	7852      	ldrb	r2, [r2, #1]
    249e:	0209      	lsls	r1, r1, #8
    24a0:	4311      	orrs	r1, r2
    24a2:	789a      	ldrb	r2, [r3, #2]
    24a4:	791c      	ldrb	r4, [r3, #4]
    24a6:	0412      	lsls	r2, r2, #16
    24a8:	4311      	orrs	r1, r2
    24aa:	78da      	ldrb	r2, [r3, #3]
    24ac:	0612      	lsls	r2, r2, #24
    24ae:	430a      	orrs	r2, r1
    24b0:	7959      	ldrb	r1, [r3, #5]
    24b2:	0209      	lsls	r1, r1, #8
    24b4:	430c      	orrs	r4, r1
    24b6:	7999      	ldrb	r1, [r3, #6]
    24b8:	79db      	ldrb	r3, [r3, #7]
    24ba:	0409      	lsls	r1, r1, #16
    24bc:	4321      	orrs	r1, r4
    24be:	061b      	lsls	r3, r3, #24
    24c0:	430b      	orrs	r3, r1
	bt_dev.le.states = sys_get_le64(rp->le_states);
    24c2:	0029      	movs	r1, r5
    24c4:	3180      	adds	r1, #128	; 0x80
    24c6:	c10c      	stmia	r1!, {r2, r3}
		net_buf_unref(rsp);
    24c8:	f007 f88e 	bl	95e8 <net_buf_unref>
    24cc:	e72b      	b.n	2326 <hci_init+0x126>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    24ce:	2207      	movs	r2, #7
    24d0:	4923      	ldr	r1, [pc, #140]	; (2560 <hci_init+0x360>)
    24d2:	a804      	add	r0, sp, #16
    24d4:	f7fe f8c8 	bl	668 <memcpy>
    24d8:	2207      	movs	r2, #7
    24da:	a904      	add	r1, sp, #16
    24dc:	0028      	movs	r0, r5
    24de:	f7fe f8b0 	bl	642 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    24e2:	2800      	cmp	r0, #0
    24e4:	d09b      	beq.n	241e <hci_init+0x21e>
    24e6:	e7cb      	b.n	2480 <hci_init+0x280>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    24e8:	2100      	movs	r1, #0
    24ea:	681c      	ldr	r4, [r3, #0]
    24ec:	002a      	movs	r2, r5
    24ee:	2307      	movs	r3, #7
    24f0:	0008      	movs	r0, r1
    24f2:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    24f4:	2807      	cmp	r0, #7
    24f6:	d000      	beq.n	24fa <hci_init+0x2fa>
    24f8:	e795      	b.n	2426 <hci_init+0x226>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    24fa:	782b      	ldrb	r3, [r5, #0]
    24fc:	2b01      	cmp	r3, #1
    24fe:	d14b      	bne.n	2598 <hci_init+0x398>
    2500:	223f      	movs	r2, #63	; 0x3f
    2502:	79ab      	ldrb	r3, [r5, #6]
    2504:	4393      	bics	r3, r2
    2506:	2bc0      	cmp	r3, #192	; 0xc0
    2508:	d146      	bne.n	2598 <hci_init+0x398>
	err = set_random_address(&bt_dev.id_addr.a);
    250a:	1c68      	adds	r0, r5, #1
    250c:	f7ff fdf4 	bl	20f8 <set_random_address>
    2510:	1e04      	subs	r4, r0, #0
	if (err) {
    2512:	d1b5      	bne.n	2480 <hci_init+0x280>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2514:	0028      	movs	r0, r5
    2516:	2104      	movs	r1, #4
    2518:	3070      	adds	r0, #112	; 0x70
    251a:	f008 f9af 	bl	a87c <atomic_or>
    251e:	e7af      	b.n	2480 <hci_init+0x280>
    2520:	00000c03 	.word	0x00000c03
    2524:	20002210 	.word	0x20002210
    2528:	200000ac 	.word	0x200000ac
    252c:	00001003 	.word	0x00001003
    2530:	00001001 	.word	0x00001001
    2534:	00001009 	.word	0x00001009
    2538:	00001002 	.word	0x00001002
    253c:	00002003 	.word	0x00002003
    2540:	00002001 	.word	0x00002001
    2544:	00000c01 	.word	0x00000c01
    2548:	0000fc01 	.word	0x0000fc01
    254c:	0000fc02 	.word	0x0000fc02
    2550:	0000fc03 	.word	0x0000fc03
    2554:	20000cd4 	.word	0x20000cd4
    2558:	00000c6d 	.word	0x00000c6d
    255c:	0000201c 	.word	0x0000201c
    2560:	0000ac30 	.word	0x0000ac30
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2564:	aa01      	add	r2, sp, #4
    2566:	2100      	movs	r1, #0
    2568:	480d      	ldr	r0, [pc, #52]	; (25a0 <hci_init+0x3a0>)
    256a:	f7ff fd83 	bl	2074 <bt_hci_cmd_send_sync>
		if (err) {
    256e:	2800      	cmp	r0, #0
    2570:	d000      	beq.n	2574 <hci_init+0x374>
    2572:	e75f      	b.n	2434 <hci_init+0x234>
		rp = (void *)rsp->data;
    2574:	9801      	ldr	r0, [sp, #4]
    2576:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    2578:	784b      	ldrb	r3, [r1, #1]
    257a:	2b00      	cmp	r3, #0
    257c:	d009      	beq.n	2592 <hci_init+0x392>
			bt_addr_copy(&bt_dev.id_addr.a, &rp->a[0].bdaddr);
    257e:	3102      	adds	r1, #2
	memcpy(dst, src, sizeof(*dst));
    2580:	1c68      	adds	r0, r5, #1
    2582:	2206      	movs	r2, #6
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2584:	702c      	strb	r4, [r5, #0]
    2586:	f7fe f86f 	bl	668 <memcpy>
			net_buf_unref(rsp);
    258a:	9801      	ldr	r0, [sp, #4]
    258c:	f007 f82c 	bl	95e8 <net_buf_unref>
    2590:	e7b3      	b.n	24fa <hci_init+0x2fa>
		net_buf_unref(rsp);
    2592:	f007 f829 	bl	95e8 <net_buf_unref>
    2596:	e74d      	b.n	2434 <hci_init+0x234>
		return -EINVAL;
    2598:	2416      	movs	r4, #22
    259a:	e760      	b.n	245e <hci_init+0x25e>
		return -ENODEV;
    259c:	2413      	movs	r4, #19
    259e:	e75e      	b.n	245e <hci_init+0x25e>
    25a0:	0000fc09 	.word	0x0000fc09

000025a4 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    25a4:	b510      	push	{r4, lr}
	err = hci_init();
    25a6:	f7ff fe2b 	bl	2200 <hci_init>
    25aa:	1e04      	subs	r4, r0, #0
	if (err) {
    25ac:	d107      	bne.n	25be <init_work+0x1a>
    25ae:	4807      	ldr	r0, [pc, #28]	; (25cc <init_work+0x28>)
    25b0:	2102      	movs	r1, #2
    25b2:	3070      	adds	r0, #112	; 0x70
    25b4:	f008 f962 	bl	a87c <atomic_or>
	bt_le_scan_update(false);
    25b8:	0020      	movs	r0, r4
    25ba:	f7ff fdff 	bl	21bc <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    25be:	4b04      	ldr	r3, [pc, #16]	; (25d0 <init_work+0x2c>)
    25c0:	681b      	ldr	r3, [r3, #0]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d001      	beq.n	25ca <init_work+0x26>
		ready_cb(err);
    25c6:	0020      	movs	r0, r4
    25c8:	4798      	blx	r3
	}
}
    25ca:	bd10      	pop	{r4, pc}
    25cc:	20002210 	.word	0x20002210
    25d0:	200000a8 	.word	0x200000a8

000025d4 <bt_recv>:
{
    25d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    25d6:	7d05      	ldrb	r5, [r0, #20]
{
    25d8:	b087      	sub	sp, #28
    25da:	0004      	movs	r4, r0
	switch (bt_buf_get_type(buf)) {
    25dc:	2d01      	cmp	r5, #1
    25de:	d13f      	bne.n	2660 <bt_recv+0x8c>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    25e0:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    25e2:	783b      	ldrb	r3, [r7, #0]
    25e4:	3b0e      	subs	r3, #14
    25e6:	2b01      	cmp	r3, #1
    25e8:	d83f      	bhi.n	266a <bt_recv+0x96>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    25ea:	b662      	cpsie	i
    25ec:	2004      	movs	r0, #4
    25ee:	df02      	svc	2
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    25f0:	2111      	movs	r1, #17
    25f2:	4f4a      	ldr	r7, [pc, #296]	; (271c <bt_recv+0x148>)
    25f4:	68a6      	ldr	r6, [r4, #8]
    25f6:	3770      	adds	r7, #112	; 0x70
    25f8:	4249      	negs	r1, r1
    25fa:	0038      	movs	r0, r7
    25fc:	f008 f949 	bl	a892 <atomic_and>
	if (!evt->status) {
    2600:	7833      	ldrb	r3, [r6, #0]
    2602:	2b00      	cmp	r3, #0
    2604:	d108      	bne.n	2618 <bt_recv+0x44>
		memcpy(pub_key, evt->key, 64);
    2606:	1c71      	adds	r1, r6, #1
    2608:	2240      	movs	r2, #64	; 0x40
    260a:	4845      	ldr	r0, [pc, #276]	; (2720 <bt_recv+0x14c>)
    260c:	f7fe f82c 	bl	668 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2610:	0029      	movs	r1, r5
    2612:	0038      	movs	r0, r7
    2614:	f008 f932 	bl	a87c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2618:	4b42      	ldr	r3, [pc, #264]	; (2724 <bt_recv+0x150>)
    261a:	681d      	ldr	r5, [r3, #0]
    261c:	2d00      	cmp	r5, #0
    261e:	d105      	bne.n	262c <bt_recv+0x58>
	net_buf_unref(buf);
    2620:	0020      	movs	r0, r4
    2622:	f006 ffe1 	bl	95e8 <net_buf_unref>
		return 0;
    2626:	2000      	movs	r0, #0
}
    2628:	b007      	add	sp, #28
    262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : evt->key);
    262c:	2000      	movs	r0, #0
    262e:	7832      	ldrb	r2, [r6, #0]
    2630:	682b      	ldr	r3, [r5, #0]
    2632:	4282      	cmp	r2, r0
    2634:	d100      	bne.n	2638 <bt_recv+0x64>
    2636:	1c70      	adds	r0, r6, #1
    2638:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    263a:	686d      	ldr	r5, [r5, #4]
    263c:	e7ee      	b.n	261c <bt_recv+0x48>
	if (dh_key_cb) {
    263e:	4d3a      	ldr	r5, [pc, #232]	; (2728 <bt_recv+0x154>)
    2640:	68a2      	ldr	r2, [r4, #8]
    2642:	682b      	ldr	r3, [r5, #0]
    2644:	2b00      	cmp	r3, #0
    2646:	d0eb      	beq.n	2620 <bt_recv+0x4c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2648:	2000      	movs	r0, #0
    264a:	7811      	ldrb	r1, [r2, #0]
    264c:	4281      	cmp	r1, r0
    264e:	d100      	bne.n	2652 <bt_recv+0x7e>
    2650:	1c50      	adds	r0, r2, #1
    2652:	4798      	blx	r3
		dh_key_cb = NULL;
    2654:	2300      	movs	r3, #0
    2656:	602b      	str	r3, [r5, #0]
    2658:	e7e2      	b.n	2620 <bt_recv+0x4c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    265a:	f7fe f805 	bl	668 <memcpy>
    265e:	e037      	b.n	26d0 <bt_recv+0xfc>
		net_buf_unref(buf);
    2660:	f006 ffc2 	bl	95e8 <net_buf_unref>
		return -EINVAL;
    2664:	2016      	movs	r0, #22
    2666:	4240      	negs	r0, r0
    2668:	e7de      	b.n	2628 <bt_recv+0x54>
	net_buf_pull(buf, sizeof(*hdr));
    266a:	0006      	movs	r6, r0
    266c:	3608      	adds	r6, #8
    266e:	2102      	movs	r1, #2
    2670:	0030      	movs	r0, r6
    2672:	f007 f800 	bl	9676 <net_buf_simple_pull>
	switch (hdr->evt) {
    2676:	783b      	ldrb	r3, [r7, #0]
    2678:	2b3e      	cmp	r3, #62	; 0x3e
    267a:	d1d1      	bne.n	2620 <bt_recv+0x4c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    267c:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    267e:	0029      	movs	r1, r5
    2680:	0030      	movs	r0, r6
    2682:	f006 fff8 	bl	9676 <net_buf_simple_pull>
	switch (evt->subevent) {
    2686:	783d      	ldrb	r5, [r7, #0]
    2688:	2d08      	cmp	r5, #8
    268a:	d0b1      	beq.n	25f0 <bt_recv+0x1c>
    268c:	2d09      	cmp	r5, #9
    268e:	d0d6      	beq.n	263e <bt_recv+0x6a>
    2690:	2d02      	cmp	r5, #2
    2692:	d1c5      	bne.n	2620 <bt_recv+0x4c>
	u8_t num_reports = net_buf_pull_u8(buf);
    2694:	0030      	movs	r0, r6
    2696:	f006 fff6 	bl	9686 <net_buf_simple_pull_u8>
    269a:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    269c:	9b00      	ldr	r3, [sp, #0]
    269e:	2b00      	cmp	r3, #0
    26a0:	d0be      	beq.n	2620 <bt_recv+0x4c>
		info = (void *)buf->data;
    26a2:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    26a4:	2109      	movs	r1, #9
    26a6:	0030      	movs	r0, r6
    26a8:	f006 ffe5 	bl	9676 <net_buf_simple_pull>
		rssi = info->data[info->length];
    26ac:	7a2b      	ldrb	r3, [r5, #8]
    26ae:	1c69      	adds	r1, r5, #1
    26b0:	18eb      	adds	r3, r5, r3
    26b2:	7a5b      	ldrb	r3, [r3, #9]
    26b4:	2207      	movs	r2, #7
    26b6:	9301      	str	r3, [sp, #4]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    26b8:	786b      	ldrb	r3, [r5, #1]
    26ba:	a804      	add	r0, sp, #16
    26bc:	3b02      	subs	r3, #2
    26be:	2b01      	cmp	r3, #1
    26c0:	d8cb      	bhi.n	265a <bt_recv+0x86>
    26c2:	f7fd ffd1 	bl	668 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    26c6:	ab04      	add	r3, sp, #16
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	aa04      	add	r2, sp, #16
    26cc:	3b02      	subs	r3, #2
    26ce:	7013      	strb	r3, [r2, #0]
		if (scan_dev_found_cb) {
    26d0:	4f16      	ldr	r7, [pc, #88]	; (272c <bt_recv+0x158>)
    26d2:	683b      	ldr	r3, [r7, #0]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d017      	beq.n	2708 <bt_recv+0x134>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    26d8:	0030      	movs	r0, r6
    26da:	f006 ffdc 	bl	9696 <net_buf_simple_headroom>
	state->len = buf->len;
    26de:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    26e0:	9002      	str	r0, [sp, #8]
	state->len = buf->len;
    26e2:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    26e4:	7a2b      	ldrb	r3, [r5, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    26e6:	2104      	movs	r1, #4
			buf->len = info->length;
    26e8:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    26ea:	466b      	mov	r3, sp
    26ec:	782a      	ldrb	r2, [r5, #0]
    26ee:	5659      	ldrsb	r1, [r3, r1]
    26f0:	683f      	ldr	r7, [r7, #0]
    26f2:	0033      	movs	r3, r6
    26f4:	a804      	add	r0, sp, #16
    26f6:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    26f8:	466b      	mov	r3, sp
    26fa:	6922      	ldr	r2, [r4, #16]
    26fc:	891b      	ldrh	r3, [r3, #8]
    26fe:	18d3      	adds	r3, r2, r3
    2700:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    2702:	466b      	mov	r3, sp
    2704:	899b      	ldrh	r3, [r3, #12]
    2706:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2708:	7a29      	ldrb	r1, [r5, #8]
    270a:	0030      	movs	r0, r6
    270c:	3101      	adds	r1, #1
    270e:	f006 ffb2 	bl	9676 <net_buf_simple_pull>
    2712:	9b00      	ldr	r3, [sp, #0]
    2714:	3b01      	subs	r3, #1
    2716:	b2db      	uxtb	r3, r3
    2718:	9300      	str	r3, [sp, #0]
    271a:	e7bf      	b.n	269c <bt_recv+0xc8>
    271c:	20002210 	.word	0x20002210
    2720:	20000064 	.word	0x20000064
    2724:	200000a4 	.word	0x200000a4
    2728:	20000060 	.word	0x20000060
    272c:	200000ac 	.word	0x200000ac

00002730 <bt_recv_prio>:
{
    2730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2732:	7d03      	ldrb	r3, [r0, #20]
{
    2734:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2736:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2738:	2b01      	cmp	r3, #1
    273a:	d002      	beq.n	2742 <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    273c:	b662      	cpsie	i
    273e:	2004      	movs	r0, #4
    2740:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2742:	8983      	ldrh	r3, [r0, #12]
    2744:	2b01      	cmp	r3, #1
    2746:	d9f9      	bls.n	273c <bt_recv_prio+0xc>
    2748:	7833      	ldrb	r3, [r6, #0]
    274a:	3b0e      	subs	r3, #14
    274c:	2b01      	cmp	r3, #1
    274e:	d8f5      	bhi.n	273c <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    2750:	0005      	movs	r5, r0
    2752:	3508      	adds	r5, #8
    2754:	2102      	movs	r1, #2
    2756:	0028      	movs	r0, r5
    2758:	f006 ff8d 	bl	9676 <net_buf_simple_pull>
	switch (hdr->evt) {
    275c:	7833      	ldrb	r3, [r6, #0]
    275e:	2b0e      	cmp	r3, #14
    2760:	d005      	beq.n	276e <bt_recv_prio+0x3e>
    2762:	2b0f      	cmp	r3, #15
    2764:	d019      	beq.n	279a <bt_recv_prio+0x6a>
		net_buf_unref(buf);
    2766:	0020      	movs	r0, r4
    2768:	f006 ff3e 	bl	95e8 <net_buf_unref>
    276c:	e7e6      	b.n	273c <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    276e:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2770:	2103      	movs	r1, #3
    2772:	0028      	movs	r0, r5
	u8_t status, ncmd = evt->ncmd;
    2774:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2776:	f006 ff7e 	bl	9676 <net_buf_simple_pull>
	hci_cmd_done(opcode, status, buf);
    277a:	68a3      	ldr	r3, [r4, #8]
    277c:	0021      	movs	r1, r4
    277e:	7818      	ldrb	r0, [r3, #0]
    2780:	f7ff fc0e 	bl	1fa0 <hci_cmd_done.isra.9>
	if (ncmd) {
    2784:	2e00      	cmp	r6, #0
    2786:	d003      	beq.n	2790 <bt_recv_prio+0x60>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2788:	480a      	ldr	r0, [pc, #40]	; (27b4 <bt_recv_prio+0x84>)
    278a:	3088      	adds	r0, #136	; 0x88
    278c:	f007 fc7c 	bl	a088 <_impl_k_sem_give>
	net_buf_unref(buf);
    2790:	0020      	movs	r0, r4
    2792:	f006 ff29 	bl	95e8 <net_buf_unref>
}
    2796:	2000      	movs	r0, #0
    2798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    279a:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    279c:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    279e:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    27a0:	0028      	movs	r0, r5
    27a2:	f006 ff68 	bl	9676 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    27a6:	7830      	ldrb	r0, [r6, #0]
    27a8:	0021      	movs	r1, r4
    27aa:	f7ff fbf9 	bl	1fa0 <hci_cmd_done.isra.9>
	if (ncmd) {
    27ae:	2f00      	cmp	r7, #0
    27b0:	d0ee      	beq.n	2790 <bt_recv_prio+0x60>
    27b2:	e7e9      	b.n	2788 <bt_recv_prio+0x58>
    27b4:	20002210 	.word	0x20002210

000027b8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    27b8:	4a09      	ldr	r2, [pc, #36]	; (27e0 <bt_hci_driver_register+0x28>)
    27ba:	32c4      	adds	r2, #196	; 0xc4
    27bc:	6813      	ldr	r3, [r2, #0]
    27be:	2b00      	cmp	r3, #0
    27c0:	d108      	bne.n	27d4 <bt_hci_driver_register+0x1c>
	if (!drv->open || !drv->send) {
    27c2:	6881      	ldr	r1, [r0, #8]
    27c4:	2900      	cmp	r1, #0
    27c6:	d008      	beq.n	27da <bt_hci_driver_register+0x22>
    27c8:	68c1      	ldr	r1, [r0, #12]
    27ca:	2900      	cmp	r1, #0
    27cc:	d005      	beq.n	27da <bt_hci_driver_register+0x22>
	bt_dev.drv = drv;
    27ce:	6010      	str	r0, [r2, #0]
	return 0;
    27d0:	0018      	movs	r0, r3
}
    27d2:	4770      	bx	lr
		return -EALREADY;
    27d4:	2045      	movs	r0, #69	; 0x45
		return -EINVAL;
    27d6:	4240      	negs	r0, r0
    27d8:	e7fb      	b.n	27d2 <bt_hci_driver_register+0x1a>
    27da:	2016      	movs	r0, #22
    27dc:	e7fb      	b.n	27d6 <bt_hci_driver_register+0x1e>
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	20002210 	.word	0x20002210

000027e4 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    27e8:	4805      	ldr	r0, [pc, #20]	; (2800 <bt_buf_get_rx+0x1c>)
    27ea:	f006 fee3 	bl	95b4 <net_buf_alloc_fixed>
    27ee:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    27f0:	d004      	beq.n	27fc <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    27f2:	2100      	movs	r1, #0
    27f4:	3008      	adds	r0, #8
    27f6:	f006 fee5 	bl	95c4 <net_buf_simple_reserve>
    27fa:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    27fc:	0020      	movs	r0, r4
    27fe:	bd70      	pop	{r4, r5, r6, pc}
    2800:	2000252c 	.word	0x2000252c

00002804 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2804:	b510      	push	{r4, lr}
    2806:	0001      	movs	r1, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    2808:	f3ef 8210 	mrs	r2, PRIMASK
    280c:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    280e:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    2810:	4b0b      	ldr	r3, [pc, #44]	; (2840 <bt_buf_get_cmd_complete+0x3c>)
    2812:	33a0      	adds	r3, #160	; 0xa0
    2814:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    2816:	6018      	str	r0, [r3, #0]
	if (key) {
    2818:	4282      	cmp	r2, r0
    281a:	d100      	bne.n	281e <bt_buf_get_cmd_complete+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    281c:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    281e:	2c00      	cmp	r4, #0
    2820:	d009      	beq.n	2836 <bt_buf_get_cmd_complete+0x32>
    2822:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    2824:	2100      	movs	r1, #0
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2826:	0020      	movs	r0, r4
    2828:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    282a:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    282c:	3008      	adds	r0, #8
    282e:	f006 fec9 	bl	95c4 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    2832:	0020      	movs	r0, r4
    2834:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2836:	2001      	movs	r0, #1
    2838:	f7ff ffd4 	bl	27e4 <bt_buf_get_rx>
    283c:	0004      	movs	r4, r0
    283e:	e7f8      	b.n	2832 <bt_buf_get_cmd_complete+0x2e>
    2840:	20002210 	.word	0x20002210

00002844 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2844:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2846:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2848:	2203      	movs	r2, #3
{
    284a:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    284c:	6018      	str	r0, [r3, #0]
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    284e:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2850:	1e60      	subs	r0, r4, #1
    2852:	b280      	uxth	r0, r0
    2854:	4348      	muls	r0, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2856:	4393      	bics	r3, r2
    2858:	801c      	strh	r4, [r3, #0]
{
    285a:	000e      	movs	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    285c:	1828      	adds	r0, r5, r0
    285e:	3201      	adds	r2, #1
    2860:	2100      	movs	r1, #0
    2862:	f7fd ff2b 	bl	6bc <memset>
    2866:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    2868:	4b08      	ldr	r3, [pc, #32]	; (288c <mem_init+0x48>)
    286a:	b2a4      	uxth	r4, r4
    286c:	429c      	cmp	r4, r3
    286e:	d100      	bne.n	2872 <mem_init+0x2e>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    2870:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			       (mem_size * (mem_count + 1)));
    2872:	1c60      	adds	r0, r4, #1
    2874:	4370      	muls	r0, r6
		next = (u32_t)((u8_t *) mem_pool +
    2876:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2878:	1b80      	subs	r0, r0, r6
    287a:	1828      	adds	r0, r5, r0
    287c:	2204      	movs	r2, #4
    287e:	a901      	add	r1, sp, #4
		next = (u32_t)((u8_t *) mem_pool +
    2880:	9301      	str	r3, [sp, #4]
    2882:	3c01      	subs	r4, #1
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2884:	f7fd fef0 	bl	668 <memcpy>
    2888:	e7ee      	b.n	2868 <mem_init+0x24>
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	0000ffff 	.word	0x0000ffff

00002890 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    2892:	6805      	ldr	r5, [r0, #0]
{
    2894:	0006      	movs	r6, r0
	if (*mem_head) {
    2896:	2d00      	cmp	r5, #0
    2898:	d011      	beq.n	28be <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    289a:	2703      	movs	r7, #3
    289c:	1deb      	adds	r3, r5, #7
    289e:	43bb      	bics	r3, r7
    28a0:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    28a2:	2204      	movs	r2, #4
    28a4:	0029      	movs	r1, r5
    28a6:	a801      	add	r0, sp, #4
    28a8:	f7fd fede 	bl	668 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    28ac:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    28ae:	3c01      	subs	r4, #1
    28b0:	b2a4      	uxth	r4, r4
		if (head) {
    28b2:	2b00      	cmp	r3, #0
    28b4:	d002      	beq.n	28bc <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    28b6:	1dda      	adds	r2, r3, #7
    28b8:	43ba      	bics	r2, r7
    28ba:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    28bc:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    28be:	0028      	movs	r0, r5
    28c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000028c2 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    28c2:	680b      	ldr	r3, [r1, #0]
{
    28c4:	b570      	push	{r4, r5, r6, lr}
    28c6:	0005      	movs	r5, r0
    28c8:	000c      	movs	r4, r1
	u16_t free_count = 0;
    28ca:	1e1e      	subs	r6, r3, #0
	if (*mem_head) {
    28cc:	d003      	beq.n	28d6 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    28ce:	2203      	movs	r2, #3
    28d0:	3307      	adds	r3, #7
    28d2:	4393      	bics	r3, r2
    28d4:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    28d6:	0028      	movs	r0, r5
    28d8:	2204      	movs	r2, #4
    28da:	0021      	movs	r1, r4
    28dc:	f7fd fec4 	bl	668 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    28e0:	2203      	movs	r2, #3
    28e2:	1deb      	adds	r3, r5, #7
	free_count++;
    28e4:	3601      	adds	r6, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    28e6:	4393      	bics	r3, r2
    28e8:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    28ea:	6025      	str	r5, [r4, #0]
}
    28ec:	bd70      	pop	{r4, r5, r6, pc}

000028ee <mem_get>:
	return free_count;
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    28ee:	434a      	muls	r2, r1
    28f0:	1880      	adds	r0, r0, r2
}
    28f2:	4770      	bx	lr

000028f4 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    28f4:	1a40      	subs	r0, r0, r1
{
    28f6:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    28f8:	b280      	uxth	r0, r0
    28fa:	0011      	movs	r1, r2
    28fc:	f7fd fc64 	bl	1c8 <__aeabi_uidiv>
    2900:	b280      	uxth	r0, r0
}
    2902:	bd10      	pop	{r4, pc}

00002904 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2904:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    2906:	4b06      	ldr	r3, [pc, #24]	; (2920 <mem_rcopy+0x1c>)
	src += len;
    2908:	1889      	adds	r1, r1, r2
	while (len--) {
    290a:	3a01      	subs	r2, #1
    290c:	b292      	uxth	r2, r2
    290e:	429a      	cmp	r2, r3
    2910:	d100      	bne.n	2914 <mem_rcopy+0x10>
		*dst++ = *--src;
	}
}
    2912:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    2914:	3901      	subs	r1, #1
    2916:	780c      	ldrb	r4, [r1, #0]
    2918:	7004      	strb	r4, [r0, #0]
    291a:	3001      	adds	r0, #1
    291c:	e7f5      	b.n	290a <mem_rcopy+0x6>
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	0000ffff 	.word	0x0000ffff

00002924 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2924:	6010      	str	r0, [r2, #0]
    2926:	6008      	str	r0, [r1, #0]

	return link;
}
    2928:	4770      	bx	lr

0000292a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    292a:	6813      	ldr	r3, [r2, #0]
    292c:	6018      	str	r0, [r3, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    292e:	6813      	ldr	r3, [r2, #0]
    2930:	6059      	str	r1, [r3, #4]

	/* increment the tail! */
	*tail = link;
    2932:	6010      	str	r0, [r2, #0]

	return link;
}
    2934:	4770      	bx	lr

00002936 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2936:	4288      	cmp	r0, r1
    2938:	d004      	beq.n	2944 <memq_peek+0xe>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    293a:	2a00      	cmp	r2, #0
    293c:	d001      	beq.n	2942 <memq_peek+0xc>
		*mem = head->mem;
    293e:	6843      	ldr	r3, [r0, #4]
    2940:	6013      	str	r3, [r2, #0]
	}

	return head;
}
    2942:	4770      	bx	lr
		return NULL;
    2944:	2000      	movs	r0, #0
    2946:	e7fc      	b.n	2942 <memq_peek+0xc>

00002948 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    2948:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    294a:	4283      	cmp	r3, r0
    294c:	d00a      	beq.n	2964 <memq_dequeue+0x1c>
	if (mem) {
    294e:	2a00      	cmp	r2, #0
    2950:	d004      	beq.n	295c <memq_dequeue+0x14>
		*mem = head->mem;
    2952:	6858      	ldr	r0, [r3, #4]
    2954:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    2956:	681a      	ldr	r2, [r3, #0]
    2958:	600a      	str	r2, [r1, #0]

	return link;
    295a:	e001      	b.n	2960 <memq_dequeue+0x18>
	if (!link) {
    295c:	2b00      	cmp	r3, #0
    295e:	d1fa      	bne.n	2956 <memq_dequeue+0xe>
}
    2960:	0018      	movs	r0, r3
    2962:	4770      	bx	lr
		return NULL;
    2964:	2300      	movs	r3, #0
    2966:	e7fb      	b.n	2960 <memq_dequeue+0x18>

00002968 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    2968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    296a:	2404      	movs	r4, #4
    296c:	2630      	movs	r6, #48	; 0x30
	while (callee_id--) {
    296e:	3c01      	subs	r4, #1
    2970:	b2e4      	uxtb	r4, r4
    2972:	2cff      	cmp	r4, #255	; 0xff
    2974:	d018      	beq.n	29a8 <mayfly_init+0x40>
    2976:	0033      	movs	r3, r6
    2978:	4363      	muls	r3, r4
    297a:	00a7      	lsls	r7, r4, #2
    297c:	9301      	str	r3, [sp, #4]
    297e:	2504      	movs	r5, #4
    2980:	e00d      	b.n	299e <mayfly_init+0x36>
    2982:	210c      	movs	r1, #12
    2984:	4369      	muls	r1, r5
    2986:	9b01      	ldr	r3, [sp, #4]
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    2988:	4808      	ldr	r0, [pc, #32]	; (29ac <mayfly_init+0x44>)
    298a:	18c9      	adds	r1, r1, r3
    298c:	4b08      	ldr	r3, [pc, #32]	; (29b0 <mayfly_init+0x48>)
    298e:	1d0a      	adds	r2, r1, #4
    2990:	189a      	adds	r2, r3, r2
    2992:	1859      	adds	r1, r3, r1
    2994:	197b      	adds	r3, r7, r5
    2996:	00db      	lsls	r3, r3, #3
    2998:	18c0      	adds	r0, r0, r3
    299a:	f7ff ffc3 	bl	2924 <memq_init>
		while (caller_id--) {
    299e:	3d01      	subs	r5, #1
    29a0:	b2ed      	uxtb	r5, r5
    29a2:	2dff      	cmp	r5, #255	; 0xff
    29a4:	d1ed      	bne.n	2982 <mayfly_init+0x1a>
    29a6:	e7e2      	b.n	296e <mayfly_init+0x6>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    29a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	200000b0 	.word	0x200000b0
    29b0:	20000130 	.word	0x20000130

000029b4 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    29b4:	b570      	push	{r4, r5, r6, lr}
    29b6:	4d10      	ldr	r5, [pc, #64]	; (29f8 <mayfly_enable+0x44>)
    29b8:	240c      	movs	r4, #12
    29ba:	2630      	movs	r6, #48	; 0x30
	if (enable) {
    29bc:	2a00      	cmp	r2, #0
    29be:	d00d      	beq.n	29dc <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    29c0:	0023      	movs	r3, r4
    29c2:	434e      	muls	r6, r1
    29c4:	4343      	muls	r3, r0
    29c6:	199b      	adds	r3, r3, r6
    29c8:	18eb      	adds	r3, r5, r3
    29ca:	7a1d      	ldrb	r5, [r3, #8]
    29cc:	7a5c      	ldrb	r4, [r3, #9]
    29ce:	42ac      	cmp	r4, r5
    29d0:	d101      	bne.n	29d6 <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    29d2:	3401      	adds	r4, #1
    29d4:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    29d6:	f006 fccf 	bl	9378 <mayfly_enable_cb>
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    29da:	bd70      	pop	{r4, r5, r6, pc}
		if (mft[callee_id][caller_id].disable_req ==
    29dc:	4344      	muls	r4, r0
    29de:	434e      	muls	r6, r1
    29e0:	19a4      	adds	r4, r4, r6
    29e2:	192c      	adds	r4, r5, r4
    29e4:	7aa2      	ldrb	r2, [r4, #10]
    29e6:	7ae3      	ldrb	r3, [r4, #11]
    29e8:	4293      	cmp	r3, r2
    29ea:	d1f6      	bne.n	29da <mayfly_enable+0x26>
			mft[callee_id][caller_id].disable_req++;
    29ec:	3301      	adds	r3, #1
    29ee:	72a3      	strb	r3, [r4, #10]
			mayfly_pend(caller_id, callee_id);
    29f0:	f006 fcee 	bl	93d0 <mayfly_pend>
}
    29f4:	e7f1      	b.n	29da <mayfly_enable+0x26>
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	20000130 	.word	0x20000130

000029fc <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    29fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29fe:	0006      	movs	r6, r0
    2a00:	000f      	movs	r7, r1
    2a02:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2a04:	2a00      	cmp	r2, #0
    2a06:	d014      	beq.n	2a32 <mayfly_enqueue+0x36>
    2a08:	2101      	movs	r1, #1

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    2a0a:	2203      	movs	r2, #3
	ack = m->_ack;
    2a0c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    2a0e:	7825      	ldrb	r5, [r4, #0]
    2a10:	1aed      	subs	r5, r5, r3
    2a12:	4015      	ands	r5, r2
	if (state != 0) {
    2a14:	d02b      	beq.n	2a6e <mayfly_enqueue+0x72>
		if (chain) {
    2a16:	2900      	cmp	r1, #0
    2a18:	d022      	beq.n	2a60 <mayfly_enqueue+0x64>

				return 0;
			}

			/* already ready */
			return 1;
    2a1a:	2001      	movs	r0, #1
			if (state != 1) {
    2a1c:	4285      	cmp	r5, r0
    2a1e:	d007      	beq.n	2a30 <mayfly_enqueue+0x34>
				m->_req = ack + 1;
    2a20:	181b      	adds	r3, r3, r0
    2a22:	b2db      	uxtb	r3, r3
    2a24:	7023      	strb	r3, [r4, #0]
				mayfly_pend(caller_id, callee_id);
    2a26:	0039      	movs	r1, r7
    2a28:	0030      	movs	r0, r6
    2a2a:	f006 fcd1 	bl	93d0 <mayfly_pend>
	/* handle mayfly(s) that can be inline */
	if (!chain) {
		/* call fp */
		m->fp(m->param);

		return 0;
    2a2e:	2000      	movs	r0, #0

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
    2a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2a32:	f006 fcbe 	bl	93b2 <mayfly_prio_is_equal>
    2a36:	2800      	cmp	r0, #0
    2a38:	d0e6      	beq.n	2a08 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2a3a:	0039      	movs	r1, r7
    2a3c:	0030      	movs	r0, r6
    2a3e:	f006 fcaa 	bl	9396 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2a42:	2800      	cmp	r0, #0
    2a44:	d0e0      	beq.n	2a08 <mayfly_enqueue+0xc>
		(mft[callee_id][caller_id].disable_req !=
    2a46:	230c      	movs	r3, #12
    2a48:	2230      	movs	r2, #48	; 0x30
    2a4a:	4373      	muls	r3, r6
    2a4c:	437a      	muls	r2, r7
    2a4e:	189b      	adds	r3, r3, r2
    2a50:	4a12      	ldr	r2, [pc, #72]	; (2a9c <mayfly_enqueue+0xa0>)
    2a52:	18d3      	adds	r3, r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    2a54:	7a9a      	ldrb	r2, [r3, #10]
    2a56:	7ad9      	ldrb	r1, [r3, #11]
    2a58:	1a51      	subs	r1, r2, r1
    2a5a:	1e4a      	subs	r2, r1, #1
    2a5c:	4191      	sbcs	r1, r2
    2a5e:	e7d4      	b.n	2a0a <mayfly_enqueue+0xe>
		m->_req = ack + 2;
    2a60:	3302      	adds	r3, #2
    2a62:	b2db      	uxtb	r3, r3
    2a64:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    2a66:	68e3      	ldr	r3, [r4, #12]
    2a68:	68a0      	ldr	r0, [r4, #8]
    2a6a:	4798      	blx	r3
    2a6c:	e7df      	b.n	2a2e <mayfly_enqueue+0x32>
	if (!chain) {
    2a6e:	2900      	cmp	r1, #0
    2a70:	d0f9      	beq.n	2a66 <mayfly_enqueue+0x6a>
	m->_req = ack + 1;
    2a72:	3301      	adds	r3, #1
    2a74:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    2a76:	2230      	movs	r2, #48	; 0x30
	m->_req = ack + 1;
    2a78:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    2a7a:	230c      	movs	r3, #12
    2a7c:	437a      	muls	r2, r7
    2a7e:	4373      	muls	r3, r6
    2a80:	3204      	adds	r2, #4
    2a82:	18d2      	adds	r2, r2, r3
    2a84:	4b05      	ldr	r3, [pc, #20]	; (2a9c <mayfly_enqueue+0xa0>)
    2a86:	0021      	movs	r1, r4
    2a88:	189a      	adds	r2, r3, r2
    2a8a:	6860      	ldr	r0, [r4, #4]
    2a8c:	f7ff ff4d 	bl	292a <memq_enqueue>
	mayfly_pend(caller_id, callee_id);
    2a90:	0030      	movs	r0, r6
    2a92:	0039      	movs	r1, r7
    2a94:	f006 fc9c 	bl	93d0 <mayfly_pend>
	return 0;
    2a98:	0028      	movs	r0, r5
    2a9a:	e7c9      	b.n	2a30 <mayfly_enqueue+0x34>
    2a9c:	20000130 	.word	0x20000130

00002aa0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    2aa0:	2330      	movs	r3, #48	; 0x30
    2aa2:	001a      	movs	r2, r3
    2aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa6:	4342      	muls	r2, r0
    2aa8:	b089      	sub	sp, #36	; 0x24
    2aaa:	9205      	str	r2, [sp, #20]
	u8_t disable = 0;
	u8_t enable = 0;
    2aac:	2200      	movs	r2, #0
{
    2aae:	0004      	movs	r4, r0
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    2ab0:	2604      	movs	r6, #4
	u8_t enable = 0;
    2ab2:	9202      	str	r2, [sp, #8]
	u8_t disable = 0;
    2ab4:	9203      	str	r2, [sp, #12]
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2ab6:	9300      	str	r3, [sp, #0]
	while (caller_id--) {
    2ab8:	3e01      	subs	r6, #1
    2aba:	b2f6      	uxtb	r6, r6
    2abc:	2eff      	cmp	r6, #255	; 0xff
    2abe:	d10b      	bne.n	2ad8 <mayfly_run+0x38>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2ac0:	9b03      	ldr	r3, [sp, #12]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d077      	beq.n	2bb6 <mayfly_run+0x116>
    2ac6:	9b02      	ldr	r3, [sp, #8]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d174      	bne.n	2bb6 <mayfly_run+0x116>
		mayfly_enable_cb(callee_id, callee_id, 0);
    2acc:	001a      	movs	r2, r3
    2ace:	0021      	movs	r1, r4
    2ad0:	0020      	movs	r0, r4
    2ad2:	f006 fc51 	bl	9378 <mayfly_enable_cb>
    2ad6:	e06e      	b.n	2bb6 <mayfly_run+0x116>
		struct mayfly *m = 0;
    2ad8:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    2ada:	250c      	movs	r5, #12
		struct mayfly *m = 0;
    2adc:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    2ade:	9b00      	ldr	r3, [sp, #0]
    2ae0:	4375      	muls	r5, r6
    2ae2:	4363      	muls	r3, r4
    2ae4:	4f35      	ldr	r7, [pc, #212]	; (2bbc <mayfly_run+0x11c>)
    2ae6:	18eb      	adds	r3, r5, r3
    2ae8:	18f9      	adds	r1, r7, r3
    2aea:	59d8      	ldr	r0, [r3, r7]
    2aec:	aa07      	add	r2, sp, #28
    2aee:	6849      	ldr	r1, [r1, #4]
    2af0:	f7ff ff21 	bl	2936 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2af4:	9b05      	ldr	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    2af6:	9001      	str	r0, [sp, #4]
				memq_dequeue(mft[callee_id][caller_id].tail,
    2af8:	18ed      	adds	r5, r5, r3
    2afa:	197b      	adds	r3, r7, r5
    2afc:	9304      	str	r3, [sp, #16]
		while (link) {
    2afe:	9b01      	ldr	r3, [sp, #4]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d11b      	bne.n	2b3c <mayfly_run+0x9c>
		if (mft[callee_id][caller_id].disable_req !=
    2b04:	230c      	movs	r3, #12
    2b06:	9900      	ldr	r1, [sp, #0]
    2b08:	4373      	muls	r3, r6
    2b0a:	4361      	muls	r1, r4
    2b0c:	4a2b      	ldr	r2, [pc, #172]	; (2bbc <mayfly_run+0x11c>)
    2b0e:	185b      	adds	r3, r3, r1
    2b10:	18d3      	adds	r3, r2, r3
    2b12:	7a99      	ldrb	r1, [r3, #10]
    2b14:	7ad8      	ldrb	r0, [r3, #11]
    2b16:	4288      	cmp	r0, r1
    2b18:	d002      	beq.n	2b20 <mayfly_run+0x80>
			mft[callee_id][caller_id].disable_ack =
    2b1a:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    2b1c:	2301      	movs	r3, #1
    2b1e:	9303      	str	r3, [sp, #12]
		if (mft[callee_id][caller_id].enable_req !=
    2b20:	230c      	movs	r3, #12
    2b22:	9900      	ldr	r1, [sp, #0]
    2b24:	4373      	muls	r3, r6
    2b26:	4361      	muls	r1, r4
    2b28:	185b      	adds	r3, r3, r1
    2b2a:	18d3      	adds	r3, r2, r3
    2b2c:	7a1a      	ldrb	r2, [r3, #8]
    2b2e:	7a59      	ldrb	r1, [r3, #9]
    2b30:	4291      	cmp	r1, r2
    2b32:	d0c1      	beq.n	2ab8 <mayfly_run+0x18>
			mft[callee_id][caller_id].enable_ack =
    2b34:	725a      	strb	r2, [r3, #9]
			enable = 1;
    2b36:	2301      	movs	r3, #1
    2b38:	9302      	str	r3, [sp, #8]
    2b3a:	e7bd      	b.n	2ab8 <mayfly_run+0x18>
			state = (req - m->_ack) & 0x03;
    2b3c:	2103      	movs	r1, #3
			req = m->_req;
    2b3e:	9b07      	ldr	r3, [sp, #28]
    2b40:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2b42:	785a      	ldrb	r2, [r3, #1]
    2b44:	1abf      	subs	r7, r7, r2
    2b46:	400f      	ands	r7, r1
			if (state == 1) {
    2b48:	2f01      	cmp	r7, #1
    2b4a:	d104      	bne.n	2b56 <mayfly_run+0xb6>
				m->_ack--;
    2b4c:	3a01      	subs	r2, #1
    2b4e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    2b50:	6898      	ldr	r0, [r3, #8]
    2b52:	68da      	ldr	r2, [r3, #12]
    2b54:	4790      	blx	r2
			if (((req - m->_ack) & 0x03) != 1) {
    2b56:	2203      	movs	r2, #3
			req = m->_req;
    2b58:	9b07      	ldr	r3, [sp, #28]
    2b5a:	781d      	ldrb	r5, [r3, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2b5c:	785b      	ldrb	r3, [r3, #1]
			req = m->_req;
    2b5e:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    2b60:	1aeb      	subs	r3, r5, r3
    2b62:	4013      	ands	r3, r2
    2b64:	2b01      	cmp	r3, #1
    2b66:	d00f      	beq.n	2b88 <mayfly_run+0xe8>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2b68:	230c      	movs	r3, #12
    2b6a:	9a00      	ldr	r2, [sp, #0]
    2b6c:	4373      	muls	r3, r6
    2b6e:	4362      	muls	r2, r4
    2b70:	189b      	adds	r3, r3, r2
    2b72:	4a12      	ldr	r2, [pc, #72]	; (2bbc <mayfly_run+0x11c>)
    2b74:	9904      	ldr	r1, [sp, #16]
    2b76:	18d3      	adds	r3, r2, r3
    2b78:	6858      	ldr	r0, [r3, #4]
    2b7a:	2200      	movs	r2, #0
    2b7c:	f7ff fee4 	bl	2948 <memq_dequeue>
				m->_link = link;
    2b80:	9b07      	ldr	r3, [sp, #28]
    2b82:	9a01      	ldr	r2, [sp, #4]
				m->_ack = req;
    2b84:	705d      	strb	r5, [r3, #1]
				m->_link = link;
    2b86:	605a      	str	r2, [r3, #4]
			link = memq_peek(mft[callee_id][caller_id].head,
    2b88:	230c      	movs	r3, #12
    2b8a:	9a00      	ldr	r2, [sp, #0]
    2b8c:	4373      	muls	r3, r6
    2b8e:	4362      	muls	r2, r4
    2b90:	480a      	ldr	r0, [pc, #40]	; (2bbc <mayfly_run+0x11c>)
    2b92:	189b      	adds	r3, r3, r2
    2b94:	18c1      	adds	r1, r0, r3
    2b96:	aa07      	add	r2, sp, #28
    2b98:	6849      	ldr	r1, [r1, #4]
    2b9a:	5818      	ldr	r0, [r3, r0]
    2b9c:	f7ff fecb 	bl	2936 <memq_peek>
    2ba0:	9001      	str	r0, [sp, #4]
			if (state == 1) {
    2ba2:	2f01      	cmp	r7, #1
    2ba4:	d1ab      	bne.n	2afe <mayfly_run+0x5e>
				if (caller_id || link) {
    2ba6:	2e00      	cmp	r6, #0
    2ba8:	d101      	bne.n	2bae <mayfly_run+0x10e>
    2baa:	2800      	cmp	r0, #0
    2bac:	d0aa      	beq.n	2b04 <mayfly_run+0x64>
					mayfly_pend(callee_id, callee_id);
    2bae:	0021      	movs	r1, r4
    2bb0:	0020      	movs	r0, r4
    2bb2:	f006 fc0d 	bl	93d0 <mayfly_pend>
	}
}
    2bb6:	b009      	add	sp, #36	; 0x24
    2bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	20000130 	.word	0x20000130

00002bc0 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2bc0:	0002      	movs	r2, r0
    2bc2:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    2bc4:	2000      	movs	r0, #0
{
    2bc6:	b510      	push	{r4, lr}

	while (octets_len--) {
    2bc8:	428a      	cmp	r2, r1
    2bca:	d100      	bne.n	2bce <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    2bcc:	bd10      	pop	{r4, pc}
		bite = *octets;
    2bce:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    2bd0:	2c00      	cmp	r4, #0
    2bd2:	d101      	bne.n	2bd8 <util_ones_count_get+0x18>
		octets++;
    2bd4:	3201      	adds	r2, #1
    2bd6:	e7f7      	b.n	2bc8 <util_ones_count_get+0x8>
			bite &= (bite - 1);
    2bd8:	1e63      	subs	r3, r4, #1
			one_count++;
    2bda:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2bdc:	401c      	ands	r4, r3
			one_count++;
    2bde:	b2c0      	uxtb	r0, r0
    2be0:	e7f6      	b.n	2bd0 <util_ones_count_get+0x10>

00002be2 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    2be2:	2328      	movs	r3, #40	; 0x28
{
    2be4:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
    2be6:	7f45      	ldrb	r5, [r0, #29]
	total = 0;
    2be8:	2400      	movs	r4, #0
	current = previous;
    2bea:	002a      	movs	r2, r5
		ticker_current = &node[current];
    2bec:	469c      	mov	ip, r3
	node = &instance->node[0];
    2bee:	6806      	ldr	r6, [r0, #0]
	while (current != TICKER_NULL) {
    2bf0:	2aff      	cmp	r2, #255	; 0xff
    2bf2:	d101      	bne.n	2bf8 <ticker_dequeue+0x16>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2bf4:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    2bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2bf8:	4663      	mov	r3, ip
    2bfa:	4353      	muls	r3, r2
    2bfc:	18f3      	adds	r3, r6, r3
    2bfe:	781f      	ldrb	r7, [r3, #0]
		if (current == id) {
    2c00:	428a      	cmp	r2, r1
    2c02:	d004      	beq.n	2c0e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2c04:	689b      	ldr	r3, [r3, #8]
		current = ticker_current->next;
    2c06:	0015      	movs	r5, r2
		total += ticker_current->ticks_to_expire;
    2c08:	18e4      	adds	r4, r4, r3
		current = ticker_current->next;
    2c0a:	003a      	movs	r2, r7
    2c0c:	e7f0      	b.n	2bf0 <ticker_dequeue+0xe>
	if (previous == current) {
    2c0e:	4295      	cmp	r5, r2
    2c10:	d100      	bne.n	2c14 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2c12:	7747      	strb	r7, [r0, #29]
	node[previous].next = ticker_current->next;
    2c14:	2228      	movs	r2, #40	; 0x28
    2c16:	4355      	muls	r5, r2
    2c18:	7819      	ldrb	r1, [r3, #0]
	timeout = ticker_current->ticks_to_expire;
    2c1a:	6898      	ldr	r0, [r3, #8]
	node[previous].next = ticker_current->next;
    2c1c:	55a9      	strb	r1, [r5, r6]
	if (ticker_current->next != TICKER_NULL) {
    2c1e:	781b      	ldrb	r3, [r3, #0]
    2c20:	2bff      	cmp	r3, #255	; 0xff
    2c22:	d004      	beq.n	2c2e <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    2c24:	4353      	muls	r3, r2
    2c26:	18f3      	adds	r3, r6, r3
    2c28:	689a      	ldr	r2, [r3, #8]
    2c2a:	1812      	adds	r2, r2, r0
    2c2c:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    2c2e:	1820      	adds	r0, r4, r0
    2c30:	e7e1      	b.n	2bf6 <ticker_dequeue+0x14>

00002c32 <ticks_to_expire_prep>:
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2c32:	1a53      	subs	r3, r2, r1
{
    2c34:	b570      	push	{r4, r5, r6, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2c36:	6884      	ldr	r4, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2c38:	6945      	ldr	r5, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2c3a:	021e      	lsls	r6, r3, #8
    2c3c:	d409      	bmi.n	2c52 <ticks_to_expire_prep+0x20>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2c3e:	021b      	lsls	r3, r3, #8
    2c40:	0a1b      	lsrs	r3, r3, #8
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2c42:	191b      	adds	r3, r3, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
    2c44:	42ab      	cmp	r3, r5
    2c46:	d90e      	bls.n	2c66 <ticks_to_expire_prep+0x34>
		ticks_to_expire -= ticks_to_expire_minus;
    2c48:	1b5b      	subs	r3, r3, r5
		ticks_to_expire_minus = 0;
    2c4a:	2500      	movs	r5, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2c4c:	6145      	str	r5, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    2c4e:	6083      	str	r3, [r0, #8]
}
    2c50:	bd70      	pop	{r4, r5, r6, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2c52:	1a8b      	subs	r3, r1, r2
    2c54:	021b      	lsls	r3, r3, #8
    2c56:	0a1b      	lsrs	r3, r3, #8
		if (ticks_to_expire > delta_current_start) {
    2c58:	429c      	cmp	r4, r3
    2c5a:	d901      	bls.n	2c60 <ticks_to_expire_prep+0x2e>
			ticks_to_expire -= delta_current_start;
    2c5c:	1ae3      	subs	r3, r4, r3
    2c5e:	e7f1      	b.n	2c44 <ticks_to_expire_prep+0x12>
    2c60:	18ed      	adds	r5, r5, r3
			ticks_to_expire = 0;
    2c62:	2300      	movs	r3, #0
			ticks_to_expire_minus +=
    2c64:	1b2d      	subs	r5, r5, r4
		ticks_to_expire_minus -= ticks_to_expire;
    2c66:	1aed      	subs	r5, r5, r3
		ticks_to_expire = 0;
    2c68:	2300      	movs	r3, #0
    2c6a:	e7ef      	b.n	2c4c <ticks_to_expire_prep+0x1a>

00002c6c <ticker_job_op_cb>:
{
    2c6c:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2c6e:	2200      	movs	r2, #0
    2c70:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2c74:	b510      	push	{r4, lr}
    2c76:	0008      	movs	r0, r1
	user_op->status = status;
    2c78:	6259      	str	r1, [r3, #36]	; 0x24
	if (user_op->fp_op_func) {
    2c7a:	2a00      	cmp	r2, #0
    2c7c:	d001      	beq.n	2c82 <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2c7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2c80:	4790      	blx	r2
}
    2c82:	bd10      	pop	{r4, pc}

00002c84 <ticker_worker>:
	instance->worker_trigger = 1;
    2c84:	2301      	movs	r3, #1
{
    2c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (instance->job_guard) {
    2c88:	7f86      	ldrb	r6, [r0, #30]
{
    2c8a:	0004      	movs	r4, r0
	instance->worker_trigger = 1;
    2c8c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2c8e:	2e00      	cmp	r6, #0
    2c90:	d103      	bne.n	2c9a <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    2c92:	7f43      	ldrb	r3, [r0, #29]
    2c94:	2bff      	cmp	r3, #255	; 0xff
    2c96:	d101      	bne.n	2c9c <ticker_worker+0x18>
		instance->worker_trigger = 0;
    2c98:	77c6      	strb	r6, [r0, #31]
}
    2c9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2c9c:	f005 fe9a 	bl	89d4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ca0:	6963      	ldr	r3, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2ca2:	7f67      	ldrb	r7, [r4, #29]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ca4:	1ac5      	subs	r5, r0, r3
    2ca6:	022d      	lsls	r5, r5, #8
    2ca8:	0a2b      	lsrs	r3, r5, #8
    2caa:	9300      	str	r3, [sp, #0]
	node = &instance->node[0];
    2cac:	6823      	ldr	r3, [r4, #0]
    2cae:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    2cb0:	2fff      	cmp	r7, #255	; 0xff
    2cb2:	d007      	beq.n	2cc4 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    2cb4:	2328      	movs	r3, #40	; 0x28
    2cb6:	435f      	muls	r7, r3
    2cb8:	9b01      	ldr	r3, [sp, #4]
		if (ticks_elapsed < ticks_to_expire) {
    2cba:	9a00      	ldr	r2, [sp, #0]
		ticker = &node[ticker_id_head];
    2cbc:	19d9      	adds	r1, r3, r7
		ticks_to_expire = ticker->ticks_to_expire;
    2cbe:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2cc0:	429a      	cmp	r2, r3
    2cc2:	d217      	bcs.n	2cf4 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2cc4:	7aa2      	ldrb	r2, [r4, #10]
    2cc6:	7ae3      	ldrb	r3, [r4, #11]
    2cc8:	4293      	cmp	r3, r2
    2cca:	d105      	bne.n	2cd8 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    2ccc:	3301      	adds	r3, #1
    2cce:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    2cd0:	2b02      	cmp	r3, #2
    2cd2:	d100      	bne.n	2cd6 <ticker_worker+0x52>
			last = 0;
    2cd4:	2300      	movs	r3, #0
		instance->ticks_elapsed_last = last;
    2cd6:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2cd8:	7ae3      	ldrb	r3, [r4, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2cda:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2cdc:	3302      	adds	r3, #2
    2cde:	009b      	lsls	r3, r3, #2
    2ce0:	18e3      	adds	r3, r4, r3
    2ce2:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
    2ce4:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2ce6:	2201      	movs	r2, #1
	instance->worker_trigger = 0;
    2ce8:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2cea:	2104      	movs	r1, #4
    2cec:	0023      	movs	r3, r4
    2cee:	2003      	movs	r0, #3
    2cf0:	47a8      	blx	r5
    2cf2:	e7d2      	b.n	2c9a <ticker_worker+0x16>
		ticks_elapsed -= ticks_to_expire;
    2cf4:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    2cf6:	18f6      	adds	r6, r6, r3
		ticks_elapsed -= ticks_to_expire;
    2cf8:	1ad2      	subs	r2, r2, r3
    2cfa:	9200      	str	r2, [sp, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2cfc:	788a      	ldrb	r2, [r1, #2]
    2cfe:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2d00:	780f      	ldrb	r7, [r1, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2d02:	1a9b      	subs	r3, r3, r2
    2d04:	b2db      	uxtb	r3, r3
    2d06:	2b01      	cmp	r3, #1
    2d08:	d1d2      	bne.n	2cb0 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    2d0a:	68cb      	ldr	r3, [r1, #12]
		ticker->ack--;
    2d0c:	3a01      	subs	r2, #1
    2d0e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2d10:	1e1d      	subs	r5, r3, #0
    2d12:	d0cd      	beq.n	2cb0 <ticker_worker+0x2c>
					   ticks_expired -
    2d14:	694b      	ldr	r3, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
    2d16:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2d18:	1af0      	subs	r0, r6, r3
    2d1a:	6963      	ldr	r3, [r4, #20]
    2d1c:	18c0      	adds	r0, r0, r3
			ticks_at_expire = (instance->ticks_current +
    2d1e:	0200      	lsls	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    2d20:	690b      	ldr	r3, [r1, #16]
			ticks_at_expire = (instance->ticks_current +
    2d22:	0a00      	lsrs	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    2d24:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2d26:	47a8      	blx	r5
    2d28:	e7c2      	b.n	2cb0 <ticker_worker+0x2c>
	...

00002d2c <ticker_job>:
{
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (instance->worker_trigger) {
    2d2e:	7fc2      	ldrb	r2, [r0, #31]
{
    2d30:	b097      	sub	sp, #92	; 0x5c
    2d32:	0007      	movs	r7, r0
	if (instance->worker_trigger) {
    2d34:	2a00      	cmp	r2, #0
    2d36:	d000      	beq.n	2d3a <ticker_job+0xe>
    2d38:	e080      	b.n	2e3c <ticker_job+0x110>
	instance->job_guard = 1;
    2d3a:	2301      	movs	r3, #1
    2d3c:	7783      	strb	r3, [r0, #30]
	ticks_previous = instance->ticks_current;
    2d3e:	6943      	ldr	r3, [r0, #20]
    2d40:	9308      	str	r3, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2d42:	7a83      	ldrb	r3, [r0, #10]
    2d44:	7ac1      	ldrb	r1, [r0, #11]
    2d46:	4299      	cmp	r1, r3
    2d48:	d100      	bne.n	2d4c <ticker_job+0x20>
    2d4a:	e079      	b.n	2e40 <ticker_job+0x114>
		first = instance->ticks_elapsed_first + 1;
    2d4c:	3301      	adds	r3, #1
    2d4e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    2d50:	2b02      	cmp	r3, #2
    2d52:	d100      	bne.n	2d56 <ticker_job+0x2a>
			first = 0;
    2d54:	0013      	movs	r3, r2
		instance->ticks_elapsed_first = first;
    2d56:	72bb      	strb	r3, [r7, #10]
		ticks_elapsed =
    2d58:	3302      	adds	r3, #2
    2d5a:	009b      	lsls	r3, r3, #2
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	685b      	ldr	r3, [r3, #4]
    2d60:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    2d62:	9a00      	ldr	r2, [sp, #0]
    2d64:	9b08      	ldr	r3, [sp, #32]
    2d66:	189b      	adds	r3, r3, r2
		instance->ticks_current &= 0x00FFFFFF;
    2d68:	021b      	lsls	r3, r3, #8
    2d6a:	0a1b      	lsrs	r3, r3, #8
    2d6c:	617b      	str	r3, [r7, #20]
		flag_elapsed = 1;
    2d6e:	2301      	movs	r3, #1
    2d70:	9303      	str	r3, [sp, #12]
	ticker_id_old_head = instance->ticker_id_head;
    2d72:	7f7b      	ldrb	r3, [r7, #29]
    2d74:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	930d      	str	r3, [sp, #52]	; 0x34
	users = &instance->user[0];
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	930e      	str	r3, [sp, #56]	; 0x38
    2d7e:	7a7b      	ldrb	r3, [r7, #9]
    2d80:	3b01      	subs	r3, #1
    2d82:	b2db      	uxtb	r3, r3
    2d84:	9304      	str	r3, [sp, #16]
	pending = 0;
    2d86:	2300      	movs	r3, #0
    2d88:	930c      	str	r3, [sp, #48]	; 0x30
	insert_head = TICKER_NULL;
    2d8a:	33ff      	adds	r3, #255	; 0xff
    2d8c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2d8e:	9b04      	ldr	r3, [sp, #16]
    2d90:	2bff      	cmp	r3, #255	; 0xff
    2d92:	d158      	bne.n	2e46 <ticker_job+0x11a>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2d94:	7f7b      	ldrb	r3, [r7, #29]
    2d96:	9a05      	ldr	r2, [sp, #20]
    2d98:	1a9b      	subs	r3, r3, r2
    2d9a:	1e5a      	subs	r2, r3, #1
    2d9c:	4193      	sbcs	r3, r2
	flag_compare_update = 0;
    2d9e:	b2db      	uxtb	r3, r3
    2da0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (flag_elapsed) {
    2da2:	9b03      	ldr	r3, [sp, #12]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d016      	beq.n	2dd6 <ticker_job+0xaa>
	node = &instance->node[0];
    2da8:	683b      	ldr	r3, [r7, #0]
    2daa:	9307      	str	r3, [sp, #28]
	ticks_expired = 0;
    2dac:	2300      	movs	r3, #0
    2dae:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    2db0:	7f7e      	ldrb	r6, [r7, #29]
    2db2:	2eff      	cmp	r6, #255	; 0xff
    2db4:	d00a      	beq.n	2dcc <ticker_job+0xa0>
		ticker = &node[id_expired];
    2db6:	2428      	movs	r4, #40	; 0x28
    2db8:	4374      	muls	r4, r6
    2dba:	9b07      	ldr	r3, [sp, #28]
    2dbc:	191c      	adds	r4, r3, r4
		ticks_to_expire = ticker->ticks_to_expire;
    2dbe:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2dc0:	9b00      	ldr	r3, [sp, #0]
    2dc2:	429d      	cmp	r5, r3
    2dc4:	d800      	bhi.n	2dc8 <ticker_job+0x9c>
    2dc6:	e121      	b.n	300c <ticker_job+0x2e0>
			ticker->ticks_to_expire -= ticks_elapsed;
    2dc8:	1aed      	subs	r5, r5, r3
    2dca:	60a5      	str	r5, [r4, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
    2dcc:	9b05      	ldr	r3, [sp, #20]
    2dce:	42b3      	cmp	r3, r6
    2dd0:	d001      	beq.n	2dd6 <ticker_job+0xaa>
			flag_compare_update = 1;
    2dd2:	9b03      	ldr	r3, [sp, #12]
    2dd4:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->node[0];
    2dd6:	683b      	ldr	r3, [r7, #0]
    2dd8:	930e      	str	r3, [sp, #56]	; 0x38
	users = &instance->user[0];
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	9312      	str	r3, [sp, #72]	; 0x48
    2dde:	7a7b      	ldrb	r3, [r7, #9]
    2de0:	3b01      	subs	r3, #1
    2de2:	b2db      	uxtb	r3, r3
    2de4:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    2de6:	9b06      	ldr	r3, [sp, #24]
    2de8:	2bff      	cmp	r3, #255	; 0xff
    2dea:	d000      	beq.n	2dee <ticker_job+0xc2>
    2dec:	e159      	b.n	30a2 <ticker_job+0x376>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2dee:	7f7b      	ldrb	r3, [r7, #29]
    2df0:	9a05      	ldr	r2, [sp, #20]
    2df2:	4293      	cmp	r3, r2
    2df4:	d000      	beq.n	2df8 <ticker_job+0xcc>
    2df6:	e321      	b.n	343c <ticker_job+0x710>
	if (!pending) {
    2df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d107      	bne.n	2e0e <ticker_job+0xe2>
	users = &instance->user[0];
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	9303      	str	r3, [sp, #12]
    2e02:	7a7b      	ldrb	r3, [r7, #9]
    2e04:	3b01      	subs	r3, #1
    2e06:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    2e08:	2dff      	cmp	r5, #255	; 0xff
    2e0a:	d000      	beq.n	2e0e <ticker_job+0xe2>
    2e0c:	e287      	b.n	331e <ticker_job+0x5f2>
	instance->job_guard = 0;
    2e0e:	2300      	movs	r3, #0
    2e10:	77bb      	strb	r3, [r7, #30]
	if (flag_compare_update) {
    2e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2e14:	2b00      	cmp	r3, #0
    2e16:	d008      	beq.n	2e2a <ticker_job+0xfe>
	if (instance->ticker_id_head == TICKER_NULL) {
    2e18:	7f7b      	ldrb	r3, [r7, #29]
    2e1a:	2bff      	cmp	r3, #255	; 0xff
    2e1c:	d000      	beq.n	2e20 <ticker_job+0xf4>
    2e1e:	e2d3      	b.n	33c8 <ticker_job+0x69c>
		if (cntr_stop() == 0) {
    2e20:	f005 fdc2 	bl	89a8 <cntr_stop>
    2e24:	2800      	cmp	r0, #0
    2e26:	d100      	bne.n	2e2a <ticker_job+0xfe>
			instance->ticks_slot_previous = 0;
    2e28:	61b8      	str	r0, [r7, #24]
	if (instance->worker_trigger) {
    2e2a:	7ffb      	ldrb	r3, [r7, #31]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d005      	beq.n	2e3c <ticker_job+0x110>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2e30:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    2e32:	003b      	movs	r3, r7
    2e34:	2201      	movs	r2, #1
    2e36:	2103      	movs	r1, #3
    2e38:	2004      	movs	r0, #4
    2e3a:	47a0      	blx	r4
}
    2e3c:	b017      	add	sp, #92	; 0x5c
    2e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_elapsed = 0;
    2e40:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    2e42:	9200      	str	r2, [sp, #0]
    2e44:	e795      	b.n	2d72 <ticker_job+0x46>
		user = &users[count_user];
    2e46:	9b04      	ldr	r3, [sp, #16]
    2e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2e4a:	00db      	lsls	r3, r3, #3
    2e4c:	18d3      	adds	r3, r2, r3
    2e4e:	9302      	str	r3, [sp, #8]
		user_ops = &user->user_op[0];
    2e50:	685b      	ldr	r3, [r3, #4]
    2e52:	930f      	str	r3, [sp, #60]	; 0x3c
		while (user->middle != user->last) {
    2e54:	9b02      	ldr	r3, [sp, #8]
    2e56:	78da      	ldrb	r2, [r3, #3]
    2e58:	9b02      	ldr	r3, [sp, #8]
    2e5a:	789e      	ldrb	r6, [r3, #2]
    2e5c:	4296      	cmp	r6, r2
    2e5e:	d100      	bne.n	2e62 <ticker_job+0x136>
    2e60:	e0cf      	b.n	3002 <ticker_job+0x2d6>
			user_op = &user_ops[user->middle];
    2e62:	2530      	movs	r5, #48	; 0x30
    2e64:	4375      	muls	r5, r6
    2e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			if (middle == user->count_user_op) {
    2e68:	9902      	ldr	r1, [sp, #8]
			user_op = &user_ops[user->middle];
    2e6a:	195d      	adds	r5, r3, r5
			if (middle == user->count_user_op) {
    2e6c:	7809      	ldrb	r1, [r1, #0]
			middle = user->middle + 1;
    2e6e:	1c73      	adds	r3, r6, #1
    2e70:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    2e72:	4299      	cmp	r1, r3
    2e74:	d100      	bne.n	2e78 <ticker_job+0x14c>
				middle = 0;
    2e76:	2300      	movs	r3, #0
			user->middle = middle;
    2e78:	9902      	ldr	r1, [sp, #8]
    2e7a:	708b      	strb	r3, [r1, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2e7c:	782b      	ldrb	r3, [r5, #0]
    2e7e:	2b03      	cmp	r3, #3
    2e80:	d9ea      	bls.n	2e58 <ticker_job+0x12c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2e82:	2b05      	cmp	r3, #5
    2e84:	d816      	bhi.n	2eb4 <ticker_job+0x188>
			ticker = &node[user_op->id];
    2e86:	2428      	movs	r4, #40	; 0x28
    2e88:	7869      	ldrb	r1, [r5, #1]
    2e8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2e8c:	434c      	muls	r4, r1
    2e8e:	1914      	adds	r4, r2, r4
			state = (ticker->req - ticker->ack) & 0xff;
    2e90:	7862      	ldrb	r2, [r4, #1]
    2e92:	78a0      	ldrb	r0, [r4, #2]
    2e94:	1a12      	subs	r2, r2, r0
    2e96:	b2d2      	uxtb	r2, r2
    2e98:	9206      	str	r2, [sp, #24]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2e9a:	2a00      	cmp	r2, #0
    2e9c:	d00a      	beq.n	2eb4 <ticker_job+0x188>
			    (state == 0) ||
    2e9e:	2b04      	cmp	r3, #4
    2ea0:	d10d      	bne.n	2ebe <ticker_job+0x192>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2ea2:	686b      	ldr	r3, [r5, #4]
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d10a      	bne.n	2ebe <ticker_job+0x192>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2ea8:	68ab      	ldr	r3, [r5, #8]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d107      	bne.n	2ebe <ticker_job+0x192>
			     (user_op->params.update.lazy == 0) &&
    2eae:	68eb      	ldr	r3, [r5, #12]
    2eb0:	021b      	lsls	r3, r3, #8
    2eb2:	d104      	bne.n	2ebe <ticker_job+0x192>
				ticker_job_op_cb(user_op,
    2eb4:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2eb6:	0028      	movs	r0, r5
    2eb8:	f7ff fed8 	bl	2c6c <ticker_job_op_cb>
    2ebc:	e7ca      	b.n	2e54 <ticker_job+0x128>
			if (state == 1) {
    2ebe:	9b06      	ldr	r3, [sp, #24]
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	d000      	beq.n	2ec6 <ticker_job+0x19a>
    2ec4:	e093      	b.n	2fee <ticker_job+0x2c2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2ec6:	0038      	movs	r0, r7
    2ec8:	f7ff fe8b 	bl	2be2 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2ecc:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2ece:	0006      	movs	r6, r0
    2ed0:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2ed2:	2b04      	cmp	r3, #4
    2ed4:	d000      	beq.n	2ed8 <ticker_job+0x1ac>
    2ed6:	e07f      	b.n	2fd8 <ticker_job+0x2ac>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2ed8:	697b      	ldr	r3, [r7, #20]
    2eda:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    2edc:	f005 fd7a 	bl	89d4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    2ee2:	900a      	str	r0, [sp, #40]	; 0x28
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ee4:	1a80      	subs	r0, r0, r2
    2ee6:	0200      	lsls	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2ee8:	9b00      	ldr	r3, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2eea:	0a00      	lsrs	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2eec:	18c0      	adds	r0, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
    2eee:	4286      	cmp	r6, r0
    2ef0:	d93a      	bls.n	2f68 <ticker_job+0x23c>
		ticks_to_expire -= ticks_elapsed;
    2ef2:	1a30      	subs	r0, r6, r0
	if ((ticker->ticks_periodic != 0) &&
    2ef4:	6863      	ldr	r3, [r4, #4]
    2ef6:	469c      	mov	ip, r3
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d012      	beq.n	2f22 <ticker_job+0x1f6>
	    (user_op->params.update.lazy != 0)) {
    2efc:	89ab      	ldrh	r3, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    2efe:	2b00      	cmp	r3, #0
    2f00:	d00f      	beq.n	2f22 <ticker_job+0x1f6>
		user_op->params.update.lazy--;
    2f02:	3b01      	subs	r3, #1
    2f04:	b29b      	uxth	r3, r3
    2f06:	9307      	str	r3, [sp, #28]
    2f08:	466b      	mov	r3, sp
    2f0a:	8b9b      	ldrh	r3, [r3, #28]
    2f0c:	81ab      	strh	r3, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2f0e:	4584      	cmp	ip, r0
    2f10:	d330      	bcc.n	2f74 <ticker_job+0x248>
	if ((ticker->remainder_current < BIT(31)) &&
    2f12:	4ed3      	ldr	r6, [pc, #844]	; (3260 <ticker_job+0x534>)
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2f14:	8be1      	ldrh	r1, [r4, #30]
    2f16:	9b07      	ldr	r3, [sp, #28]
    2f18:	428b      	cmp	r3, r1
    2f1a:	d848      	bhi.n	2fae <ticker_job+0x282>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2f1c:	466b      	mov	r3, sp
    2f1e:	8b9b      	ldrh	r3, [r3, #28]
    2f20:	83a3      	strh	r3, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    2f22:	88ab      	ldrh	r3, [r5, #4]
	ticker->ticks_to_expire_minus +=
    2f24:	6962      	ldr	r2, [r4, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    2f26:	1818      	adds	r0, r3, r0
    2f28:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    2f2a:	88eb      	ldrh	r3, [r5, #6]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
	ticker->ticks_to_expire_minus +=
    2f2e:	18d3      	adds	r3, r2, r3
    2f30:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f34:	0020      	movs	r0, r4
    2f36:	f7ff fe7c 	bl	2c32 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2f3a:	69a2      	ldr	r2, [r4, #24]
    2f3c:	892b      	ldrh	r3, [r5, #8]
    2f3e:	189b      	adds	r3, r3, r2
    2f40:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2f42:	896a      	ldrh	r2, [r5, #10]
    2f44:	4293      	cmp	r3, r2
    2f46:	d945      	bls.n	2fd4 <ticker_job+0x2a8>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2f48:	1a9b      	subs	r3, r3, r2
		ticker->ticks_slot = 0;
    2f4a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2f4c:	7bab      	ldrb	r3, [r5, #14]
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d000      	beq.n	2f54 <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    2f52:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2f54:	466b      	mov	r3, sp
    2f56:	791b      	ldrb	r3, [r3, #4]
    2f58:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    2f5a:	786b      	ldrb	r3, [r5, #1]
    2f5c:	9301      	str	r3, [sp, #4]
		ticker->req++;
    2f5e:	7863      	ldrb	r3, [r4, #1]
    2f60:	3301      	adds	r3, #1
    2f62:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2f64:	2100      	movs	r1, #0
    2f66:	e7a6      	b.n	2eb6 <ticker_job+0x18a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2f68:	6963      	ldr	r3, [r4, #20]
    2f6a:	1b9e      	subs	r6, r3, r6
    2f6c:	1830      	adds	r0, r6, r0
    2f6e:	6160      	str	r0, [r4, #20]
		ticks_to_expire = 0;
    2f70:	2000      	movs	r0, #0
    2f72:	e7bf      	b.n	2ef4 <ticker_job+0x1c8>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    2f74:	8be3      	ldrh	r3, [r4, #30]
    2f76:	930b      	str	r3, [sp, #44]	; 0x2c
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2f7a:	9b07      	ldr	r3, [sp, #28]
    2f7c:	4293      	cmp	r3, r2
    2f7e:	d2c8      	bcs.n	2f12 <ticker_job+0x1e6>
	if ((ticker->remainder_current >= BIT(31)) ||
    2f80:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2f82:	49b8      	ldr	r1, [pc, #736]	; (3264 <ticker_job+0x538>)
    2f84:	1871      	adds	r1, r6, r1
    2f86:	000b      	movs	r3, r1
    2f88:	001a      	movs	r2, r3
    2f8a:	4bb5      	ldr	r3, [pc, #724]	; (3260 <ticker_job+0x534>)
	u8_t decrement = 0;
    2f8c:	2100      	movs	r1, #0
	if ((ticker->remainder_current >= BIT(31)) ||
    2f8e:	429a      	cmp	r2, r3
    2f90:	d903      	bls.n	2f9a <ticker_job+0x26e>
		ticker->remainder_current += 30517578UL;
    2f92:	4bb5      	ldr	r3, [pc, #724]	; (3268 <ticker_job+0x53c>)
		decrement++;
    2f94:	9906      	ldr	r1, [sp, #24]
		ticker->remainder_current += 30517578UL;
    2f96:	18f6      	adds	r6, r6, r3
    2f98:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2f9c:	6a26      	ldr	r6, [r4, #32]
			ticker->lazy_current--;
    2f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	ticker->remainder_current -= ticker->remainder_periodic;
    2fa0:	1b9e      	subs	r6, r3, r6
			ticks_to_expire -= ticker->ticks_periodic +
    2fa2:	4461      	add	r1, ip
			ticker->lazy_current--;
    2fa4:	3a01      	subs	r2, #1
	ticker->remainder_current -= ticker->remainder_periodic;
    2fa6:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2fa8:	1a40      	subs	r0, r0, r1
			ticker->lazy_current--;
    2faa:	83e2      	strh	r2, [r4, #30]
    2fac:	e7af      	b.n	2f0e <ticker_job+0x1e2>
	ticker->remainder_current += ticker->remainder_periodic;
    2fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2fb0:	6a22      	ldr	r2, [r4, #32]
    2fb2:	189a      	adds	r2, r3, r2
	if ((ticker->remainder_current < BIT(31)) &&
    2fb4:	4bab      	ldr	r3, [pc, #684]	; (3264 <ticker_job+0x538>)
    2fb6:	18d3      	adds	r3, r2, r3
    2fb8:	42b3      	cmp	r3, r6
    2fba:	d906      	bls.n	2fca <ticker_job+0x29e>
	ticker->remainder_current += ticker->remainder_periodic;
    2fbc:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    2fbe:	2200      	movs	r2, #0
			ticks_to_expire += ticker->ticks_periodic +
    2fc0:	4462      	add	r2, ip
			ticker->lazy_current++;
    2fc2:	3101      	adds	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
    2fc4:	1880      	adds	r0, r0, r2
			ticker->lazy_current++;
    2fc6:	83e1      	strh	r1, [r4, #30]
    2fc8:	e7a4      	b.n	2f14 <ticker_job+0x1e8>
		ticker->remainder_current -= 30517578UL;
    2fca:	4ba8      	ldr	r3, [pc, #672]	; (326c <ticker_job+0x540>)
    2fcc:	18d2      	adds	r2, r2, r3
    2fce:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    2fd0:	9a06      	ldr	r2, [sp, #24]
    2fd2:	e7f5      	b.n	2fc0 <ticker_job+0x294>
		ticker->ticks_slot = 0;
    2fd4:	2300      	movs	r3, #0
    2fd6:	e7b8      	b.n	2f4a <ticker_job+0x21e>
		ticker->req = ticker->ack;
    2fd8:	78a3      	ldrb	r3, [r4, #2]
    2fda:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2fdc:	7f3a      	ldrb	r2, [r7, #28]
    2fde:	786b      	ldrb	r3, [r5, #1]
    2fe0:	429a      	cmp	r2, r3
    2fe2:	d1bf      	bne.n	2f64 <ticker_job+0x238>
			instance->ticker_id_slot_previous = TICKER_NULL;
    2fe4:	23ff      	movs	r3, #255	; 0xff
    2fe6:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    2fe8:	2300      	movs	r3, #0
    2fea:	61bb      	str	r3, [r7, #24]
    2fec:	e7ba      	b.n	2f64 <ticker_job+0x238>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2fee:	2104      	movs	r1, #4
    2ff0:	003b      	movs	r3, r7
    2ff2:	2201      	movs	r2, #1
    2ff4:	0008      	movs	r0, r1
    2ff6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    2ff8:	47a0      	blx	r4
				user->middle = prev;
    2ffa:	9b02      	ldr	r3, [sp, #8]
    2ffc:	709e      	strb	r6, [r3, #2]
				pending = 1;
    2ffe:	2301      	movs	r3, #1
    3000:	930c      	str	r3, [sp, #48]	; 0x30
    3002:	9b04      	ldr	r3, [sp, #16]
    3004:	3b01      	subs	r3, #1
    3006:	b2db      	uxtb	r3, r3
    3008:	9304      	str	r3, [sp, #16]
    300a:	e6c0      	b.n	2d8e <ticker_job+0x62>
		ticks_expired += ticks_to_expire;
    300c:	9b02      	ldr	r3, [sp, #8]
    300e:	195b      	adds	r3, r3, r5
    3010:	9302      	str	r3, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3012:	69bb      	ldr	r3, [r7, #24]
    3014:	429d      	cmp	r5, r3
    3016:	d237      	bcs.n	3088 <ticker_job+0x35c>
			instance->ticks_slot_previous -= ticks_to_expire;
    3018:	1b5b      	subs	r3, r3, r5
			instance->ticks_slot_previous = 0;
    301a:	61bb      	str	r3, [r7, #24]
		if (ticker->ticks_slot != 0) {
    301c:	69a3      	ldr	r3, [r4, #24]
    301e:	2b00      	cmp	r3, #0
    3020:	d001      	beq.n	3026 <ticker_job+0x2fa>
			instance->ticker_id_slot_previous = id_expired;
    3022:	773e      	strb	r6, [r7, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3024:	61bb      	str	r3, [r7, #24]
		ticker->ticks_to_expire = 0;
    3026:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    3028:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0;
    302a:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    302c:	777b      	strb	r3, [r7, #29]
		if (ticker->ticks_periodic != 0) {
    302e:	6860      	ldr	r0, [r4, #4]
    3030:	4290      	cmp	r0, r2
    3032:	d032      	beq.n	309a <ticker_job+0x36e>
    3034:	8ba3      	ldrh	r3, [r4, #28]
    3036:	9306      	str	r3, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
    3038:	4b89      	ldr	r3, [pc, #548]	; (3260 <ticker_job+0x534>)
    303a:	469c      	mov	ip, r3
	ticker->remainder_current += ticker->remainder_periodic;
    303c:	6a21      	ldr	r1, [r4, #32]
    303e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3040:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3042:	4988      	ldr	r1, [pc, #544]	; (3264 <ticker_job+0x538>)
    3044:	1859      	adds	r1, r3, r1
    3046:	4561      	cmp	r1, ip
    3048:	d922      	bls.n	3090 <ticker_job+0x364>
	ticker->remainder_current += ticker->remainder_periodic;
    304a:	6263      	str	r3, [r4, #36]	; 0x24
	return 0;
    304c:	2300      	movs	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    304e:	181b      	adds	r3, r3, r0
    3050:	18d2      	adds	r2, r2, r3
			while (count--) {
    3052:	9b06      	ldr	r3, [sp, #24]
    3054:	3b01      	subs	r3, #1
    3056:	9306      	str	r3, [sp, #24]
    3058:	d2f0      	bcs.n	303c <ticker_job+0x310>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    305a:	9b08      	ldr	r3, [sp, #32]
			ticker->ticks_to_expire = ticks_to_expire;
    305c:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    305e:	9a02      	ldr	r2, [sp, #8]
    3060:	6979      	ldr	r1, [r7, #20]
    3062:	189a      	adds	r2, r3, r2
    3064:	0020      	movs	r0, r4
    3066:	f7ff fde4 	bl	2c32 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    306a:	8ba3      	ldrh	r3, [r4, #28]
    306c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    306e:	2300      	movs	r3, #0
    3070:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    3072:	466b      	mov	r3, sp
    3074:	791b      	ldrb	r3, [r3, #4]
    3076:	7023      	strb	r3, [r4, #0]
			ticker->req++;
    3078:	7863      	ldrb	r3, [r4, #1]
    307a:	3301      	adds	r3, #1
    307c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    307e:	9b00      	ldr	r3, [sp, #0]
    3080:	9601      	str	r6, [sp, #4]
    3082:	1b5b      	subs	r3, r3, r5
    3084:	9300      	str	r3, [sp, #0]
    3086:	e693      	b.n	2db0 <ticker_job+0x84>
			instance->ticker_id_slot_previous = TICKER_NULL;
    3088:	23ff      	movs	r3, #255	; 0xff
    308a:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    308c:	2300      	movs	r3, #0
    308e:	e7c4      	b.n	301a <ticker_job+0x2ee>
		ticker->remainder_current -= 30517578UL;
    3090:	4976      	ldr	r1, [pc, #472]	; (326c <ticker_job+0x540>)
    3092:	185b      	adds	r3, r3, r1
    3094:	6263      	str	r3, [r4, #36]	; 0x24
		return 1;
    3096:	9b03      	ldr	r3, [sp, #12]
    3098:	e7d9      	b.n	304e <ticker_job+0x322>
			ticker->req = ticker->ack;
    309a:	78a3      	ldrb	r3, [r4, #2]
    309c:	9e01      	ldr	r6, [sp, #4]
    309e:	7063      	strb	r3, [r4, #1]
    30a0:	e7ed      	b.n	307e <ticker_job+0x352>
		user = &users[count_user];
    30a2:	9b06      	ldr	r3, [sp, #24]
    30a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    30a6:	00db      	lsls	r3, r3, #3
    30a8:	18d3      	adds	r3, r2, r3
    30aa:	9307      	str	r3, [sp, #28]
		user_ops = (void *)&user->user_op[0];
    30ac:	685b      	ldr	r3, [r3, #4]
    30ae:	9313      	str	r3, [sp, #76]	; 0x4c
		user_ops_first = user->first;
    30b0:	9b07      	ldr	r3, [sp, #28]
    30b2:	785b      	ldrb	r3, [r3, #1]
    30b4:	9303      	str	r3, [sp, #12]
		while ((insert_head != TICKER_NULL) ||
    30b6:	9b01      	ldr	r3, [sp, #4]
    30b8:	2bff      	cmp	r3, #255	; 0xff
    30ba:	d100      	bne.n	30be <ticker_job+0x392>
    30bc:	e083      	b.n	31c6 <ticker_job+0x49a>
				ticker = &node[id_insert];
    30be:	2428      	movs	r4, #40	; 0x28
    30c0:	9b01      	ldr	r3, [sp, #4]
    30c2:	435c      	muls	r4, r3
    30c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    30c6:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	9302      	str	r3, [sp, #8]
    30cc:	7823      	ldrb	r3, [r4, #0]
    30ce:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    30d0:	2300      	movs	r3, #0
    30d2:	9300      	str	r3, [sp, #0]
	struct ticker_node *node = &instance->node[0];
    30d4:	683b      	ldr	r3, [r7, #0]
		skip = 0;
    30d6:	2100      	movs	r1, #0
	struct ticker_node *node = &instance->node[0];
    30d8:	9314      	str	r3, [sp, #80]	; 0x50
	ticker->next = TICKER_NULL;
    30da:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    30dc:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    30de:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    30e0:	8be3      	ldrh	r3, [r4, #30]
		skip = 0;
    30e2:	910f      	str	r1, [sp, #60]	; 0x3c
	if (ticker->lazy_current > ticker->lazy_periodic) {
    30e4:	4293      	cmp	r3, r2
    30e6:	d902      	bls.n	30ee <ticker_job+0x3c2>
		skip = ticker->lazy_current -
    30e8:	1a9b      	subs	r3, r3, r2
    30ea:	b29b      	uxth	r3, r3
    30ec:	930f      	str	r3, [sp, #60]	; 0x3c
	ticker_new = &node[id];
    30ee:	2328      	movs	r3, #40	; 0x28
    30f0:	9a02      	ldr	r2, [sp, #8]
    30f2:	4353      	muls	r3, r2
    30f4:	9315      	str	r3, [sp, #84]	; 0x54
	node = &instance->node[0];
    30f6:	683b      	ldr	r3, [r7, #0]
	ticks_slot_previous = instance->ticks_slot_previous;
    30f8:	69ba      	ldr	r2, [r7, #24]
	node = &instance->node[0];
    30fa:	469c      	mov	ip, r3
	ticker_new = &node[id];
    30fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    30fe:	4463      	add	r3, ip
    3100:	9308      	str	r3, [sp, #32]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3102:	689e      	ldr	r6, [r3, #8]
	current = instance->ticker_id_head;
    3104:	7f7b      	ldrb	r3, [r7, #29]
	ticks_slot_previous = instance->ticks_slot_previous;
    3106:	9209      	str	r2, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    3108:	22ff      	movs	r2, #255	; 0xff
	previous = current;
    310a:	930d      	str	r3, [sp, #52]	; 0x34
	collide = ticker_id_slot_previous = TICKER_NULL;
    310c:	920a      	str	r2, [sp, #40]	; 0x28
	while ((current != TICKER_NULL) &&
    310e:	2bff      	cmp	r3, #255	; 0xff
    3110:	d006      	beq.n	3120 <ticker_job+0x3f4>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3112:	2228      	movs	r2, #40	; 0x28
    3114:	435a      	muls	r2, r3
    3116:	4462      	add	r2, ip
		(ticks_to_expire_current =
    3118:	6890      	ldr	r0, [r2, #8]
	while ((current != TICKER_NULL) &&
    311a:	4286      	cmp	r6, r0
    311c:	d900      	bls.n	3120 <ticker_job+0x3f4>
    311e:	e0ab      	b.n	3278 <ticker_job+0x54c>
	collide = ticker_by_slot_get(&node[0], current,
    3120:	001d      	movs	r5, r3
				     ticks_to_expire + ticker_new->ticks_slot);
    3122:	9a08      	ldr	r2, [sp, #32]
    3124:	6992      	ldr	r2, [r2, #24]
    3126:	9210      	str	r2, [sp, #64]	; 0x40
	collide = ticker_by_slot_get(&node[0], current,
    3128:	18b0      	adds	r0, r6, r2
	while (ticker_id_head != TICKER_NULL) {
    312a:	2dff      	cmp	r5, #255	; 0xff
    312c:	d000      	beq.n	3130 <ticker_job+0x404>
    312e:	e0b1      	b.n	3294 <ticker_job+0x568>
	if ((ticker_new->ticks_slot == 0) ||
    3130:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3132:	2a00      	cmp	r2, #0
    3134:	d006      	beq.n	3144 <ticker_job+0x418>
    3136:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3138:	4296      	cmp	r6, r2
    313a:	d200      	bcs.n	313e <ticker_job+0x412>
    313c:	e0c3      	b.n	32c6 <ticker_job+0x59a>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    313e:	2dff      	cmp	r5, #255	; 0xff
    3140:	d000      	beq.n	3144 <ticker_job+0x418>
    3142:	e181      	b.n	3448 <ticker_job+0x71c>
		ticker_new->ticks_to_expire = ticks_to_expire;
    3144:	9a08      	ldr	r2, [sp, #32]
    3146:	6096      	str	r6, [r2, #8]
		ticker_new->next = current;
    3148:	7013      	strb	r3, [r2, #0]
		if (previous == current) {
    314a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    314c:	4293      	cmp	r3, r2
    314e:	d000      	beq.n	3152 <ticker_job+0x426>
    3150:	e0b1      	b.n	32b6 <ticker_job+0x58a>
			instance->ticker_id_head = id;
    3152:	466a      	mov	r2, sp
    3154:	7a12      	ldrb	r2, [r2, #8]
    3156:	777a      	strb	r2, [r7, #29]
		if (current != TICKER_NULL) {
    3158:	2bff      	cmp	r3, #255	; 0xff
    315a:	d005      	beq.n	3168 <ticker_job+0x43c>
			node[current].ticks_to_expire -= ticks_to_expire;
    315c:	2228      	movs	r2, #40	; 0x28
    315e:	4353      	muls	r3, r2
    3160:	4463      	add	r3, ip
    3162:	689a      	ldr	r2, [r3, #8]
    3164:	1b92      	subs	r2, r2, r6
    3166:	609a      	str	r2, [r3, #8]
	return TICKER_STATUS_SUCCESS;
    3168:	2100      	movs	r1, #0
	ticker->req = ticker->ack + 1;
    316a:	78a3      	ldrb	r3, [r4, #2]
    316c:	3301      	adds	r3, #1
    316e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    3170:	9b00      	ldr	r3, [sp, #0]
    3172:	2b00      	cmp	r3, #0
    3174:	d09f      	beq.n	30b6 <ticker_job+0x38a>
				ticker_job_op_cb(user_op, status);
    3176:	0018      	movs	r0, r3
    3178:	f7ff fd78 	bl	2c6c <ticker_job_op_cb>
    317c:	e79b      	b.n	30b6 <ticker_job+0x38a>
				user_op = &user_ops[user_ops_first];
    317e:	2330      	movs	r3, #48	; 0x30
    3180:	9a03      	ldr	r2, [sp, #12]
    3182:	4353      	muls	r3, r2
    3184:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3186:	18d3      	adds	r3, r2, r3
    3188:	9300      	str	r3, [sp, #0]
				first = user_ops_first + 1;
    318a:	9b03      	ldr	r3, [sp, #12]
    318c:	3301      	adds	r3, #1
    318e:	b2db      	uxtb	r3, r3
    3190:	9303      	str	r3, [sp, #12]
				if (first == user->count_user_op) {
    3192:	9b07      	ldr	r3, [sp, #28]
    3194:	9a03      	ldr	r2, [sp, #12]
    3196:	781b      	ldrb	r3, [r3, #0]
    3198:	4293      	cmp	r3, r2
    319a:	d101      	bne.n	31a0 <ticker_job+0x474>
					first = 0;
    319c:	2300      	movs	r3, #0
    319e:	9303      	str	r3, [sp, #12]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    31a0:	9b00      	ldr	r3, [sp, #0]
    31a2:	781b      	ldrb	r3, [r3, #0]
    31a4:	2b03      	cmp	r3, #3
    31a6:	d10e      	bne.n	31c6 <ticker_job+0x49a>
				ticker = &node[id_insert];
    31a8:	2428      	movs	r4, #40	; 0x28
				id_insert = user_op->id;
    31aa:	9b00      	ldr	r3, [sp, #0]
    31ac:	785b      	ldrb	r3, [r3, #1]
				ticker = &node[id_insert];
    31ae:	435c      	muls	r4, r3
				id_insert = user_op->id;
    31b0:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
    31b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    31b4:	191c      	adds	r4, r3, r4
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    31b6:	7862      	ldrb	r2, [r4, #1]
    31b8:	78a3      	ldrb	r3, [r4, #2]
    31ba:	429a      	cmp	r2, r3
    31bc:	d00a      	beq.n	31d4 <ticker_job+0x4a8>
					ticker_job_op_cb(user_op,
    31be:	2101      	movs	r1, #1
    31c0:	9800      	ldr	r0, [sp, #0]
    31c2:	f7ff fd53 	bl	2c6c <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    31c6:	9b07      	ldr	r3, [sp, #28]
    31c8:	9a03      	ldr	r2, [sp, #12]
    31ca:	789b      	ldrb	r3, [r3, #2]
    31cc:	4293      	cmp	r3, r2
    31ce:	d1d6      	bne.n	317e <ticker_job+0x452>
    31d0:	9b06      	ldr	r3, [sp, #24]
    31d2:	e605      	b.n	2de0 <ticker_job+0xb4>
	ticker->ticks_to_expire_minus = 0;
    31d4:	2500      	movs	r5, #0
	ticker->ticks_periodic = start->ticks_periodic;
    31d6:	9b00      	ldr	r3, [sp, #0]
				ticker_job_op_start(ticker, user_op,
    31d8:	6979      	ldr	r1, [r7, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    31da:	68db      	ldr	r3, [r3, #12]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    31dc:	0020      	movs	r0, r4
	ticker->ticks_periodic = start->ticks_periodic;
    31de:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    31e0:	9b00      	ldr	r3, [sp, #0]
    31e2:	691b      	ldr	r3, [r3, #16]
    31e4:	9308      	str	r3, [sp, #32]
    31e6:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    31e8:	9b00      	ldr	r3, [sp, #0]
    31ea:	8a9b      	ldrh	r3, [r3, #20]
    31ec:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    31ee:	9b00      	ldr	r3, [sp, #0]
    31f0:	699b      	ldr	r3, [r3, #24]
    31f2:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    31f4:	9b00      	ldr	r3, [sp, #0]
    31f6:	69db      	ldr	r3, [r3, #28]
    31f8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    31fa:	9b00      	ldr	r3, [sp, #0]
    31fc:	6a1b      	ldr	r3, [r3, #32]
    31fe:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    3200:	9b00      	ldr	r3, [sp, #0]
    3202:	689b      	ldr	r3, [r3, #8]
	ticker->ticks_to_expire_minus = 0;
    3204:	6165      	str	r5, [r4, #20]
	ticker->ticks_to_expire = start->ticks_first;
    3206:	9308      	str	r3, [sp, #32]
    3208:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    320a:	9b00      	ldr	r3, [sp, #0]
    320c:	685a      	ldr	r2, [r3, #4]
    320e:	f7ff fd10 	bl	2c32 <ticks_to_expire_prep>
	ticker->force = 1;
    3212:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    3214:	6265      	str	r5, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    3216:	83e5      	strh	r5, [r4, #30]
	ticker->force = 1;
    3218:	70e3      	strb	r3, [r4, #3]
    321a:	e75b      	b.n	30d4 <ticker_job+0x3a8>
		if (ticker->ticks_periodic != 0) {
    321c:	6863      	ldr	r3, [r4, #4]
    321e:	2b00      	cmp	r3, #0
    3220:	d100      	bne.n	3224 <ticker_job+0x4f8>
    3222:	e07a      	b.n	331a <ticker_job+0x5ee>
	ticker->remainder_current += ticker->remainder_periodic;
    3224:	6a21      	ldr	r1, [r4, #32]
    3226:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3228:	1852      	adds	r2, r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    322a:	490e      	ldr	r1, [pc, #56]	; (3264 <ticker_job+0x538>)
    322c:	1850      	adds	r0, r2, r1
    322e:	490c      	ldr	r1, [pc, #48]	; (3260 <ticker_job+0x534>)
    3230:	4288      	cmp	r0, r1
    3232:	d910      	bls.n	3256 <ticker_job+0x52a>
	ticker->remainder_current += ticker->remainder_periodic;
    3234:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    3236:	2200      	movs	r2, #0
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3238:	68a1      	ldr	r1, [r4, #8]
    323a:	185b      	adds	r3, r3, r1
    323c:	189b      	adds	r3, r3, r2
			ticker->lazy_current++;
    323e:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3240:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    3242:	3201      	adds	r2, #1
    3244:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3246:	6962      	ldr	r2, [r4, #20]
    3248:	2100      	movs	r1, #0
			if (ticker->ticks_to_expire >
    324a:	4293      	cmp	r3, r2
    324c:	d910      	bls.n	3270 <ticker_job+0x544>
				ticker->ticks_to_expire -=
    324e:	1a9b      	subs	r3, r3, r2
    3250:	60a3      	str	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    3252:	6161      	str	r1, [r4, #20]
    3254:	e74f      	b.n	30f6 <ticker_job+0x3ca>
		ticker->remainder_current -= 30517578UL;
    3256:	4905      	ldr	r1, [pc, #20]	; (326c <ticker_job+0x540>)
    3258:	1852      	adds	r2, r2, r1
    325a:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    325c:	2201      	movs	r2, #1
    325e:	e7eb      	b.n	3238 <ticker_job+0x50c>
    3260:	7f172b59 	.word	0x7f172b59
    3264:	ff172b5a 	.word	0xff172b5a
    3268:	01d1a94a 	.word	0x01d1a94a
    326c:	fe2e56b6 	.word	0xfe2e56b6
				ticker->ticks_to_expire_minus -=
    3270:	1ad3      	subs	r3, r2, r3
    3272:	6163      	str	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    3274:	60a1      	str	r1, [r4, #8]
    3276:	e73e      	b.n	30f6 <ticker_job+0x3ca>
		if (ticker_current->ticks_slot != 0) {
    3278:	6995      	ldr	r5, [r2, #24]
		ticks_to_expire -= ticks_to_expire_current;
    327a:	1a36      	subs	r6, r6, r0
		if (ticker_current->ticks_slot != 0) {
    327c:	2d00      	cmp	r5, #0
    327e:	d107      	bne.n	3290 <ticker_job+0x564>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3280:	9909      	ldr	r1, [sp, #36]	; 0x24
    3282:	4288      	cmp	r0, r1
    3284:	d200      	bcs.n	3288 <ticker_job+0x55c>
				ticks_slot_previous -= ticks_to_expire_current;
    3286:	1a0d      	subs	r5, r1, r0
		current = ticker_current->next;
    3288:	930d      	str	r3, [sp, #52]	; 0x34
    328a:	9509      	str	r5, [sp, #36]	; 0x24
    328c:	7813      	ldrb	r3, [r2, #0]
    328e:	e73e      	b.n	310e <ticker_job+0x3e2>
		if (ticker_current->ticks_slot != 0) {
    3290:	930a      	str	r3, [sp, #40]	; 0x28
    3292:	e7f9      	b.n	3288 <ticker_job+0x55c>
		ticker = &node[ticker_id_head];
    3294:	2228      	movs	r2, #40	; 0x28
    3296:	436a      	muls	r2, r5
    3298:	4462      	add	r2, ip
		ticks_to_expire = ticker->ticks_to_expire;
    329a:	6891      	ldr	r1, [r2, #8]
    329c:	9111      	str	r1, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    329e:	4281      	cmp	r1, r0
    32a0:	d207      	bcs.n	32b2 <ticker_job+0x586>
		if (ticker->ticks_slot) {
    32a2:	6991      	ldr	r1, [r2, #24]
    32a4:	2900      	cmp	r1, #0
    32a6:	d000      	beq.n	32aa <ticker_job+0x57e>
    32a8:	e742      	b.n	3130 <ticker_job+0x404>
		ticks_slot -= ticks_to_expire;
    32aa:	9911      	ldr	r1, [sp, #68]	; 0x44
		ticker_id_head = ticker->next;
    32ac:	7815      	ldrb	r5, [r2, #0]
		ticks_slot -= ticks_to_expire;
    32ae:	1a40      	subs	r0, r0, r1
    32b0:	e73b      	b.n	312a <ticker_job+0x3fe>
			return TICKER_NULL;
    32b2:	9d04      	ldr	r5, [sp, #16]
    32b4:	e73c      	b.n	3130 <ticker_job+0x404>
			node[previous].next = id;
    32b6:	2128      	movs	r1, #40	; 0x28
    32b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    32ba:	4668      	mov	r0, sp
    32bc:	434a      	muls	r2, r1
    32be:	4661      	mov	r1, ip
    32c0:	7a00      	ldrb	r0, [r0, #8]
    32c2:	5450      	strb	r0, [r2, r1]
    32c4:	e748      	b.n	3158 <ticker_job+0x42c>
	while (id_insert !=
    32c6:	9b02      	ldr	r3, [sp, #8]
    32c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32ca:	4293      	cmp	r3, r2
    32cc:	d100      	bne.n	32d0 <ticker_job+0x5a4>
    32ce:	e74b      	b.n	3168 <ticker_job+0x43c>
		if (id_collide != TICKER_NULL) {
    32d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    32d2:	2bff      	cmp	r3, #255	; 0xff
    32d4:	d0a2      	beq.n	321c <ticker_job+0x4f0>
    32d6:	001d      	movs	r5, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    32d8:	2628      	movs	r6, #40	; 0x28
    32da:	436e      	muls	r6, r5
    32dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
				skip_collide = 0;
    32de:	2200      	movs	r2, #0
			struct ticker_node *ticker_collide = &node[id_collide];
    32e0:	199e      	adds	r6, r3, r6
			if (ticker_collide->lazy_current >
    32e2:	8bf3      	ldrh	r3, [r6, #30]
			    ticker_collide->lazy_periodic) {
    32e4:	8bb1      	ldrh	r1, [r6, #28]
			if (ticker_collide->lazy_current >
    32e6:	428b      	cmp	r3, r1
    32e8:	d901      	bls.n	32ee <ticker_job+0x5c2>
				skip_collide = ticker_collide->lazy_current -
    32ea:	1a5b      	subs	r3, r3, r1
    32ec:	b29a      	uxth	r2, r3
			if (ticker_collide->ticks_periodic &&
    32ee:	6873      	ldr	r3, [r6, #4]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d093      	beq.n	321c <ticker_job+0x4f0>
    32f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    32f6:	429a      	cmp	r2, r3
    32f8:	d890      	bhi.n	321c <ticker_job+0x4f0>
			    skip_collide <= skip &&
    32fa:	78f2      	ldrb	r2, [r6, #3]
    32fc:	78e3      	ldrb	r3, [r4, #3]
    32fe:	429a      	cmp	r2, r3
    3300:	d28c      	bcs.n	321c <ticker_job+0x4f0>
					ticker_dequeue(instance, id_collide);
    3302:	0029      	movs	r1, r5
    3304:	0038      	movs	r0, r7
    3306:	f7ff fc6c 	bl	2be2 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    330a:	78b3      	ldrb	r3, [r6, #2]
				ticker_collide->ticks_to_expire =
    330c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
    330e:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
    3310:	466b      	mov	r3, sp
    3312:	791b      	ldrb	r3, [r3, #4]
    3314:	9501      	str	r5, [sp, #4]
    3316:	7033      	strb	r3, [r6, #0]
    3318:	e6ed      	b.n	30f6 <ticker_job+0x3ca>
			return TICKER_STATUS_FAILURE;
    331a:	2101      	movs	r1, #1
    331c:	e728      	b.n	3170 <ticker_job+0x444>
		user = &users[count_user];
    331e:	9b03      	ldr	r3, [sp, #12]
    3320:	00ec      	lsls	r4, r5, #3
    3322:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    3324:	6863      	ldr	r3, [r4, #4]
    3326:	9304      	str	r3, [sp, #16]
		while (user->first != user->last) {
    3328:	7863      	ldrb	r3, [r4, #1]
    332a:	78e2      	ldrb	r2, [r4, #3]
    332c:	429a      	cmp	r2, r3
    332e:	d102      	bne.n	3336 <ticker_job+0x60a>
    3330:	3d01      	subs	r5, #1
    3332:	b2ed      	uxtb	r5, r5
    3334:	e568      	b.n	2e08 <ticker_job+0xdc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3336:	2230      	movs	r2, #48	; 0x30
    3338:	4353      	muls	r3, r2
    333a:	9a04      	ldr	r2, [sp, #16]
    333c:	18d3      	adds	r3, r2, r3
	switch (uop->op) {
    333e:	781a      	ldrb	r2, [r3, #0]
    3340:	2a01      	cmp	r2, #1
    3342:	d026      	beq.n	3392 <ticker_job+0x666>
    3344:	2a02      	cmp	r2, #2
    3346:	d12b      	bne.n	33a0 <ticker_job+0x674>
		ticker_by_next_slot_get(instance,
    3348:	685a      	ldr	r2, [r3, #4]
    334a:	68d9      	ldr	r1, [r3, #12]
    334c:	4694      	mov	ip, r2
    334e:	9100      	str	r1, [sp, #0]
	node = instance->node;
    3350:	6839      	ldr	r1, [r7, #0]
		ticker_by_next_slot_get(instance,
    3352:	689a      	ldr	r2, [r3, #8]
	node = instance->node;
    3354:	9101      	str	r1, [sp, #4]
	_ticker_id_head = *ticker_id_head;
    3356:	4661      	mov	r1, ip
    3358:	7809      	ldrb	r1, [r1, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    335a:	29ff      	cmp	r1, #255	; 0xff
    335c:	d004      	beq.n	3368 <ticker_job+0x63c>
    335e:	6810      	ldr	r0, [r2, #0]
    3360:	0006      	movs	r6, r0
    3362:	6978      	ldr	r0, [r7, #20]
    3364:	4286      	cmp	r6, r0
    3366:	d024      	beq.n	33b2 <ticker_job+0x686>
		*ticks_current = instance->ticks_current;
    3368:	6978      	ldr	r0, [r7, #20]
		_ticker_id_head = instance->ticker_id_head;
    336a:	7f79      	ldrb	r1, [r7, #29]
		*ticks_current = instance->ticks_current;
    336c:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    336e:	2200      	movs	r2, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3370:	29ff      	cmp	r1, #255	; 0xff
    3372:	d00a      	beq.n	338a <ticker_job+0x65e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3374:	2028      	movs	r0, #40	; 0x28
    3376:	4348      	muls	r0, r1
    3378:	9e01      	ldr	r6, [sp, #4]
    337a:	1830      	adds	r0, r6, r0
    337c:	6886      	ldr	r6, [r0, #8]
    337e:	9602      	str	r6, [sp, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    3380:	6986      	ldr	r6, [r0, #24]
    3382:	2e00      	cmp	r6, #0
    3384:	d01c      	beq.n	33c0 <ticker_job+0x694>
		_ticks_to_expire += ticker->ticks_to_expire;
    3386:	9802      	ldr	r0, [sp, #8]
    3388:	1812      	adds	r2, r2, r0
	*ticker_id_head = _ticker_id_head;
    338a:	4660      	mov	r0, ip
    338c:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    338e:	9900      	ldr	r1, [sp, #0]
    3390:	600a      	str	r2, [r1, #0]
		uop->status = TICKER_STATUS_SUCCESS;
    3392:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    3394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3396:	6258      	str	r0, [r3, #36]	; 0x24
	if (fp_op_func) {
    3398:	4282      	cmp	r2, r0
    339a:	d001      	beq.n	33a0 <ticker_job+0x674>
		fp_op_func(uop->status, uop->op_context);
    339c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    339e:	4790      	blx	r2
			first = user->first + 1;
    33a0:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    33a2:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    33a4:	3301      	adds	r3, #1
    33a6:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    33a8:	429a      	cmp	r2, r3
    33aa:	d100      	bne.n	33ae <ticker_job+0x682>
				first = 0;
    33ac:	2300      	movs	r3, #0
			user->first = first;
    33ae:	7063      	strb	r3, [r4, #1]
    33b0:	e7ba      	b.n	3328 <ticker_job+0x5fc>
		ticker = &node[_ticker_id_head];
    33b2:	2028      	movs	r0, #40	; 0x28
    33b4:	4341      	muls	r1, r0
	_ticks_to_expire = *ticks_to_expire;
    33b6:	9a00      	ldr	r2, [sp, #0]
		_ticker_id_head = ticker->next;
    33b8:	9801      	ldr	r0, [sp, #4]
	_ticks_to_expire = *ticks_to_expire;
    33ba:	6812      	ldr	r2, [r2, #0]
		_ticker_id_head = ticker->next;
    33bc:	5c41      	ldrb	r1, [r0, r1]
    33be:	e7d7      	b.n	3370 <ticker_job+0x644>
		_ticks_to_expire += ticker->ticks_to_expire;
    33c0:	9902      	ldr	r1, [sp, #8]
    33c2:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    33c4:	7801      	ldrb	r1, [r0, #0]
    33c6:	e7d3      	b.n	3370 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
    33c8:	9b05      	ldr	r3, [sp, #20]
    33ca:	2bff      	cmp	r3, #255	; 0xff
    33cc:	d107      	bne.n	33de <ticker_job+0x6b2>
		ticks_current = cntr_cnt_get();
    33ce:	f005 fb01 	bl	89d4 <cntr_cnt_get>
    33d2:	0004      	movs	r4, r0
		if (cntr_start() == 0) {
    33d4:	f005 fad8 	bl	8988 <cntr_start>
    33d8:	2800      	cmp	r0, #0
    33da:	d100      	bne.n	33de <ticker_job+0x6b2>
			instance->ticks_current = ticks_current;
    33dc:	617c      	str	r4, [r7, #20]
	ticks_to_expire = ticker->ticks_to_expire;
    33de:	2328      	movs	r3, #40	; 0x28
    33e0:	260a      	movs	r6, #10
	ticker = &instance->node[instance->ticker_id_head];
    33e2:	7f7a      	ldrb	r2, [r7, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    33e4:	4353      	muls	r3, r2
    33e6:	683a      	ldr	r2, [r7, #0]
    33e8:	18d3      	adds	r3, r2, r3
    33ea:	689b      	ldr	r3, [r3, #8]
    33ec:	9300      	str	r3, [sp, #0]
		ctr = cntr_cnt_get();
    33ee:	f005 faf1 	bl	89d4 <cntr_cnt_get>
		cc = instance->ticks_current;
    33f2:	697b      	ldr	r3, [r7, #20]
		       ticks_to_expire : ticks_elapsed);
    33f4:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    33f6:	1ac4      	subs	r4, r0, r3
    33f8:	0224      	lsls	r4, r4, #8
    33fa:	0a24      	lsrs	r4, r4, #8
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    33fc:	3403      	adds	r4, #3
		ctr = cntr_cnt_get();
    33fe:	0005      	movs	r5, r0
		       ticks_to_expire : ticks_elapsed);
    3400:	4294      	cmp	r4, r2
    3402:	d200      	bcs.n	3406 <ticker_job+0x6da>
    3404:	0014      	movs	r4, r2
		cc += ((ticks_elapsed < ticks_to_expire) ?
    3406:	191c      	adds	r4, r3, r4
		cc &= 0x00FFFFFF;
    3408:	0224      	lsls	r4, r4, #8
    340a:	0a24      	lsrs	r4, r4, #8
		instance->trigger_set_cb(cc);
    340c:	0020      	movs	r0, r4
    340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3410:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3412:	f005 fadf 	bl	89d4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3416:	1b40      	subs	r0, r0, r5
    3418:	0200      	lsls	r0, r0, #8
    341a:	0a00      	lsrs	r0, r0, #8
    341c:	1b64      	subs	r4, r4, r5
    341e:	0224      	lsls	r4, r4, #8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3420:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3422:	0a24      	lsrs	r4, r4, #8
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3424:	42a0      	cmp	r0, r4
    3426:	d800      	bhi.n	342a <ticker_job+0x6fe>
    3428:	e4ff      	b.n	2e2a <ticker_job+0xfe>
    342a:	3e01      	subs	r6, #1
		LL_ASSERT(i);
    342c:	2e00      	cmp	r6, #0
    342e:	d1de      	bne.n	33ee <ticker_job+0x6c2>
    3430:	b662      	cpsie	i
    3432:	2004      	movs	r0, #4
    3434:	df02      	svc	2
	instance->job_guard = 0;
    3436:	2300      	movs	r3, #0
    3438:	77bb      	strb	r3, [r7, #30]
    343a:	e4ed      	b.n	2e18 <ticker_job+0xec>
	if (!pending) {
    343c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    343e:	2b00      	cmp	r3, #0
    3440:	d1f9      	bne.n	3436 <ticker_job+0x70a>
		flag_compare_update = 1;
    3442:	2301      	movs	r3, #1
    3444:	930b      	str	r3, [sp, #44]	; 0x2c
    3446:	e4da      	b.n	2dfe <ticker_job+0xd2>
	while (id_insert !=
    3448:	9b02      	ldr	r3, [sp, #8]
    344a:	42ab      	cmp	r3, r5
    344c:	d000      	beq.n	3450 <ticker_job+0x724>
    344e:	e743      	b.n	32d8 <ticker_job+0x5ac>
    3450:	e68a      	b.n	3168 <ticker_job+0x43c>
    3452:	46c0      	nop			; (mov r8, r8)

00003454 <ticker_init>:
{
    3454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3456:	0006      	movs	r6, r0
	instance->count_node = count_node;
    3458:	272c      	movs	r7, #44	; 0x2c
{
    345a:	ac08      	add	r4, sp, #32
    345c:	cc01      	ldmia	r4!, {r0}
	instance->count_node = count_node;
    345e:	4377      	muls	r7, r6
{
    3460:	7825      	ldrb	r5, [r4, #0]
	instance->count_node = count_node;
    3462:	4c17      	ldr	r4, [pc, #92]	; (34c0 <ticker_init+0x6c>)
{
    3464:	9001      	str	r0, [sp, #4]
	instance->node = node;
    3466:	513a      	str	r2, [r7, r4]
	instance->count_node = count_node;
    3468:	19e0      	adds	r0, r4, r7
		user_op_ += users[count_user].count_user_op;
    346a:	2730      	movs	r7, #48	; 0x30
	instance->count_node = count_node;
    346c:	7201      	strb	r1, [r0, #8]
	instance->user = user;
    346e:	9901      	ldr	r1, [sp, #4]
	instance->count_user = count_user;
    3470:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    3472:	6041      	str	r1, [r0, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
    3474:	990a      	ldr	r1, [sp, #40]	; 0x28
	while (count_user--) {
    3476:	3b01      	subs	r3, #1
    3478:	b2db      	uxtb	r3, r3
    347a:	2bff      	cmp	r3, #255	; 0xff
    347c:	d113      	bne.n	34a6 <ticker_init+0x52>
		return TICKER_STATUS_FAILURE;
    347e:	2001      	movs	r0, #1
	if (count_op) {
    3480:	2d00      	cmp	r5, #0
    3482:	d10f      	bne.n	34a4 <ticker_init+0x50>
	instance->caller_id_get_cb = caller_id_get_cb;
    3484:	302b      	adds	r0, #43	; 0x2b
    3486:	4370      	muls	r0, r6
    3488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    348a:	1820      	adds	r0, r4, r0
    348c:	6202      	str	r2, [r0, #32]
	instance->sched_cb = sched_cb;
    348e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	instance->ticker_id_head = TICKER_NULL;
    3490:	7743      	strb	r3, [r0, #29]
	instance->sched_cb = sched_cb;
    3492:	6242      	str	r2, [r0, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    3494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	instance->ticker_id_slot_previous = TICKER_NULL;
    3496:	7703      	strb	r3, [r0, #28]
	instance->trigger_set_cb = trigger_set_cb;
    3498:	6282      	str	r2, [r0, #40]	; 0x28
	instance->ticks_slot_previous = 0;
    349a:	6185      	str	r5, [r0, #24]
	instance->ticks_current = 0;
    349c:	6145      	str	r5, [r0, #20]
	instance->ticks_elapsed_first = 0;
    349e:	7285      	strb	r5, [r0, #10]
	instance->ticks_elapsed_last = 0;
    34a0:	72c5      	strb	r5, [r0, #11]
	return TICKER_STATUS_SUCCESS;
    34a2:	0028      	movs	r0, r5
}
    34a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    34a6:	9801      	ldr	r0, [sp, #4]
    34a8:	00da      	lsls	r2, r3, #3
    34aa:	1882      	adds	r2, r0, r2
		user_op_ += users[count_user].count_user_op;
    34ac:	0038      	movs	r0, r7
		users[count_user].user_op = user_op_;
    34ae:	6051      	str	r1, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    34b0:	7812      	ldrb	r2, [r2, #0]
    34b2:	4350      	muls	r0, r2
    34b4:	4684      	mov	ip, r0
		count_op -= users[count_user].count_user_op;
    34b6:	1aad      	subs	r5, r5, r2
		user_op_ += users[count_user].count_user_op;
    34b8:	4461      	add	r1, ip
		count_op -= users[count_user].count_user_op;
    34ba:	b2ed      	uxtb	r5, r5
    34bc:	e7db      	b.n	3476 <ticker_init+0x22>
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	200001f0 	.word	0x200001f0

000034c4 <ticker_trigger>:
	instance = &_instance[instance_index];
    34c4:	232c      	movs	r3, #44	; 0x2c
    34c6:	4358      	muls	r0, r3
    34c8:	4b05      	ldr	r3, [pc, #20]	; (34e0 <ticker_trigger+0x1c>)
{
    34ca:	b510      	push	{r4, lr}
	instance = &_instance[instance_index];
    34cc:	181b      	adds	r3, r3, r0
	if (instance->sched_cb) {
    34ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    34d0:	2c00      	cmp	r4, #0
    34d2:	d003      	beq.n	34dc <ticker_trigger+0x18>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    34d4:	2201      	movs	r2, #1
    34d6:	2103      	movs	r1, #3
    34d8:	2002      	movs	r0, #2
    34da:	47a0      	blx	r4
}
    34dc:	bd10      	pop	{r4, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	200001f0 	.word	0x200001f0

000034e4 <ticker_start>:
{
    34e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    34e6:	272c      	movs	r7, #44	; 0x2c
    34e8:	4378      	muls	r0, r7
    34ea:	4f1e      	ldr	r7, [pc, #120]	; (3564 <ticker_start+0x80>)
{
    34ec:	ac0b      	add	r4, sp, #44	; 0x2c
	user = &instance->user[user_id];
    34ee:	183f      	adds	r7, r7, r0
{
    34f0:	8824      	ldrh	r4, [r4, #0]
	user = &instance->user[user_id];
    34f2:	6878      	ldr	r0, [r7, #4]
    34f4:	00cd      	lsls	r5, r1, #3
    34f6:	1945      	adds	r5, r0, r5
{
    34f8:	9401      	str	r4, [sp, #4]
	last = user->last + 1;
    34fa:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    34fc:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    34fe:	1c66      	adds	r6, r4, #1
    3500:	b2f6      	uxtb	r6, r6
		last = 0;
    3502:	4286      	cmp	r6, r0
    3504:	4180      	sbcs	r0, r0
    3506:	4006      	ands	r6, r0
	if (last == user->first) {
    3508:	7868      	ldrb	r0, [r5, #1]
    350a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    350c:	2001      	movs	r0, #1
	if (last == user->first) {
    350e:	45b4      	cmp	ip, r6
    3510:	d026      	beq.n	3560 <ticker_start+0x7c>
	user_op = &user->user_op[user->last];
    3512:	302f      	adds	r0, #47	; 0x2f
    3514:	4344      	muls	r4, r0
    3516:	6868      	ldr	r0, [r5, #4]
    3518:	1904      	adds	r4, r0, r4
	user_op->params.start.ticks_at_start = ticks_anchor;
    351a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    351c:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_START;
    351e:	2003      	movs	r0, #3
	user_op->params.start.ticks_first = ticks_first;
    3520:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3522:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->id = ticker_id;
    3524:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3526:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    3528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_START;
    352a:	7020      	strb	r0, [r4, #0]
	user_op->params.start.remainder_periodic = remainder_periodic;
    352c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    352e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3530:	0008      	movs	r0, r1
	user_op->params.start.ticks_slot = ticks_slot;
    3532:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3534:	466b      	mov	r3, sp
    3536:	889b      	ldrh	r3, [r3, #4]
    3538:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    353a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    353c:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    353e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3540:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3542:	2302      	movs	r3, #2
    3544:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3548:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    354a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    354c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    354e:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3550:	6a3b      	ldr	r3, [r7, #32]
    3552:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    3554:	4798      	blx	r3
    3556:	003b      	movs	r3, r7
    3558:	2200      	movs	r2, #0
    355a:	2104      	movs	r1, #4
    355c:	47a8      	blx	r5
	return user_op->status;
    355e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	200001f0 	.word	0x200001f0

00003568 <ticker_update>:
{
    3568:	b5f0      	push	{r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    356a:	262c      	movs	r6, #44	; 0x2c
{
    356c:	b087      	sub	sp, #28
    356e:	469c      	mov	ip, r3
    3570:	ab0c      	add	r3, sp, #48	; 0x30
    3572:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    3574:	4370      	muls	r0, r6
{
    3576:	9301      	str	r3, [sp, #4]
    3578:	ab0d      	add	r3, sp, #52	; 0x34
    357a:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    357c:	4e21      	ldr	r6, [pc, #132]	; (3604 <ticker_update+0x9c>)
{
    357e:	9302      	str	r3, [sp, #8]
    3580:	ab0e      	add	r3, sp, #56	; 0x38
    3582:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    3584:	1836      	adds	r6, r6, r0
{
    3586:	9303      	str	r3, [sp, #12]
    3588:	ab0f      	add	r3, sp, #60	; 0x3c
    358a:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    358c:	00cd      	lsls	r5, r1, #3
{
    358e:	9304      	str	r3, [sp, #16]
    3590:	ab10      	add	r3, sp, #64	; 0x40
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	9305      	str	r3, [sp, #20]
	user = &instance->user[user_id];
    3596:	6873      	ldr	r3, [r6, #4]
    3598:	195d      	adds	r5, r3, r5
	last = user->last + 1;
    359a:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    359c:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    359e:	1c63      	adds	r3, r4, #1
    35a0:	b2db      	uxtb	r3, r3
		last = 0;
    35a2:	4283      	cmp	r3, r0
    35a4:	4180      	sbcs	r0, r0
	if (last == user->first) {
    35a6:	786f      	ldrb	r7, [r5, #1]
		last = 0;
    35a8:	4003      	ands	r3, r0
		return TICKER_STATUS_FAILURE;
    35aa:	2001      	movs	r0, #1
	if (last == user->first) {
    35ac:	429f      	cmp	r7, r3
    35ae:	d027      	beq.n	3600 <ticker_update+0x98>
	user_op = &user->user_op[user->last];
    35b0:	302f      	adds	r0, #47	; 0x2f
    35b2:	4344      	muls	r4, r0
    35b4:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    35b6:	2704      	movs	r7, #4
	user_op = &user->user_op[user->last];
    35b8:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    35ba:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    35bc:	4662      	mov	r2, ip
    35be:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    35c0:	466a      	mov	r2, sp
    35c2:	8892      	ldrh	r2, [r2, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    35c4:	7027      	strb	r7, [r4, #0]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    35c6:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    35c8:	466a      	mov	r2, sp
    35ca:	8912      	ldrh	r2, [r2, #8]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    35cc:	0008      	movs	r0, r1
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    35ce:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    35d0:	466a      	mov	r2, sp
    35d2:	8992      	ldrh	r2, [r2, #12]
    35d4:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    35d6:	466a      	mov	r2, sp
    35d8:	8a12      	ldrh	r2, [r2, #16]
    35da:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    35dc:	466a      	mov	r2, sp
    35de:	7d12      	ldrb	r2, [r2, #20]
    35e0:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    35e2:	2202      	movs	r2, #2
    35e4:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    35e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    35e8:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    35ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
    35ec:	62e2      	str	r2, [r4, #44]	; 0x2c
	user->last = last;
    35ee:	70eb      	strb	r3, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    35f0:	6a33      	ldr	r3, [r6, #32]
    35f2:	6a75      	ldr	r5, [r6, #36]	; 0x24
    35f4:	4798      	blx	r3
    35f6:	0033      	movs	r3, r6
    35f8:	2200      	movs	r2, #0
    35fa:	0039      	movs	r1, r7
    35fc:	47a8      	blx	r5
	return user_op->status;
    35fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3600:	b007      	add	sp, #28
    3602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3604:	200001f0 	.word	0x200001f0

00003608 <ticker_stop>:
{
    3608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    360a:	272c      	movs	r7, #44	; 0x2c
    360c:	4378      	muls	r0, r7
    360e:	4f14      	ldr	r7, [pc, #80]	; (3660 <ticker_stop+0x58>)
    3610:	00cd      	lsls	r5, r1, #3
    3612:	183f      	adds	r7, r7, r0
    3614:	6878      	ldr	r0, [r7, #4]
    3616:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    3618:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    361a:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    361c:	1c46      	adds	r6, r0, #1
    361e:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    3620:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    3622:	b2f6      	uxtb	r6, r6
		last = 0;
    3624:	4286      	cmp	r6, r0
    3626:	4180      	sbcs	r0, r0
    3628:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    362a:	2001      	movs	r0, #1
	if (last == user->first) {
    362c:	42b4      	cmp	r4, r6
    362e:	d016      	beq.n	365e <ticker_stop+0x56>
	user_op = &user->user_op[user->last];
    3630:	4660      	mov	r0, ip
    3632:	2430      	movs	r4, #48	; 0x30
    3634:	4344      	muls	r4, r0
    3636:	6868      	ldr	r0, [r5, #4]
    3638:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    363a:	7062      	strb	r2, [r4, #1]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    363c:	2005      	movs	r0, #5
	user_op->status = TICKER_STATUS_BUSY;
    363e:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    3640:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3642:	9b06      	ldr	r3, [sp, #24]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3644:	7020      	strb	r0, [r4, #0]
	user_op->status = TICKER_STATUS_BUSY;
    3646:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3648:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    364a:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    364c:	0008      	movs	r0, r1
    364e:	6a3b      	ldr	r3, [r7, #32]
    3650:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    3652:	4798      	blx	r3
    3654:	003b      	movs	r3, r7
    3656:	2200      	movs	r2, #0
    3658:	2104      	movs	r1, #4
    365a:	47a8      	blx	r5
	return user_op->status;
    365c:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    365e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3660:	200001f0 	.word	0x200001f0

00003664 <ticker_next_slot_get>:
{
    3664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    3666:	272c      	movs	r7, #44	; 0x2c
    3668:	4378      	muls	r0, r7
    366a:	4f18      	ldr	r7, [pc, #96]	; (36cc <ticker_next_slot_get+0x68>)
    366c:	00cd      	lsls	r5, r1, #3
    366e:	183f      	adds	r7, r7, r0
    3670:	6878      	ldr	r0, [r7, #4]
{
    3672:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    3674:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    3676:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    3678:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    367a:	1c46      	adds	r6, r0, #1
    367c:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    367e:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    3680:	b2f6      	uxtb	r6, r6
		last = 0;
    3682:	4286      	cmp	r6, r0
    3684:	4180      	sbcs	r0, r0
    3686:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    3688:	2001      	movs	r0, #1
	if (last == user->first) {
    368a:	42b4      	cmp	r4, r6
    368c:	d01c      	beq.n	36c8 <ticker_next_slot_get+0x64>
	user_op = &user->user_op[user->last];
    368e:	4660      	mov	r0, ip
    3690:	2430      	movs	r4, #48	; 0x30
	user_op->id = TICKER_NULL;
    3692:	23ff      	movs	r3, #255	; 0xff
	user_op = &user->user_op[user->last];
    3694:	4344      	muls	r4, r0
    3696:	6868      	ldr	r0, [r5, #4]
    3698:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    369a:	2002      	movs	r0, #2
	user_op->id = TICKER_NULL;
    369c:	7063      	strb	r3, [r4, #1]
	user_op->params.slot_get.ticks_current = ticks_current;
    369e:	9b01      	ldr	r3, [sp, #4]
	user_op->params.slot_get.ticker_id = ticker_id;
    36a0:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    36a2:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    36a4:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    36a6:	7020      	strb	r0, [r4, #0]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    36a8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    36aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
    36ac:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    36ae:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    36b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    36b2:	0008      	movs	r0, r1
	user_op->op_context = op_context;
    36b4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    36b6:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    36b8:	6a3b      	ldr	r3, [r7, #32]
    36ba:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    36bc:	4798      	blx	r3
    36be:	003b      	movs	r3, r7
    36c0:	2200      	movs	r2, #0
    36c2:	2104      	movs	r1, #4
    36c4:	47a8      	blx	r5
	return user_op->status;
    36c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    36c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    36ca:	46c0      	nop			; (mov r8, r8)
    36cc:	200001f0 	.word	0x200001f0

000036d0 <ticker_job_idle_get>:
{
    36d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    36d2:	272c      	movs	r7, #44	; 0x2c
    36d4:	4378      	muls	r0, r7
    36d6:	4f15      	ldr	r7, [pc, #84]	; (372c <ticker_job_idle_get+0x5c>)
    36d8:	00cd      	lsls	r5, r1, #3
    36da:	183f      	adds	r7, r7, r0
    36dc:	6878      	ldr	r0, [r7, #4]
{
    36de:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    36e0:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    36e2:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    36e4:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    36e6:	1c46      	adds	r6, r0, #1
    36e8:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    36ea:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    36ec:	b2f6      	uxtb	r6, r6
		last = 0;
    36ee:	4286      	cmp	r6, r0
    36f0:	4180      	sbcs	r0, r0
    36f2:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    36f4:	2001      	movs	r0, #1
	if (last == user->first) {
    36f6:	42b4      	cmp	r4, r6
    36f8:	d016      	beq.n	3728 <ticker_job_idle_get+0x58>
	user_op = &user->user_op[user->last];
    36fa:	4663      	mov	r3, ip
    36fc:	2430      	movs	r4, #48	; 0x30
    36fe:	435c      	muls	r4, r3
    3700:	686b      	ldr	r3, [r5, #4]
    3702:	191c      	adds	r4, r3, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3704:	7020      	strb	r0, [r4, #0]
	user_op->op_context = op_context;
    3706:	9b01      	ldr	r3, [sp, #4]
	user_op->id = TICKER_NULL;
    3708:	30fe      	adds	r0, #254	; 0xfe
    370a:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    370c:	38fd      	subs	r0, #253	; 0xfd
    370e:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3710:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3712:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3714:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3716:	0008      	movs	r0, r1
    3718:	6a3b      	ldr	r3, [r7, #32]
    371a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    371c:	4798      	blx	r3
    371e:	003b      	movs	r3, r7
    3720:	2200      	movs	r2, #0
    3722:	2104      	movs	r1, #4
    3724:	47a8      	blx	r5
	return user_op->status;
    3726:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	200001f0 	.word	0x200001f0

00003730 <ticker_job_sched>:
{
    3730:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3732:	242c      	movs	r4, #44	; 0x2c
    3734:	4360      	muls	r0, r4
    3736:	4c05      	ldr	r4, [pc, #20]	; (374c <ticker_job_sched+0x1c>)
    3738:	1824      	adds	r4, r4, r0
    373a:	6a23      	ldr	r3, [r4, #32]
    373c:	0008      	movs	r0, r1
    373e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3740:	4798      	blx	r3
    3742:	0023      	movs	r3, r4
    3744:	2200      	movs	r2, #0
    3746:	2104      	movs	r1, #4
    3748:	47a8      	blx	r5
}
    374a:	bd70      	pop	{r4, r5, r6, pc}
    374c:	200001f0 	.word	0x200001f0

00003750 <ticker_ticks_now_get>:
{
    3750:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    3752:	f005 f93f 	bl	89d4 <cntr_cnt_get>
}
    3756:	bd10      	pop	{r4, pc}

00003758 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3758:	1a40      	subs	r0, r0, r1
    375a:	0200      	lsls	r0, r0, #8
    375c:	0a00      	lsrs	r0, r0, #8
}
    375e:	4770      	bx	lr

00003760 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    3760:	0002      	movs	r2, r0
    3762:	b510      	push	{r4, lr}
    3764:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
    3766:	2300      	movs	r3, #0
	if (addr_type > 1) {
    3768:	2a01      	cmp	r2, #1
    376a:	d80b      	bhi.n	3784 <ll_addr_get+0x24>
    376c:	4c06      	ldr	r4, [pc, #24]	; (3788 <ll_addr_get+0x28>)
	}

	if (addr_type) {
    376e:	429a      	cmp	r2, r3
    3770:	d100      	bne.n	3774 <ll_addr_get+0x14>
    3772:	4c06      	ldr	r4, [pc, #24]	; (378c <ll_addr_get+0x2c>)

	if (bdaddr) {
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    3774:	0023      	movs	r3, r4
	if (bdaddr) {
    3776:	2800      	cmp	r0, #0
    3778:	d004      	beq.n	3784 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    377a:	2206      	movs	r2, #6
    377c:	0021      	movs	r1, r4
    377e:	f7fc ff73 	bl	668 <memcpy>
	return pub_addr;
    3782:	0023      	movs	r3, r4
}
    3784:	0018      	movs	r0, r3
    3786:	bd10      	pop	{r4, pc}
    3788:	2000024e 	.word	0x2000024e
    378c:	20000248 	.word	0x20000248

00003790 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    3790:	b570      	push	{r4, r5, r6, lr}
    3792:	0006      	movs	r6, r0
    3794:	000d      	movs	r5, r1
	if (ll_adv_is_enabled() ||
    3796:	f004 fa65 	bl	7c64 <ll_adv_is_enabled>
    379a:	1e04      	subs	r4, r0, #0
    379c:	d002      	beq.n	37a4 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    379e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    37a0:	0020      	movs	r0, r4
    37a2:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    37a4:	f004 fa72 	bl	7c8c <ll_scan_is_enabled>
    37a8:	2206      	movs	r2, #6
	if (ll_adv_is_enabled() ||
    37aa:	4210      	tst	r0, r2
    37ac:	d1f7      	bne.n	379e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    37ae:	0029      	movs	r1, r5
    37b0:	4803      	ldr	r0, [pc, #12]	; (37c0 <ll_addr_set+0x30>)
	if (addr_type) {
    37b2:	2e00      	cmp	r6, #0
    37b4:	d100      	bne.n	37b8 <ll_addr_set+0x28>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    37b6:	4803      	ldr	r0, [pc, #12]	; (37c4 <ll_addr_set+0x34>)
    37b8:	f7fc ff56 	bl	668 <memcpy>
    37bc:	e7f0      	b.n	37a0 <ll_addr_set+0x10>
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	2000024e 	.word	0x2000024e
    37c4:	20000248 	.word	0x20000248

000037c8 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    37c8:	2300      	movs	r3, #0
    37ca:	7003      	strb	r3, [r0, #0]
	*max = 0;
    37cc:	700b      	strb	r3, [r1, #0]
}
    37ce:	4770      	bx	lr

000037d0 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    37d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    37d2:	2701      	movs	r7, #1
    37d4:	0006      	movs	r6, r0
    37d6:	000c      	movs	r4, r1
    37d8:	427f      	negs	r7, r7
	while (len) {
    37da:	2c00      	cmp	r4, #0
    37dc:	d101      	bne.n	37e2 <bt_rand+0x12>
			cpu_sleep();
		}
	}

	return 0;
}
    37de:	2000      	movs	r0, #0
    37e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37e2:	4d09      	ldr	r5, [pc, #36]	; (3808 <bt_rand+0x38>)
    37e4:	0039      	movs	r1, r7
    37e6:	0028      	movs	r0, r5
    37e8:	f006 f904 	bl	99f4 <_impl_k_mutex_lock>
		len = rand_get(len, buf);
    37ec:	0020      	movs	r0, r4
    37ee:	0031      	movs	r1, r6
    37f0:	f005 f9d2 	bl	8b98 <rand_get>
    37f4:	0004      	movs	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    37f6:	0028      	movs	r0, r5
    37f8:	f006 f95e 	bl	9ab8 <_impl_k_mutex_unlock>
		if (len) {
    37fc:	2c00      	cmp	r4, #0
    37fe:	d0ee      	beq.n	37de <bt_rand+0xe>
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    3800:	bf20      	wfe
	__SEV();
    3802:	bf40      	sev
	__WFE();
    3804:	bf20      	wfe
    3806:	e7e8      	b.n	37da <bt_rand+0xa>
    3808:	200024e8 	.word	0x200024e8

0000380c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    380c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    380e:	4802      	ldr	r0, [pc, #8]	; (3818 <_hci_driver_init+0xc>)
    3810:	f7fe ffd2 	bl	27b8 <bt_hci_driver_register>

	return 0;
}
    3814:	2000      	movs	r0, #0
    3816:	bd10      	pop	{r4, pc}
    3818:	0000b128 	.word	0x0000b128

0000381c <hci_driver_send>:
{
    381c:	b510      	push	{r4, lr}
	if (!buf->len) {
    381e:	8983      	ldrh	r3, [r0, #12]
{
    3820:	0004      	movs	r4, r0
	if (!buf->len) {
    3822:	2b00      	cmp	r3, #0
    3824:	d00d      	beq.n	3842 <hci_driver_send+0x26>
	switch (type) {
    3826:	7d03      	ldrb	r3, [r0, #20]
    3828:	2b00      	cmp	r3, #0
    382a:	d10a      	bne.n	3842 <hci_driver_send+0x26>
	evt = hci_cmd_handle(buf);
    382c:	f000 f978 	bl	3b20 <hci_cmd_handle>
	if (evt) {
    3830:	2800      	cmp	r0, #0
    3832:	d001      	beq.n	3838 <hci_driver_send+0x1c>
		bt_recv_prio(evt);
    3834:	f7fe ff7c 	bl	2730 <bt_recv_prio>
		net_buf_unref(buf);
    3838:	0020      	movs	r0, r4
    383a:	f005 fed5 	bl	95e8 <net_buf_unref>
	return err;
    383e:	2000      	movs	r0, #0
}
    3840:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3842:	2016      	movs	r0, #22
    3844:	4240      	negs	r0, r0
    3846:	e7fb      	b.n	3840 <hci_driver_send+0x24>

00003848 <recv_thread>:
{
    3848:	b537      	push	{r0, r1, r2, r4, r5, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    384a:	2501      	movs	r5, #1
    384c:	426d      	negs	r5, r5
    384e:	0029      	movs	r1, r5
    3850:	4819      	ldr	r0, [pc, #100]	; (38b8 <recv_thread+0x70>)
    3852:	f006 f9fb 	bl	9c4c <k_queue_get>
    3856:	1e04      	subs	r4, r0, #0
		if (node_rx && !buf) {
    3858:	d025      	beq.n	38a6 <recv_thread+0x5e>
	s8_t class = hci_get_class(node_rx);
    385a:	f000 fd03 	bl	4264 <hci_get_class>
	switch (class) {
    385e:	b2c3      	uxtb	r3, r0
    3860:	9401      	str	r4, [sp, #4]
    3862:	2b02      	cmp	r3, #2
    3864:	d822      	bhi.n	38ac <recv_thread+0x64>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    3866:	2100      	movs	r1, #0
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    3868:	2801      	cmp	r0, #1
    386a:	d001      	beq.n	3870 <recv_thread+0x28>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    386c:	0029      	movs	r1, r5
    386e:	2001      	movs	r0, #1
    3870:	f7fe ffb8 	bl	27e4 <bt_buf_get_rx>
    3874:	1e04      	subs	r4, r0, #0
		if (buf) {
    3876:	d003      	beq.n	3880 <recv_thread+0x38>
			hci_evt_encode(node_rx, buf);
    3878:	0001      	movs	r1, r0
    387a:	9801      	ldr	r0, [sp, #4]
    387c:	f000 fc1e 	bl	40bc <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3880:	9b01      	ldr	r3, [sp, #4]
    3882:	2100      	movs	r1, #0
    3884:	88d8      	ldrh	r0, [r3, #6]
    3886:	f004 facf 	bl	7e28 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    388a:	2200      	movs	r2, #0
    388c:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    388e:	a801      	add	r0, sp, #4
	node_rx->hdr.onion.next = 0;
    3890:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    3892:	f004 fa65 	bl	7d60 <ll_rx_mem_release>
		if (buf) {
    3896:	2c00      	cmp	r4, #0
    3898:	d005      	beq.n	38a6 <recv_thread+0x5e>
			if (buf->len) {
    389a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    389c:	0020      	movs	r0, r4
			if (buf->len) {
    389e:	2b00      	cmp	r3, #0
    38a0:	d007      	beq.n	38b2 <recv_thread+0x6a>
				bt_recv(buf);
    38a2:	f7fe fe97 	bl	25d4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    38a6:	f006 fb6f 	bl	9f88 <_impl_k_yield>
    38aa:	e7d0      	b.n	384e <recv_thread+0x6>
		LL_ASSERT(0);
    38ac:	b662      	cpsie	i
    38ae:	2004      	movs	r0, #4
    38b0:	df02      	svc	2
				net_buf_unref(buf);
    38b2:	f005 fe99 	bl	95e8 <net_buf_unref>
    38b6:	e7f6      	b.n	38a6 <recv_thread+0x5e>
    38b8:	200024fc 	.word	0x200024fc

000038bc <prio_recv_thread>:
{
    38bc:	b513      	push	{r0, r1, r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    38be:	2401      	movs	r4, #1
    38c0:	4264      	negs	r4, r4
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    38c2:	466b      	mov	r3, sp
    38c4:	a801      	add	r0, sp, #4
    38c6:	1c99      	adds	r1, r3, #2
    38c8:	f004 fa10 	bl	7cec <ll_rx_get>
    38cc:	2800      	cmp	r0, #0
    38ce:	d1f8      	bne.n	38c2 <prio_recv_thread+0x6>
		if (node_rx) {
    38d0:	9b01      	ldr	r3, [sp, #4]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d006      	beq.n	38e4 <prio_recv_thread+0x28>
			ll_rx_dequeue();
    38d6:	f004 fc85 	bl	81e4 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    38da:	9901      	ldr	r1, [sp, #4]
    38dc:	4804      	ldr	r0, [pc, #16]	; (38f0 <prio_recv_thread+0x34>)
    38de:	f006 f98e 	bl	9bfe <k_queue_append>
    38e2:	e7ee      	b.n	38c2 <prio_recv_thread+0x6>
    38e4:	0021      	movs	r1, r4
    38e6:	4803      	ldr	r0, [pc, #12]	; (38f4 <prio_recv_thread+0x38>)
    38e8:	f006 fc28 	bl	a13c <_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    38ec:	e7e9      	b.n	38c2 <prio_recv_thread+0x6>
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	200024fc 	.word	0x200024fc
    38f4:	200024d0 	.word	0x200024d0

000038f8 <hci_driver_open>:
{
    38f8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    38fa:	4814      	ldr	r0, [pc, #80]	; (394c <hci_driver_open+0x54>)
{
    38fc:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    38fe:	f004 fd15 	bl	832c <ll_init>
    3902:	1e04      	subs	r4, r0, #0
	if (err) {
    3904:	d11f      	bne.n	3946 <hci_driver_open+0x4e>
	hci_init(NULL);
    3906:	f000 fccd 	bl	42a4 <hci_init>

    390a:	230a      	movs	r3, #10
    390c:	22e0      	movs	r2, #224	; 0xe0
    390e:	425b      	negs	r3, r3
    3910:	9303      	str	r3, [sp, #12]
    3912:	0052      	lsls	r2, r2, #1
    3914:	4b0e      	ldr	r3, [pc, #56]	; (3950 <hci_driver_open+0x58>)
    3916:	490f      	ldr	r1, [pc, #60]	; (3954 <hci_driver_open+0x5c>)
    3918:	9405      	str	r4, [sp, #20]
    391a:	9404      	str	r4, [sp, #16]
    391c:	9402      	str	r4, [sp, #8]
    391e:	9401      	str	r4, [sp, #4]
    3920:	9400      	str	r4, [sp, #0]
    3922:	480d      	ldr	r0, [pc, #52]	; (3958 <hci_driver_open+0x60>)
    3924:	f006 fdda 	bl	a4dc <_impl_k_thread_create>
    3928:	2308      	movs	r3, #8
    392a:	2280      	movs	r2, #128	; 0x80
    392c:	425b      	negs	r3, r3
    392e:	9303      	str	r3, [sp, #12]
    3930:	9405      	str	r4, [sp, #20]
    3932:	9404      	str	r4, [sp, #16]
    3934:	9402      	str	r4, [sp, #8]
    3936:	9401      	str	r4, [sp, #4]
    3938:	9400      	str	r4, [sp, #0]
    393a:	4b08      	ldr	r3, [pc, #32]	; (395c <hci_driver_open+0x64>)
    393c:	00d2      	lsls	r2, r2, #3
    393e:	4908      	ldr	r1, [pc, #32]	; (3960 <hci_driver_open+0x68>)
    3940:	4808      	ldr	r0, [pc, #32]	; (3964 <hci_driver_open+0x6c>)
    3942:	f006 fdcb 	bl	a4dc <_impl_k_thread_create>
}
    3946:	0020      	movs	r0, r4
    3948:	b006      	add	sp, #24
    394a:	bd10      	pop	{r4, pc}
    394c:	200024d0 	.word	0x200024d0
    3950:	000038bd 	.word	0x000038bd
    3954:	20001018 	.word	0x20001018
    3958:	20000d38 	.word	0x20000d38
    395c:	00003849 	.word	0x00003849
    3960:	200011d8 	.word	0x200011d8
    3964:	20000cd8 	.word	0x20000cd8

00003968 <sys_put_le32>:
	dst[1] = val >> 8;
    3968:	0a03      	lsrs	r3, r0, #8
	dst[0] = val;
    396a:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    396c:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    396e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    3970:	0a00      	lsrs	r0, r0, #8
    3972:	704b      	strb	r3, [r1, #1]
    3974:	70c8      	strb	r0, [r1, #3]
}
    3976:	4770      	bx	lr

00003978 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    3978:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    397a:	3008      	adds	r0, #8
{
    397c:	000d      	movs	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    397e:	2102      	movs	r1, #2
{
    3980:	0014      	movs	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    3982:	f005 fe67 	bl	9654 <net_buf_simple_add>
	hdr->evt = evt;
    3986:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    3988:	7044      	strb	r4, [r0, #1]
}
    398a:	bd70      	pop	{r4, r5, r6, pc}

0000398c <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    398c:	b570      	push	{r4, r5, r6, lr}
    398e:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3990:	2001      	movs	r0, #1
{
    3992:	000d      	movs	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3994:	4240      	negs	r0, r0
    3996:	f7fe ff35 	bl	2804 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    399a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    399c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    399e:	b2d2      	uxtb	r2, r2
    39a0:	210e      	movs	r1, #14
    39a2:	f7ff ffe9 	bl	3978 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    39a6:	6820      	ldr	r0, [r4, #0]
    39a8:	2103      	movs	r1, #3
    39aa:	3008      	adds	r0, #8
    39ac:	f005 fe52 	bl	9654 <net_buf_simple_add>
	cc->ncmd = 1;
    39b0:	2301      	movs	r3, #1
    39b2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    39b4:	4b05      	ldr	r3, [pc, #20]	; (39cc <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    39b6:	0029      	movs	r1, r5
	cc->opcode = sys_cpu_to_le16(_opcode);
    39b8:	781a      	ldrb	r2, [r3, #0]
    39ba:	785b      	ldrb	r3, [r3, #1]
    39bc:	7042      	strb	r2, [r0, #1]
    39be:	7083      	strb	r3, [r0, #2]
	return net_buf_add(*buf, plen);
    39c0:	6820      	ldr	r0, [r4, #0]
    39c2:	3008      	adds	r0, #8
    39c4:	f005 fe46 	bl	9654 <net_buf_simple_add>
}
    39c8:	bd70      	pop	{r4, r5, r6, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	20000254 	.word	0x20000254

000039d0 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    39d0:	b570      	push	{r4, r5, r6, lr}
    39d2:	0004      	movs	r4, r0
    39d4:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    39d6:	3201      	adds	r2, #1
{
    39d8:	000e      	movs	r6, r1
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    39da:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    39dc:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    39de:	213e      	movs	r1, #62	; 0x3e
    39e0:	f7ff ffca 	bl	3978 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    39e4:	2101      	movs	r1, #1
    39e6:	0020      	movs	r0, r4
    39e8:	f005 fe34 	bl	9654 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    39ec:	0029      	movs	r1, r5
	me->subevent = subevt;
    39ee:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    39f0:	0020      	movs	r0, r4
    39f2:	f005 fe2f 	bl	9654 <net_buf_simple_add>
}
    39f6:	bd70      	pop	{r4, r5, r6, pc}

000039f8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    39f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39fa:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    39fc:	4a10      	ldr	r2, [pc, #64]	; (3a40 <le_remote_feat_complete+0x48>)
{
    39fe:	0007      	movs	r7, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a00:	6852      	ldr	r2, [r2, #4]
{
    3a02:	000e      	movs	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a04:	0092      	lsls	r2, r2, #2
    3a06:	d514      	bpl.n	3a32 <le_remote_feat_complete+0x3a>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    3a08:	2508      	movs	r5, #8
    3a0a:	4a0e      	ldr	r2, [pc, #56]	; (3a44 <le_remote_feat_complete+0x4c>)
    3a0c:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a0e:	422a      	tst	r2, r5
    3a10:	d00f      	beq.n	3a32 <le_remote_feat_complete+0x3a>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3a12:	220b      	movs	r2, #11
    3a14:	2104      	movs	r1, #4
    3a16:	0018      	movs	r0, r3
    3a18:	f7ff ffda 	bl	39d0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    3a1c:	7044      	strb	r4, [r0, #1]
    3a1e:	40ec      	lsrs	r4, r5
	sep->status = status;
    3a20:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3a22:	7084      	strb	r4, [r0, #2]
    3a24:	3003      	adds	r0, #3
	if (!status) {
    3a26:	2f00      	cmp	r7, #0
    3a28:	d104      	bne.n	3a34 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->llctrl.feature_rsp.features[0],
    3a2a:	1d31      	adds	r1, r6, #4
		memcpy(&sep->features[0],
    3a2c:	002a      	movs	r2, r5
    3a2e:	f7fc fe1b 	bl	668 <memcpy>
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3a34:	002a      	movs	r2, r5
    3a36:	2100      	movs	r1, #0
    3a38:	f7fc fe40 	bl	6bc <memset>
    3a3c:	e7f9      	b.n	3a32 <le_remote_feat_complete+0x3a>
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	200022d8 	.word	0x200022d8
    3a44:	200022e0 	.word	0x200022e0

00003a48 <bt_addr_le_to_str.constprop.42>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3a48:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3a4a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3a4c:	b08a      	sub	sp, #40	; 0x28
    3a4e:	0004      	movs	r4, r0
    3a50:	000e      	movs	r6, r1
    3a52:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    3a54:	2b03      	cmp	r3, #3
    3a56:	d821      	bhi.n	3a9c <bt_addr_le_to_str.constprop.42+0x54>
    3a58:	0018      	movs	r0, r3
    3a5a:	f7fc fb97 	bl	18c <__gnu_thumb1_case_uqi>
    3a5e:	1902      	.short	0x1902
    3a60:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3a62:	4911      	ldr	r1, [pc, #68]	; (3aa8 <bt_addr_le_to_str.constprop.42+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3a64:	0028      	movs	r0, r5
    3a66:	f7fc fdd7 	bl	618 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3a6a:	7862      	ldrb	r2, [r4, #1]
    3a6c:	79a3      	ldrb	r3, [r4, #6]
    3a6e:	9204      	str	r2, [sp, #16]
    3a70:	78a2      	ldrb	r2, [r4, #2]
    3a72:	9505      	str	r5, [sp, #20]
    3a74:	9203      	str	r2, [sp, #12]
    3a76:	78e2      	ldrb	r2, [r4, #3]
    3a78:	211b      	movs	r1, #27
    3a7a:	9202      	str	r2, [sp, #8]
    3a7c:	7922      	ldrb	r2, [r4, #4]
    3a7e:	0030      	movs	r0, r6
    3a80:	9201      	str	r2, [sp, #4]
    3a82:	7962      	ldrb	r2, [r4, #5]
    3a84:	9200      	str	r2, [sp, #0]
    3a86:	4a09      	ldr	r2, [pc, #36]	; (3aac <bt_addr_le_to_str.constprop.42+0x64>)
    3a88:	f7fd fb0a 	bl	10a0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    3a8c:	b00a      	add	sp, #40	; 0x28
    3a8e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    3a90:	4907      	ldr	r1, [pc, #28]	; (3ab0 <bt_addr_le_to_str.constprop.42+0x68>)
    3a92:	e7e7      	b.n	3a64 <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "public id");
    3a94:	4907      	ldr	r1, [pc, #28]	; (3ab4 <bt_addr_le_to_str.constprop.42+0x6c>)
    3a96:	e7e5      	b.n	3a64 <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "random id");
    3a98:	4907      	ldr	r1, [pc, #28]	; (3ab8 <bt_addr_le_to_str.constprop.42+0x70>)
    3a9a:	e7e3      	b.n	3a64 <bt_addr_le_to_str.constprop.42+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3a9c:	4a07      	ldr	r2, [pc, #28]	; (3abc <bt_addr_le_to_str.constprop.42+0x74>)
    3a9e:	210a      	movs	r1, #10
    3aa0:	0028      	movs	r0, r5
    3aa2:	f7fd fafd 	bl	10a0 <snprintk>
    3aa6:	e7e0      	b.n	3a6a <bt_addr_le_to_str.constprop.42+0x22>
    3aa8:	0000b143 	.word	0x0000b143
    3aac:	0000b16c 	.word	0x0000b16c
    3ab0:	0000b14a 	.word	0x0000b14a
    3ab4:	0000b151 	.word	0x0000b151
    3ab8:	0000b15b 	.word	0x0000b15b
    3abc:	0000b165 	.word	0x0000b165

00003ac0 <le_adv_ext_report.isra.37.part.38>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3ac0:	b510      	push	{r4, lr}
		if (!p->ext_hdr_len) {
    3ac2:	7883      	ldrb	r3, [r0, #2]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3ac4:	b08a      	sub	sp, #40	; 0x28
		if (!p->ext_hdr_len) {
    3ac6:	069b      	lsls	r3, r3, #26
    3ac8:	d011      	beq.n	3aee <le_adv_ext_report.isra.37.part.38+0x2e>
		if (h->adv_addr) {
    3aca:	78c3      	ldrb	r3, [r0, #3]
    3acc:	07db      	lsls	r3, r3, #31
    3ace:	d50e      	bpl.n	3aee <le_adv_ext_report.isra.37.part.38+0x2e>
			addr.type = adv->tx_addr;
    3ad0:	7803      	ldrb	r3, [r0, #0]
    3ad2:	ac01      	add	r4, sp, #4
    3ad4:	065b      	lsls	r3, r3, #25
    3ad6:	0fdb      	lsrs	r3, r3, #31
    3ad8:	7023      	strb	r3, [r4, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    3ada:	466b      	mov	r3, sp
		ptr = (u8_t *)h + sizeof(*h);
    3adc:	1d01      	adds	r1, r0, #4
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    3ade:	2206      	movs	r2, #6
    3ae0:	1d58      	adds	r0, r3, #5
    3ae2:	f7fc fdc1 	bl	668 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3ae6:	a903      	add	r1, sp, #12
    3ae8:	0020      	movs	r0, r4
    3aea:	f7ff ffad 	bl	3a48 <bt_addr_le_to_str.constprop.42>
}
    3aee:	b00a      	add	sp, #40	; 0x28
    3af0:	bd10      	pop	{r4, pc}

00003af2 <sys_get_le64>:
{
    3af2:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3af4:	785a      	ldrb	r2, [r3, #1]
    3af6:	7800      	ldrb	r0, [r0, #0]
    3af8:	0212      	lsls	r2, r2, #8
    3afa:	4302      	orrs	r2, r0
    3afc:	7898      	ldrb	r0, [r3, #2]
    3afe:	7919      	ldrb	r1, [r3, #4]
    3b00:	0400      	lsls	r0, r0, #16
    3b02:	4302      	orrs	r2, r0
    3b04:	78d8      	ldrb	r0, [r3, #3]
    3b06:	0600      	lsls	r0, r0, #24
    3b08:	4310      	orrs	r0, r2
    3b0a:	795a      	ldrb	r2, [r3, #5]
    3b0c:	0212      	lsls	r2, r2, #8
    3b0e:	430a      	orrs	r2, r1
    3b10:	7999      	ldrb	r1, [r3, #6]
    3b12:	0409      	lsls	r1, r1, #16
    3b14:	430a      	orrs	r2, r1
    3b16:	79d9      	ldrb	r1, [r3, #7]
    3b18:	0609      	lsls	r1, r1, #24
    3b1a:	4311      	orrs	r1, r2
}
    3b1c:	4770      	bx	lr
	...

00003b20 <hci_cmd_handle>:
{
    3b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *evt = NULL;
    3b22:	2600      	movs	r6, #0
{
    3b24:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    3b26:	960d      	str	r6, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    3b28:	8981      	ldrh	r1, [r0, #12]
{
    3b2a:	0005      	movs	r5, r0
	if (cmd->len < sizeof(*chdr)) {
    3b2c:	2902      	cmp	r1, #2
    3b2e:	d802      	bhi.n	3b36 <hci_cmd_handle+0x16>
		return NULL;
    3b30:	2000      	movs	r0, #0
}
    3b32:	b019      	add	sp, #100	; 0x64
    3b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    3b36:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3b38:	4cc0      	ldr	r4, [pc, #768]	; (3e3c <hci_cmd_handle+0x31c>)
    3b3a:	7853      	ldrb	r3, [r2, #1]
    3b3c:	7810      	ldrb	r0, [r2, #0]
    3b3e:	021b      	lsls	r3, r3, #8
    3b40:	4303      	orrs	r3, r0
    3b42:	8023      	strh	r3, [r4, #0]
	if (cmd->len < chdr->param_len) {
    3b44:	7893      	ldrb	r3, [r2, #2]
    3b46:	428b      	cmp	r3, r1
    3b48:	d8f2      	bhi.n	3b30 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    3b4a:	0028      	movs	r0, r5
    3b4c:	2103      	movs	r1, #3
    3b4e:	3008      	adds	r0, #8
    3b50:	f005 fd91 	bl	9676 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    3b54:	8823      	ldrh	r3, [r4, #0]
    3b56:	059c      	lsls	r4, r3, #22
    3b58:	0da4      	lsrs	r4, r4, #22
	switch (BT_OGF(_opcode)) {
    3b5a:	0a9b      	lsrs	r3, r3, #10
    3b5c:	2b04      	cmp	r3, #4
    3b5e:	d059      	beq.n	3c14 <hci_cmd_handle+0xf4>
    3b60:	d807      	bhi.n	3b72 <hci_cmd_handle+0x52>
    3b62:	2b03      	cmp	r3, #3
    3b64:	d019      	beq.n	3b9a <hci_cmd_handle+0x7a>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    3b66:	2101      	movs	r1, #1
    3b68:	a80d      	add	r0, sp, #52	; 0x34
    3b6a:	f7ff ff0f 	bl	398c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3b6e:	2301      	movs	r3, #1
    3b70:	e0da      	b.n	3d28 <hci_cmd_handle+0x208>
	switch (BT_OGF(_opcode)) {
    3b72:	2b08      	cmp	r3, #8
    3b74:	d100      	bne.n	3b78 <hci_cmd_handle+0x58>
    3b76:	e0bd      	b.n	3cf4 <hci_cmd_handle+0x1d4>
    3b78:	2b3f      	cmp	r3, #63	; 0x3f
    3b7a:	d1f4      	bne.n	3b66 <hci_cmd_handle+0x46>
	switch (ocf) {
    3b7c:	1e60      	subs	r0, r4, #1
    3b7e:	2809      	cmp	r0, #9
    3b80:	d8f1      	bhi.n	3b66 <hci_cmd_handle+0x46>
    3b82:	f7fc fb0d 	bl	1a0 <__gnu_thumb1_case_shi>
    3b86:	01ad      	.short	0x01ad
    3b88:	01d801c3 	.word	0x01d801c3
    3b8c:	fff0fff0 	.word	0xfff0fff0
    3b90:	fff001f1 	.word	0xfff001f1
    3b94:	01f601e3 	.word	0x01f601e3
    3b98:	0228      	.short	0x0228
	switch (ocf) {
    3b9a:	2c03      	cmp	r4, #3
    3b9c:	d013      	beq.n	3bc6 <hci_cmd_handle+0xa6>
    3b9e:	d808      	bhi.n	3bb2 <hci_cmd_handle+0x92>
    3ba0:	2c01      	cmp	r4, #1
    3ba2:	d1e0      	bne.n	3b66 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    3ba4:	68a8      	ldr	r0, [r5, #8]
    3ba6:	f7ff ffa4 	bl	3af2 <sys_get_le64>
    3baa:	4ba5      	ldr	r3, [pc, #660]	; (3e40 <hci_cmd_handle+0x320>)
    3bac:	6018      	str	r0, [r3, #0]
    3bae:	6059      	str	r1, [r3, #4]
    3bb0:	e003      	b.n	3bba <hci_cmd_handle+0x9a>
	switch (ocf) {
    3bb2:	2c2d      	cmp	r4, #45	; 0x2d
    3bb4:	d015      	beq.n	3be2 <hci_cmd_handle+0xc2>
    3bb6:	2c63      	cmp	r4, #99	; 0x63
    3bb8:	d1d5      	bne.n	3b66 <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3bba:	2101      	movs	r1, #1
    3bbc:	a80d      	add	r0, sp, #52	; 0x34
    3bbe:	f7ff fee5 	bl	398c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3bc2:	7006      	strb	r6, [r0, #0]
    3bc4:	e024      	b.n	3c10 <hci_cmd_handle+0xf0>
	event_mask = DEFAULT_EVENT_MASK;
    3bc6:	2001      	movs	r0, #1
    3bc8:	499e      	ldr	r1, [pc, #632]	; (3e44 <hci_cmd_handle+0x324>)
    3bca:	4b9d      	ldr	r3, [pc, #628]	; (3e40 <hci_cmd_handle+0x320>)
    3bcc:	4240      	negs	r0, r0
    3bce:	6018      	str	r0, [r3, #0]
    3bd0:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    3bd2:	201f      	movs	r0, #31
    3bd4:	2100      	movs	r1, #0
    3bd6:	4b9c      	ldr	r3, [pc, #624]	; (3e48 <hci_cmd_handle+0x328>)
    3bd8:	6018      	str	r0, [r3, #0]
    3bda:	6059      	str	r1, [r3, #4]
		ll_reset();
    3bdc:	f003 ffe0 	bl	7ba0 <ll_reset>
    3be0:	e7eb      	b.n	3bba <hci_cmd_handle+0x9a>
    3be2:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3be4:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    3be6:	785c      	ldrb	r4, [r3, #1]
    3be8:	781a      	ldrb	r2, [r3, #0]
    3bea:	0224      	lsls	r4, r4, #8
	rp = cmd_complete(evt, sizeof(*rp));
    3bec:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    3bee:	4314      	orrs	r4, r2
	type = cmd->type;
    3bf0:	789e      	ldrb	r6, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    3bf2:	f7ff fecb 	bl	398c <cmd_complete>
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3bf6:	0031      	movs	r1, r6
	rp = cmd_complete(evt, sizeof(*rp));
    3bf8:	0005      	movs	r5, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3bfa:	1cc2      	adds	r2, r0, #3
    3bfc:	0020      	movs	r0, r4
    3bfe:	f004 f869 	bl	7cd4 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3c02:	1e43      	subs	r3, r0, #1
    3c04:	4198      	sbcs	r0, r3
	rp->handle = sys_cpu_to_le16(handle);
    3c06:	706c      	strb	r4, [r5, #1]
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3c08:	0040      	lsls	r0, r0, #1
	rp->handle = sys_cpu_to_le16(handle);
    3c0a:	0a24      	lsrs	r4, r4, #8
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3c0c:	7028      	strb	r0, [r5, #0]
	rp->handle = sys_cpu_to_le16(handle);
    3c0e:	70ac      	strb	r4, [r5, #2]
	return evt;
    3c10:	980d      	ldr	r0, [sp, #52]	; 0x34
    3c12:	e78e      	b.n	3b32 <hci_cmd_handle+0x12>
	switch (ocf) {
    3c14:	1e60      	subs	r0, r4, #1
    3c16:	2808      	cmp	r0, #8
    3c18:	d8a5      	bhi.n	3b66 <hci_cmd_handle+0x46>
    3c1a:	f7fc faad 	bl	178 <__gnu_thumb1_case_sqi>
    3c1e:	1805      	.short	0x1805
    3c20:	a4a4a452 	.word	0xa4a4a452
    3c24:	a4a4      	.short	0xa4a4
    3c26:	60          	.byte	0x60
    3c27:	00          	.byte	0x00
	rp = cmd_complete(evt, sizeof(*rp));
    3c28:	2109      	movs	r1, #9
    3c2a:	a80d      	add	r0, sp, #52	; 0x34
    3c2c:	f7ff feae 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3c30:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    3c32:	2209      	movs	r2, #9
	rp->status = 0x00;
    3c34:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    3c36:	7083      	strb	r3, [r0, #2]
    3c38:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3c3a:	3b0f      	subs	r3, #15
    3c3c:	7143      	strb	r3, [r0, #5]
    3c3e:	3314      	adds	r3, #20
    3c40:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3c42:	3b06      	subs	r3, #6
	rp->hci_version = BT_HCI_VERSION_5_0;
    3c44:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    3c46:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3c48:	71c3      	strb	r3, [r0, #7]
    3c4a:	7203      	strb	r3, [r0, #8]
    3c4c:	e7e0      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3c4e:	2141      	movs	r1, #65	; 0x41
    3c50:	a80d      	add	r0, sp, #52	; 0x34
    3c52:	f7ff fe9b 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3c56:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c58:	0004      	movs	r4, r0
	rp->status = 0x00;
    3c5a:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3c5c:	2240      	movs	r2, #64	; 0x40
    3c5e:	3001      	adds	r0, #1
    3c60:	f7fc fd2c 	bl	6bc <memset>
	rp->commands[2] |= BIT(7);
    3c64:	2380      	movs	r3, #128	; 0x80
    3c66:	78e2      	ldrb	r2, [r4, #3]
    3c68:	425b      	negs	r3, r3
    3c6a:	431a      	orrs	r2, r3
    3c6c:	70e2      	strb	r2, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3c6e:	2240      	movs	r2, #64	; 0x40
    3c70:	79a1      	ldrb	r1, [r4, #6]
    3c72:	4252      	negs	r2, r2
    3c74:	430a      	orrs	r2, r1
    3c76:	71a2      	strb	r2, [r4, #6]
	rp->commands[10] |= BIT(2);
    3c78:	2204      	movs	r2, #4
    3c7a:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3c7c:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[10] |= BIT(2);
    3c7e:	4311      	orrs	r1, r2
    3c80:	72e1      	strb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3c82:	2128      	movs	r1, #40	; 0x28
    3c84:	4301      	orrs	r1, r0
    3c86:	73e1      	strb	r1, [r4, #15]
	rp->commands[15] |= BIT(1);
    3c88:	2102      	movs	r1, #2
    3c8a:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    3c8c:	7ea6      	ldrb	r6, [r4, #26]
	rp->commands[15] |= BIT(1);
    3c8e:	4301      	orrs	r1, r0
    3c90:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
    3c92:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    3c94:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[22] |= BIT(2);
    3c96:	430a      	orrs	r2, r1
    3c98:	75e2      	strb	r2, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    3c9a:	223d      	movs	r2, #61	; 0x3d
    3c9c:	4252      	negs	r2, r2
    3c9e:	4310      	orrs	r0, r2
    3ca0:	7720      	strb	r0, [r4, #28]
	rp->commands[28] |= BIT(3);
    3ca2:	2008      	movs	r0, #8
    3ca4:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    3ca6:	7ee5      	ldrb	r5, [r4, #27]
	rp->commands[28] |= BIT(3);
    3ca8:	4308      	orrs	r0, r1
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3caa:	2109      	movs	r1, #9
    3cac:	4249      	negs	r1, r1
	rp->commands[26] |= BIT(0) | BIT(1);
    3cae:	432a      	orrs	r2, r5
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3cb0:	4331      	orrs	r1, r6
	rp->commands[28] |= BIT(3);
    3cb2:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3cb4:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    3cb6:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    3cb8:	3408      	adds	r4, #8
    3cba:	7fe2      	ldrb	r2, [r4, #31]
    3cbc:	4313      	orrs	r3, r2
    3cbe:	77e3      	strb	r3, [r4, #31]
    3cc0:	e7a6      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3cc2:	2109      	movs	r1, #9
    3cc4:	a80d      	add	r0, sp, #52	; 0x34
    3cc6:	f7ff fe61 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3cca:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3ccc:	0004      	movs	r4, r0
	rp->status = 0x00;
    3cce:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3cd0:	2208      	movs	r2, #8
    3cd2:	3001      	adds	r0, #1
    3cd4:	f7fc fcf2 	bl	6bc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3cd8:	2360      	movs	r3, #96	; 0x60
    3cda:	7163      	strb	r3, [r4, #5]
    3cdc:	e798      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3cde:	2107      	movs	r1, #7
    3ce0:	a80d      	add	r0, sp, #52	; 0x34
    3ce2:	f7ff fe53 	bl	398c <cmd_complete>
    3ce6:	0001      	movs	r1, r0
	rp->status = 0x00;
    3ce8:	2000      	movs	r0, #0
    3cea:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3cec:	3101      	adds	r1, #1
    3cee:	f7ff fd37 	bl	3760 <ll_addr_get>
    3cf2:	e78d      	b.n	3c10 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3cf4:	2c0a      	cmp	r4, #10
    3cf6:	d100      	bne.n	3cfa <hci_cmd_handle+0x1da>
    3cf8:	e0e4      	b.n	3ec4 <hci_cmd_handle+0x3a4>
    3cfa:	d828      	bhi.n	3d4e <hci_cmd_handle+0x22e>
    3cfc:	2c05      	cmp	r4, #5
    3cfe:	d100      	bne.n	3d02 <hci_cmd_handle+0x1e2>
    3d00:	e080      	b.n	3e04 <hci_cmd_handle+0x2e4>
    3d02:	d813      	bhi.n	3d2c <hci_cmd_handle+0x20c>
    3d04:	2c02      	cmp	r4, #2
    3d06:	d05f      	beq.n	3dc8 <hci_cmd_handle+0x2a8>
    3d08:	2c03      	cmp	r4, #3
    3d0a:	d069      	beq.n	3de0 <hci_cmd_handle+0x2c0>
    3d0c:	2c01      	cmp	r4, #1
    3d0e:	d000      	beq.n	3d12 <hci_cmd_handle+0x1f2>
    3d10:	e729      	b.n	3b66 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    3d12:	68a8      	ldr	r0, [r5, #8]
    3d14:	f7ff feed 	bl	3af2 <sys_get_le64>
    3d18:	4b4b      	ldr	r3, [pc, #300]	; (3e48 <hci_cmd_handle+0x328>)
    3d1a:	6018      	str	r0, [r3, #0]
    3d1c:	6059      	str	r1, [r3, #4]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3d1e:	2101      	movs	r1, #1
    3d20:	a80d      	add	r0, sp, #52	; 0x34
    3d22:	f7ff fe33 	bl	398c <cmd_complete>
	ccst->status = 0x00;
    3d26:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3d28:	7003      	strb	r3, [r0, #0]
    3d2a:	e771      	b.n	3c10 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3d2c:	2c07      	cmp	r4, #7
    3d2e:	d100      	bne.n	3d32 <hci_cmd_handle+0x212>
    3d30:	e149      	b.n	3fc6 <hci_cmd_handle+0x4a6>
    3d32:	d200      	bcs.n	3d36 <hci_cmd_handle+0x216>
    3d34:	e0a5      	b.n	3e82 <hci_cmd_handle+0x362>
    3d36:	2c08      	cmp	r4, #8
    3d38:	d100      	bne.n	3d3c <hci_cmd_handle+0x21c>
    3d3a:	e0bd      	b.n	3eb8 <hci_cmd_handle+0x398>
    3d3c:	2c09      	cmp	r4, #9
    3d3e:	d000      	beq.n	3d42 <hci_cmd_handle+0x222>
    3d40:	e711      	b.n	3b66 <hci_cmd_handle+0x46>
    3d42:	68ab      	ldr	r3, [r5, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    3d44:	1c59      	adds	r1, r3, #1
    3d46:	7818      	ldrb	r0, [r3, #0]
    3d48:	f004 fcd4 	bl	86f4 <ll_scan_data_set>
    3d4c:	e7e7      	b.n	3d1e <hci_cmd_handle+0x1fe>
	switch (ocf) {
    3d4e:	2c12      	cmp	r4, #18
    3d50:	d070      	beq.n	3e34 <hci_cmd_handle+0x314>
    3d52:	d810      	bhi.n	3d76 <hci_cmd_handle+0x256>
    3d54:	2c10      	cmp	r4, #16
    3d56:	d060      	beq.n	3e1a <hci_cmd_handle+0x2fa>
    3d58:	d868      	bhi.n	3e2c <hci_cmd_handle+0x30c>
    3d5a:	2c0f      	cmp	r4, #15
    3d5c:	d000      	beq.n	3d60 <hci_cmd_handle+0x240>
    3d5e:	e702      	b.n	3b66 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3d60:	2102      	movs	r1, #2
    3d62:	a80d      	add	r0, sp, #52	; 0x34
    3d64:	f7ff fe12 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3d68:	2300      	movs	r3, #0
    3d6a:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3d6c:	0004      	movs	r4, r0
	rp->wl_size = ll_wl_size_get();
    3d6e:	f004 fd5d 	bl	882c <ll_wl_size_get>
    3d72:	7060      	strb	r0, [r4, #1]
    3d74:	e74c      	b.n	3c10 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3d76:	2c18      	cmp	r4, #24
    3d78:	d068      	beq.n	3e4c <hci_cmd_handle+0x32c>
    3d7a:	d815      	bhi.n	3da8 <hci_cmd_handle+0x288>
    3d7c:	2c17      	cmp	r4, #23
    3d7e:	d000      	beq.n	3d82 <hci_cmd_handle+0x262>
    3d80:	e6f1      	b.n	3b66 <hci_cmd_handle+0x46>
    3d82:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3d84:	2300      	movs	r3, #0
    3d86:	0001      	movs	r1, r0
    3d88:	aa0e      	add	r2, sp, #56	; 0x38
    3d8a:	3110      	adds	r1, #16
    3d8c:	f004 ff62 	bl	8c54 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3d90:	2111      	movs	r1, #17
    3d92:	a80d      	add	r0, sp, #52	; 0x34
    3d94:	f7ff fdfa 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3d98:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    3d9a:	2210      	movs	r2, #16
	rp->status = 0x00;
    3d9c:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    3d9e:	3001      	adds	r0, #1
	memcpy(rp->info, build_info, sizeof(build_info));
    3da0:	a90e      	add	r1, sp, #56	; 0x38
    3da2:	f7fc fc61 	bl	668 <memcpy>
    3da6:	e733      	b.n	3c10 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3da8:	2c1c      	cmp	r4, #28
    3daa:	d05a      	beq.n	3e62 <hci_cmd_handle+0x342>
    3dac:	2c4b      	cmp	r4, #75	; 0x4b
    3dae:	d000      	beq.n	3db2 <hci_cmd_handle+0x292>
    3db0:	e6d9      	b.n	3b66 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3db2:	2103      	movs	r1, #3
    3db4:	a80d      	add	r0, sp, #52	; 0x34
    3db6:	f7ff fde9 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3dba:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3dbc:	1c81      	adds	r1, r0, #2
	rp->status = 0x00;
    3dbe:	7003      	strb	r3, [r0, #0]
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3dc0:	3001      	adds	r0, #1
    3dc2:	f7ff fd01 	bl	37c8 <ll_tx_pwr_get>
    3dc6:	e723      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3dc8:	2104      	movs	r1, #4
    3dca:	a80d      	add	r0, sp, #52	; 0x34
    3dcc:	f7ff fdde 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3dd0:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3dd2:	211b      	movs	r1, #27
	rp->status = 0x00;
    3dd4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3dd6:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3dd8:	3302      	adds	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3dda:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3ddc:	70c3      	strb	r3, [r0, #3]
    3dde:	e717      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3de0:	2109      	movs	r1, #9
    3de2:	a80d      	add	r0, sp, #52	; 0x34
    3de4:	f7ff fdd2 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3de8:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3dea:	0004      	movs	r4, r0
	rp->status = 0x00;
    3dec:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3dee:	2208      	movs	r2, #8
    3df0:	3001      	adds	r0, #1
    3df2:	f7fc fc63 	bl	6bc <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    3df6:	230c      	movs	r3, #12
    3df8:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    3dfa:	3334      	adds	r3, #52	; 0x34
    3dfc:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    3dfe:	3b3f      	subs	r3, #63	; 0x3f
    3e00:	70e3      	strb	r3, [r4, #3]
    3e02:	e705      	b.n	3c10 <hci_cmd_handle+0xf0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3e04:	68a9      	ldr	r1, [r5, #8]
    3e06:	2001      	movs	r0, #1
    3e08:	f7ff fcc2 	bl	3790 <ll_addr_set>
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3e0c:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3e0e:	2101      	movs	r1, #1
    3e10:	a80d      	add	r0, sp, #52	; 0x34
    3e12:	f7ff fdbb 	bl	398c <cmd_complete>
	ccst->status = status;
    3e16:	7004      	strb	r4, [r0, #0]
    3e18:	e6fa      	b.n	3c10 <hci_cmd_handle+0xf0>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3e1a:	2101      	movs	r1, #1
    3e1c:	a80d      	add	r0, sp, #52	; 0x34
    3e1e:	f7ff fdb5 	bl	398c <cmd_complete>
    3e22:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    3e24:	f004 fd04 	bl	8830 <ll_wl_clear>
    3e28:	7020      	strb	r0, [r4, #0]
    3e2a:	e6f1      	b.n	3c10 <hci_cmd_handle+0xf0>
	status = ll_wl_add(&cmd->addr);
    3e2c:	68a8      	ldr	r0, [r5, #8]
    3e2e:	f004 fd15 	bl	885c <ll_wl_add>
    3e32:	e7eb      	b.n	3e0c <hci_cmd_handle+0x2ec>
	status = ll_wl_remove(&cmd->addr);
    3e34:	68a8      	ldr	r0, [r5, #8]
    3e36:	f004 fd47 	bl	88c8 <ll_wl_remove>
    3e3a:	e7e7      	b.n	3e0c <hci_cmd_handle+0x2ec>
    3e3c:	20000254 	.word	0x20000254
    3e40:	200022d8 	.word	0x200022d8
    3e44:	00001fff 	.word	0x00001fff
    3e48:	200022e0 	.word	0x200022e0
	rp = cmd_complete(evt, sizeof(*rp));
    3e4c:	2109      	movs	r1, #9
    3e4e:	a80d      	add	r0, sp, #52	; 0x34
    3e50:	f7ff fd9c 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3e54:	2300      	movs	r3, #0
	bt_rand(rp->rand, count);
    3e56:	2108      	movs	r1, #8
	rp->status = 0x00;
    3e58:	7003      	strb	r3, [r0, #0]
	bt_rand(rp->rand, count);
    3e5a:	3001      	adds	r0, #1
    3e5c:	f7ff fcb8 	bl	37d0 <bt_rand>
    3e60:	e6d6      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3e62:	2109      	movs	r1, #9
    3e64:	a80d      	add	r0, sp, #52	; 0x34
    3e66:	f7ff fd91 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3e6a:	2500      	movs	r5, #0
	sys_put_le64(states, rp->le_states);
    3e6c:	1c41      	adds	r1, r0, #1
	rp = cmd_complete(evt, sizeof(*rp));
    3e6e:	0004      	movs	r4, r0
	rp->status = 0x00;
    3e70:	7005      	strb	r5, [r0, #0]
	sys_put_le32(val, dst);
    3e72:	2003      	movs	r0, #3
    3e74:	f7ff fd78 	bl	3968 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3e78:	0028      	movs	r0, r5
    3e7a:	1d61      	adds	r1, r4, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3e7c:	f7ff fd74 	bl	3968 <sys_put_le32>
    3e80:	e6c6      	b.n	3c10 <hci_cmd_handle+0xf0>
    3e82:	68a9      	ldr	r1, [r5, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    3e84:	784a      	ldrb	r2, [r1, #1]
    3e86:	7808      	ldrb	r0, [r1, #0]
    3e88:	0212      	lsls	r2, r2, #8
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3e8a:	4302      	orrs	r2, r0
    3e8c:	2000      	movs	r0, #0
    3e8e:	790b      	ldrb	r3, [r1, #4]
    3e90:	900a      	str	r0, [sp, #40]	; 0x28
    3e92:	9009      	str	r0, [sp, #36]	; 0x24
    3e94:	9008      	str	r0, [sp, #32]
    3e96:	9007      	str	r0, [sp, #28]
    3e98:	9006      	str	r0, [sp, #24]
    3e9a:	9005      	str	r0, [sp, #20]
    3e9c:	7b8c      	ldrb	r4, [r1, #14]
    3e9e:	9404      	str	r4, [sp, #16]
    3ea0:	7b4c      	ldrb	r4, [r1, #13]
    3ea2:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    3ea4:	1dcc      	adds	r4, r1, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3ea6:	9402      	str	r4, [sp, #8]
    3ea8:	798c      	ldrb	r4, [r1, #6]
    3eaa:	9401      	str	r4, [sp, #4]
    3eac:	7949      	ldrb	r1, [r1, #5]
    3eae:	9100      	str	r1, [sp, #0]
    3eb0:	0001      	movs	r1, r0
    3eb2:	f004 facd 	bl	8450 <ll_adv_params_set>
    3eb6:	e7a9      	b.n	3e0c <hci_cmd_handle+0x2ec>
    3eb8:	68ab      	ldr	r3, [r5, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    3eba:	1c59      	adds	r1, r3, #1
    3ebc:	7818      	ldrb	r0, [r3, #0]
    3ebe:	f004 fbc1 	bl	8644 <ll_adv_data_set>
    3ec2:	e72c      	b.n	3d1e <hci_cmd_handle+0x1fe>
	status = ll_adv_enable(cmd->enable);
    3ec4:	68ab      	ldr	r3, [r5, #8]
    3ec6:	7818      	ldrb	r0, [r3, #0]
    3ec8:	f004 fc50 	bl	876c <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3ecc:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    3ece:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3ed0:	a80d      	add	r0, sp, #52	; 0x34
    3ed2:	f7ff fd5b 	bl	398c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3ed6:	2c00      	cmp	r4, #0
    3ed8:	d100      	bne.n	3edc <hci_cmd_handle+0x3bc>
    3eda:	e672      	b.n	3bc2 <hci_cmd_handle+0xa2>
    3edc:	260c      	movs	r6, #12
    3ede:	e670      	b.n	3bc2 <hci_cmd_handle+0xa2>
	rp = cmd_complete(evt, sizeof(*rp));
    3ee0:	210d      	movs	r1, #13
    3ee2:	a80d      	add	r0, sp, #52	; 0x34
    3ee4:	f7ff fd52 	bl	398c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3ee8:	2102      	movs	r1, #2
	rp->status = 0x00;
    3eea:	2300      	movs	r3, #0
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3eec:	2201      	movs	r2, #1
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3eee:	7041      	strb	r1, [r0, #1]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3ef0:	210b      	movs	r1, #11
	rp->status = 0x00;
    3ef2:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3ef4:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3ef6:	70c2      	strb	r2, [r0, #3]
    3ef8:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    3efa:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    3efc:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3efe:	71c1      	strb	r1, [r0, #7]
    3f00:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3f02:	7243      	strb	r3, [r0, #9]
    3f04:	7283      	strb	r3, [r0, #10]
    3f06:	72c3      	strb	r3, [r0, #11]
    3f08:	7303      	strb	r3, [r0, #12]
    3f0a:	e681      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3f0c:	2141      	movs	r1, #65	; 0x41
    3f0e:	a80d      	add	r0, sp, #52	; 0x34
    3f10:	f7ff fd3c 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3f14:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3f16:	0004      	movs	r4, r0
	rp->status = 0x00;
    3f18:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3f1a:	2240      	movs	r2, #64	; 0x40
    3f1c:	3001      	adds	r0, #1
    3f1e:	f7fc fbcd 	bl	6bc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    3f22:	2359      	movs	r3, #89	; 0x59
    3f24:	7862      	ldrb	r2, [r4, #1]
    3f26:	425b      	negs	r3, r3
    3f28:	4313      	orrs	r3, r2
    3f2a:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    3f2c:	2303      	movs	r3, #3
    3f2e:	78a2      	ldrb	r2, [r4, #2]
    3f30:	4313      	orrs	r3, r2
    3f32:	70a3      	strb	r3, [r4, #2]
    3f34:	e66c      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3f36:	2109      	movs	r1, #9
    3f38:	a80d      	add	r0, sp, #52	; 0x34
    3f3a:	f7ff fd27 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3f3e:	2100      	movs	r1, #0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3f40:	2208      	movs	r2, #8
	rp->status = 0x00;
    3f42:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3f44:	3001      	adds	r0, #1
		memset(rp->er, 0x00, sizeof(rp->er));
    3f46:	f7fc fbb9 	bl	6bc <memset>
    3f4a:	e661      	b.n	3c10 <hci_cmd_handle+0xf0>
	const char build_info[] = HCI_VS_BUILD_INFO;
    3f4c:	2227      	movs	r2, #39	; 0x27
    3f4e:	494e      	ldr	r1, [pc, #312]	; (4088 <__kernel_ram_size+0x88>)
    3f50:	a80e      	add	r0, sp, #56	; 0x38
    3f52:	f7fc fb89 	bl	668 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    3f56:	2128      	movs	r1, #40	; 0x28
    3f58:	a80d      	add	r0, sp, #52	; 0x34
    3f5a:	f7ff fd17 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3f5e:	2300      	movs	r3, #0
	memcpy(rp->info, build_info, sizeof(build_info));
    3f60:	2227      	movs	r2, #39	; 0x27
	rp->status = 0x00;
    3f62:	7003      	strb	r3, [r0, #0]
	memcpy(rp->info, build_info, sizeof(build_info));
    3f64:	3001      	adds	r0, #1
    3f66:	e71b      	b.n	3da0 <hci_cmd_handle+0x280>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    3f68:	68a9      	ldr	r1, [r5, #8]
    3f6a:	2000      	movs	r0, #0
    3f6c:	f7ff fc10 	bl	3790 <ll_addr_set>
    3f70:	e6d5      	b.n	3d1e <hci_cmd_handle+0x1fe>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3f72:	4e46      	ldr	r6, [pc, #280]	; (408c <__kernel_ram_size+0x8c>)
    3f74:	6833      	ldr	r3, [r6, #0]
    3f76:	3301      	adds	r3, #1
    3f78:	d105      	bne.n	3f86 <hci_cmd_handle+0x466>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3f7a:	4b45      	ldr	r3, [pc, #276]	; (4090 <__kernel_ram_size+0x90>)
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3f7c:	4a45      	ldr	r2, [pc, #276]	; (4094 <__kernel_ram_size+0x94>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3f82:	4293      	cmp	r3, r2
    3f84:	d01f      	beq.n	3fc6 <hci_cmd_handle+0x4a6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    3f86:	2701      	movs	r7, #1
    3f88:	4b43      	ldr	r3, [pc, #268]	; (4098 <__kernel_ram_size+0x98>)
    3f8a:	681b      	ldr	r3, [r3, #0]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3f8c:	423b      	tst	r3, r7
    3f8e:	d01a      	beq.n	3fc6 <hci_cmd_handle+0x4a6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3f90:	2118      	movs	r1, #24
    3f92:	a80d      	add	r0, sp, #52	; 0x34
    3f94:	f7ff fcfa 	bl	398c <cmd_complete>
		rp->status = 0x00;
    3f98:	2500      	movs	r5, #0
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3f9a:	0004      	movs	r4, r0
		rp->status = 0x00;
    3f9c:	7005      	strb	r5, [r0, #0]
		rp->num_addrs = 1;
    3f9e:	7047      	strb	r7, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    3fa0:	6830      	ldr	r0, [r6, #0]
    3fa2:	1ca6      	adds	r6, r4, #2
    3fa4:	0031      	movs	r1, r6
    3fa6:	f7ff fcdf 	bl	3968 <sys_put_le32>
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3faa:	2240      	movs	r2, #64	; 0x40
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3fac:	0020      	movs	r0, r4
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3fae:	4b38      	ldr	r3, [pc, #224]	; (4090 <__kernel_ram_size+0x90>)
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3fb0:	4252      	negs	r2, r2
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3fb2:	681b      	ldr	r3, [r3, #0]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3fb4:	3008      	adds	r0, #8
	dst[0] = val;
    3fb6:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    3fb8:	b29b      	uxth	r3, r3
    3fba:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3fbc:	4313      	orrs	r3, r2
    3fbe:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3fc0:	3250      	adds	r2, #80	; 0x50
    3fc2:	0029      	movs	r1, r5
    3fc4:	e7bf      	b.n	3f46 <hci_cmd_handle+0x426>
	rp = cmd_complete(evt, sizeof(*rp));
    3fc6:	2102      	movs	r1, #2
    3fc8:	a80d      	add	r0, sp, #52	; 0x34
    3fca:	f7ff fcdf 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3fce:	2300      	movs	r3, #0
    3fd0:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    3fd2:	7043      	strb	r3, [r0, #1]
    3fd4:	e61c      	b.n	3c10 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3fd6:	2121      	movs	r1, #33	; 0x21
    3fd8:	a80d      	add	r0, sp, #52	; 0x34
    3fda:	f7ff fcd7 	bl	398c <cmd_complete>
	rp->status = 0x00;
    3fde:	2300      	movs	r3, #0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3fe0:	4a2e      	ldr	r2, [pc, #184]	; (409c <__kernel_ram_size+0x9c>)
	rp->status = 0x00;
    3fe2:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3fe4:	6811      	ldr	r1, [r2, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3fe6:	0004      	movs	r4, r0
    3fe8:	1c43      	adds	r3, r0, #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3fea:	3101      	adds	r1, #1
    3fec:	d041      	beq.n	4072 <__kernel_ram_size+0x72>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3fee:	4f2c      	ldr	r7, [pc, #176]	; (40a0 <__kernel_ram_size+0xa0>)
    3ff0:	6839      	ldr	r1, [r7, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3ff2:	3101      	adds	r1, #1
    3ff4:	d03d      	beq.n	4072 <__kernel_ram_size+0x72>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3ff6:	4e2b      	ldr	r6, [pc, #172]	; (40a4 <__kernel_ram_size+0xa4>)
    3ff8:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3ffa:	3101      	adds	r1, #1
    3ffc:	d039      	beq.n	4072 <__kernel_ram_size+0x72>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    3ffe:	4d2a      	ldr	r5, [pc, #168]	; (40a8 <__kernel_ram_size+0xa8>)
    4000:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4002:	3101      	adds	r1, #1
    4004:	d035      	beq.n	4072 <__kernel_ram_size+0x72>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    4006:	6810      	ldr	r0, [r2, #0]
    4008:	0019      	movs	r1, r3
    400a:	f7ff fcad 	bl	3968 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    400e:	6838      	ldr	r0, [r7, #0]
    4010:	1d61      	adds	r1, r4, #5
    4012:	f7ff fca9 	bl	3968 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    4016:	0021      	movs	r1, r4
    4018:	6830      	ldr	r0, [r6, #0]
    401a:	3109      	adds	r1, #9
    401c:	f7ff fca4 	bl	3968 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4020:	0021      	movs	r1, r4
    4022:	6828      	ldr	r0, [r5, #0]
    4024:	310d      	adds	r1, #13
    4026:	f7ff fc9f 	bl	3968 <sys_put_le32>
    402a:	0023      	movs	r3, r4
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    402c:	4a1f      	ldr	r2, [pc, #124]	; (40ac <__kernel_ram_size+0xac>)
    402e:	3311      	adds	r3, #17
    4030:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    4032:	3101      	adds	r1, #1
    4034:	d023      	beq.n	407e <__kernel_ram_size+0x7e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4036:	4f1e      	ldr	r7, [pc, #120]	; (40b0 <__kernel_ram_size+0xb0>)
    4038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    403a:	3101      	adds	r1, #1
    403c:	d01f      	beq.n	407e <__kernel_ram_size+0x7e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    403e:	4e1d      	ldr	r6, [pc, #116]	; (40b4 <__kernel_ram_size+0xb4>)
    4040:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4042:	3101      	adds	r1, #1
    4044:	d01b      	beq.n	407e <__kernel_ram_size+0x7e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    4046:	4d1c      	ldr	r5, [pc, #112]	; (40b8 <__kernel_ram_size+0xb8>)
    4048:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    404a:	3101      	adds	r1, #1
    404c:	d017      	beq.n	407e <__kernel_ram_size+0x7e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    404e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    4050:	0019      	movs	r1, r3
    4052:	f7ff fc89 	bl	3968 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    4056:	0021      	movs	r1, r4
    4058:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    405a:	3115      	adds	r1, #21
    405c:	f7ff fc84 	bl	3968 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4060:	0021      	movs	r1, r4
    4062:	6830      	ldr	r0, [r6, #0]
    4064:	3119      	adds	r1, #25
    4066:	f7ff fc7f 	bl	3968 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    406a:	0021      	movs	r1, r4
    406c:	6828      	ldr	r0, [r5, #0]
    406e:	311d      	adds	r1, #29
    4070:	e704      	b.n	3e7c <hci_cmd_handle+0x35c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    4072:	2210      	movs	r2, #16
    4074:	2100      	movs	r1, #0
    4076:	0018      	movs	r0, r3
    4078:	f7fc fb20 	bl	6bc <memset>
    407c:	e7d5      	b.n	402a <__kernel_ram_size+0x2a>
		memset(rp->er, 0x00, sizeof(rp->er));
    407e:	2210      	movs	r2, #16
    4080:	2100      	movs	r1, #0
    4082:	0018      	movs	r0, r3
    4084:	e75f      	b.n	3f46 <hci_cmd_handle+0x426>
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	0000b18f 	.word	0x0000b18f
    408c:	100000a4 	.word	0x100000a4
    4090:	100000a8 	.word	0x100000a8
    4094:	0000ffff 	.word	0x0000ffff
    4098:	100000a0 	.word	0x100000a0
    409c:	10000090 	.word	0x10000090
    40a0:	10000094 	.word	0x10000094
    40a4:	10000098 	.word	0x10000098
    40a8:	1000009c 	.word	0x1000009c
    40ac:	10000004 	.word	0x10000004
    40b0:	10000008 	.word	0x10000008
    40b4:	10000088 	.word	0x10000088
    40b8:	1000008c 	.word	0x1000008c

000040bc <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    40bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;
    40be:	0007      	movs	r7, r0
{
    40c0:	0004      	movs	r4, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    40c2:	7900      	ldrb	r0, [r0, #4]
{
    40c4:	b08d      	sub	sp, #52	; 0x34
    40c6:	000e      	movs	r6, r1
	pdu_data = (void *)node_rx->pdu_data;
    40c8:	3708      	adds	r7, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    40ca:	2801      	cmp	r0, #1
    40cc:	d100      	bne.n	40d0 <hci_evt_encode+0x14>
    40ce:	e088      	b.n	41e2 <hci_evt_encode+0x126>
	switch (node_rx->hdr.type) {
    40d0:	3802      	subs	r0, #2
    40d2:	2803      	cmp	r0, #3
    40d4:	d900      	bls.n	40d8 <hci_evt_encode+0x1c>
    40d6:	e0be      	b.n	4256 <hci_evt_encode+0x19a>
    40d8:	f7fc f858 	bl	18c <__gnu_thumb1_case_uqi>
    40dc:	584c4c02 	.word	0x584c4c02
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    40e0:	2201      	movs	r2, #1
    40e2:	2500      	movs	r5, #0
    40e4:	2104      	movs	r1, #4
    40e6:	ab05      	add	r3, sp, #20
    40e8:	705a      	strb	r2, [r3, #1]
    40ea:	3202      	adds	r2, #2
    40ec:	709a      	strb	r2, [r3, #2]
    40ee:	32fc      	adds	r2, #252	; 0xfc
    40f0:	715a      	strb	r2, [r3, #5]
    40f2:	70da      	strb	r2, [r3, #3]
    40f4:	3afd      	subs	r2, #253	; 0xfd
    40f6:	7119      	strb	r1, [r3, #4]
    40f8:	719a      	strb	r2, [r3, #6]
    40fa:	701d      	strb	r5, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    40fc:	4b57      	ldr	r3, [pc, #348]	; (425c <hci_evt_encode+0x1a0>)
    40fe:	685b      	ldr	r3, [r3, #4]
    4100:	009b      	lsls	r3, r3, #2
    4102:	d535      	bpl.n	4170 <hci_evt_encode+0xb4>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4104:	4b56      	ldr	r3, [pc, #344]	; (4260 <hci_evt_encode+0x1a4>)
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	4213      	tst	r3, r2
    410a:	d031      	beq.n	4170 <hci_evt_encode+0xb4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    410c:	230f      	movs	r3, #15
    410e:	7a22      	ldrb	r2, [r4, #8]
    4110:	401a      	ands	r2, r3
    4112:	7a63      	ldrb	r3, [r4, #9]
    4114:	2a01      	cmp	r2, #1
    4116:	d001      	beq.n	411c <hci_evt_encode+0x60>
		data_len = (adv->len - BDADDR_SIZE);
    4118:	1f9d      	subs	r5, r3, #6
    411a:	b2ed      	uxtb	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    411c:	002a      	movs	r2, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    411e:	18e3      	adds	r3, r4, r3
    4120:	7a9b      	ldrb	r3, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4122:	320b      	adds	r2, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4124:	425b      	negs	r3, r3
    4126:	b25b      	sxtb	r3, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4128:	b2d2      	uxtb	r2, r2
    412a:	2102      	movs	r1, #2
    412c:	0030      	movs	r0, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    412e:	9301      	str	r3, [sp, #4]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4130:	f7ff fc4e 	bl	39d0 <meta_evt>
	sep->num_reports = 1;
    4134:	2301      	movs	r3, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4136:	0021      	movs	r1, r4
	sep->num_reports = 1;
    4138:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    413a:	7a23      	ldrb	r3, [r4, #8]
    413c:	aa05      	add	r2, sp, #20
    413e:	071b      	lsls	r3, r3, #28
    4140:	0f1b      	lsrs	r3, r3, #28
    4142:	5cd3      	ldrb	r3, [r2, r3]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4144:	0006      	movs	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    4146:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    4148:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    414a:	310a      	adds	r1, #10
		adv_info->addr.type = adv->tx_addr;
    414c:	065b      	lsls	r3, r3, #25
    414e:	0fdb      	lsrs	r3, r3, #31
    4150:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4152:	2206      	movs	r2, #6
    4154:	3003      	adds	r0, #3
    4156:	f7fc fa87 	bl	668 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    415a:	0039      	movs	r1, r7
	adv_info->length = data_len;
    415c:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    415e:	360a      	adds	r6, #10
    4160:	3108      	adds	r1, #8
    4162:	002a      	movs	r2, r5
    4164:	0030      	movs	r0, r6
    4166:	f7fc fa7f 	bl	668 <memcpy>
	*prssi = rssi;
    416a:	466b      	mov	r3, sp
    416c:	791b      	ldrb	r3, [r3, #4]
    416e:	5573      	strb	r3, [r6, r5]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    4170:	b00d      	add	sp, #52	; 0x34
    4172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    4174:	220f      	movs	r2, #15
    4176:	7a23      	ldrb	r3, [r4, #8]
    4178:	4013      	ands	r3, r2
    417a:	2b07      	cmp	r3, #7
    417c:	d1f8      	bne.n	4170 <hci_evt_encode+0xb4>
    417e:	7a63      	ldrb	r3, [r4, #9]
    4180:	2b00      	cmp	r3, #0
    4182:	d0f5      	beq.n	4170 <hci_evt_encode+0xb4>
    4184:	0038      	movs	r0, r7
    4186:	f7ff fc9b 	bl	3ac0 <le_adv_ext_report.isra.37.part.38>
    418a:	e7f1      	b.n	4170 <hci_evt_encode+0xb4>
    418c:	0025      	movs	r5, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    418e:	4b33      	ldr	r3, [pc, #204]	; (425c <hci_evt_encode+0x1a0>)
    4190:	350a      	adds	r5, #10
    4192:	685b      	ldr	r3, [r3, #4]
    4194:	009b      	lsls	r3, r3, #2
    4196:	d503      	bpl.n	41a0 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    4198:	4b31      	ldr	r3, [pc, #196]	; (4260 <hci_evt_encode+0x1a4>)
    419a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    419c:	035b      	lsls	r3, r3, #13
    419e:	d40f      	bmi.n	41c0 <hci_evt_encode+0x104>
		addr.type = adv->tx_addr;
    41a0:	7a23      	ldrb	r3, [r4, #8]
    41a2:	ae03      	add	r6, sp, #12
    41a4:	065b      	lsls	r3, r3, #25
    41a6:	0fdb      	lsrs	r3, r3, #31
    41a8:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    41aa:	ab02      	add	r3, sp, #8
    41ac:	0029      	movs	r1, r5
    41ae:	2206      	movs	r2, #6
    41b0:	1d58      	adds	r0, r3, #5
    41b2:	f7fc fa59 	bl	668 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    41b6:	a905      	add	r1, sp, #20
    41b8:	0030      	movs	r0, r6
    41ba:	f7ff fc45 	bl	3a48 <bt_addr_le_to_str.constprop.42>
    41be:	e7d7      	b.n	4170 <hci_evt_encode+0xb4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    41c0:	2208      	movs	r2, #8
    41c2:	2113      	movs	r1, #19
    41c4:	0030      	movs	r0, r6
    41c6:	f7ff fc03 	bl	39d0 <meta_evt>
	sep->handle = 0;
    41ca:	2300      	movs	r3, #0
    41cc:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    41ce:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    41d0:	2206      	movs	r2, #6
	sep->addr.type = adv->tx_addr;
    41d2:	065b      	lsls	r3, r3, #25
    41d4:	0fdb      	lsrs	r3, r3, #31
    41d6:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    41d8:	0029      	movs	r1, r5
    41da:	3002      	adds	r0, #2
    41dc:	f7fc fa44 	bl	668 <memcpy>
    41e0:	e7c6      	b.n	4170 <hci_evt_encode+0xb4>
	switch (pdu_data->llctrl.opcode) {
    41e2:	7ae1      	ldrb	r1, [r4, #11]
    41e4:	88e5      	ldrh	r5, [r4, #6]
    41e6:	2909      	cmp	r1, #9
    41e8:	d00b      	beq.n	4202 <hci_evt_encode+0x146>
    41ea:	290c      	cmp	r1, #12
    41ec:	d010      	beq.n	4210 <hci_evt_encode+0x154>
    41ee:	2907      	cmp	r1, #7
    41f0:	d131      	bne.n	4256 <hci_evt_encode+0x19a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    41f2:	7b23      	ldrb	r3, [r4, #12]
    41f4:	2b0e      	cmp	r3, #14
    41f6:	d1bb      	bne.n	4170 <hci_evt_encode+0xb4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    41f8:	0033      	movs	r3, r6
    41fa:	002a      	movs	r2, r5
    41fc:	2100      	movs	r1, #0
    41fe:	201a      	movs	r0, #26
    4200:	e003      	b.n	420a <hci_evt_encode+0x14e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    4202:	0033      	movs	r3, r6
    4204:	002a      	movs	r2, r5
    4206:	0039      	movs	r1, r7
    4208:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    420a:	f7ff fbf5 	bl	39f8 <le_remote_feat_complete>
    420e:	e7af      	b.n	4170 <hci_evt_encode+0xb4>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    4210:	4b12      	ldr	r3, [pc, #72]	; (425c <hci_evt_encode+0x1a0>)
    4212:	681b      	ldr	r3, [r3, #0]
    4214:	051b      	lsls	r3, r3, #20
    4216:	d5ab      	bpl.n	4170 <hci_evt_encode+0xb4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    4218:	2208      	movs	r2, #8
    421a:	0030      	movs	r0, r6
    421c:	f7ff fbac 	bl	3978 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    4220:	0030      	movs	r0, r6
    4222:	2108      	movs	r1, #8
    4224:	3008      	adds	r0, #8
    4226:	f005 fa15 	bl	9654 <net_buf_simple_add>
	ep->status = 0x00;
    422a:	2300      	movs	r3, #0
    422c:	7003      	strb	r3, [r0, #0]
	ep->version = ver_ind->version_number;
    422e:	7b23      	ldrb	r3, [r4, #12]
	ep->handle = sys_cpu_to_le16(handle);
    4230:	7045      	strb	r5, [r0, #1]
    4232:	0a2d      	lsrs	r5, r5, #8
	ep->version = ver_ind->version_number;
    4234:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    4236:	7085      	strb	r5, [r0, #2]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    4238:	7ba3      	ldrb	r3, [r4, #14]
    423a:	7b62      	ldrb	r2, [r4, #13]
    423c:	021b      	lsls	r3, r3, #8
    423e:	4313      	orrs	r3, r2
    4240:	7103      	strb	r3, [r0, #4]
    4242:	0a1b      	lsrs	r3, r3, #8
    4244:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4246:	7c23      	ldrb	r3, [r4, #16]
    4248:	7be2      	ldrb	r2, [r4, #15]
    424a:	021b      	lsls	r3, r3, #8
    424c:	4313      	orrs	r3, r2
    424e:	7183      	strb	r3, [r0, #6]
    4250:	0a1b      	lsrs	r3, r3, #8
    4252:	71c3      	strb	r3, [r0, #7]
    4254:	e78c      	b.n	4170 <hci_evt_encode+0xb4>
		LL_ASSERT(0);
    4256:	b662      	cpsie	i
    4258:	2004      	movs	r0, #4
    425a:	df02      	svc	2
    425c:	200022d8 	.word	0x200022d8
    4260:	200022e0 	.word	0x200022e0

00004264 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4264:	7903      	ldrb	r3, [r0, #4]
    4266:	2b01      	cmp	r3, #1
    4268:	d012      	beq.n	4290 <hci_get_class+0x2c>
    426a:	2b0a      	cmp	r3, #10
    426c:	d818      	bhi.n	42a0 <hci_get_class+0x3c>
    426e:	2201      	movs	r2, #1
    4270:	0011      	movs	r1, r2
    4272:	4099      	lsls	r1, r3
    4274:	000b      	movs	r3, r1
    4276:	21b0      	movs	r1, #176	; 0xb0
    4278:	00c9      	lsls	r1, r1, #3
		case NODE_RX_TYPE_CHAN_SEL_ALGO:
#endif
#if defined(CONFIG_BT_CTLR_PHY)
		case NODE_RX_TYPE_PHY_UPDATE:
#endif /* CONFIG_BT_CTLR_PHY */
			return HCI_CLASS_EVT_CONNECTION;
    427a:	2002      	movs	r0, #2
    427c:	420b      	tst	r3, r1
    427e:	d10e      	bne.n	429e <hci_get_class+0x3a>
    4280:	213c      	movs	r1, #60	; 0x3c
			return HCI_CLASS_EVT_DISCARDABLE;
    4282:	0010      	movs	r0, r2
    4284:	420b      	tst	r3, r1
    4286:	d10a      	bne.n	429e <hci_get_class+0x3a>
    4288:	099b      	lsrs	r3, r3, #6
    428a:	4398      	bics	r0, r3
		default:
			return -1;
    428c:	4240      	negs	r0, r0
    428e:	e006      	b.n	429e <hci_get_class+0x3a>
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4290:	2303      	movs	r3, #3
    4292:	7a00      	ldrb	r0, [r0, #8]
    4294:	4018      	ands	r0, r3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    4296:	3803      	subs	r0, #3
    4298:	1e43      	subs	r3, r0, #1
    429a:	4198      	sbcs	r0, r3
    429c:	3002      	adds	r0, #2
	}
}
    429e:	4770      	bx	lr
			return -1;
    42a0:	2001      	movs	r0, #1
    42a2:	e7f3      	b.n	428c <hci_get_class+0x28>

000042a4 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    42a4:	2001      	movs	r0, #1
    42a6:	4b05      	ldr	r3, [pc, #20]	; (42bc <hci_init+0x18>)
    42a8:	4905      	ldr	r1, [pc, #20]	; (42c0 <hci_init+0x1c>)
    42aa:	4240      	negs	r0, r0
    42ac:	6018      	str	r0, [r3, #0]
    42ae:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    42b0:	201f      	movs	r0, #31
    42b2:	2100      	movs	r1, #0
    42b4:	4b03      	ldr	r3, [pc, #12]	; (42c4 <hci_init+0x20>)
    42b6:	6018      	str	r0, [r3, #0]
    42b8:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    42ba:	4770      	bx	lr
    42bc:	200022d8 	.word	0x200022d8
    42c0:	00001fff 	.word	0x00001fff
    42c4:	200022e0 	.word	0x200022e0

000042c8 <cpu_sleep>:
	__WFE();
    42c8:	bf20      	wfe
	__SEV();
    42ca:	bf40      	sev
	__WFE();
    42cc:	bf20      	wfe
}
    42ce:	4770      	bx	lr

000042d0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    42d0:	b570      	push	{r4, r5, r6, lr}
    42d2:	0006      	movs	r6, r0
    42d4:	000d      	movs	r5, r1
    42d6:	b088      	sub	sp, #32
	const u8_t ctrl_len_lut[] = {
    42d8:	ac01      	add	r4, sp, #4
    42da:	221a      	movs	r2, #26
    42dc:	4905      	ldr	r1, [pc, #20]	; (42f4 <pdu_len_cmp+0x24>)
    42de:	0020      	movs	r0, r4
    42e0:	f7fc f9c2 	bl	668 <memcpy>
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    42e4:	5da0      	ldrb	r0, [r4, r6]
    42e6:	1b40      	subs	r0, r0, r5
    42e8:	4243      	negs	r3, r0
    42ea:	4158      	adcs	r0, r3
    42ec:	b2c0      	uxtb	r0, r0
}
    42ee:	b008      	add	sp, #32
    42f0:	bd70      	pop	{r4, r5, r6, pc}
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	0000ac37 	.word	0x0000ac37

000042f8 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    42f8:	6008      	str	r0, [r1, #0]
}
    42fa:	4770      	bx	lr

000042fc <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    42fc:	2800      	cmp	r0, #0
    42fe:	d104      	bne.n	430a <prepare_reduced+0xe>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    4300:	2380      	movs	r3, #128	; 0x80
    4302:	680a      	ldr	r2, [r1, #0]
    4304:	061b      	lsls	r3, r3, #24
    4306:	4313      	orrs	r3, r2
    4308:	600b      	str	r3, [r1, #0]
	}
}
    430a:	4770      	bx	lr

0000430c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    430c:	2800      	cmp	r0, #0
    430e:	d103      	bne.n	4318 <prepare_normal+0xc>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4310:	680b      	ldr	r3, [r1, #0]
    4312:	005b      	lsls	r3, r3, #1
    4314:	085b      	lsrs	r3, r3, #1
    4316:	600b      	str	r3, [r1, #0]
	}
}
    4318:	4770      	bx	lr

0000431a <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    431a:	b5f0      	push	{r4, r5, r6, r7, lr}
    431c:	0002      	movs	r2, r0
    431e:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    4320:	2701      	movs	r7, #1
	chan_next = 0;
    4322:	2000      	movs	r0, #0
	while (byte_count--) {
    4324:	42b2      	cmp	r2, r6
    4326:	d100      	bne.n	432a <chan_sel_remap+0x10>

		chan_map++;
	}

	return chan_next;
}
    4328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    432a:	0004      	movs	r4, r0
		bite = *chan_map;
    432c:	7815      	ldrb	r5, [r2, #0]
    432e:	3408      	adds	r4, #8
    4330:	b2e4      	uxtb	r4, r4
		while (bit_count--) {
    4332:	42a0      	cmp	r0, r4
    4334:	d101      	bne.n	433a <chan_sel_remap+0x20>
		chan_map++;
    4336:	3201      	adds	r2, #1
    4338:	e7f4      	b.n	4324 <chan_sel_remap+0xa>
			if (bite & 0x01) {
    433a:	423d      	tst	r5, r7
    433c:	d003      	beq.n	4346 <chan_sel_remap+0x2c>
				if (chan_index == 0) {
    433e:	2900      	cmp	r1, #0
    4340:	d0f2      	beq.n	4328 <chan_sel_remap+0xe>
				chan_index--;
    4342:	3901      	subs	r1, #1
    4344:	b2c9      	uxtb	r1, r1
			chan_next++;
    4346:	3001      	adds	r0, #1
    4348:	b2c0      	uxtb	r0, r0
			bite >>= 1;
    434a:	086d      	lsrs	r5, r5, #1
    434c:	e7f1      	b.n	4332 <chan_sel_remap+0x18>
	...

00004350 <packet_rx_reserve_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    4350:	239b      	movs	r3, #155	; 0x9b
	    _radio.packet_rx_last) {
    4352:	2136      	movs	r1, #54	; 0x36
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    4354:	b530      	push	{r4, r5, lr}
	if (_radio.packet_rx_acquire >=
    4356:	4a0d      	ldr	r2, [pc, #52]	; (438c <packet_rx_reserve_get+0x3c>)
    4358:	005b      	lsls	r3, r3, #1
	    _radio.packet_rx_last) {
    435a:	31ff      	adds	r1, #255	; 0xff
	if (_radio.packet_rx_acquire >=
    435c:	5cd3      	ldrb	r3, [r2, r3]
	    _radio.packet_rx_last) {
    435e:	5c54      	ldrb	r4, [r2, r1]
	if (_radio.packet_rx_acquire >=
    4360:	42a3      	cmp	r3, r4
    4362:	d30c      	bcc.n	437e <packet_rx_reserve_get+0x2e>
			_radio.packet_rx_last);
    4364:	5c54      	ldrb	r4, [r2, r1]
			_radio.packet_rx_last +
    4366:	1b1b      	subs	r3, r3, r4
    4368:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
		return 0;
    436a:	2400      	movs	r4, #0
	if (count > packet_rx_acquired_count_get()) {
    436c:	4298      	cmp	r0, r3
    436e:	d804      	bhi.n	437a <packet_rx_reserve_get+0x2a>
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    4370:	5c53      	ldrb	r3, [r2, r1]
    4372:	32fc      	adds	r2, #252	; 0xfc
    4374:	6b52      	ldr	r2, [r2, #52]	; 0x34
    4376:	009b      	lsls	r3, r3, #2
    4378:	589c      	ldr	r4, [r3, r2]
}
    437a:	0020      	movs	r0, r4
    437c:	bd30      	pop	{r4, r5, pc}
		return (_radio.packet_rx_count -
    437e:	259a      	movs	r5, #154	; 0x9a
    4380:	006d      	lsls	r5, r5, #1
			_radio.packet_rx_last +
    4382:	5d55      	ldrb	r5, [r2, r5]
    4384:	5c54      	ldrb	r4, [r2, r1]
    4386:	195b      	adds	r3, r3, r5
    4388:	e7ed      	b.n	4366 <packet_rx_reserve_get+0x16>
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	20000258 	.word	0x20000258

00004390 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4392:	0003      	movs	r3, r0
    4394:	0007      	movs	r7, r0
    4396:	335c      	adds	r3, #92	; 0x5c
    4398:	375d      	adds	r7, #93	; 0x5d
    439a:	781b      	ldrb	r3, [r3, #0]
    439c:	783d      	ldrb	r5, [r7, #0]
{
    439e:	0004      	movs	r4, r0
		return 1;
    43a0:	2001      	movs	r0, #1
	if (conn->llcp_req != conn->llcp_ack) {
    43a2:	429d      	cmp	r5, r3
    43a4:	d128      	bne.n	43f8 <conn_update_req+0x68>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    43a6:	7f63      	ldrb	r3, [r4, #29]
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    43a8:	1800      	adds	r0, r0, r0
	if (!conn->role) {
    43aa:	2b7f      	cmp	r3, #127	; 0x7f
    43ac:	d824      	bhi.n	43f8 <conn_update_req+0x68>
		conn->llcp.conn_upd.win_size = 1;
    43ae:	0023      	movs	r3, r4
    43b0:	2601      	movs	r6, #1
    43b2:	3370      	adds	r3, #112	; 0x70
    43b4:	701e      	strb	r6, [r3, #0]
		conn->llcp.conn_upd.win_offset_us = 0;
    43b6:	2300      	movs	r3, #0
    43b8:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->llcp.conn_upd.interval = conn->conn_interval;
    43ba:	0023      	movs	r3, r4
    43bc:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    43be:	3362      	adds	r3, #98	; 0x62
    43c0:	8018      	strh	r0, [r3, #0]
		conn->llcp.conn_upd.latency = conn->latency;
    43c2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
					      125 / 1000;
    43c4:	21fa      	movs	r1, #250	; 0xfa
		conn->llcp.conn_upd.latency = conn->latency;
    43c6:	805a      	strh	r2, [r3, #2]
					      conn->supervision_reload *
    43c8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
					      125 / 1000;
    43ca:	0089      	lsls	r1, r1, #2
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    43cc:	4358      	muls	r0, r3
					      conn->supervision_reload *
    43ce:	237d      	movs	r3, #125	; 0x7d
    43d0:	4358      	muls	r0, r3
					      125 / 1000;
    43d2:	f7fb ff47 	bl	264 <__aeabi_idiv>
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    43d6:	0023      	movs	r3, r4
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    43d8:	0022      	movs	r2, r4
    43da:	2103      	movs	r1, #3
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    43dc:	3366      	adds	r3, #102	; 0x66
    43de:	8018      	strh	r0, [r3, #0]
		return 0;
    43e0:	2000      	movs	r0, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    43e2:	3260      	adds	r2, #96	; 0x60
    43e4:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    43e6:	345e      	adds	r4, #94	; 0x5e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    43e8:	438b      	bics	r3, r1
		conn->llcp.conn_upd.is_internal = 1;
    43ea:	4333      	orrs	r3, r6
    43ec:	1989      	adds	r1, r1, r6
    43ee:	430b      	orrs	r3, r1
		conn->llcp_ack--;
    43f0:	3d01      	subs	r5, #1
		conn->llcp.conn_upd.is_internal = 1;
    43f2:	7013      	strb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    43f4:	7026      	strb	r6, [r4, #0]
		conn->llcp_ack--;
    43f6:	703d      	strb	r5, [r7, #0]
}
    43f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000043fc <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    43fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    43fe:	780c      	ldrb	r4, [r1, #0]
{
    4400:	b085      	sub	sp, #20
    4402:	9001      	str	r0, [sp, #4]
    4404:	9102      	str	r1, [sp, #8]
    4406:	9203      	str	r2, [sp, #12]
	if (_first == last) {
		return 0;
    4408:	2500      	movs	r5, #0
	if (_first == last) {
    440a:	4294      	cmp	r4, r2
    440c:	d039      	beq.n	4482 <tx_cmplt_get+0x86>
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    440e:	4e20      	ldr	r6, [pc, #128]	; (4490 <tx_cmplt_get+0x94>)
    4410:	00e3      	lsls	r3, r4, #3
    4412:	36fc      	adds	r6, #252	; 0xfc
    4414:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    4416:	5a9b      	ldrh	r3, [r3, r2]
    4418:	8003      	strh	r3, [r0, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    441a:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    441c:	00e3      	lsls	r3, r4, #3
    441e:	18d3      	adds	r3, r2, r3
    4420:	9a01      	ldr	r2, [sp, #4]
    4422:	8811      	ldrh	r1, [r2, #0]
    4424:	881a      	ldrh	r2, [r3, #0]
    4426:	4291      	cmp	r1, r2
    4428:	d129      	bne.n	447e <tx_cmplt_get+0x82>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    442a:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (void *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (void *)1) ||
    442c:	2801      	cmp	r0, #1
    442e:	d90d      	bls.n	444c <tx_cmplt_get+0x50>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4430:	2103      	movs	r1, #3
    4432:	0002      	movs	r2, r0
    4434:	438a      	bics	r2, r1
		if ((!node_tx) || (node_tx == (void *)1) ||
    4436:	d027      	beq.n	4488 <tx_cmplt_get+0x8c>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4438:	1d02      	adds	r2, r0, #4
    443a:	d025      	beq.n	4488 <tx_cmplt_get+0x8c>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    443c:	7942      	ldrb	r2, [r0, #5]
    443e:	2a00      	cmp	r2, #0
    4440:	d022      	beq.n	4488 <tx_cmplt_get+0x8c>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    4442:	7902      	ldrb	r2, [r0, #4]
    4444:	400a      	ands	r2, r1
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4446:	3a01      	subs	r2, #1
    4448:	2a01      	cmp	r2, #1
    444a:	d81d      	bhi.n	4488 <tx_cmplt_get+0x8c>
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)1;
    444c:	2201      	movs	r2, #1

			cmplt++;
    444e:	18ad      	adds	r5, r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    4450:	605a      	str	r2, [r3, #4]
			cmplt++;
    4452:	b2ed      	uxtb	r5, r5
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    4454:	2303      	movs	r3, #3
    4456:	0002      	movs	r2, r0
    4458:	4f0d      	ldr	r7, [pc, #52]	; (4490 <tx_cmplt_get+0x94>)
    445a:	439a      	bics	r2, r3
    445c:	d004      	beq.n	4468 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    445e:	0039      	movs	r1, r7
    4460:	3159      	adds	r1, #89	; 0x59
    4462:	31ff      	adds	r1, #255	; 0xff
    4464:	f7fe fa2d 	bl	28c2 <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    4468:	23b4      	movs	r3, #180	; 0xb4
    446a:	005b      	lsls	r3, r3, #1
		_first = _first + 1;
    446c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    446e:	5cfb      	ldrb	r3, [r7, r3]
		_first = _first + 1;
    4470:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    4472:	42a3      	cmp	r3, r4
    4474:	d100      	bne.n	4478 <tx_cmplt_get+0x7c>
			_first = 0;
    4476:	2400      	movs	r4, #0
		}

	} while (_first != last);
    4478:	9b03      	ldr	r3, [sp, #12]
    447a:	429c      	cmp	r4, r3
    447c:	d1cd      	bne.n	441a <tx_cmplt_get+0x1e>

	*first = _first;
    447e:	9b02      	ldr	r3, [sp, #8]
    4480:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    4482:	0028      	movs	r0, r5
    4484:	b005      	add	sp, #20
    4486:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4488:	2202      	movs	r2, #2
    448a:	605a      	str	r2, [r3, #4]
    448c:	e7e2      	b.n	4454 <tx_cmplt_get+0x58>
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	20000258 	.word	0x20000258

00004494 <connection_get>:
	if (handle < _radio.connection_count) {
    4494:	4b0a      	ldr	r3, [pc, #40]	; (44c0 <connection_get+0x2c>)
{
    4496:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4498:	001a      	movs	r2, r3
    449a:	32ff      	adds	r2, #255	; 0xff
    449c:	7b52      	ldrb	r2, [r2, #13]
{
    449e:	0004      	movs	r4, r0
	if (handle < _radio.connection_count) {
    44a0:	4282      	cmp	r2, r0
    44a2:	d90b      	bls.n	44bc <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    44a4:	2182      	movs	r1, #130	; 0x82
    44a6:	33fc      	adds	r3, #252	; 0xfc
    44a8:	0002      	movs	r2, r0
    44aa:	0049      	lsls	r1, r1, #1
    44ac:	6898      	ldr	r0, [r3, #8]
    44ae:	f7fe fa1e 	bl	28ee <mem_get>
		if ((conn) && (conn->handle == handle)) {
    44b2:	2800      	cmp	r0, #0
    44b4:	d002      	beq.n	44bc <connection_get+0x28>
    44b6:	8c03      	ldrh	r3, [r0, #32]
    44b8:	42a3      	cmp	r3, r4
    44ba:	d000      	beq.n	44be <connection_get+0x2a>
	return 0;
    44bc:	2000      	movs	r0, #0
}
    44be:	bd10      	pop	{r4, pc}
    44c0:	20000258 	.word	0x20000258

000044c4 <role_disable>:
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    44c4:	2302      	movs	r3, #2
{
    44c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    44c8:	b089      	sub	sp, #36	; 0x24
    44ca:	0004      	movs	r4, r0
    44cc:	000f      	movs	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    44ce:	9304      	str	r3, [sp, #16]
	switch (ticker_id_primary) {
    44d0:	2805      	cmp	r0, #5
    44d2:	d00f      	beq.n	44f4 <role_disable+0x30>
    44d4:	2806      	cmp	r0, #6
    44d6:	d100      	bne.n	44da <role_disable+0x16>
    44d8:	e090      	b.n	45fc <role_disable+0x138>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    44da:	d800      	bhi.n	44de <role_disable+0x1a>
    44dc:	e08b      	b.n	45f6 <role_disable+0x132>
			conn_handle = ticker_id_primary -
    44de:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    44e0:	b280      	uxth	r0, r0
    44e2:	f7ff ffd7 	bl	4494 <connection_get>
			if (!conn) {
    44e6:	2800      	cmp	r0, #0
    44e8:	d100      	bne.n	44ec <role_disable+0x28>
    44ea:	e0df      	b.n	46ac <role_disable+0x1e8>
			ticks_xtal_to_start =
    44ec:	6803      	ldr	r3, [r0, #0]
    44ee:	9303      	str	r3, [sp, #12]
			ticks_active_to_start =
    44f0:	6843      	ldr	r3, [r0, #4]
    44f2:	e08a      	b.n	460a <role_disable+0x146>
		ticks_xtal_to_start =
    44f4:	4b6e      	ldr	r3, [pc, #440]	; (46b0 <role_disable+0x1ec>)
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    44f6:	2000      	movs	r0, #0
		ticks_xtal_to_start =
    44f8:	695a      	ldr	r2, [r3, #20]
		ticks_active_to_start =
    44fa:	699b      	ldr	r3, [r3, #24]
		ticks_xtal_to_start =
    44fc:	9203      	str	r2, [sp, #12]
		ticks_active_to_start =
    44fe:	9302      	str	r3, [sp, #8]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4500:	ab04      	add	r3, sp, #16
    4502:	9300      	str	r3, [sp, #0]
    4504:	000a      	movs	r2, r1
    4506:	4b6b      	ldr	r3, [pc, #428]	; (46b4 <role_disable+0x1f0>)
    4508:	2103      	movs	r1, #3
    450a:	f7ff f87d 	bl	3608 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    450e:	2802      	cmp	r0, #2
    4510:	d069      	beq.n	45e6 <role_disable+0x122>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4512:	9b04      	ldr	r3, [sp, #16]
    4514:	2b00      	cmp	r3, #0
    4516:	d16a      	bne.n	45ee <role_disable+0x12a>
	LL_ASSERT(!_radio.ticker_id_stop);
    4518:	4d65      	ldr	r5, [pc, #404]	; (46b0 <role_disable+0x1ec>)
    451a:	7ba8      	ldrb	r0, [r5, #14]
    451c:	b2c0      	uxtb	r0, r0
    451e:	2800      	cmp	r0, #0
    4520:	d169      	bne.n	45f6 <role_disable+0x132>
	ret_cb = TICKER_STATUS_BUSY;
    4522:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4524:	4e63      	ldr	r6, [pc, #396]	; (46b4 <role_disable+0x1f0>)
	_radio.ticker_id_stop = ticker_id_primary;
    4526:	73ac      	strb	r4, [r5, #14]
	ret_cb = TICKER_STATUS_BUSY;
    4528:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    452a:	ab04      	add	r3, sp, #16
    452c:	9300      	str	r3, [sp, #0]
    452e:	0022      	movs	r2, r4
    4530:	0033      	movs	r3, r6
    4532:	2103      	movs	r1, #3
    4534:	f7ff f868 	bl	3608 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4538:	2802      	cmp	r0, #2
    453a:	d100      	bne.n	453e <role_disable+0x7a>
    453c:	e067      	b.n	460e <role_disable+0x14a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    453e:	9b04      	ldr	r3, [sp, #16]
    4540:	4d5b      	ldr	r5, [pc, #364]	; (46b0 <role_disable+0x1ec>)
    4542:	2b00      	cmp	r3, #0
    4544:	d148      	bne.n	45d8 <role_disable+0x114>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4546:	7b2b      	ldrb	r3, [r5, #12]
    4548:	429c      	cmp	r4, r3
    454a:	d002      	beq.n	4552 <role_disable+0x8e>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    454c:	7b6b      	ldrb	r3, [r5, #13]
    454e:	429c      	cmp	r4, r3
    4550:	d13d      	bne.n	45ce <role_disable+0x10a>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4552:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4554:	2200      	movs	r2, #0
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4556:	9305      	str	r3, [sp, #20]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4558:	ab05      	add	r3, sp, #20
    455a:	9300      	str	r3, [sp, #0]
    455c:	2103      	movs	r1, #3
    455e:	0033      	movs	r3, r6
    4560:	0010      	movs	r0, r2
    4562:	f7ff f851 	bl	3608 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4566:	2802      	cmp	r0, #2
    4568:	d107      	bne.n	457a <role_disable+0xb6>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    456a:	2201      	movs	r2, #1
    456c:	0011      	movs	r1, r2
    456e:	1880      	adds	r0, r0, r2
    4570:	f7fe fa20 	bl	29b4 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    4574:	9b05      	ldr	r3, [sp, #20]
    4576:	2b02      	cmp	r3, #2
    4578:	d03d      	beq.n	45f6 <role_disable+0x132>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    457a:	9805      	ldr	r0, [sp, #20]
    457c:	2800      	cmp	r0, #0
    457e:	d162      	bne.n	4646 <role_disable+0x182>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4580:	2302      	movs	r3, #2
    4582:	9306      	str	r3, [sp, #24]
		LL_ASSERT(_radio.ticker_id_prepare);
    4584:	7b2b      	ldrb	r3, [r5, #12]
    4586:	2b00      	cmp	r3, #0
    4588:	d035      	beq.n	45f6 <role_disable+0x132>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    458a:	ab06      	add	r3, sp, #24
		_radio.ticker_id_prepare = 0;
    458c:	7328      	strb	r0, [r5, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    458e:	2201      	movs	r2, #1
    4590:	9300      	str	r3, [sp, #0]
    4592:	2103      	movs	r1, #3
    4594:	0033      	movs	r3, r6
    4596:	f7ff f837 	bl	3608 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    459a:	2802      	cmp	r0, #2
    459c:	d107      	bne.n	45ae <role_disable+0xea>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    459e:	2201      	movs	r2, #1
    45a0:	0011      	movs	r1, r2
    45a2:	1880      	adds	r0, r0, r2
    45a4:	f7fe fa06 	bl	29b4 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    45a8:	9b06      	ldr	r3, [sp, #24]
    45aa:	2b02      	cmp	r3, #2
    45ac:	d023      	beq.n	45f6 <role_disable+0x132>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    45ae:	9906      	ldr	r1, [sp, #24]
    45b0:	2900      	cmp	r1, #0
    45b2:	d13b      	bne.n	462c <role_disable+0x168>
			ticks_xtal_to_start &= ~XON_BITMASK;
    45b4:	9b03      	ldr	r3, [sp, #12]
			if (ticks_active_to_start > ticks_xtal_to_start) {
    45b6:	9a02      	ldr	r2, [sp, #8]
			ticks_xtal_to_start &= ~XON_BITMASK;
    45b8:	005b      	lsls	r3, r3, #1
    45ba:	085b      	lsrs	r3, r3, #1
			if (ticks_active_to_start > ticks_xtal_to_start) {
    45bc:	429a      	cmp	r2, r3
    45be:	d940      	bls.n	4642 <role_disable+0x17e>
				ret = mayfly_enqueue(
    45c0:	4b3d      	ldr	r3, [pc, #244]	; (46b8 <role_disable+0x1f4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    45c2:	000a      	movs	r2, r1
    45c4:	2003      	movs	r0, #3
    45c6:	f7fe fa19 	bl	29fc <mayfly_enqueue>
			LL_ASSERT(!ret);
    45ca:	2800      	cmp	r0, #0
    45cc:	d113      	bne.n	45f6 <role_disable+0x132>
	if (!_radio.ticker_id_stop) {
    45ce:	7bab      	ldrb	r3, [r5, #14]
    45d0:	2b00      	cmp	r3, #0
    45d2:	d101      	bne.n	45d8 <role_disable+0x114>
		ret_cb = TICKER_STATUS_FAILURE;
    45d4:	3301      	adds	r3, #1
    45d6:	9304      	str	r3, [sp, #16]
	_radio.ticker_id_stop = 0;
    45d8:	2300      	movs	r3, #0
    45da:	73ab      	strb	r3, [r5, #14]
	return ret_cb;
    45dc:	9804      	ldr	r0, [sp, #16]
}
    45de:	b009      	add	sp, #36	; 0x24
    45e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				cpu_sleep();
    45e2:	f7ff fe71 	bl	42c8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    45e6:	9b04      	ldr	r3, [sp, #16]
    45e8:	2b02      	cmp	r3, #2
    45ea:	d0fa      	beq.n	45e2 <role_disable+0x11e>
    45ec:	e791      	b.n	4512 <role_disable+0x4e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    45ee:	9b04      	ldr	r3, [sp, #16]
    45f0:	2b01      	cmp	r3, #1
    45f2:	d100      	bne.n	45f6 <role_disable+0x132>
    45f4:	e790      	b.n	4518 <role_disable+0x54>
		LL_ASSERT(0);
    45f6:	b662      	cpsie	i
    45f8:	2004      	movs	r0, #4
    45fa:	df02      	svc	2
		ticks_xtal_to_start =
    45fc:	4b2c      	ldr	r3, [pc, #176]	; (46b0 <role_disable+0x1ec>)
    45fe:	001a      	movs	r2, r3
    4600:	32cc      	adds	r2, #204	; 0xcc
    4602:	6812      	ldr	r2, [r2, #0]
		ticks_active_to_start =
    4604:	33d0      	adds	r3, #208	; 0xd0
    4606:	681b      	ldr	r3, [r3, #0]
		ticks_xtal_to_start =
    4608:	9203      	str	r2, [sp, #12]
			ticks_active_to_start =
    460a:	9302      	str	r3, [sp, #8]
		break;
    460c:	e784      	b.n	4518 <role_disable+0x54>
		if (_radio.ticker_id_event == ticker_id_primary) {
    460e:	7b6b      	ldrb	r3, [r5, #13]
    4610:	429c      	cmp	r4, r3
    4612:	d104      	bne.n	461e <role_disable+0x15a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4614:	2201      	movs	r2, #1
    4616:	2003      	movs	r0, #3
    4618:	0011      	movs	r1, r2
    461a:	f7fe f9cb 	bl	29b4 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    461e:	9b04      	ldr	r3, [sp, #16]
    4620:	2b02      	cmp	r3, #2
    4622:	d000      	beq.n	4626 <role_disable+0x162>
    4624:	e78b      	b.n	453e <role_disable+0x7a>
			cpu_sleep();
    4626:	f7ff fe4f 	bl	42c8 <cpu_sleep>
    462a:	e7f8      	b.n	461e <role_disable+0x15a>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    462c:	9b06      	ldr	r3, [sp, #24]
    462e:	2b01      	cmp	r3, #1
    4630:	d1e1      	bne.n	45f6 <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4632:	2200      	movs	r2, #0
    4634:	4b20      	ldr	r3, [pc, #128]	; (46b8 <role_disable+0x1f4>)
    4636:	0011      	movs	r1, r2
    4638:	2003      	movs	r0, #3
    463a:	f7fe f9df 	bl	29fc <mayfly_enqueue>
    463e:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    4640:	d1d9      	bne.n	45f6 <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4642:	4b1e      	ldr	r3, [pc, #120]	; (46bc <role_disable+0x1f8>)
    4644:	e7bd      	b.n	45c2 <role_disable+0xfe>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4646:	9c05      	ldr	r4, [sp, #20]
    4648:	2c01      	cmp	r4, #1
    464a:	d1d4      	bne.n	45f6 <role_disable+0x132>
		if (ticker_id_stop != TICKER_NULL) {
    464c:	2fff      	cmp	r7, #255	; 0xff
    464e:	d019      	beq.n	4684 <role_disable+0x1c0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    4650:	2302      	movs	r3, #2
    4652:	9307      	str	r3, [sp, #28]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4654:	ab07      	add	r3, sp, #28
    4656:	9300      	str	r3, [sp, #0]
    4658:	003a      	movs	r2, r7
    465a:	0033      	movs	r3, r6
    465c:	2103      	movs	r1, #3
    465e:	2000      	movs	r0, #0
    4660:	f7fe ffd2 	bl	3608 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    4664:	2802      	cmp	r0, #2
    4666:	d107      	bne.n	4678 <role_disable+0x1b4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4668:	0022      	movs	r2, r4
    466a:	0021      	movs	r1, r4
    466c:	3001      	adds	r0, #1
    466e:	f7fe f9a1 	bl	29b4 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    4672:	9b07      	ldr	r3, [sp, #28]
    4674:	2b02      	cmp	r3, #2
    4676:	d0be      	beq.n	45f6 <role_disable+0x132>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4678:	9b07      	ldr	r3, [sp, #28]
    467a:	2b00      	cmp	r3, #0
    467c:	d002      	beq.n	4684 <role_disable+0x1c0>
    467e:	9b07      	ldr	r3, [sp, #28]
    4680:	2b01      	cmp	r3, #1
    4682:	d1b8      	bne.n	45f6 <role_disable+0x132>
		if (_radio.role != ROLE_NONE) {
    4684:	7beb      	ldrb	r3, [r5, #15]
    4686:	2b00      	cmp	r3, #0
    4688:	d0a1      	beq.n	45ce <role_disable+0x10a>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    468a:	2204      	movs	r2, #4
    468c:	4b0c      	ldr	r3, [pc, #48]	; (46c0 <role_disable+0x1fc>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    468e:	2003      	movs	r0, #3
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4690:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4692:	2200      	movs	r2, #0
    4694:	0011      	movs	r1, r2
    4696:	f7fe f9b1 	bl	29fc <mayfly_enqueue>
			LL_ASSERT(!ret);
    469a:	2800      	cmp	r0, #0
    469c:	d1ab      	bne.n	45f6 <role_disable+0x132>
			while (_radio.role != ROLE_NONE) {
    469e:	7beb      	ldrb	r3, [r5, #15]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d100      	bne.n	46a6 <role_disable+0x1e2>
    46a4:	e793      	b.n	45ce <role_disable+0x10a>
				cpu_sleep();
    46a6:	f7ff fe0f 	bl	42c8 <cpu_sleep>
    46aa:	e7f8      	b.n	469e <role_disable+0x1da>
				return 1;
    46ac:	2001      	movs	r0, #1
    46ae:	e796      	b.n	45de <role_disable+0x11a>
    46b0:	20000258 	.word	0x20000258
    46b4:	000042f9 	.word	0x000042f9
    46b8:	20002318 	.word	0x20002318
    46bc:	200023a8 	.word	0x200023a8
    46c0:	20002358 	.word	0x20002358

000046c4 <sched_after_mstr_free_slot_get>:
{
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c6:	b08f      	sub	sp, #60	; 0x3c
    46c8:	001f      	movs	r7, r3
    46ca:	9209      	str	r2, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    46cc:	1d0b      	adds	r3, r1, #4
	ticker_id = ticker_id_prev = 0xff;
    46ce:	2217      	movs	r2, #23
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    46d0:	2400      	movs	r4, #0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    46d2:	9308      	str	r3, [sp, #32]
	ticker_id = ticker_id_prev = 0xff;
    46d4:	23ff      	movs	r3, #255	; 0xff
    46d6:	a906      	add	r1, sp, #24
    46d8:	1852      	adds	r2, r2, r1
{
    46da:	9007      	str	r0, [sp, #28]
	ticker_id = ticker_id_prev = 0xff;
    46dc:	7013      	strb	r3, [r2, #0]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    46de:	603c      	str	r4, [r7, #0]
    46e0:	940c      	str	r4, [sp, #48]	; 0x30
	ticker_id = ticker_id_prev = 0xff;
    46e2:	9306      	str	r3, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    46e4:	9405      	str	r4, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    46e6:	2302      	movs	r3, #2
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    46e8:	2517      	movs	r5, #23
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    46ea:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    46ec:	ab06      	add	r3, sp, #24
    46ee:	18ed      	adds	r5, r5, r3
    46f0:	ab0d      	add	r3, sp, #52	; 0x34
    46f2:	9302      	str	r3, [sp, #8]
    46f4:	4b36      	ldr	r3, [pc, #216]	; (47d0 <sched_after_mstr_free_slot_get+0x10c>)
    46f6:	002a      	movs	r2, r5
    46f8:	9301      	str	r3, [sp, #4]
    46fa:	ab0c      	add	r3, sp, #48	; 0x30
    46fc:	9300      	str	r3, [sp, #0]
    46fe:	9907      	ldr	r1, [sp, #28]
    4700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4702:	2000      	movs	r0, #0
    4704:	f7fe ffae 	bl	3664 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    4708:	2802      	cmp	r0, #2
    470a:	d009      	beq.n	4720 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    470c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    470e:	2b00      	cmp	r3, #0
    4710:	d00a      	beq.n	4728 <sched_after_mstr_free_slot_get+0x64>
    4712:	b662      	cpsie	i
    4714:	2004      	movs	r0, #4
    4716:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4718:	9907      	ldr	r1, [sp, #28]
    471a:	2000      	movs	r0, #0
    471c:	f7ff f808 	bl	3730 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4722:	2b02      	cmp	r3, #2
    4724:	d0f8      	beq.n	4718 <sched_after_mstr_free_slot_get+0x54>
    4726:	e7f1      	b.n	470c <sched_after_mstr_free_slot_get+0x48>
		if (ticker_id == 0xff) {
    4728:	782a      	ldrb	r2, [r5, #0]
    472a:	2aff      	cmp	r2, #255	; 0xff
    472c:	d04c      	beq.n	47c8 <sched_after_mstr_free_slot_get+0x104>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    472e:	2a06      	cmp	r2, #6
    4730:	d9d9      	bls.n	46e6 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    4732:	4b28      	ldr	r3, [pc, #160]	; (47d4 <sched_after_mstr_free_slot_get+0x110>)
    4734:	0019      	movs	r1, r3
    4736:	31ff      	adds	r1, #255	; 0xff
    4738:	7b49      	ldrb	r1, [r1, #13]
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    473a:	3107      	adds	r1, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    473c:	428a      	cmp	r2, r1
    473e:	dad2      	bge.n	46e6 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4740:	2182      	movs	r1, #130	; 0x82
    4742:	3a07      	subs	r2, #7
    4744:	33fc      	adds	r3, #252	; 0xfc
    4746:	b292      	uxth	r2, r2
    4748:	0049      	lsls	r1, r1, #1
    474a:	6898      	ldr	r0, [r3, #8]
    474c:	f7fe f8cf 	bl	28ee <mem_get>
		if (conn && !conn->role) {
    4750:	2800      	cmp	r0, #0
    4752:	d0c8      	beq.n	46e6 <sched_after_mstr_free_slot_get+0x22>
    4754:	7f43      	ldrb	r3, [r0, #29]
    4756:	2b7f      	cmp	r3, #127	; 0x7f
    4758:	d8c5      	bhi.n	46e6 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    475a:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    475c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    475e:	6842      	ldr	r2, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4760:	2b00      	cmp	r3, #0
    4762:	da15      	bge.n	4790 <sched_after_mstr_free_slot_get+0xcc>
				ticks_slot_abs_curr =
    4764:	005b      	lsls	r3, r3, #1
    4766:	085d      	lsrs	r5, r3, #1
				u32_t ticks_prepare_to_start =
    4768:	6883      	ldr	r3, [r0, #8]
    476a:	4293      	cmp	r3, r2
    476c:	d200      	bcs.n	4770 <sched_after_mstr_free_slot_get+0xac>
    476e:	0013      	movs	r3, r2
    4770:	199e      	adds	r6, r3, r6
				ticks_to_expire_normal -=
    4772:	1b76      	subs	r6, r6, r5
			ticks_slot_abs_curr +=
    4774:	68c3      	ldr	r3, [r0, #12]
    4776:	3304      	adds	r3, #4
    4778:	195d      	adds	r5, r3, r5
			if ((ticker_id_prev != 0xFF) &&
    477a:	9b06      	ldr	r3, [sp, #24]
    477c:	2bff      	cmp	r3, #255	; 0xff
    477e:	d10c      	bne.n	479a <sched_after_mstr_free_slot_get+0xd6>
			ticker_id_prev = ticker_id;
    4780:	2317      	movs	r3, #23
    4782:	aa06      	add	r2, sp, #24
    4784:	189b      	adds	r3, r3, r2
    4786:	781b      	ldrb	r3, [r3, #0]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    4788:	002c      	movs	r4, r5
			ticker_id_prev = ticker_id;
    478a:	9306      	str	r3, [sp, #24]
			ticks_to_expire_prev = ticks_to_expire_normal;
    478c:	9605      	str	r6, [sp, #20]
    478e:	e7aa      	b.n	46e6 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    4790:	0015      	movs	r5, r2
    4792:	429a      	cmp	r2, r3
    4794:	d2ee      	bcs.n	4774 <sched_after_mstr_free_slot_get+0xb0>
    4796:	001d      	movs	r5, r3
    4798:	e7ec      	b.n	4774 <sched_after_mstr_free_slot_get+0xb0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    479a:	9905      	ldr	r1, [sp, #20]
    479c:	0030      	movs	r0, r6
    479e:	f7fe ffdb 	bl	3758 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    47a2:	9b08      	ldr	r3, [sp, #32]
    47a4:	18e3      	adds	r3, r4, r3
			if ((ticker_id_prev != 0xFF) &&
    47a6:	4298      	cmp	r0, r3
    47a8:	d9ea      	bls.n	4780 <sched_after_mstr_free_slot_get+0xbc>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    47aa:	9b05      	ldr	r3, [sp, #20]
    47ac:	4a0a      	ldr	r2, [pc, #40]	; (47d8 <sched_after_mstr_free_slot_get+0x114>)
    47ae:	1918      	adds	r0, r3, r4
    47b0:	2100      	movs	r1, #0
    47b2:	2307      	movs	r3, #7
    47b4:	f7fb fdd8 	bl	368 <__aeabi_lmul>
    47b8:	4a08      	ldr	r2, [pc, #32]	; (47dc <sched_after_mstr_free_slot_get+0x118>)
    47ba:	2300      	movs	r3, #0
    47bc:	f7fb fdb4 	bl	328 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    47c0:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    47c2:	6038      	str	r0, [r7, #0]
}
    47c4:	b00f      	add	sp, #60	; 0x3c
    47c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ticker_id_prev != 0xff) {
    47c8:	9b06      	ldr	r3, [sp, #24]
    47ca:	2bff      	cmp	r3, #255	; 0xff
    47cc:	d1ed      	bne.n	47aa <sched_after_mstr_free_slot_get+0xe6>
    47ce:	e7f9      	b.n	47c4 <sched_after_mstr_free_slot_get+0x100>
    47d0:	000042f9 	.word	0x000042f9
    47d4:	20000258 	.word	0x20000258
    47d8:	1afd498d 	.word	0x1afd498d
    47dc:	3b9aca00 	.word	0x3b9aca00

000047e0 <isr_adv_ci_adva_check>:
{
    47e0:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    47e2:	7804      	ldrb	r4, [r0, #0]
    47e4:	780a      	ldrb	r2, [r1, #0]
    47e6:	0665      	lsls	r5, r4, #25
    47e8:	0fed      	lsrs	r5, r5, #31
    47ea:	09d2      	lsrs	r2, r2, #7
    47ec:	2300      	movs	r3, #0
    47ee:	4295      	cmp	r5, r2
    47f0:	d10d      	bne.n	480e <isr_adv_ci_adva_check+0x2e>
    47f2:	330f      	adds	r3, #15
    47f4:	3108      	adds	r1, #8
    47f6:	401c      	ands	r4, r3
    47f8:	000e      	movs	r6, r1
    47fa:	1c85      	adds	r5, r0, #2
    47fc:	2c01      	cmp	r4, #1
    47fe:	d008      	beq.n	4812 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    4800:	2206      	movs	r2, #6
    4802:	0031      	movs	r1, r6
    4804:	0028      	movs	r0, r5
    4806:	f7fb ff1c 	bl	642 <memcmp>
	return (adv->tx_addr == ci->rx_addr) &&
    480a:	4243      	negs	r3, r0
    480c:	4143      	adcs	r3, r0
    480e:	0018      	movs	r0, r3
}
    4810:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    4812:	2206      	movs	r2, #6
    4814:	0028      	movs	r0, r5
    4816:	f7fb ff14 	bl	642 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    481a:	2800      	cmp	r0, #0
    481c:	d1f0      	bne.n	4800 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    481e:	0023      	movs	r3, r4
    4820:	e7f5      	b.n	480e <isr_adv_ci_adva_check+0x2e>
	...

00004824 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    4824:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    4826:	21ba      	movs	r1, #186	; 0xba
    4828:	2476      	movs	r4, #118	; 0x76
    482a:	4a0b      	ldr	r2, [pc, #44]	; (4858 <rx_fc_lock+0x34>)
    482c:	0049      	lsls	r1, r1, #1
    482e:	34ff      	adds	r4, #255	; 0xff
    4830:	5c53      	ldrb	r3, [r2, r1]
    4832:	5d14      	ldrb	r4, [r2, r4]
    4834:	429c      	cmp	r4, r3
    4836:	d10d      	bne.n	4854 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    4838:	5c53      	ldrb	r3, [r2, r1]
    483a:	33b4      	adds	r3, #180	; 0xb4
    483c:	005b      	lsls	r3, r3, #1
    483e:	18d3      	adds	r3, r2, r3
    4840:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
    4842:	5c53      	ldrb	r3, [r2, r1]
    4844:	3301      	adds	r3, #1
    4846:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
    4848:	2b03      	cmp	r3, #3
    484a:	d100      	bne.n	484e <rx_fc_lock+0x2a>
			req = 0;
    484c:	2300      	movs	r3, #0
		}
		_radio.fc_req = req;
    484e:	21ba      	movs	r1, #186	; 0xba
    4850:	0049      	lsls	r1, r1, #1
    4852:	5453      	strb	r3, [r2, r1]
	}
}
    4854:	bd10      	pop	{r4, pc}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	20000258 	.word	0x20000258

0000485c <ticker_job_disable>:
{
    485c:	b510      	push	{r4, lr}
	if (_radio.state != STATE_NONE) {
    485e:	4b05      	ldr	r3, [pc, #20]	; (4874 <ticker_job_disable+0x18>)
    4860:	7c1b      	ldrb	r3, [r3, #16]
    4862:	2b00      	cmp	r3, #0
    4864:	d004      	beq.n	4870 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4866:	2101      	movs	r1, #1
    4868:	2200      	movs	r2, #0
    486a:	0008      	movs	r0, r1
    486c:	f7fe f8a2 	bl	29b4 <mayfly_enable>
}
    4870:	bd10      	pop	{r4, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	20000258 	.word	0x20000258

00004878 <hdr_conn_get>:
{
    4878:	b510      	push	{r4, lr}
    487a:	000c      	movs	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    487c:	2806      	cmp	r0, #6
    487e:	d90a      	bls.n	4896 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4880:	2182      	movs	r1, #130	; 0x82
    4882:	4b0b      	ldr	r3, [pc, #44]	; (48b0 <hdr_conn_get+0x38>)
    4884:	3807      	subs	r0, #7
    4886:	33fc      	adds	r3, #252	; 0xfc
    4888:	b282      	uxth	r2, r0
    488a:	0049      	lsls	r1, r1, #1
    488c:	6898      	ldr	r0, [r3, #8]
    488e:	f7fe f82e 	bl	28ee <mem_get>
    4892:	6020      	str	r0, [r4, #0]
}
    4894:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    4896:	2805      	cmp	r0, #5
    4898:	d003      	beq.n	48a2 <hdr_conn_get+0x2a>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    489a:	2806      	cmp	r0, #6
    489c:	d004      	beq.n	48a8 <hdr_conn_get+0x30>
	return NULL;
    489e:	2000      	movs	r0, #0
    48a0:	e7f8      	b.n	4894 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    48a2:	4803      	ldr	r0, [pc, #12]	; (48b0 <hdr_conn_get+0x38>)
    48a4:	3014      	adds	r0, #20
    48a6:	e7f5      	b.n	4894 <hdr_conn_get+0x1c>
		return &_radio.scanner.hdr;
    48a8:	4801      	ldr	r0, [pc, #4]	; (48b0 <hdr_conn_get+0x38>)
    48aa:	30cc      	adds	r0, #204	; 0xcc
    48ac:	e7f2      	b.n	4894 <hdr_conn_get+0x1c>
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	20000258 	.word	0x20000258

000048b4 <mayfly_xtal_retain.part.15>:
			s_xtal_retained = 0;
    48b4:	2200      	movs	r2, #0
    48b6:	4b09      	ldr	r3, [pc, #36]	; (48dc <mayfly_xtal_retain.part.15+0x28>)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    48b8:	b510      	push	{r4, lr}
			s_xtal_retained = 0;
    48ba:	701a      	strb	r2, [r3, #0]
    48bc:	4b08      	ldr	r3, [pc, #32]	; (48e0 <mayfly_xtal_retain.part.15+0x2c>)
			switch (caller_id) {
    48be:	4290      	cmp	r0, r2
    48c0:	d002      	beq.n	48c8 <mayfly_xtal_retain.part.15+0x14>
    48c2:	2801      	cmp	r0, #1
    48c4:	d106      	bne.n	48d4 <mayfly_xtal_retain.part.15+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    48c6:	3310      	adds	r3, #16
			retval = mayfly_enqueue(caller_id,
    48c8:	2200      	movs	r2, #0
    48ca:	0011      	movs	r1, r2
    48cc:	f7fe f896 	bl	29fc <mayfly_enqueue>
			LL_ASSERT(!retval);
    48d0:	2800      	cmp	r0, #0
    48d2:	d002      	beq.n	48da <mayfly_xtal_retain.part.15+0x26>
    48d4:	b662      	cpsie	i
    48d6:	2004      	movs	r0, #4
    48d8:	df02      	svc	2
}
    48da:	bd10      	pop	{r4, pc}
    48dc:	2000045c 	.word	0x2000045c
    48e0:	200023b8 	.word	0x200023b8

000048e4 <rx_packet_set>:
{
    48e4:	b570      	push	{r4, r5, r6, lr}
    48e6:	000d      	movs	r5, r1
	radio_phy_set(phy, 0);
    48e8:	2100      	movs	r1, #0
{
    48ea:	0004      	movs	r4, r0
	radio_phy_set(phy, 0);
    48ec:	0008      	movs	r0, r1
    48ee:	f004 fa23 	bl	8d38 <radio_phy_set>
	if (conn->enc_rx) {
    48f2:	0023      	movs	r3, r4
    48f4:	33a8      	adds	r3, #168	; 0xa8
    48f6:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    48f8:	2201      	movs	r2, #1
	if (conn->enc_rx) {
    48fa:	06db      	lsls	r3, r3, #27
    48fc:	d50c      	bpl.n	4918 <rx_packet_set+0x34>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    48fe:	211f      	movs	r1, #31
    4900:	2008      	movs	r0, #8
    4902:	f004 fa67 	bl	8dd4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    4906:	0020      	movs	r0, r4
    4908:	002a      	movs	r2, r5
    490a:	30a9      	adds	r0, #169	; 0xa9
    490c:	2100      	movs	r1, #0
    490e:	f004 fc75 	bl	91fc <radio_ccm_rx_pkt_set>
		radio_pkt_rx_set(pdu_data_rx);
    4912:	f004 fa85 	bl	8e20 <radio_pkt_rx_set>
}
    4916:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    4918:	2008      	movs	r0, #8
    491a:	211b      	movs	r1, #27
    491c:	f004 fa5a 	bl	8dd4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    4920:	0028      	movs	r0, r5
    4922:	e7f6      	b.n	4912 <rx_packet_set+0x2e>

00004924 <tx_packet_set>:
{
    4924:	b570      	push	{r4, r5, r6, lr}
    4926:	000d      	movs	r5, r1
	radio_phy_set(phy, flags);
    4928:	2100      	movs	r1, #0
{
    492a:	0004      	movs	r4, r0
	radio_phy_set(phy, flags);
    492c:	0008      	movs	r0, r1
    492e:	f004 fa03 	bl	8d38 <radio_phy_set>
	if (conn->enc_tx) {
    4932:	0023      	movs	r3, r4
    4934:	33a8      	adds	r3, #168	; 0xa8
    4936:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4938:	2201      	movs	r2, #1
	if (conn->enc_tx) {
    493a:	069b      	lsls	r3, r3, #26
    493c:	d50b      	bpl.n	4956 <tx_packet_set+0x32>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    493e:	211f      	movs	r1, #31
    4940:	2008      	movs	r0, #8
    4942:	f004 fa47 	bl	8dd4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    4946:	0020      	movs	r0, r4
    4948:	0029      	movs	r1, r5
    494a:	30ca      	adds	r0, #202	; 0xca
    494c:	f004 fc94 	bl	9278 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    4950:	f004 fa6e 	bl	8e30 <radio_pkt_tx_set>
}
    4954:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    4956:	2008      	movs	r0, #8
    4958:	211b      	movs	r1, #27
    495a:	f004 fa3b 	bl	8dd4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    495e:	0028      	movs	r0, r5
    4960:	e7f6      	b.n	4950 <tx_packet_set+0x2c>
	...

00004964 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4964:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4966:	4e15      	ldr	r6, [pc, #84]	; (49bc <isr_scan_tgta_check.isra.30+0x58>)
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4968:	0005      	movs	r5, r0
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    496a:	0033      	movs	r3, r6
    496c:	33dd      	adds	r3, #221	; 0xdd
    496e:	781a      	ldrb	r2, [r3, #0]
    4970:	7803      	ldrb	r3, [r0, #0]
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4972:	000c      	movs	r4, r1
			BDADDR_SIZE) == 0))) ||
    4974:	09d2      	lsrs	r2, r2, #7
    4976:	09db      	lsrs	r3, r3, #7
    4978:	429a      	cmp	r2, r3
    497a:	d006      	beq.n	498a <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    497c:	2302      	movs	r3, #2
    497e:	36dd      	adds	r6, #221	; 0xdd
    4980:	7830      	ldrb	r0, [r6, #0]
    4982:	0900      	lsrs	r0, r0, #4
    4984:	4018      	ands	r0, r3
    4986:	d10b      	bne.n	49a0 <isr_scan_tgta_check.isra.30+0x3c>
}
    4988:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    498a:	0030      	movs	r0, r6
    498c:	0029      	movs	r1, r5
    498e:	30de      	adds	r0, #222	; 0xde
    4990:	2206      	movs	r2, #6
    4992:	3108      	adds	r1, #8
    4994:	f7fb fe55 	bl	642 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4998:	2800      	cmp	r0, #0
    499a:	d1ef      	bne.n	497c <isr_scan_tgta_check.isra.30+0x18>
			BDADDR_SIZE) == 0))) ||
    499c:	2001      	movs	r0, #1
    499e:	e7f3      	b.n	4988 <isr_scan_tgta_check.isra.30+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    49a0:	782b      	ldrb	r3, [r5, #0]
			BDADDR_SIZE) == 0))) ||
    49a2:	2000      	movs	r0, #0
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    49a4:	2b7f      	cmp	r3, #127	; 0x7f
    49a6:	d9ef      	bls.n	4988 <isr_scan_tgta_check.isra.30+0x24>
	    (pdu->rx_addr != 0) &&
    49a8:	223f      	movs	r2, #63	; 0x3f
    49aa:	7b6b      	ldrb	r3, [r5, #13]
    49ac:	4393      	bics	r3, r2
    49ae:	2b40      	cmp	r3, #64	; 0x40
    49b0:	d1ea      	bne.n	4988 <isr_scan_tgta_check.isra.30+0x24>
		if (dir_report) {
    49b2:	4284      	cmp	r4, r0
    49b4:	d0f2      	beq.n	499c <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    49b6:	3001      	adds	r0, #1
    49b8:	7020      	strb	r0, [r4, #0]
    49ba:	e7e5      	b.n	4988 <isr_scan_tgta_check.isra.30+0x24>
    49bc:	20000258 	.word	0x20000258

000049c0 <chan_set.part.23>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    49c0:	b662      	cpsie	i
    49c2:	2004      	movs	r0, #4
    49c4:	df02      	svc	2
	...

000049c8 <prepare_normal_set>:
{
    49c8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    49ca:	6803      	ldr	r3, [r0, #0]
{
    49cc:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    49ce:	2b00      	cmp	r3, #0
    49d0:	da19      	bge.n	4a06 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    49d2:	6845      	ldr	r5, [r0, #4]
    49d4:	6884      	ldr	r4, [r0, #8]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    49d6:	005b      	lsls	r3, r3, #1
    49d8:	085b      	lsrs	r3, r3, #1
		u32_t ticks_prepare_to_start =
    49da:	42ac      	cmp	r4, r5
    49dc:	d200      	bcs.n	49e0 <prepare_normal_set+0x18>
    49de:	002c      	movs	r4, r5
		ticker_status =
    49e0:	9006      	str	r0, [sp, #24]
    49e2:	480a      	ldr	r0, [pc, #40]	; (4a0c <prepare_normal_set+0x44>)
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    49e4:	1b1b      	subs	r3, r3, r4
		ticker_status =
    49e6:	9005      	str	r0, [sp, #20]
    49e8:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    49ea:	b29b      	uxth	r3, r3
		ticker_status =
    49ec:	9301      	str	r3, [sp, #4]
    49ee:	9300      	str	r3, [sp, #0]
    49f0:	9004      	str	r0, [sp, #16]
    49f2:	0003      	movs	r3, r0
    49f4:	9003      	str	r0, [sp, #12]
    49f6:	9002      	str	r0, [sp, #8]
    49f8:	f7fe fdb6 	bl	3568 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    49fc:	2302      	movs	r3, #2
    49fe:	4398      	bics	r0, r3
    4a00:	d001      	beq.n	4a06 <prepare_normal_set+0x3e>
    4a02:	f7ff ffdd 	bl	49c0 <chan_set.part.23>
}
    4a06:	b009      	add	sp, #36	; 0x24
    4a08:	bd30      	pop	{r4, r5, pc}
    4a0a:	46c0      	nop			; (mov r8, r8)
    4a0c:	0000430d 	.word	0x0000430d

00004a10 <terminate_ind_rx_enqueue>:
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    4a10:	0003      	movs	r3, r0
{
    4a12:	b510      	push	{r4, lr}
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    4a14:	339c      	adds	r3, #156	; 0x9c
{
    4a16:	0002      	movs	r2, r0
	LL_ASSERT(node_rx->hdr.onion.link);
    4a18:	6818      	ldr	r0, [r3, #0]
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d101      	bne.n	4a22 <terminate_ind_rx_enqueue+0x12>
    4a1e:	f7ff ffcf 	bl	49c0 <chan_set.part.23>
	node_rx->hdr.handle = conn->handle;
    4a22:	8c12      	ldrh	r2, [r2, #32]
	*((u8_t *)node_rx->pdu_data) = reason;
    4a24:	7219      	strb	r1, [r3, #8]
	node_rx->hdr.handle = conn->handle;
    4a26:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4a28:	2207      	movs	r2, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4a2a:	21b6      	movs	r1, #182	; 0xb6
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4a2c:	711a      	strb	r2, [r3, #4]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4a2e:	4a08      	ldr	r2, [pc, #32]	; (4a50 <terminate_ind_rx_enqueue+0x40>)
    4a30:	0049      	lsls	r1, r1, #1
    4a32:	5c51      	ldrb	r1, [r2, r1]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4a34:	3245      	adds	r2, #69	; 0x45
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4a36:	7019      	strb	r1, [r3, #0]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4a38:	32ff      	adds	r2, #255	; 0xff
    4a3a:	0019      	movs	r1, r3
    4a3c:	f7fd ff75 	bl	292a <memq_enqueue>
	LL_ASSERT(link);
    4a40:	2800      	cmp	r0, #0
    4a42:	d102      	bne.n	4a4a <terminate_ind_rx_enqueue+0x3a>
    4a44:	b662      	cpsie	i
    4a46:	2004      	movs	r0, #4
    4a48:	df02      	svc	2
	radio_event_callback();
    4a4a:	f003 fc67 	bl	831c <radio_event_callback>
}
    4a4e:	bd10      	pop	{r4, pc}
    4a50:	20000258 	.word	0x20000258

00004a54 <packet_rx_enqueue>:
{
    4a54:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    4a56:	219b      	movs	r1, #155	; 0x9b
    4a58:	2436      	movs	r4, #54	; 0x36
    4a5a:	4a15      	ldr	r2, [pc, #84]	; (4ab0 <packet_rx_enqueue+0x5c>)
    4a5c:	34ff      	adds	r4, #255	; 0xff
    4a5e:	0049      	lsls	r1, r1, #1
    4a60:	5d13      	ldrb	r3, [r2, r4]
    4a62:	5c51      	ldrb	r1, [r2, r1]
    4a64:	4299      	cmp	r1, r3
    4a66:	d101      	bne.n	4a6c <packet_rx_enqueue+0x18>
    4a68:	f7ff ffaa 	bl	49c0 <chan_set.part.23>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4a6c:	0011      	movs	r1, r2
    4a6e:	5d13      	ldrb	r3, [r2, r4]
    4a70:	31fc      	adds	r1, #252	; 0xfc
    4a72:	6b49      	ldr	r1, [r1, #52]	; 0x34
    4a74:	009b      	lsls	r3, r3, #2
    4a76:	5859      	ldr	r1, [r3, r1]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4a78:	23b6      	movs	r3, #182	; 0xb6
	if (last == _radio.packet_rx_count) {
    4a7a:	259a      	movs	r5, #154	; 0x9a
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4a7c:	005b      	lsls	r3, r3, #1
    4a7e:	5cd3      	ldrb	r3, [r2, r3]
	link = node_rx->hdr.onion.link;
    4a80:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4a82:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    4a84:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    4a86:	006d      	lsls	r5, r5, #1
	last = _radio.packet_rx_last + 1;
    4a88:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    4a8a:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_rx_last + 1;
    4a8c:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    4a8e:	429d      	cmp	r5, r3
    4a90:	d100      	bne.n	4a94 <packet_rx_enqueue+0x40>
		last = 0;
    4a92:	2300      	movs	r3, #0
	_radio.packet_rx_last = last;
    4a94:	5513      	strb	r3, [r2, r4]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4a96:	3245      	adds	r2, #69	; 0x45
    4a98:	32ff      	adds	r2, #255	; 0xff
    4a9a:	f7fd ff46 	bl	292a <memq_enqueue>
	LL_ASSERT(link);
    4a9e:	2800      	cmp	r0, #0
    4aa0:	d102      	bne.n	4aa8 <packet_rx_enqueue+0x54>
    4aa2:	b662      	cpsie	i
    4aa4:	2004      	movs	r0, #4
    4aa6:	df02      	svc	2
	radio_event_callback();
    4aa8:	f003 fc38 	bl	831c <radio_event_callback>
}
    4aac:	bd70      	pop	{r4, r5, r6, pc}
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	20000258 	.word	0x20000258

00004ab4 <mayfly_adv_stop>:
{
    4ab4:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    4ab6:	2001      	movs	r0, #1
    4ab8:	f7ff fc4a 	bl	4350 <packet_rx_reserve_get>
    4abc:	1e04      	subs	r4, r0, #0
	LL_ASSERT(node_rx);
    4abe:	d101      	bne.n	4ac4 <mayfly_adv_stop+0x10>
    4ac0:	f7ff ff7e 	bl	49c0 <chan_set.part.23>
	node_rx->hdr.handle = 0xffff;
    4ac4:	2301      	movs	r3, #1
    4ac6:	425b      	negs	r3, r3
    4ac8:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4aca:	3307      	adds	r3, #7
    4acc:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4ace:	2210      	movs	r2, #16
    4ad0:	2100      	movs	r1, #0
	radio_le_conn_cmplt = (void *)pdu_data_rx->lldata;
    4ad2:	300b      	adds	r0, #11
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4ad4:	f7fb fdf2 	bl	6bc <memset>
	radio_le_conn_cmplt->status = 0x3c;
    4ad8:	233c      	movs	r3, #60	; 0x3c
    4ada:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
    4adc:	f7ff ffba 	bl	4a54 <packet_rx_enqueue>
}
    4ae0:	bd10      	pop	{r4, pc}
	...

00004ae4 <ticker_stop_adv_stop>:
{
    4ae4:	b530      	push	{r4, r5, lr}
    4ae6:	4c3f      	ldr	r4, [pc, #252]	; (4be4 <ticker_stop_adv_stop+0x100>)
    4ae8:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
    4aea:	2800      	cmp	r0, #0
    4aec:	d004      	beq.n	4af8 <ticker_stop_adv_stop+0x14>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    4aee:	7ba3      	ldrb	r3, [r4, #14]
    4af0:	2b05      	cmp	r3, #5
    4af2:	d074      	beq.n	4bde <ticker_stop_adv_stop+0xfa>
    4af4:	f7ff ff64 	bl	49c0 <chan_set.part.23>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4af8:	7b23      	ldrb	r3, [r4, #12]
    4afa:	2b05      	cmp	r3, #5
    4afc:	d002      	beq.n	4b04 <ticker_stop_adv_stop+0x20>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    4afe:	7b63      	ldrb	r3, [r4, #13]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4b00:	2b05      	cmp	r3, #5
    4b02:	d164      	bne.n	4bce <ticker_stop_adv_stop+0xea>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4b04:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b06:	2200      	movs	r2, #0
    4b08:	4d37      	ldr	r5, [pc, #220]	; (4be8 <ticker_stop_adv_stop+0x104>)
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4b0a:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b0c:	ab02      	add	r3, sp, #8
    4b0e:	9300      	str	r3, [sp, #0]
    4b10:	2101      	movs	r1, #1
    4b12:	002b      	movs	r3, r5
    4b14:	0010      	movs	r0, r2
    4b16:	f7fe fd77 	bl	3608 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4b1a:	2802      	cmp	r0, #2
    4b1c:	d00e      	beq.n	4b3c <ticker_stop_adv_stop+0x58>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4b1e:	9802      	ldr	r0, [sp, #8]
    4b20:	2800      	cmp	r0, #0
    4b22:	d018      	beq.n	4b56 <ticker_stop_adv_stop+0x72>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4b24:	9802      	ldr	r0, [sp, #8]
    4b26:	2801      	cmp	r0, #1
    4b28:	d11a      	bne.n	4b60 <ticker_stop_adv_stop+0x7c>
		if (_radio.role != ROLE_NONE) {
    4b2a:	7be3      	ldrb	r3, [r4, #15]
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d04e      	beq.n	4bce <ticker_stop_adv_stop+0xea>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4b30:	2204      	movs	r2, #4
    4b32:	4b2e      	ldr	r3, [pc, #184]	; (4bec <ticker_stop_adv_stop+0x108>)
    4b34:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4b36:	2200      	movs	r2, #0
    4b38:	0011      	movs	r1, r2
    4b3a:	e044      	b.n	4bc6 <ticker_stop_adv_stop+0xe2>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4b3c:	2201      	movs	r2, #1
    4b3e:	0011      	movs	r1, r2
    4b40:	0010      	movs	r0, r2
    4b42:	f7fd ff37 	bl	29b4 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    4b46:	9b02      	ldr	r3, [sp, #8]
    4b48:	2b02      	cmp	r3, #2
    4b4a:	d1e8      	bne.n	4b1e <ticker_stop_adv_stop+0x3a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b4c:	2101      	movs	r1, #1
    4b4e:	2000      	movs	r0, #0
    4b50:	f7fe fdee 	bl	3730 <ticker_job_sched>
    4b54:	e7f7      	b.n	4b46 <ticker_stop_adv_stop+0x62>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4b56:	2302      	movs	r3, #2
    4b58:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    4b5a:	7b23      	ldrb	r3, [r4, #12]
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d102      	bne.n	4b66 <ticker_stop_adv_stop+0x82>
	LL_ASSERT(!retval);
    4b60:	b662      	cpsie	i
    4b62:	2004      	movs	r0, #4
    4b64:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b66:	2201      	movs	r2, #1
    4b68:	ab03      	add	r3, sp, #12
		_radio.ticker_id_prepare = 0;
    4b6a:	7320      	strb	r0, [r4, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b6c:	0011      	movs	r1, r2
    4b6e:	9300      	str	r3, [sp, #0]
    4b70:	002b      	movs	r3, r5
    4b72:	f7fe fd49 	bl	3608 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4b76:	2802      	cmp	r0, #2
    4b78:	d00f      	beq.n	4b9a <ticker_stop_adv_stop+0xb6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4b7a:	9903      	ldr	r1, [sp, #12]
    4b7c:	2900      	cmp	r1, #0
    4b7e:	d019      	beq.n	4bb4 <ticker_stop_adv_stop+0xd0>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4b80:	9c03      	ldr	r4, [sp, #12]
    4b82:	2c01      	cmp	r4, #1
    4b84:	d1ec      	bne.n	4b60 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4b86:	2200      	movs	r2, #0
    4b88:	4b19      	ldr	r3, [pc, #100]	; (4bf0 <ticker_stop_adv_stop+0x10c>)
    4b8a:	0011      	movs	r1, r2
    4b8c:	0020      	movs	r0, r4
    4b8e:	f7fd ff35 	bl	29fc <mayfly_enqueue>
    4b92:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    4b94:	d1e4      	bne.n	4b60 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4b96:	4b17      	ldr	r3, [pc, #92]	; (4bf4 <ticker_stop_adv_stop+0x110>)
    4b98:	e013      	b.n	4bc2 <ticker_stop_adv_stop+0xde>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4b9a:	2201      	movs	r2, #1
    4b9c:	0011      	movs	r1, r2
    4b9e:	0010      	movs	r0, r2
    4ba0:	f7fd ff08 	bl	29b4 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    4ba4:	9b03      	ldr	r3, [sp, #12]
    4ba6:	2b02      	cmp	r3, #2
    4ba8:	d1e7      	bne.n	4b7a <ticker_stop_adv_stop+0x96>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4baa:	2101      	movs	r1, #1
    4bac:	2000      	movs	r0, #0
    4bae:	f7fe fdbf 	bl	3730 <ticker_job_sched>
    4bb2:	e7f7      	b.n	4ba4 <ticker_stop_adv_stop+0xc0>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4bb4:	6963      	ldr	r3, [r4, #20]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4bb6:	69a2      	ldr	r2, [r4, #24]
			ticks_xtal_to_start &= ~XON_BITMASK;
    4bb8:	005b      	lsls	r3, r3, #1
    4bba:	085b      	lsrs	r3, r3, #1
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4bbc:	4293      	cmp	r3, r2
    4bbe:	d2ea      	bcs.n	4b96 <ticker_stop_adv_stop+0xb2>
				ret = mayfly_enqueue(
    4bc0:	4b0b      	ldr	r3, [pc, #44]	; (4bf0 <ticker_stop_adv_stop+0x10c>)
    4bc2:	000a      	movs	r2, r1
    4bc4:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4bc6:	f7fd ff19 	bl	29fc <mayfly_enqueue>
			LL_ASSERT(!ret);
    4bca:	2800      	cmp	r0, #0
    4bcc:	d1c8      	bne.n	4b60 <ticker_stop_adv_stop+0x7c>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4bce:	2200      	movs	r2, #0
    4bd0:	4b09      	ldr	r3, [pc, #36]	; (4bf8 <ticker_stop_adv_stop+0x114>)
    4bd2:	0011      	movs	r1, r2
    4bd4:	2001      	movs	r0, #1
    4bd6:	f7fd ff11 	bl	29fc <mayfly_enqueue>
	LL_ASSERT(!retval);
    4bda:	2800      	cmp	r0, #0
    4bdc:	d1c0      	bne.n	4b60 <ticker_stop_adv_stop+0x7c>
}
    4bde:	b005      	add	sp, #20
    4be0:	bd30      	pop	{r4, r5, pc}
    4be2:	46c0      	nop			; (mov r8, r8)
    4be4:	20000258 	.word	0x20000258
    4be8:	000042f9 	.word	0x000042f9
    4bec:	20002348 	.word	0x20002348
    4bf0:	20002308 	.word	0x20002308
    4bf4:	20002398 	.word	0x20002398
    4bf8:	200022e8 	.word	0x200022e8

00004bfc <sched_after_mstr_free_offset_get>:
{
    4bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4bfe:	001c      	movs	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
    4c00:	9201      	str	r2, [sp, #4]
{
    4c02:	0005      	movs	r5, r0
    4c04:	0017      	movs	r7, r2
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    4c06:	3127      	adds	r1, #39	; 0x27
    4c08:	aa01      	add	r2, sp, #4
    4c0a:	2001      	movs	r0, #1
    4c0c:	f7ff fd5a 	bl	46c4 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    4c10:	6823      	ldr	r3, [r4, #0]
    4c12:	2b00      	cmp	r3, #0
    4c14:	d01d      	beq.n	4c52 <sched_after_mstr_free_offset_get+0x56>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    4c16:	2380      	movs	r3, #128	; 0x80
    4c18:	9801      	ldr	r0, [sp, #4]
    4c1a:	041b      	lsls	r3, r3, #16
    4c1c:	1bc6      	subs	r6, r0, r7
    4c1e:	401e      	ands	r6, r3
    4c20:	d001      	beq.n	4c26 <sched_after_mstr_free_offset_get+0x2a>
    4c22:	f7ff fecd 	bl	49c0 <chan_set.part.23>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4c26:	0039      	movs	r1, r7
    4c28:	f7fe fd96 	bl	3758 <ticker_ticks_diff_get>
    4c2c:	4a0b      	ldr	r2, [pc, #44]	; (4c5c <sched_after_mstr_free_offset_get+0x60>)
    4c2e:	2307      	movs	r3, #7
    4c30:	0031      	movs	r1, r6
    4c32:	f7fb fb99 	bl	368 <__aeabi_lmul>
    4c36:	2300      	movs	r3, #0
    4c38:	4a09      	ldr	r2, [pc, #36]	; (4c60 <sched_after_mstr_free_offset_get+0x64>)
    4c3a:	f7fb fb75 	bl	328 <__aeabi_uldivmod>
    4c3e:	6823      	ldr	r3, [r4, #0]
    4c40:	1818      	adds	r0, r3, r0
    4c42:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    4c44:	2800      	cmp	r0, #0
    4c46:	db04      	blt.n	4c52 <sched_after_mstr_free_offset_get+0x56>
		u32_t conn_interval_us = conn_interval * 1250;
    4c48:	4806      	ldr	r0, [pc, #24]	; (4c64 <sched_after_mstr_free_offset_get+0x68>)
    4c4a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    4c4c:	6823      	ldr	r3, [r4, #0]
    4c4e:	4298      	cmp	r0, r3
    4c50:	d300      	bcc.n	4c54 <sched_after_mstr_free_offset_get+0x58>
}
    4c52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			*win_offset_us -= conn_interval_us;
    4c54:	1a1b      	subs	r3, r3, r0
    4c56:	6023      	str	r3, [r4, #0]
    4c58:	e7f8      	b.n	4c4c <sched_after_mstr_free_offset_get+0x50>
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	1afd498d 	.word	0x1afd498d
    4c60:	3b9aca00 	.word	0x3b9aca00
    4c64:	000004e2 	.word	0x000004e2

00004c68 <mayfly_sched_win_offset_use>:
{
    4c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4c6a:	0003      	movs	r3, r0
{
    4c6c:	0004      	movs	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4c6e:	336c      	adds	r3, #108	; 0x6c
    4c70:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    4c72:	68e1      	ldr	r1, [r4, #12]
    4c74:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    4c76:	f7ff ffc1 	bl	4bfc <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4c7a:	466b      	mov	r3, sp
    4c7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4c7e:	4905      	ldr	r1, [pc, #20]	; (4c94 <mayfly_sched_win_offset_use+0x2c>)
    4c80:	1d9d      	adds	r5, r3, #6
    4c82:	f7fb faa1 	bl	1c8 <__aeabi_uidiv>
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4c86:	0029      	movs	r1, r5
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4c88:	8028      	strh	r0, [r5, #0]
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4c8a:	2202      	movs	r2, #2
    4c8c:	6f60      	ldr	r0, [r4, #116]	; 0x74
    4c8e:	f7fb fceb 	bl	668 <memcpy>
}
    4c92:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    4c94:	000004e2 	.word	0x000004e2

00004c98 <chan_set>:
{
    4c98:	b510      	push	{r4, lr}
    4c9a:	0004      	movs	r4, r0
	switch (chan) {
    4c9c:	2826      	cmp	r0, #38	; 0x26
    4c9e:	d009      	beq.n	4cb4 <chan_set+0x1c>
    4ca0:	2827      	cmp	r0, #39	; 0x27
    4ca2:	d00e      	beq.n	4cc2 <chan_set+0x2a>
		radio_freq_chan_set(2);
    4ca4:	2002      	movs	r0, #2
	switch (chan) {
    4ca6:	2c25      	cmp	r4, #37	; 0x25
    4ca8:	d005      	beq.n	4cb6 <chan_set+0x1e>
		if (chan < 11) {
    4caa:	2c0a      	cmp	r4, #10
    4cac:	d80b      	bhi.n	4cc6 <chan_set+0x2e>
			radio_freq_chan_set(4 + (2 * chan));
    4cae:	1ca0      	adds	r0, r4, #2
    4cb0:	0040      	lsls	r0, r0, #1
    4cb2:	e000      	b.n	4cb6 <chan_set+0x1e>
		radio_freq_chan_set(26);
    4cb4:	201a      	movs	r0, #26
			radio_freq_chan_set(4 + (2 * chan));
    4cb6:	f004 f853 	bl	8d60 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    4cba:	0020      	movs	r0, r4
    4cbc:	f004 f858 	bl	8d70 <radio_whiten_iv_set>
}
    4cc0:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(80);
    4cc2:	2050      	movs	r0, #80	; 0x50
    4cc4:	e7f7      	b.n	4cb6 <chan_set+0x1e>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    4cc6:	1ce0      	adds	r0, r4, #3
		} else if (chan < 40) {
    4cc8:	2c27      	cmp	r4, #39	; 0x27
    4cca:	d9f1      	bls.n	4cb0 <chan_set+0x18>
    4ccc:	f7ff fe78 	bl	49c0 <chan_set.part.23>

00004cd0 <adv_setup>:
{
    4cd0:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    4cd2:	4c2d      	ldr	r4, [pc, #180]	; (4d88 <adv_setup+0xb8>)
    4cd4:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    4cd6:	0022      	movs	r2, r4
	if (_radio.advertiser.adv_data.first !=
    4cd8:	3374      	adds	r3, #116	; 0x74
	    _radio.advertiser.adv_data.last) {
    4cda:	3275      	adds	r2, #117	; 0x75
	if (_radio.advertiser.adv_data.first !=
    4cdc:	781b      	ldrb	r3, [r3, #0]
    4cde:	7812      	ldrb	r2, [r2, #0]
    4ce0:	429a      	cmp	r2, r3
    4ce2:	d007      	beq.n	4cf4 <adv_setup+0x24>
		first = _radio.advertiser.adv_data.first + 1;
    4ce4:	3301      	adds	r3, #1
    4ce6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    4ce8:	2b02      	cmp	r3, #2
    4cea:	d100      	bne.n	4cee <adv_setup+0x1e>
			first = 0;
    4cec:	2300      	movs	r3, #0
		_radio.advertiser.adv_data.first = first;
    4cee:	0022      	movs	r2, r4
    4cf0:	3274      	adds	r2, #116	; 0x74
    4cf2:	7013      	strb	r3, [r2, #0]
	if (_radio.advertiser.scan_data.first != _radio.
    4cf4:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    4cf6:	0022      	movs	r2, r4
	if (_radio.advertiser.scan_data.first != _radio.
    4cf8:	33c4      	adds	r3, #196	; 0xc4
	    advertiser.scan_data.last) {
    4cfa:	32c5      	adds	r2, #197	; 0xc5
	if (_radio.advertiser.scan_data.first != _radio.
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	7812      	ldrb	r2, [r2, #0]
    4d00:	429a      	cmp	r2, r3
    4d02:	d007      	beq.n	4d14 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    4d04:	3301      	adds	r3, #1
    4d06:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    4d08:	2b02      	cmp	r3, #2
    4d0a:	d100      	bne.n	4d0e <adv_setup+0x3e>
			first = 0;
    4d0c:	2300      	movs	r3, #0
		_radio.advertiser.scan_data.first = first;
    4d0e:	0022      	movs	r2, r4
    4d10:	32c4      	adds	r2, #196	; 0xc4
    4d12:	7013      	strb	r3, [r2, #0]
					[_radio.advertiser.adv_data.first];
    4d14:	0023      	movs	r3, r4
	pdu = (void *)_radio.advertiser.adv_data.data
    4d16:	2527      	movs	r5, #39	; 0x27
					[_radio.advertiser.adv_data.first];
    4d18:	3374      	adds	r3, #116	; 0x74
	pdu = (void *)_radio.advertiser.adv_data.data
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	435d      	muls	r5, r3
    4d1e:	3526      	adds	r5, #38	; 0x26
    4d20:	1965      	adds	r5, r4, r5
	radio_pkt_tx_set(pdu);
    4d22:	0028      	movs	r0, r5
    4d24:	f004 f884 	bl	8e30 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    4d28:	220f      	movs	r2, #15
    4d2a:	782b      	ldrb	r3, [r5, #0]
    4d2c:	4013      	ands	r3, r2
    4d2e:	2b02      	cmp	r3, #2
    4d30:	d020      	beq.n	4d74 <adv_setup+0xa4>
    4d32:	2b07      	cmp	r3, #7
    4d34:	d01e      	beq.n	4d74 <adv_setup+0xa4>
		_radio.state = STATE_TX;
    4d36:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    4d38:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4d3a:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    4d3c:	f004 f976 	bl	902c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4d40:	2000      	movs	r0, #0
    4d42:	f004 f8e1 	bl	8f08 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    4d46:	1d63      	adds	r3, r4, #5
    4d48:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    4d4a:	2000      	movs	r0, #0
	bitmap = _radio.advertiser.chan_map_current;
    4d4c:	075b      	lsls	r3, r3, #29
    4d4e:	0f5a      	lsrs	r2, r3, #29
    4d50:	b2d3      	uxtb	r3, r2
    4d52:	0019      	movs	r1, r3
	while ((bitmap & 0x01) == 0) {
    4d54:	2501      	movs	r5, #1
    4d56:	4229      	tst	r1, r5
    4d58:	d011      	beq.n	4d7e <adv_setup+0xae>
	_radio.advertiser.chan_map_current &=
    4d5a:	2107      	movs	r1, #7
    4d5c:	3405      	adds	r4, #5
		(_radio.advertiser.chan_map_current - 1);
    4d5e:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    4d60:	4013      	ands	r3, r2
    4d62:	7fe2      	ldrb	r2, [r4, #31]
    4d64:	400b      	ands	r3, r1
    4d66:	438a      	bics	r2, r1
    4d68:	4313      	orrs	r3, r2
	chan_set(37 + chan);
    4d6a:	3025      	adds	r0, #37	; 0x25
	_radio.advertiser.chan_map_current &=
    4d6c:	77e3      	strb	r3, [r4, #31]
	chan_set(37 + chan);
    4d6e:	f7ff ff93 	bl	4c98 <chan_set>
}
    4d72:	bd70      	pop	{r4, r5, r6, pc}
		_radio.state = STATE_CLOSE;
    4d74:	2303      	movs	r3, #3
    4d76:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    4d78:	f004 f8d6 	bl	8f28 <radio_switch_complete_and_disable>
    4d7c:	e7e3      	b.n	4d46 <adv_setup+0x76>
		chan++;
    4d7e:	3001      	adds	r0, #1
    4d80:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    4d82:	0849      	lsrs	r1, r1, #1
    4d84:	e7e7      	b.n	4d56 <adv_setup+0x86>
    4d86:	46c0      	nop			; (mov r8, r8)
    4d88:	20000258 	.word	0x20000258

00004d8c <pdu_node_tx_release>:
{
    4d8c:	b570      	push	{r4, r5, r6, lr}
	last = _radio.packet_release_last + 1;
    4d8e:	24b6      	movs	r4, #182	; 0xb6
	if (last == _radio.packet_tx_count) {
    4d90:	25b4      	movs	r5, #180	; 0xb4
	last = _radio.packet_release_last + 1;
    4d92:	4a0f      	ldr	r2, [pc, #60]	; (4dd0 <pdu_node_tx_release+0x44>)
    4d94:	0064      	lsls	r4, r4, #1
    4d96:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_tx_count) {
    4d98:	006d      	lsls	r5, r5, #1
	last = _radio.packet_release_last + 1;
    4d9a:	3301      	adds	r3, #1
	if (last == _radio.packet_tx_count) {
    4d9c:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_release_last + 1;
    4d9e:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
    4da0:	429d      	cmp	r5, r3
    4da2:	d100      	bne.n	4da6 <pdu_node_tx_release+0x1a>
		last = 0;
    4da4:	2300      	movs	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    4da6:	256c      	movs	r5, #108	; 0x6c
    4da8:	35ff      	adds	r5, #255	; 0xff
    4daa:	5d55      	ldrb	r5, [r2, r5]
    4dac:	429d      	cmp	r5, r3
    4dae:	d101      	bne.n	4db4 <pdu_node_tx_release+0x28>
    4db0:	f7ff fe06 	bl	49c0 <chan_set.part.23>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    4db4:	0015      	movs	r5, r2
    4db6:	5d16      	ldrb	r6, [r2, r4]
    4db8:	35fc      	adds	r5, #252	; 0xfc
    4dba:	6ead      	ldr	r5, [r5, #104]	; 0x68
    4dbc:	00f6      	lsls	r6, r6, #3
    4dbe:	5370      	strh	r0, [r6, r5]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    4dc0:	5d10      	ldrb	r0, [r2, r4]
    4dc2:	00c0      	lsls	r0, r0, #3
    4dc4:	182d      	adds	r5, r5, r0
    4dc6:	6069      	str	r1, [r5, #4]
	_radio.packet_release_last = last;
    4dc8:	5513      	strb	r3, [r2, r4]
	radio_event_callback();
    4dca:	f003 faa7 	bl	831c <radio_event_callback>
}
    4dce:	bd70      	pop	{r4, r5, r6, pc}
    4dd0:	20000258 	.word	0x20000258

00004dd4 <packet_tx_enqueue>:
{
    4dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4dd6:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4dd8:	9b01      	ldr	r3, [sp, #4]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d008      	beq.n	4df0 <packet_tx_enqueue+0x1c>
    4dde:	266a      	movs	r6, #106	; 0x6a
    4de0:	22b5      	movs	r2, #181	; 0xb5
    4de2:	4d23      	ldr	r5, [pc, #140]	; (4e70 <packet_tx_enqueue+0x9c>)
    4de4:	36ff      	adds	r6, #255	; 0xff
    4de6:	0052      	lsls	r2, r2, #1
    4de8:	5dab      	ldrb	r3, [r5, r6]
    4dea:	5caa      	ldrb	r2, [r5, r2]
    4dec:	429a      	cmp	r2, r3
    4dee:	d100      	bne.n	4df2 <packet_tx_enqueue+0x1e>
}
    4df0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4df2:	002b      	movs	r3, r5
    4df4:	5daf      	ldrb	r7, [r5, r6]
    4df6:	33fc      	adds	r3, #252	; 0xfc
    4df8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    4dfa:	00ff      	lsls	r7, r7, #3
    4dfc:	19d7      	adds	r7, r2, r7
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4dfe:	2182      	movs	r1, #130	; 0x82
		node_tx_new->next = NULL;
    4e00:	2200      	movs	r2, #0
		node_tx_new = pdu_data_q_tx->node_tx;
    4e02:	687c      	ldr	r4, [r7, #4]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4e04:	6898      	ldr	r0, [r3, #8]
		node_tx_new->next = NULL;
    4e06:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4e08:	0049      	lsls	r1, r1, #1
    4e0a:	883a      	ldrh	r2, [r7, #0]
    4e0c:	f7fd fd6f 	bl	28ee <mem_get>
    4e10:	0003      	movs	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    4e12:	8838      	ldrh	r0, [r7, #0]
    4e14:	8c1a      	ldrh	r2, [r3, #32]
    4e16:	4282      	cmp	r2, r0
    4e18:	d121      	bne.n	4e5e <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    4e1a:	0019      	movs	r1, r3
    4e1c:	001a      	movs	r2, r3
    4e1e:	31f8      	adds	r1, #248	; 0xf8
    4e20:	6808      	ldr	r0, [r1, #0]
    4e22:	32fc      	adds	r2, #252	; 0xfc
    4e24:	2800      	cmp	r0, #0
    4e26:	d106      	bne.n	4e36 <packet_tx_enqueue+0x62>
				if (conn->pkt_tx_head == 0) {
    4e28:	33ec      	adds	r3, #236	; 0xec
				conn->pkt_tx_data = node_tx_new;
    4e2a:	600c      	str	r4, [r1, #0]
				if (conn->pkt_tx_head == 0) {
    4e2c:	6819      	ldr	r1, [r3, #0]
    4e2e:	2900      	cmp	r1, #0
    4e30:	d101      	bne.n	4e36 <packet_tx_enqueue+0x62>
					conn->pkt_tx_head = node_tx_new;
    4e32:	601c      	str	r4, [r3, #0]
					conn->pkt_tx_last = NULL;
    4e34:	6011      	str	r1, [r2, #0]
			if (conn->pkt_tx_last) {
    4e36:	6813      	ldr	r3, [r2, #0]
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d000      	beq.n	4e3e <packet_tx_enqueue+0x6a>
				conn->pkt_tx_last->next = node_tx_new;
    4e3c:	601c      	str	r4, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
    4e3e:	6014      	str	r4, [r2, #0]
		if (first == _radio.packet_tx_count) {
    4e40:	22b4      	movs	r2, #180	; 0xb4
		first = _radio.packet_tx_first + 1;
    4e42:	5dab      	ldrb	r3, [r5, r6]
		if (first == _radio.packet_tx_count) {
    4e44:	0052      	lsls	r2, r2, #1
		first = _radio.packet_tx_first + 1;
    4e46:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    4e48:	5caa      	ldrb	r2, [r5, r2]
		first = _radio.packet_tx_first + 1;
    4e4a:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    4e4c:	429a      	cmp	r2, r3
    4e4e:	d100      	bne.n	4e52 <packet_tx_enqueue+0x7e>
			first = 0;
    4e50:	2300      	movs	r3, #0
		_radio.packet_tx_first = first;
    4e52:	55ab      	strb	r3, [r5, r6]
    4e54:	9e01      	ldr	r6, [sp, #4]
    4e56:	3e01      	subs	r6, #1
    4e58:	b2f3      	uxtb	r3, r6
    4e5a:	9301      	str	r3, [sp, #4]
    4e5c:	e7bc      	b.n	4dd8 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4e5e:	2203      	movs	r2, #3
    4e60:	7923      	ldrb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    4e62:	0021      	movs	r1, r4
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4e64:	4393      	bics	r3, r2
    4e66:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    4e68:	f7ff ff90 	bl	4d8c <pdu_node_tx_release>
    4e6c:	e7e8      	b.n	4e40 <packet_tx_enqueue+0x6c>
    4e6e:	46c0      	nop			; (mov r8, r8)
    4e70:	20000258 	.word	0x20000258

00004e74 <connection_release>:
{
    4e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    4e76:	2201      	movs	r2, #1
{
    4e78:	0004      	movs	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    4e7a:	0011      	movs	r1, r2
    4e7c:	2000      	movs	r0, #0
    4e7e:	f7fd fd99 	bl	29b4 <mayfly_enable>
	ticker_status =
    4e82:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4e84:	8c22      	ldrh	r2, [r4, #32]
	ticker_status =
    4e86:	4f39      	ldr	r7, [pc, #228]	; (4f6c <connection_release+0xf8>)
    4e88:	4b39      	ldr	r3, [pc, #228]	; (4f70 <connection_release+0xfc>)
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4e8a:	3207      	adds	r2, #7
	ticker_status =
    4e8c:	9300      	str	r3, [sp, #0]
    4e8e:	b2d2      	uxtb	r2, r2
    4e90:	003b      	movs	r3, r7
    4e92:	0008      	movs	r0, r1
    4e94:	f7fe fbb8 	bl	3608 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4e98:	2602      	movs	r6, #2
    4e9a:	43b0      	bics	r0, r6
    4e9c:	d002      	beq.n	4ea4 <connection_release+0x30>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4e9e:	b662      	cpsie	i
    4ea0:	2004      	movs	r0, #4
    4ea2:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    4ea4:	4d33      	ldr	r5, [pc, #204]	; (4f74 <connection_release+0x100>)
    4ea6:	7c2b      	ldrb	r3, [r5, #16]
    4ea8:	2b05      	cmp	r3, #5
    4eaa:	d117      	bne.n	4edc <connection_release+0x68>
					  conn->handle))) {
    4eac:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    4eae:	7b2a      	ldrb	r2, [r5, #12]
    4eb0:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
    4eb2:	429a      	cmp	r2, r3
    4eb4:	d112      	bne.n	4edc <connection_release+0x68>
		ticker_status =
    4eb6:	4b30      	ldr	r3, [pc, #192]	; (4f78 <connection_release+0x104>)
		_radio.ticker_id_prepare = 0;
    4eb8:	7328      	strb	r0, [r5, #12]
		ticker_status =
    4eba:	2201      	movs	r2, #1
    4ebc:	9300      	str	r3, [sp, #0]
    4ebe:	0001      	movs	r1, r0
    4ec0:	003b      	movs	r3, r7
    4ec2:	f7fe fba1 	bl	3608 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4ec6:	43b0      	bics	r0, r6
    4ec8:	d1e9      	bne.n	4e9e <connection_release+0x2a>
		ticker_status =
    4eca:	4b2c      	ldr	r3, [pc, #176]	; (4f7c <connection_release+0x108>)
    4ecc:	0002      	movs	r2, r0
    4ece:	9300      	str	r3, [sp, #0]
    4ed0:	0001      	movs	r1, r0
    4ed2:	003b      	movs	r3, r7
    4ed4:	f7fe fb98 	bl	3608 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4ed8:	43b0      	bics	r0, r6
    4eda:	d1e0      	bne.n	4e9e <connection_release+0x2a>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    4edc:	0026      	movs	r6, r4
    4ede:	0027      	movs	r7, r4
    4ee0:	36ec      	adds	r6, #236	; 0xec
    4ee2:	37f0      	adds	r7, #240	; 0xf0
    4ee4:	6831      	ldr	r1, [r6, #0]
    4ee6:	683b      	ldr	r3, [r7, #0]
    4ee8:	4299      	cmp	r1, r3
    4eea:	d004      	beq.n	4ef6 <connection_release+0x82>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    4eec:	0023      	movs	r3, r4
    4eee:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	4299      	cmp	r1, r3
    4ef4:	d11a      	bne.n	4f2c <connection_release+0xb8>
	while ((conn->pkt_tx_head) &&
    4ef6:	6830      	ldr	r0, [r6, #0]
    4ef8:	2800      	cmp	r0, #0
    4efa:	d004      	beq.n	4f06 <connection_release+0x92>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    4efc:	0023      	movs	r3, r4
    4efe:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head) &&
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	4298      	cmp	r0, r3
    4f04:	d11c      	bne.n	4f40 <connection_release+0xcc>
	conn->pkt_tx_ctrl = NULL;
    4f06:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    4f08:	0022      	movs	r2, r4
	conn->pkt_tx_ctrl = NULL;
    4f0a:	603b      	str	r3, [r7, #0]
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4f0c:	2703      	movs	r7, #3
	conn->pkt_tx_ctrl_last = NULL;
    4f0e:	32f4      	adds	r2, #244	; 0xf4
    4f10:	6013      	str	r3, [r2, #0]
	while (conn->pkt_tx_head) {
    4f12:	6831      	ldr	r1, [r6, #0]
    4f14:	2900      	cmp	r1, #0
    4f16:	d11c      	bne.n	4f52 <connection_release+0xde>
	conn->handle = 0xffff;
    4f18:	2301      	movs	r3, #1
    4f1a:	425b      	negs	r3, r3
    4f1c:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    4f1e:	337e      	adds	r3, #126	; 0x7e
    4f20:	33ff      	adds	r3, #255	; 0xff
    4f22:	58ea      	ldr	r2, [r5, r3]
    4f24:	4294      	cmp	r4, r2
    4f26:	d100      	bne.n	4f2a <connection_release+0xb6>
		_radio.conn_upd = NULL;
    4f28:	50e9      	str	r1, [r5, r3]
}
    4f2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4f2c:	2203      	movs	r2, #3
    4f2e:	790b      	ldrb	r3, [r1, #4]
    4f30:	4393      	bics	r3, r2
    4f32:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4f34:	680b      	ldr	r3, [r1, #0]
    4f36:	6033      	str	r3, [r6, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    4f38:	8c20      	ldrh	r0, [r4, #32]
    4f3a:	f7ff ff27 	bl	4d8c <pdu_node_tx_release>
    4f3e:	e7cd      	b.n	4edc <connection_release+0x68>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4f40:	0029      	movs	r1, r5
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4f42:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4f44:	3151      	adds	r1, #81	; 0x51
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4f46:	6033      	str	r3, [r6, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4f48:	31ff      	adds	r1, #255	; 0xff
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    4f4a:	603b      	str	r3, [r7, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4f4c:	f7fd fcb9 	bl	28c2 <mem_release>
    4f50:	e7d1      	b.n	4ef6 <connection_release+0x82>
		conn->pkt_tx_data = conn->pkt_tx_head;
    4f52:	0022      	movs	r2, r4
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4f54:	790b      	ldrb	r3, [r1, #4]
		conn->pkt_tx_data = conn->pkt_tx_head;
    4f56:	32f8      	adds	r2, #248	; 0xf8
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4f58:	43bb      	bics	r3, r7
    4f5a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4f5c:	680b      	ldr	r3, [r1, #0]
    4f5e:	6033      	str	r3, [r6, #0]
		conn->pkt_tx_data = conn->pkt_tx_head;
    4f60:	6013      	str	r3, [r2, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    4f62:	8c20      	ldrh	r0, [r4, #32]
    4f64:	f7ff ff12 	bl	4d8c <pdu_node_tx_release>
    4f68:	e7d3      	b.n	4f12 <connection_release+0x9e>
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	000050b1 	.word	0x000050b1
    4f70:	00002308 	.word	0x00002308
    4f74:	20000258 	.word	0x20000258
    4f78:	00002319 	.word	0x00002319
    4f7c:	00002320 	.word	0x00002320

00004f80 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    4f80:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4f82:	1f03      	subs	r3, r0, #4
{
    4f84:	b510      	push	{r4, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4f86:	2b01      	cmp	r3, #1
    4f88:	d901      	bls.n	4f8e <mayfly_radio_stop+0xe>
    4f8a:	f7ff fd19 	bl	49c0 <chan_set.part.23>
	radio_used = ((_radio.state != STATE_NONE) &&
    4f8e:	4a08      	ldr	r2, [pc, #32]	; (4fb0 <mayfly_radio_stop+0x30>)
    4f90:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    4f92:	2b00      	cmp	r3, #0
    4f94:	d006      	beq.n	4fa4 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    4f96:	3b04      	subs	r3, #4
    4f98:	2b01      	cmp	r3, #1
    4f9a:	d903      	bls.n	4fa4 <mayfly_radio_stop+0x24>
			_radio.state = state;
    4f9c:	7410      	strb	r0, [r2, #16]
		radio_disable();
    4f9e:	f003 ff63 	bl	8e68 <radio_disable>
}
    4fa2:	bd10      	pop	{r4, pc}
	if (radio_used || !radio_is_idle()) {
    4fa4:	f003 ff82 	bl	8eac <radio_is_idle>
    4fa8:	2800      	cmp	r0, #0
    4faa:	d0f8      	beq.n	4f9e <mayfly_radio_stop+0x1e>
    4fac:	e7f9      	b.n	4fa2 <mayfly_radio_stop+0x22>
    4fae:	46c0      	nop			; (mov r8, r8)
    4fb0:	20000258 	.word	0x20000258

00004fb4 <mayfly_radio_active>:
{
    4fb4:	b510      	push	{r4, lr}
    4fb6:	4b0b      	ldr	r3, [pc, #44]	; (4fe4 <mayfly_radio_active+0x30>)
	if ((u32_t)params) {
    4fb8:	2800      	cmp	r0, #0
    4fba:	d006      	beq.n	4fca <mayfly_radio_active+0x16>
		if (s_active++) {
    4fbc:	781a      	ldrb	r2, [r3, #0]
		radio_active_callback(1);
    4fbe:	2001      	movs	r0, #1
		if (s_active++) {
    4fc0:	1c51      	adds	r1, r2, #1
    4fc2:	7019      	strb	r1, [r3, #0]
    4fc4:	2a00      	cmp	r2, #0
    4fc6:	d00a      	beq.n	4fde <mayfly_radio_active+0x2a>
}
    4fc8:	bd10      	pop	{r4, pc}
		LL_ASSERT(s_active);
    4fca:	7818      	ldrb	r0, [r3, #0]
    4fcc:	2800      	cmp	r0, #0
    4fce:	d101      	bne.n	4fd4 <mayfly_radio_active+0x20>
    4fd0:	f7ff fcf6 	bl	49c0 <chan_set.part.23>
		if (--s_active) {
    4fd4:	3801      	subs	r0, #1
    4fd6:	b2c0      	uxtb	r0, r0
    4fd8:	7018      	strb	r0, [r3, #0]
    4fda:	2800      	cmp	r0, #0
    4fdc:	d1f4      	bne.n	4fc8 <mayfly_radio_active+0x14>
		radio_active_callback(0);
    4fde:	f003 f99c 	bl	831a <radio_active_callback>
    4fe2:	e7f1      	b.n	4fc8 <mayfly_radio_active+0x14>
    4fe4:	20000408 	.word	0x20000408

00004fe8 <mayfly_radio_inactive>:
{
    4fe8:	b510      	push	{r4, lr}
	mayfly_radio_active(0);
    4fea:	2000      	movs	r0, #0
    4fec:	f7ff ffe2 	bl	4fb4 <mayfly_radio_active>
}
    4ff0:	bd10      	pop	{r4, pc}
	...

00004ff4 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4ff4:	2200      	movs	r2, #0
{
    4ff6:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4ff8:	4b04      	ldr	r3, [pc, #16]	; (500c <event_xtal+0x18>)
    4ffa:	0011      	movs	r1, r2
    4ffc:	0010      	movs	r0, r2
    4ffe:	f7fd fcfd 	bl	29fc <mayfly_enqueue>
	LL_ASSERT(!retval);
    5002:	2800      	cmp	r0, #0
    5004:	d001      	beq.n	500a <event_xtal+0x16>
    5006:	f7ff fcdb 	bl	49c0 <chan_set.part.23>
}
    500a:	bd10      	pop	{r4, pc}
    500c:	20002378 	.word	0x20002378

00005010 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5010:	2200      	movs	r2, #0
{
    5012:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5014:	4b04      	ldr	r3, [pc, #16]	; (5028 <event_active+0x18>)
    5016:	0011      	movs	r1, r2
    5018:	0010      	movs	r0, r2
    501a:	f7fd fcef 	bl	29fc <mayfly_enqueue>
	LL_ASSERT(!retval);
    501e:	2800      	cmp	r0, #0
    5020:	d001      	beq.n	5026 <event_active+0x16>
    5022:	f7ff fccd 	bl	49c0 <chan_set.part.23>
}
    5026:	bd10      	pop	{r4, pc}
    5028:	200022f8 	.word	0x200022f8

0000502c <ticker_update_slave_assert>:
{
    502c:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    502e:	2800      	cmp	r0, #0
    5030:	d006      	beq.n	5040 <ticker_update_slave_assert+0x14>
    5032:	4b04      	ldr	r3, [pc, #16]	; (5044 <ticker_update_slave_assert+0x18>)
    5034:	b2c9      	uxtb	r1, r1
    5036:	7b9b      	ldrb	r3, [r3, #14]
    5038:	4299      	cmp	r1, r3
    503a:	d001      	beq.n	5040 <ticker_update_slave_assert+0x14>
    503c:	f7ff fcc0 	bl	49c0 <chan_set.part.23>
}
    5040:	bd10      	pop	{r4, pc}
    5042:	46c0      	nop			; (mov r8, r8)
    5044:	20000258 	.word	0x20000258

00005048 <ticker_update_adv_assert>:
{
    5048:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    504a:	2800      	cmp	r0, #0
    504c:	d005      	beq.n	505a <ticker_update_adv_assert+0x12>
    504e:	4b03      	ldr	r3, [pc, #12]	; (505c <ticker_update_adv_assert+0x14>)
    5050:	7b9b      	ldrb	r3, [r3, #14]
    5052:	2b05      	cmp	r3, #5
    5054:	d001      	beq.n	505a <ticker_update_adv_assert+0x12>
    5056:	f7ff fcb3 	bl	49c0 <chan_set.part.23>
}
    505a:	bd10      	pop	{r4, pc}
    505c:	20000258 	.word	0x20000258

00005060 <ticker_stop_scan_assert>:
{
    5060:	b510      	push	{r4, lr}
    5062:	4b08      	ldr	r3, [pc, #32]	; (5084 <ticker_stop_scan_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    5064:	2801      	cmp	r0, #1
    5066:	d107      	bne.n	5078 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    5068:	7b9a      	ldrb	r2, [r3, #14]
    506a:	2a06      	cmp	r2, #6
    506c:	d102      	bne.n	5074 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    506e:	2200      	movs	r2, #0
    5070:	739a      	strb	r2, [r3, #14]
}
    5072:	bd10      	pop	{r4, pc}
    5074:	f7ff fca4 	bl	49c0 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    5078:	7b1b      	ldrb	r3, [r3, #12]
    507a:	2b06      	cmp	r3, #6
    507c:	d1f9      	bne.n	5072 <ticker_stop_scan_assert+0x12>
    507e:	b662      	cpsie	i
    5080:	2004      	movs	r0, #4
    5082:	df02      	svc	2
    5084:	20000258 	.word	0x20000258

00005088 <ticker_stop_adv_assert>:
{
    5088:	b510      	push	{r4, lr}
    508a:	4b08      	ldr	r3, [pc, #32]	; (50ac <ticker_stop_adv_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    508c:	2801      	cmp	r0, #1
    508e:	d107      	bne.n	50a0 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    5090:	7b9a      	ldrb	r2, [r3, #14]
    5092:	2a05      	cmp	r2, #5
    5094:	d102      	bne.n	509c <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    5096:	2200      	movs	r2, #0
    5098:	739a      	strb	r2, [r3, #14]
}
    509a:	bd10      	pop	{r4, pc}
    509c:	f7ff fc90 	bl	49c0 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    50a0:	7b1b      	ldrb	r3, [r3, #12]
    50a2:	2b05      	cmp	r3, #5
    50a4:	d1f9      	bne.n	509a <ticker_stop_adv_assert+0x12>
    50a6:	b662      	cpsie	i
    50a8:	2004      	movs	r0, #4
    50aa:	df02      	svc	2
    50ac:	20000258 	.word	0x20000258

000050b0 <ticker_success_assert>:
{
    50b0:	b510      	push	{r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    50b2:	2800      	cmp	r0, #0
    50b4:	d001      	beq.n	50ba <ticker_success_assert+0xa>
    50b6:	f7ff fc83 	bl	49c0 <chan_set.part.23>
}
    50ba:	bd10      	pop	{r4, pc}

000050bc <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    50bc:	b570      	push	{r4, r5, r6, lr}
    50be:	0005      	movs	r5, r0
	node_rx = packet_rx_reserve_get(3);
    50c0:	2003      	movs	r0, #3
    50c2:	f7ff f945 	bl	4350 <packet_rx_reserve_get>
	if (node_rx == 0) {
    50c6:	2800      	cmp	r0, #0
    50c8:	d023      	beq.n	5112 <isr_rx_scan_report.isra.37+0x56>
	node_rx->hdr.handle = 0xffff;
    50ca:	2301      	movs	r3, #1
    50cc:	425b      	negs	r3, r3
    50ce:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    50d0:	4b11      	ldr	r3, [pc, #68]	; (5118 <isr_rx_scan_report.isra.37+0x5c>)
    50d2:	33dd      	adds	r3, #221	; 0xdd
    50d4:	781b      	ldrb	r3, [r3, #0]
    50d6:	075a      	lsls	r2, r3, #29
    50d8:	d019      	beq.n	510e <isr_rx_scan_report.isra.37+0x52>
		switch (_radio.scanner.phy) {
    50da:	075b      	lsls	r3, r3, #29
    50dc:	0f5b      	lsrs	r3, r3, #29
    50de:	b2da      	uxtb	r2, r3
    50e0:	2a01      	cmp	r2, #1
    50e2:	d004      	beq.n	50ee <isr_rx_scan_report.isra.37+0x32>
    50e4:	2a04      	cmp	r2, #4
    50e6:	d003      	beq.n	50f0 <isr_rx_scan_report.isra.37+0x34>
		LL_ASSERT(0);
    50e8:	b662      	cpsie	i
    50ea:	2004      	movs	r0, #4
    50ec:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    50ee:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    50f0:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    50f2:	7103      	strb	r3, [r0, #4]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    50f4:	1904      	adds	r4, r0, r4
    50f6:	340a      	adds	r4, #10
    50f8:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    50fa:	2d00      	cmp	r5, #0
    50fc:	d002      	beq.n	5104 <isr_rx_scan_report.isra.37+0x48>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    50fe:	f003 ff27 	bl	8f50 <radio_rssi_get>
			     pdu_adv_rx->len] =
    5102:	4006      	ands	r6, r0
    5104:	7026      	strb	r6, [r4, #0]
	packet_rx_enqueue();
    5106:	f7ff fca5 	bl	4a54 <packet_rx_enqueue>
	return 0;
    510a:	2000      	movs	r0, #0
}
    510c:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    510e:	2302      	movs	r3, #2
    5110:	e7ee      	b.n	50f0 <isr_rx_scan_report.isra.37+0x34>
		return 1;
    5112:	2001      	movs	r0, #1
    5114:	e7fa      	b.n	510c <isr_rx_scan_report.isra.37+0x50>
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	20000258 	.word	0x20000258

0000511c <adv_scan_configure.constprop.47>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    511c:	b513      	push	{r0, r1, r4, lr}
    511e:	0004      	movs	r4, r0
	u32_t aa = 0x8e89bed6;
    5120:	4b0d      	ldr	r3, [pc, #52]	; (5158 <adv_scan_configure.constprop.47+0x3c>)
    5122:	9301      	str	r3, [sp, #4]
	radio_reset();
    5124:	f003 fdf8 	bl	8d18 <radio_reset>
	radio_tx_power_set(0);
    5128:	2000      	movs	r0, #0
    512a:	f003 fe11 	bl	8d50 <radio_tx_power_set>
	radio_isr_set(isr);
    512e:	480b      	ldr	r0, [pc, #44]	; (515c <adv_scan_configure.constprop.47+0x40>)
    5130:	f003 fdd8 	bl	8ce4 <radio_isr_set>
	radio_phy_set(phy, flags);
    5134:	2101      	movs	r1, #1
    5136:	0020      	movs	r0, r4
    5138:	f003 fdfe 	bl	8d38 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    513c:	0064      	lsls	r4, r4, #1
	radio_aa_set((u8_t *)&aa);
    513e:	a801      	add	r0, sp, #4
    5140:	f003 fe2a 	bl	8d98 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    5144:	b2e2      	uxtb	r2, r4
    5146:	2125      	movs	r1, #37	; 0x25
    5148:	2008      	movs	r0, #8
    514a:	f003 fe43 	bl	8dd4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    514e:	4904      	ldr	r1, [pc, #16]	; (5160 <adv_scan_configure.constprop.47+0x44>)
    5150:	4804      	ldr	r0, [pc, #16]	; (5164 <adv_scan_configure.constprop.47+0x48>)
    5152:	f003 feb5 	bl	8ec0 <radio_crc_configure>
}
    5156:	bd13      	pop	{r0, r1, r4, pc}
    5158:	8e89bed6 	.word	0x8e89bed6
    515c:	000060dd 	.word	0x000060dd
    5160:	00555555 	.word	0x00555555
    5164:	0000065b 	.word	0x0000065b

00005168 <event_stop.constprop.48>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5168:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    516a:	4b06      	ldr	r3, [pc, #24]	; (5184 <event_stop.constprop.48+0x1c>)
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    516c:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    516e:	0011      	movs	r1, r2
	s_mfy_radio_stop.param = context;
    5170:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5172:	0010      	movs	r0, r2
    5174:	f7fd fc42 	bl	29fc <mayfly_enqueue>
	LL_ASSERT(!retval);
    5178:	2800      	cmp	r0, #0
    517a:	d001      	beq.n	5180 <event_stop.constprop.48+0x18>
    517c:	f7ff fc20 	bl	49c0 <chan_set.part.23>
}
    5180:	bd10      	pop	{r4, pc}
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	20002338 	.word	0x20002338

00005188 <event_common_prepare>:
{
    5188:	b5f0      	push	{r4, r5, r6, r7, lr}
    518a:	0016      	movs	r6, r2
    518c:	b08f      	sub	sp, #60	; 0x3c
    518e:	930b      	str	r3, [sp, #44]	; 0x2c
    5190:	ab14      	add	r3, sp, #80	; 0x50
    5192:	cb04      	ldmia	r3!, {r2}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    5194:	6834      	ldr	r4, [r6, #0]
{
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	900a      	str	r0, [sp, #40]	; 0x28
    519a:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    519c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
    519e:	910d      	str	r1, [sp, #52]	; 0x34
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    51a0:	681f      	ldr	r7, [r3, #0]
	if (_ticks_xtal_to_start & XON_BITMASK) {
    51a2:	2c00      	cmp	r4, #0
    51a4:	da03      	bge.n	51ae <event_common_prepare+0x26>
		_ticks_xtal_to_start =
    51a6:	003c      	movs	r4, r7
    51a8:	4297      	cmp	r7, r2
    51aa:	d200      	bcs.n	51ae <event_common_prepare+0x26>
    51ac:	0014      	movs	r4, r2
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    51ae:	42bc      	cmp	r4, r7
    51b0:	d800      	bhi.n	51b4 <event_common_prepare+0x2c>
    51b2:	e06e      	b.n	5292 <event_common_prepare+0x10a>
		ticker_status =
    51b4:	2000      	movs	r0, #0
    51b6:	4b4d      	ldr	r3, [pc, #308]	; (52ec <event_common_prepare+0x164>)
    51b8:	9006      	str	r0, [sp, #24]
    51ba:	9308      	str	r3, [sp, #32]
    51bc:	4b4c      	ldr	r3, [pc, #304]	; (52f0 <event_common_prepare+0x168>)
    51be:	9004      	str	r0, [sp, #16]
    51c0:	9307      	str	r3, [sp, #28]
    51c2:	4b4c      	ldr	r3, [pc, #304]	; (52f4 <event_common_prepare+0x16c>)
    51c4:	9003      	str	r0, [sp, #12]
    51c6:	9305      	str	r3, [sp, #20]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    51c8:	1be3      	subs	r3, r4, r7
		ticker_status =
    51ca:	9300      	str	r3, [sp, #0]
    51cc:	9002      	str	r0, [sp, #8]
    51ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    51d0:	9001      	str	r0, [sp, #4]
    51d2:	2201      	movs	r2, #1
    51d4:	0001      	movs	r1, r0
    51d6:	f7fe f985 	bl	34e4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    51da:	2302      	movs	r3, #2
    51dc:	4398      	bics	r0, r3
    51de:	d002      	beq.n	51e6 <event_common_prepare+0x5e>
		LL_ASSERT(!retval);
    51e0:	b662      	cpsie	i
    51e2:	2004      	movs	r0, #4
    51e4:	df02      	svc	2
		event_xtal(0, 0, 0, NULL);
    51e6:	0003      	movs	r3, r0
    51e8:	0002      	movs	r2, r0
    51ea:	0001      	movs	r1, r0
		event_xtal(0, 0, 0, NULL);
    51ec:	f7ff ff02 	bl	4ff4 <event_xtal>
	ticker_status =
    51f0:	2000      	movs	r0, #0
	_radio.remainder_anchor = remainder;
    51f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    51f4:	4d40      	ldr	r5, [pc, #256]	; (52f8 <event_common_prepare+0x170>)
	ticker_status =
    51f6:	0002      	movs	r2, r0
	_radio.remainder_anchor = remainder;
    51f8:	60ab      	str	r3, [r5, #8]
	ticker_status =
    51fa:	4b40      	ldr	r3, [pc, #256]	; (52fc <event_common_prepare+0x174>)
    51fc:	9004      	str	r0, [sp, #16]
    51fe:	9308      	str	r3, [sp, #32]
    5200:	4b3b      	ldr	r3, [pc, #236]	; (52f0 <event_common_prepare+0x168>)
    5202:	9003      	str	r0, [sp, #12]
    5204:	9307      	str	r3, [sp, #28]
    5206:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5208:	9002      	str	r0, [sp, #8]
    520a:	9306      	str	r3, [sp, #24]
    520c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    520e:	9001      	str	r0, [sp, #4]
    5210:	9305      	str	r3, [sp, #20]
    5212:	9400      	str	r4, [sp, #0]
    5214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5216:	0001      	movs	r1, r0
    5218:	f7fe f964 	bl	34e4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    521c:	2302      	movs	r3, #2
    521e:	4398      	bics	r0, r3
    5220:	d1de      	bne.n	51e0 <event_common_prepare+0x58>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5222:	2005      	movs	r0, #5
    5224:	f7ff ffa0 	bl	5168 <event_stop.constprop.48>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5228:	002b      	movs	r3, r5
    522a:	33fc      	adds	r3, #252	; 0xfc
    522c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    522e:	429f      	cmp	r7, r3
    5230:	d020      	beq.n	5274 <event_common_prepare+0xec>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    5232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5234:	6013      	str	r3, [r2, #0]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5236:	6833      	ldr	r3, [r6, #0]
    5238:	2b00      	cmp	r3, #0
    523a:	da02      	bge.n	5242 <event_common_prepare+0xba>
			*ticks_xtal_to_start &= ~XON_BITMASK;
    523c:	005b      	lsls	r3, r3, #1
    523e:	085b      	lsrs	r3, r3, #1
    5240:	6033      	str	r3, [r6, #0]
				     _radio.ticks_active_to_start;
    5242:	35fc      	adds	r5, #252	; 0xfc
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5244:	6831      	ldr	r1, [r6, #0]
    5246:	6fea      	ldr	r2, [r5, #124]	; 0x7c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5248:	b2a3      	uxth	r3, r4
		ticks_to_start_new = (_radio.ticks_active_to_start <
    524a:	428a      	cmp	r2, r1
    524c:	d200      	bcs.n	5250 <event_common_prepare+0xc8>
    524e:	000a      	movs	r2, r1
		ticker_status =
    5250:	2000      	movs	r0, #0
    5252:	492b      	ldr	r1, [pc, #172]	; (5300 <event_common_prepare+0x178>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5254:	b292      	uxth	r2, r2
		ticker_status =
    5256:	9106      	str	r1, [sp, #24]
    5258:	4925      	ldr	r1, [pc, #148]	; (52f0 <event_common_prepare+0x168>)
    525a:	9302      	str	r3, [sp, #8]
    525c:	9105      	str	r1, [sp, #20]
    525e:	9201      	str	r2, [sp, #4]
    5260:	9200      	str	r2, [sp, #0]
    5262:	9004      	str	r0, [sp, #16]
    5264:	9003      	str	r0, [sp, #12]
    5266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5268:	0001      	movs	r1, r0
    526a:	f7fe f97d 	bl	3568 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    526e:	2302      	movs	r3, #2
    5270:	4398      	bics	r0, r3
    5272:	d1b5      	bne.n	51e0 <event_common_prepare+0x58>
	packet_tx_enqueue(0xFF);
    5274:	20ff      	movs	r0, #255	; 0xff
    5276:	f7ff fdad 	bl	4dd4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    527a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    527c:	4b21      	ldr	r3, [pc, #132]	; (5304 <event_common_prepare+0x17c>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    527e:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5280:	609a      	str	r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5282:	2201      	movs	r2, #1
    5284:	0011      	movs	r1, r2
    5286:	f7fd fbb9 	bl	29fc <mayfly_enqueue>
		LL_ASSERT(!retval);
    528a:	2800      	cmp	r0, #0
    528c:	d1a8      	bne.n	51e0 <event_common_prepare+0x58>
}
    528e:	b00f      	add	sp, #60	; 0x3c
    5290:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    5292:	42bc      	cmp	r4, r7
    5294:	d21e      	bcs.n	52d4 <event_common_prepare+0x14c>
		event_active(0, 0, 0, NULL);
    5296:	2300      	movs	r3, #0
    5298:	001a      	movs	r2, r3
    529a:	0019      	movs	r1, r3
    529c:	0018      	movs	r0, r3
    529e:	f7ff feb7 	bl	5010 <event_active>
		ticker_status =
    52a2:	2000      	movs	r0, #0
    52a4:	4b18      	ldr	r3, [pc, #96]	; (5308 <event_common_prepare+0x180>)
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    52a6:	1b3c      	subs	r4, r7, r4
		ticker_status =
    52a8:	9308      	str	r3, [sp, #32]
    52aa:	4b11      	ldr	r3, [pc, #68]	; (52f0 <event_common_prepare+0x168>)
    52ac:	9006      	str	r0, [sp, #24]
    52ae:	9307      	str	r3, [sp, #28]
    52b0:	4b16      	ldr	r3, [pc, #88]	; (530c <event_common_prepare+0x184>)
    52b2:	9004      	str	r0, [sp, #16]
    52b4:	9305      	str	r3, [sp, #20]
    52b6:	9003      	str	r0, [sp, #12]
    52b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    52ba:	9002      	str	r0, [sp, #8]
    52bc:	9001      	str	r0, [sp, #4]
    52be:	9400      	str	r4, [sp, #0]
    52c0:	2201      	movs	r2, #1
    52c2:	0001      	movs	r1, r0
    52c4:	f7fe f90e 	bl	34e4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    52c8:	2302      	movs	r3, #2
    52ca:	4398      	bics	r0, r3
    52cc:	d000      	beq.n	52d0 <event_common_prepare+0x148>
    52ce:	e787      	b.n	51e0 <event_common_prepare+0x58>
    52d0:	003c      	movs	r4, r7
    52d2:	e78d      	b.n	51f0 <event_common_prepare+0x68>
		event_active(0, 0, 0, NULL);
    52d4:	2300      	movs	r3, #0
    52d6:	001a      	movs	r2, r3
    52d8:	0019      	movs	r1, r3
    52da:	0018      	movs	r0, r3
    52dc:	f7ff fe98 	bl	5010 <event_active>
		event_xtal(0, 0, 0, NULL);
    52e0:	2300      	movs	r3, #0
    52e2:	001a      	movs	r2, r3
    52e4:	0019      	movs	r1, r3
    52e6:	0018      	movs	r0, r3
    52e8:	e780      	b.n	51ec <event_common_prepare+0x64>
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	00001585 	.word	0x00001585
    52f0:	000050b1 	.word	0x000050b1
    52f4:	00005011 	.word	0x00005011
    52f8:	20000258 	.word	0x20000258
    52fc:	000015b2 	.word	0x000015b2
    5300:	000015e2 	.word	0x000015e2
    5304:	200023d8 	.word	0x200023d8
    5308:	0000159a 	.word	0x0000159a
    530c:	00004ff5 	.word	0x00004ff5

00005310 <radio_event_adv_prepare>:
{
    5310:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5312:	4c0b      	ldr	r4, [pc, #44]	; (5340 <radio_event_adv_prepare+0x30>)
    5314:	7b25      	ldrb	r5, [r4, #12]
    5316:	b2ed      	uxtb	r5, r5
    5318:	2d00      	cmp	r5, #0
    531a:	d001      	beq.n	5320 <radio_event_adv_prepare+0x10>
    531c:	f7ff fb50 	bl	49c0 <chan_set.part.23>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5320:	2605      	movs	r6, #5
	event_common_prepare(ticks_at_expire, remainder,
    5322:	0023      	movs	r3, r4
    5324:	0022      	movs	r2, r4
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5326:	7326      	strb	r6, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
    5328:	9503      	str	r5, [sp, #12]
    532a:	4d06      	ldr	r5, [pc, #24]	; (5344 <radio_event_adv_prepare+0x34>)
    532c:	9601      	str	r6, [sp, #4]
    532e:	9502      	str	r5, [sp, #8]
    5330:	69e4      	ldr	r4, [r4, #28]
    5332:	3318      	adds	r3, #24
    5334:	3214      	adds	r2, #20
    5336:	9400      	str	r4, [sp, #0]
    5338:	f7ff ff26 	bl	5188 <event_common_prepare>
}
    533c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    533e:	46c0      	nop			; (mov r8, r8)
    5340:	20000258 	.word	0x20000258
    5344:	000055c1 	.word	0x000055c1

00005348 <event_adv_stop>:
{
    5348:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    534a:	2005      	movs	r0, #5
    534c:	f7ff ff0c 	bl	5168 <event_stop.constprop.48>
	ticker_status =
    5350:	2100      	movs	r1, #0
    5352:	4b06      	ldr	r3, [pc, #24]	; (536c <event_adv_stop+0x24>)
    5354:	2205      	movs	r2, #5
    5356:	9300      	str	r3, [sp, #0]
    5358:	0008      	movs	r0, r1
    535a:	4b05      	ldr	r3, [pc, #20]	; (5370 <event_adv_stop+0x28>)
    535c:	f7fe f954 	bl	3608 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5360:	2302      	movs	r3, #2
    5362:	4398      	bics	r0, r3
    5364:	d001      	beq.n	536a <event_adv_stop+0x22>
    5366:	f7ff fb2b 	bl	49c0 <chan_set.part.23>
}
    536a:	bd07      	pop	{r0, r1, r2, pc}
    536c:	000018a6 	.word	0x000018a6
    5370:	00004ae5 	.word	0x00004ae5

00005374 <packet_rx_allocate.constprop.49>:
static void packet_rx_allocate(u8_t max)
    5374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (max > _radio.link_rx_data_quota) {
    5376:	23a4      	movs	r3, #164	; 0xa4
    5378:	4d1f      	ldr	r5, [pc, #124]	; (53f8 <packet_rx_allocate.constprop.49+0x84>)
    537a:	005b      	lsls	r3, r3, #1
    537c:	5cee      	ldrb	r6, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    537e:	3b12      	subs	r3, #18
    5380:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    5382:	3b02      	subs	r3, #2
	acquire = _radio.packet_rx_acquire + 1;
    5384:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    5386:	5ceb      	ldrb	r3, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    5388:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
    538a:	42a3      	cmp	r3, r4
    538c:	d100      	bne.n	5390 <packet_rx_allocate.constprop.49+0x1c>
		acquire = 0;
    538e:	2400      	movs	r4, #0
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    5390:	2e00      	cmp	r6, #0
    5392:	d014      	beq.n	53be <packet_rx_allocate.constprop.49+0x4a>
    5394:	2336      	movs	r3, #54	; 0x36
    5396:	33ff      	adds	r3, #255	; 0xff
    5398:	5ceb      	ldrb	r3, [r5, r3]
    539a:	429c      	cmp	r4, r3
    539c:	d00f      	beq.n	53be <packet_rx_allocate.constprop.49+0x4a>
		link = mem_acquire(&_radio.link_rx_free);
    539e:	4817      	ldr	r0, [pc, #92]	; (53fc <packet_rx_allocate.constprop.49+0x88>)
    53a0:	f7fd fa76 	bl	2890 <mem_acquire>
    53a4:	1e07      	subs	r7, r0, #0
		if (!link) {
    53a6:	d00a      	beq.n	53be <packet_rx_allocate.constprop.49+0x4a>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    53a8:	0028      	movs	r0, r5
    53aa:	3025      	adds	r0, #37	; 0x25
    53ac:	30ff      	adds	r0, #255	; 0xff
    53ae:	f7fd fa6f 	bl	2890 <mem_acquire>
		if (!node_rx) {
    53b2:	2800      	cmp	r0, #0
    53b4:	d104      	bne.n	53c0 <packet_rx_allocate.constprop.49+0x4c>
			mem_release(link, &_radio.link_rx_free);
    53b6:	4911      	ldr	r1, [pc, #68]	; (53fc <packet_rx_allocate.constprop.49+0x88>)
    53b8:	0038      	movs	r0, r7
    53ba:	f7fd fa82 	bl	28c2 <mem_release>
}
    53be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    53c0:	239b      	movs	r3, #155	; 0x9b
    53c2:	002a      	movs	r2, r5
		node_rx->hdr.onion.link = link;
    53c4:	6007      	str	r7, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    53c6:	005b      	lsls	r3, r3, #1
    53c8:	5ceb      	ldrb	r3, [r5, r3]
    53ca:	32fc      	adds	r2, #252	; 0xfc
    53cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
    53ce:	009b      	lsls	r3, r3, #2
    53d0:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    53d2:	239b      	movs	r3, #155	; 0x9b
    53d4:	005b      	lsls	r3, r3, #1
    53d6:	54ec      	strb	r4, [r5, r3]
		if (acquire == _radio.packet_rx_count) {
    53d8:	3b02      	subs	r3, #2
		acquire = _radio.packet_rx_acquire + 1;
    53da:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    53dc:	5ceb      	ldrb	r3, [r5, r3]
		acquire = _radio.packet_rx_acquire + 1;
    53de:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    53e0:	42a3      	cmp	r3, r4
    53e2:	d100      	bne.n	53e6 <packet_rx_allocate.constprop.49+0x72>
			acquire = 0;
    53e4:	2400      	movs	r4, #0
		_radio.link_rx_data_quota--;
    53e6:	22a4      	movs	r2, #164	; 0xa4
    53e8:	0052      	lsls	r2, r2, #1
    53ea:	5cab      	ldrb	r3, [r5, r2]
    53ec:	3e01      	subs	r6, #1
    53ee:	3b01      	subs	r3, #1
    53f0:	54ab      	strb	r3, [r5, r2]
    53f2:	b2f6      	uxtb	r6, r6
    53f4:	e7cc      	b.n	5390 <packet_rx_allocate.constprop.49+0x1c>
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	20000258 	.word	0x20000258
    53fc:	20000394 	.word	0x20000394

00005400 <common_init>:
{
    5400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.connection_count) {
    5402:	4c33      	ldr	r4, [pc, #204]	; (54d0 <common_init+0xd0>)
    5404:	0023      	movs	r3, r4
    5406:	0020      	movs	r0, r4
    5408:	33ff      	adds	r3, #255	; 0xff
    540a:	7b5a      	ldrb	r2, [r3, #13]
    540c:	30fc      	adds	r0, #252	; 0xfc
    540e:	2a00      	cmp	r2, #0
    5410:	d043      	beq.n	549a <common_init+0x9a>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    5412:	0023      	movs	r3, r4
    5414:	2182      	movs	r1, #130	; 0x82
    5416:	3309      	adds	r3, #9
    5418:	33ff      	adds	r3, #255	; 0xff
    541a:	b292      	uxth	r2, r2
    541c:	0049      	lsls	r1, r1, #1
    541e:	6880      	ldr	r0, [r0, #8]
    5420:	f7fd fa10 	bl	2844 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    5424:	0023      	movs	r3, r4
    5426:	2297      	movs	r2, #151	; 0x97
    5428:	0021      	movs	r1, r4
    542a:	0026      	movs	r6, r4
    542c:	3325      	adds	r3, #37	; 0x25
    542e:	36fc      	adds	r6, #252	; 0xfc
    5430:	0052      	lsls	r2, r2, #1
    5432:	31fe      	adds	r1, #254	; 0xfe
    5434:	33ff      	adds	r3, #255	; 0xff
    5436:	5ca2      	ldrb	r2, [r4, r2]
    5438:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
    543a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    543c:	f7fd fa02 	bl	2844 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    5440:	0025      	movs	r5, r4
    5442:	239a      	movs	r3, #154	; 0x9a
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    5444:	0027      	movs	r7, r4
		 (_radio.packet_rx_count + _radio.connection_count),
    5446:	005b      	lsls	r3, r3, #1
    5448:	35ff      	adds	r5, #255	; 0xff
    544a:	5ce2      	ldrb	r2, [r4, r3]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    544c:	373d      	adds	r7, #61	; 0x3d
		 (_radio.packet_rx_count + _radio.connection_count),
    544e:	7b6b      	ldrb	r3, [r5, #13]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    5450:	37ff      	adds	r7, #255	; 0xff
    5452:	18d2      	adds	r2, r2, r3
    5454:	2108      	movs	r1, #8
    5456:	003b      	movs	r3, r7
    5458:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    545a:	f7fd f9f3 	bl	2844 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    545e:	0023      	movs	r3, r4
    5460:	3351      	adds	r3, #81	; 0x51
    5462:	33ff      	adds	r3, #255	; 0xff
    5464:	2202      	movs	r2, #2
    5466:	2124      	movs	r1, #36	; 0x24
    5468:	6d30      	ldr	r0, [r6, #80]	; 0x50
    546a:	f7fd f9eb 	bl	2844 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    546e:	22b4      	movs	r2, #180	; 0xb4
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    5470:	0023      	movs	r3, r4
    5472:	21ae      	movs	r1, #174	; 0xae
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    5474:	0052      	lsls	r2, r2, #1
    5476:	5ca2      	ldrb	r2, [r4, r2]
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    5478:	3359      	adds	r3, #89	; 0x59
    547a:	3a01      	subs	r2, #1
    547c:	0049      	lsls	r1, r1, #1
    547e:	6db0      	ldr	r0, [r6, #88]	; 0x58
    5480:	33ff      	adds	r3, #255	; 0xff
    5482:	b292      	uxth	r2, r2
    5484:	5a61      	ldrh	r1, [r4, r1]
    5486:	f7fd f9dd 	bl	2844 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    548a:	0038      	movs	r0, r7
    548c:	f7fd fa00 	bl	2890 <mem_acquire>
	LL_ASSERT(link);
    5490:	2800      	cmp	r0, #0
    5492:	d104      	bne.n	549e <common_init+0x9e>
    5494:	b662      	cpsie	i
    5496:	2004      	movs	r0, #4
    5498:	df02      	svc	2
		_radio.conn_free = NULL;
    549a:	60c2      	str	r2, [r0, #12]
    549c:	e7c2      	b.n	5424 <common_init+0x24>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    549e:	0022      	movs	r2, r4
    54a0:	0021      	movs	r1, r4
    54a2:	3245      	adds	r2, #69	; 0x45
    54a4:	3141      	adds	r1, #65	; 0x41
    54a6:	31ff      	adds	r1, #255	; 0xff
    54a8:	32ff      	adds	r2, #255	; 0xff
    54aa:	f7fd fa3b 	bl	2924 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    54ae:	2338      	movs	r3, #56	; 0x38
    54b0:	3406      	adds	r4, #6
    54b2:	7fe2      	ldrb	r2, [r4, #31]
    54b4:	4313      	orrs	r3, r2
    54b6:	77e3      	strb	r3, [r4, #31]
	_radio.data_chan_map[0] = 0xFF;
    54b8:	23ff      	movs	r3, #255	; 0xff
    54ba:	75eb      	strb	r3, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    54bc:	762b      	strb	r3, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    54be:	766b      	strb	r3, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    54c0:	76ab      	strb	r3, [r5, #26]
	_radio.data_chan_map[4] = 0x1F;
    54c2:	3be0      	subs	r3, #224	; 0xe0
    54c4:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    54c6:	3306      	adds	r3, #6
    54c8:	772b      	strb	r3, [r5, #28]
	packet_rx_allocate(0xFF);
    54ca:	f7ff ff53 	bl	5374 <packet_rx_allocate.constprop.49>
}
    54ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54d0:	20000258 	.word	0x20000258

000054d4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    54d4:	4b03      	ldr	r3, [pc, #12]	; (54e4 <mayfly_xtal_start+0x10>)
{
    54d6:	b510      	push	{r4, lr}
	clock_control_on(_radio.hf_clock, NULL);
    54d8:	6818      	ldr	r0, [r3, #0]
    54da:	2100      	movs	r1, #0
    54dc:	6843      	ldr	r3, [r0, #4]
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	4798      	blx	r3
}
    54e2:	bd10      	pop	{r4, pc}
    54e4:	20000258 	.word	0x20000258

000054e8 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    54e8:	4b03      	ldr	r3, [pc, #12]	; (54f8 <mayfly_xtal_stop+0x10>)
{
    54ea:	b510      	push	{r4, lr}
	clock_control_off(_radio.hf_clock, NULL);
    54ec:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    54ee:	2100      	movs	r1, #0
    54f0:	6843      	ldr	r3, [r0, #4]
    54f2:	685b      	ldr	r3, [r3, #4]
    54f4:	4798      	blx	r3
}
    54f6:	bd10      	pop	{r4, pc}
    54f8:	20000258 	.word	0x20000258

000054fc <chan_sel_2>:
{
    54fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    54fe:	2703      	movs	r7, #3
		o |= (i & 1);
    5500:	2401      	movs	r4, #1
{
    5502:	9200      	str	r2, [sp, #0]
    5504:	9301      	str	r3, [sp, #4]
	prn_e = counter ^ chan_id;
    5506:	4048      	eors	r0, r1
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5508:	2608      	movs	r6, #8
	o = 0;
    550a:	2200      	movs	r2, #0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    550c:	0a03      	lsrs	r3, r0, #8
		o |= (i & 1);
    550e:	001d      	movs	r5, r3
		o <<= 1;
    5510:	0052      	lsls	r2, r2, #1
		o |= (i & 1);
    5512:	4025      	ands	r5, r4
    5514:	3e01      	subs	r6, #1
    5516:	432a      	orrs	r2, r5
    5518:	b2f6      	uxtb	r6, r6
    551a:	b2d2      	uxtb	r2, r2
		i >>= 1;
    551c:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    551e:	2e00      	cmp	r6, #0
    5520:	d1f5      	bne.n	550e <chan_sel_2+0x12>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5522:	b2c3      	uxtb	r3, r0
    5524:	2008      	movs	r0, #8
    5526:	0212      	lsls	r2, r2, #8
    5528:	b212      	sxth	r2, r2
		o |= (i & 1);
    552a:	001d      	movs	r5, r3
		o <<= 1;
    552c:	0076      	lsls	r6, r6, #1
		o |= (i & 1);
    552e:	4025      	ands	r5, r4
    5530:	3801      	subs	r0, #1
    5532:	432e      	orrs	r6, r5
    5534:	b2c0      	uxtb	r0, r0
    5536:	b2f6      	uxtb	r6, r6
		i >>= 1;
    5538:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    553a:	2800      	cmp	r0, #0
    553c:	d1f5      	bne.n	552a <chan_sel_2+0x2e>
	return ((u32_t)a * 17 + b) & 0xFFFF;
    553e:	2311      	movs	r3, #17
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5540:	4316      	orrs	r6, r2
	return ((u32_t)a * 17 + b) & 0xFFFF;
    5542:	435e      	muls	r6, r3
    5544:	3f01      	subs	r7, #1
    5546:	198e      	adds	r6, r1, r6
    5548:	b2ff      	uxtb	r7, r7
    554a:	b2b0      	uxth	r0, r6
	for (iterate = 0; iterate < 3; iterate++) {
    554c:	2f00      	cmp	r7, #0
    554e:	d1db      	bne.n	5508 <chan_sel_2+0xc>
	prn_e ^= chan_id;
    5550:	4041      	eors	r1, r0
    5552:	000e      	movs	r6, r1
	chan_next = prn_e % 37;
    5554:	2125      	movs	r1, #37	; 0x25
    5556:	0030      	movs	r0, r6
    5558:	f7fa fe7a 	bl	250 <__aeabi_uidivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    555c:	9a00      	ldr	r2, [sp, #0]
	chan_next = prn_e % 37;
    555e:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5560:	08c3      	lsrs	r3, r0, #3
    5562:	5cd3      	ldrb	r3, [r2, r3]
    5564:	2207      	movs	r2, #7
    5566:	4002      	ands	r2, r0
    5568:	4113      	asrs	r3, r2
    556a:	4223      	tst	r3, r4
    556c:	d105      	bne.n	557a <chan_sel_2+0x7e>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    556e:	9901      	ldr	r1, [sp, #4]
		chan_next = chan_sel_remap(chan_map, chan_index);
    5570:	9800      	ldr	r0, [sp, #0]
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    5572:	4371      	muls	r1, r6
		chan_next = chan_sel_remap(chan_map, chan_index);
    5574:	0c09      	lsrs	r1, r1, #16
    5576:	f7fe fed0 	bl	431a <chan_sel_remap>
}
    557a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000557c <preempt_calc>:
{
    557c:	b570      	push	{r4, r5, r6, lr}
    557e:	0014      	movs	r4, r2
    5580:	000e      	movs	r6, r1
    5582:	0005      	movs	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    5584:	f7fe f8e4 	bl	3750 <ticker_ticks_now_get>
	u32_t diff =
    5588:	0021      	movs	r1, r4
    558a:	f7fe f8e5 	bl	3758 <ticker_ticks_diff_get>
	diff += 3;
    558e:	1cc4      	adds	r4, r0, #3
	return 0;
    5590:	2000      	movs	r0, #0
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    5592:	2c09      	cmp	r4, #9
    5594:	d910      	bls.n	55b8 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    5596:	4b09      	ldr	r3, [pc, #36]	; (55bc <preempt_calc+0x40>)
    5598:	781b      	ldrb	r3, [r3, #0]
    559a:	4283      	cmp	r3, r0
    559c:	d001      	beq.n	55a2 <preempt_calc+0x26>
    559e:	f7ff f989 	bl	48b4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    55a2:	0028      	movs	r0, r5
    55a4:	0032      	movs	r2, r6
    55a6:	2100      	movs	r1, #0
    55a8:	f7ff fa0e 	bl	49c8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    55ac:	68ab      	ldr	r3, [r5, #8]
		return 1;
    55ae:	2001      	movs	r0, #1
		diff += hdr->ticks_preempt_to_start;
    55b0:	18e4      	adds	r4, r4, r3
		if (diff <
    55b2:	2c26      	cmp	r4, #38	; 0x26
    55b4:	d800      	bhi.n	55b8 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
    55b6:	60ac      	str	r4, [r5, #8]
}
    55b8:	bd70      	pop	{r4, r5, r6, pc}
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	2000045c 	.word	0x2000045c

000055c0 <event_adv>:
{
    55c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    55c2:	4c27      	ldr	r4, [pc, #156]	; (5660 <event_adv+0xa0>)
{
    55c4:	0005      	movs	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    55c6:	7be2      	ldrb	r2, [r4, #15]
    55c8:	b2d2      	uxtb	r2, r2
    55ca:	2a00      	cmp	r2, #0
    55cc:	d002      	beq.n	55d4 <event_adv+0x14>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    55ce:	b662      	cpsie	i
    55d0:	2004      	movs	r0, #4
    55d2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    55d4:	7b23      	ldrb	r3, [r4, #12]
    55d6:	b2db      	uxtb	r3, r3
    55d8:	2b05      	cmp	r3, #5
    55da:	d1f8      	bne.n	55ce <event_adv+0xe>
	_radio.role = ROLE_ADV;
    55dc:	2701      	movs	r7, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    55de:	1da6      	adds	r6, r4, #6
	_radio.ticks_anchor = ticks_at_expire;
    55e0:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    55e2:	7ff0      	ldrb	r0, [r6, #31]
	_radio.role = ROLE_ADV;
    55e4:	73e7      	strb	r7, [r4, #15]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    55e6:	0740      	lsls	r0, r0, #29
    55e8:	0f40      	lsrs	r0, r0, #29
	_radio.ticker_id_prepare = 0;
    55ea:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    55ec:	7363      	strb	r3, [r4, #13]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    55ee:	f7ff fd95 	bl	511c <adv_scan_configure.constprop.47>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    55f2:	2007      	movs	r0, #7
    55f4:	7ff3      	ldrb	r3, [r6, #31]
    55f6:	1d61      	adds	r1, r4, #5
    55f8:	08db      	lsrs	r3, r3, #3
    55fa:	4003      	ands	r3, r0
    55fc:	001a      	movs	r2, r3
    55fe:	7fcb      	ldrb	r3, [r1, #31]
    5600:	4383      	bics	r3, r0
    5602:	4313      	orrs	r3, r2
    5604:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    5606:	f7ff fb63 	bl	4cd0 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    560a:	223f      	movs	r2, #63	; 0x3f
    560c:	7ff3      	ldrb	r3, [r6, #31]
    560e:	4393      	bics	r3, r2
    5610:	d007      	beq.n	5622 <event_adv+0x62>
		struct ll_filter *wl = ctrl_filter_get(true);
    5612:	0038      	movs	r0, r7
    5614:	f003 f900 	bl	8818 <ctrl_filter_get>
				       (u8_t *)wl->bdaddr);
    5618:	1c82      	adds	r2, r0, #2
		radio_filter_configure(wl->enable_bitmask,
    561a:	7841      	ldrb	r1, [r0, #1]
    561c:	7800      	ldrb	r0, [r0, #0]
    561e:	f003 fcad 	bl	8f7c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    5622:	0029      	movs	r1, r5
    5624:	68a2      	ldr	r2, [r4, #8]
    5626:	3109      	adds	r1, #9
    5628:	2001      	movs	r0, #1
    562a:	f003 fd07 	bl	903c <radio_tmr_start>
	radio_tmr_end_capture();
    562e:	f003 fdbf 	bl	91b0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    5632:	0020      	movs	r0, r4
    5634:	002a      	movs	r2, r5
    5636:	3014      	adds	r0, #20
    5638:	2105      	movs	r1, #5
    563a:	f7ff ff9f 	bl	557c <preempt_calc>
    563e:	2800      	cmp	r0, #0
    5640:	d004      	beq.n	564c <event_adv+0x8c>
		_radio.state = STATE_STOP;
    5642:	2304      	movs	r3, #4
    5644:	7423      	strb	r3, [r4, #16]
		radio_disable();
    5646:	f003 fc0f 	bl	8e68 <radio_disable>
}
    564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ticker_status =
    564c:	0003      	movs	r3, r0
    564e:	4a05      	ldr	r2, [pc, #20]	; (5664 <event_adv+0xa4>)
    5650:	0001      	movs	r1, r0
    5652:	f7fe f83d 	bl	36d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5656:	2302      	movs	r3, #2
    5658:	4398      	bics	r0, r3
    565a:	d1b8      	bne.n	55ce <event_adv+0xe>
    565c:	e7f5      	b.n	564a <event_adv+0x8a>
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	20000258 	.word	0x20000258
    5664:	0000485d 	.word	0x0000485d

00005668 <ctrl_tx_enqueue>:
	    !conn->empty &&
    5668:	0003      	movs	r3, r0
{
    566a:	b570      	push	{r4, r5, r6, lr}
    566c:	0004      	movs	r4, r0
	    !conn->empty &&
    566e:	33a8      	adds	r3, #168	; 0xa8
    5670:	781d      	ldrb	r5, [r3, #0]
    5672:	34f0      	adds	r4, #240	; 0xf0
	if (
    5674:	b26a      	sxtb	r2, r5
    5676:	334c      	adds	r3, #76	; 0x4c
    5678:	2a00      	cmp	r2, #0
    567a:	db1b      	blt.n	56b4 <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    567c:	0002      	movs	r2, r0
    567e:	32ec      	adds	r2, #236	; 0xec
    5680:	6812      	ldr	r2, [r2, #0]
	    !conn->empty &&
    5682:	2a00      	cmp	r2, #0
    5684:	d016      	beq.n	56b4 <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    5686:	072d      	lsls	r5, r5, #28
    5688:	d414      	bmi.n	56b4 <ctrl_tx_enqueue+0x4c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    568a:	0005      	movs	r5, r0
    568c:	35f8      	adds	r5, #248	; 0xf8
    568e:	682e      	ldr	r6, [r5, #0]
    5690:	42b2      	cmp	r2, r6
    5692:	d101      	bne.n	5698 <ctrl_tx_enqueue+0x30>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    5694:	6816      	ldr	r6, [r2, #0]
    5696:	602e      	str	r6, [r5, #0]
		if (!conn->pkt_tx_ctrl) {
    5698:	6825      	ldr	r5, [r4, #0]
    569a:	2d00      	cmp	r5, #0
    569c:	d110      	bne.n	56c0 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    569e:	6815      	ldr	r5, [r2, #0]
    56a0:	600d      	str	r5, [r1, #0]
			conn->pkt_tx_head = node_tx;
    56a2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl = node_tx;
    56a4:	6021      	str	r1, [r4, #0]
	conn->pkt_tx_ctrl_last = node_tx;
    56a6:	6019      	str	r1, [r3, #0]
	if (node_tx->next == 0) {
    56a8:	680b      	ldr	r3, [r1, #0]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d101      	bne.n	56b2 <ctrl_tx_enqueue+0x4a>
		conn->pkt_tx_last = node_tx;
    56ae:	30fc      	adds	r0, #252	; 0xfc
    56b0:	6001      	str	r1, [r0, #0]
}
    56b2:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->pkt_tx_ctrl) {
    56b4:	6822      	ldr	r2, [r4, #0]
    56b6:	2a00      	cmp	r2, #0
    56b8:	d102      	bne.n	56c0 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    56ba:	0002      	movs	r2, r0
    56bc:	32ec      	adds	r2, #236	; 0xec
    56be:	e7ee      	b.n	569e <ctrl_tx_enqueue+0x36>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    56c0:	681a      	ldr	r2, [r3, #0]
    56c2:	6814      	ldr	r4, [r2, #0]
    56c4:	600c      	str	r4, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    56c6:	6011      	str	r1, [r2, #0]
    56c8:	e7ed      	b.n	56a6 <ctrl_tx_enqueue+0x3e>

000056ca <ctrl_tx_sec_enqueue>:
	if (conn->pause_tx) {
    56ca:	0003      	movs	r3, r0
    56cc:	33a8      	adds	r3, #168	; 0xa8
    56ce:	781b      	ldrb	r3, [r3, #0]
{
    56d0:	b510      	push	{r4, lr}
	if (conn->pause_tx) {
    56d2:	071b      	lsls	r3, r3, #28
    56d4:	d50f      	bpl.n	56f6 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    56d6:	0003      	movs	r3, r0
    56d8:	33f0      	adds	r3, #240	; 0xf0
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	2b00      	cmp	r3, #0
    56de:	d104      	bne.n	56ea <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    56e0:	30ec      	adds	r0, #236	; 0xec
    56e2:	6803      	ldr	r3, [r0, #0]
    56e4:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    56e6:	6001      	str	r1, [r0, #0]
}
    56e8:	bd10      	pop	{r4, pc}
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    56ea:	30f4      	adds	r0, #244	; 0xf4
    56ec:	6803      	ldr	r3, [r0, #0]
    56ee:	681a      	ldr	r2, [r3, #0]
    56f0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    56f2:	6019      	str	r1, [r3, #0]
    56f4:	e7f8      	b.n	56e8 <ctrl_tx_sec_enqueue+0x1e>
		ctrl_tx_enqueue(conn, node_tx);
    56f6:	f7ff ffb7 	bl	5668 <ctrl_tx_enqueue>
}
    56fa:	e7f5      	b.n	56e8 <ctrl_tx_sec_enqueue+0x1e>

000056fc <feature_rsp_send>:
{
    56fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    56fe:	4f1f      	ldr	r7, [pc, #124]	; (577c <feature_rsp_send+0x80>)
{
    5700:	0005      	movs	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5702:	0038      	movs	r0, r7
    5704:	3051      	adds	r0, #81	; 0x51
    5706:	30ff      	adds	r0, #255	; 0xff
{
    5708:	000e      	movs	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    570a:	f7fd f8c1 	bl	2890 <mem_acquire>
    570e:	0004      	movs	r4, r0
		return 1;
    5710:	2001      	movs	r0, #1
	if (!node_tx) {
    5712:	2c00      	cmp	r4, #0
    5714:	d030      	beq.n	5778 <feature_rsp_send+0x7c>
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5716:	37fc      	adds	r7, #252	; 0xfc
    5718:	6979      	ldr	r1, [r7, #20]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    571a:	7932      	ldrb	r2, [r6, #4]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    571c:	0008      	movs	r0, r1
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    571e:	4b18      	ldr	r3, [pc, #96]	; (5780 <feature_rsp_send+0x84>)
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5720:	308c      	adds	r0, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    5722:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    5724:	7972      	ldrb	r2, [r6, #5]
	_radio.conn_curr->common.fex_valid = 1;
    5726:	3138      	adds	r1, #56	; 0x38
	       (features[1] << 8) | (features[2] << 16);
    5728:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    572a:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    572c:	79b2      	ldrb	r2, [r6, #6]
    572e:	0412      	lsls	r2, r2, #16
    5730:	431a      	orrs	r2, r3
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5732:	6803      	ldr	r3, [r0, #0]
    5734:	03db      	lsls	r3, r3, #15
    5736:	0bdb      	lsrs	r3, r3, #15
    5738:	4013      	ands	r3, r2
    573a:	6003      	str	r3, [r0, #0]
	_radio.conn_curr->common.fex_valid = 1;
    573c:	2320      	movs	r3, #32
    573e:	780a      	ldrb	r2, [r1, #0]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    5740:	0020      	movs	r0, r4
	_radio.conn_curr->common.fex_valid = 1;
    5742:	4313      	orrs	r3, r2
    5744:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5746:	2303      	movs	r3, #3
    5748:	7922      	ldrb	r2, [r4, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    574a:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    574c:	4313      	orrs	r3, r2
    574e:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    5750:	2309      	movs	r3, #9
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    5752:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    5754:	7163      	strb	r3, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    5756:	71e3      	strb	r3, [r4, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    5758:	3008      	adds	r0, #8
    575a:	f7fa ffaf 	bl	6bc <memset>
		conn->llcp_features & 0xFF;
    575e:	002b      	movs	r3, r5
    5760:	338c      	adds	r3, #140	; 0x8c
    5762:	681b      	ldr	r3, [r3, #0]
	ctrl_tx_sec_enqueue(conn, node_tx);
    5764:	0028      	movs	r0, r5
		(conn->llcp_features >> 8) & 0xFF;
    5766:	0a1a      	lsrs	r2, r3, #8
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    5768:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 16) & 0xFF;
    576a:	0c1b      	lsrs	r3, r3, #16
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    576c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    576e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    5770:	0021      	movs	r1, r4
    5772:	f7ff ffaa 	bl	56ca <ctrl_tx_sec_enqueue>
	return 0;
    5776:	2000      	movs	r0, #0
}
    5778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	20000258 	.word	0x20000258
    5780:	fffe30d0 	.word	0xfffe30d0

00005784 <event_connection_prepare>:
{
    5784:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5786:	4c75      	ldr	r4, [pc, #468]	; (595c <event_connection_prepare+0x1d8>)
{
    5788:	b091      	sub	sp, #68	; 0x44
    578a:	900c      	str	r0, [sp, #48]	; 0x30
    578c:	910e      	str	r1, [sp, #56]	; 0x38
    578e:	001f      	movs	r7, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    5790:	7b23      	ldrb	r3, [r4, #12]
    5792:	2b00      	cmp	r3, #0
    5794:	d002      	beq.n	579c <event_connection_prepare+0x18>
			LL_ASSERT(0);
    5796:	b662      	cpsie	i
    5798:	2004      	movs	r0, #4
    579a:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    579c:	8c3b      	ldrh	r3, [r7, #32]
    579e:	3307      	adds	r3, #7
    57a0:	b2db      	uxtb	r3, r3
    57a2:	7323      	strb	r3, [r4, #12]
	if (conn->role) {
    57a4:	7f7b      	ldrb	r3, [r7, #29]
    57a6:	2b7f      	cmp	r3, #127	; 0x7f
    57a8:	d909      	bls.n	57be <event_connection_prepare+0x3a>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    57aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    57ac:	1c53      	adds	r3, r2, #1
    57ae:	434b      	muls	r3, r1
		conn->slave.window_widening_prepare_us +=
    57b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
    57b2:	185b      	adds	r3, r3, r1
		    conn->slave.window_widening_max_us) {
    57b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    57b6:	647b      	str	r3, [r7, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    57b8:	428b      	cmp	r3, r1
    57ba:	d900      	bls.n	57be <event_connection_prepare+0x3a>
			conn->slave.window_widening_prepare_us =
    57bc:	6479      	str	r1, [r7, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    57be:	003d      	movs	r5, r7
    57c0:	003e      	movs	r6, r7
	conn->latency_prepare += lazy;
    57c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    57c4:	355d      	adds	r5, #93	; 0x5d
	conn->latency_prepare += lazy;
    57c6:	18d2      	adds	r2, r2, r3
	event_counter = conn->event_counter + conn->latency_prepare;
    57c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
	conn->latency_prepare += lazy;
    57ca:	b292      	uxth	r2, r2
    57cc:	853a      	strh	r2, [r7, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    57ce:	18d2      	adds	r2, r2, r3
    57d0:	b293      	uxth	r3, r2
    57d2:	930a      	str	r3, [sp, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    57d4:	365c      	adds	r6, #92	; 0x5c
    57d6:	782a      	ldrb	r2, [r5, #0]
    57d8:	7833      	ldrb	r3, [r6, #0]
    57da:	429a      	cmp	r2, r3
    57dc:	d100      	bne.n	57e0 <event_connection_prepare+0x5c>
    57de:	e07f      	b.n	58e0 <event_connection_prepare+0x15c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    57e0:	2005      	movs	r0, #5
    57e2:	f7ff fcc1 	bl	5168 <event_stop.constprop.48>
		switch (conn->llcp_type) {
    57e6:	003b      	movs	r3, r7
    57e8:	335e      	adds	r3, #94	; 0x5e
    57ea:	7818      	ldrb	r0, [r3, #0]
    57ec:	3801      	subs	r0, #1
    57ee:	2803      	cmp	r0, #3
    57f0:	d8d1      	bhi.n	5796 <event_connection_prepare+0x12>
    57f2:	f7fa fcdf 	bl	1b4 <__gnu_thumb1_case_uhi>
    57f6:	0004      	.short	0x0004
    57f8:	02a5023b 	.word	0x02a5023b
    57fc:	02d2      	.short	0x02d2
	conn_upd = _radio.conn_upd;
    57fe:	23be      	movs	r3, #190	; 0xbe
    5800:	005b      	lsls	r3, r3, #1
	if (!conn_upd) {
    5802:	58e2      	ldr	r2, [r4, r3]
    5804:	2a00      	cmp	r2, #0
    5806:	d100      	bne.n	580a <event_connection_prepare+0x86>
		_radio.conn_upd = conn;
    5808:	50e7      	str	r7, [r4, r3]
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    580a:	003b      	movs	r3, r7
    580c:	2603      	movs	r6, #3
    580e:	3360      	adds	r3, #96	; 0x60
    5810:	930d      	str	r3, [sp, #52]	; 0x34
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	4033      	ands	r3, r6
    5816:	d100      	bne.n	581a <event_connection_prepare+0x96>
    5818:	e0ac      	b.n	5974 <event_connection_prepare+0x1f0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    581a:	0020      	movs	r0, r4
    581c:	3051      	adds	r0, #81	; 0x51
    581e:	30ff      	adds	r0, #255	; 0xff
    5820:	f7fd f836 	bl	2890 <mem_acquire>
    5824:	1e04      	subs	r4, r0, #0
		if (!node_tx) {
    5826:	d05b      	beq.n	58e0 <event_connection_prepare+0x15c>
		switch (conn->llcp.conn_upd.state) {
    5828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	079a      	lsls	r2, r3, #30
    582e:	0f92      	lsrs	r2, r2, #30
    5830:	2a01      	cmp	r2, #1
    5832:	d1b0      	bne.n	5796 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    5834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5836:	43b3      	bics	r3, r6
    5838:	7013      	strb	r3, [r2, #0]
		event_counter + conn->latency + 6;
    583a:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
    583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    583e:	3506      	adds	r5, #6
    5840:	195d      	adds	r5, r3, r5
	conn->llcp.conn_upd.instant =
    5842:	003b      	movs	r3, r7
		event_counter + conn->latency + 6;
    5844:	b2ad      	uxth	r5, r5
	conn->llcp.conn_upd.instant =
    5846:	3368      	adds	r3, #104	; 0x68
    5848:	801d      	strh	r5, [r3, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    584a:	7903      	ldrb	r3, [r0, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    584c:	4944      	ldr	r1, [pc, #272]	; (5960 <event_connection_prepare+0x1dc>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    584e:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    5850:	230c      	movs	r3, #12
    5852:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    5854:	2300      	movs	r3, #0
    5856:	71c3      	strb	r3, [r0, #7]
		conn->llcp.conn_upd.win_size;
    5858:	003b      	movs	r3, r7
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    585a:	7106      	strb	r6, [r0, #4]
		conn->llcp.conn_upd.win_size;
    585c:	3370      	adds	r3, #112	; 0x70
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	7203      	strb	r3, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5862:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    5864:	f7fa fcb0 	bl	1c8 <__aeabi_uidiv>
    5868:	0021      	movs	r1, r4
		conn->llcp.conn_upd.interval;
    586a:	003b      	movs	r3, r7
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    586c:	b280      	uxth	r0, r0
    586e:	7260      	strb	r0, [r4, #9]
    5870:	3109      	adds	r1, #9
    5872:	0a00      	lsrs	r0, r0, #8
    5874:	7048      	strb	r0, [r1, #1]
		conn->llcp.conn_upd.interval;
    5876:	3362      	adds	r3, #98	; 0x62
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    5878:	781a      	ldrb	r2, [r3, #0]
    587a:	72e2      	strb	r2, [r4, #11]
    587c:	785b      	ldrb	r3, [r3, #1]
    587e:	7323      	strb	r3, [r4, #12]
		conn->llcp.conn_upd.latency;
    5880:	003b      	movs	r3, r7
    5882:	3364      	adds	r3, #100	; 0x64
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    5884:	781a      	ldrb	r2, [r3, #0]
    5886:	7362      	strb	r2, [r4, #13]
    5888:	785b      	ldrb	r3, [r3, #1]
    588a:	73a3      	strb	r3, [r4, #14]
		conn->llcp.conn_upd.timeout;
    588c:	003b      	movs	r3, r7
    588e:	3366      	adds	r3, #102	; 0x66
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    5890:	781a      	ldrb	r2, [r3, #0]
    5892:	73e2      	strb	r2, [r4, #15]
    5894:	785b      	ldrb	r3, [r3, #1]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    5896:	7465      	strb	r5, [r4, #17]
    5898:	0a2d      	lsrs	r5, r5, #8
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    589a:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    589c:	74a5      	strb	r5, [r4, #18]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    589e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    58a0:	683a      	ldr	r2, [r7, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    58a2:	67bb      	str	r3, [r7, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    58a4:	2a00      	cmp	r2, #0
    58a6:	da0a      	bge.n	58be <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    58a8:	6878      	ldr	r0, [r7, #4]
    58aa:	68bb      	ldr	r3, [r7, #8]
    58ac:	4283      	cmp	r3, r0
    58ae:	d200      	bcs.n	58b2 <event_connection_prepare+0x12e>
    58b0:	0003      	movs	r3, r0
			conn->llcp.conn_upd.ticks_anchor -=
    58b2:	980c      	ldr	r0, [sp, #48]	; 0x30
				(conn->hdr.ticks_xtal_to_start &
    58b4:	0052      	lsls	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    58b6:	181b      	adds	r3, r3, r0
				(conn->hdr.ticks_xtal_to_start &
    58b8:	0852      	lsrs	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    58ba:	1a9b      	subs	r3, r3, r2
    58bc:	67bb      	str	r3, [r7, #120]	; 0x78
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    58be:	4b29      	ldr	r3, [pc, #164]	; (5964 <event_connection_prepare+0x1e0>)
    58c0:	4a29      	ldr	r2, [pc, #164]	; (5968 <event_connection_prepare+0x1e4>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    58c2:	6779      	str	r1, [r7, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    58c4:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    58c6:	2201      	movs	r2, #1
    58c8:	2000      	movs	r0, #0
    58ca:	0011      	movs	r1, r2
		mayfly_sched_offset->param = (void *)conn;
    58cc:	609f      	str	r7, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    58ce:	f7fd f895 	bl	29fc <mayfly_enqueue>
		LL_ASSERT(!retval);
    58d2:	2800      	cmp	r0, #0
    58d4:	d000      	beq.n	58d8 <event_connection_prepare+0x154>
    58d6:	e75e      	b.n	5796 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    58d8:	0021      	movs	r1, r4
    58da:	0038      	movs	r0, r7
    58dc:	f7ff fec4 	bl	5668 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    58e0:	003c      	movs	r4, r7
    58e2:	003d      	movs	r5, r7
    58e4:	3499      	adds	r4, #153	; 0x99
    58e6:	3598      	adds	r5, #152	; 0x98
    58e8:	7822      	ldrb	r2, [r4, #0]
    58ea:	782b      	ldrb	r3, [r5, #0]
    58ec:	429a      	cmp	r2, r3
    58ee:	d01e      	beq.n	592e <event_connection_prepare+0x1aa>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    58f0:	2005      	movs	r0, #5
    58f2:	f7ff fc39 	bl	5168 <event_stop.constprop.48>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    58f6:	4819      	ldr	r0, [pc, #100]	; (595c <event_connection_prepare+0x1d8>)
    58f8:	3051      	adds	r0, #81	; 0x51
    58fa:	30ff      	adds	r0, #255	; 0xff
    58fc:	f7fc ffc8 	bl	2890 <mem_acquire>
    5900:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    5902:	d014      	beq.n	592e <event_connection_prepare+0x1aa>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    5904:	782b      	ldrb	r3, [r5, #0]
    5906:	7023      	strb	r3, [r4, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5908:	2303      	movs	r3, #3
    590a:	7902      	ldrb	r2, [r0, #4]
    590c:	4313      	orrs	r3, r2
    590e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    5910:	2302      	movs	r3, #2
    5912:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5914:	71c3      	strb	r3, [r0, #7]
				conn->llcp_terminate.reason_own;
    5916:	003b      	movs	r3, r7
    5918:	339a      	adds	r3, #154	; 0x9a
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    591a:	781b      	ldrb	r3, [r3, #0]
    591c:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    591e:	0038      	movs	r0, r7
    5920:	f7ff fea2 	bl	5668 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    5924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    5926:	2b01      	cmp	r3, #1
    5928:	d800      	bhi.n	592c <event_connection_prepare+0x1a8>
    592a:	e28b      	b.n	5e44 <event_connection_prepare+0x6c0>
				conn->procedure_expire++;
    592c:	86bb      	strh	r3, [r7, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    592e:	8c3a      	ldrh	r2, [r7, #32]
    5930:	7f7c      	ldrb	r4, [r7, #29]
    5932:	3207      	adds	r2, #7
    5934:	1d3b      	adds	r3, r7, #4
    5936:	68b9      	ldr	r1, [r7, #8]
    5938:	b2d2      	uxtb	r2, r2
    593a:	480c      	ldr	r0, [pc, #48]	; (596c <event_connection_prepare+0x1e8>)
    593c:	2c7f      	cmp	r4, #127	; 0x7f
    593e:	d800      	bhi.n	5942 <event_connection_prepare+0x1be>
    5940:	480b      	ldr	r0, [pc, #44]	; (5970 <event_connection_prepare+0x1ec>)
    5942:	9002      	str	r0, [sp, #8]
    5944:	9201      	str	r2, [sp, #4]
    5946:	9100      	str	r1, [sp, #0]
    5948:	003a      	movs	r2, r7
    594a:	9703      	str	r7, [sp, #12]
    594c:	990e      	ldr	r1, [sp, #56]	; 0x38
    594e:	980c      	ldr	r0, [sp, #48]	; 0x30
    5950:	f7ff fc1a 	bl	5188 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    5954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5956:	3201      	adds	r2, #1
    5958:	847a      	strh	r2, [r7, #34]	; 0x22
    595a:	e162      	b.n	5c22 <event_connection_prepare+0x49e>
    595c:	20000258 	.word	0x20000258
    5960:	000004e2 	.word	0x000004e2
    5964:	20002368 	.word	0x20002368
    5968:	00004c69 	.word	0x00004c69
    596c:	00005e99 	.word	0x00005e99
    5970:	00007975 	.word	0x00007975
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    5974:	003a      	movs	r2, r7
    5976:	3268      	adds	r2, #104	; 0x68
    5978:	8812      	ldrh	r2, [r2, #0]
    597a:	990a      	ldr	r1, [sp, #40]	; 0x28
    597c:	1a8a      	subs	r2, r1, r2
	} else if (instant_latency <= 0x7FFF) {
    597e:	b296      	uxth	r6, r2
    5980:	0412      	lsls	r2, r2, #16
    5982:	d4ad      	bmi.n	58e0 <event_connection_prepare+0x15c>
		conn->llcp_ack = conn->llcp_req;
    5984:	003a      	movs	r2, r7
    5986:	325c      	adds	r2, #92	; 0x5c
    5988:	7812      	ldrb	r2, [r2, #0]
		_radio.ticker_id_prepare = 0;
    598a:	7323      	strb	r3, [r4, #12]
		conn->llcp_ack = conn->llcp_req;
    598c:	702a      	strb	r2, [r5, #0]
		if (_radio.conn_upd == conn) {
    598e:	22be      	movs	r2, #190	; 0xbe
    5990:	0052      	lsls	r2, r2, #1
    5992:	58a1      	ldr	r1, [r4, r2]
    5994:	428f      	cmp	r7, r1
    5996:	d100      	bne.n	599a <event_connection_prepare+0x216>
			_radio.conn_upd = NULL;
    5998:	50a3      	str	r3, [r4, r2]
		if ((conn->llcp.conn_upd.interval !=
    599a:	003d      	movs	r5, r7
    599c:	003c      	movs	r4, r7
    599e:	3562      	adds	r5, #98	; 0x62
    59a0:	882b      	ldrh	r3, [r5, #0]
    59a2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    59a4:	3464      	adds	r4, #100	; 0x64
    59a6:	4299      	cmp	r1, r3
    59a8:	d112      	bne.n	59d0 <event_connection_prepare+0x24c>
		     conn->conn_interval) ||
    59aa:	8822      	ldrh	r2, [r4, #0]
    59ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    59ae:	429a      	cmp	r2, r3
    59b0:	d10e      	bne.n	59d0 <event_connection_prepare+0x24c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    59b2:	4bd4      	ldr	r3, [pc, #848]	; (5d04 <event_connection_prepare+0x580>)
    59b4:	4359      	muls	r1, r3
    59b6:	003b      	movs	r3, r7
    59b8:	3366      	adds	r3, #102	; 0x66
    59ba:	8818      	ldrh	r0, [r3, #0]
    59bc:	4bd2      	ldr	r3, [pc, #840]	; (5d08 <event_connection_prepare+0x584>)
    59be:	4358      	muls	r0, r3
    59c0:	1840      	adds	r0, r0, r1
    59c2:	3801      	subs	r0, #1
    59c4:	f7fa fc4e 	bl	264 <__aeabi_idiv>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    59c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    59ca:	b280      	uxth	r0, r0
    59cc:	4283      	cmp	r3, r0
    59ce:	d01b      	beq.n	5a08 <event_connection_prepare+0x284>
			node_rx = packet_rx_reserve_get(2);
    59d0:	2002      	movs	r0, #2
    59d2:	f7fe fcbd 	bl	4350 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    59d6:	2800      	cmp	r0, #0
    59d8:	d100      	bne.n	59dc <event_connection_prepare+0x258>
    59da:	e6dc      	b.n	5796 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    59dc:	8c3b      	ldrh	r3, [r7, #32]
    59de:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    59e0:	2308      	movs	r3, #8
    59e2:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    59e4:	2300      	movs	r3, #0
    59e6:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    59e8:	782b      	ldrb	r3, [r5, #0]
    59ea:	7303      	strb	r3, [r0, #12]
    59ec:	786b      	ldrb	r3, [r5, #1]
    59ee:	7343      	strb	r3, [r0, #13]
			radio_le_conn_update_cmplt->latency =
    59f0:	7823      	ldrb	r3, [r4, #0]
    59f2:	7383      	strb	r3, [r0, #14]
    59f4:	7863      	ldrb	r3, [r4, #1]
    59f6:	73c3      	strb	r3, [r0, #15]
				conn->llcp.conn_upd.timeout;
    59f8:	003b      	movs	r3, r7
    59fa:	3366      	adds	r3, #102	; 0x66
			radio_le_conn_update_cmplt->timeout =
    59fc:	781a      	ldrb	r2, [r3, #0]
    59fe:	7402      	strb	r2, [r0, #16]
    5a00:	785b      	ldrb	r3, [r3, #1]
    5a02:	7443      	strb	r3, [r0, #17]
			packet_rx_enqueue();
    5a04:	f7ff f826 	bl	4a54 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5a08:	683b      	ldr	r3, [r7, #0]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	da0b      	bge.n	5a26 <event_connection_prepare+0x2a2>
			u32_t ticks_prepare_to_start =
    5a0e:	687a      	ldr	r2, [r7, #4]
    5a10:	68b8      	ldr	r0, [r7, #8]
    5a12:	4290      	cmp	r0, r2
    5a14:	d200      	bcs.n	5a18 <event_connection_prepare+0x294>
    5a16:	0010      	movs	r0, r2
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5a1a:	005b      	lsls	r3, r3, #1
    5a1c:	085b      	lsrs	r3, r3, #1
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5a1e:	1810      	adds	r0, r2, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5a20:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5a22:	1ac3      	subs	r3, r0, r3
    5a24:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_old = instant_latency * conn->conn_interval;
    5a26:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    5a28:	882b      	ldrh	r3, [r5, #0]
		conn_interval_old = instant_latency * conn->conn_interval;
    5a2a:	4374      	muls	r4, r6
    5a2c:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    5a2e:	0019      	movs	r1, r3
    5a30:	0020      	movs	r0, r4
			conn->llcp.conn_upd.interval;
    5a32:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
    5a34:	f7fa fbc8 	bl	1c8 <__aeabi_uidiv>
    5a38:	b283      	uxth	r3, r0
		conn_interval_new = latency *
    5a3a:	980a      	ldr	r0, [sp, #40]	; 0x28
		latency = conn_interval_old /
    5a3c:	930d      	str	r3, [sp, #52]	; 0x34
		conn_interval_new = latency *
    5a3e:	4358      	muls	r0, r3
    5a40:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    5a42:	4284      	cmp	r4, r0
    5a44:	d300      	bcc.n	5a48 <event_connection_prepare+0x2c4>
    5a46:	e0ee      	b.n	5c26 <event_connection_prepare+0x4a2>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    5a48:	2324      	movs	r3, #36	; 0x24
    5a4a:	1b00      	subs	r0, r0, r4
    5a4c:	4aaf      	ldr	r2, [pc, #700]	; (5d0c <event_connection_prepare+0x588>)
    5a4e:	33ff      	adds	r3, #255	; 0xff
    5a50:	17c1      	asrs	r1, r0, #31
    5a52:	f7fa fc89 	bl	368 <__aeabi_lmul>
    5a56:	2307      	movs	r3, #7
    5a58:	4aad      	ldr	r2, [pc, #692]	; (5d10 <event_connection_prepare+0x58c>)
    5a5a:	f7fa fc65 	bl	328 <__aeabi_uldivmod>
    5a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a60:	0200      	lsls	r0, r0, #8
    5a62:	0a00      	lsrs	r0, r0, #8
    5a64:	18c3      	adds	r3, r0, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5a66:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    5a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    5a6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5a6c:	1b9b      	subs	r3, r3, r6
    5a6e:	18d3      	adds	r3, r2, r3
    5a70:	853b      	strh	r3, [r7, #40]	; 0x28
		ticks_slot_offset =
    5a72:	687a      	ldr	r2, [r7, #4]
    5a74:	683b      	ldr	r3, [r7, #0]
    5a76:	920e      	str	r2, [sp, #56]	; 0x38
    5a78:	429a      	cmp	r2, r3
    5a7a:	d200      	bcs.n	5a7e <event_connection_prepare+0x2fa>
    5a7c:	930e      	str	r3, [sp, #56]	; 0x38
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    5a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5a80:	4da0      	ldr	r5, [pc, #640]	; (5d04 <event_connection_prepare+0x580>)
    5a82:	435d      	muls	r5, r3
		if (conn->role) {
    5a84:	7f7b      	ldrb	r3, [r7, #29]
    5a86:	2b7f      	cmp	r3, #127	; 0x7f
    5a88:	d800      	bhi.n	5a8c <event_connection_prepare+0x308>
    5a8a:	e0e0      	b.n	5c4e <event_connection_prepare+0x4ca>
				conn->slave.window_widening_periodic_us *
    5a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				(((gc_lookup_ppm[_radio.sca] +
    5a8e:	4aa1      	ldr	r2, [pc, #644]	; (5d14 <event_connection_prepare+0x590>)
				conn->slave.window_widening_periodic_us *
    5a90:	435e      	muls	r6, r3
			conn->slave.window_widening_prepare_us -=
    5a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5a94:	49a0      	ldr	r1, [pc, #640]	; (5d18 <event_connection_prepare+0x594>)
			conn->slave.window_widening_prepare_us -=
    5a96:	1b9e      	subs	r6, r3, r6
				(((gc_lookup_ppm[_radio.sca] +
    5a98:	4ba0      	ldr	r3, [pc, #640]	; (5d1c <event_connection_prepare+0x598>)
    5a9a:	33ff      	adds	r3, #255	; 0xff
    5a9c:	7f5b      	ldrb	r3, [r3, #29]
    5a9e:	005b      	lsls	r3, r3, #1
    5aa0:	5a98      	ldrh	r0, [r3, r2]
				   gc_lookup_ppm[conn->slave.sca]) *
    5aa2:	003b      	movs	r3, r7
    5aa4:	3338      	adds	r3, #56	; 0x38
    5aa6:	781b      	ldrb	r3, [r3, #0]
    5aa8:	06db      	lsls	r3, r3, #27
    5aaa:	0f5b      	lsrs	r3, r3, #29
    5aac:	005b      	lsls	r3, r3, #1
    5aae:	5a9b      	ldrh	r3, [r3, r2]
				(((gc_lookup_ppm[_radio.sca] +
    5ab0:	18c0      	adds	r0, r0, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    5ab2:	4368      	muls	r0, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5ab4:	4b9a      	ldr	r3, [pc, #616]	; (5d20 <event_connection_prepare+0x59c>)
    5ab6:	18c0      	adds	r0, r0, r3
    5ab8:	f7fa fb86 	bl	1c8 <__aeabi_uidiv>
				conn->llcp.conn_upd.win_size * 1250;
    5abc:	003a      	movs	r2, r7
				(conn_interval_us >> 1) - RADIO_TIFS;
    5abe:	086b      	lsrs	r3, r5, #1
    5ac0:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_periodic_us =
    5ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    5ac4:	643b      	str	r3, [r7, #64]	; 0x40
				conn->llcp.conn_upd.win_size * 1250;
    5ac6:	3270      	adds	r2, #112	; 0x70
    5ac8:	7812      	ldrb	r2, [r2, #0]
    5aca:	498e      	ldr	r1, [pc, #568]	; (5d04 <event_connection_prepare+0x580>)
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5acc:	0004      	movs	r4, r0
				conn->llcp.conn_upd.win_size * 1250;
    5ace:	434a      	muls	r2, r1
			conn->slave.window_size_prepare_us =
    5ad0:	64fa      	str	r2, [r7, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    5ad2:	2200      	movs	r2, #0
				conn->slave.window_widening_periodic_us *
    5ad4:	980d      	ldr	r0, [sp, #52]	; 0x34
			conn->slave.ticks_to_offset = 0;
    5ad6:	65ba      	str	r2, [r7, #88]	; 0x58
				conn->slave.window_widening_periodic_us *
    5ad8:	4360      	muls	r0, r4
			conn->slave.window_widening_prepare_us +=
    5ada:	1836      	adds	r6, r6, r0
			if (conn->slave.window_widening_prepare_us >
    5adc:	42b3      	cmp	r3, r6
    5ade:	d200      	bcs.n	5ae2 <event_connection_prepare+0x35e>
    5ae0:	e0b3      	b.n	5c4a <event_connection_prepare+0x4c6>
			conn->slave.window_widening_prepare_us +=
    5ae2:	647e      	str	r6, [r7, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5ae4:	4a8f      	ldr	r2, [pc, #572]	; (5d24 <event_connection_prepare+0x5a0>)
    5ae6:	2300      	movs	r3, #0
    5ae8:	2100      	movs	r1, #0
    5aea:	f7fa fc3d 	bl	368 <__aeabi_lmul>
    5aee:	4a88      	ldr	r2, [pc, #544]	; (5d10 <event_connection_prepare+0x58c>)
    5af0:	2307      	movs	r3, #7
    5af2:	f7fa fc19 	bl	328 <__aeabi_uldivmod>
    5af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5af8:	4982      	ldr	r1, [pc, #520]	; (5d04 <event_connection_prepare+0x580>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5afa:	1a1b      	subs	r3, r3, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5afc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5afe:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5b00:	f7fa fb62 	bl	1c8 <__aeabi_uidiv>
    5b04:	4b7f      	ldr	r3, [pc, #508]	; (5d04 <event_connection_prepare+0x580>)
    5b06:	4a87      	ldr	r2, [pc, #540]	; (5d24 <event_connection_prepare+0x5a0>)
    5b08:	4358      	muls	r0, r3
    5b0a:	2100      	movs	r1, #0
    5b0c:	2300      	movs	r3, #0
    5b0e:	f7fa fc2b 	bl	368 <__aeabi_lmul>
    5b12:	4a7f      	ldr	r2, [pc, #508]	; (5d10 <event_connection_prepare+0x58c>)
    5b14:	2307      	movs	r3, #7
    5b16:	f7fa fc07 	bl	328 <__aeabi_uldivmod>
    5b1a:	0200      	lsls	r0, r0, #8
    5b1c:	0a06      	lsrs	r6, r0, #8
			periodic_us -= conn->slave.window_widening_periodic_us;
    5b1e:	1b2c      	subs	r4, r5, r4
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5b20:	466b      	mov	r3, sp
    5b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5b24:	0029      	movs	r1, r5
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5b26:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
    5b28:	003b      	movs	r3, r7
    5b2a:	3364      	adds	r3, #100	; 0x64
    5b2c:	881b      	ldrh	r3, [r3, #0]
    5b2e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5b30:	003b      	movs	r3, r7
    5b32:	3366      	adds	r3, #102	; 0x66
    5b34:	8818      	ldrh	r0, [r3, #0]
    5b36:	4b74      	ldr	r3, [pc, #464]	; (5d08 <event_connection_prepare+0x584>)
    5b38:	4358      	muls	r0, r3
    5b3a:	1940      	adds	r0, r0, r5
    5b3c:	3801      	subs	r0, #1
    5b3e:	f7fa fb43 	bl	1c8 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5b42:	4b79      	ldr	r3, [pc, #484]	; (5d28 <event_connection_prepare+0x5a4>)
		conn->supervision_reload =
    5b44:	85f8      	strh	r0, [r7, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5b46:	0029      	movs	r1, r5
    5b48:	18e8      	adds	r0, r5, r3
    5b4a:	f7fa fb3d 	bl	1c8 <__aeabi_uidiv>
		if (!conn->llcp.conn_upd.is_internal) {
    5b4e:	003b      	movs	r3, r7
    5b50:	2204      	movs	r2, #4
		conn->procedure_reload =
    5b52:	8678      	strh	r0, [r7, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    5b54:	3360      	adds	r3, #96	; 0x60
    5b56:	781b      	ldrb	r3, [r3, #0]
    5b58:	4013      	ands	r3, r2
    5b5a:	d100      	bne.n	5b5e <event_connection_prepare+0x3da>
			conn->supervision_expire = 0;
    5b5c:	863b      	strh	r3, [r7, #48]	; 0x30
		mayfly_was_enabled =
    5b5e:	2101      	movs	r1, #1
    5b60:	2000      	movs	r0, #0
    5b62:	f003 fc18 	bl	9396 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5b66:	2200      	movs	r2, #0
		mayfly_was_enabled =
    5b68:	900d      	str	r0, [sp, #52]	; 0x34
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5b6a:	2101      	movs	r1, #1
    5b6c:	0010      	movs	r0, r2
    5b6e:	f7fc ff21 	bl	29b4 <mayfly_enable>
		ticker_status =
    5b72:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b74:	8c3a      	ldrh	r2, [r7, #32]
		ticker_status =
    5b76:	4b6d      	ldr	r3, [pc, #436]	; (5d2c <event_connection_prepare+0x5a8>)
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b78:	3207      	adds	r2, #7
		ticker_status =
    5b7a:	9300      	str	r3, [sp, #0]
    5b7c:	b2d2      	uxtb	r2, r2
    5b7e:	4b6c      	ldr	r3, [pc, #432]	; (5d30 <event_connection_prepare+0x5ac>)
    5b80:	0008      	movs	r0, r1
    5b82:	f7fd fd41 	bl	3608 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5b86:	2302      	movs	r3, #2
    5b88:	4398      	bics	r0, r3
    5b8a:	1e05      	subs	r5, r0, #0
    5b8c:	d000      	beq.n	5b90 <event_connection_prepare+0x40c>
    5b8e:	e602      	b.n	5796 <event_connection_prepare+0x12>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b90:	8c3b      	ldrh	r3, [r7, #32]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    5b92:	4a64      	ldr	r2, [pc, #400]	; (5d24 <event_connection_prepare+0x5a0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b94:	3307      	adds	r3, #7
    5b96:	b2db      	uxtb	r3, r3
    5b98:	930f      	str	r3, [sp, #60]	; 0x3c
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    5b9a:	0020      	movs	r0, r4
    5b9c:	2300      	movs	r3, #0
    5b9e:	0029      	movs	r1, r5
    5ba0:	f7fa fbe2 	bl	368 <__aeabi_lmul>
    5ba4:	4a5a      	ldr	r2, [pc, #360]	; (5d10 <event_connection_prepare+0x58c>)
    5ba6:	2307      	movs	r3, #7
    5ba8:	900a      	str	r0, [sp, #40]	; 0x28
    5baa:	910b      	str	r1, [sp, #44]	; 0x2c
    5bac:	f7fa fbbc 	bl	328 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bb0:	0204      	lsls	r4, r0, #8
    5bb2:	0a24      	lsrs	r4, r4, #8
				     HAL_TICKER_REMAINDER(periodic_us),
    5bb4:	4a56      	ldr	r2, [pc, #344]	; (5d10 <event_connection_prepare+0x58c>)
    5bb6:	2307      	movs	r3, #7
    5bb8:	0020      	movs	r0, r4
    5bba:	0029      	movs	r1, r5
    5bbc:	f7fa fbd4 	bl	368 <__aeabi_lmul>
    5bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5bc4:	1a12      	subs	r2, r2, r0
    5bc6:	418b      	sbcs	r3, r1
    5bc8:	0010      	movs	r0, r2
    5bca:	22fa      	movs	r2, #250	; 0xfa
    5bcc:	0019      	movs	r1, r3
    5bce:	0092      	lsls	r2, r2, #2
    5bd0:	2300      	movs	r3, #0
    5bd2:	f7fa fba9 	bl	328 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bd6:	68fa      	ldr	r2, [r7, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    5bd8:	0001      	movs	r1, r0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bda:	4694      	mov	ip, r2
    5bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5bde:	7f78      	ldrb	r0, [r7, #29]
    5be0:	4463      	add	r3, ip
    5be2:	4a54      	ldr	r2, [pc, #336]	; (5d34 <event_connection_prepare+0x5b0>)
    5be4:	287f      	cmp	r0, #127	; 0x7f
    5be6:	d800      	bhi.n	5bea <event_connection_prepare+0x466>
    5be8:	4a53      	ldr	r2, [pc, #332]	; (5d38 <event_connection_prepare+0x5b4>)
		ticker_status =
    5bea:	4854      	ldr	r0, [pc, #336]	; (5d3c <event_connection_prepare+0x5b8>)
    5bec:	9205      	str	r2, [sp, #20]
    5bee:	9008      	str	r0, [sp, #32]
    5bf0:	484f      	ldr	r0, [pc, #316]	; (5d30 <event_connection_prepare+0x5ac>)
    5bf2:	9304      	str	r3, [sp, #16]
    5bf4:	9007      	str	r0, [sp, #28]
    5bf6:	2000      	movs	r0, #0
    5bf8:	9102      	str	r1, [sp, #8]
    5bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5bfc:	9706      	str	r7, [sp, #24]
    5bfe:	9003      	str	r0, [sp, #12]
    5c00:	9401      	str	r4, [sp, #4]
    5c02:	9600      	str	r6, [sp, #0]
    5c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5c06:	0001      	movs	r1, r0
    5c08:	f7fd fc6c 	bl	34e4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c0c:	2302      	movs	r3, #2
    5c0e:	4398      	bics	r0, r3
    5c10:	d000      	beq.n	5c14 <event_connection_prepare+0x490>
    5c12:	e5c0      	b.n	5796 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    5c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c16:	2b00      	cmp	r3, #0
    5c18:	d003      	beq.n	5c22 <event_connection_prepare+0x49e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5c1a:	2201      	movs	r2, #1
    5c1c:	0011      	movs	r1, r2
    5c1e:	f7fc fec9 	bl	29b4 <mayfly_enable>
}
    5c22:	b011      	add	sp, #68	; 0x44
    5c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5c26:	990a      	ldr	r1, [sp, #40]	; 0x28
    5c28:	0020      	movs	r0, r4
    5c2a:	f7fa fb11 	bl	250 <__aeabi_uidivmod>
    5c2e:	2324      	movs	r3, #36	; 0x24
    5c30:	b288      	uxth	r0, r1
    5c32:	4a36      	ldr	r2, [pc, #216]	; (5d0c <event_connection_prepare+0x588>)
    5c34:	33ff      	adds	r3, #255	; 0xff
    5c36:	2100      	movs	r1, #0
    5c38:	f7fa fb96 	bl	368 <__aeabi_lmul>
    5c3c:	2307      	movs	r3, #7
    5c3e:	4a34      	ldr	r2, [pc, #208]	; (5d10 <event_connection_prepare+0x58c>)
    5c40:	f7fa fb72 	bl	328 <__aeabi_uldivmod>
    5c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c46:	1a1b      	subs	r3, r3, r0
    5c48:	e70d      	b.n	5a66 <event_connection_prepare+0x2e2>
				conn->slave.window_widening_prepare_us =
    5c4a:	647b      	str	r3, [r7, #68]	; 0x44
    5c4c:	e74a      	b.n	5ae4 <event_connection_prepare+0x360>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5c4e:	4a35      	ldr	r2, [pc, #212]	; (5d24 <event_connection_prepare+0x5a0>)
    5c50:	2300      	movs	r3, #0
    5c52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    5c54:	2100      	movs	r1, #0
    5c56:	f7fa fb87 	bl	368 <__aeabi_lmul>
    5c5a:	4a2d      	ldr	r2, [pc, #180]	; (5d10 <event_connection_prepare+0x58c>)
    5c5c:	2307      	movs	r3, #7
    5c5e:	f7fa fb63 	bl	328 <__aeabi_uldivmod>
    5c62:	0200      	lsls	r0, r0, #8
    5c64:	0a00      	lsrs	r0, r0, #8
			ticks_win_offset += 1;
    5c66:	1c46      	adds	r6, r0, #1
		periodic_us = conn_interval_us;
    5c68:	002c      	movs	r4, r5
    5c6a:	e759      	b.n	5b20 <event_connection_prepare+0x39c>
	if (conn->llcp.chan_map.initiate) {
    5c6c:	003b      	movs	r3, r7
    5c6e:	3360      	adds	r3, #96	; 0x60
    5c70:	930d      	str	r3, [sp, #52]	; 0x34
    5c72:	781b      	ldrb	r3, [r3, #0]
    5c74:	2b00      	cmp	r3, #0
    5c76:	d024      	beq.n	5cc2 <event_connection_prepare+0x53e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5c78:	0020      	movs	r0, r4
    5c7a:	3051      	adds	r0, #81	; 0x51
    5c7c:	30ff      	adds	r0, #255	; 0xff
    5c7e:	f7fc fe07 	bl	2890 <mem_acquire>
    5c82:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    5c84:	d100      	bne.n	5c88 <event_connection_prepare+0x504>
    5c86:	e62b      	b.n	58e0 <event_connection_prepare+0x15c>
			conn->llcp.chan_map.initiate = 0;
    5c88:	2300      	movs	r3, #0
			conn->llcp.chan_map.instant =
    5c8a:	003d      	movs	r5, r7
			conn->llcp.chan_map.initiate = 0;
    5c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			conn->llcp.chan_map.instant =
    5c8e:	3566      	adds	r5, #102	; 0x66
			conn->llcp.chan_map.initiate = 0;
    5c90:	7013      	strb	r3, [r2, #0]
				event_counter + conn->latency + 6;
    5c92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    5c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5c96:	3306      	adds	r3, #6
    5c98:	18d3      	adds	r3, r2, r3
			conn->llcp.chan_map.instant =
    5c9a:	802b      	strh	r3, [r5, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5c9c:	2303      	movs	r3, #3
    5c9e:	7902      	ldrb	r2, [r0, #4]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    5ca0:	0039      	movs	r1, r7
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5ca2:	4313      	orrs	r3, r2
    5ca4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    5ca6:	2308      	movs	r3, #8
    5ca8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5caa:	3b07      	subs	r3, #7
    5cac:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    5cae:	2205      	movs	r2, #5
    5cb0:	3008      	adds	r0, #8
    5cb2:	3161      	adds	r1, #97	; 0x61
    5cb4:	f7fa fcd8 	bl	668 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    5cb8:	782b      	ldrb	r3, [r5, #0]
    5cba:	7363      	strb	r3, [r4, #13]
    5cbc:	786b      	ldrb	r3, [r5, #1]
    5cbe:	73a3      	strb	r3, [r4, #14]
    5cc0:	e60a      	b.n	58d8 <event_connection_prepare+0x154>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    5cc2:	003b      	movs	r3, r7
    5cc4:	3366      	adds	r3, #102	; 0x66
    5cc6:	881b      	ldrh	r3, [r3, #0]
    5cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5cca:	1ad3      	subs	r3, r2, r3
    5ccc:	041b      	lsls	r3, r3, #16
    5cce:	d500      	bpl.n	5cd2 <event_connection_prepare+0x54e>
    5cd0:	e606      	b.n	58e0 <event_connection_prepare+0x15c>
		memcpy(&conn->data_chan_map[0],
    5cd2:	003c      	movs	r4, r7
    5cd4:	0039      	movs	r1, r7
		conn->llcp_ack = conn->llcp_req;
    5cd6:	7833      	ldrb	r3, [r6, #0]
		memcpy(&conn->data_chan_map[0],
    5cd8:	3417      	adds	r4, #23
		conn->llcp_ack = conn->llcp_req;
    5cda:	702b      	strb	r3, [r5, #0]
		memcpy(&conn->data_chan_map[0],
    5cdc:	2205      	movs	r2, #5
    5cde:	3161      	adds	r1, #97	; 0x61
    5ce0:	0020      	movs	r0, r4
    5ce2:	f7fa fcc1 	bl	668 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    5ce6:	2105      	movs	r1, #5
    5ce8:	0020      	movs	r0, r4
    5cea:	f7fc ff69 	bl	2bc0 <util_ones_count_get>
		conn->data_chan_count =
    5cee:	223f      	movs	r2, #63	; 0x3f
    5cf0:	0003      	movs	r3, r0
    5cf2:	7f78      	ldrb	r0, [r7, #29]
    5cf4:	4013      	ands	r3, r2
    5cf6:	4390      	bics	r0, r2
    5cf8:	4318      	orrs	r0, r3
		conn->chm_update = 1;
    5cfa:	2301      	movs	r3, #1
		conn->data_chan_count =
    5cfc:	7778      	strb	r0, [r7, #29]
		conn->chm_update = 1;
    5cfe:	773b      	strb	r3, [r7, #28]
    5d00:	e5ee      	b.n	58e0 <event_connection_prepare+0x15c>
    5d02:	46c0      	nop			; (mov r8, r8)
    5d04:	000004e2 	.word	0x000004e2
    5d08:	00002710 	.word	0x00002710
    5d0c:	09ce5400 	.word	0x09ce5400
    5d10:	1afd498d 	.word	0x1afd498d
    5d14:	0000b1b6 	.word	0x0000b1b6
    5d18:	000f4240 	.word	0x000f4240
    5d1c:	20000258 	.word	0x20000258
    5d20:	000f423f 	.word	0x000f423f
    5d24:	3b9aca00 	.word	0x3b9aca00
    5d28:	026259ff 	.word	0x026259ff
    5d2c:	00001aa1 	.word	0x00001aa1
    5d30:	000050b1 	.word	0x000050b1
    5d34:	00005e55 	.word	0x00005e55
    5d38:	00005e4d 	.word	0x00005e4d
    5d3c:	00001ab1 	.word	0x00001ab1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5d40:	0020      	movs	r0, r4
    5d42:	3051      	adds	r0, #81	; 0x51
    5d44:	30ff      	adds	r0, #255	; 0xff
    5d46:	f7fc fda3 	bl	2890 <mem_acquire>
    5d4a:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    5d4c:	d100      	bne.n	5d50 <event_connection_prepare+0x5cc>
    5d4e:	e5c7      	b.n	58e0 <event_connection_prepare+0x15c>
		conn->llcp_ack = conn->llcp_req;
    5d50:	7833      	ldrb	r3, [r6, #0]
    5d52:	702b      	strb	r3, [r5, #0]
		conn->llcp_features = RADIO_BLE_FEAT;
    5d54:	003d      	movs	r5, r7
    5d56:	4b3c      	ldr	r3, [pc, #240]	; (5e48 <event_connection_prepare+0x6c4>)
    5d58:	358c      	adds	r5, #140	; 0x8c
    5d5a:	602b      	str	r3, [r5, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5d5c:	2303      	movs	r3, #3
    5d5e:	7902      	ldrb	r2, [r0, #4]
    5d60:	4313      	orrs	r3, r2
    5d62:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    5d64:	2309      	movs	r3, #9
		pdu_ctrl_tx->llctrl.opcode =
    5d66:	7f7a      	ldrb	r2, [r7, #29]
		pdu_ctrl_tx->len =
    5d68:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    5d6a:	3b01      	subs	r3, #1
    5d6c:	2a7f      	cmp	r2, #127	; 0x7f
    5d6e:	d900      	bls.n	5d72 <event_connection_prepare+0x5ee>
    5d70:	3306      	adds	r3, #6
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5d72:	0020      	movs	r0, r4
		pdu_ctrl_tx->llctrl.opcode =
    5d74:	71e3      	strb	r3, [r4, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5d76:	2208      	movs	r2, #8
    5d78:	2100      	movs	r1, #0
    5d7a:	3008      	adds	r0, #8
    5d7c:	f7fa fc9e 	bl	6bc <memset>
		ctrl_tx_enqueue(conn, node_tx);
    5d80:	0021      	movs	r1, r4
			conn->llcp_features & 0xFF;
    5d82:	682b      	ldr	r3, [r5, #0]
			(conn->llcp_features >> 8) & 0xFF;
    5d84:	0a1a      	lsrs	r2, r3, #8
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    5d86:	7223      	strb	r3, [r4, #8]
			(conn->llcp_features >> 16) & 0xFF;
    5d88:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    5d8a:	7262      	strb	r2, [r4, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    5d8c:	72a3      	strb	r3, [r4, #10]
			ctrl_tx_enqueue(conn, node_tx);
    5d8e:	0038      	movs	r0, r7
    5d90:	f7ff fc6a 	bl	5668 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    5d94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    5d96:	86bb      	strh	r3, [r7, #52]	; 0x34
    5d98:	e5a2      	b.n	58e0 <event_connection_prepare+0x15c>
	if (conn->llcp_version.tx == 0) {
    5d9a:	003b      	movs	r3, r7
    5d9c:	2201      	movs	r2, #1
    5d9e:	3390      	adds	r3, #144	; 0x90
    5da0:	930d      	str	r3, [sp, #52]	; 0x34
    5da2:	781b      	ldrb	r3, [r3, #0]
    5da4:	4213      	tst	r3, r2
    5da6:	d123      	bne.n	5df0 <event_connection_prepare+0x66c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5da8:	0020      	movs	r0, r4
    5daa:	3051      	adds	r0, #81	; 0x51
    5dac:	30ff      	adds	r0, #255	; 0xff
    5dae:	f7fc fd6f 	bl	2890 <mem_acquire>
    5db2:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    5db4:	d100      	bne.n	5db8 <event_connection_prepare+0x634>
    5db6:	e593      	b.n	58e0 <event_connection_prepare+0x15c>
			conn->llcp_ack = conn->llcp_req;
    5db8:	003b      	movs	r3, r7
    5dba:	335c      	adds	r3, #92	; 0x5c
    5dbc:	781a      	ldrb	r2, [r3, #0]
    5dbe:	705a      	strb	r2, [r3, #1]
			conn->llcp_version.tx = 1;
    5dc0:	2201      	movs	r2, #1
    5dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5dc4:	781b      	ldrb	r3, [r3, #0]
    5dc6:	4313      	orrs	r3, r2
    5dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5dca:	7013      	strb	r3, [r2, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5dcc:	2303      	movs	r3, #3
    5dce:	7902      	ldrb	r2, [r0, #4]
    5dd0:	4313      	orrs	r3, r2
    5dd2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    5dd4:	2306      	movs	r3, #6
    5dd6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5dd8:	18db      	adds	r3, r3, r3
    5dda:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    5ddc:	3b03      	subs	r3, #3
    5dde:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    5de0:	3b18      	subs	r3, #24
    5de2:	7243      	strb	r3, [r0, #9]
    5de4:	3314      	adds	r3, #20
    5de6:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    5de8:	3b06      	subs	r3, #6
    5dea:	72c3      	strb	r3, [r0, #11]
    5dec:	7303      	strb	r3, [r0, #12]
    5dee:	e7ce      	b.n	5d8e <event_connection_prepare+0x60a>
	} else if (conn->llcp_version.rx != 0) {
    5df0:	2002      	movs	r0, #2
    5df2:	4203      	tst	r3, r0
    5df4:	d100      	bne.n	5df8 <event_connection_prepare+0x674>
    5df6:	e4ce      	b.n	5796 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    5df8:	7833      	ldrb	r3, [r6, #0]
    5dfa:	702b      	strb	r3, [r5, #0]
		node_rx = packet_rx_reserve_get(2);
    5dfc:	f7fe faa8 	bl	4350 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    5e00:	2800      	cmp	r0, #0
    5e02:	d100      	bne.n	5e06 <event_connection_prepare+0x682>
    5e04:	e4c7      	b.n	5796 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    5e06:	8c3b      	ldrh	r3, [r7, #32]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5e08:	7a02      	ldrb	r2, [r0, #8]
		node_rx->hdr.handle = conn->handle;
    5e0a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    5e0c:	2301      	movs	r3, #1
    5e0e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5e10:	2303      	movs	r3, #3
    5e12:	4313      	orrs	r3, r2
    5e14:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    5e16:	2306      	movs	r3, #6
    5e18:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    5e1a:	18db      	adds	r3, r3, r3
    5e1c:	72c3      	strb	r3, [r0, #11]
			conn->llcp_version.version_number;
    5e1e:	003b      	movs	r3, r7
    5e20:	3391      	adds	r3, #145	; 0x91
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    5e22:	781b      	ldrb	r3, [r3, #0]
    5e24:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.company_id;
    5e26:	003b      	movs	r3, r7
    5e28:	3392      	adds	r3, #146	; 0x92
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    5e2a:	781a      	ldrb	r2, [r3, #0]
    5e2c:	7342      	strb	r2, [r0, #13]
    5e2e:	785b      	ldrb	r3, [r3, #1]
    5e30:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.sub_version_number;
    5e32:	003b      	movs	r3, r7
    5e34:	3394      	adds	r3, #148	; 0x94
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    5e36:	781a      	ldrb	r2, [r3, #0]
    5e38:	73c2      	strb	r2, [r0, #15]
    5e3a:	785b      	ldrb	r3, [r3, #1]
    5e3c:	7403      	strb	r3, [r0, #16]
		packet_rx_enqueue();
    5e3e:	f7fe fe09 	bl	4a54 <packet_rx_enqueue>
    5e42:	e54d      	b.n	58e0 <event_connection_prepare+0x15c>
				conn->procedure_expire++;
    5e44:	3301      	adds	r3, #1
    5e46:	e571      	b.n	592c <event_connection_prepare+0x1a8>
    5e48:	0001400c 	.word	0x0001400c

00005e4c <event_master_prepare>:
{
    5e4c:	b510      	push	{r4, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    5e4e:	f7ff fc99 	bl	5784 <event_connection_prepare>
}
    5e52:	bd10      	pop	{r4, pc}

00005e54 <event_slave_prepare>:
    5e54:	b510      	push	{r4, lr}
    5e56:	f7ff fc95 	bl	5784 <event_connection_prepare>
    5e5a:	bd10      	pop	{r4, pc}

00005e5c <connection_configure>:
{
    5e5c:	b510      	push	{r4, lr}
    5e5e:	0004      	movs	r4, r0
	radio_reset();
    5e60:	f002 ff5a 	bl	8d18 <radio_reset>
	radio_tx_power_set(0);
    5e64:	2000      	movs	r0, #0
    5e66:	f002 ff73 	bl	8d50 <radio_tx_power_set>
	radio_isr_set(isr);
    5e6a:	4809      	ldr	r0, [pc, #36]	; (5e90 <connection_configure+0x34>)
    5e6c:	f002 ff3a 	bl	8ce4 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    5e70:	0020      	movs	r0, r4
    5e72:	3010      	adds	r0, #16
    5e74:	f002 ff90 	bl	8d98 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
    5e78:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    5e7a:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    5e7c:	0409      	lsls	r1, r1, #16
			     ((u32_t)conn->crc_init[1] << 8) |
    5e7e:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    5e80:	4319      	orrs	r1, r3
			     ((u32_t)conn->crc_init[0])));
    5e82:	7d23      	ldrb	r3, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5e84:	4803      	ldr	r0, [pc, #12]	; (5e94 <connection_configure+0x38>)
    5e86:	4319      	orrs	r1, r3
    5e88:	f003 f81a 	bl	8ec0 <radio_crc_configure>
}
    5e8c:	bd10      	pop	{r4, pc}
    5e8e:	46c0      	nop			; (mov r8, r8)
    5e90:	000060dd 	.word	0x000060dd
    5e94:	0000065b 	.word	0x0000065b

00005e98 <event_slave>:
{
    5e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    5e9a:	4e58      	ldr	r6, [pc, #352]	; (5ffc <event_slave+0x164>)
{
    5e9c:	9000      	str	r0, [sp, #0]
	LL_ASSERT(_radio.role == ROLE_NONE);
    5e9e:	7bf5      	ldrb	r5, [r6, #15]
{
    5ea0:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    5ea2:	b2ed      	uxtb	r5, r5
    5ea4:	2d00      	cmp	r5, #0
    5ea6:	d002      	beq.n	5eae <event_slave+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5ea8:	b662      	cpsie	i
    5eaa:	2004      	movs	r0, #4
    5eac:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    5eae:	7b33      	ldrb	r3, [r6, #12]
    5eb0:	8c22      	ldrh	r2, [r4, #32]
    5eb2:	b2db      	uxtb	r3, r3
    5eb4:	3207      	adds	r2, #7
    5eb6:	4293      	cmp	r3, r2
    5eb8:	d1f6      	bne.n	5ea8 <event_slave+0x10>
	_radio.role = ROLE_SLAVE;
    5eba:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    5ebc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    5ebe:	73f2      	strb	r2, [r6, #15]
	_radio.ticker_id_prepare = 0;
    5ec0:	7335      	strb	r5, [r6, #12]
	_radio.ticker_id_event =
    5ec2:	7373      	strb	r3, [r6, #13]
	_radio.ticks_anchor = ticks_at_expire;
    5ec4:	9b00      	ldr	r3, [sp, #0]
	_radio.conn_curr = conn;
    5ec6:	0037      	movs	r7, r6
	_radio.ticks_anchor = ticks_at_expire;
    5ec8:	6073      	str	r3, [r6, #4]
	_radio.packet_counter = 0;
    5eca:	0033      	movs	r3, r6
	_radio.state = STATE_RX;
    5ecc:	3a02      	subs	r2, #2
	_radio.packet_counter = 0;
    5ece:	33ff      	adds	r3, #255	; 0xff
	_radio.conn_curr = conn;
    5ed0:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
    5ed2:	7432      	strb	r2, [r6, #16]
	_radio.packet_counter = 0;
    5ed4:	755d      	strb	r5, [r3, #21]
	_radio.crc_expire = 0;
    5ed6:	759d      	strb	r5, [r3, #22]
	_radio.conn_curr = conn;
    5ed8:	617c      	str	r4, [r7, #20]
	conn->latency_event = conn->latency_prepare;
    5eda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	connection_configure(conn);
    5edc:	0020      	movs	r0, r4
	conn->latency_event = conn->latency_prepare;
    5ede:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    5ee0:	8525      	strh	r5, [r4, #40]	; 0x28
	connection_configure(conn);
    5ee2:	f7ff ffbb 	bl	5e5c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    5ee6:	2096      	movs	r0, #150	; 0x96
    5ee8:	f003 f8a0 	bl	902c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    5eec:	002b      	movs	r3, r5
    5eee:	002a      	movs	r2, r5
    5ef0:	0029      	movs	r1, r5
    5ef2:	0028      	movs	r0, r5
    5ef4:	f003 f810 	bl	8f18 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    5ef8:	2336      	movs	r3, #54	; 0x36
    5efa:	33ff      	adds	r3, #255	; 0xff
    5efc:	5cf3      	ldrb	r3, [r6, r3]
    5efe:	0026      	movs	r6, r4
    5f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5f02:	009b      	lsls	r3, r3, #2
    5f04:	5899      	ldr	r1, [r3, r2]
	rx_packet_set(conn, (void *)
    5f06:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    5f08:	3108      	adds	r1, #8
	rx_packet_set(conn, (void *)
    5f0a:	f7fe fceb 	bl	48e4 <rx_packet_set>
	if (conn->data_chan_sel) {
    5f0e:	7f63      	ldrb	r3, [r4, #29]
    5f10:	3617      	adds	r6, #23
    5f12:	069d      	lsls	r5, r3, #26
    5f14:	065b      	lsls	r3, r3, #25
    5f16:	d54a      	bpl.n	5fae <event_slave+0x116>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    5f18:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    5f1a:	0eab      	lsrs	r3, r5, #26
    5f1c:	3801      	subs	r0, #1
    5f1e:	8be1      	ldrh	r1, [r4, #30]
    5f20:	b280      	uxth	r0, r0
    5f22:	0032      	movs	r2, r6
    5f24:	f7ff faea 	bl	54fc <chan_sel_2>
	chan_set(data_chan_use);
    5f28:	f7fe feb6 	bl	4c98 <chan_set>
	conn->slave.window_widening_event_us +=
    5f2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5f2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5f30:	189b      	adds	r3, r3, r2
	conn->slave.window_widening_prepare_us = 0;
    5f32:	2200      	movs	r2, #0
    5f34:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    5f36:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    5f38:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    5f3a:	4293      	cmp	r3, r2
    5f3c:	d900      	bls.n	5f40 <event_slave+0xa8>
		conn->slave.window_widening_event_us =
    5f3e:	64a2      	str	r2, [r4, #72]	; 0x48
	conn->slave.window_size_prepare_us = 0;
    5f40:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
    5f42:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5f44:	6d23      	ldr	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5f46:	4f2d      	ldr	r7, [pc, #180]	; (5ffc <event_slave+0x164>)
    5f48:	9900      	ldr	r1, [sp, #0]
	conn->slave.window_size_event_us +=
    5f4a:	189b      	adds	r3, r3, r2
    5f4c:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5f4e:	68ba      	ldr	r2, [r7, #8]
    5f50:	3109      	adds	r1, #9
	conn->slave.window_size_prepare_us = 0;
    5f52:	64e5      	str	r5, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5f54:	0028      	movs	r0, r5
    5f56:	f003 f871 	bl	903c <radio_tmr_start>
    5f5a:	9001      	str	r0, [sp, #4]
	radio_tmr_aa_capture();
    5f5c:	f003 f8ea 	bl	9134 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    5f60:	0028      	movs	r0, r5
    5f62:	f003 f911 	bl	9188 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
    5f66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5f68:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f6a:	005e      	lsls	r6, r3, #1
    5f6c:	3078      	adds	r0, #120	; 0x78
    5f6e:	1836      	adds	r6, r6, r0
	hcto += radio_rx_ready_delay_get(0, 0);
    5f70:	0029      	movs	r1, r5
    5f72:	0028      	movs	r0, r5
    5f74:	f002 ff68 	bl	8e48 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    5f78:	9b01      	ldr	r3, [sp, #4]
	hcto += radio_rx_chain_delay_get(0, 0);
    5f7a:	0029      	movs	r1, r5
	hcto += addr_us_get(0);
    5f7c:	199e      	adds	r6, r3, r6
    5f7e:	1836      	adds	r6, r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    5f80:	0028      	movs	r0, r5
    5f82:	f002 ff63 	bl	8e4c <radio_rx_chain_delay_get>
    5f86:	1830      	adds	r0, r6, r0
	radio_tmr_hcto_configure(hcto);
    5f88:	f003 f8aa 	bl	90e0 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    5f8c:	8c21      	ldrh	r1, [r4, #32]
    5f8e:	9a00      	ldr	r2, [sp, #0]
    5f90:	3107      	adds	r1, #7
    5f92:	b2c9      	uxtb	r1, r1
    5f94:	0020      	movs	r0, r4
    5f96:	f7ff faf1 	bl	557c <preempt_calc>
    5f9a:	42a8      	cmp	r0, r5
    5f9c:	d023      	beq.n	5fe6 <event_slave+0x14e>
		_radio.state = STATE_STOP;
    5f9e:	2304      	movs	r3, #4
    5fa0:	743b      	strb	r3, [r7, #16]
		radio_disable();
    5fa2:	f002 ff61 	bl	8e68 <radio_disable>
	packet_tx_enqueue(2);
    5fa6:	2002      	movs	r0, #2
    5fa8:	f7fe ff14 	bl	4dd4 <packet_tx_enqueue>
}
    5fac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    5fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    5fb0:	7fa0      	ldrb	r0, [r4, #30]
    5fb2:	3301      	adds	r3, #1
    5fb4:	4358      	muls	r0, r3
    5fb6:	7fe3      	ldrb	r3, [r4, #31]
    5fb8:	2125      	movs	r1, #37	; 0x25
    5fba:	18c0      	adds	r0, r0, r3
    5fbc:	f7fa f9a8 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5fc0:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    5fc2:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    5fc4:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5fc6:	08c3      	lsrs	r3, r0, #3
    5fc8:	5cf3      	ldrb	r3, [r6, r3]
    5fca:	4011      	ands	r1, r2
    5fcc:	410b      	asrs	r3, r1
    5fce:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    5fd0:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5fd2:	4213      	tst	r3, r2
    5fd4:	d1a8      	bne.n	5f28 <event_slave+0x90>
		chan_index = chan_next % chan_count;
    5fd6:	0029      	movs	r1, r5
    5fd8:	f7fa f93a 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    5fdc:	0030      	movs	r0, r6
		chan_index = chan_next % chan_count;
    5fde:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    5fe0:	f7fe f99b 	bl	431a <chan_sel_remap>
    5fe4:	e7a0      	b.n	5f28 <event_slave+0x90>
		ticker_status =
    5fe6:	0003      	movs	r3, r0
    5fe8:	4a05      	ldr	r2, [pc, #20]	; (6000 <event_slave+0x168>)
    5fea:	0001      	movs	r1, r0
    5fec:	f7fd fb70 	bl	36d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5ff0:	2302      	movs	r3, #2
    5ff2:	4398      	bics	r0, r3
    5ff4:	d000      	beq.n	5ff8 <event_slave+0x160>
    5ff6:	e757      	b.n	5ea8 <event_slave+0x10>
    5ff8:	e7d5      	b.n	5fa6 <event_slave+0x10e>
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	20000258 	.word	0x20000258
    6000:	0000485d 	.word	0x0000485d

00006004 <prepare_pdu_data_tx>:
	    conn->empty ||
    6004:	0003      	movs	r3, r0
{
    6006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6008:	0005      	movs	r5, r0
	    conn->empty ||
    600a:	33a8      	adds	r3, #168	; 0xa8
{
    600c:	9101      	str	r1, [sp, #4]
	    conn->empty ||
    600e:	7819      	ldrb	r1, [r3, #0]
    6010:	35ec      	adds	r5, #236	; 0xec
	if (/* empty packet */
    6012:	b24a      	sxtb	r2, r1
    6014:	2a00      	cmp	r2, #0
    6016:	db09      	blt.n	602c <prepare_pdu_data_tx+0x28>
	    !conn->pkt_tx_head ||
    6018:	682a      	ldr	r2, [r5, #0]
	    conn->empty ||
    601a:	2a00      	cmp	r2, #0
    601c:	d006      	beq.n	602c <prepare_pdu_data_tx+0x28>
    601e:	0006      	movs	r6, r0
    6020:	36f0      	adds	r6, #240	; 0xf0
	    !conn->pkt_tx_head ||
    6022:	0709      	lsls	r1, r1, #28
    6024:	d524      	bpl.n	6070 <prepare_pdu_data_tx+0x6c>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    6026:	6831      	ldr	r1, [r6, #0]
    6028:	428a      	cmp	r2, r1
    602a:	d021      	beq.n	6070 <prepare_pdu_data_tx+0x6c>
	conn->empty = 1;
    602c:	2280      	movs	r2, #128	; 0x80
    602e:	7819      	ldrb	r1, [r3, #0]
    6030:	4252      	negs	r2, r2
    6032:	430a      	orrs	r2, r1
    6034:	701a      	strb	r2, [r3, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6036:	f002 ff5f 	bl	8ef8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    603a:	2103      	movs	r1, #3
    603c:	7802      	ldrb	r2, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    603e:	0003      	movs	r3, r0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6040:	438a      	bics	r2, r1
    6042:	0011      	movs	r1, r2
    6044:	2201      	movs	r2, #1
    6046:	430a      	orrs	r2, r1
	pdu_data_tx->len = 0;
    6048:	2100      	movs	r1, #0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    604a:	7002      	strb	r2, [r0, #0]
	pdu_data_tx->len = 0;
    604c:	7041      	strb	r1, [r0, #1]
	if (conn->pkt_tx_head) {
    604e:	6828      	ldr	r0, [r5, #0]
    6050:	3110      	adds	r1, #16
    6052:	2800      	cmp	r0, #0
    6054:	d00a      	beq.n	606c <prepare_pdu_data_tx+0x68>
		pdu_data_tx->md = 1;
    6056:	430a      	orrs	r2, r1
		pdu_data_tx->md = 0;
    6058:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->rfu = 0;
    605a:	211f      	movs	r1, #31
    605c:	781a      	ldrb	r2, [r3, #0]
    605e:	400a      	ands	r2, r1
    6060:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->resv = 0;
    6062:	2200      	movs	r2, #0
    6064:	709a      	strb	r2, [r3, #2]
	*pdu_data_tx = _pdu_data_tx;
    6066:	9a01      	ldr	r2, [sp, #4]
    6068:	6013      	str	r3, [r2, #0]
}
    606a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    606c:	438a      	bics	r2, r1
    606e:	e7f3      	b.n	6058 <prepare_pdu_data_tx+0x54>
					conn->packet_tx_head_offset);
    6070:	0005      	movs	r5, r0
    6072:	35ff      	adds	r5, #255	; 0xff
    6074:	78af      	ldrb	r7, [r5, #2]
		if (!conn->packet_tx_head_len) {
    6076:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    6078:	1d13      	adds	r3, r2, #4
    607a:	19db      	adds	r3, r3, r7
		if (!conn->packet_tx_head_len) {
    607c:	2900      	cmp	r1, #0
    607e:	d101      	bne.n	6084 <prepare_pdu_data_tx+0x80>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    6080:	7859      	ldrb	r1, [r3, #1]
    6082:	7069      	strb	r1, [r5, #1]
		if (conn->packet_tx_head_offset) {
    6084:	2f00      	cmp	r7, #0
    6086:	d007      	beq.n	6098 <prepare_pdu_data_tx+0x94>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6088:	2403      	movs	r4, #3
    608a:	7819      	ldrb	r1, [r3, #0]
    608c:	43a1      	bics	r1, r4
    608e:	468c      	mov	ip, r1
    6090:	2101      	movs	r1, #1
    6092:	4664      	mov	r4, ip
    6094:	4321      	orrs	r1, r4
    6096:	7019      	strb	r1, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    6098:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx->md = 0;
    609a:	2510      	movs	r5, #16
		_pdu_data_tx->len = conn->packet_tx_head_len -
    609c:	1bc9      	subs	r1, r1, r7
		_pdu_data_tx->md = 0;
    609e:	781f      	ldrb	r7, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    60a0:	b2c9      	uxtb	r1, r1
		_pdu_data_tx->md = 0;
    60a2:	43af      	bics	r7, r5
		_pdu_data_tx->len = conn->packet_tx_head_len -
    60a4:	7059      	strb	r1, [r3, #1]
		_pdu_data_tx->md = 0;
    60a6:	701f      	strb	r7, [r3, #0]
		if (_pdu_data_tx->len > max_tx_octets) {
    60a8:	291b      	cmp	r1, #27
    60aa:	d904      	bls.n	60b6 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->len = max_tx_octets;
    60ac:	211b      	movs	r1, #27
    60ae:	7059      	strb	r1, [r3, #1]
			_pdu_data_tx->md = 1;
    60b0:	b2f9      	uxtb	r1, r7
    60b2:	430d      	orrs	r5, r1
    60b4:	701d      	strb	r5, [r3, #0]
		if (conn->pkt_tx_head->next) {
    60b6:	6811      	ldr	r1, [r2, #0]
    60b8:	2900      	cmp	r1, #0
    60ba:	d003      	beq.n	60c4 <prepare_pdu_data_tx+0xc0>
			_pdu_data_tx->md = 1;
    60bc:	2110      	movs	r1, #16
    60be:	781d      	ldrb	r5, [r3, #0]
    60c0:	4329      	orrs	r1, r5
    60c2:	7019      	strb	r1, [r3, #0]
		if (!conn->pkt_tx_ctrl &&
    60c4:	6831      	ldr	r1, [r6, #0]
    60c6:	2900      	cmp	r1, #0
    60c8:	d1c7      	bne.n	605a <prepare_pdu_data_tx+0x56>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
    60ca:	0001      	movs	r1, r0
    60cc:	31f8      	adds	r1, #248	; 0xf8
		if (!conn->pkt_tx_ctrl &&
    60ce:	6809      	ldr	r1, [r1, #0]
    60d0:	428a      	cmp	r2, r1
    60d2:	d0c2      	beq.n	605a <prepare_pdu_data_tx+0x56>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    60d4:	30f4      	adds	r0, #244	; 0xf4
    60d6:	6002      	str	r2, [r0, #0]
    60d8:	6032      	str	r2, [r6, #0]
    60da:	e7be      	b.n	605a <prepare_pdu_data_tx+0x56>

000060dc <isr>:
{
    60dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60de:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
    60e0:	f002 fedc 	bl	8e9c <radio_is_done>
    60e4:	b2c7      	uxtb	r7, r0
	if (trx_done) {
    60e6:	2f00      	cmp	r7, #0
    60e8:	d026      	beq.n	6138 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    60ea:	f002 fefb 	bl	8ee4 <radio_crc_is_valid>
    60ee:	b2c3      	uxtb	r3, r0
    60f0:	930e      	str	r3, [sp, #56]	; 0x38
		devmatch_ok = radio_filter_has_match();
    60f2:	f002 ff7b 	bl	8fec <radio_filter_has_match>
    60f6:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    60f8:	f002 ff80 	bl	8ffc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    60fc:	f003 f928 	bl	9350 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    6100:	f003 f912 	bl	9328 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    6104:	f002 ff32 	bl	8f6c <radio_rssi_is_ready>
    6108:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    610a:	f002 feb7 	bl	8e7c <radio_status_reset>
	radio_tmr_status_reset();
    610e:	f002 ff7d 	bl	900c <radio_tmr_status_reset>
	radio_filter_status_reset();
    6112:	f002 ff65 	bl	8fe0 <radio_filter_status_reset>
	radio_ar_status_reset();
    6116:	f003 f90f 	bl	9338 <radio_ar_status_reset>
	radio_rssi_status_reset();
    611a:	f002 ff21 	bl	8f60 <radio_rssi_status_reset>
	switch (_radio.state) {
    611e:	4c69      	ldr	r4, [pc, #420]	; (62c4 <isr+0x1e8>)
    6120:	7c23      	ldrb	r3, [r4, #16]
    6122:	2b05      	cmp	r3, #5
    6124:	d82b      	bhi.n	617e <isr+0xa2>
    6126:	0018      	movs	r0, r3
    6128:	f7fa f844 	bl	1b4 <__gnu_thumb1_case_uhi>
    612c:	007b0058 	.word	0x007b0058
    6130:	096a000a 	.word	0x096a000a
    6134:	096a096a 	.word	0x096a096a
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    6138:	003d      	movs	r5, r7
    613a:	003e      	movs	r6, r7
    613c:	970e      	str	r7, [sp, #56]	; 0x38
    613e:	e7e4      	b.n	610a <isr+0x2e>
	_radio.state = STATE_RX;
    6140:	2301      	movs	r3, #1
    6142:	7423      	strb	r3, [r4, #16]
	hcto = radio_tmr_tifs_base_get()
    6144:	f003 f852 	bl	91ec <radio_tmr_tifs_base_get>
    6148:	0005      	movs	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    614a:	2096      	movs	r0, #150	; 0x96
    614c:	f002 ff6e 	bl	902c <radio_tmr_tifs_set>
	switch (_radio.role) {
    6150:	7be0      	ldrb	r0, [r4, #15]
    6152:	3801      	subs	r0, #1
    6154:	2803      	cmp	r0, #3
    6156:	d812      	bhi.n	617e <isr+0xa2>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6158:	2300      	movs	r3, #0
    615a:	35c3      	adds	r5, #195	; 0xc3
    615c:	001a      	movs	r2, r3
    615e:	0019      	movs	r1, r3
	switch (_radio.role) {
    6160:	f7fa f814 	bl	18c <__gnu_thumb1_case_uqi>
    6164:	3e3e1e02 	.word	0x3e3e1e02
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6168:	0018      	movs	r0, r3
    616a:	f002 fed5 	bl	8f18 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    616e:	f002 fec7 	bl	8f00 <radio_pkt_scratch_get>
    6172:	f002 fe55 	bl	8e20 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6176:	f002 fe89 	bl	8e8c <radio_is_ready>
    617a:	1e06      	subs	r6, r0, #0
    617c:	d002      	beq.n	6184 <isr+0xa8>
		LL_ASSERT(0);
    617e:	b662      	cpsie	i
    6180:	2004      	movs	r0, #4
    6182:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    6184:	0001      	movs	r1, r0
    6186:	f002 fe61 	bl	8e4c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    618a:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    618c:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    618e:	0030      	movs	r0, r6
    6190:	f002 fe58 	bl	8e44 <radio_tx_chain_delay_get>
    6194:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    6196:	f002 ffa3 	bl	90e0 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    619a:	f003 f809 	bl	91b0 <radio_tmr_end_capture>
    619e:	e01d      	b.n	61dc <isr+0x100>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    61a0:	0018      	movs	r0, r3
    61a2:	f002 feb9 	bl	8f18 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    61a6:	2336      	movs	r3, #54	; 0x36
    61a8:	33ff      	adds	r3, #255	; 0xff
    61aa:	5ce3      	ldrb	r3, [r4, r3]
    61ac:	34fc      	adds	r4, #252	; 0xfc
    61ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
    61b0:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    61b2:	5898      	ldr	r0, [r3, r2]
    61b4:	3008      	adds	r0, #8
    61b6:	f002 fe33 	bl	8e20 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    61ba:	f002 fe67 	bl	8e8c <radio_is_ready>
    61be:	1e06      	subs	r6, r0, #0
    61c0:	d1dd      	bne.n	617e <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    61c2:	0001      	movs	r1, r0
    61c4:	f002 fe42 	bl	8e4c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    61c8:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    61ca:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    61cc:	0030      	movs	r0, r6
    61ce:	f002 fe39 	bl	8e44 <radio_tx_chain_delay_get>
    61d2:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    61d4:	f002 ff84 	bl	90e0 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    61d8:	f002 feae 	bl	8f38 <radio_rssi_measure>
}
    61dc:	b015      	add	sp, #84	; 0x54
    61de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    61e0:	0018      	movs	r0, r3
    61e2:	f002 fe99 	bl	8f18 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    61e6:	2336      	movs	r3, #54	; 0x36
    61e8:	33ff      	adds	r3, #255	; 0xff
    61ea:	5ce3      	ldrb	r3, [r4, r3]
    61ec:	34fc      	adds	r4, #252	; 0xfc
    61ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
    61f0:	009b      	lsls	r3, r3, #2
    61f2:	5899      	ldr	r1, [r3, r2]
		rx_packet_set(_radio.conn_curr,	(void *)
    61f4:	6960      	ldr	r0, [r4, #20]
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    61f6:	3108      	adds	r1, #8
		rx_packet_set(_radio.conn_curr,	(void *)
    61f8:	f7fe fb74 	bl	48e4 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    61fc:	f002 fe46 	bl	8e8c <radio_is_ready>
    6200:	1e06      	subs	r6, r0, #0
    6202:	d1bc      	bne.n	617e <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    6204:	0001      	movs	r1, r0
    6206:	f002 fe21 	bl	8e4c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    620a:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    620c:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    620e:	0030      	movs	r0, r6
    6210:	f002 fe18 	bl	8e44 <radio_tx_chain_delay_get>
    6214:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    6216:	f002 ff63 	bl	90e0 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    621a:	2001      	movs	r0, #1
    621c:	f7fe fdda 	bl	4dd4 <packet_tx_enqueue>
    6220:	e7dc      	b.n	61dc <isr+0x100>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6222:	2f00      	cmp	r7, #0
    6224:	d104      	bne.n	6230 <isr+0x154>
		_radio.state = STATE_CLOSE;
    6226:	2303      	movs	r3, #3
    6228:	7423      	strb	r3, [r4, #16]
		radio_disable();
    622a:	f002 fe1d 	bl	8e68 <radio_disable>
    622e:	e7d5      	b.n	61dc <isr+0x100>
	switch (_radio.role) {
    6230:	7be0      	ldrb	r0, [r4, #15]
    6232:	3801      	subs	r0, #1
    6234:	2803      	cmp	r0, #3
    6236:	d8a2      	bhi.n	617e <isr+0xa2>
    6238:	f7f9 ffbc 	bl	1b4 <__gnu_thumb1_case_uhi>
    623c:	02300004 	.word	0x02300004
    6240:	04c504c5 	.word	0x04c504c5
		if (crc_ok) {
    6244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6246:	2b00      	cmp	r3, #0
    6248:	d0ed      	beq.n	6226 <isr+0x14a>
	pdu_adv = (void *)radio_pkt_scratch_get();
    624a:	f002 fe59 	bl	8f00 <radio_pkt_scratch_get>
					[_radio.advertiser.adv_data.first][0];
    624e:	0023      	movs	r3, r4
    6250:	3374      	adds	r3, #116	; 0x74
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6252:	781a      	ldrb	r2, [r3, #0]
    6254:	2327      	movs	r3, #39	; 0x27
    6256:	4353      	muls	r3, r2
    6258:	3326      	adds	r3, #38	; 0x26
    625a:	18e3      	adds	r3, r4, r3
    625c:	930c      	str	r3, [sp, #48]	; 0x30
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    625e:	230f      	movs	r3, #15
    6260:	7802      	ldrb	r2, [r0, #0]
	pdu_adv = (void *)radio_pkt_scratch_get();
    6262:	0005      	movs	r5, r0
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6264:	4013      	ands	r3, r2
    6266:	2b03      	cmp	r3, #3
    6268:	d12e      	bne.n	62c8 <isr+0x1ec>
    626a:	7843      	ldrb	r3, [r0, #1]
    626c:	2b0c      	cmp	r3, #12
    626e:	d12b      	bne.n	62c8 <isr+0x1ec>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6270:	1da3      	adds	r3, r4, #6
    6272:	7fdb      	ldrb	r3, [r3, #31]
		(devmatch_ok)) &&
    6274:	065b      	lsls	r3, r3, #25
    6276:	d501      	bpl.n	627c <isr+0x1a0>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6278:	2e00      	cmp	r6, #0
    627a:	d025      	beq.n	62c8 <isr+0x1ec>
	return (adv->tx_addr == sr->rx_addr) &&
    627c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    627e:	09d2      	lsrs	r2, r2, #7
    6280:	781b      	ldrb	r3, [r3, #0]
    6282:	065b      	lsls	r3, r3, #25
    6284:	0fdb      	lsrs	r3, r3, #31
    6286:	4293      	cmp	r3, r2
    6288:	d11e      	bne.n	62c8 <isr+0x1ec>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    628a:	0029      	movs	r1, r5
    628c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    628e:	2206      	movs	r2, #6
    6290:	1c98      	adds	r0, r3, #2
    6292:	3108      	adds	r1, #8
    6294:	f7fa f9d5 	bl	642 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    6298:	2800      	cmp	r0, #0
    629a:	d115      	bne.n	62c8 <isr+0x1ec>
		_radio.state = STATE_CLOSE;
    629c:	2303      	movs	r3, #3
    629e:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    62a0:	f002 fe42 	bl	8f28 <radio_switch_complete_and_disable>
					[_radio.advertiser.scan_data.first][0]);
    62a4:	0023      	movs	r3, r4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    62a6:	2027      	movs	r0, #39	; 0x27
					[_radio.advertiser.scan_data.first][0]);
    62a8:	33c4      	adds	r3, #196	; 0xc4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	4358      	muls	r0, r3
    62ae:	3076      	adds	r0, #118	; 0x76
    62b0:	1820      	adds	r0, r4, r0
    62b2:	f002 fdbd 	bl	8e30 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    62b6:	f002 fde9 	bl	8e8c <radio_is_ready>
    62ba:	2800      	cmp	r0, #0
    62bc:	d100      	bne.n	62c0 <isr+0x1e4>
    62be:	e78d      	b.n	61dc <isr+0x100>
    62c0:	e75d      	b.n	617e <isr+0xa2>
    62c2:	46c0      	nop			; (mov r8, r8)
    62c4:	20000258 	.word	0x20000258
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    62c8:	210f      	movs	r1, #15
    62ca:	782a      	ldrb	r2, [r5, #0]
    62cc:	400a      	ands	r2, r1
    62ce:	2a05      	cmp	r2, #5
    62d0:	d1a9      	bne.n	6226 <isr+0x14a>
    62d2:	786b      	ldrb	r3, [r5, #1]
    62d4:	2b22      	cmp	r3, #34	; 0x22
    62d6:	d1a6      	bne.n	6226 <isr+0x14a>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    62d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    62da:	781b      	ldrb	r3, [r3, #0]
    62dc:	400b      	ands	r3, r1
    62de:	2b01      	cmp	r3, #1
    62e0:	d000      	beq.n	62e4 <isr+0x208>
    62e2:	e1ae      	b.n	6642 <isr+0x566>
		       isr_adv_ci_adva_check(adv, ci) &&
    62e4:	0029      	movs	r1, r5
    62e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    62e8:	f7fe fa7a 	bl	47e0 <isr_adv_ci_adva_check>
    62ec:	2100      	movs	r1, #0
    62ee:	4288      	cmp	r0, r1
    62f0:	d00f      	beq.n	6312 <isr+0x236>
	return (adv->rx_addr == ci->tx_addr) &&
    62f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    62f4:	781a      	ldrb	r2, [r3, #0]
    62f6:	782b      	ldrb	r3, [r5, #0]
    62f8:	09d2      	lsrs	r2, r2, #7
    62fa:	065b      	lsls	r3, r3, #25
    62fc:	0fdb      	lsrs	r3, r3, #31
    62fe:	429a      	cmp	r2, r3
    6300:	d107      	bne.n	6312 <isr+0x236>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    6302:	980c      	ldr	r0, [sp, #48]	; 0x30
    6304:	1ca9      	adds	r1, r5, #2
    6306:	2206      	movs	r2, #6
    6308:	3008      	adds	r0, #8
    630a:	f7fa f99a 	bl	642 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    630e:	4241      	negs	r1, r0
    6310:	4141      	adcs	r1, r0
		       isr_adv_ci_adva_check(adv, ci) &&
    6312:	0008      	movs	r0, r1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    6314:	2800      	cmp	r0, #0
    6316:	d086      	beq.n	6226 <isr+0x14a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6318:	23bb      	movs	r3, #187	; 0xbb
    631a:	005b      	lsls	r3, r3, #1
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    631c:	5ce3      	ldrb	r3, [r4, r3]
    631e:	2b00      	cmp	r3, #0
    6320:	d008      	beq.n	6334 <isr+0x258>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6322:	23ba      	movs	r3, #186	; 0xba
    6324:	2276      	movs	r2, #118	; 0x76
    6326:	005b      	lsls	r3, r3, #1
    6328:	32ff      	adds	r2, #255	; 0xff
    632a:	5ce3      	ldrb	r3, [r4, r3]
    632c:	5ca2      	ldrb	r2, [r4, r2]
    632e:	429a      	cmp	r2, r3
    6330:	d000      	beq.n	6334 <isr+0x258>
    6332:	e778      	b.n	6226 <isr+0x14a>
		   (_radio.advertiser.conn)) {
    6334:	0026      	movs	r6, r4
    6336:	36c8      	adds	r6, #200	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6338:	6833      	ldr	r3, [r6, #0]
    633a:	2b00      	cmp	r3, #0
    633c:	d100      	bne.n	6340 <isr+0x264>
    633e:	e772      	b.n	6226 <isr+0x14a>
			node_rx = packet_rx_reserve_get(4);
    6340:	2004      	movs	r0, #4
    6342:	f7fe f805 	bl	4350 <packet_rx_reserve_get>
    6346:	900b      	str	r0, [sp, #44]	; 0x2c
		if (!node_rx) {
    6348:	2800      	cmp	r0, #0
    634a:	d100      	bne.n	634e <isr+0x272>
    634c:	e76b      	b.n	6226 <isr+0x14a>
		_radio.state = STATE_STOP;
    634e:	2304      	movs	r3, #4
    6350:	7423      	strb	r3, [r4, #16]
		radio_disable();
    6352:	f002 fd89 	bl	8e68 <radio_disable>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6356:	2282      	movs	r2, #130	; 0x82
		_radio.advertiser.conn = NULL;
    6358:	2300      	movs	r3, #0
		conn = _radio.advertiser.conn;
    635a:	6837      	ldr	r7, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    635c:	34fc      	adds	r4, #252	; 0xfc
    635e:	68a1      	ldr	r1, [r4, #8]
    6360:	0052      	lsls	r2, r2, #1
    6362:	0038      	movs	r0, r7
		_radio.advertiser.conn = NULL;
    6364:	6033      	str	r3, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6366:	f7fc fac5 	bl	28f4 <mem_index_get>
		memcpy(&conn->crc_init[0],
    636a:	0029      	movs	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    636c:	8438      	strh	r0, [r7, #32]
		memcpy(&conn->crc_init[0],
    636e:	0038      	movs	r0, r7
    6370:	2203      	movs	r2, #3
    6372:	3112      	adds	r1, #18
    6374:	3014      	adds	r0, #20
		memcpy(&conn->access_addr[0],
    6376:	003e      	movs	r6, r7
		memcpy(&conn->crc_init[0],
    6378:	f7fa f976 	bl	668 <memcpy>
		memcpy(&conn->access_addr[0],
    637c:	0029      	movs	r1, r5
    637e:	3610      	adds	r6, #16
    6380:	2204      	movs	r2, #4
    6382:	310e      	adds	r1, #14
    6384:	0030      	movs	r0, r6
		memcpy(&conn->data_chan_map[0],
    6386:	003c      	movs	r4, r7
		memcpy(&conn->access_addr[0],
    6388:	f7fa f96e 	bl	668 <memcpy>
		memcpy(&conn->data_chan_map[0],
    638c:	0029      	movs	r1, r5
    638e:	3417      	adds	r4, #23
    6390:	2205      	movs	r2, #5
    6392:	311e      	adds	r1, #30
    6394:	0020      	movs	r0, r4
    6396:	f7fa f967 	bl	668 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    639a:	2105      	movs	r1, #5
    639c:	0020      	movs	r0, r4
    639e:	f7fc fc0f 	bl	2bc0 <util_ones_count_get>
		conn->data_chan_count =
    63a2:	223f      	movs	r2, #63	; 0x3f
    63a4:	0003      	movs	r3, r0
    63a6:	7f78      	ldrb	r0, [r7, #29]
    63a8:	4013      	ands	r3, r2
    63aa:	4390      	bics	r0, r2
    63ac:	4318      	orrs	r0, r3
    63ae:	7778      	strb	r0, [r7, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    63b0:	0038      	movs	r0, r7
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    63b2:	1d2b      	adds	r3, r5, #4
    63b4:	7fdb      	ldrb	r3, [r3, #31]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    63b6:	0031      	movs	r1, r6
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    63b8:	06db      	lsls	r3, r3, #27
    63ba:	0edb      	lsrs	r3, r3, #27
    63bc:	77bb      	strb	r3, [r7, #30]
			pdu_adv->connect_ind.interval;
    63be:	7e6b      	ldrb	r3, [r5, #25]
    63c0:	7e2a      	ldrb	r2, [r5, #24]
    63c2:	021b      	lsls	r3, r3, #8
    63c4:	4313      	orrs	r3, r2
			pdu_adv->connect_ind.interval * 1250;
    63c6:	4aa7      	ldr	r2, [pc, #668]	; (6664 <isr+0x588>)
		conn->conn_interval =
    63c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    63ca:	435a      	muls	r2, r3
    63cc:	920e      	str	r2, [sp, #56]	; 0x38
		conn->latency = pdu_adv->connect_ind.latency;
    63ce:	7eeb      	ldrb	r3, [r5, #27]
    63d0:	7eaa      	ldrb	r2, [r5, #26]
    63d2:	021b      	lsls	r3, r3, #8
    63d4:	4313      	orrs	r3, r2
    63d6:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    63d8:	2204      	movs	r2, #4
    63da:	3054      	adds	r0, #84	; 0x54
    63dc:	f7fa f944 	bl	668 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    63e0:	7f68      	ldrb	r0, [r5, #29]
    63e2:	7f2b      	ldrb	r3, [r5, #28]
    63e4:	0200      	lsls	r0, r0, #8
    63e6:	4303      	orrs	r3, r0
    63e8:	489f      	ldr	r0, [pc, #636]	; (6668 <isr+0x58c>)
		radio_le_conn_cmplt->role = 0x01;
    63ea:	2601      	movs	r6, #1
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    63ec:	4358      	muls	r0, r3
    63ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    63f0:	18c0      	adds	r0, r0, r3
    63f2:	0019      	movs	r1, r3
    63f4:	3801      	subs	r0, #1
    63f6:	f7f9 fee7 	bl	1c8 <__aeabi_uidiv>
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    63fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    63fc:	4a9b      	ldr	r2, [pc, #620]	; (666c <isr+0x590>)
    63fe:	0019      	movs	r1, r3
		conn->supervision_reload =
    6400:	85f8      	strh	r0, [r7, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6402:	1898      	adds	r0, r3, r2
    6404:	f7f9 fee0 	bl	1c8 <__aeabi_uidiv>
		node_rx->hdr.handle = conn->handle;
    6408:	8c3b      	ldrh	r3, [r7, #32]
    640a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    640c:	8678      	strh	r0, [r7, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    640e:	80d3      	strh	r3, [r2, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		radio_le_conn_cmplt->status = 0x00;
    6412:	2100      	movs	r1, #0
    6414:	001c      	movs	r4, r3
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6416:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6418:	0020      	movs	r0, r4
		radio_le_conn_cmplt->status = 0x00;
    641a:	72d9      	strb	r1, [r3, #11]
		radio_le_conn_cmplt->role = 0x01;
    641c:	731e      	strb	r6, [r3, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    641e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6420:	782b      	ldrb	r3, [r5, #0]
			       &pdu_adv->connect_ind.init_addr[0],
    6422:	1ca9      	adds	r1, r5, #2
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6424:	065b      	lsls	r3, r3, #25
    6426:	0fdb      	lsrs	r3, r3, #31
    6428:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    642a:	300e      	adds	r0, #14
    642c:	f7fa f91c 	bl	668 <memcpy>
			pdu_adv->connect_ind.interval;
    6430:	7e6b      	ldrb	r3, [r5, #25]
    6432:	7e2a      	ldrb	r2, [r5, #24]
    6434:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->interval =
    6436:	4313      	orrs	r3, r2
    6438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    643a:	7513      	strb	r3, [r2, #20]
    643c:	0a1b      	lsrs	r3, r3, #8
    643e:	7553      	strb	r3, [r2, #21]
			pdu_adv->connect_ind.latency;
    6440:	7eeb      	ldrb	r3, [r5, #27]
    6442:	7eaa      	ldrb	r2, [r5, #26]
    6444:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->latency =
    6446:	4313      	orrs	r3, r2
    6448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    644a:	7593      	strb	r3, [r2, #22]
    644c:	0a1b      	lsrs	r3, r3, #8
    644e:	75d3      	strb	r3, [r2, #23]
			pdu_adv->connect_ind.timeout;
    6450:	7f6b      	ldrb	r3, [r5, #29]
    6452:	7f2a      	ldrb	r2, [r5, #28]
    6454:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->timeout =
    6456:	4313      	orrs	r3, r2
    6458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    645a:	7613      	strb	r3, [r2, #24]
    645c:	0a1b      	lsrs	r3, r3, #8
    645e:	7653      	strb	r3, [r2, #25]
			pdu_adv->connect_ind.sca;
    6460:	1d2b      	adds	r3, r5, #4
    6462:	7fdb      	ldrb	r3, [r3, #31]
    6464:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    6466:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    6468:	8c38      	ldrh	r0, [r7, #32]
    646a:	f7fe f9db 	bl	4824 <rx_fc_lock>
		packet_rx_enqueue();
    646e:	f7fe faf1 	bl	4a54 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    6472:	2003      	movs	r0, #3
    6474:	f7fd ff6c 	bl	4350 <packet_rx_reserve_get>
    6478:	4b7a      	ldr	r3, [pc, #488]	; (6664 <isr+0x588>)
    647a:	930b      	str	r3, [sp, #44]	; 0x2c
			LL_ASSERT(node_rx);
    647c:	2800      	cmp	r0, #0
    647e:	d100      	bne.n	6482 <isr+0x3a6>
    6480:	e67d      	b.n	617e <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    6482:	8c3b      	ldrh	r3, [r7, #32]
			if (pdu_adv->chan_sel) {
    6484:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    6486:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    6488:	230a      	movs	r3, #10
    648a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    648c:	782b      	ldrb	r3, [r5, #0]
    648e:	4013      	ands	r3, r2
    6490:	d100      	bne.n	6494 <isr+0x3b8>
    6492:	e0e5      	b.n	6660 <isr+0x584>
					((u16_t)conn->access_addr[1] << 8) |
    6494:	7c7b      	ldrb	r3, [r7, #17]
					conn->access_addr[0];
    6496:	7c3a      	ldrb	r2, [r7, #16]
					((u16_t)conn->access_addr[1] << 8) |
    6498:	021b      	lsls	r3, r3, #8
				u16_t aa_ls =
    649a:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
    649c:	7cfa      	ldrb	r2, [r7, #19]
					 conn->access_addr[2];
    649e:	7cb9      	ldrb	r1, [r7, #18]
					((u16_t)conn->access_addr[3] << 8) |
    64a0:	0212      	lsls	r2, r2, #8
				u16_t aa_ms =
    64a2:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    64a4:	2140      	movs	r1, #64	; 0x40
    64a6:	7f7c      	ldrb	r4, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    64a8:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    64aa:	4321      	orrs	r1, r4
    64ac:	7779      	strb	r1, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    64ae:	83fb      	strh	r3, [r7, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    64b0:	72c6      	strb	r6, [r0, #11]
			packet_rx_enqueue();
    64b2:	f7fe facf 	bl	4a54 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    64b6:	0039      	movs	r1, r7
    64b8:	241c      	movs	r4, #28
    64ba:	1d2b      	adds	r3, r5, #4
    64bc:	7fdb      	ldrb	r3, [r3, #31]
    64be:	3138      	adds	r1, #56	; 0x38
    64c0:	780a      	ldrb	r2, [r1, #0]
    64c2:	095b      	lsrs	r3, r3, #5
    64c4:	0098      	lsls	r0, r3, #2
			(((gc_lookup_ppm[_radio.sca] +
    64c6:	4e6a      	ldr	r6, [pc, #424]	; (6670 <isr+0x594>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    64c8:	43a2      	bics	r2, r4
    64ca:	4302      	orrs	r2, r0
    64cc:	700a      	strb	r2, [r1, #0]
			(((gc_lookup_ppm[_radio.sca] +
    64ce:	0032      	movs	r2, r6
    64d0:	32ff      	adds	r2, #255	; 0xff
    64d2:	7f52      	ldrb	r2, [r2, #29]
    64d4:	4967      	ldr	r1, [pc, #412]	; (6674 <isr+0x598>)
    64d6:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->slave.sca]) *
    64d8:	005b      	lsls	r3, r3, #1
			(((gc_lookup_ppm[_radio.sca] +
    64da:	5a50      	ldrh	r0, [r2, r1]
			   gc_lookup_ppm[conn->slave.sca]) *
    64dc:	5a5b      	ldrh	r3, [r3, r1]
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    64de:	4966      	ldr	r1, [pc, #408]	; (6678 <isr+0x59c>)
			(((gc_lookup_ppm[_radio.sca] +
    64e0:	18c0      	adds	r0, r0, r3
			   gc_lookup_ppm[conn->slave.sca]) *
    64e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_size_prepare_us = 0;
    64e4:	2400      	movs	r4, #0
			   gc_lookup_ppm[conn->slave.sca]) *
    64e6:	4358      	muls	r0, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    64e8:	4b64      	ldr	r3, [pc, #400]	; (667c <isr+0x5a0>)
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    64ea:	36fc      	adds	r6, #252	; 0xfc
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    64ec:	18c0      	adds	r0, r0, r3
    64ee:	f7f9 fe6b 	bl	1c8 <__aeabi_uidiv>
			(conn_interval_us >> 1) - RADIO_TIFS;
    64f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_widening_periodic_us =
    64f4:	63f8      	str	r0, [r7, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    64f6:	085b      	lsrs	r3, r3, #1
    64f8:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    64fa:	643b      	str	r3, [r7, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    64fc:	7d6b      	ldrb	r3, [r5, #21]
    64fe:	4a59      	ldr	r2, [pc, #356]	; (6664 <isr+0x588>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6500:	0021      	movs	r1, r4
			pdu_adv->connect_ind.win_size * 1250;
    6502:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    6504:	64fc      	str	r4, [r7, #76]	; 0x4c
		conn->slave.window_size_event_us =
    6506:	653b      	str	r3, [r7, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6508:	0020      	movs	r0, r4
    650a:	f002 fc9d 	bl	8e48 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    650e:	4a5c      	ldr	r2, [pc, #368]	; (6680 <isr+0x5a4>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6510:	900f      	str	r0, [sp, #60]	; 0x3c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6512:	2300      	movs	r3, #0
    6514:	1880      	adds	r0, r0, r2
    6516:	0021      	movs	r1, r4
    6518:	4a5a      	ldr	r2, [pc, #360]	; (6684 <isr+0x5a8>)
    651a:	f7f9 ff25 	bl	368 <__aeabi_lmul>
    651e:	4a5a      	ldr	r2, [pc, #360]	; (6688 <isr+0x5ac>)
    6520:	2307      	movs	r3, #7
    6522:	f7f9 ff01 	bl	328 <__aeabi_uldivmod>
		conn->hdr.ticks_xtal_to_start =
    6526:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6528:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    652a:	0200      	lsls	r0, r0, #8
    652c:	0a00      	lsrs	r0, r0, #8
		conn->hdr.ticks_slot =
    652e:	60f8      	str	r0, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6530:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    6532:	603b      	str	r3, [r7, #0]
		conn->hdr.ticks_preempt_to_start =
    6534:	60bc      	str	r4, [r7, #8]
		ticks_slot_offset =
    6536:	920b      	str	r2, [sp, #44]	; 0x2c
    6538:	429a      	cmp	r2, r3
    653a:	d200      	bcs.n	653e <isr+0x462>
    653c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_us -=
    653e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
			((u64_t)pdu_adv->connect_ind.win_offset +
    6542:	2400      	movs	r4, #0
		conn_interval_us -=
    6544:	1a9b      	subs	r3, r3, r2
    6546:	930e      	str	r3, [sp, #56]	; 0x38
		conn_offset_us = radio_tmr_end_get();
    6548:	f002 fe48 	bl	91dc <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    654c:	7deb      	ldrb	r3, [r5, #23]
    654e:	7daa      	ldrb	r2, [r5, #22]
    6550:	021b      	lsls	r3, r3, #8
    6552:	4313      	orrs	r3, r2
    6554:	001d      	movs	r5, r3
		conn_offset_us +=
    6556:	4b43      	ldr	r3, [pc, #268]	; (6664 <isr+0x588>)
		conn_offset_us = radio_tmr_end_get();
    6558:	0006      	movs	r6, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    655a:	0021      	movs	r1, r4
		conn_offset_us +=
    655c:	3501      	adds	r5, #1
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    655e:	0020      	movs	r0, r4
		conn_offset_us +=
    6560:	435d      	muls	r5, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6562:	f002 fc6f 	bl	8e44 <radio_tx_chain_delay_get>
    6566:	3d30      	subs	r5, #48	; 0x30
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    6568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    656a:	1975      	adds	r5, r6, r5
    656c:	1a28      	subs	r0, r5, r0
    656e:	1ac3      	subs	r3, r0, r3
    6570:	930f      	str	r3, [sp, #60]	; 0x3c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6572:	2390      	movs	r3, #144	; 0x90
    6574:	00db      	lsls	r3, r3, #3
    6576:	2205      	movs	r2, #5
    6578:	9300      	str	r3, [sp, #0]
    657a:	0021      	movs	r1, r4
    657c:	4b43      	ldr	r3, [pc, #268]	; (668c <isr+0x5b0>)
    657e:	0020      	movs	r0, r4
    6580:	f7fd f842 	bl	3608 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    6584:	4942      	ldr	r1, [pc, #264]	; (6690 <isr+0x5b4>)
    6586:	f7fe fd7f 	bl	5088 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    658a:	220f      	movs	r2, #15
    658c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    658e:	781b      	ldrb	r3, [r3, #0]
    6590:	4013      	ands	r3, r2
    6592:	2b01      	cmp	r3, #1
    6594:	d106      	bne.n	65a4 <isr+0x4c8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6596:	9400      	str	r4, [sp, #0]
    6598:	0023      	movs	r3, r4
    659a:	3a0c      	subs	r2, #12
    659c:	0021      	movs	r1, r4
    659e:	0020      	movs	r0, r4
    65a0:	f7fd f832 	bl	3608 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    65a4:	2400      	movs	r4, #0
    65a6:	4a37      	ldr	r2, [pc, #220]	; (6684 <isr+0x5a8>)
    65a8:	2300      	movs	r3, #0
    65aa:	980e      	ldr	r0, [sp, #56]	; 0x38
    65ac:	0021      	movs	r1, r4
    65ae:	f7f9 fedb 	bl	368 <__aeabi_lmul>
    65b2:	4a35      	ldr	r2, [pc, #212]	; (6688 <isr+0x5ac>)
    65b4:	2307      	movs	r3, #7
    65b6:	900c      	str	r0, [sp, #48]	; 0x30
    65b8:	910d      	str	r1, [sp, #52]	; 0x34
    65ba:	f7f9 feb5 	bl	328 <__aeabi_uldivmod>
		     (_radio.ticks_anchor - ticks_slot_offset),
    65be:	4b2c      	ldr	r3, [pc, #176]	; (6670 <isr+0x594>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    65c0:	8c3e      	ldrh	r6, [r7, #32]
    65c2:	685d      	ldr	r5, [r3, #4]
    65c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    65c6:	9706      	str	r7, [sp, #24]
    65c8:	1aed      	subs	r5, r5, r3
    65ca:	2393      	movs	r3, #147	; 0x93
    65cc:	00db      	lsls	r3, r3, #3
    65ce:	9308      	str	r3, [sp, #32]
    65d0:	4b30      	ldr	r3, [pc, #192]	; (6694 <isr+0x5b8>)
    65d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    65d4:	9307      	str	r3, [sp, #28]
    65d6:	4b30      	ldr	r3, [pc, #192]	; (6698 <isr+0x5bc>)
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    65d8:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    65da:	9305      	str	r3, [sp, #20]
    65dc:	68fb      	ldr	r3, [r7, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    65de:	0207      	lsls	r7, r0, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    65e0:	18d3      	adds	r3, r2, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    65e2:	0a3f      	lsrs	r7, r7, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    65e4:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    65e6:	4a28      	ldr	r2, [pc, #160]	; (6688 <isr+0x5ac>)
    65e8:	2307      	movs	r3, #7
    65ea:	0038      	movs	r0, r7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    65ec:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    65ee:	f7f9 febb 	bl	368 <__aeabi_lmul>
    65f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    65f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    65f6:	1a12      	subs	r2, r2, r0
    65f8:	418b      	sbcs	r3, r1
    65fa:	0010      	movs	r0, r2
    65fc:	22fa      	movs	r2, #250	; 0xfa
    65fe:	0019      	movs	r1, r3
    6600:	0092      	lsls	r2, r2, #2
    6602:	2300      	movs	r3, #0
    6604:	f7f9 fe90 	bl	328 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    6608:	4a1e      	ldr	r2, [pc, #120]	; (6684 <isr+0x5a8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    660a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    660c:	2300      	movs	r3, #0
    660e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6610:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6612:	9701      	str	r7, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    6614:	f7f9 fea8 	bl	368 <__aeabi_lmul>
    6618:	2307      	movs	r3, #7
    661a:	4a1b      	ldr	r2, [pc, #108]	; (6688 <isr+0x5ac>)
    661c:	f7f9 fe84 	bl	328 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6620:	002b      	movs	r3, r5
    6622:	0200      	lsls	r0, r0, #8
    6624:	3607      	adds	r6, #7
    6626:	0a00      	lsrs	r0, r0, #8
    6628:	b2f6      	uxtb	r6, r6
    662a:	9000      	str	r0, [sp, #0]
		ticker_status =
    662c:	0032      	movs	r2, r6
    662e:	0021      	movs	r1, r4
    6630:	0020      	movs	r0, r4
    6632:	f7fc ff57 	bl	34e4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6636:	2302      	movs	r3, #2
    6638:	4398      	bics	r0, r3
    663a:	42a0      	cmp	r0, r4
    663c:	d000      	beq.n	6640 <isr+0x564>
    663e:	e59e      	b.n	617e <isr+0xa2>
    6640:	e5cc      	b.n	61dc <isr+0x100>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    6642:	1da3      	adds	r3, r4, #6
    6644:	7fdb      	ldrb	r3, [r3, #31]
    6646:	099b      	lsrs	r3, r3, #6
		(devmatch_ok)) &&
    6648:	079b      	lsls	r3, r3, #30
    664a:	d502      	bpl.n	6652 <isr+0x576>
    664c:	2000      	movs	r0, #0
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    664e:	4286      	cmp	r6, r0
    6650:	d003      	beq.n	665a <isr+0x57e>
	       isr_adv_ci_adva_check(adv, ci);
    6652:	0029      	movs	r1, r5
    6654:	980c      	ldr	r0, [sp, #48]	; 0x30
    6656:	f7fe f8c3 	bl	47e0 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    665a:	2301      	movs	r3, #1
    665c:	4018      	ands	r0, r3
    665e:	e659      	b.n	6314 <isr+0x238>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    6660:	72c3      	strb	r3, [r0, #11]
    6662:	e726      	b.n	64b2 <isr+0x3d6>
    6664:	000004e2 	.word	0x000004e2
    6668:	00002710 	.word	0x00002710
    666c:	026259ff 	.word	0x026259ff
    6670:	20000258 	.word	0x20000258
    6674:	0000b1b6 	.word	0x0000b1b6
    6678:	000f4240 	.word	0x000f4240
    667c:	000f423f 	.word	0x000f423f
    6680:	00000452 	.word	0x00000452
    6684:	3b9aca00 	.word	0x3b9aca00
    6688:	1afd498d 	.word	0x1afd498d
    668c:	00005089 	.word	0x00005089
    6690:	00000481 	.word	0x00000481
    6694:	000050b1 	.word	0x000050b1
    6698:	00005e55 	.word	0x00005e55
		if (crc_ok &&
    669c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    669e:	2b00      	cmp	r3, #0
    66a0:	d100      	bne.n	66a4 <isr+0x5c8>
    66a2:	e24b      	b.n	6b3c <isr+0xa60>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    66a4:	0023      	movs	r3, r4
    66a6:	33dd      	adds	r3, #221	; 0xdd
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	06db      	lsls	r3, r3, #27
    66ac:	0fdb      	lsrs	r3, r3, #31
    66ae:	d002      	beq.n	66b6 <isr+0x5da>
		if (crc_ok &&
    66b0:	2e00      	cmp	r6, #0
    66b2:	d100      	bne.n	66b6 <isr+0x5da>
    66b4:	e242      	b.n	6b3c <isr+0xa60>
	bool dir_report = false;
    66b6:	2100      	movs	r1, #0
    66b8:	aa13      	add	r2, sp, #76	; 0x4c
    66ba:	7011      	strb	r1, [r2, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    66bc:	2236      	movs	r2, #54	; 0x36
    66be:	0021      	movs	r1, r4
    66c0:	32ff      	adds	r2, #255	; 0xff
    66c2:	31fc      	adds	r1, #252	; 0xfc
    66c4:	5ca2      	ldrb	r2, [r4, r2]
    66c6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    66c8:	0092      	lsls	r2, r2, #2
    66ca:	5817      	ldr	r7, [r2, r0]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    66cc:	680a      	ldr	r2, [r1, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    66ce:	003e      	movs	r6, r7
    66d0:	3608      	adds	r6, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    66d2:	2a00      	cmp	r2, #0
    66d4:	d100      	bne.n	66d8 <isr+0x5fc>
    66d6:	e1bf      	b.n	6a58 <isr+0x97c>
    66d8:	22bb      	movs	r2, #187	; 0xbb
    66da:	0052      	lsls	r2, r2, #1
    66dc:	5ca2      	ldrb	r2, [r4, r2]
    66de:	2a00      	cmp	r2, #0
    66e0:	d008      	beq.n	66f4 <isr+0x618>
				      (_radio.fc_req == _radio.fc_ack)) &&
    66e2:	22ba      	movs	r2, #186	; 0xba
    66e4:	2176      	movs	r1, #118	; 0x76
    66e6:	0052      	lsls	r2, r2, #1
    66e8:	31ff      	adds	r1, #255	; 0xff
    66ea:	5ca2      	ldrb	r2, [r4, r2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    66ec:	5c61      	ldrb	r1, [r4, r1]
    66ee:	4291      	cmp	r1, r2
    66f0:	d000      	beq.n	66f4 <isr+0x618>
    66f2:	e1b1      	b.n	6a58 <isr+0x97c>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    66f4:	2b00      	cmp	r3, #0
    66f6:	d100      	bne.n	66fa <isr+0x61e>
    66f8:	e19a      	b.n	6a30 <isr+0x954>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    66fa:	220f      	movs	r2, #15
    66fc:	7a3b      	ldrb	r3, [r7, #8]
    66fe:	4013      	ands	r3, r2
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    6700:	d000      	beq.n	6704 <isr+0x628>
    6702:	e1fb      	b.n	6afc <isr+0xa20>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    6704:	f002 fd6a 	bl	91dc <radio_tmr_end_get>
    6708:	4bbb      	ldr	r3, [pc, #748]	; (69f8 <isr+0x91c>)
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    670a:	4abc      	ldr	r2, [pc, #752]	; (69fc <isr+0x920>)
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    670c:	18c3      	adds	r3, r0, r3
    670e:	930b      	str	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    6710:	0023      	movs	r3, r4
    6712:	33d8      	adds	r3, #216	; 0xd8
    6714:	6818      	ldr	r0, [r3, #0]
    6716:	2100      	movs	r1, #0
    6718:	2307      	movs	r3, #7
    671a:	f7f9 fe25 	bl	368 <__aeabi_lmul>
    671e:	2300      	movs	r3, #0
    6720:	4ab7      	ldr	r2, [pc, #732]	; (6a00 <isr+0x924>)
    6722:	f7f9 fe01 	bl	328 <__aeabi_uldivmod>
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    6726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    6728:	382d      	subs	r0, #45	; 0x2d
    672a:	38ff      	subs	r0, #255	; 0xff
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    672c:	4283      	cmp	r3, r0
    672e:	d300      	bcc.n	6732 <isr+0x656>
    6730:	e192      	b.n	6a58 <isr+0x97c>
			node_rx = packet_rx_reserve_get(4);
    6732:	2004      	movs	r0, #4
    6734:	f7fd fe0c 	bl	4350 <packet_rx_reserve_get>
    6738:	900b      	str	r0, [sp, #44]	; 0x2c
		if (node_rx == 0) {
    673a:	2800      	cmp	r0, #0
    673c:	d100      	bne.n	6740 <isr+0x664>
    673e:	e1fd      	b.n	6b3c <isr+0xa60>
		_radio.state = STATE_STOP;
    6740:	2304      	movs	r3, #4
    6742:	7423      	strb	r3, [r4, #16]
		conn = _radio.scanner.conn;
    6744:	0023      	movs	r3, r4
		_radio.scanner.conn = NULL;
    6746:	2200      	movs	r2, #0
		conn = _radio.scanner.conn;
    6748:	33fc      	adds	r3, #252	; 0xfc
    674a:	681d      	ldr	r5, [r3, #0]
		_radio.scanner.conn = NULL;
    674c:	601a      	str	r2, [r3, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    674e:	f002 fbd7 	bl	8f00 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    6752:	220f      	movs	r2, #15
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6754:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    6756:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6758:	0006      	movs	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    675a:	4393      	bics	r3, r2
			pdu_adv_tx->chan_sel = 1;
    675c:	3216      	adds	r2, #22
    675e:	4313      	orrs	r3, r2
    6760:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6762:	7a3b      	ldrb	r3, [r7, #8]
    6764:	7802      	ldrb	r2, [r0, #0]
    6766:	065b      	lsls	r3, r3, #25
    6768:	0fdb      	lsrs	r3, r3, #31
    676a:	400a      	ands	r2, r1
    676c:	01db      	lsls	r3, r3, #7
    676e:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    6770:	2222      	movs	r2, #34	; 0x22
    6772:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6774:	0022      	movs	r2, r4
    6776:	3140      	adds	r1, #64	; 0x40
    6778:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    677a:	0021      	movs	r1, r4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    677c:	32dd      	adds	r2, #221	; 0xdd
    677e:	7812      	ldrb	r2, [r2, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    6780:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6782:	09d2      	lsrs	r2, r2, #7
    6784:	0192      	lsls	r2, r2, #6
    6786:	4313      	orrs	r3, r2
    6788:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    678a:	2206      	movs	r2, #6
    678c:	3002      	adds	r0, #2
    678e:	f7f9 ff6b 	bl	668 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    6792:	0033      	movs	r3, r6
    6794:	0039      	movs	r1, r7
    6796:	3308      	adds	r3, #8
    6798:	0018      	movs	r0, r3
    679a:	2206      	movs	r2, #6
    679c:	310a      	adds	r1, #10
    679e:	930e      	str	r3, [sp, #56]	; 0x38
    67a0:	f7f9 ff62 	bl	668 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
    67a4:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.
    67a6:	0030      	movs	r0, r6
		       access_addr[0], &conn->access_addr[0], 4);
    67a8:	3110      	adds	r1, #16
		memcpy(&pdu_adv_tx->connect_ind.
    67aa:	2204      	movs	r2, #4
    67ac:	300e      	adds	r0, #14
    67ae:	f7f9 ff5b 	bl	668 <memcpy>
		       &conn->crc_init[0], 3);
    67b2:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    67b4:	0030      	movs	r0, r6
		       &conn->crc_init[0], 3);
    67b6:	3114      	adds	r1, #20
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    67b8:	2203      	movs	r2, #3
    67ba:	3012      	adds	r0, #18
    67bc:	f7f9 ff54 	bl	668 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    67c0:	2301      	movs	r3, #1
    67c2:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    67c4:	0023      	movs	r3, r4
    67c6:	33f0      	adds	r3, #240	; 0xf0
    67c8:	881b      	ldrh	r3, [r3, #0]
		conn_interval_us =
    67ca:	4a8e      	ldr	r2, [pc, #568]	; (6a04 <isr+0x928>)
    67cc:	435a      	muls	r2, r3
    67ce:	920f      	str	r2, [sp, #60]	; 0x3c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    67d0:	f002 fd04 	bl	91dc <radio_tmr_end_get>
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    67d4:	4b8c      	ldr	r3, [pc, #560]	; (6a08 <isr+0x92c>)
		if (!_radio.remainder_anchor ||
    67d6:	68a2      	ldr	r2, [r4, #8]
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    67d8:	18c3      	adds	r3, r0, r3
		if (!_radio.remainder_anchor ||
    67da:	2a00      	cmp	r2, #0
    67dc:	dd02      	ble.n	67e4 <isr+0x708>
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    67de:	23db      	movs	r3, #219	; 0xdb
    67e0:	00db      	lsls	r3, r3, #3
    67e2:	18c3      	adds	r3, r0, r3
		if (_radio.scanner.win_offset_us == 0) {
    67e4:	4a89      	ldr	r2, [pc, #548]	; (6a0c <isr+0x930>)
    67e6:	32fc      	adds	r2, #252	; 0xfc
    67e8:	6854      	ldr	r4, [r2, #4]
    67ea:	2c00      	cmp	r4, #0
    67ec:	d000      	beq.n	67f0 <isr+0x714>
    67ee:	e190      	b.n	6b12 <isr+0xa36>
			pdu_adv_tx->connect_ind.win_offset = 0;
    67f0:	75b4      	strb	r4, [r6, #22]
    67f2:	75f4      	strb	r4, [r6, #23]
    67f4:	001c      	movs	r4, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    67f6:	2100      	movs	r1, #0
    67f8:	0008      	movs	r0, r1
    67fa:	f002 fb21 	bl	8e40 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    67fe:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    6800:	1a24      	subs	r4, r4, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    6802:	0008      	movs	r0, r1
    6804:	f002 fb1e 	bl	8e44 <radio_tx_chain_delay_get>
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6808:	0029      	movs	r1, r5
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    680a:	1a24      	subs	r4, r4, r0
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    680c:	0030      	movs	r0, r6
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    680e:	341e      	adds	r4, #30
		pdu_adv_tx->connect_ind.interval =
    6810:	4b7f      	ldr	r3, [pc, #508]	; (6a10 <isr+0x934>)
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    6812:	9410      	str	r4, [sp, #64]	; 0x40
		pdu_adv_tx->connect_ind.interval =
    6814:	781b      	ldrb	r3, [r3, #0]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6816:	2205      	movs	r2, #5
		pdu_adv_tx->connect_ind.interval =
    6818:	7633      	strb	r3, [r6, #24]
    681a:	4b7d      	ldr	r3, [pc, #500]	; (6a10 <isr+0x934>)
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    681c:	3117      	adds	r1, #23
		pdu_adv_tx->connect_ind.interval =
    681e:	785b      	ldrb	r3, [r3, #1]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6820:	301e      	adds	r0, #30
		pdu_adv_tx->connect_ind.interval =
    6822:	7673      	strb	r3, [r6, #25]
		pdu_adv_tx->connect_ind.latency =
    6824:	4b7b      	ldr	r3, [pc, #492]	; (6a14 <isr+0x938>)
			_radio.scanner.conn_interval;
    6826:	4c79      	ldr	r4, [pc, #484]	; (6a0c <isr+0x930>)
		pdu_adv_tx->connect_ind.latency =
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	76b3      	strb	r3, [r6, #26]
    682c:	4b79      	ldr	r3, [pc, #484]	; (6a14 <isr+0x938>)
    682e:	785b      	ldrb	r3, [r3, #1]
    6830:	76f3      	strb	r3, [r6, #27]
		pdu_adv_tx->connect_ind.timeout =
    6832:	4b79      	ldr	r3, [pc, #484]	; (6a18 <isr+0x93c>)
    6834:	781b      	ldrb	r3, [r3, #0]
    6836:	7733      	strb	r3, [r6, #28]
    6838:	4b77      	ldr	r3, [pc, #476]	; (6a18 <isr+0x93c>)
    683a:	785b      	ldrb	r3, [r3, #1]
    683c:	7773      	strb	r3, [r6, #29]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    683e:	f7f9 ff13 	bl	668 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    6842:	211f      	movs	r1, #31
    6844:	1d33      	adds	r3, r6, #4
    6846:	9311      	str	r3, [sp, #68]	; 0x44
    6848:	1d32      	adds	r2, r6, #4
    684a:	7fab      	ldrb	r3, [r5, #30]
    684c:	7fd2      	ldrb	r2, [r2, #31]
    684e:	400b      	ands	r3, r1
    6850:	438a      	bics	r2, r1
    6852:	431a      	orrs	r2, r3
    6854:	1d33      	adds	r3, r6, #4
    6856:	77da      	strb	r2, [r3, #31]
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    6858:	0023      	movs	r3, r4
    685a:	33ff      	adds	r3, #255	; 0xff
    685c:	7f5a      	ldrb	r2, [r3, #29]
    685e:	1d33      	adds	r3, r6, #4
    6860:	7fdb      	ldrb	r3, [r3, #31]
    6862:	0152      	lsls	r2, r2, #5
    6864:	400b      	ands	r3, r1
    6866:	4313      	orrs	r3, r2
    6868:	1d32      	adds	r2, r6, #4
    686a:	77d3      	strb	r3, [r2, #31]
		radio_switch_complete_and_disable();
    686c:	f002 fb5c 	bl	8f28 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    6870:	0030      	movs	r0, r6
    6872:	f002 fadd 	bl	8e30 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6876:	f002 fb09 	bl	8e8c <radio_is_ready>
    687a:	900c      	str	r0, [sp, #48]	; 0x30
    687c:	2800      	cmp	r0, #0
    687e:	d000      	beq.n	6882 <isr+0x7a6>
    6880:	e47d      	b.n	617e <isr+0xa2>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6882:	2282      	movs	r2, #130	; 0x82
    6884:	34fc      	adds	r4, #252	; 0xfc
    6886:	68a1      	ldr	r1, [r4, #8]
    6888:	0052      	lsls	r2, r2, #1
    688a:	0028      	movs	r0, r5
    688c:	f7fc f832 	bl	28f4 <mem_index_get>
		node_rx->hdr.handle = conn->handle;
    6890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6892:	8428      	strh	r0, [r5, #32]
		radio_le_conn_cmplt->status = 0x00;
    6894:	4669      	mov	r1, sp
		node_rx->hdr.handle = conn->handle;
    6896:	80d8      	strh	r0, [r3, #6]
		radio_le_conn_cmplt->status = 0x00;
    6898:	2030      	movs	r0, #48	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    689a:	2206      	movs	r2, #6
		radio_le_conn_cmplt->status = 0x00;
    689c:	1809      	adds	r1, r1, r0
    689e:	7809      	ldrb	r1, [r1, #0]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    68a0:	711a      	strb	r2, [r3, #4]
		radio_le_conn_cmplt->status = 0x00;
    68a2:	72d9      	strb	r1, [r3, #11]
    68a4:	001c      	movs	r4, r3
		radio_le_conn_cmplt->role = 0x00;
    68a6:	466b      	mov	r3, sp
    68a8:	181b      	adds	r3, r3, r0
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    68aa:	0020      	movs	r0, r4
		radio_le_conn_cmplt->role = 0x00;
    68ac:	781b      	ldrb	r3, [r3, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    68ae:	990e      	ldr	r1, [sp, #56]	; 0x38
		radio_le_conn_cmplt->role = 0x00;
    68b0:	7323      	strb	r3, [r4, #12]
				pdu_adv_tx->rx_addr;
    68b2:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    68b4:	300e      	adds	r0, #14
				pdu_adv_tx->rx_addr;
    68b6:	09db      	lsrs	r3, r3, #7
			radio_le_conn_cmplt->peer_addr_type =
    68b8:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    68ba:	f7f9 fed5 	bl	668 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    68be:	4b54      	ldr	r3, [pc, #336]	; (6a10 <isr+0x934>)
    68c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	7513      	strb	r3, [r2, #20]
    68c6:	4b52      	ldr	r3, [pc, #328]	; (6a10 <isr+0x934>)
    68c8:	785b      	ldrb	r3, [r3, #1]
    68ca:	7553      	strb	r3, [r2, #21]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    68cc:	4b51      	ldr	r3, [pc, #324]	; (6a14 <isr+0x938>)
    68ce:	781b      	ldrb	r3, [r3, #0]
    68d0:	7593      	strb	r3, [r2, #22]
    68d2:	4b50      	ldr	r3, [pc, #320]	; (6a14 <isr+0x938>)
    68d4:	785b      	ldrb	r3, [r3, #1]
    68d6:	75d3      	strb	r3, [r2, #23]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    68d8:	4b4f      	ldr	r3, [pc, #316]	; (6a18 <isr+0x93c>)
    68da:	781b      	ldrb	r3, [r3, #0]
    68dc:	7613      	strb	r3, [r2, #24]
    68de:	4b4e      	ldr	r3, [pc, #312]	; (6a18 <isr+0x93c>)
    68e0:	785b      	ldrb	r3, [r3, #1]
    68e2:	7653      	strb	r3, [r2, #25]
			pdu_adv_tx->connect_ind.sca;
    68e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    68e6:	7fdb      	ldrb	r3, [r3, #31]
    68e8:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    68ea:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    68ec:	8c28      	ldrh	r0, [r5, #32]
    68ee:	f7fd ff99 	bl	4824 <rx_fc_lock>
		packet_rx_enqueue();
    68f2:	f7fe f8af 	bl	4a54 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    68f6:	2003      	movs	r0, #3
    68f8:	f7fd fd2a 	bl	4350 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    68fc:	2800      	cmp	r0, #0
    68fe:	d100      	bne.n	6902 <isr+0x826>
    6900:	e43d      	b.n	617e <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    6902:	8c2b      	ldrh	r3, [r5, #32]
			if (pdu_adv_rx->chan_sel) {
    6904:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    6906:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    6908:	230a      	movs	r3, #10
    690a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    690c:	7a3b      	ldrb	r3, [r7, #8]
    690e:	4013      	ands	r3, r2
    6910:	d00e      	beq.n	6930 <isr+0x854>
					((u16_t)conn->access_addr[1] << 8) |
    6912:	7c6b      	ldrb	r3, [r5, #17]
					conn->access_addr[0];
    6914:	7c2a      	ldrb	r2, [r5, #16]
					((u16_t)conn->access_addr[1] << 8) |
    6916:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[3] << 8) |
    6918:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    691a:	4313      	orrs	r3, r2
					 conn->access_addr[2];
    691c:	7caa      	ldrb	r2, [r5, #18]
					((u16_t)conn->access_addr[3] << 8) |
    691e:	0209      	lsls	r1, r1, #8
				u16_t aa_ms =
    6920:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    6922:	2140      	movs	r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    6924:	4053      	eors	r3, r2
    6926:	83eb      	strh	r3, [r5, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    6928:	2301      	movs	r3, #1
				conn->data_chan_sel = 1;
    692a:	7f6c      	ldrb	r4, [r5, #29]
    692c:	4321      	orrs	r1, r4
    692e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x00;
    6930:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    6932:	f7fe f88f 	bl	4a54 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6936:	4b35      	ldr	r3, [pc, #212]	; (6a0c <isr+0x930>)
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    6938:	2100      	movs	r1, #0
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    693a:	001a      	movs	r2, r3
    693c:	32fc      	adds	r2, #252	; 0xfc
    693e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    6940:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    6942:	33f8      	adds	r3, #248	; 0xf8
    6944:	681b      	ldr	r3, [r3, #0]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6946:	6068      	str	r0, [r5, #4]
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    6948:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    694a:	60a9      	str	r1, [r5, #8]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    694c:	60eb      	str	r3, [r5, #12]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    694e:	900b      	str	r0, [sp, #44]	; 0x2c
    6950:	4290      	cmp	r0, r2
    6952:	d200      	bcs.n	6956 <isr+0x87a>
    6954:	920b      	str	r2, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6956:	2100      	movs	r1, #0
    6958:	4b30      	ldr	r3, [pc, #192]	; (6a1c <isr+0x940>)
    695a:	2206      	movs	r2, #6
    695c:	9300      	str	r3, [sp, #0]
    695e:	0008      	movs	r0, r1
    6960:	4b2f      	ldr	r3, [pc, #188]	; (6a20 <isr+0x944>)
    6962:	f7fc fe51 	bl	3608 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    6966:	21c7      	movs	r1, #199	; 0xc7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6968:	2400      	movs	r4, #0
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    696a:	00c9      	lsls	r1, r1, #3
    696c:	f7fe fb78 	bl	5060 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6970:	0023      	movs	r3, r4
    6972:	2204      	movs	r2, #4
    6974:	0021      	movs	r1, r4
    6976:	9400      	str	r4, [sp, #0]
    6978:	0020      	movs	r0, r4
    697a:	f7fc fe45 	bl	3608 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    697e:	4a20      	ldr	r2, [pc, #128]	; (6a00 <isr+0x924>)
    6980:	2300      	movs	r3, #0
    6982:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6984:	0021      	movs	r1, r4
    6986:	f7f9 fcef 	bl	368 <__aeabi_lmul>
				     (_radio.ticks_anchor - ticks_slot_offset),
    698a:	4b20      	ldr	r3, [pc, #128]	; (6a0c <isr+0x930>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    698c:	900c      	str	r0, [sp, #48]	; 0x30
    698e:	910d      	str	r1, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6990:	685f      	ldr	r7, [r3, #4]
    6992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6994:	8c2e      	ldrh	r6, [r5, #32]
    6996:	1aff      	subs	r7, r7, r3
		ticker_status =
    6998:	4b22      	ldr	r3, [pc, #136]	; (6a24 <isr+0x948>)
    699a:	9506      	str	r5, [sp, #24]
    699c:	9308      	str	r3, [sp, #32]
    699e:	4b22      	ldr	r3, [pc, #136]	; (6a28 <isr+0x94c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    69a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_status =
    69a2:	9307      	str	r3, [sp, #28]
    69a4:	4b21      	ldr	r3, [pc, #132]	; (6a2c <isr+0x950>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    69a6:	3607      	adds	r6, #7
		ticker_status =
    69a8:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    69aa:	68eb      	ldr	r3, [r5, #12]
		ticker_status =
    69ac:	9403      	str	r4, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    69ae:	18d5      	adds	r5, r2, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    69b0:	4a12      	ldr	r2, [pc, #72]	; (69fc <isr+0x920>)
    69b2:	2307      	movs	r3, #7
		ticker_status =
    69b4:	9504      	str	r5, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    69b6:	f7f9 fcb7 	bl	328 <__aeabi_uldivmod>
    69ba:	0010      	movs	r0, r2
    69bc:	22fa      	movs	r2, #250	; 0xfa
    69be:	0019      	movs	r1, r3
    69c0:	0092      	lsls	r2, r2, #2
    69c2:	2300      	movs	r3, #0
    69c4:	f7f9 fcb0 	bl	328 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    69c8:	4a0c      	ldr	r2, [pc, #48]	; (69fc <isr+0x920>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    69ca:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    69cc:	2307      	movs	r3, #7
    69ce:	980c      	ldr	r0, [sp, #48]	; 0x30
    69d0:	990d      	ldr	r1, [sp, #52]	; 0x34
    69d2:	f7f9 fca9 	bl	328 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    69d6:	4a0a      	ldr	r2, [pc, #40]	; (6a00 <isr+0x924>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    69d8:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    69da:	2300      	movs	r3, #0
    69dc:	9810      	ldr	r0, [sp, #64]	; 0x40
    69de:	0021      	movs	r1, r4
    69e0:	f7f9 fcc2 	bl	368 <__aeabi_lmul>
    69e4:	2307      	movs	r3, #7
    69e6:	4a05      	ldr	r2, [pc, #20]	; (69fc <isr+0x920>)
    69e8:	f7f9 fc9e 	bl	328 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    69ec:	0200      	lsls	r0, r0, #8
    69ee:	0a00      	lsrs	r0, r0, #8
		ticker_status =
    69f0:	b2f6      	uxtb	r6, r6
    69f2:	9000      	str	r0, [sp, #0]
    69f4:	003b      	movs	r3, r7
    69f6:	e619      	b.n	662c <isr+0x550>
    69f8:	00000216 	.word	0x00000216
    69fc:	1afd498d 	.word	0x1afd498d
    6a00:	3b9aca00 	.word	0x3b9aca00
    6a04:	000004e2 	.word	0x000004e2
    6a08:	000006ba 	.word	0x000006ba
    6a0c:	20000258 	.word	0x20000258
    6a10:	20000348 	.word	0x20000348
    6a14:	2000034a 	.word	0x2000034a
    6a18:	2000034c 	.word	0x2000034c
    6a1c:	00000637 	.word	0x00000637
    6a20:	00005061 	.word	0x00005061
    6a24:	0000064f 	.word	0x0000064f
    6a28:	000050b1 	.word	0x000050b1
    6a2c:	00005e4d 	.word	0x00005e4d
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    6a30:	0023      	movs	r3, r4
    6a32:	33dd      	adds	r3, #221	; 0xdd
    6a34:	781a      	ldrb	r2, [r3, #0]
    6a36:	7a3b      	ldrb	r3, [r7, #8]
    6a38:	0652      	lsls	r2, r2, #25
    6a3a:	065b      	lsls	r3, r3, #25
    6a3c:	0fd2      	lsrs	r2, r2, #31
    6a3e:	0fdb      	lsrs	r3, r3, #31
    6a40:	429a      	cmp	r2, r3
    6a42:	d109      	bne.n	6a58 <isr+0x97c>
		(memcmp(&_radio.scanner.adv_addr[0],
    6a44:	0020      	movs	r0, r4
    6a46:	0039      	movs	r1, r7
    6a48:	30e4      	adds	r0, #228	; 0xe4
    6a4a:	2206      	movs	r2, #6
    6a4c:	310a      	adds	r1, #10
    6a4e:	f7f9 fdf8 	bl	642 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    6a52:	2800      	cmp	r0, #0
    6a54:	d100      	bne.n	6a58 <isr+0x97c>
    6a56:	e650      	b.n	66fa <isr+0x61e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6a58:	220f      	movs	r2, #15
    6a5a:	7a3b      	ldrb	r3, [r7, #8]
    6a5c:	4013      	ands	r3, r2
    6a5e:	d001      	beq.n	6a64 <isr+0x988>
    6a60:	2b06      	cmp	r3, #6
    6a62:	d177      	bne.n	6b54 <isr+0xa78>
		 (_radio.scanner.type != 0) &&
    6a64:	4ac8      	ldr	r2, [pc, #800]	; (6d88 <isr+0xcac>)
    6a66:	4cc9      	ldr	r4, [pc, #804]	; (6d8c <isr+0xcb0>)
    6a68:	7812      	ldrb	r2, [r2, #0]
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    6a6a:	0712      	lsls	r2, r2, #28
    6a6c:	d561      	bpl.n	6b32 <isr+0xa56>
		 (_radio.scanner.conn == 0)) {
    6a6e:	0022      	movs	r2, r4
    6a70:	32fc      	adds	r2, #252	; 0xfc
		 (_radio.scanner.type != 0) &&
    6a72:	6812      	ldr	r2, [r2, #0]
    6a74:	2a00      	cmp	r2, #0
    6a76:	d15c      	bne.n	6b32 <isr+0xa56>
		err = isr_rx_scan_report(rssi_ready,
    6a78:	0028      	movs	r0, r5
    6a7a:	f7fe fb1f 	bl	50bc <isr_rx_scan_report.isra.37>
    6a7e:	1e06      	subs	r6, r0, #0
		if (err) {
    6a80:	d15c      	bne.n	6b3c <isr+0xa60>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6a82:	f002 fa3d 	bl	8f00 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    6a86:	220f      	movs	r2, #15
    6a88:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6a8a:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    6a8c:	4393      	bics	r3, r2
    6a8e:	001a      	movs	r2, r3
    6a90:	2303      	movs	r3, #3
    6a92:	4313      	orrs	r3, r2
    6a94:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6a96:	7a3b      	ldrb	r3, [r7, #8]
    6a98:	7802      	ldrb	r2, [r0, #0]
    6a9a:	065b      	lsls	r3, r3, #25
    6a9c:	0fdb      	lsrs	r3, r3, #31
    6a9e:	400a      	ands	r2, r1
    6aa0:	01db      	lsls	r3, r3, #7
    6aa2:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    6aa4:	220c      	movs	r2, #12
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6aa6:	3140      	adds	r1, #64	; 0x40
    6aa8:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6aaa:	0021      	movs	r1, r4
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6aac:	0005      	movs	r5, r0
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    6aae:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6ab0:	4ab5      	ldr	r2, [pc, #724]	; (6d88 <isr+0xcac>)
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6ab2:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6ab4:	7812      	ldrb	r2, [r2, #0]
    6ab6:	09d2      	lsrs	r2, r2, #7
    6ab8:	0192      	lsls	r2, r2, #6
    6aba:	4313      	orrs	r3, r2
    6abc:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6abe:	2206      	movs	r2, #6
    6ac0:	3002      	adds	r0, #2
    6ac2:	f7f9 fdd1 	bl	668 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    6ac6:	0039      	movs	r1, r7
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    6ac8:	0028      	movs	r0, r5
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    6aca:	310a      	adds	r1, #10
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    6acc:	2206      	movs	r2, #6
    6ace:	3008      	adds	r0, #8
    6ad0:	f7f9 fdca 	bl	668 <memcpy>
		_radio.scanner.state = 1;
    6ad4:	0021      	movs	r1, r4
    6ad6:	2202      	movs	r2, #2
    6ad8:	31dc      	adds	r1, #220	; 0xdc
    6ada:	780b      	ldrb	r3, [r1, #0]
		radio_tmr_tifs_set(RADIO_TIFS);
    6adc:	2096      	movs	r0, #150	; 0x96
		_radio.scanner.state = 1;
    6ade:	4313      	orrs	r3, r2
    6ae0:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    6ae2:	7422      	strb	r2, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    6ae4:	f002 faa2 	bl	902c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    6ae8:	0030      	movs	r0, r6
    6aea:	f002 fa0d 	bl	8f08 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    6aee:	0028      	movs	r0, r5
    6af0:	f002 f99e 	bl	8e30 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    6af4:	f002 fb5c 	bl	91b0 <radio_tmr_end_capture>
    6af8:	f7ff fbdd 	bl	62b6 <isr+0x1da>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    6afc:	2b01      	cmp	r3, #1
    6afe:	d1af      	bne.n	6a60 <isr+0x984>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    6b00:	2100      	movs	r1, #0
    6b02:	0030      	movs	r0, r6
    6b04:	f7fd ff2e 	bl	4964 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    6b08:	2800      	cmp	r0, #0
    6b0a:	d0a5      	beq.n	6a58 <isr+0x97c>
    6b0c:	e5fa      	b.n	6704 <isr+0x628>
				conn_space_us += conn_interval_us;
    6b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b10:	18a4      	adds	r4, r4, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    6b12:	2c00      	cmp	r4, #0
    6b14:	dbfb      	blt.n	6b0e <isr+0xa32>
    6b16:	429c      	cmp	r4, r3
    6b18:	d3f9      	bcc.n	6b0e <isr+0xa32>
				(conn_space_us - conn_offset_us) / 1250;
    6b1a:	1ae0      	subs	r0, r4, r3
    6b1c:	499c      	ldr	r1, [pc, #624]	; (6d90 <isr+0xcb4>)
    6b1e:	f7f9 fb53 	bl	1c8 <__aeabi_uidiv>
			pdu_adv_tx->connect_ind.win_size++;
    6b22:	7d73      	ldrb	r3, [r6, #21]
			pdu_adv_tx->connect_ind.win_offset =
    6b24:	b280      	uxth	r0, r0
    6b26:	75b0      	strb	r0, [r6, #22]
			pdu_adv_tx->connect_ind.win_size++;
    6b28:	3301      	adds	r3, #1
			pdu_adv_tx->connect_ind.win_offset =
    6b2a:	0a00      	lsrs	r0, r0, #8
    6b2c:	75f0      	strb	r0, [r6, #23]
			pdu_adv_tx->connect_ind.win_size++;
    6b2e:	7573      	strb	r3, [r6, #21]
    6b30:	e661      	b.n	67f6 <isr+0x71a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6b32:	2b00      	cmp	r3, #0
    6b34:	d10e      	bne.n	6b54 <isr+0xa78>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    6b36:	7a7b      	ldrb	r3, [r7, #9]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d13b      	bne.n	6bb4 <isr+0xad8>
			_radio.state = STATE_CLOSE;
    6b3c:	2303      	movs	r3, #3
    6b3e:	4c93      	ldr	r4, [pc, #588]	; (6d8c <isr+0xcb0>)
    6b40:	7423      	strb	r3, [r4, #16]
			radio_disable();
    6b42:	f002 f991 	bl	8e68 <radio_disable>
			_radio.scanner.state = 0;
    6b46:	2202      	movs	r2, #2
    6b48:	34dc      	adds	r4, #220	; 0xdc
    6b4a:	7823      	ldrb	r3, [r4, #0]
    6b4c:	4393      	bics	r3, r2
    6b4e:	7023      	strb	r3, [r4, #0]
    6b50:	f7ff fb44 	bl	61dc <isr+0x100>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6b54:	2b01      	cmp	r3, #1
    6b56:	d00e      	beq.n	6b76 <isr+0xa9a>
					&dir_report))) ||
    6b58:	230b      	movs	r3, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    6b5a:	7a3a      	ldrb	r2, [r7, #8]
					&dir_report))) ||
    6b5c:	4013      	ands	r3, r2
    6b5e:	2b02      	cmp	r3, #2
    6b60:	d0e9      	beq.n	6b36 <isr+0xa5a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    6b62:	230f      	movs	r3, #15
    6b64:	401a      	ands	r2, r3
    6b66:	4b89      	ldr	r3, [pc, #548]	; (6d8c <isr+0xcb0>)
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    6b68:	2a07      	cmp	r2, #7
    6b6a:	d10b      	bne.n	6b84 <isr+0xaa8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    6b6c:	33dd      	adds	r3, #221	; 0xdd
    6b6e:	781b      	ldrb	r3, [r3, #0]
    6b70:	4213      	tst	r3, r2
    6b72:	d1e0      	bne.n	6b36 <isr+0xa5a>
    6b74:	e7e2      	b.n	6b3c <isr+0xa60>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    6b76:	a913      	add	r1, sp, #76	; 0x4c
    6b78:	0030      	movs	r0, r6
    6b7a:	f7fd fef3 	bl	4964 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    6b7e:	2800      	cmp	r0, #0
    6b80:	d1d9      	bne.n	6b36 <isr+0xa5a>
    6b82:	e7e9      	b.n	6b58 <isr+0xa7c>
		   (_radio.scanner.phy)) ||
    6b84:	2a04      	cmp	r2, #4
    6b86:	d1d9      	bne.n	6b3c <isr+0xa60>
		   (_radio.scanner.state != 0) &&
    6b88:	33dc      	adds	r3, #220	; 0xdc
    6b8a:	781b      	ldrb	r3, [r3, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    6b8c:	079b      	lsls	r3, r3, #30
    6b8e:	d5d5      	bpl.n	6b3c <isr+0xa60>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    6b90:	f002 f9b6 	bl	8f00 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    6b94:	7a3b      	ldrb	r3, [r7, #8]
    6b96:	7802      	ldrb	r2, [r0, #0]
    6b98:	065b      	lsls	r3, r3, #25
    6b9a:	09d2      	lsrs	r2, r2, #7
    6b9c:	0fdb      	lsrs	r3, r3, #31
    6b9e:	429a      	cmp	r2, r3
    6ba0:	d1cc      	bne.n	6b3c <isr+0xa60>
		(memcmp(&sreq->scan_req.adv_addr[0],
    6ba2:	0039      	movs	r1, r7
    6ba4:	3008      	adds	r0, #8
    6ba6:	2206      	movs	r2, #6
    6ba8:	310a      	adds	r1, #10
    6baa:	f7f9 fd4a 	bl	642 <memcmp>
		   (_radio.scanner.state != 0) &&
    6bae:	2800      	cmp	r0, #0
    6bb0:	d0c1      	beq.n	6b36 <isr+0xa5a>
    6bb2:	e7c3      	b.n	6b3c <isr+0xa60>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    6bb4:	4b75      	ldr	r3, [pc, #468]	; (6d8c <isr+0xcb0>)
    6bb6:	33fc      	adds	r3, #252	; 0xfc
    6bb8:	681b      	ldr	r3, [r3, #0]
    6bba:	2b00      	cmp	r3, #0
    6bbc:	d1be      	bne.n	6b3c <isr+0xa60>
		err = isr_rx_scan_report(rssi_ready,
    6bbe:	0028      	movs	r0, r5
    6bc0:	f7fe fa7c 	bl	50bc <isr_rx_scan_report.isra.37>
    6bc4:	e7ba      	b.n	6b3c <isr+0xa60>
	_radio.packet_counter++;
    6bc6:	0022      	movs	r2, r4
    6bc8:	32ff      	adds	r2, #255	; 0xff
    6bca:	7d53      	ldrb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6bcc:	0020      	movs	r0, r4
	_radio.packet_counter++;
    6bce:	3301      	adds	r3, #1
    6bd0:	7553      	strb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6bd2:	2336      	movs	r3, #54	; 0x36
    6bd4:	33ff      	adds	r3, #255	; 0xff
    6bd6:	5ce3      	ldrb	r3, [r4, r3]
    6bd8:	30fc      	adds	r0, #252	; 0xfc
    6bda:	6b41      	ldr	r1, [r0, #52]	; 0x34
    6bdc:	009b      	lsls	r3, r3, #2
    6bde:	585f      	ldr	r7, [r3, r1]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6be0:	2101      	movs	r1, #1
	if (crc_ok) {
    6be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6be4:	7139      	strb	r1, [r7, #4]
	if (crc_ok) {
    6be6:	2b00      	cmp	r3, #0
    6be8:	d100      	bne.n	6bec <isr+0xb10>
    6bea:	e3bc      	b.n	7366 <isr+0x128a>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    6bec:	6943      	ldr	r3, [r0, #20]
    6bee:	7a3d      	ldrb	r5, [r7, #8]
    6bf0:	0018      	movs	r0, r3
    6bf2:	30a8      	adds	r0, #168	; 0xa8
    6bf4:	7806      	ldrb	r6, [r0, #0]
    6bf6:	076d      	lsls	r5, r5, #29
    6bf8:	07f2      	lsls	r2, r6, #31
    6bfa:	0fd2      	lsrs	r2, r2, #31
    6bfc:	0fed      	lsrs	r5, r5, #31
    6bfe:	4295      	cmp	r5, r2
    6c00:	d100      	bne.n	6c04 <isr+0xb28>
    6c02:	e0ca      	b.n	6d9a <isr+0xcbe>
		_radio.conn_curr->sn++;
    6c04:	1852      	adds	r2, r2, r1
    6c06:	400a      	ands	r2, r1
    6c08:	0015      	movs	r5, r2
    6c0a:	0032      	movs	r2, r6
    6c0c:	438a      	bics	r2, r1
    6c0e:	432a      	orrs	r2, r5
    6c10:	7002      	strb	r2, [r0, #0]
		if (_radio.role == ROLE_SLAVE) {
    6c12:	7be2      	ldrb	r2, [r4, #15]
    6c14:	2a03      	cmp	r2, #3
    6c16:	d104      	bne.n	6c22 <isr+0xb46>
			_radio.conn_curr->slave.latency_enabled = 1;
    6c18:	001a      	movs	r2, r3
    6c1a:	3238      	adds	r2, #56	; 0x38
    6c1c:	7814      	ldrb	r4, [r2, #0]
    6c1e:	4321      	orrs	r1, r4
    6c20:	7011      	strb	r1, [r2, #0]
		if (_radio.conn_curr->empty == 0) {
    6c22:	7802      	ldrb	r2, [r0, #0]
    6c24:	b251      	sxtb	r1, r2
    6c26:	2900      	cmp	r1, #0
    6c28:	da00      	bge.n	6c2c <isr+0xb50>
    6c2a:	e0b3      	b.n	6d94 <isr+0xcb8>
			node_tx = _radio.conn_curr->pkt_tx_head;
    6c2c:	0019      	movs	r1, r3
    6c2e:	31ec      	adds	r1, #236	; 0xec
    6c30:	6809      	ldr	r1, [r1, #0]
    6c32:	910b      	str	r1, [sp, #44]	; 0x2c
			pdu_data_tx = (void *)(node_tx->pdu_data +
    6c34:	1d0d      	adds	r5, r1, #4
				_radio.conn_curr->packet_tx_head_offset);
    6c36:	0019      	movs	r1, r3
    6c38:	31ff      	adds	r1, #255	; 0xff
    6c3a:	7889      	ldrb	r1, [r1, #2]
			pdu_data_tx = (void *)(node_tx->pdu_data +
    6c3c:	1869      	adds	r1, r5, r1
    6c3e:	910c      	str	r1, [sp, #48]	; 0x30
			pdu_data_tx_len = pdu_data_tx->len;
    6c40:	784c      	ldrb	r4, [r1, #1]
			if (pdu_data_tx_len != 0) {
    6c42:	2c00      	cmp	r4, #0
    6c44:	d101      	bne.n	6c4a <isr+0xb6e>
	u8_t terminate = 0;
    6c46:	2600      	movs	r6, #0
    6c48:	e03a      	b.n	6cc0 <isr+0xbe4>
				if (_radio.conn_curr->enc_tx) {
    6c4a:	0692      	lsls	r2, r2, #26
    6c4c:	d51a      	bpl.n	6c84 <isr+0xba8>
					_radio.conn_curr->ccm_tx.counter++;
    6c4e:	001a      	movs	r2, r3
    6c50:	0019      	movs	r1, r3
    6c52:	32dc      	adds	r2, #220	; 0xdc
    6c54:	31da      	adds	r1, #218	; 0xda
    6c56:	8812      	ldrh	r2, [r2, #0]
    6c58:	8808      	ldrh	r0, [r1, #0]
    6c5a:	0412      	lsls	r2, r2, #16
    6c5c:	4302      	orrs	r2, r0
    6c5e:	0015      	movs	r5, r2
    6c60:	001a      	movs	r2, r3
    6c62:	33e0      	adds	r3, #224	; 0xe0
    6c64:	881b      	ldrh	r3, [r3, #0]
    6c66:	32de      	adds	r2, #222	; 0xde
    6c68:	8812      	ldrh	r2, [r2, #0]
    6c6a:	041b      	lsls	r3, r3, #16
    6c6c:	4313      	orrs	r3, r2
    6c6e:	001e      	movs	r6, r3
    6c70:	2201      	movs	r2, #1
    6c72:	2300      	movs	r3, #0
    6c74:	18ad      	adds	r5, r5, r2
    6c76:	415e      	adcs	r6, r3
    6c78:	0c2a      	lsrs	r2, r5, #16
    6c7a:	0c33      	lsrs	r3, r6, #16
    6c7c:	800d      	strh	r5, [r1, #0]
    6c7e:	804a      	strh	r2, [r1, #2]
    6c80:	808e      	strh	r6, [r1, #4]
    6c82:	80cb      	strh	r3, [r1, #6]
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    6c84:	2203      	movs	r2, #3
    6c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c88:	781b      	ldrb	r3, [r3, #0]
    6c8a:	4013      	ands	r3, r2
    6c8c:	4293      	cmp	r3, r2
    6c8e:	d1da      	bne.n	6c46 <isr+0xb6a>
	switch (pdu_data_tx->llctrl.opcode) {
    6c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6c92:	78d2      	ldrb	r2, [r2, #3]
    6c94:	2a02      	cmp	r2, #2
    6c96:	d1d6      	bne.n	6c46 <isr+0xb6a>
		_radio.state = STATE_CLOSE;
    6c98:	4e3c      	ldr	r6, [pc, #240]	; (6d8c <isr+0xcb0>)
    6c9a:	7433      	strb	r3, [r6, #16]
		radio_disable();
    6c9c:	f002 f8e4 	bl	8e68 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    6ca0:	f002 f8f4 	bl	8e8c <radio_is_ready>
    6ca4:	2800      	cmp	r0, #0
    6ca6:	d001      	beq.n	6cac <isr+0xbd0>
    6ca8:	f7ff fa69 	bl	617e <isr+0xa2>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    6cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		terminate_ind_rx_enqueue(_radio.conn_curr,
    6cae:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    6cb0:	7919      	ldrb	r1, [r3, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    6cb2:	6970      	ldr	r0, [r6, #20]
    6cb4:	2913      	cmp	r1, #19
    6cb6:	d100      	bne.n	6cba <isr+0xbde>
    6cb8:	3103      	adds	r1, #3
    6cba:	f7fd fea9 	bl	4a10 <terminate_ind_rx_enqueue>
		terminate = 1;
    6cbe:	2601      	movs	r6, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6cc0:	4b32      	ldr	r3, [pc, #200]	; (6d8c <isr+0xcb0>)
    6cc2:	33fc      	adds	r3, #252	; 0xfc
    6cc4:	695b      	ldr	r3, [r3, #20]
    6cc6:	001a      	movs	r2, r3
    6cc8:	32ff      	adds	r2, #255	; 0xff
    6cca:	7891      	ldrb	r1, [r2, #2]
    6ccc:	1864      	adds	r4, r4, r1
			if (_radio.conn_curr->packet_tx_head_offset ==
    6cce:	7851      	ldrb	r1, [r2, #1]
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6cd0:	b2e4      	uxtb	r4, r4
    6cd2:	7094      	strb	r4, [r2, #2]
			if (_radio.conn_curr->packet_tx_head_offset ==
    6cd4:	42a1      	cmp	r1, r4
    6cd6:	d11b      	bne.n	6d10 <isr+0xc34>
	conn->packet_tx_head_len = 0;
    6cd8:	2100      	movs	r1, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6cda:	0018      	movs	r0, r3
    6cdc:	001c      	movs	r4, r3
	conn->packet_tx_head_len = 0;
    6cde:	7051      	strb	r1, [r2, #1]
	conn->packet_tx_head_offset = 0;
    6ce0:	7091      	strb	r1, [r2, #2]
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6ce2:	30ec      	adds	r0, #236	; 0xec
    6ce4:	34f0      	adds	r4, #240	; 0xf0
    6ce6:	6802      	ldr	r2, [r0, #0]
    6ce8:	6825      	ldr	r5, [r4, #0]
    6cea:	42aa      	cmp	r2, r5
    6cec:	d115      	bne.n	6d1a <isr+0xc3e>
		if (node_tx) {
    6cee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6cf0:	428d      	cmp	r5, r1
    6cf2:	d00d      	beq.n	6d10 <isr+0xc34>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    6cf4:	6815      	ldr	r5, [r2, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6cf6:	33f4      	adds	r3, #244	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    6cf8:	6005      	str	r5, [r0, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6cfa:	6818      	ldr	r0, [r3, #0]
    6cfc:	4282      	cmp	r2, r0
    6cfe:	d10a      	bne.n	6d16 <isr+0xc3a>
				conn->pkt_tx_ctrl = NULL;
    6d00:	6021      	str	r1, [r4, #0]
				conn->pkt_tx_ctrl_last = NULL;
    6d02:	6019      	str	r1, [r3, #0]
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    6d04:	4921      	ldr	r1, [pc, #132]	; (6d8c <isr+0xcb0>)
    6d06:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6d08:	3151      	adds	r1, #81	; 0x51
    6d0a:	31ff      	adds	r1, #255	; 0xff
    6d0c:	f7fb fdd9 	bl	28c2 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    6d10:	2300      	movs	r3, #0
    6d12:	930b      	str	r3, [sp, #44]	; 0x2c
    6d14:	e008      	b.n	6d28 <isr+0xc4c>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    6d16:	6025      	str	r5, [r4, #0]
    6d18:	e7f4      	b.n	6d04 <isr+0xc28>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6d1a:	33f8      	adds	r3, #248	; 0xf8
    6d1c:	681c      	ldr	r4, [r3, #0]
    6d1e:	6811      	ldr	r1, [r2, #0]
    6d20:	42a2      	cmp	r2, r4
    6d22:	d100      	bne.n	6d26 <isr+0xc4a>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6d24:	6019      	str	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6d26:	6001      	str	r1, [r0, #0]
	if (terminate) {
    6d28:	2e00      	cmp	r6, #0
    6d2a:	d038      	beq.n	6d9e <isr+0xcc2>
		_radio.conn_curr = NULL;
    6d2c:	2400      	movs	r4, #0
		connection_release(_radio.conn_curr);
    6d2e:	4d17      	ldr	r5, [pc, #92]	; (6d8c <isr+0xcb0>)
    6d30:	35fc      	adds	r5, #252	; 0xfc
    6d32:	6968      	ldr	r0, [r5, #20]
    6d34:	f7fe f89e 	bl	4e74 <connection_release>
		_radio.conn_curr = NULL;
    6d38:	616c      	str	r4, [r5, #20]
	if (!radio_tmr_aa_restore()) {
    6d3a:	f002 fa2b 	bl	9194 <radio_tmr_aa_restore>
    6d3e:	2800      	cmp	r0, #0
    6d40:	d103      	bne.n	6d4a <isr+0xc6e>
		radio_tmr_aa_save(radio_tmr_aa_get());
    6d42:	f002 fa19 	bl	9178 <radio_tmr_aa_get>
    6d46:	f002 fa1f 	bl	9188 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    6d4a:	4d10      	ldr	r5, [pc, #64]	; (6d8c <isr+0xcb0>)
    6d4c:	002b      	movs	r3, r5
    6d4e:	33fc      	adds	r3, #252	; 0xfc
    6d50:	695b      	ldr	r3, [r3, #20]
    6d52:	2b00      	cmp	r3, #0
    6d54:	d101      	bne.n	6d5a <isr+0xc7e>
    6d56:	f7ff fa41 	bl	61dc <isr+0x100>
	if (tx_release) {
    6d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6d5c:	2a00      	cmp	r2, #0
    6d5e:	d003      	beq.n	6d68 <isr+0xc8c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    6d60:	8c18      	ldrh	r0, [r3, #32]
    6d62:	0011      	movs	r1, r2
    6d64:	f7fe f812 	bl	4d8c <pdu_node_tx_release>
	if (rx_enqueue) {
    6d68:	2c00      	cmp	r4, #0
    6d6a:	d101      	bne.n	6d70 <isr+0xc94>
    6d6c:	f7ff fa36 	bl	61dc <isr+0x100>
		rx_fc_lock(_radio.conn_curr->handle);
    6d70:	35fc      	adds	r5, #252	; 0xfc
    6d72:	696b      	ldr	r3, [r5, #20]
    6d74:	8c18      	ldrh	r0, [r3, #32]
    6d76:	f7fd fd55 	bl	4824 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    6d7a:	696b      	ldr	r3, [r5, #20]
    6d7c:	8c1b      	ldrh	r3, [r3, #32]
    6d7e:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    6d80:	f7fd fe68 	bl	4a54 <packet_rx_enqueue>
    6d84:	f7ff fa2a 	bl	61dc <isr+0x100>
    6d88:	20000335 	.word	0x20000335
    6d8c:	20000258 	.word	0x20000258
    6d90:	000004e2 	.word	0x000004e2
			_radio.conn_curr->empty = 0;
    6d94:	237f      	movs	r3, #127	; 0x7f
    6d96:	4013      	ands	r3, r2
    6d98:	7003      	strb	r3, [r0, #0]
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    6d9a:	2300      	movs	r3, #0
    6d9c:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6d9e:	4e90      	ldr	r6, [pc, #576]	; (6fe0 <isr+0xf04>)
    6da0:	7a3a      	ldrb	r2, [r7, #8]
    6da2:	0034      	movs	r4, r6
    6da4:	34fc      	adds	r4, #252	; 0xfc
    6da6:	6963      	ldr	r3, [r4, #20]
    6da8:	0712      	lsls	r2, r2, #28
    6daa:	33a8      	adds	r3, #168	; 0xa8
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	0fd2      	lsrs	r2, r2, #31
    6db0:	079b      	lsls	r3, r3, #30
    6db2:	0fdb      	lsrs	r3, r3, #31
    6db4:	429a      	cmp	r2, r3
    6db6:	d041      	beq.n	6e3c <isr+0xd60>
	u8_t rx_enqueue = 0;
    6db8:	2400      	movs	r4, #0
		_radio.crc_expire = 0;
    6dba:	4b89      	ldr	r3, [pc, #548]	; (6fe0 <isr+0xf04>)
    6dbc:	2500      	movs	r5, #0
    6dbe:	001a      	movs	r2, r3
		_radio.conn_curr->supervision_expire = 0;
    6dc0:	33fc      	adds	r3, #252	; 0xfc
    6dc2:	695b      	ldr	r3, [r3, #20]
		_radio.crc_expire = 0;
    6dc4:	32ff      	adds	r2, #255	; 0xff
    6dc6:	7595      	strb	r5, [r2, #22]
		_radio.conn_curr->supervision_expire = 0;
    6dc8:	861d      	strh	r5, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    6dca:	4e85      	ldr	r6, [pc, #532]	; (6fe0 <isr+0xf04>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    6dcc:	a913      	add	r1, sp, #76	; 0x4c
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    6dce:	0033      	movs	r3, r6
    6dd0:	33fc      	adds	r3, #252	; 0xfc
    6dd2:	6958      	ldr	r0, [r3, #20]
    6dd4:	0003      	movs	r3, r0
    6dd6:	33a8      	adds	r3, #168	; 0xa8
    6dd8:	781b      	ldrb	r3, [r3, #0]
    6dda:	09db      	lsrs	r3, r3, #7
    6ddc:	930c      	str	r3, [sp, #48]	; 0x30
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    6dde:	f7ff f911 	bl	6004 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    6de2:	7c33      	ldrb	r3, [r6, #16]
    6de4:	2b03      	cmp	r3, #3
    6de6:	d014      	beq.n	6e12 <isr+0xd36>
    6de8:	2303      	movs	r3, #3
    6dea:	2d00      	cmp	r5, #0
    6dec:	d111      	bne.n	6e12 <isr+0xd36>
    6dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6df0:	2a00      	cmp	r2, #0
    6df2:	d006      	beq.n	6e02 <isr+0xd26>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    6df4:	7a3a      	ldrb	r2, [r7, #8]
    6df6:	06d2      	lsls	r2, r2, #27
    6df8:	d403      	bmi.n	6e02 <isr+0xd26>
    6dfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6dfc:	7852      	ldrb	r2, [r2, #1]
    6dfe:	2a00      	cmp	r2, #0
    6e00:	d007      	beq.n	6e12 <isr+0xd36>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    6e02:	0033      	movs	r3, r6
    6e04:	33fc      	adds	r3, #252	; 0xfc
    6e06:	695b      	ldr	r3, [r3, #20]
    6e08:	339b      	adds	r3, #155	; 0x9b
			 (pdu_data_tx->len == 0)) ||
    6e0a:	781b      	ldrb	r3, [r3, #0]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    6e0c:	1e5a      	subs	r2, r3, #1
    6e0e:	4193      	sbcs	r3, r2
    6e10:	3302      	adds	r3, #2
    6e12:	7433      	strb	r3, [r6, #16]
	if (_radio.state == STATE_CLOSE) {
    6e14:	2b03      	cmp	r3, #3
    6e16:	d000      	beq.n	6e1a <isr+0xd3e>
    6e18:	e2e9      	b.n	73ee <isr+0x1312>
		if (_radio.role == ROLE_MASTER) {
    6e1a:	7bf3      	ldrb	r3, [r6, #15]
    6e1c:	2b04      	cmp	r3, #4
    6e1e:	d000      	beq.n	6e22 <isr+0xd46>
    6e20:	e2c0      	b.n	73a4 <isr+0x12c8>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    6e22:	217f      	movs	r1, #127	; 0x7f
    6e24:	36fc      	adds	r6, #252	; 0xfc
    6e26:	6972      	ldr	r2, [r6, #20]
    6e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6e2a:	32a8      	adds	r2, #168	; 0xa8
    6e2c:	7810      	ldrb	r0, [r2, #0]
    6e2e:	01db      	lsls	r3, r3, #7
    6e30:	4001      	ands	r1, r0
    6e32:	430b      	orrs	r3, r1
    6e34:	7013      	strb	r3, [r2, #0]
			radio_disable();
    6e36:	f002 f817 	bl	8e68 <radio_disable>
    6e3a:	e77e      	b.n	6d3a <isr+0xc5e>
	    (packet_rx_reserve_get(3) != 0) &&
    6e3c:	2003      	movs	r0, #3
    6e3e:	f7fd fa87 	bl	4350 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6e42:	2800      	cmp	r0, #0
    6e44:	d0b8      	beq.n	6db8 <isr+0xcdc>
	    ((_radio.fc_ena == 0) ||
    6e46:	23bb      	movs	r3, #187	; 0xbb
    6e48:	005b      	lsls	r3, r3, #1
	    (packet_rx_reserve_get(3) != 0) &&
    6e4a:	5cf3      	ldrb	r3, [r6, r3]
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	d033      	beq.n	6eb8 <isr+0xddc>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6e50:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	    ((_radio.fc_ena == 0) ||
    6e54:	429a      	cmp	r2, r3
    6e56:	d107      	bne.n	6e68 <isr+0xd8c>
	      (_radio.fc_req == _radio.fc_ack)) ||
    6e58:	23ba      	movs	r3, #186	; 0xba
    6e5a:	2176      	movs	r1, #118	; 0x76
    6e5c:	005b      	lsls	r3, r3, #1
    6e5e:	31ff      	adds	r1, #255	; 0xff
    6e60:	5cf3      	ldrb	r3, [r6, r3]
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6e62:	5c71      	ldrb	r1, [r6, r1]
    6e64:	4299      	cmp	r1, r3
    6e66:	d027      	beq.n	6eb8 <isr+0xddc>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6e68:	0033      	movs	r3, r6
    6e6a:	33fc      	adds	r3, #252	; 0xfc
    6e6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
	      (_radio.fc_req == _radio.fc_ack)) ||
    6e6e:	428a      	cmp	r2, r1
    6e70:	d0a2      	beq.n	6db8 <isr+0xcdc>
	      (_radio.fc_req != _radio.fc_ack) &&
    6e72:	22ba      	movs	r2, #186	; 0xba
    6e74:	2076      	movs	r0, #118	; 0x76
    6e76:	0052      	lsls	r2, r2, #1
    6e78:	30ff      	adds	r0, #255	; 0xff
    6e7a:	5cb1      	ldrb	r1, [r6, r2]
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6e7c:	5c30      	ldrb	r0, [r6, r0]
    6e7e:	4288      	cmp	r0, r1
    6e80:	d09a      	beq.n	6db8 <isr+0xcdc>
		(((_radio.fc_req == 0) &&
    6e82:	5cb2      	ldrb	r2, [r6, r2]
	      (_radio.fc_req != _radio.fc_ack) &&
    6e84:	2a00      	cmp	r2, #0
    6e86:	d106      	bne.n	6e96 <isr+0xdba>
		   _radio.conn_curr->handle)) ||
    6e88:	695b      	ldr	r3, [r3, #20]
		(((_radio.fc_req == 0) &&
    6e8a:	3273      	adds	r2, #115	; 0x73
    6e8c:	32ff      	adds	r2, #255	; 0xff
    6e8e:	5ab2      	ldrh	r2, [r6, r2]
    6e90:	8c1b      	ldrh	r3, [r3, #32]
    6e92:	429a      	cmp	r2, r3
    6e94:	d010      	beq.n	6eb8 <isr+0xddc>
		 ((_radio.fc_req != 0) &&
    6e96:	23ba      	movs	r3, #186	; 0xba
    6e98:	005b      	lsls	r3, r3, #1
    6e9a:	5cf2      	ldrb	r2, [r6, r3]
		   _radio.conn_curr->handle)) ||
    6e9c:	2a00      	cmp	r2, #0
    6e9e:	d08b      	beq.n	6db8 <isr+0xcdc>
		   _radio.conn_curr->handle)))))) {
    6ea0:	0032      	movs	r2, r6
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6ea2:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    6ea4:	32fc      	adds	r2, #252	; 0xfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6ea6:	33b3      	adds	r3, #179	; 0xb3
		   _radio.conn_curr->handle)))))) {
    6ea8:	6951      	ldr	r1, [r2, #20]
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6eaa:	005b      	lsls	r3, r3, #1
    6eac:	18f3      	adds	r3, r6, r3
		 ((_radio.fc_req != 0) &&
    6eae:	88da      	ldrh	r2, [r3, #6]
    6eb0:	8c0b      	ldrh	r3, [r1, #32]
    6eb2:	429a      	cmp	r2, r3
    6eb4:	d000      	beq.n	6eb8 <isr+0xddc>
    6eb6:	e77f      	b.n	6db8 <isr+0xcdc>
		if (pdu_data_rx->len != 0) {
    6eb8:	7a7b      	ldrb	r3, [r7, #9]
    6eba:	930c      	str	r3, [sp, #48]	; 0x30
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d100      	bne.n	6ec2 <isr+0xde6>
    6ec0:	e20f      	b.n	72e2 <isr+0x1206>
			if (_radio.conn_curr->enc_rx) {
    6ec2:	0033      	movs	r3, r6
		u8_t ccm_rx_increment = 0;
    6ec4:	2200      	movs	r2, #0
			if (_radio.conn_curr->enc_rx) {
    6ec6:	33fc      	adds	r3, #252	; 0xfc
    6ec8:	695b      	ldr	r3, [r3, #20]
		u8_t ccm_rx_increment = 0;
    6eca:	920c      	str	r2, [sp, #48]	; 0x30
			if (_radio.conn_curr->enc_rx) {
    6ecc:	33a8      	adds	r3, #168	; 0xa8
    6ece:	781b      	ldrb	r3, [r3, #0]
    6ed0:	06db      	lsls	r3, r3, #27
    6ed2:	d507      	bpl.n	6ee4 <isr+0xe08>
				done = radio_ccm_is_done();
    6ed4:	f002 f9fc 	bl	92d0 <radio_ccm_is_done>
				ccm_rx_increment = 1;
    6ed8:	2301      	movs	r3, #1
    6eda:	930c      	str	r3, [sp, #48]	; 0x30
				LL_ASSERT(done);
    6edc:	2800      	cmp	r0, #0
    6ede:	d101      	bne.n	6ee4 <isr+0xe08>
    6ee0:	f7ff f94d 	bl	617e <isr+0xa2>
			if ((_radio.conn_curr->enc_rx &&
    6ee4:	0033      	movs	r3, r6
    6ee6:	33fc      	adds	r3, #252	; 0xfc
    6ee8:	695b      	ldr	r3, [r3, #20]
    6eea:	33a8      	adds	r3, #168	; 0xa8
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	06db      	lsls	r3, r3, #27
    6ef0:	d410      	bmi.n	6f14 <isr+0xe38>
			    (_radio.conn_curr->pause_rx &&
    6ef2:	0033      	movs	r3, r6
    6ef4:	33fc      	adds	r3, #252	; 0xfc
    6ef6:	695d      	ldr	r5, [r3, #20]
    6ef8:	002b      	movs	r3, r5
    6efa:	33a8      	adds	r3, #168	; 0xa8
    6efc:	781a      	ldrb	r2, [r3, #0]
			     !radio_ccm_mic_is_valid()) ||
    6efe:	0753      	lsls	r3, r2, #29
    6f00:	d420      	bmi.n	6f44 <isr+0xe68>
			switch (pdu_data_rx->ll_id) {
    6f02:	7a3c      	ldrb	r4, [r7, #8]
    6f04:	07a4      	lsls	r4, r4, #30
    6f06:	0fa4      	lsrs	r4, r4, #30
    6f08:	d100      	bne.n	6f0c <isr+0xe30>
    6f0a:	e0bf      	b.n	708c <isr+0xfb0>
    6f0c:	2c02      	cmp	r4, #2
    6f0e:	d842      	bhi.n	6f96 <isr+0xeba>
				*rx_enqueue = 1;
    6f10:	2401      	movs	r4, #1
    6f12:	e0bb      	b.n	708c <isr+0xfb0>
			     !radio_ccm_mic_is_valid()) ||
    6f14:	f002 f9fe 	bl	9314 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    6f18:	2800      	cmp	r0, #0
    6f1a:	d1ea      	bne.n	6ef2 <isr+0xe16>
				_radio.state = STATE_CLOSE;
    6f1c:	2303      	movs	r3, #3
    6f1e:	7433      	strb	r3, [r6, #16]
				radio_disable();
    6f20:	f001 ffa2 	bl	8e68 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    6f24:	f001 ffb2 	bl	8e8c <radio_is_ready>
    6f28:	1e04      	subs	r4, r0, #0
    6f2a:	d001      	beq.n	6f30 <isr+0xe54>
    6f2c:	f7ff f927 	bl	617e <isr+0xa2>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    6f30:	36fc      	adds	r6, #252	; 0xfc
    6f32:	213d      	movs	r1, #61	; 0x3d
    6f34:	6970      	ldr	r0, [r6, #20]
    6f36:	f7fd fd6b 	bl	4a10 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    6f3a:	6970      	ldr	r0, [r6, #20]
    6f3c:	f7fd ff9a 	bl	4e74 <connection_release>
				_radio.conn_curr = NULL;
    6f40:	6174      	str	r4, [r6, #20]
    6f42:	e6fa      	b.n	6d3a <isr+0xc5e>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6f44:	7a3b      	ldrb	r3, [r7, #8]
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    6f46:	43db      	mvns	r3, r3
    6f48:	079b      	lsls	r3, r3, #30
    6f4a:	d1e7      	bne.n	6f1c <isr+0xe40>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6f4c:	7f68      	ldrb	r0, [r5, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    6f4e:	7afb      	ldrb	r3, [r7, #11]
    6f50:	2140      	movs	r1, #64	; 0x40
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6f52:	287f      	cmp	r0, #127	; 0x7f
    6f54:	d812      	bhi.n	6f7c <isr+0xea0>
	       (!conn->role &&
    6f56:	420a      	tst	r2, r1
    6f58:	d109      	bne.n	6f6e <isr+0xe92>
		((!conn->refresh &&
    6f5a:	2b02      	cmp	r3, #2
    6f5c:	d0d1      	beq.n	6f02 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6f5e:	1f5a      	subs	r2, r3, #5
    6f60:	2a01      	cmp	r2, #1
    6f62:	d9ce      	bls.n	6f02 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6f64:	22fb      	movs	r2, #251	; 0xfb
    6f66:	3b0d      	subs	r3, #13
    6f68:	4213      	tst	r3, r2
    6f6a:	d1d7      	bne.n	6f1c <isr+0xe40>
    6f6c:	e7c9      	b.n	6f02 <isr+0xe26>
		 (conn->refresh &&
    6f6e:	21fd      	movs	r1, #253	; 0xfd
    6f70:	1e9a      	subs	r2, r3, #2
    6f72:	420a      	tst	r2, r1
    6f74:	d0c5      	beq.n	6f02 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6f76:	2b0b      	cmp	r3, #11
    6f78:	d1f1      	bne.n	6f5e <isr+0xe82>
    6f7a:	e7c2      	b.n	6f02 <isr+0xe26>
	       (conn->role &&
    6f7c:	420a      	tst	r2, r1
    6f7e:	d104      	bne.n	6f8a <isr+0xeae>
		((!conn->refresh &&
    6f80:	2b02      	cmp	r3, #2
    6f82:	d0be      	beq.n	6f02 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6f84:	2b06      	cmp	r3, #6
    6f86:	d1ed      	bne.n	6f64 <isr+0xe88>
    6f88:	e7bb      	b.n	6f02 <isr+0xe26>
		 (conn->refresh &&
    6f8a:	1e9a      	subs	r2, r3, #2
    6f8c:	2a01      	cmp	r2, #1
    6f8e:	d9b8      	bls.n	6f02 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6f90:	2b0b      	cmp	r3, #11
    6f92:	d1f7      	bne.n	6f84 <isr+0xea8>
    6f94:	e7b5      	b.n	6f02 <isr+0xe26>
	pdu_data_rx = (void *)node_rx->pdu_data;
    6f96:	003b      	movs	r3, r7
    6f98:	3308      	adds	r3, #8
    6f9a:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (pdu_data_rx->llctrl.opcode) {
    6f9c:	7afc      	ldrb	r4, [r7, #11]
    6f9e:	2c19      	cmp	r4, #25
    6fa0:	d900      	bls.n	6fa4 <isr+0xec8>
    6fa2:	e1a6      	b.n	72f2 <isr+0x1216>
    6fa4:	0020      	movs	r0, r4
    6fa6:	f7f9 f905 	bl	1b4 <__gnu_thumb1_case_uhi>
    6faa:	001d      	.short	0x001d
    6fac:	00e700b0 	.word	0x00e700b0
    6fb0:	01a401a4 	.word	0x01a401a4
    6fb4:	01a401a4 	.word	0x01a401a4
    6fb8:	00f2019e 	.word	0x00f2019e
    6fbc:	01a4010c 	.word	0x01a4010c
    6fc0:	012c01a4 	.word	0x012c01a4
    6fc4:	010501a4 	.word	0x010501a4
    6fc8:	01a401a4 	.word	0x01a401a4
    6fcc:	01a40196 	.word	0x01a40196
    6fd0:	01a401a4 	.word	0x01a401a4
    6fd4:	01a401a4 	.word	0x01a401a4
    6fd8:	01a401a4 	.word	0x01a401a4
    6fdc:	01b9      	.short	0x01b9
    6fde:	46c0      	nop			; (mov r8, r8)
    6fe0:	20000258 	.word	0x20000258
		if (!_radio.conn_curr->role ||
    6fe4:	7f6b      	ldrb	r3, [r5, #29]
    6fe6:	2b7f      	cmp	r3, #127	; 0x7f
    6fe8:	d800      	bhi.n	6fec <isr+0xf10>
    6fea:	e182      	b.n	72f2 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    6fec:	7a79      	ldrb	r1, [r7, #9]
    6fee:	2000      	movs	r0, #0
    6ff0:	f7fd f96e 	bl	42d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    6ff4:	2800      	cmp	r0, #0
    6ff6:	d100      	bne.n	6ffa <isr+0xf1e>
    6ff8:	e17b      	b.n	72f2 <isr+0x1216>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6ffa:	7dbb      	ldrb	r3, [r7, #22]
    6ffc:	7d7a      	ldrb	r2, [r7, #21]
    6ffe:	021b      	lsls	r3, r3, #8
    7000:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    7002:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    7004:	1a9a      	subs	r2, r3, r2
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7006:	0412      	lsls	r2, r2, #16
    7008:	d500      	bpl.n	700c <isr+0xf30>
    700a:	e3a3      	b.n	7754 <isr+0x1678>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    700c:	002a      	movs	r2, r5
    700e:	325c      	adds	r2, #92	; 0x5c
    7010:	7811      	ldrb	r1, [r2, #0]
    7012:	3201      	adds	r2, #1
    7014:	7812      	ldrb	r2, [r2, #0]
    7016:	428a      	cmp	r2, r1
    7018:	d001      	beq.n	701e <isr+0xf42>
    701a:	f7ff f8b0 	bl	617e <isr+0xa2>
	if (_radio.conn_upd == 0) {
    701e:	22be      	movs	r2, #190	; 0xbe
    7020:	0052      	lsls	r2, r2, #1
    7022:	58b0      	ldr	r0, [r6, r2]
    7024:	2800      	cmp	r0, #0
    7026:	d100      	bne.n	702a <isr+0xf4e>
		_radio.conn_upd = conn;
    7028:	50b5      	str	r5, [r6, r2]
	conn->llcp.conn_upd.win_size =
    702a:	002a      	movs	r2, r5
    702c:	7b38      	ldrb	r0, [r7, #12]
    702e:	3270      	adds	r2, #112	; 0x70
    7030:	7010      	strb	r0, [r2, #0]
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    7032:	7bba      	ldrb	r2, [r7, #14]
    7034:	7b78      	ldrb	r0, [r7, #13]
    7036:	0212      	lsls	r2, r2, #8
    7038:	4302      	orrs	r2, r0
    703a:	48d7      	ldr	r0, [pc, #860]	; (7398 <isr+0x12bc>)
			_radio.conn_curr->procedure_expire = 0;
    703c:	2400      	movs	r4, #0
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    703e:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    7040:	66ea      	str	r2, [r5, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    7042:	7c3a      	ldrb	r2, [r7, #16]
    7044:	7bf8      	ldrb	r0, [r7, #15]
    7046:	0212      	lsls	r2, r2, #8
    7048:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.interval =
    704a:	0028      	movs	r0, r5
    704c:	3062      	adds	r0, #98	; 0x62
    704e:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.latency;
    7050:	7cba      	ldrb	r2, [r7, #18]
    7052:	7c78      	ldrb	r0, [r7, #17]
    7054:	0212      	lsls	r2, r2, #8
    7056:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.latency =
    7058:	0028      	movs	r0, r5
    705a:	3064      	adds	r0, #100	; 0x64
    705c:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    705e:	7d3a      	ldrb	r2, [r7, #20]
    7060:	7cf8      	ldrb	r0, [r7, #19]
    7062:	0212      	lsls	r2, r2, #8
    7064:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.timeout =
    7066:	0028      	movs	r0, r5
    7068:	3066      	adds	r0, #102	; 0x66
    706a:	8002      	strh	r2, [r0, #0]
	conn->llcp.conn_upd.instant =
    706c:	002a      	movs	r2, r5
	conn->llcp.conn_upd.is_internal = 0;
    706e:	20f8      	movs	r0, #248	; 0xf8
	conn->llcp.conn_upd.instant =
    7070:	3268      	adds	r2, #104	; 0x68
    7072:	8013      	strh	r3, [r2, #0]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7074:	3a08      	subs	r2, #8
    7076:	7813      	ldrb	r3, [r2, #0]
	conn->llcp_ack--;
    7078:	3901      	subs	r1, #1
	conn->llcp.conn_upd.is_internal = 0;
    707a:	4003      	ands	r3, r0
    707c:	7013      	strb	r3, [r2, #0]
	conn->llcp_type = LLCP_CONN_UPD;
    707e:	002b      	movs	r3, r5
    7080:	2201      	movs	r2, #1
    7082:	335e      	adds	r3, #94	; 0x5e
    7084:	701a      	strb	r2, [r3, #0]
	conn->llcp_ack--;
    7086:	3b01      	subs	r3, #1
    7088:	7019      	strb	r1, [r3, #0]
			_radio.conn_curr->procedure_expire = 0;
    708a:	86ac      	strh	r4, [r5, #52]	; 0x34
			_radio.conn_curr->nesn++;
    708c:	4bc3      	ldr	r3, [pc, #780]	; (739c <isr+0x12c0>)
    708e:	2102      	movs	r1, #2
    7090:	33fc      	adds	r3, #252	; 0xfc
    7092:	695d      	ldr	r5, [r3, #20]
    7094:	002a      	movs	r2, r5
    7096:	32a8      	adds	r2, #168	; 0xa8
    7098:	7813      	ldrb	r3, [r2, #0]
    709a:	404b      	eors	r3, r1
    709c:	7013      	strb	r3, [r2, #0]
			if (ccm_rx_increment) {
    709e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    70a0:	2b00      	cmp	r3, #0
    70a2:	d100      	bne.n	70a6 <isr+0xfca>
    70a4:	e689      	b.n	6dba <isr+0xcde>
				_radio.conn_curr->ccm_rx.counter++;
    70a6:	002b      	movs	r3, r5
    70a8:	002e      	movs	r6, r5
    70aa:	33b8      	adds	r3, #184	; 0xb8
    70ac:	36bc      	adds	r6, #188	; 0xbc
    70ae:	681b      	ldr	r3, [r3, #0]
    70b0:	7832      	ldrb	r2, [r6, #0]
    70b2:	0a1b      	lsrs	r3, r3, #8
    70b4:	0612      	lsls	r2, r2, #24
    70b6:	431a      	orrs	r2, r3
    70b8:	0010      	movs	r0, r2
    70ba:	002a      	movs	r2, r5
    70bc:	32c0      	adds	r2, #192	; 0xc0
    70be:	6833      	ldr	r3, [r6, #0]
    70c0:	7812      	ldrb	r2, [r2, #0]
    70c2:	0a1b      	lsrs	r3, r3, #8
    70c4:	0612      	lsls	r2, r2, #24
    70c6:	431a      	orrs	r2, r3
    70c8:	0011      	movs	r1, r2
    70ca:	2300      	movs	r3, #0
    70cc:	2201      	movs	r2, #1
    70ce:	1812      	adds	r2, r2, r0
    70d0:	414b      	adcs	r3, r1
    70d2:	920c      	str	r2, [sp, #48]	; 0x30
    70d4:	930d      	str	r3, [sp, #52]	; 0x34
    70d6:	2230      	movs	r2, #48	; 0x30
    70d8:	466b      	mov	r3, sp
    70da:	189b      	adds	r3, r3, r2
    70dc:	781b      	ldrb	r3, [r3, #0]
    70de:	35b9      	adds	r5, #185	; 0xb9
    70e0:	702b      	strb	r3, [r5, #0]
    70e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    70e4:	0a19      	lsrs	r1, r3, #8
    70e6:	0e1a      	lsrs	r2, r3, #24
    70e8:	7069      	strb	r1, [r5, #1]
    70ea:	70ea      	strb	r2, [r5, #3]
    70ec:	0c19      	lsrs	r1, r3, #16
    70ee:	2234      	movs	r2, #52	; 0x34
    70f0:	466b      	mov	r3, sp
    70f2:	189b      	adds	r3, r3, r2
    70f4:	781b      	ldrb	r3, [r3, #0]
    70f6:	70a9      	strb	r1, [r5, #2]
    70f8:	712b      	strb	r3, [r5, #4]
    70fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    70fc:	0a1a      	lsrs	r2, r3, #8
    70fe:	716a      	strb	r2, [r5, #5]
    7100:	0c1a      	lsrs	r2, r3, #16
    7102:	0e1b      	lsrs	r3, r3, #24
    7104:	71aa      	strb	r2, [r5, #6]
    7106:	71eb      	strb	r3, [r5, #7]
    7108:	e657      	b.n	6dba <isr+0xcde>
		if (!_radio.conn_curr->role ||
    710a:	7f6b      	ldrb	r3, [r5, #29]
    710c:	2b7f      	cmp	r3, #127	; 0x7f
    710e:	d800      	bhi.n	7112 <isr+0x1036>
    7110:	e0ef      	b.n	72f2 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    7112:	7a79      	ldrb	r1, [r7, #9]
    7114:	2001      	movs	r0, #1
    7116:	f7fd f8db 	bl	42d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    711a:	2800      	cmp	r0, #0
    711c:	d100      	bne.n	7120 <isr+0x1044>
    711e:	e0e8      	b.n	72f2 <isr+0x1216>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7120:	7cbb      	ldrb	r3, [r7, #18]
    7122:	7c7a      	ldrb	r2, [r7, #17]
    7124:	021b      	lsls	r3, r3, #8
    7126:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xffff) > 0x7fff) {
    7128:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    712a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    712c:	041b      	lsls	r3, r3, #16
    712e:	d500      	bpl.n	7132 <isr+0x1056>
    7130:	e310      	b.n	7754 <isr+0x1678>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7132:	002e      	movs	r6, r5
    7134:	002b      	movs	r3, r5
    7136:	365d      	adds	r6, #93	; 0x5d
    7138:	335c      	adds	r3, #92	; 0x5c
    713a:	781a      	ldrb	r2, [r3, #0]
    713c:	7833      	ldrb	r3, [r6, #0]
    713e:	429a      	cmp	r2, r3
    7140:	d001      	beq.n	7146 <isr+0x106a>
    7142:	f7ff f81c 	bl	617e <isr+0xa2>
	memcpy(&conn->llcp.chan_map.chm[0],
    7146:	0028      	movs	r0, r5
    7148:	0039      	movs	r1, r7
    714a:	2205      	movs	r2, #5
    714c:	3061      	adds	r0, #97	; 0x61
    714e:	310c      	adds	r1, #12
    7150:	f7f9 fa8a 	bl	668 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    7154:	7cbb      	ldrb	r3, [r7, #18]
    7156:	7c7a      	ldrb	r2, [r7, #17]
    7158:	021b      	lsls	r3, r3, #8
    715a:	4313      	orrs	r3, r2
	conn->llcp.chan_map.instant =
    715c:	002a      	movs	r2, r5
    715e:	3266      	adds	r2, #102	; 0x66
    7160:	8013      	strh	r3, [r2, #0]
	conn->llcp.chan_map.initiate = 0;
    7162:	002b      	movs	r3, r5
    7164:	2400      	movs	r4, #0
    7166:	3360      	adds	r3, #96	; 0x60
    7168:	701c      	strb	r4, [r3, #0]
			conn->llcp_type = LLCP_CHAN_MAP;
    716a:	2302      	movs	r3, #2
    716c:	355e      	adds	r5, #94	; 0x5e
    716e:	702b      	strb	r3, [r5, #0]
			conn->llcp_ack--;
    7170:	7833      	ldrb	r3, [r6, #0]
    7172:	3b01      	subs	r3, #1
    7174:	7033      	strb	r3, [r6, #0]
    7176:	e789      	b.n	708c <isr+0xfb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    7178:	7a79      	ldrb	r1, [r7, #9]
    717a:	2002      	movs	r0, #2
    717c:	f7fd f8a8 	bl	42d0 <pdu_len_cmp>
    7180:	2800      	cmp	r0, #0
    7182:	d100      	bne.n	7186 <isr+0x10aa>
    7184:	e0b5      	b.n	72f2 <isr+0x1216>
		_radio.conn_curr->llcp_terminate.reason_peer =
    7186:	7b3b      	ldrb	r3, [r7, #12]
    7188:	359b      	adds	r5, #155	; 0x9b
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    718a:	702b      	strb	r3, [r5, #0]
    718c:	e0a9      	b.n	72e2 <isr+0x1206>
		if (!_radio.conn_curr->role ||
    718e:	7f6b      	ldrb	r3, [r5, #29]
    7190:	2b7f      	cmp	r3, #127	; 0x7f
    7192:	d800      	bhi.n	7196 <isr+0x10ba>
    7194:	e0ad      	b.n	72f2 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    7196:	2008      	movs	r0, #8
    7198:	7a79      	ldrb	r1, [r7, #9]
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    719a:	f7fd f899 	bl	42d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    719e:	2800      	cmp	r0, #0
    71a0:	d100      	bne.n	71a4 <isr+0x10c8>
    71a2:	e0a6      	b.n	72f2 <isr+0x1216>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    71a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    71a6:	0028      	movs	r0, r5
    71a8:	f7fe faa8 	bl	56fc <feature_rsp_send>
    71ac:	1e04      	subs	r4, r0, #0
		if (!nack) {
    71ae:	d000      	beq.n	71b2 <isr+0x10d6>
    71b0:	e602      	b.n	6db8 <isr+0xcdc>
    71b2:	e76b      	b.n	708c <isr+0xfb0>
		if (_radio.conn_curr->role ||
    71b4:	7f6b      	ldrb	r3, [r5, #29]
    71b6:	2b7f      	cmp	r3, #127	; 0x7f
    71b8:	d900      	bls.n	71bc <isr+0x10e0>
    71ba:	e09a      	b.n	72f2 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    71bc:	7a79      	ldrb	r1, [r7, #9]
    71be:	200e      	movs	r0, #14
    71c0:	e7eb      	b.n	719a <isr+0x10be>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    71c2:	7a79      	ldrb	r1, [r7, #9]
    71c4:	2009      	movs	r0, #9
    71c6:	f7fd f883 	bl	42d0 <pdu_len_cmp>
    71ca:	2800      	cmp	r0, #0
    71cc:	d100      	bne.n	71d0 <isr+0x10f4>
    71ce:	e090      	b.n	72f2 <isr+0x1216>
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    71d0:	0029      	movs	r1, r5
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    71d2:	7b3a      	ldrb	r2, [r7, #12]
    71d4:	4b72      	ldr	r3, [pc, #456]	; (73a0 <isr+0x12c4>)
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    71d6:	318c      	adds	r1, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    71d8:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    71da:	7b7a      	ldrb	r2, [r7, #13]
    71dc:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    71de:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    71e0:	7bba      	ldrb	r2, [r7, #14]
    71e2:	0412      	lsls	r2, r2, #16
    71e4:	431a      	orrs	r2, r3
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    71e6:	680b      	ldr	r3, [r1, #0]
    71e8:	03db      	lsls	r3, r3, #15
    71ea:	0bdb      	lsrs	r3, r3, #15
    71ec:	4013      	ands	r3, r2
		_radio.conn_curr->common.fex_valid = 1;
    71ee:	002a      	movs	r2, r5
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    71f0:	600b      	str	r3, [r1, #0]
		_radio.conn_curr->common.fex_valid = 1;
    71f2:	2320      	movs	r3, #32
    71f4:	3238      	adds	r2, #56	; 0x38
    71f6:	7811      	ldrb	r1, [r2, #0]
    71f8:	430b      	orrs	r3, r1
    71fa:	7013      	strb	r3, [r2, #0]
		_radio.conn_curr->procedure_expire = 0;
    71fc:	2300      	movs	r3, #0
    71fe:	86ab      	strh	r3, [r5, #52]	; 0x34
    7200:	e686      	b.n	6f10 <isr+0xe34>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    7202:	7a79      	ldrb	r1, [r7, #9]
    7204:	200c      	movs	r0, #12
    7206:	f7fd f863 	bl	42d0 <pdu_len_cmp>
    720a:	2800      	cmp	r0, #0
    720c:	d071      	beq.n	72f2 <isr+0x1216>
	if (!conn->llcp_version.tx) {
    720e:	002c      	movs	r4, r5
    7210:	3490      	adds	r4, #144	; 0x90
    7212:	7823      	ldrb	r3, [r4, #0]
    7214:	2601      	movs	r6, #1
    7216:	001a      	movs	r2, r3
    7218:	4032      	ands	r2, r6
    721a:	920f      	str	r2, [sp, #60]	; 0x3c
    721c:	d154      	bne.n	72c8 <isr+0x11ec>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    721e:	485f      	ldr	r0, [pc, #380]	; (739c <isr+0x12c0>)
    7220:	3051      	adds	r0, #81	; 0x51
    7222:	30ff      	adds	r0, #255	; 0xff
    7224:	f7fb fb34 	bl	2890 <mem_acquire>
    7228:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    722a:	d100      	bne.n	722e <isr+0x1152>
    722c:	e5c4      	b.n	6db8 <isr+0xcdc>
		conn->llcp_version.tx = 1;
    722e:	7823      	ldrb	r3, [r4, #0]
    7230:	4333      	orrs	r3, r6
    7232:	7023      	strb	r3, [r4, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7234:	2403      	movs	r4, #3
    7236:	7903      	ldrb	r3, [r0, #4]
    7238:	4323      	orrs	r3, r4
    723a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    723c:	2306      	movs	r3, #6
    723e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    7240:	18db      	adds	r3, r3, r3
    7242:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    7244:	3b03      	subs	r3, #3
    7246:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    7248:	3b18      	subs	r3, #24
    724a:	7243      	strb	r3, [r0, #9]
    724c:	3314      	adds	r3, #20
    724e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    7250:	3b06      	subs	r3, #6
    7252:	72c3      	strb	r3, [r0, #11]
    7254:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    7256:	0028      	movs	r0, r5
    7258:	f7fe fa37 	bl	56ca <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    725c:	002a      	movs	r2, r5
    725e:	2380      	movs	r3, #128	; 0x80
    7260:	32a8      	adds	r2, #168	; 0xa8
    7262:	7811      	ldrb	r1, [r2, #0]
    7264:	425b      	negs	r3, r3
    7266:	430b      	orrs	r3, r1
    7268:	7013      	strb	r3, [r2, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    726a:	f001 fe45 	bl	8ef8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    726e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    7270:	223c      	movs	r2, #60	; 0x3c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7272:	43a3      	bics	r3, r4
    7274:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    7276:	466b      	mov	r3, sp
    7278:	189b      	adds	r3, r3, r2
    727a:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    727c:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    727e:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    7280:	002b      	movs	r3, r5
    7282:	33ec      	adds	r3, #236	; 0xec
    7284:	681c      	ldr	r4, [r3, #0]
    7286:	2310      	movs	r3, #16
    7288:	2c00      	cmp	r4, #0
    728a:	d01a      	beq.n	72c2 <isr+0x11e6>
		pdu_data_tx->md = 1;
    728c:	431e      	orrs	r6, r3
	u8_t rx_enqueue = 0;
    728e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
		pdu_data_tx->md = 1;
    7290:	7006      	strb	r6, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    7292:	002b      	movs	r3, r5
    7294:	7b3a      	ldrb	r2, [r7, #12]
    7296:	3391      	adds	r3, #145	; 0x91
    7298:	701a      	strb	r2, [r3, #0]
	conn->llcp_version.company_id = v->company_id;
    729a:	7bbb      	ldrb	r3, [r7, #14]
    729c:	7b7a      	ldrb	r2, [r7, #13]
    729e:	021b      	lsls	r3, r3, #8
    72a0:	4313      	orrs	r3, r2
    72a2:	002a      	movs	r2, r5
    72a4:	3292      	adds	r2, #146	; 0x92
    72a6:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.sub_version_number = v->sub_version_number;
    72a8:	7c3b      	ldrb	r3, [r7, #16]
    72aa:	7bfa      	ldrb	r2, [r7, #15]
    72ac:	021b      	lsls	r3, r3, #8
    72ae:	4313      	orrs	r3, r2
    72b0:	002a      	movs	r2, r5
    72b2:	3294      	adds	r2, #148	; 0x94
    72b4:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.rx = 1;
    72b6:	2302      	movs	r3, #2
    72b8:	3590      	adds	r5, #144	; 0x90
    72ba:	782a      	ldrb	r2, [r5, #0]
    72bc:	4313      	orrs	r3, r2
    72be:	702b      	strb	r3, [r5, #0]
    72c0:	e6e4      	b.n	708c <isr+0xfb0>
		pdu_data_tx->md = 0;
    72c2:	439e      	bics	r6, r3
    72c4:	7006      	strb	r6, [r0, #0]
    72c6:	e7e4      	b.n	7292 <isr+0x11b6>
	u8_t rx_enqueue = 0;
    72c8:	2400      	movs	r4, #0
	} else if (!conn->llcp_version.rx) {
    72ca:	079b      	lsls	r3, r3, #30
    72cc:	d500      	bpl.n	72d0 <isr+0x11f4>
    72ce:	e6dd      	b.n	708c <isr+0xfb0>
		conn->procedure_expire = 0;
    72d0:	86ac      	strh	r4, [r5, #52]	; 0x34
		*rx_enqueue = 1;
    72d2:	0034      	movs	r4, r6
    72d4:	e7dd      	b.n	7292 <isr+0x11b6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    72d6:	7a79      	ldrb	r1, [r7, #9]
    72d8:	2011      	movs	r0, #17
    72da:	f7fc fff9 	bl	42d0 <pdu_len_cmp>
    72de:	2800      	cmp	r0, #0
    72e0:	d007      	beq.n	72f2 <isr+0x1216>
	u8_t rx_enqueue = 0;
    72e2:	2400      	movs	r4, #0
    72e4:	e6d2      	b.n	708c <isr+0xfb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    72e6:	7a79      	ldrb	r1, [r7, #9]
    72e8:	2007      	movs	r0, #7
    72ea:	f7fc fff1 	bl	42d0 <pdu_len_cmp>
    72ee:	2800      	cmp	r0, #0
    72f0:	d184      	bne.n	71fc <isr+0x1120>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    72f2:	0030      	movs	r0, r6
    72f4:	3051      	adds	r0, #81	; 0x51
    72f6:	30ff      	adds	r0, #255	; 0xff
    72f8:	f7fb faca 	bl	2890 <mem_acquire>
    72fc:	1e01      	subs	r1, r0, #0
	if (!node_tx) {
    72fe:	d100      	bne.n	7302 <isr+0x1226>
    7300:	e55a      	b.n	6db8 <isr+0xcdc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7302:	2303      	movs	r3, #3
    7304:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    7306:	7204      	strb	r4, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7308:	4313      	orrs	r3, r2
    730a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    730c:	2302      	movs	r3, #2
    730e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    7310:	3305      	adds	r3, #5
    7312:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    7314:	0028      	movs	r0, r5
    7316:	f7fe f9a7 	bl	5668 <ctrl_tx_enqueue>
    731a:	e7e2      	b.n	72e2 <isr+0x1206>
		if (_radio.conn_curr->role ||
    731c:	7f6b      	ldrb	r3, [r5, #29]
    731e:	2b7f      	cmp	r3, #127	; 0x7f
    7320:	d8e7      	bhi.n	72f2 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    7322:	7a79      	ldrb	r1, [r7, #9]
    7324:	2019      	movs	r0, #25
    7326:	f7fc ffd3 	bl	42d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    732a:	2800      	cmp	r0, #0
    732c:	d0e1      	beq.n	72f2 <isr+0x1216>
			if (!(p->phys & 0x01)) {
    732e:	2201      	movs	r2, #1
    7330:	7b3b      	ldrb	r3, [r7, #12]
	u8_t rx_enqueue = 0;
    7332:	2400      	movs	r4, #0
			if (!(p->phys & 0x01)) {
    7334:	4213      	tst	r3, r2
    7336:	d100      	bne.n	733a <isr+0x125e>
    7338:	e6a8      	b.n	708c <isr+0xfb0>
			if (conn->llcp_req != conn->llcp_ack) {
    733a:	002e      	movs	r6, r5
    733c:	002b      	movs	r3, r5
    733e:	365d      	adds	r6, #93	; 0x5d
    7340:	335c      	adds	r3, #92	; 0x5c
    7342:	781a      	ldrb	r2, [r3, #0]
    7344:	7833      	ldrb	r3, [r6, #0]
    7346:	429a      	cmp	r2, r3
    7348:	d000      	beq.n	734c <isr+0x1270>
    734a:	e69f      	b.n	708c <isr+0xfb0>
			memcpy(&conn->llcp.chan_map.chm[0],
    734c:	0028      	movs	r0, r5
    734e:	4913      	ldr	r1, [pc, #76]	; (739c <isr+0x12c0>)
    7350:	2205      	movs	r2, #5
    7352:	3117      	adds	r1, #23
    7354:	3061      	adds	r0, #97	; 0x61
    7356:	31ff      	adds	r1, #255	; 0xff
    7358:	f7f9 f986 	bl	668 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    735c:	002b      	movs	r3, r5
    735e:	2201      	movs	r2, #1
    7360:	3360      	adds	r3, #96	; 0x60
    7362:	701a      	strb	r2, [r3, #0]
    7364:	e701      	b.n	716a <isr+0x108e>
		if (_radio.crc_expire == 0) {
    7366:	7d93      	ldrb	r3, [r2, #22]
    7368:	2b00      	cmp	r3, #0
    736a:	d101      	bne.n	7370 <isr+0x1294>
			_radio.crc_expire = 2;
    736c:	3302      	adds	r3, #2
    736e:	7593      	strb	r3, [r2, #22]
		_radio.crc_expire--;
    7370:	0023      	movs	r3, r4
    7372:	33ff      	adds	r3, #255	; 0xff
    7374:	7d9d      	ldrb	r5, [r3, #22]
		if (!_radio.conn_curr->supervision_expire) {
    7376:	34fc      	adds	r4, #252	; 0xfc
		_radio.crc_expire--;
    7378:	3d01      	subs	r5, #1
    737a:	b2ea      	uxtb	r2, r5
    737c:	759a      	strb	r2, [r3, #22]
		crc_close = (_radio.crc_expire == 0);
    737e:	4255      	negs	r5, r2
    7380:	4155      	adcs	r5, r2
		if (!_radio.conn_curr->supervision_expire) {
    7382:	6963      	ldr	r3, [r4, #20]
		crc_close = (_radio.crc_expire == 0);
    7384:	b2ed      	uxtb	r5, r5
		if (!_radio.conn_curr->supervision_expire) {
    7386:	8e1c      	ldrh	r4, [r3, #48]	; 0x30
    7388:	2c00      	cmp	r4, #0
    738a:	d103      	bne.n	7394 <isr+0x12b8>
			_radio.conn_curr->supervision_expire =
    738c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    738e:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    7390:	940b      	str	r4, [sp, #44]	; 0x2c
    7392:	e51a      	b.n	6dca <isr+0xcee>
	u8_t rx_enqueue = 0;
    7394:	2400      	movs	r4, #0
    7396:	e7fb      	b.n	7390 <isr+0x12b4>
    7398:	000004e2 	.word	0x000004e2
    739c:	20000258 	.word	0x20000258
    73a0:	fffe30d0 	.word	0xfffe30d0
			radio_switch_complete_and_disable();
    73a4:	f001 fdc0 	bl	8f28 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    73a8:	36fc      	adds	r6, #252	; 0xfc
    73aa:	6970      	ldr	r0, [r6, #20]
    73ac:	2501      	movs	r5, #1
    73ae:	0006      	movs	r6, r0
    73b0:	36a8      	adds	r6, #168	; 0xa8
    73b2:	7832      	ldrb	r2, [r6, #0]
    73b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    73b6:	402a      	ands	r2, r5
    73b8:	00d3      	lsls	r3, r2, #3
    73ba:	930c      	str	r3, [sp, #48]	; 0x30
    73bc:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    73be:	7836      	ldrb	r6, [r6, #0]
	pdu_data_tx->sn = _radio.conn_curr->sn;
    73c0:	001a      	movs	r2, r3
    73c2:	2308      	movs	r3, #8
    73c4:	439a      	bics	r2, r3
    73c6:	0013      	movs	r3, r2
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    73c8:	40ee      	lsrs	r6, r5
    73ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    73cc:	402e      	ands	r6, r5
    73ce:	4313      	orrs	r3, r2
    73d0:	001d      	movs	r5, r3
    73d2:	2304      	movs	r3, #4
    73d4:	00b6      	lsls	r6, r6, #2
    73d6:	439d      	bics	r5, r3
    73d8:	4335      	orrs	r5, r6
    73da:	700d      	strb	r5, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    73dc:	f7fd faa2 	bl	4924 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    73e0:	f001 fd54 	bl	8e8c <radio_is_ready>
    73e4:	2800      	cmp	r0, #0
    73e6:	d100      	bne.n	73ea <isr+0x130e>
    73e8:	e4a7      	b.n	6d3a <isr+0xc5e>
    73ea:	f7fe fec8 	bl	617e <isr+0xa2>
		radio_tmr_tifs_set(RADIO_TIFS);
    73ee:	2096      	movs	r0, #150	; 0x96
    73f0:	f001 fe1c 	bl	902c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    73f4:	2000      	movs	r0, #0
    73f6:	f001 fd87 	bl	8f08 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    73fa:	f001 fed9 	bl	91b0 <radio_tmr_end_capture>
    73fe:	e7d3      	b.n	73a8 <isr+0x12cc>
	switch (_radio.role) {
    7400:	7be0      	ldrb	r0, [r4, #15]
    7402:	b2c0      	uxtb	r0, r0
    7404:	2804      	cmp	r0, #4
    7406:	d901      	bls.n	740c <isr+0x1330>
    7408:	f7fe feb9 	bl	617e <isr+0xa2>
    740c:	f7f8 fed2 	bl	1b4 <__gnu_thumb1_case_uhi>
    7410:	00050199 	.word	0x00050199
    7414:	008f0064 	.word	0x008f0064
    7418:	008f      	.short	0x008f
	if ((_radio.state == STATE_CLOSE) &&
    741a:	2b03      	cmp	r3, #3
    741c:	d109      	bne.n	7432 <isr+0x1356>
	    (_radio.advertiser.chan_map_current != 0)) {
    741e:	1d63      	adds	r3, r4, #5
    7420:	7fdb      	ldrb	r3, [r3, #31]
	if ((_radio.state == STATE_CLOSE) &&
    7422:	075b      	lsls	r3, r3, #29
    7424:	d005      	beq.n	7432 <isr+0x1356>
		adv_setup();
    7426:	f7fd fc53 	bl	4cd0 <adv_setup>
		radio_tx_enable();
    742a:	f001 fd17 	bl	8e5c <radio_tx_enable>
    742e:	f7fe feb4 	bl	619a <isr+0xbe>
		radio_filter_disable();
    7432:	f001 fdcb 	bl	8fcc <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    7436:	7c23      	ldrb	r3, [r4, #16]
    7438:	2b03      	cmp	r3, #3
    743a:	d130      	bne.n	749e <isr+0x13c2>
		    (!_radio.advertiser.is_hdcd)) {
    743c:	1d63      	adds	r3, r4, #5
    743e:	7fdd      	ldrb	r5, [r3, #31]
		if ((_radio.state == STATE_CLOSE) &&
    7440:	2340      	movs	r3, #64	; 0x40
    7442:	401d      	ands	r5, r3
    7444:	d12b      	bne.n	749e <isr+0x13c2>
			rand_isr_get(sizeof(random_delay), &random_delay);
    7446:	ae13      	add	r6, sp, #76	; 0x4c
    7448:	0031      	movs	r1, r6
    744a:	2001      	movs	r0, #1
    744c:	f001 fbae 	bl	8bac <rand_isr_get>
			random_delay %= 10;
    7450:	7830      	ldrb	r0, [r6, #0]
    7452:	210a      	movs	r1, #10
    7454:	f7f8 fefc 	bl	250 <__aeabi_uidivmod>
			random_delay += 1;
    7458:	3101      	adds	r1, #1
    745a:	b2c8      	uxtb	r0, r1
					HAL_TICKER_US_TO_TICKS(random_delay *
    745c:	4abf      	ldr	r2, [pc, #764]	; (775c <isr+0x1680>)
    745e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    7460:	7030      	strb	r0, [r6, #0]
					HAL_TICKER_US_TO_TICKS(random_delay *
    7462:	0029      	movs	r1, r5
    7464:	f7f8 ff80 	bl	368 <__aeabi_lmul>
    7468:	4abd      	ldr	r2, [pc, #756]	; (7760 <isr+0x1684>)
    746a:	2307      	movs	r3, #7
    746c:	f7f8 ff5c 	bl	328 <__aeabi_uldivmod>
			ticker_status =
    7470:	4abc      	ldr	r2, [pc, #752]	; (7764 <isr+0x1688>)
    7472:	b283      	uxth	r3, r0
    7474:	9206      	str	r2, [sp, #24]
    7476:	4abc      	ldr	r2, [pc, #752]	; (7768 <isr+0x168c>)
    7478:	9504      	str	r5, [sp, #16]
    747a:	9205      	str	r2, [sp, #20]
    747c:	9503      	str	r5, [sp, #12]
    747e:	9502      	str	r5, [sp, #8]
    7480:	9501      	str	r5, [sp, #4]
    7482:	9500      	str	r5, [sp, #0]
    7484:	2205      	movs	r2, #5
    7486:	0029      	movs	r1, r5
    7488:	0028      	movs	r0, r5
    748a:	f7fc f86d 	bl	3568 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    748e:	2302      	movs	r3, #2
    7490:	4398      	bics	r0, r3
    7492:	d004      	beq.n	749e <isr+0x13c2>
    7494:	7ba3      	ldrb	r3, [r4, #14]
    7496:	2b05      	cmp	r3, #5
    7498:	d001      	beq.n	749e <isr+0x13c2>
    749a:	f7fe fe70 	bl	617e <isr+0xa2>
	_radio.role = ROLE_NONE;
    749e:	2400      	movs	r4, #0
    74a0:	4db2      	ldr	r5, [pc, #712]	; (776c <isr+0x1690>)
    74a2:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    74a4:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    74a6:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    74a8:	f001 fe12 	bl	90d0 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    74ac:	0022      	movs	r2, r4
    74ae:	0021      	movs	r1, r4
    74b0:	0020      	movs	r0, r4
    74b2:	4baf      	ldr	r3, [pc, #700]	; (7770 <isr+0x1694>)
    74b4:	f7fb faa2 	bl	29fc <mayfly_enqueue>
    74b8:	1e04      	subs	r4, r0, #0
	LL_ASSERT(!retval);
    74ba:	d001      	beq.n	74c0 <isr+0x13e4>
    74bc:	f7fe fe5f 	bl	617e <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    74c0:	6828      	ldr	r0, [r5, #0]
    74c2:	0021      	movs	r1, r4
    74c4:	6843      	ldr	r3, [r0, #4]
    74c6:	685b      	ldr	r3, [r3, #4]
    74c8:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    74ca:	2201      	movs	r2, #1
    74cc:	0020      	movs	r0, r4
    74ce:	0011      	movs	r1, r2
    74d0:	f7fb fa70 	bl	29b4 <mayfly_enable>
    74d4:	f7fe fe82 	bl	61dc <isr+0x100>
	if (_radio.state == STATE_CLOSE) {
    74d8:	2b03      	cmp	r3, #3
    74da:	d11b      	bne.n	7514 <isr+0x1438>
		radio_tmr_tifs_set(RADIO_TIFS);
    74dc:	2096      	movs	r0, #150	; 0x96
    74de:	f001 fda5 	bl	902c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    74e2:	2300      	movs	r3, #0
    74e4:	0019      	movs	r1, r3
    74e6:	001a      	movs	r2, r3
    74e8:	0018      	movs	r0, r3
    74ea:	f001 fd15 	bl	8f18 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    74ee:	2336      	movs	r3, #54	; 0x36
    74f0:	0022      	movs	r2, r4
    74f2:	33ff      	adds	r3, #255	; 0xff
    74f4:	5ce3      	ldrb	r3, [r4, r3]
    74f6:	32fc      	adds	r2, #252	; 0xfc
    74f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
    74fa:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    74fc:	5898      	ldr	r0, [r3, r2]
    74fe:	3008      	adds	r0, #8
    7500:	f001 fc8e 	bl	8e20 <radio_pkt_rx_set>
		radio_rssi_measure();
    7504:	f001 fd18 	bl	8f38 <radio_rssi_measure>
		_radio.state = STATE_RX;
    7508:	2301      	movs	r3, #1
    750a:	7423      	strb	r3, [r4, #16]
		radio_rx_enable();
    750c:	f001 fca0 	bl	8e50 <radio_rx_enable>
    7510:	f7fe fe43 	bl	619a <isr+0xbe>
		radio_filter_disable();
    7514:	f001 fd5a 	bl	8fcc <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    7518:	7c23      	ldrb	r3, [r4, #16]
    751a:	2b05      	cmp	r3, #5
    751c:	d1bf      	bne.n	749e <isr+0x13c2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    751e:	2000      	movs	r0, #0
    7520:	2204      	movs	r2, #4
    7522:	9000      	str	r0, [sp, #0]
    7524:	0003      	movs	r3, r0
    7526:	0001      	movs	r1, r0
    7528:	f7fc f86e 	bl	3608 <ticker_stop>
    752c:	e7b7      	b.n	749e <isr+0x13c2>
	if (_radio.conn_curr == 0) {
    752e:	0023      	movs	r3, r4
    7530:	33fc      	adds	r3, #252	; 0xfc
    7532:	6958      	ldr	r0, [r3, #20]
    7534:	2800      	cmp	r0, #0
    7536:	d0b2      	beq.n	749e <isr+0x13c2>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    7538:	0003      	movs	r3, r0
    753a:	339b      	adds	r3, #155	; 0x9b
    753c:	7819      	ldrb	r1, [r3, #0]
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    753e:	2900      	cmp	r1, #0
    7540:	d010      	beq.n	7564 <isr+0x1488>
    7542:	7be3      	ldrb	r3, [r4, #15]
    7544:	2b03      	cmp	r3, #3
    7546:	d004      	beq.n	7552 <isr+0x1476>
    7548:	0003      	movs	r3, r0
    754a:	3338      	adds	r3, #56	; 0x38
    754c:	781b      	ldrb	r3, [r3, #0]
    754e:	07db      	lsls	r3, r3, #31
    7550:	d508      	bpl.n	7564 <isr+0x1488>
			connection_release(_radio.conn_curr);
    7552:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    7554:	f7fd fa5c 	bl	4a10 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    7558:	6960      	ldr	r0, [r4, #20]
    755a:	f7fd fc8b 	bl	4e74 <connection_release>
			_radio.conn_curr = NULL;
    755e:	2300      	movs	r3, #0
    7560:	6163      	str	r3, [r4, #20]
    7562:	e79c      	b.n	749e <isr+0x13c2>
	latency_event = _radio.conn_curr->latency_event;
    7564:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    7566:	930b      	str	r3, [sp, #44]	; 0x2c
	elapsed_event = latency_event + 1;
    7568:	1c5e      	adds	r6, r3, #1
	if (_radio.packet_counter &&
    756a:	0023      	movs	r3, r4
    756c:	33ff      	adds	r3, #255	; 0xff
    756e:	7d5f      	ldrb	r7, [r3, #21]
	elapsed_event = latency_event + 1;
    7570:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    7572:	2f00      	cmp	r7, #0
    7574:	d07b      	beq.n	766e <isr+0x1592>
		if (_radio.role == ROLE_SLAVE) {
    7576:	7be3      	ldrb	r3, [r4, #15]
    7578:	2b03      	cmp	r3, #3
    757a:	d16e      	bne.n	765a <isr+0x157e>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    757c:	f001 fe0a 	bl	9194 <radio_tmr_aa_restore>
    7580:	0007      	movs	r7, r0
						     radio_tmr_ready_get();
    7582:	f001 fe0d 	bl	91a0 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    7586:	34fc      	adds	r4, #252	; 0xfc
    7588:	6964      	ldr	r4, [r4, #20]
			start_to_address_actual_us = radio_tmr_aa_restore() -
    758a:	1a3f      	subs	r7, r7, r0
			window_widening_event_us =
    758c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    758e:	4a79      	ldr	r2, [pc, #484]	; (7774 <isr+0x1698>)
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    7590:	0003      	movs	r3, r0
    7592:	3358      	adds	r3, #88	; 0x58
    7594:	930c      	str	r3, [sp, #48]	; 0x30
			if (start_to_address_actual_us <=
    7596:	429f      	cmp	r7, r3
    7598:	d84c      	bhi.n	7634 <isr+0x1558>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    759a:	2300      	movs	r3, #0
    759c:	2100      	movs	r1, #0
    759e:	f7f8 fee3 	bl	368 <__aeabi_lmul>
    75a2:	4a6f      	ldr	r2, [pc, #444]	; (7760 <isr+0x1684>)
    75a4:	2307      	movs	r3, #7
    75a6:	f7f8 febf 	bl	328 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    75aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75ac:	4a71      	ldr	r2, [pc, #452]	; (7774 <isr+0x1698>)
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    75ae:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    75b0:	2100      	movs	r1, #0
    75b2:	1bd8      	subs	r0, r3, r7
    75b4:	2300      	movs	r3, #0
    75b6:	f7f8 fed7 	bl	368 <__aeabi_lmul>
    75ba:	4a69      	ldr	r2, [pc, #420]	; (7760 <isr+0x1684>)
    75bc:	2307      	movs	r3, #7
    75be:	f7f8 feb3 	bl	328 <__aeabi_uldivmod>
    75c2:	b281      	uxth	r1, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    75c4:	2300      	movs	r3, #0
    75c6:	64a3      	str	r3, [r4, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    75c8:	6523      	str	r3, [r4, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    75ca:	0023      	movs	r3, r4
    75cc:	33ec      	adds	r3, #236	; 0xec
    75ce:	681b      	ldr	r3, [r3, #0]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d03b      	beq.n	764c <isr+0x1570>
				if (pdu_data_tx->len ||
    75d4:	795b      	ldrb	r3, [r3, #5]
    75d6:	2b00      	cmp	r3, #0
    75d8:	d104      	bne.n	75e4 <isr+0x1508>
				    _radio.conn_curr->packet_tx_head_offset) {
    75da:	0023      	movs	r3, r4
    75dc:	33ff      	adds	r3, #255	; 0xff
				if (pdu_data_tx->len ||
    75de:	789b      	ldrb	r3, [r3, #2]
    75e0:	2b00      	cmp	r3, #0
    75e2:	d001      	beq.n	75e8 <isr+0x150c>
					_radio.conn_curr->latency_event = 0;
    75e4:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    75e6:	8563      	strh	r3, [r4, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    75e8:	2200      	movs	r2, #0
    75ea:	4b60      	ldr	r3, [pc, #384]	; (776c <isr+0x1690>)
    75ec:	33fc      	adds	r3, #252	; 0xfc
    75ee:	695b      	ldr	r3, [r3, #20]
    75f0:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    75f2:	4c5e      	ldr	r4, [pc, #376]	; (776c <isr+0x1690>)
    75f4:	0027      	movs	r7, r4
    75f6:	37fc      	adds	r7, #252	; 0xfc
    75f8:	6978      	ldr	r0, [r7, #20]
    75fa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    75fc:	2b00      	cmp	r3, #0
    75fe:	d017      	beq.n	7630 <isr+0x1554>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    7600:	429e      	cmp	r6, r3
    7602:	d300      	bcc.n	7606 <isr+0x152a>
    7604:	e092      	b.n	772c <isr+0x1650>
			_radio.conn_curr->latency_event = 0;
    7606:	2200      	movs	r2, #0
			_radio.conn_curr->supervision_expire -= elapsed_event;
    7608:	1b9b      	subs	r3, r3, r6
    760a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    760c:	8542      	strh	r2, [r0, #42]	; 0x2a
			_radio.conn_curr->supervision_expire -= elapsed_event;
    760e:	8603      	strh	r3, [r0, #48]	; 0x30
				force = 1;
    7610:	3201      	adds	r2, #1
			if (_radio.conn_curr->supervision_expire <= 6) {
    7612:	2b06      	cmp	r3, #6
    7614:	d949      	bls.n	76aa <isr+0x15ce>
			else if (_radio.role == ROLE_SLAVE) {
    7616:	7be3      	ldrb	r3, [r4, #15]
    7618:	2b03      	cmp	r3, #3
    761a:	d109      	bne.n	7630 <isr+0x1554>
				if (latency_event != 0) {
    761c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    761e:	0017      	movs	r7, r2
    7620:	2b00      	cmp	r3, #0
    7622:	d142      	bne.n	76aa <isr+0x15ce>
					force = _radio.conn_curr->slave.force & 0x01;
    7624:	6d43      	ldr	r3, [r0, #84]	; 0x54
    7626:	401a      	ands	r2, r3
					_radio.conn_curr->slave.force >>= 1;
    7628:	40fb      	lsrs	r3, r7
					if (force) {
    762a:	2a00      	cmp	r2, #0
    762c:	d139      	bne.n	76a2 <isr+0x15c6>
					_radio.conn_curr->slave.force >>= 1;
    762e:	6543      	str	r3, [r0, #84]	; 0x54
	force = 0;
    7630:	2200      	movs	r2, #0
    7632:	e03a      	b.n	76aa <isr+0x15ce>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7634:	2300      	movs	r3, #0
    7636:	0038      	movs	r0, r7
    7638:	2100      	movs	r1, #0
    763a:	f7f8 fe95 	bl	368 <__aeabi_lmul>
    763e:	4a48      	ldr	r2, [pc, #288]	; (7760 <isr+0x1684>)
    7640:	2307      	movs	r3, #7
    7642:	f7f8 fe71 	bl	328 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    7646:	2102      	movs	r1, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7648:	b285      	uxth	r5, r0
    764a:	e7bb      	b.n	75c4 <isr+0x14e8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    764c:	0023      	movs	r3, r4
    764e:	3338      	adds	r3, #56	; 0x38
    7650:	781b      	ldrb	r3, [r3, #0]
    7652:	07db      	lsls	r3, r3, #31
    7654:	d5c8      	bpl.n	75e8 <isr+0x150c>
				_radio.conn_curr->latency_event =
    7656:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7658:	e7c5      	b.n	75e6 <isr+0x150a>
		} else if (reason_peer) {
    765a:	2900      	cmp	r1, #0
    765c:	d005      	beq.n	766a <isr+0x158e>
			_radio.conn_curr->master.terminate_ack = 1;
    765e:	2301      	movs	r3, #1
	ticks_drift_minus = 0;
    7660:	2100      	movs	r1, #0
			_radio.conn_curr->master.terminate_ack = 1;
    7662:	3038      	adds	r0, #56	; 0x38
    7664:	7802      	ldrb	r2, [r0, #0]
    7666:	4313      	orrs	r3, r2
    7668:	7003      	strb	r3, [r0, #0]
	ticks_drift_plus = 0;
    766a:	000d      	movs	r5, r1
    766c:	e7bc      	b.n	75e8 <isr+0x150c>
	else if (_radio.conn_curr->connect_expire) {
    766e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    7670:	2d00      	cmp	r5, #0
    7672:	d00f      	beq.n	7694 <isr+0x15b8>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    7674:	42ae      	cmp	r6, r5
    7676:	d204      	bcs.n	7682 <isr+0x15a6>
			_radio.conn_curr->connect_expire -= elapsed_event;
    7678:	1bad      	subs	r5, r5, r6
    767a:	8585      	strh	r5, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    767c:	003d      	movs	r5, r7
    767e:	0029      	movs	r1, r5
    7680:	e7b7      	b.n	75f2 <isr+0x1516>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    7682:	213e      	movs	r1, #62	; 0x3e
			connection_release(_radio.conn_curr);
    7684:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    7686:	f7fd f9c3 	bl	4a10 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    768a:	6960      	ldr	r0, [r4, #20]
    768c:	f7fd fbf2 	bl	4e74 <connection_release>
			_radio.conn_curr = NULL;
    7690:	6167      	str	r7, [r4, #20]
    7692:	e704      	b.n	749e <isr+0x13c2>
		if (!_radio.conn_curr->supervision_expire) {
    7694:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    7696:	2900      	cmp	r1, #0
    7698:	d1f1      	bne.n	767e <isr+0x15a2>
			_radio.conn_curr->supervision_expire =
    769a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
	ticks_drift_plus = 0;
    769c:	000d      	movs	r5, r1
			_radio.conn_curr->supervision_expire =
    769e:	8603      	strh	r3, [r0, #48]	; 0x30
    76a0:	e7a7      	b.n	75f2 <isr+0x1516>
						_radio.conn_curr->slave.force |=
    76a2:	2780      	movs	r7, #128	; 0x80
    76a4:	063f      	lsls	r7, r7, #24
    76a6:	433b      	orrs	r3, r7
    76a8:	6543      	str	r3, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    76aa:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    76ac:	2b00      	cmp	r3, #0
    76ae:	d003      	beq.n	76b8 <isr+0x15dc>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    76b0:	429e      	cmp	r6, r3
    76b2:	d244      	bcs.n	773e <isr+0x1662>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    76b4:	1b9e      	subs	r6, r3, r6
    76b6:	8686      	strh	r6, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    76b8:	0003      	movs	r3, r0
    76ba:	335d      	adds	r3, #93	; 0x5d
    76bc:	781e      	ldrb	r6, [r3, #0]
    76be:	3b01      	subs	r3, #1
    76c0:	781b      	ldrb	r3, [r3, #0]
    76c2:	429e      	cmp	r6, r3
    76c4:	d007      	beq.n	76d6 <isr+0x15fa>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    76c6:	0003      	movs	r3, r0
    76c8:	335e      	adds	r3, #94	; 0x5e
    76ca:	781b      	ldrb	r3, [r3, #0]
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    76cc:	3b01      	subs	r3, #1
    76ce:	2b01      	cmp	r3, #1
    76d0:	d801      	bhi.n	76d6 <isr+0x15fa>
		_radio.conn_curr->latency_event = 0;
    76d2:	2300      	movs	r3, #0
    76d4:	8543      	strh	r3, [r0, #42]	; 0x2a
    76d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    76d8:	2a00      	cmp	r2, #0
    76da:	d103      	bne.n	76e4 <isr+0x1608>
    76dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	lazy = 0;
    76de:	0017      	movs	r7, r2
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    76e0:	42b3      	cmp	r3, r6
    76e2:	d001      	beq.n	76e8 <isr+0x160c>
		lazy = _radio.conn_curr->latency_event + 1;
    76e4:	3301      	adds	r3, #1
    76e6:	b29f      	uxth	r7, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    76e8:	002b      	movs	r3, r5
    76ea:	430b      	orrs	r3, r1
    76ec:	433b      	orrs	r3, r7
    76ee:	d102      	bne.n	76f6 <isr+0x161a>
	    (lazy != 0) || (force != 0)) {
    76f0:	2a00      	cmp	r2, #0
    76f2:	d100      	bne.n	76f6 <isr+0x161a>
    76f4:	e6d3      	b.n	749e <isr+0x13c2>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    76f6:	8c06      	ldrh	r6, [r0, #32]
		ticker_status =
    76f8:	2000      	movs	r0, #0
    76fa:	4b1f      	ldr	r3, [pc, #124]	; (7778 <isr+0x169c>)
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    76fc:	3607      	adds	r6, #7
    76fe:	b2f6      	uxtb	r6, r6
		ticker_status =
    7700:	9305      	str	r3, [sp, #20]
    7702:	9204      	str	r2, [sp, #16]
    7704:	9100      	str	r1, [sp, #0]
    7706:	002b      	movs	r3, r5
				      (void *)(u32_t)ticker_id);
    7708:	9606      	str	r6, [sp, #24]
		ticker_status =
    770a:	9703      	str	r7, [sp, #12]
    770c:	9002      	str	r0, [sp, #8]
    770e:	9001      	str	r0, [sp, #4]
    7710:	0032      	movs	r2, r6
    7712:	0001      	movs	r1, r0
    7714:	f7fb ff28 	bl	3568 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7718:	2302      	movs	r3, #2
    771a:	4398      	bics	r0, r3
    771c:	d100      	bne.n	7720 <isr+0x1644>
    771e:	e6be      	b.n	749e <isr+0x13c2>
    7720:	7ba3      	ldrb	r3, [r4, #14]
    7722:	429e      	cmp	r6, r3
    7724:	d100      	bne.n	7728 <isr+0x164c>
    7726:	e6ba      	b.n	749e <isr+0x13c2>
    7728:	f7fe fd29 	bl	617e <isr+0xa2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    772c:	2108      	movs	r1, #8
    772e:	f7fd f96f 	bl	4a10 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    7732:	6978      	ldr	r0, [r7, #20]
    7734:	f7fd fb9e 	bl	4e74 <connection_release>
			_radio.conn_curr = NULL;
    7738:	2300      	movs	r3, #0
    773a:	617b      	str	r3, [r7, #20]
    773c:	e6af      	b.n	749e <isr+0x13c2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    773e:	2122      	movs	r1, #34	; 0x22
    7740:	e707      	b.n	7552 <isr+0x1476>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    7742:	3b04      	subs	r3, #4
    7744:	2b01      	cmp	r3, #1
    7746:	d901      	bls.n	774c <isr+0x1670>
    7748:	f7fe fd19 	bl	617e <isr+0xa2>
		_radio.state = STATE_NONE;
    774c:	2300      	movs	r3, #0
    774e:	7423      	strb	r3, [r4, #16]
    7750:	f7fe fd44 	bl	61dc <isr+0x100>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    7754:	359b      	adds	r5, #155	; 0x9b
    7756:	2328      	movs	r3, #40	; 0x28
    7758:	e517      	b.n	718a <isr+0x10ae>
    775a:	46c0      	nop			; (mov r8, r8)
    775c:	d4a51000 	.word	0xd4a51000
    7760:	1afd498d 	.word	0x1afd498d
    7764:	00000f48 	.word	0x00000f48
    7768:	00005049 	.word	0x00005049
    776c:	20000258 	.word	0x20000258
    7770:	20002328 	.word	0x20002328
    7774:	3b9aca00 	.word	0x3b9aca00
    7778:	0000502d 	.word	0x0000502d

0000777c <mayfly_xtal_stop_calc>:
{
    777c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    777e:	2302      	movs	r3, #2
	ticker_id_next = 0xff;
    7780:	2523      	movs	r5, #35	; 0x23
{
    7782:	b091      	sub	sp, #68	; 0x44
	ticker_id_next = 0xff;
    7784:	aa02      	add	r2, sp, #8
    7786:	18ad      	adds	r5, r5, r2
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7788:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    778a:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    778c:	2300      	movs	r3, #0
{
    778e:	0004      	movs	r4, r0
	struct connection *conn_curr = NULL;
    7790:	930c      	str	r3, [sp, #48]	; 0x30
	struct connection *conn_next = NULL;
    7792:	930d      	str	r3, [sp, #52]	; 0x34
	ticker_id_next = 0xff;
    7794:	702a      	strb	r2, [r5, #0]
	ticks_to_expire = 0;
    7796:	930e      	str	r3, [sp, #56]	; 0x38
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    7798:	ab0b      	add	r3, sp, #44	; 0x2c
    779a:	9302      	str	r3, [sp, #8]
    779c:	4b6e      	ldr	r3, [pc, #440]	; (7958 <mayfly_xtal_stop_calc+0x1dc>)
    779e:	002a      	movs	r2, r5
    77a0:	9301      	str	r3, [sp, #4]
    77a2:	ab0e      	add	r3, sp, #56	; 0x38
    77a4:	9300      	str	r3, [sp, #0]
    77a6:	2101      	movs	r1, #1
    77a8:	ab0f      	add	r3, sp, #60	; 0x3c
    77aa:	2000      	movs	r0, #0
    77ac:	f7fb ff5a 	bl	3664 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    77b0:	2802      	cmp	r0, #2
    77b2:	d009      	beq.n	77c8 <mayfly_xtal_stop_calc+0x4c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    77b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    77b6:	2b00      	cmp	r3, #0
    77b8:	d00a      	beq.n	77d0 <mayfly_xtal_stop_calc+0x54>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    77ba:	b662      	cpsie	i
    77bc:	2004      	movs	r0, #4
    77be:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    77c0:	2101      	movs	r1, #1
    77c2:	2000      	movs	r0, #0
    77c4:	f7fb ffb4 	bl	3730 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    77c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    77ca:	2b02      	cmp	r3, #2
    77cc:	d0f8      	beq.n	77c0 <mayfly_xtal_stop_calc+0x44>
    77ce:	e7f1      	b.n	77b4 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    77d0:	782b      	ldrb	r3, [r5, #0]
				    _radio.connection_count));
    77d2:	2bff      	cmp	r3, #255	; 0xff
    77d4:	d005      	beq.n	77e2 <mayfly_xtal_stop_calc+0x66>
    77d6:	4a61      	ldr	r2, [pc, #388]	; (795c <mayfly_xtal_stop_calc+0x1e0>)
    77d8:	32ff      	adds	r2, #255	; 0xff
    77da:	7b52      	ldrb	r2, [r2, #13]
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    77dc:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    77de:	4293      	cmp	r3, r2
    77e0:	dada      	bge.n	7798 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    77e2:	1f5a      	subs	r2, r3, #5
    77e4:	b2d2      	uxtb	r2, r2
    77e6:	4f5e      	ldr	r7, [pc, #376]	; (7960 <mayfly_xtal_stop_calc+0x1e4>)
    77e8:	2af9      	cmp	r2, #249	; 0xf9
    77ea:	d805      	bhi.n	77f8 <mayfly_xtal_stop_calc+0x7c>
				_radio.connection_count))) {
    77ec:	4a5b      	ldr	r2, [pc, #364]	; (795c <mayfly_xtal_stop_calc+0x1e0>)
    77ee:	32ff      	adds	r2, #255	; 0xff
    77f0:	7b52      	ldrb	r2, [r2, #13]
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    77f2:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    77f4:	4293      	cmp	r3, r2
    77f6:	db07      	blt.n	7808 <mayfly_xtal_stop_calc+0x8c>
		if (s_xtal_retained) {
    77f8:	783b      	ldrb	r3, [r7, #0]
    77fa:	2b00      	cmp	r3, #0
    77fc:	d002      	beq.n	7804 <mayfly_xtal_stop_calc+0x88>
    77fe:	2001      	movs	r0, #1
    7800:	f7fd f858 	bl	48b4 <mayfly_xtal_retain.part.15>
}
    7804:	b011      	add	sp, #68	; 0x44
    7806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    7808:	b2e0      	uxtb	r0, r4
    780a:	a90c      	add	r1, sp, #48	; 0x30
    780c:	f7fd f834 	bl	4878 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    7810:	2800      	cmp	r0, #0
    7812:	d0d2      	beq.n	77ba <mayfly_xtal_stop_calc+0x3e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    7814:	6802      	ldr	r2, [r0, #0]
    7816:	6841      	ldr	r1, [r0, #4]
    7818:	2a00      	cmp	r2, #0
    781a:	da2b      	bge.n	7874 <mayfly_xtal_stop_calc+0xf8>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    781c:	6883      	ldr	r3, [r0, #8]
    781e:	428b      	cmp	r3, r1
    7820:	d200      	bcs.n	7824 <mayfly_xtal_stop_calc+0xa8>
    7822:	000b      	movs	r3, r1
	ticks_slot_abs += hdr_curr->ticks_slot;
    7824:	68c2      	ldr	r2, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7826:	a90d      	add	r1, sp, #52	; 0x34
	ticks_slot_abs += hdr_curr->ticks_slot;
    7828:	189b      	adds	r3, r3, r2
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    782a:	7828      	ldrb	r0, [r5, #0]
	ticks_slot_abs += hdr_curr->ticks_slot;
    782c:	9309      	str	r3, [sp, #36]	; 0x24
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    782e:	f7fd f823 	bl	4878 <hdr_conn_get>
    7832:	1e04      	subs	r4, r0, #0
	LL_ASSERT(hdr_next);
    7834:	d0c1      	beq.n	77ba <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7836:	6843      	ldr	r3, [r0, #4]
    7838:	6886      	ldr	r6, [r0, #8]
    783a:	429e      	cmp	r6, r3
    783c:	d200      	bcs.n	7840 <mayfly_xtal_stop_calc+0xc4>
    783e:	001e      	movs	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7840:	6823      	ldr	r3, [r4, #0]
    7842:	2b00      	cmp	r3, #0
    7844:	da05      	bge.n	7852 <mayfly_xtal_stop_calc+0xd6>
		ticks_to_expire -=
    7846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			(hdr_next->ticks_xtal_to_start &
    7848:	005b      	lsls	r3, r3, #1
		ticks_to_expire -=
    784a:	18b2      	adds	r2, r6, r2
			(hdr_next->ticks_xtal_to_start &
    784c:	085b      	lsrs	r3, r3, #1
		ticks_to_expire -=
    784e:	1ad3      	subs	r3, r2, r3
    7850:	930e      	str	r3, [sp, #56]	; 0x38
	if (ticks_to_expire >
    7852:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7856:	3331      	adds	r3, #49	; 0x31
    7858:	4293      	cmp	r3, r2
    785a:	d210      	bcs.n	787e <mayfly_xtal_stop_calc+0x102>
		if (s_xtal_retained) {
    785c:	783b      	ldrb	r3, [r7, #0]
    785e:	2b00      	cmp	r3, #0
    7860:	d002      	beq.n	7868 <mayfly_xtal_stop_calc+0xec>
    7862:	2001      	movs	r0, #1
    7864:	f7fd f826 	bl	48b4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    7868:	782a      	ldrb	r2, [r5, #0]
    786a:	2101      	movs	r1, #1
    786c:	0020      	movs	r0, r4
    786e:	f7fd f8ab 	bl	49c8 <prepare_normal_set>
    7872:	e7c7      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7874:	000b      	movs	r3, r1
    7876:	4291      	cmp	r1, r2
    7878:	d2d4      	bcs.n	7824 <mayfly_xtal_stop_calc+0xa8>
    787a:	0013      	movs	r3, r2
    787c:	e7d2      	b.n	7824 <mayfly_xtal_stop_calc+0xa8>
		if (!s_xtal_retained) {
    787e:	7839      	ldrb	r1, [r7, #0]
    7880:	2900      	cmp	r1, #0
    7882:	d108      	bne.n	7896 <mayfly_xtal_stop_calc+0x11a>
			s_xtal_retained = 1;
    7884:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    7886:	4b37      	ldr	r3, [pc, #220]	; (7964 <mayfly_xtal_stop_calc+0x1e8>)
    7888:	000a      	movs	r2, r1
			s_xtal_retained = 1;
    788a:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    788c:	f7fb f8b6 	bl	29fc <mayfly_enqueue>
			LL_ASSERT(!retval);
    7890:	2800      	cmp	r0, #0
    7892:	d000      	beq.n	7896 <mayfly_xtal_stop_calc+0x11a>
    7894:	e791      	b.n	77ba <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    7896:	6823      	ldr	r3, [r4, #0]
    7898:	2b00      	cmp	r3, #0
    789a:	db14      	blt.n	78c6 <mayfly_xtal_stop_calc+0x14a>
    789c:	429e      	cmp	r6, r3
    789e:	d212      	bcs.n	78c6 <mayfly_xtal_stop_calc+0x14a>
			ticker_status =
    78a0:	2000      	movs	r0, #0
    78a2:	4931      	ldr	r1, [pc, #196]	; (7968 <mayfly_xtal_stop_calc+0x1ec>)
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    78a4:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    78a6:	b29b      	uxth	r3, r3
			ticker_status =
    78a8:	782a      	ldrb	r2, [r5, #0]
    78aa:	9105      	str	r1, [sp, #20]
    78ac:	9302      	str	r3, [sp, #8]
    78ae:	9406      	str	r4, [sp, #24]
    78b0:	9004      	str	r0, [sp, #16]
    78b2:	9003      	str	r0, [sp, #12]
    78b4:	9001      	str	r0, [sp, #4]
    78b6:	9000      	str	r0, [sp, #0]
    78b8:	2101      	movs	r1, #1
    78ba:	f7fb fe55 	bl	3568 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    78be:	2302      	movs	r3, #2
    78c0:	4398      	bics	r0, r3
    78c2:	d000      	beq.n	78c6 <mayfly_xtal_stop_calc+0x14a>
    78c4:	e779      	b.n	77ba <mayfly_xtal_stop_calc+0x3e>
		if (!conn_curr || !conn_next) {
    78c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    78c8:	2d00      	cmp	r5, #0
    78ca:	d09b      	beq.n	7804 <mayfly_xtal_stop_calc+0x88>
    78cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    78ce:	2c00      	cmp	r4, #0
    78d0:	d098      	beq.n	7804 <mayfly_xtal_stop_calc+0x88>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    78d2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    78d4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    78d6:	4298      	cmp	r0, r3
    78d8:	d000      	beq.n	78dc <mayfly_xtal_stop_calc+0x160>
    78da:	e793      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    78dc:	2324      	movs	r3, #36	; 0x24
    78de:	4a23      	ldr	r2, [pc, #140]	; (796c <mayfly_xtal_stop_calc+0x1f0>)
    78e0:	33ff      	adds	r3, #255	; 0xff
    78e2:	2100      	movs	r1, #0
    78e4:	f7f8 fd40 	bl	368 <__aeabi_lmul>
    78e8:	4a21      	ldr	r2, [pc, #132]	; (7970 <mayfly_xtal_stop_calc+0x1f4>)
    78ea:	2307      	movs	r3, #7
    78ec:	f7f8 fd1c 	bl	328 <__aeabi_uldivmod>
			while (ticks_to_expire > ticks_conn_interval) {
    78f0:	2200      	movs	r2, #0
    78f2:	2101      	movs	r1, #1
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    78f4:	0200      	lsls	r0, r0, #8
    78f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    78f8:	0a00      	lsrs	r0, r0, #8
			while (ticks_to_expire > ticks_conn_interval) {
    78fa:	4298      	cmp	r0, r3
    78fc:	d318      	bcc.n	7930 <mayfly_xtal_stop_calc+0x1b4>
    78fe:	2a00      	cmp	r2, #0
    7900:	d000      	beq.n	7904 <mayfly_xtal_stop_calc+0x188>
    7902:	930e      	str	r3, [sp, #56]	; 0x38
			if (conn_curr->role && !conn_next->role &&
    7904:	7f69      	ldrb	r1, [r5, #29]
    7906:	7f62      	ldrb	r2, [r4, #29]
    7908:	297f      	cmp	r1, #127	; 0x7f
    790a:	d914      	bls.n	7936 <mayfly_xtal_stop_calc+0x1ba>
    790c:	2a7f      	cmp	r2, #127	; 0x7f
    790e:	d900      	bls.n	7912 <mayfly_xtal_stop_calc+0x196>
    7910:	e778      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
			     (ticks_slot_abs +
    7912:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7914:	3214      	adds	r2, #20
			if (conn_curr->role && !conn_next->role &&
    7916:	429a      	cmp	r2, r3
    7918:	d800      	bhi.n	791c <mayfly_xtal_stop_calc+0x1a0>
    791a:	e773      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_curr);
    791c:	0028      	movs	r0, r5
    791e:	f7fc fd37 	bl	4390 <conn_update_req>
				if (status == 2) {
    7922:	2802      	cmp	r0, #2
    7924:	d000      	beq.n	7928 <mayfly_xtal_stop_calc+0x1ac>
    7926:	e76d      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_next);
    7928:	980d      	ldr	r0, [sp, #52]	; 0x34
					conn_update_req(conn_curr);
    792a:	f7fc fd31 	bl	4390 <conn_update_req>
    792e:	e769      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
				ticks_to_expire -= ticks_conn_interval;
    7930:	1a1b      	subs	r3, r3, r0
    7932:	000a      	movs	r2, r1
    7934:	e7e1      	b.n	78fa <mayfly_xtal_stop_calc+0x17e>
			} else if (!conn_curr->role && conn_next->role &&
    7936:	2a7f      	cmp	r2, #127	; 0x7f
    7938:	d800      	bhi.n	793c <mayfly_xtal_stop_calc+0x1c0>
    793a:	e763      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
				    (ticks_slot_abs +
    793c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    793e:	3214      	adds	r2, #20
			} else if (!conn_curr->role && conn_next->role &&
    7940:	429a      	cmp	r2, r3
    7942:	d800      	bhi.n	7946 <mayfly_xtal_stop_calc+0x1ca>
    7944:	e75e      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_next);
    7946:	0020      	movs	r0, r4
    7948:	f7fc fd22 	bl	4390 <conn_update_req>
				if (status == 2) {
    794c:	2802      	cmp	r0, #2
    794e:	d000      	beq.n	7952 <mayfly_xtal_stop_calc+0x1d6>
    7950:	e758      	b.n	7804 <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_curr);
    7952:	980c      	ldr	r0, [sp, #48]	; 0x30
    7954:	e7e9      	b.n	792a <mayfly_xtal_stop_calc+0x1ae>
    7956:	46c0      	nop			; (mov r8, r8)
    7958:	000042f9 	.word	0x000042f9
    795c:	20000258 	.word	0x20000258
    7960:	2000045c 	.word	0x2000045c
    7964:	20002388 	.word	0x20002388
    7968:	000042fd 	.word	0x000042fd
    796c:	09ce5400 	.word	0x09ce5400
    7970:	1afd498d 	.word	0x1afd498d

00007974 <event_master>:
{
    7974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7976:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7978:	4b49      	ldr	r3, [pc, #292]	; (7aa0 <event_master+0x12c>)
{
    797a:	0006      	movs	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    797c:	7bdd      	ldrb	r5, [r3, #15]
    797e:	b2ed      	uxtb	r5, r5
    7980:	2d00      	cmp	r5, #0
    7982:	d002      	beq.n	798a <event_master+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7984:	b662      	cpsie	i
    7986:	2004      	movs	r0, #4
    7988:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    798a:	7b1a      	ldrb	r2, [r3, #12]
    798c:	8c21      	ldrh	r1, [r4, #32]
    798e:	b2d2      	uxtb	r2, r2
    7990:	3107      	adds	r1, #7
    7992:	428a      	cmp	r2, r1
    7994:	d1f6      	bne.n	7984 <event_master+0x10>
	_radio.role = ROLE_MASTER;
    7996:	2704      	movs	r7, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7998:	b2d2      	uxtb	r2, r2
	_radio.role = ROLE_MASTER;
    799a:	73df      	strb	r7, [r3, #15]
	_radio.state = STATE_TX;
    799c:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    799e:	731d      	strb	r5, [r3, #12]
	_radio.ticker_id_event =
    79a0:	735a      	strb	r2, [r3, #13]
	_radio.packet_counter = 0;
    79a2:	001a      	movs	r2, r3
	_radio.state = STATE_TX;
    79a4:	7418      	strb	r0, [r3, #16]
	_radio.packet_counter = 0;
    79a6:	32ff      	adds	r2, #255	; 0xff
	_radio.ticks_anchor = ticks_at_expire;
    79a8:	605e      	str	r6, [r3, #4]
	_radio.conn_curr = conn;
    79aa:	33fc      	adds	r3, #252	; 0xfc
	_radio.packet_counter = 0;
    79ac:	7555      	strb	r5, [r2, #21]
	_radio.crc_expire = 0;
    79ae:	7595      	strb	r5, [r2, #22]
	_radio.conn_curr = conn;
    79b0:	615c      	str	r4, [r3, #20]
	conn->latency_event = conn->latency_prepare;
    79b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    79b4:	8525      	strh	r5, [r4, #40]	; 0x28
	conn->latency_event = conn->latency_prepare;
    79b6:	8563      	strh	r3, [r4, #42]	; 0x2a
	packet_tx_enqueue(2);
    79b8:	f7fd fa0c 	bl	4dd4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    79bc:	a901      	add	r1, sp, #4
    79be:	0020      	movs	r0, r4
    79c0:	f7fe fb20 	bl	6004 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    79c4:	0021      	movs	r1, r4
    79c6:	2201      	movs	r2, #1
    79c8:	31a8      	adds	r1, #168	; 0xa8
    79ca:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    79cc:	7809      	ldrb	r1, [r1, #0]
	pdu_data_tx->sn = conn->sn;
    79ce:	4013      	ands	r3, r2
    79d0:	00d8      	lsls	r0, r3, #3
    79d2:	9b01      	ldr	r3, [sp, #4]
    79d4:	3207      	adds	r2, #7
    79d6:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
    79d8:	0849      	lsrs	r1, r1, #1
	pdu_data_tx->sn = conn->sn;
    79da:	4393      	bics	r3, r2
	pdu_data_tx->nesn = conn->nesn;
    79dc:	4303      	orrs	r3, r0
    79de:	43bb      	bics	r3, r7
    79e0:	0027      	movs	r7, r4
    79e2:	3a07      	subs	r2, #7
    79e4:	4011      	ands	r1, r2
    79e6:	0089      	lsls	r1, r1, #2
    79e8:	9a01      	ldr	r2, [sp, #4]
    79ea:	430b      	orrs	r3, r1
    79ec:	7013      	strb	r3, [r2, #0]
	connection_configure(conn);
    79ee:	0020      	movs	r0, r4
    79f0:	f7fe fa34 	bl	5e5c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    79f4:	2096      	movs	r0, #150	; 0x96
    79f6:	f001 fb19 	bl	902c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    79fa:	0028      	movs	r0, r5
    79fc:	f001 fa84 	bl	8f08 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    7a00:	9901      	ldr	r1, [sp, #4]
    7a02:	0020      	movs	r0, r4
    7a04:	f7fc ff8e 	bl	4924 <tx_packet_set>
	if (conn->data_chan_sel) {
    7a08:	7f63      	ldrb	r3, [r4, #29]
    7a0a:	3717      	adds	r7, #23
    7a0c:	069d      	lsls	r5, r3, #26
    7a0e:	065b      	lsls	r3, r3, #25
    7a10:	d520      	bpl.n	7a54 <event_master+0xe0>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7a12:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7a14:	0eab      	lsrs	r3, r5, #26
    7a16:	3801      	subs	r0, #1
    7a18:	8be1      	ldrh	r1, [r4, #30]
    7a1a:	b280      	uxth	r0, r0
    7a1c:	003a      	movs	r2, r7
    7a1e:	f7fd fd6d 	bl	54fc <chan_sel_2>
	chan_set(data_chan_use);
    7a22:	f7fd f939 	bl	4c98 <chan_set>
		remainder_us = radio_tmr_start(1,
    7a26:	0031      	movs	r1, r6
    7a28:	4d1d      	ldr	r5, [pc, #116]	; (7aa0 <event_master+0x12c>)
    7a2a:	3109      	adds	r1, #9
    7a2c:	68aa      	ldr	r2, [r5, #8]
    7a2e:	2001      	movs	r0, #1
    7a30:	f001 fb04 	bl	903c <radio_tmr_start>
		radio_tmr_end_capture();
    7a34:	f001 fbbc 	bl	91b0 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7a38:	8c21      	ldrh	r1, [r4, #32]
    7a3a:	0032      	movs	r2, r6
    7a3c:	3107      	adds	r1, #7
    7a3e:	b2c9      	uxtb	r1, r1
    7a40:	0020      	movs	r0, r4
    7a42:	f7fd fd9b 	bl	557c <preempt_calc>
	if (0 !=
    7a46:	2800      	cmp	r0, #0
    7a48:	d020      	beq.n	7a8c <event_master+0x118>
		_radio.state = STATE_STOP;
    7a4a:	2304      	movs	r3, #4
    7a4c:	742b      	strb	r3, [r5, #16]
		radio_disable();
    7a4e:	f001 fa0b 	bl	8e68 <radio_disable>
}
    7a52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7a54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    7a56:	7fa0      	ldrb	r0, [r4, #30]
    7a58:	3301      	adds	r3, #1
    7a5a:	4358      	muls	r0, r3
    7a5c:	7fe3      	ldrb	r3, [r4, #31]
    7a5e:	2125      	movs	r1, #37	; 0x25
    7a60:	18c0      	adds	r0, r0, r3
    7a62:	f7f8 fc55 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7a66:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7a68:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    7a6a:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7a6c:	08c3      	lsrs	r3, r0, #3
    7a6e:	5cfb      	ldrb	r3, [r7, r3]
    7a70:	4011      	ands	r1, r2
    7a72:	410b      	asrs	r3, r1
    7a74:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    7a76:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7a78:	4213      	tst	r3, r2
    7a7a:	d1d2      	bne.n	7a22 <event_master+0xae>
		chan_index = chan_next % chan_count;
    7a7c:	0029      	movs	r1, r5
    7a7e:	f7f8 fbe7 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    7a82:	0038      	movs	r0, r7
		chan_index = chan_next % chan_count;
    7a84:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    7a86:	f7fc fc48 	bl	431a <chan_sel_remap>
    7a8a:	e7ca      	b.n	7a22 <event_master+0xae>
		ticker_status =
    7a8c:	0003      	movs	r3, r0
    7a8e:	4a05      	ldr	r2, [pc, #20]	; (7aa4 <event_master+0x130>)
    7a90:	0001      	movs	r1, r0
    7a92:	f7fb fe1d 	bl	36d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7a96:	2302      	movs	r3, #2
    7a98:	4398      	bics	r0, r3
    7a9a:	d000      	beq.n	7a9e <event_master+0x12a>
    7a9c:	e772      	b.n	7984 <event_master+0x10>
    7a9e:	e7d8      	b.n	7a52 <event_master+0xde>
    7aa0:	20000258 	.word	0x20000258
    7aa4:	0000485d 	.word	0x0000485d

00007aa8 <radio_init>:
{
    7aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aaa:	b087      	sub	sp, #28
    7aac:	9201      	str	r2, [sp, #4]
    7aae:	aa0c      	add	r2, sp, #48	; 0x30
    7ab0:	7816      	ldrb	r6, [r2, #0]
    7ab2:	aa0d      	add	r2, sp, #52	; 0x34
    7ab4:	8817      	ldrh	r7, [r2, #0]
    7ab6:	aa0e      	add	r2, sp, #56	; 0x38
    7ab8:	8812      	ldrh	r2, [r2, #0]
    7aba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    7abc:	9205      	str	r2, [sp, #20]
    7abe:	aa10      	add	r2, sp, #64	; 0x40
    7ac0:	8812      	ldrh	r2, [r2, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7ac2:	2482      	movs	r4, #130	; 0x82
{
    7ac4:	9202      	str	r2, [sp, #8]
	_radio.hf_clock = hf_clock;
    7ac6:	4a35      	ldr	r2, [pc, #212]	; (7b9c <radio_init+0xf4>)
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7ac8:	0064      	lsls	r4, r4, #1
	_radio.hf_clock = hf_clock;
    7aca:	6010      	str	r0, [r2, #0]
	_radio.sca = sca;
    7acc:	0010      	movs	r0, r2
    7ace:	30ff      	adds	r0, #255	; 0xff
    7ad0:	7741      	strb	r1, [r0, #29]
	mem_radio_end = mem_radio + mem_size;
    7ad2:	9902      	ldr	r1, [sp, #8]
    7ad4:	1869      	adds	r1, r5, r1
    7ad6:	9103      	str	r1, [sp, #12]
	_radio.connection_count = connection_count_max;
    7ad8:	4669      	mov	r1, sp
    7ada:	7909      	ldrb	r1, [r1, #4]
    7adc:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
    7ade:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7ae0:	9901      	ldr	r1, [sp, #4]
	_radio.conn_pool = mem_radio;
    7ae2:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7ae4:	434c      	muls	r4, r1
	_radio.conn_pool = mem_radio;
    7ae6:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7ae8:	192c      	adds	r4, r5, r4
	tx_count_max += 1;
    7aea:	1c75      	adds	r5, r6, #1
	rx_count_max += 3;
    7aec:	1cd9      	adds	r1, r3, #3
	tx_count_max += 1;
    7aee:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
    7af0:	3304      	adds	r3, #4
	tx_count_max += 1;
    7af2:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
    7af4:	b2dd      	uxtb	r5, r3
    7af6:	239a      	movs	r3, #154	; 0x9a
	_radio.packet_tx_count = (tx_count_max + 1);
    7af8:	3602      	adds	r6, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    7afa:	005b      	lsls	r3, r3, #1
    7afc:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    7afe:	b2f6      	uxtb	r6, r6
    7b00:	3334      	adds	r3, #52	; 0x34
    7b02:	54d6      	strb	r6, [r2, r3]
	rx_count_max += 3;
    7b04:	b2c9      	uxtb	r1, r1
	_radio.link_rx_data_quota = rx_count_max;
    7b06:	3b20      	subs	r3, #32
    7b08:	54d1      	strb	r1, [r2, r3]
		(sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);
    7b0a:	00ab      	lsls	r3, r5, #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7b0c:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx = (void *)mem_radio;
    7b0e:	6344      	str	r4, [r0, #52]	; 0x34
	mem_radio +=
    7b10:	18e4      	adds	r4, r4, r3
	_radio.pkt_tx = (void *)mem_radio;
    7b12:	6644      	str	r4, [r0, #100]	; 0x64
	_radio.packet_data_octets_max = packet_data_octets_max;
    7b14:	32fe      	adds	r2, #254	; 0xfe
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7b16:	19a4      	adds	r4, r4, r6
	    (offsetof(struct pdu_data, lldata) +
    7b18:	1cfb      	adds	r3, r7, #3
	_radio.pkt_release = (void *)mem_radio;
    7b1a:	6684      	str	r4, [r0, #104]	; 0x68
	_radio.packet_data_octets_max = packet_data_octets_max;
    7b1c:	8557      	strh	r7, [r2, #42]	; 0x2a
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7b1e:	19a4      	adds	r4, r4, r6
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    7b20:	2b28      	cmp	r3, #40	; 0x28
    7b22:	d92f      	bls.n	7b84 <radio_init+0xdc>
		_radio.packet_rx_data_pool_size =
    7b24:	2303      	movs	r3, #3
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    7b26:	370e      	adds	r7, #14
		_radio.packet_rx_data_pool_size =
    7b28:	439f      	bics	r7, r3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7b2a:	4e1c      	ldr	r6, [pc, #112]	; (7b9c <radio_init+0xf4>)
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    7b2c:	4379      	muls	r1, r7
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7b2e:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
    7b30:	8591      	strh	r1, [r2, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7b32:	2130      	movs	r1, #48	; 0x30
    7b34:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7b36:	8d9f      	ldrh	r7, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7b38:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7b3a:	0038      	movs	r0, r7
    7b3c:	f7f8 fb44 	bl	1c8 <__aeabi_uidiv>
    7b40:	2397      	movs	r3, #151	; 0x97
	_radio.pkt_rx_data_pool = mem_radio;
    7b42:	0032      	movs	r2, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7b44:	005b      	lsls	r3, r3, #1
    7b46:	54f0      	strb	r0, [r6, r3]
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7b48:	9b01      	ldr	r3, [sp, #4]
	_radio.pkt_rx_data_pool = mem_radio;
    7b4a:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7b4c:	18ed      	adds	r5, r5, r3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7b4e:	2303      	movs	r3, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7b50:	00ed      	lsls	r5, r5, #3
	_radio.pkt_rx_data_pool = mem_radio;
    7b52:	6254      	str	r4, [r2, #36]	; 0x24
	mem_radio += _radio.packet_rx_data_pool_size;
    7b54:	19e4      	adds	r4, r4, r7
	_radio.link_rx_pool = mem_radio;
    7b56:	63d4      	str	r4, [r2, #60]	; 0x3c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7b58:	1964      	adds	r4, r4, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7b5a:	9d05      	ldr	r5, [sp, #20]
	_radio.pkt_tx_ctrl_pool = mem_radio;
    7b5c:	6514      	str	r4, [r2, #80]	; 0x50
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7b5e:	350a      	adds	r5, #10
    7b60:	439d      	bics	r5, r3
	_radio.packet_tx_data_size =
    7b62:	335a      	adds	r3, #90	; 0x5a
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7b64:	b2ad      	uxth	r5, r5
	_radio.packet_tx_data_size =
    7b66:	33ff      	adds	r3, #255	; 0xff
    7b68:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    7b6a:	9b04      	ldr	r3, [sp, #16]
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    7b6c:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    7b6e:	436b      	muls	r3, r5
    7b70:	18e5      	adds	r5, r4, r3
	retcode = (mem_radio - mem_radio_end);
    7b72:	9b03      	ldr	r3, [sp, #12]
	_radio.pkt_tx_data_pool = mem_radio;
    7b74:	6594      	str	r4, [r2, #88]	; 0x58
	retcode = (mem_radio - mem_radio_end);
    7b76:	1aed      	subs	r5, r5, r3
	if (retcode) {
    7b78:	d006      	beq.n	7b88 <radio_init+0xe0>
		return (retcode + mem_size);
    7b7a:	9b02      	ldr	r3, [sp, #8]
    7b7c:	18ed      	adds	r5, r5, r3
}
    7b7e:	0028      	movs	r0, r5
    7b80:	b007      	add	sp, #28
    7b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    7b84:	2730      	movs	r7, #48	; 0x30
    7b86:	e7d0      	b.n	7b2a <radio_init+0x82>
	_radio.fc_ena = 1;
    7b88:	23bb      	movs	r3, #187	; 0xbb
    7b8a:	2201      	movs	r2, #1
    7b8c:	005b      	lsls	r3, r3, #1
    7b8e:	54f2      	strb	r2, [r6, r3]
	common_init();
    7b90:	f7fd fc36 	bl	5400 <common_init>
	radio_setup();
    7b94:	f001 f8be 	bl	8d14 <radio_setup>
	return retcode;
    7b98:	e7f1      	b.n	7b7e <radio_init+0xd6>
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	20000258 	.word	0x20000258

00007ba0 <ll_reset>:
{
    7ba0:	b570      	push	{r4, r5, r6, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    7ba2:	2103      	movs	r1, #3
    7ba4:	2005      	movs	r0, #5
    7ba6:	f7fc fc8d 	bl	44c4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    7baa:	2104      	movs	r1, #4
    7bac:	2006      	movs	r0, #6
    7bae:	f7fc fc89 	bl	44c4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    7bb2:	4c25      	ldr	r4, [pc, #148]	; (7c48 <ll_reset+0xa8>)
    7bb4:	2500      	movs	r5, #0
    7bb6:	0026      	movs	r6, r4
    7bb8:	36ff      	adds	r6, #255	; 0xff
    7bba:	7b73      	ldrb	r3, [r6, #13]
    7bbc:	42ab      	cmp	r3, r5
    7bbe:	d83b      	bhi.n	7c38 <ll_reset+0x98>
	_radio.advertiser.is_enabled = 0;
    7bc0:	217f      	movs	r1, #127	; 0x7f
    7bc2:	1d62      	adds	r2, r4, #5
    7bc4:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    7bc6:	2500      	movs	r5, #0
	_radio.advertiser.is_enabled = 0;
    7bc8:	400b      	ands	r3, r1
    7bca:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    7bcc:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    7bce:	0022      	movs	r2, r4
	_radio.advertiser.conn = NULL;
    7bd0:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
    7bd2:	32dc      	adds	r2, #220	; 0xdc
	_radio.advertiser.conn = NULL;
    7bd4:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
    7bd6:	7813      	ldrb	r3, [r2, #0]
    7bd8:	397e      	subs	r1, #126	; 0x7e
    7bda:	438b      	bics	r3, r1
    7bdc:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
    7bde:	0023      	movs	r3, r4
    7be0:	33fc      	adds	r3, #252	; 0xfc
    7be2:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7be4:	0023      	movs	r3, r4
    7be6:	312f      	adds	r1, #47	; 0x2f
    7be8:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7bea:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7bec:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7bee:	f7f8 faeb 	bl	1c8 <__aeabi_uidiv>
    7bf2:	2397      	movs	r3, #151	; 0x97
    7bf4:	005b      	lsls	r3, r3, #1
    7bf6:	54e0      	strb	r0, [r4, r3]
	_radio.packet_rx_last = 0;
    7bf8:	2336      	movs	r3, #54	; 0x36
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7bfa:	22a4      	movs	r2, #164	; 0xa4
	_radio.packet_rx_last = 0;
    7bfc:	33ff      	adds	r3, #255	; 0xff
    7bfe:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    7c00:	3301      	adds	r3, #1
    7c02:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7c04:	3b02      	subs	r3, #2
    7c06:	5ce3      	ldrb	r3, [r4, r3]
    7c08:	0052      	lsls	r2, r2, #1
    7c0a:	3b01      	subs	r3, #1
    7c0c:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    7c0e:	236a      	movs	r3, #106	; 0x6a
    7c10:	33ff      	adds	r3, #255	; 0xff
    7c12:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    7c14:	3301      	adds	r3, #1
    7c16:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    7c18:	236c      	movs	r3, #108	; 0x6c
    7c1a:	33ff      	adds	r3, #255	; 0xff
    7c1c:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;
    7c1e:	3301      	adds	r3, #1
    7c20:	54e5      	strb	r5, [r4, r3]
	_radio.fc_ack = _radio.fc_req;
    7c22:	3308      	adds	r3, #8
    7c24:	5ce2      	ldrb	r2, [r4, r3]
    7c26:	2376      	movs	r3, #118	; 0x76
	ll_filter_reset(false);
    7c28:	0028      	movs	r0, r5
	_radio.fc_ack = _radio.fc_req;
    7c2a:	33ff      	adds	r3, #255	; 0xff
    7c2c:	54e2      	strb	r2, [r4, r3]
	ll_filter_reset(false);
    7c2e:	f000 fe8f 	bl	8950 <ll_filter_reset>
	common_init();
    7c32:	f7fd fbe5 	bl	5400 <common_init>
}
    7c36:	bd70      	pop	{r4, r5, r6, pc}
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    7c38:	1de8      	adds	r0, r5, #7
    7c3a:	b2c0      	uxtb	r0, r0
    7c3c:	21ff      	movs	r1, #255	; 0xff
	     conn_handle++) {
    7c3e:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    7c40:	f7fc fc40 	bl	44c4 <role_disable>
	     conn_handle++) {
    7c44:	b2ad      	uxth	r5, r5
    7c46:	e7b8      	b.n	7bba <ll_reset+0x1a>
    7c48:	20000258 	.word	0x20000258

00007c4c <radio_adv_data_get>:
	return &_radio.advertiser.adv_data;
    7c4c:	4801      	ldr	r0, [pc, #4]	; (7c54 <radio_adv_data_get+0x8>)
}
    7c4e:	3026      	adds	r0, #38	; 0x26
    7c50:	4770      	bx	lr
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	20000258 	.word	0x20000258

00007c58 <radio_scan_data_get>:
	return &_radio.advertiser.scan_data;
    7c58:	4801      	ldr	r0, [pc, #4]	; (7c60 <radio_scan_data_get+0x8>)
}
    7c5a:	3076      	adds	r0, #118	; 0x76
    7c5c:	4770      	bx	lr
    7c5e:	46c0      	nop			; (mov r8, r8)
    7c60:	20000258 	.word	0x20000258

00007c64 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    7c64:	4b02      	ldr	r3, [pc, #8]	; (7c70 <ll_adv_is_enabled+0xc>)
    7c66:	3305      	adds	r3, #5
    7c68:	7fd8      	ldrb	r0, [r3, #31]
    7c6a:	09c0      	lsrs	r0, r0, #7
}
    7c6c:	4770      	bx	lr
    7c6e:	46c0      	nop			; (mov r8, r8)
    7c70:	20000258 	.word	0x20000258

00007c74 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    7c74:	4b04      	ldr	r3, [pc, #16]	; (7c88 <radio_adv_filter_pol_get+0x14>)
    7c76:	2000      	movs	r0, #0
    7c78:	1d5a      	adds	r2, r3, #5
    7c7a:	7fd2      	ldrb	r2, [r2, #31]
    7c7c:	2a7f      	cmp	r2, #127	; 0x7f
    7c7e:	d902      	bls.n	7c86 <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
    7c80:	3306      	adds	r3, #6
    7c82:	7fd8      	ldrb	r0, [r3, #31]
    7c84:	0980      	lsrs	r0, r0, #6
}
    7c86:	4770      	bx	lr
    7c88:	20000258 	.word	0x20000258

00007c8c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7c8c:	4a09      	ldr	r2, [pc, #36]	; (7cb4 <ll_scan_is_enabled+0x28>)
    7c8e:	0013      	movs	r3, r2
    7c90:	33dc      	adds	r3, #220	; 0xdc
    7c92:	7818      	ldrb	r0, [r3, #0]
    7c94:	0013      	movs	r3, r2
    7c96:	33dd      	adds	r3, #221	; 0xdd
    7c98:	781b      	ldrb	r3, [r3, #0]
    7c9a:	07c0      	lsls	r0, r0, #31
    7c9c:	071b      	lsls	r3, r3, #28
    7c9e:	0fdb      	lsrs	r3, r3, #31
    7ca0:	0fc0      	lsrs	r0, r0, #31
    7ca2:	4098      	lsls	r0, r3
	       (_radio.scanner.conn ? BIT(2) : 0);
    7ca4:	32fc      	adds	r2, #252	; 0xfc
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7ca6:	0003      	movs	r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    7ca8:	6810      	ldr	r0, [r2, #0]
    7caa:	1e42      	subs	r2, r0, #1
    7cac:	4190      	sbcs	r0, r2
    7cae:	0080      	lsls	r0, r0, #2
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7cb0:	4318      	orrs	r0, r3
}
    7cb2:	4770      	bx	lr
    7cb4:	20000258 	.word	0x20000258

00007cb8 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    7cb8:	4b05      	ldr	r3, [pc, #20]	; (7cd0 <radio_scan_filter_pol_get+0x18>)
    7cba:	2000      	movs	r0, #0
    7cbc:	001a      	movs	r2, r3
    7cbe:	32dc      	adds	r2, #220	; 0xdc
    7cc0:	7812      	ldrb	r2, [r2, #0]
    7cc2:	07d2      	lsls	r2, r2, #31
    7cc4:	d503      	bpl.n	7cce <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
    7cc6:	33dd      	adds	r3, #221	; 0xdd
    7cc8:	7818      	ldrb	r0, [r3, #0]
    7cca:	0680      	lsls	r0, r0, #26
    7ccc:	0f80      	lsrs	r0, r0, #30
}
    7cce:	4770      	bx	lr
    7cd0:	20000258 	.word	0x20000258

00007cd4 <ll_tx_pwr_lvl_get>:
{
    7cd4:	b510      	push	{r4, lr}
    7cd6:	0014      	movs	r4, r2
	conn = connection_get(handle);
    7cd8:	f7fc fbdc 	bl	4494 <connection_get>
    7cdc:	0003      	movs	r3, r0
		return 1;
    7cde:	2001      	movs	r0, #1
	if (!conn) {
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d001      	beq.n	7ce8 <ll_tx_pwr_lvl_get+0x14>
	*tx_pwr_lvl = 0;
    7ce4:	2000      	movs	r0, #0
    7ce6:	7020      	strb	r0, [r4, #0]
}
    7ce8:	bd10      	pop	{r4, pc}
	...

00007cec <ll_rx_get>:
{
    7cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7cee:	4d1b      	ldr	r5, [pc, #108]	; (7d5c <ll_rx_get+0x70>)
{
    7cf0:	0006      	movs	r6, r0
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7cf2:	002a      	movs	r2, r5
{
    7cf4:	0008      	movs	r0, r1
    7cf6:	0029      	movs	r1, r5
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7cf8:	32fc      	adds	r2, #252	; 0xfc
    7cfa:	6c53      	ldr	r3, [r2, #68]	; 0x44
    7cfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
    7cfe:	316c      	adds	r1, #108	; 0x6c
{
    7d00:	b085      	sub	sp, #20
    7d02:	31ff      	adds	r1, #255	; 0xff
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7d04:	4293      	cmp	r3, r2
    7d06:	d020      	beq.n	7d4a <ll_rx_get+0x5e>
		_node_rx = _radio.link_rx_head->mem;
    7d08:	685b      	ldr	r3, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7d0a:	781a      	ldrb	r2, [r3, #0]
		_node_rx = _radio.link_rx_head->mem;
    7d0c:	9301      	str	r3, [sp, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7d0e:	f7fc fb75 	bl	43fc <tx_cmplt_get>
    7d12:	1e04      	subs	r4, r0, #0
		if (!cmplt) {
    7d14:	d120      	bne.n	7d58 <ll_rx_get+0x6c>
			first = _radio.packet_release_first;
    7d16:	ab02      	add	r3, sp, #8
    7d18:	1d5f      	adds	r7, r3, #5
    7d1a:	236c      	movs	r3, #108	; 0x6c
    7d1c:	33ff      	adds	r3, #255	; 0xff
    7d1e:	5ceb      	ldrb	r3, [r5, r3]
    7d20:	703b      	strb	r3, [r7, #0]
				cmplt_curr = tx_cmplt_get(&h, &first,
    7d22:	23b6      	movs	r3, #182	; 0xb6
    7d24:	005b      	lsls	r3, r3, #1
    7d26:	5cea      	ldrb	r2, [r5, r3]
    7d28:	ab02      	add	r3, sp, #8
    7d2a:	b2d2      	uxtb	r2, r2
    7d2c:	0039      	movs	r1, r7
    7d2e:	1d98      	adds	r0, r3, #6
    7d30:	f7fc fb64 	bl	43fc <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    7d34:	2c00      	cmp	r4, #0
    7d36:	d106      	bne.n	7d46 <ll_rx_get+0x5a>
			} while ((cmplt_prev != 0) ||
    7d38:	2800      	cmp	r0, #0
    7d3a:	d104      	bne.n	7d46 <ll_rx_get+0x5a>
			*node_rx = _node_rx;
    7d3c:	9b01      	ldr	r3, [sp, #4]
}
    7d3e:	0020      	movs	r0, r4
		*node_rx = NULL;
    7d40:	6033      	str	r3, [r6, #0]
}
    7d42:	b005      	add	sp, #20
    7d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    7d46:	0004      	movs	r4, r0
    7d48:	e7eb      	b.n	7d22 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7d4a:	23b6      	movs	r3, #182	; 0xb6
    7d4c:	005b      	lsls	r3, r3, #1
    7d4e:	5cea      	ldrb	r2, [r5, r3]
    7d50:	b2d2      	uxtb	r2, r2
    7d52:	f7fc fb53 	bl	43fc <tx_cmplt_get>
    7d56:	0004      	movs	r4, r0
		*node_rx = NULL;
    7d58:	2300      	movs	r3, #0
    7d5a:	e7f0      	b.n	7d3e <ll_rx_get+0x52>
    7d5c:	20000258 	.word	0x20000258

00007d60 <ll_rx_mem_release>:
{
    7d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d62:	2680      	movs	r6, #128	; 0x80
    7d64:	0005      	movs	r5, r0
	_node_rx = *node_rx;
    7d66:	6800      	ldr	r0, [r0, #0]
	while (_node_rx) {
    7d68:	2800      	cmp	r0, #0
    7d6a:	d103      	bne.n	7d74 <ll_rx_mem_release+0x14>
	*node_rx = _node_rx;
    7d6c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    7d6e:	f7fd fb01 	bl	5374 <packet_rx_allocate.constprop.49>
}
    7d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (_node_rx_free->hdr.type) {
    7d74:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    7d76:	6807      	ldr	r7, [r0, #0]
    7d78:	2b0a      	cmp	r3, #10
    7d7a:	d808      	bhi.n	7d8e <ll_rx_mem_release+0x2e>
    7d7c:	2201      	movs	r2, #1
    7d7e:	409a      	lsls	r2, r3
    7d80:	0013      	movs	r3, r2
    7d82:	4a0d      	ldr	r2, [pc, #52]	; (7db8 <ll_rx_mem_release+0x58>)
    7d84:	4c0d      	ldr	r4, [pc, #52]	; (7dbc <ll_rx_mem_release+0x5c>)
    7d86:	4213      	tst	r3, r2
    7d88:	d104      	bne.n	7d94 <ll_rx_mem_release+0x34>
    7d8a:	4233      	tst	r3, r6
    7d8c:	d109      	bne.n	7da2 <ll_rx_mem_release+0x42>
			LL_ASSERT(0);
    7d8e:	b662      	cpsie	i
    7d90:	2004      	movs	r0, #4
    7d92:	df02      	svc	2
			mem_release(_node_rx_free,
    7d94:	0021      	movs	r1, r4
    7d96:	3125      	adds	r1, #37	; 0x25
			mem_release(conn, &_radio.conn_free);
    7d98:	31ff      	adds	r1, #255	; 0xff
    7d9a:	f7fa fd92 	bl	28c2 <mem_release>
{
    7d9e:	0038      	movs	r0, r7
    7da0:	e7e2      	b.n	7d68 <ll_rx_mem_release+0x8>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7da2:	0023      	movs	r3, r4
    7da4:	2182      	movs	r1, #130	; 0x82
    7da6:	33fc      	adds	r3, #252	; 0xfc
    7da8:	88c2      	ldrh	r2, [r0, #6]
    7daa:	0049      	lsls	r1, r1, #1
    7dac:	6898      	ldr	r0, [r3, #8]
    7dae:	f7fa fd9e 	bl	28ee <mem_get>
			mem_release(conn, &_radio.conn_free);
    7db2:	0021      	movs	r1, r4
    7db4:	3109      	adds	r1, #9
    7db6:	e7ef      	b.n	7d98 <ll_rx_mem_release+0x38>
    7db8:	0000077e 	.word	0x0000077e
    7dbc:	20000258 	.word	0x20000258

00007dc0 <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    7dc0:	b570      	push	{r4, r5, r6, lr}
    7dc2:	4b18      	ldr	r3, [pc, #96]	; (7e24 <do_radio_rx_fc_set+0x64>)
    7dc4:	0004      	movs	r4, r0
	if (req == ack) {
    7dc6:	4291      	cmp	r1, r2
    7dc8:	d11c      	bne.n	7e04 <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7dca:	0018      	movs	r0, r3
    7dcc:	30fc      	adds	r0, #252	; 0xfc
    7dce:	6c85      	ldr	r5, [r0, #72]	; 0x48
    7dd0:	6c46      	ldr	r6, [r0, #68]	; 0x44
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    7dd2:	2001      	movs	r0, #1
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7dd4:	42ae      	cmp	r6, r5
    7dd6:	d114      	bne.n	7e02 <do_radio_rx_fc_set+0x42>
			if (ack1 == 0) {
    7dd8:	1e08      	subs	r0, r1, #0
    7dda:	d100      	bne.n	7dde <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
    7ddc:	2003      	movs	r0, #3
			_radio.fc_handle[--ack1] = handle;
    7dde:	3801      	subs	r0, #1
    7de0:	b2c0      	uxtb	r0, r0
    7de2:	0005      	movs	r5, r0
    7de4:	35b4      	adds	r5, #180	; 0xb4
    7de6:	006d      	lsls	r5, r5, #1
    7de8:	195d      	adds	r5, r3, r5
    7dea:	80ec      	strh	r4, [r5, #6]
			_radio.fc_ack = ack1;
    7dec:	2476      	movs	r4, #118	; 0x76
    7dee:	34ff      	adds	r4, #255	; 0xff
    7df0:	5518      	strb	r0, [r3, r4]
			if (req != _radio.fc_req) {
    7df2:	20ba      	movs	r0, #186	; 0xba
    7df4:	0040      	lsls	r0, r0, #1
    7df6:	5c1d      	ldrb	r5, [r3, r0]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    7df8:	2000      	movs	r0, #0
			if (req != _radio.fc_req) {
    7dfa:	42a9      	cmp	r1, r5
    7dfc:	d001      	beq.n	7e02 <do_radio_rx_fc_set+0x42>
				_radio.fc_ack = ack;
    7dfe:	551a      	strb	r2, [r3, r4]
				return 1;
    7e00:	3001      	adds	r0, #1
}
    7e02:	bd70      	pop	{r4, r5, r6, pc}
	} else if (((req == 0) &&
    7e04:	2900      	cmp	r1, #0
    7e06:	d107      	bne.n	7e18 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    7e08:	22b9      	movs	r2, #185	; 0xb9
    7e0a:	0052      	lsls	r2, r2, #1
	} else if (((req == 0) &&
    7e0c:	5a98      	ldrh	r0, [r3, r2]
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    7e0e:	1b00      	subs	r0, r0, r4
    7e10:	1e43      	subs	r3, r0, #1
    7e12:	4198      	sbcs	r0, r3
				return 1;
    7e14:	b2c0      	uxtb	r0, r0
    7e16:	e7f4      	b.n	7e02 <do_radio_rx_fc_set+0x42>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    7e18:	31b3      	adds	r1, #179	; 0xb3
    7e1a:	0049      	lsls	r1, r1, #1
    7e1c:	1859      	adds	r1, r3, r1
    7e1e:	88c8      	ldrh	r0, [r1, #6]
    7e20:	e7f5      	b.n	7e0e <do_radio_rx_fc_set+0x4e>
    7e22:	46c0      	nop			; (mov r8, r8)
    7e24:	20000258 	.word	0x20000258

00007e28 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    7e28:	22bb      	movs	r2, #187	; 0xbb
{
    7e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    7e2c:	4b15      	ldr	r3, [pc, #84]	; (7e84 <radio_rx_fc_set+0x5c>)
    7e2e:	0052      	lsls	r2, r2, #1
    7e30:	5c9a      	ldrb	r2, [r3, r2]
{
    7e32:	0005      	movs	r5, r0
    7e34:	0008      	movs	r0, r1
	if (_radio.fc_ena) {
    7e36:	2a00      	cmp	r2, #0
    7e38:	d101      	bne.n	7e3e <radio_rx_fc_set+0x16>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    7e3a:	2000      	movs	r0, #0
}
    7e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		u8_t req = _radio.fc_req;
    7e3e:	22ba      	movs	r2, #186	; 0xba
		u8_t ack = _radio.fc_ack;
    7e40:	2476      	movs	r4, #118	; 0x76
		u8_t req = _radio.fc_req;
    7e42:	0052      	lsls	r2, r2, #1
    7e44:	5c99      	ldrb	r1, [r3, r2]
		u8_t ack = _radio.fc_ack;
    7e46:	34ff      	adds	r4, #255	; 0xff
		u8_t req = _radio.fc_req;
    7e48:	b2c9      	uxtb	r1, r1
		u8_t ack = _radio.fc_ack;
    7e4a:	5d1a      	ldrb	r2, [r3, r4]
		if (fc) {
    7e4c:	2800      	cmp	r0, #0
    7e4e:	d006      	beq.n	7e5e <radio_rx_fc_set+0x36>
			if (handle != 0xffff) {
    7e50:	4b0d      	ldr	r3, [pc, #52]	; (7e88 <radio_rx_fc_set+0x60>)
    7e52:	429d      	cmp	r5, r3
    7e54:	d0f1      	beq.n	7e3a <radio_rx_fc_set+0x12>
				return do_radio_rx_fc_set(handle, req, ack);
    7e56:	0028      	movs	r0, r5
    7e58:	f7ff ffb2 	bl	7dc0 <do_radio_rx_fc_set>
    7e5c:	e7ee      	b.n	7e3c <radio_rx_fc_set+0x14>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7e5e:	001d      	movs	r5, r3
    7e60:	35fc      	adds	r5, #252	; 0xfc
    7e62:	6c6f      	ldr	r7, [r5, #68]	; 0x44
    7e64:	6cae      	ldr	r6, [r5, #72]	; 0x48
    7e66:	42b7      	cmp	r7, r6
    7e68:	d1e7      	bne.n	7e3a <radio_rx_fc_set+0x12>
    7e6a:	4291      	cmp	r1, r2
    7e6c:	d0e5      	beq.n	7e3a <radio_rx_fc_set+0x12>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7e6e:	6cad      	ldr	r5, [r5, #72]	; 0x48
			_radio.fc_ack = req;
    7e70:	5519      	strb	r1, [r3, r4]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7e72:	42af      	cmp	r7, r5
    7e74:	d0e1      	beq.n	7e3a <radio_rx_fc_set+0x12>
			    (req == _radio.fc_req)) {
    7e76:	25ba      	movs	r5, #186	; 0xba
    7e78:	006d      	lsls	r5, r5, #1
    7e7a:	5d5d      	ldrb	r5, [r3, r5]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7e7c:	42a9      	cmp	r1, r5
    7e7e:	d1dc      	bne.n	7e3a <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
    7e80:	551a      	strb	r2, [r3, r4]
    7e82:	e7db      	b.n	7e3c <radio_rx_fc_set+0x14>
    7e84:	20000258 	.word	0x20000258
    7e88:	0000ffff 	.word	0x0000ffff

00007e8c <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    7e8c:	4770      	bx	lr
	...

00007e90 <radio_adv_enable>:
{
    7e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e92:	b093      	sub	sp, #76	; 0x4c
    7e94:	930e      	str	r3, [sp, #56]	; 0x38
    7e96:	232f      	movs	r3, #47	; 0x2f
    7e98:	910c      	str	r1, [sp, #48]	; 0x30
    7e9a:	a904      	add	r1, sp, #16
    7e9c:	185b      	adds	r3, r3, r1
    7e9e:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7ea0:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
    7ea2:	4dac      	ldr	r5, [pc, #688]	; (8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>)
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7ea4:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
    7ea6:	1d6b      	adds	r3, r5, #5
    7ea8:	7fdb      	ldrb	r3, [r3, #31]
{
    7eaa:	900d      	str	r0, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    7eac:	2b7f      	cmp	r3, #127	; 0x7f
    7eae:	d901      	bls.n	7eb4 <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    7eb0:	260c      	movs	r6, #12
    7eb2:	e023      	b.n	7efc <radio_adv_enable+0x6c>
					[_radio.advertiser.adv_data.last][0];
    7eb4:	002b      	movs	r3, r5
    7eb6:	3375      	adds	r3, #117	; 0x75
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7eb8:	781a      	ldrb	r2, [r3, #0]
    7eba:	2327      	movs	r3, #39	; 0x27
    7ebc:	4353      	muls	r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7ebe:	220f      	movs	r2, #15
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7ec0:	3326      	adds	r3, #38	; 0x26
    7ec2:	18eb      	adds	r3, r5, r3
    7ec4:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7ec6:	781b      	ldrb	r3, [r3, #0]
		conn = NULL;
    7ec8:	2700      	movs	r7, #0
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7eca:	4013      	ands	r3, r2
    7ecc:	2b01      	cmp	r3, #1
    7ece:	d864      	bhi.n	7f9a <radio_adv_enable+0x10a>
		if (_radio.advertiser.conn) {
    7ed0:	4ba1      	ldr	r3, [pc, #644]	; (8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>)
    7ed2:	681c      	ldr	r4, [r3, #0]
    7ed4:	42bc      	cmp	r4, r7
    7ed6:	d1eb      	bne.n	7eb0 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    7ed8:	48a0      	ldr	r0, [pc, #640]	; (815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>)
    7eda:	f7fa fcd9 	bl	2890 <mem_acquire>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    7ede:	2607      	movs	r6, #7
		link = mem_acquire(&_radio.link_rx_free);
    7ee0:	900a      	str	r0, [sp, #40]	; 0x28
		if (!link) {
    7ee2:	42b8      	cmp	r0, r7
    7ee4:	d00a      	beq.n	7efc <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    7ee6:	0028      	movs	r0, r5
    7ee8:	3009      	adds	r0, #9
    7eea:	30ff      	adds	r0, #255	; 0xff
    7eec:	f7fa fcd0 	bl	2890 <mem_acquire>
    7ef0:	1e07      	subs	r7, r0, #0
		if (!conn) {
    7ef2:	d106      	bne.n	7f02 <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
    7ef4:	4999      	ldr	r1, [pc, #612]	; (815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>)
    7ef6:	980a      	ldr	r0, [sp, #40]	; 0x28
    7ef8:	f7fa fce3 	bl	28c2 <mem_release>
}
    7efc:	0030      	movs	r0, r6
    7efe:	b013      	add	sp, #76	; 0x4c
    7f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->handle = 0xFFFF;
    7f02:	2301      	movs	r3, #1
    7f04:	425b      	negs	r3, r3
    7f06:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    7f08:	0003      	movs	r3, r0
    7f0a:	4a95      	ldr	r2, [pc, #596]	; (8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>)
    7f0c:	338c      	adds	r3, #140	; 0x8c
    7f0e:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
    7f10:	2140      	movs	r1, #64	; 0x40
		conn->role = 1;
    7f12:	2380      	movs	r3, #128	; 0x80
		conn->data_chan_sel = 0;
    7f14:	7f42      	ldrb	r2, [r0, #29]
		conn->role = 1;
    7f16:	425b      	negs	r3, r3
    7f18:	438a      	bics	r2, r1
    7f1a:	4313      	orrs	r3, r2
    7f1c:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    7f1e:	2306      	movs	r3, #6
		conn->common.fex_valid = 0;
    7f20:	0002      	movs	r2, r0
		conn->data_chan_use = 0;
    7f22:	77c4      	strb	r4, [r0, #31]
		conn->event_counter = 0;
    7f24:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    7f26:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    7f28:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->connect_expire = 6;
    7f2a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    7f2c:	2020      	movs	r0, #32
		conn->slave.latency_enabled = 0;
    7f2e:	2501      	movs	r5, #1
		conn->slave.latency_cancel = 0;
    7f30:	2602      	movs	r6, #2
		conn->common.fex_valid = 0;
    7f32:	3238      	adds	r2, #56	; 0x38
    7f34:	7813      	ldrb	r3, [r2, #0]
		conn->slave.latency_enabled = 0;
    7f36:	4383      	bics	r3, r0
		conn->slave.latency_cancel = 0;
    7f38:	43ab      	bics	r3, r5
    7f3a:	43b3      	bics	r3, r6
    7f3c:	7013      	strb	r3, [r2, #0]
		conn->llcp_req = 0;
    7f3e:	003b      	movs	r3, r7
    7f40:	335c      	adds	r3, #92	; 0x5c
		conn->slave.window_widening_prepare_us = 0;
    7f42:	647c      	str	r4, [r7, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    7f44:	64bc      	str	r4, [r7, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    7f46:	65bc      	str	r4, [r7, #88]	; 0x58
		conn->supervision_expire = 0;
    7f48:	863c      	strh	r4, [r7, #48]	; 0x30
		conn->procedure_expire = 0;
    7f4a:	86bc      	strh	r4, [r7, #52]	; 0x34
		conn->llcp_version.tx = 0;
    7f4c:	3258      	adds	r2, #88	; 0x58
		conn->llcp_req = 0;
    7f4e:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    7f50:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    7f52:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    7f54:	43ab      	bics	r3, r5
    7f56:	43b3      	bics	r3, r6
    7f58:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    7f5a:	003b      	movs	r3, r7
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		conn->llcp_terminate.req = 0;
    7f5e:	3398      	adds	r3, #152	; 0x98
    7f60:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    7f62:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
    7f64:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7f66:	3304      	adds	r3, #4
    7f68:	601a      	str	r2, [r3, #0]
		conn->sn = 0;
    7f6a:	003a      	movs	r2, r7
    7f6c:	32a8      	adds	r2, #168	; 0xa8
    7f6e:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    7f70:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
    7f72:	0035      	movs	r5, r6
    7f74:	43b3      	bics	r3, r6
		conn->enc_tx = 0;
    7f76:	35e1      	adds	r5, #225	; 0xe1
    7f78:	402b      	ands	r3, r5
		conn->refresh = 0;
    7f7a:	4383      	bics	r3, r0
		conn->empty = 0;
    7f7c:	438b      	bics	r3, r1
    7f7e:	313f      	adds	r1, #63	; 0x3f
    7f80:	400b      	ands	r3, r1
    7f82:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    7f84:	003b      	movs	r3, r7
    7f86:	33ec      	adds	r3, #236	; 0xec
    7f88:	601c      	str	r4, [r3, #0]
		conn->pkt_tx_ctrl = NULL;
    7f8a:	605c      	str	r4, [r3, #4]
		conn->pkt_tx_ctrl_last = NULL;
    7f8c:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_data = NULL;
    7f8e:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_last = NULL;
    7f90:	611c      	str	r4, [r3, #16]
		conn->packet_tx_head_len = 0;
    7f92:	751c      	strb	r4, [r3, #20]
		conn->packet_tx_head_offset = 0;
    7f94:	755c      	strb	r4, [r3, #21]
		_radio.advertiser.conn = conn;
    7f96:	4b70      	ldr	r3, [pc, #448]	; (8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>)
    7f98:	601f      	str	r7, [r3, #0]
	_radio.advertiser.chan_map = chan_map;
    7f9a:	202f      	movs	r0, #47	; 0x2f
	_radio.advertiser.phy_p = phy_p;
    7f9c:	2107      	movs	r1, #7
    7f9e:	4d6d      	ldr	r5, [pc, #436]	; (8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>)
    7fa0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7fa2:	1dac      	adds	r4, r5, #6
    7fa4:	7fe3      	ldrb	r3, [r4, #31]
	_radio.advertiser.chan_map = chan_map;
    7fa6:	aa04      	add	r2, sp, #16
    7fa8:	1880      	adds	r0, r0, r2
    7faa:	7802      	ldrb	r2, [r0, #0]
	_radio.advertiser.phy_p = phy_p;
    7fac:	400e      	ands	r6, r1
    7fae:	438b      	bics	r3, r1
	_radio.advertiser.chan_map = chan_map;
    7fb0:	4333      	orrs	r3, r6
    7fb2:	4011      	ands	r1, r2
    7fb4:	001a      	movs	r2, r3
    7fb6:	2338      	movs	r3, #56	; 0x38
    7fb8:	439a      	bics	r2, r3
	_radio.advertiser.filter_policy = filter_policy;
    7fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	_radio.advertiser.chan_map = chan_map;
    7fbc:	00c9      	lsls	r1, r1, #3
	_radio.advertiser.filter_policy = filter_policy;
    7fbe:	019e      	lsls	r6, r3, #6
    7fc0:	233f      	movs	r3, #63	; 0x3f
    7fc2:	430a      	orrs	r2, r1
    7fc4:	401a      	ands	r2, r3
		_radio.ticks_active_to_start;
    7fc6:	002b      	movs	r3, r5
	_radio.advertiser.filter_policy = filter_policy;
    7fc8:	4332      	orrs	r2, r6
    7fca:	77e2      	strb	r2, [r4, #31]
		_radio.ticks_active_to_start;
    7fcc:	33fc      	adds	r3, #252	; 0xfc
	_radio.advertiser.hdr.ticks_active_to_start =
    7fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7fd0:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_active_to_start =
    7fd2:	61ab      	str	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    7fd4:	2327      	movs	r3, #39	; 0x27
    7fd6:	616b      	str	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
    7fd8:	2300      	movs	r3, #0
    7fda:	61eb      	str	r3, [r5, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7fdc:	f7fa fdf0 	bl	2bc0 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7fe2:	781e      	ldrb	r6, [r3, #0]
    7fe4:	230f      	movs	r3, #15
    7fe6:	401e      	ands	r6, r3
    7fe8:	2e01      	cmp	r6, #1
    7fea:	d16e      	bne.n	80ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    7fec:	23a7      	movs	r3, #167	; 0xa7
    7fee:	009b      	lsls	r3, r3, #2
    7ff0:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    7ff2:	3039      	adds	r0, #57	; 0x39
    7ff4:	30ff      	adds	r0, #255	; 0xff
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7ff6:	4a5b      	ldr	r2, [pc, #364]	; (8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>)
    7ff8:	2300      	movs	r3, #0
    7ffa:	2100      	movs	r1, #0
    7ffc:	f7f8 f9b4 	bl	368 <__aeabi_lmul>
    8000:	4a59      	ldr	r2, [pc, #356]	; (8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>)
    8002:	2307      	movs	r3, #7
    8004:	f7f8 f990 	bl	328 <__aeabi_uldivmod>
	ticks_slot_offset =
    8008:	69aa      	ldr	r2, [r5, #24]
    800a:	696b      	ldr	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    800c:	6228      	str	r0, [r5, #32]
	ticks_slot_offset =
    800e:	920a      	str	r2, [sp, #40]	; 0x28
    8010:	429a      	cmp	r2, r3
    8012:	d200      	bcs.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
    8014:	930a      	str	r3, [sp, #40]	; 0x28
    8016:	2400      	movs	r4, #0
	_radio.advertiser.is_hdcd = !interval &&
    8018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    801a:	42a3      	cmp	r3, r4
    801c:	d103      	bne.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    801e:	3e01      	subs	r6, #1
    8020:	4273      	negs	r3, r6
    8022:	4173      	adcs	r3, r6
    8024:	b2dc      	uxtb	r4, r3
    8026:	2240      	movs	r2, #64	; 0x40
    8028:	1d6b      	adds	r3, r5, #5
    802a:	01a6      	lsls	r6, r4, #6
    802c:	7fdc      	ldrb	r4, [r3, #31]
    802e:	4394      	bics	r4, r2
    8030:	4334      	orrs	r4, r6
    8032:	77dc      	strb	r4, [r3, #31]
    8034:	ae11      	add	r6, sp, #68	; 0x44
	if (_radio.advertiser.is_hdcd) {
    8036:	4014      	ands	r4, r2
    8038:	d055      	beq.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
		u32_t ticks_now = ticker_ticks_now_get();
    803a:	f7fb fb89 	bl	3750 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    803e:	6a29      	ldr	r1, [r5, #32]
    8040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8042:	468c      	mov	ip, r1
    8044:	4463      	add	r3, ip
    8046:	001a      	movs	r2, r3
		u32_t ticks_now = ticker_ticks_now_get();
    8048:	0004      	movs	r4, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    804a:	2000      	movs	r0, #0
    804c:	4b47      	ldr	r3, [pc, #284]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
    804e:	9204      	str	r2, [sp, #16]
    8050:	9307      	str	r3, [sp, #28]
    8052:	4b47      	ldr	r3, [pc, #284]	; (8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>)
    8054:	9201      	str	r2, [sp, #4]
    8056:	9305      	str	r3, [sp, #20]
    8058:	9608      	str	r6, [sp, #32]
    805a:	9006      	str	r0, [sp, #24]
    805c:	9003      	str	r0, [sp, #12]
    805e:	9002      	str	r0, [sp, #8]
    8060:	9000      	str	r0, [sp, #0]
    8062:	0023      	movs	r3, r4
    8064:	2205      	movs	r2, #5
    8066:	2103      	movs	r1, #3
    8068:	f7fb fa3c 	bl	34e4 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    806c:	2802      	cmp	r0, #2
    806e:	d036      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    8070:	9811      	ldr	r0, [sp, #68]	; 0x44
    8072:	2800      	cmp	r0, #0
    8074:	d117      	bne.n	80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
		ret_cb = TICKER_STATUS_BUSY;
    8076:	2302      	movs	r3, #2
		ret =
    8078:	2203      	movs	r2, #3
		ret_cb = TICKER_STATUS_BUSY;
    807a:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    807c:	4b3b      	ldr	r3, [pc, #236]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
    807e:	0011      	movs	r1, r2
    8080:	9307      	str	r3, [sp, #28]
    8082:	4b3c      	ldr	r3, [pc, #240]	; (8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>)
    8084:	9608      	str	r6, [sp, #32]
    8086:	9305      	str	r3, [sp, #20]
    8088:	4b3b      	ldr	r3, [pc, #236]	; (8178 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178>)
    808a:	9006      	str	r0, [sp, #24]
    808c:	9300      	str	r3, [sp, #0]
    808e:	0023      	movs	r3, r4
    8090:	9004      	str	r0, [sp, #16]
    8092:	9003      	str	r0, [sp, #12]
    8094:	9002      	str	r0, [sp, #8]
    8096:	9001      	str	r0, [sp, #4]
		ret =
    8098:	f7fb fa24 	bl	34e4 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    809c:	2802      	cmp	r0, #2
    809e:	d045      	beq.n	812c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    80a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
    80a2:	2e00      	cmp	r6, #0
    80a4:	d046      	beq.n	8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>
	if (conn) {
    80a6:	2f00      	cmp	r7, #0
    80a8:	d100      	bne.n	80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>
    80aa:	e701      	b.n	7eb0 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    80ac:	0029      	movs	r1, r5
    80ae:	003b      	movs	r3, r7
    80b0:	313d      	adds	r1, #61	; 0x3d
    80b2:	339c      	adds	r3, #156	; 0x9c
    80b4:	6818      	ldr	r0, [r3, #0]
    80b6:	31ff      	adds	r1, #255	; 0xff
    80b8:	f7fa fc03 	bl	28c2 <mem_release>
		mem_release(conn, &_radio.conn_free);
    80bc:	0029      	movs	r1, r5
    80be:	3109      	adds	r1, #9
    80c0:	31ff      	adds	r1, #255	; 0xff
    80c2:	0038      	movs	r0, r7
    80c4:	f7fa fbfd 	bl	28c2 <mem_release>
    80c8:	e6f2      	b.n	7eb0 <radio_adv_enable+0x20>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    80ca:	2e02      	cmp	r6, #2
    80cc:	d103      	bne.n	80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    80ce:	23a9      	movs	r3, #169	; 0xa9
    80d0:	009b      	lsls	r3, r3, #2
			   152 + 376) * chan_cnt;
    80d2:	4358      	muls	r0, r3
    80d4:	e78f      	b.n	7ff6 <radio_adv_enable+0x166>
    80d6:	4b29      	ldr	r3, [pc, #164]	; (817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>)
    80d8:	e7fb      	b.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
				cpu_sleep();
    80da:	f7fc f8f5 	bl	42c8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    80de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    80e0:	2b02      	cmp	r3, #2
    80e2:	d0fa      	beq.n	80da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda>
    80e4:	e7c4      	b.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    80e6:	f7fb fb33 	bl	3750 <ticker_ticks_now_get>
		ret =
    80ea:	4b20      	ldr	r3, [pc, #128]	; (816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>)
    80ec:	9608      	str	r6, [sp, #32]
    80ee:	9307      	str	r3, [sp, #28]
    80f0:	4b1f      	ldr	r3, [pc, #124]	; (8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>)
    80f2:	9406      	str	r4, [sp, #24]
    80f4:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    80f6:	6a2a      	ldr	r2, [r5, #32]
    80f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    80fa:	4694      	mov	ip, r2
    80fc:	4463      	add	r3, ip
    80fe:	900b      	str	r0, [sp, #44]	; 0x2c
		ret =
    8100:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8102:	4a1f      	ldr	r2, [pc, #124]	; (8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>)
    8104:	2391      	movs	r3, #145	; 0x91
    8106:	980c      	ldr	r0, [sp, #48]	; 0x30
    8108:	0021      	movs	r1, r4
		ret =
    810a:	9403      	str	r4, [sp, #12]
    810c:	9402      	str	r4, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    810e:	f7f8 f92b 	bl	368 <__aeabi_lmul>
    8112:	4a15      	ldr	r2, [pc, #84]	; (8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>)
    8114:	2307      	movs	r3, #7
    8116:	f7f8 f907 	bl	328 <__aeabi_uldivmod>
		ret =
    811a:	9400      	str	r4, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    811c:	9001      	str	r0, [sp, #4]
		ret =
    811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8120:	2205      	movs	r2, #5
    8122:	2103      	movs	r1, #3
    8124:	0020      	movs	r0, r4
    8126:	e7b7      	b.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
			cpu_sleep();
    8128:	f7fc f8ce 	bl	42c8 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    812c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    812e:	2b02      	cmp	r3, #2
    8130:	d0fa      	beq.n	8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    8132:	e7b5      	b.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
		_radio.advertiser.is_enabled = 1;
    8134:	2380      	movs	r3, #128	; 0x80
		if (!_radio.scanner.is_enabled) {
    8136:	2001      	movs	r0, #1
		_radio.advertiser.is_enabled = 1;
    8138:	1d6a      	adds	r2, r5, #5
    813a:	7fd1      	ldrb	r1, [r2, #31]
    813c:	425b      	negs	r3, r3
    813e:	430b      	orrs	r3, r1
		if (!_radio.scanner.is_enabled) {
    8140:	35dc      	adds	r5, #220	; 0xdc
		_radio.advertiser.is_enabled = 1;
    8142:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    8144:	782b      	ldrb	r3, [r5, #0]
    8146:	4203      	tst	r3, r0
    8148:	d000      	beq.n	814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>
    814a:	e6d7      	b.n	7efc <radio_adv_enable+0x6c>
			ll_adv_scan_state_cb(BIT(0));
    814c:	f7ff fe9e 	bl	7e8c <ll_adv_scan_state_cb>
    8150:	e6d4      	b.n	7efc <radio_adv_enable+0x6c>
    8152:	46c0      	nop			; (mov r8, r8)
    8154:	20000258 	.word	0x20000258
    8158:	20000320 	.word	0x20000320
    815c:	20000394 	.word	0x20000394
    8160:	0001400c 	.word	0x0001400c
    8164:	3b9aca00 	.word	0x3b9aca00
    8168:	1afd498d 	.word	0x1afd498d
    816c:	000042f9 	.word	0x000042f9
    8170:	00005311 	.word	0x00005311
    8174:	00005349 	.word	0x00005349
    8178:	0000a3fe 	.word	0x0000a3fe
    817c:	000005fc 	.word	0x000005fc
    8180:	84e72a00 	.word	0x84e72a00

00008184 <radio_adv_disable>:
{
    8184:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    8186:	2103      	movs	r1, #3
    8188:	2005      	movs	r0, #5
    818a:	f7fc f99b 	bl	44c4 <role_disable>
    818e:	1e05      	subs	r5, r0, #0
	if (!status) {
    8190:	d123      	bne.n	81da <radio_adv_disable+0x56>
		_radio.advertiser.is_enabled = 0;
    8192:	217f      	movs	r1, #127	; 0x7f
    8194:	4c12      	ldr	r4, [pc, #72]	; (81e0 <radio_adv_disable+0x5c>)
    8196:	1d62      	adds	r2, r4, #5
    8198:	7fd3      	ldrb	r3, [r2, #31]
    819a:	400b      	ands	r3, r1
    819c:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    819e:	0023      	movs	r3, r4
    81a0:	33dc      	adds	r3, #220	; 0xdc
    81a2:	781b      	ldrb	r3, [r3, #0]
    81a4:	07db      	lsls	r3, r3, #31
    81a6:	d401      	bmi.n	81ac <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    81a8:	f7ff fe70 	bl	7e8c <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    81ac:	0023      	movs	r3, r4
    81ae:	33c8      	adds	r3, #200	; 0xc8
    81b0:	681e      	ldr	r6, [r3, #0]
		if (conn) {
    81b2:	2e00      	cmp	r6, #0
    81b4:	d00f      	beq.n	81d6 <radio_adv_disable+0x52>
			_radio.advertiser.conn = NULL;
    81b6:	2200      	movs	r2, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    81b8:	0021      	movs	r1, r4
			_radio.advertiser.conn = NULL;
    81ba:	601a      	str	r2, [r3, #0]
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    81bc:	0033      	movs	r3, r6
    81be:	313d      	adds	r1, #61	; 0x3d
    81c0:	339c      	adds	r3, #156	; 0x9c
    81c2:	31ff      	adds	r1, #255	; 0xff
    81c4:	6818      	ldr	r0, [r3, #0]
    81c6:	f7fa fb7c 	bl	28c2 <mem_release>
			mem_release(conn, &_radio.conn_free);
    81ca:	0021      	movs	r1, r4
    81cc:	3109      	adds	r1, #9
    81ce:	31ff      	adds	r1, #255	; 0xff
    81d0:	0030      	movs	r0, r6
    81d2:	f7fa fb76 	bl	28c2 <mem_release>
}
    81d6:	0028      	movs	r0, r5
    81d8:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    81da:	250c      	movs	r5, #12
    81dc:	e7fb      	b.n	81d6 <radio_adv_disable+0x52>
    81de:	46c0      	nop			; (mov r8, r8)
    81e0:	20000258 	.word	0x20000258

000081e4 <ll_rx_dequeue>:
	struct radio_pdu_node_rx *node_rx = NULL;
    81e4:	2300      	movs	r3, #0
{
    81e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    81e8:	4c35      	ldr	r4, [pc, #212]	; (82c0 <ll_rx_dequeue+0xdc>)
	struct radio_pdu_node_rx *node_rx = NULL;
    81ea:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    81ec:	0021      	movs	r1, r4
    81ee:	0023      	movs	r3, r4
    81f0:	3141      	adds	r1, #65	; 0x41
    81f2:	33fc      	adds	r3, #252	; 0xfc
    81f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
    81f6:	31ff      	adds	r1, #255	; 0xff
    81f8:	aa01      	add	r2, sp, #4
    81fa:	f7fa fba5 	bl	2948 <memq_dequeue>
	LL_ASSERT(link);
    81fe:	2800      	cmp	r0, #0
    8200:	d102      	bne.n	8208 <ll_rx_dequeue+0x24>
			LL_ASSERT(_radio.scanner.is_enabled);
    8202:	b662      	cpsie	i
    8204:	2004      	movs	r0, #4
    8206:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    8208:	0021      	movs	r1, r4
    820a:	313d      	adds	r1, #61	; 0x3d
    820c:	31ff      	adds	r1, #255	; 0xff
    820e:	f7fa fb58 	bl	28c2 <mem_release>
	switch (node_rx->hdr.type) {
    8212:	9a01      	ldr	r2, [sp, #4]
    8214:	7911      	ldrb	r1, [r2, #4]
    8216:	290a      	cmp	r1, #10
    8218:	d8f3      	bhi.n	8202 <ll_rx_dequeue+0x1e>
    821a:	2301      	movs	r3, #1
    821c:	408b      	lsls	r3, r1
    821e:	4829      	ldr	r0, [pc, #164]	; (82c4 <ll_rx_dequeue+0xe0>)
    8220:	4203      	tst	r3, r0
    8222:	d114      	bne.n	824e <ll_rx_dequeue+0x6a>
    8224:	061b      	lsls	r3, r3, #24
    8226:	d5ec      	bpl.n	8202 <ll_rx_dequeue+0x1e>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    8228:	2906      	cmp	r1, #6
    822a:	d137      	bne.n	829c <ll_rx_dequeue+0xb8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    822c:	0013      	movs	r3, r2
    822e:	7ad2      	ldrb	r2, [r2, #11]
    8230:	330b      	adds	r3, #11
    8232:	2a3c      	cmp	r2, #60	; 0x3c
    8234:	d017      	beq.n	8266 <ll_rx_dequeue+0x82>
    8236:	785b      	ldrb	r3, [r3, #1]
    8238:	2b00      	cmp	r3, #0
    823a:	d130      	bne.n	829e <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    823c:	0022      	movs	r2, r4
    823e:	2101      	movs	r1, #1
    8240:	32dc      	adds	r2, #220	; 0xdc
    8242:	7813      	ldrb	r3, [r2, #0]
    8244:	420b      	tst	r3, r1
    8246:	d0dc      	beq.n	8202 <ll_rx_dequeue+0x1e>
			_radio.scanner.is_enabled = 0;
    8248:	438b      	bics	r3, r1
    824a:	7013      	strb	r3, [r2, #0]
    824c:	e019      	b.n	8282 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    824e:	209a      	movs	r0, #154	; 0x9a
    8250:	25a4      	movs	r5, #164	; 0xa4
    8252:	0040      	lsls	r0, r0, #1
    8254:	006d      	lsls	r5, r5, #1
    8256:	5c20      	ldrb	r0, [r4, r0]
    8258:	5d63      	ldrb	r3, [r4, r5]
    825a:	3801      	subs	r0, #1
    825c:	4283      	cmp	r3, r0
    825e:	dad0      	bge.n	8202 <ll_rx_dequeue+0x1e>
		_radio.link_rx_data_quota++;
    8260:	3301      	adds	r3, #1
    8262:	5563      	strb	r3, [r4, r5]
		break;
    8264:	e7e0      	b.n	8228 <ll_rx_dequeue+0x44>
				conn = _radio.advertiser.conn;
    8266:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    8268:	2200      	movs	r2, #0
				conn = _radio.advertiser.conn;
    826a:	33c8      	adds	r3, #200	; 0xc8
    826c:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
    826e:	601a      	str	r2, [r3, #0]
			LL_ASSERT(_radio.advertiser.is_enabled);
    8270:	1d62      	adds	r2, r4, #5
    8272:	7fd3      	ldrb	r3, [r2, #31]
    8274:	2b7f      	cmp	r3, #127	; 0x7f
    8276:	d9c4      	bls.n	8202 <ll_rx_dequeue+0x1e>
			_radio.advertiser.is_enabled = 0;
    8278:	217f      	movs	r1, #127	; 0x7f
    827a:	400b      	ands	r3, r1
    827c:	77d3      	strb	r3, [r2, #31]
		if (conn) {
    827e:	2d00      	cmp	r5, #0
    8280:	d10f      	bne.n	82a2 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8282:	0023      	movs	r3, r4
    8284:	33dc      	adds	r3, #220	; 0xdc
    8286:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
    8288:	3405      	adds	r4, #5
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    828a:	07c0      	lsls	r0, r0, #31
		     _radio.advertiser.is_enabled;
    828c:	7fe3      	ldrb	r3, [r4, #31]
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    828e:	0fc0      	lsrs	r0, r0, #31
    8290:	0040      	lsls	r0, r0, #1
    8292:	09db      	lsrs	r3, r3, #7
		if (!bm) {
    8294:	4318      	orrs	r0, r3
    8296:	d101      	bne.n	829c <ll_rx_dequeue+0xb8>
			ll_adv_scan_state_cb(0);
    8298:	f7ff fdf8 	bl	7e8c <ll_adv_scan_state_cb>
}
    829c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		struct connection *conn = NULL;
    829e:	2500      	movs	r5, #0
    82a0:	e7e6      	b.n	8270 <ll_rx_dequeue+0x8c>
			mem_release(node_rx->hdr.onion.link,
    82a2:	0021      	movs	r1, r4
    82a4:	002b      	movs	r3, r5
    82a6:	313d      	adds	r1, #61	; 0x3d
    82a8:	339c      	adds	r3, #156	; 0x9c
    82aa:	6818      	ldr	r0, [r3, #0]
    82ac:	31ff      	adds	r1, #255	; 0xff
    82ae:	f7fa fb08 	bl	28c2 <mem_release>
			mem_release(conn, &_radio.conn_free);
    82b2:	0021      	movs	r1, r4
    82b4:	3109      	adds	r1, #9
    82b6:	31ff      	adds	r1, #255	; 0xff
    82b8:	0028      	movs	r0, r5
    82ba:	f7fa fb02 	bl	28c2 <mem_release>
    82be:	e7e0      	b.n	8282 <ll_rx_dequeue+0x9e>
    82c0:	20000258 	.word	0x20000258
    82c4:	0000077e 	.word	0x0000077e

000082c8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    82c8:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    82ca:	4c0a      	ldr	r4, [pc, #40]	; (82f4 <rtc0_nrf5_isr+0x2c>)
    82cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    82ce:	6ca5      	ldr	r5, [r4, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    82d0:	2a00      	cmp	r2, #0
    82d2:	d003      	beq.n	82dc <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    82d4:	2000      	movs	r0, #0
    82d6:	6460      	str	r0, [r4, #68]	; 0x44

		ticker_trigger(0);
    82d8:	f7fb f8f4 	bl	34c4 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    82dc:	2d00      	cmp	r5, #0
    82de:	d004      	beq.n	82ea <rtc0_nrf5_isr+0x22>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    82e0:	2300      	movs	r3, #0

		ticker_trigger(1);
    82e2:	2001      	movs	r0, #1
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    82e4:	64a3      	str	r3, [r4, #72]	; 0x48
		ticker_trigger(1);
    82e6:	f7fb f8ed 	bl	34c4 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    82ea:	2000      	movs	r0, #0
    82ec:	f7fa fbd8 	bl	2aa0 <mayfly_run>
}
    82f0:	bd70      	pop	{r4, r5, r6, pc}
    82f2:	46c0      	nop			; (mov r8, r8)
    82f4:	4000b0fc 	.word	0x4000b0fc

000082f8 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    82f8:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    82fa:	2001      	movs	r0, #1
    82fc:	f7fa fbd0 	bl	2aa0 <mayfly_run>
}
    8300:	bd10      	pop	{r4, pc}

00008302 <rng_nrf5_isr>:
{
    8302:	b510      	push	{r4, lr}
	isr_rand(arg);
    8304:	f000 fc5c 	bl	8bc0 <isr_rand>
}
    8308:	bd10      	pop	{r4, pc}

0000830a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    830a:	b510      	push	{r4, lr}
	isr_radio();
    830c:	f000 fce0 	bl	8cd0 <isr_radio>
	ISR_DIRECT_PM();
    8310:	f7f8 fbf8 	bl	b04 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    8314:	f7f8 fae4 	bl	8e0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8318:	bd10      	pop	{r4, pc}

0000831a <radio_active_callback>:
}
    831a:	4770      	bx	lr

0000831c <radio_event_callback>:
{
    831c:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    831e:	4b02      	ldr	r3, [pc, #8]	; (8328 <radio_event_callback+0xc>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8320:	6818      	ldr	r0, [r3, #0]
    8322:	f001 feb1 	bl	a088 <_impl_k_sem_give>
}
    8326:	bd10      	pop	{r4, pc}
    8328:	20000a18 	.word	0x20000a18

0000832c <ll_init>:

int ll_init(struct k_sem *sem_rx)
{
    832c:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    832e:	4b3c      	ldr	r3, [pc, #240]	; (8420 <ll_init+0xf4>)
{
    8330:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    8332:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
    8334:	2204      	movs	r2, #4
    8336:	2109      	movs	r1, #9
    8338:	483a      	ldr	r0, [pc, #232]	; (8424 <ll_init+0xf8>)
    833a:	f000 fc19 	bl	8b70 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
    833e:	483a      	ldr	r0, [pc, #232]	; (8428 <ll_init+0xfc>)
    8340:	220c      	movs	r2, #12
    8342:	2111      	movs	r1, #17
    8344:	f000 fc1e 	bl	8b84 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    8348:	4838      	ldr	r0, [pc, #224]	; (842c <ll_init+0x100>)
    834a:	f001 f9bb 	bl	96c4 <device_get_binding>
	if (!clk_k32) {
    834e:	2800      	cmp	r0, #0
    8350:	d102      	bne.n	8358 <ll_init+0x2c>
		return -ENODEV;
    8352:	2013      	movs	r0, #19
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
    8354:	4240      	negs	r0, r0
    8356:	e05e      	b.n	8416 <ll_init+0xea>
	return api->on(dev, sys);
    8358:	6843      	ldr	r3, [r0, #4]
    835a:	2100      	movs	r1, #0
    835c:	681b      	ldr	r3, [r3, #0]
    835e:	4798      	blx	r3
	cntr_init();
    8360:	f000 fb02 	bl	8968 <cntr_init>
	mayfly_init();
    8364:	f7fa fb00 	bl	2968 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    8368:	2208      	movs	r2, #8
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    836a:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    836c:	2402      	movs	r4, #2
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    836e:	250d      	movs	r5, #13
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    8370:	4b2f      	ldr	r3, [pc, #188]	; (8430 <ll_init+0x104>)
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8372:	2107      	movs	r1, #7
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    8374:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    8376:	3a05      	subs	r2, #5
    8378:	721a      	strb	r2, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    837a:	4a2e      	ldr	r2, [pc, #184]	; (8434 <ll_init+0x108>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    837c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    837e:	761c      	strb	r4, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8380:	9205      	str	r2, [sp, #20]
    8382:	4a2d      	ldr	r2, [pc, #180]	; (8438 <ll_init+0x10c>)
    8384:	9300      	str	r3, [sp, #0]
    8386:	9204      	str	r2, [sp, #16]
    8388:	4a2c      	ldr	r2, [pc, #176]	; (843c <ll_init+0x110>)
    838a:	9501      	str	r5, [sp, #4]
    838c:	9203      	str	r2, [sp, #12]
    838e:	4a2c      	ldr	r2, [pc, #176]	; (8440 <ll_init+0x114>)
    8390:	2304      	movs	r3, #4
    8392:	9202      	str	r2, [sp, #8]
    8394:	4a2b      	ldr	r2, [pc, #172]	; (8444 <ll_init+0x118>)
    8396:	f7fb f85d 	bl	3454 <ticker_init>
    839a:	1e06      	subs	r6, r0, #0
	LL_ASSERT(!err);
    839c:	d002      	beq.n	83a4 <ll_init+0x78>
    839e:	b662      	cpsie	i
    83a0:	2004      	movs	r0, #4
    83a2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    83a4:	4828      	ldr	r0, [pc, #160]	; (8448 <ll_init+0x11c>)
    83a6:	f001 f98d 	bl	96c4 <device_get_binding>
	if (!clk_m16) {
    83aa:	2800      	cmp	r0, #0
    83ac:	d0d1      	beq.n	8352 <ll_init+0x26>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    83ae:	23f8      	movs	r3, #248	; 0xf8
    83b0:	005b      	lsls	r3, r3, #1
    83b2:	9304      	str	r3, [sp, #16]
    83b4:	4b25      	ldr	r3, [pc, #148]	; (844c <ll_init+0x120>)
    83b6:	9400      	str	r4, [sp, #0]
    83b8:	9303      	str	r3, [sp, #12]
    83ba:	231b      	movs	r3, #27
    83bc:	9302      	str	r3, [sp, #8]
    83be:	9301      	str	r3, [sp, #4]
    83c0:	3b1a      	subs	r3, #26
    83c2:	0032      	movs	r2, r6
    83c4:	0019      	movs	r1, r3
    83c6:	f7ff fb6f 	bl	7aa8 <radio_init>
    83ca:	1e04      	subs	r4, r0, #0
	if (err) {
    83cc:	d125      	bne.n	841a <ll_init+0xee>
	}

	ll_filter_reset(true);
    83ce:	2001      	movs	r0, #1
    83d0:	f000 fabe 	bl	8950 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    83d4:	0022      	movs	r2, r4
    83d6:	0021      	movs	r1, r4
    83d8:	2001      	movs	r0, #1
    83da:	f7f8 fb5d 	bl	a98 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    83de:	0022      	movs	r2, r4
    83e0:	0021      	movs	r1, r4
    83e2:	200b      	movs	r0, #11
    83e4:	f7f8 fb58 	bl	a98 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    83e8:	0022      	movs	r2, r4
    83ea:	0021      	movs	r1, r4
    83ec:	2018      	movs	r0, #24
    83ee:	f7f8 fb53 	bl	a98 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    83f2:	0022      	movs	r2, r4
    83f4:	2101      	movs	r1, #1
    83f6:	0028      	movs	r0, r5
    83f8:	f7f8 fb4e 	bl	a98 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    83fc:	2001      	movs	r0, #1
    83fe:	f7f8 fb21 	bl	a44 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8402:	200b      	movs	r0, #11
    8404:	f7f8 fb1e 	bl	a44 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    8408:	2018      	movs	r0, #24
    840a:	f7f8 fb1b 	bl	a44 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    840e:	0028      	movs	r0, r5
    8410:	f7f8 fb18 	bl	a44 <_arch_irq_enable>

	return 0;
    8414:	0020      	movs	r0, r4
}
    8416:	b006      	add	sp, #24
    8418:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    841a:	200c      	movs	r0, #12
    841c:	e79a      	b.n	8354 <ll_init+0x28>
    841e:	46c0      	nop			; (mov r8, r8)
    8420:	20000a18 	.word	0x20000a18
    8424:	200009f8 	.word	0x200009f8
    8428:	20000a04 	.word	0x20000a04
    842c:	0000b058 	.word	0x0000b058
    8430:	200009d8 	.word	0x200009d8
    8434:	00009481 	.word	0x00009481
    8438:	0000940d 	.word	0x0000940d
    843c:	000093f5 	.word	0x000093f5
    8440:	20000768 	.word	0x20000768
    8444:	20000650 	.word	0x20000650
    8448:	0000b063 	.word	0x0000b063
    844c:	20000460 	.word	0x20000460

00008450 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8450:	b5f0      	push	{r4, r5, r6, r7, lr}
    8452:	b08b      	sub	sp, #44	; 0x2c
    8454:	9201      	str	r2, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8456:	2200      	movs	r2, #0
{
    8458:	001d      	movs	r5, r3
    845a:	ab10      	add	r3, sp, #64	; 0x40
    845c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    845e:	2601      	movs	r6, #1
{
    8460:	9302      	str	r3, [sp, #8]
    8462:	ab11      	add	r3, sp, #68	; 0x44
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	000f      	movs	r7, r1
    8468:	9303      	str	r3, [sp, #12]
    846a:	ab13      	add	r3, sp, #76	; 0x4c
    846c:	781b      	ldrb	r3, [r3, #0]
    846e:	9304      	str	r3, [sp, #16]
    8470:	ab14      	add	r3, sp, #80	; 0x50
    8472:	781b      	ldrb	r3, [r3, #0]
    8474:	9305      	str	r3, [sp, #20]
    8476:	ab16      	add	r3, sp, #88	; 0x58
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	9300      	str	r3, [sp, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    847c:	ab08      	add	r3, sp, #32
    847e:	701a      	strb	r2, [r3, #0]
    8480:	3206      	adds	r2, #6
    8482:	709a      	strb	r2, [r3, #2]
    8484:	3a04      	subs	r2, #4
    8486:	70da      	strb	r2, [r3, #3]
    8488:	2207      	movs	r2, #7
    848a:	705e      	strb	r6, [r3, #1]
    848c:	711e      	strb	r6, [r3, #4]
    848e:	715a      	strb	r2, [r3, #5]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    8490:	f7ff fbe8 	bl	7c64 <ll_adv_is_enabled>
    8494:	1e04      	subs	r4, r0, #0
    8496:	d000      	beq.n	849a <ll_adv_params_set+0x4a>
    8498:	e0ce      	b.n	8638 <ll_adv_params_set+0x1e8>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    849a:	201f      	movs	r0, #31
    849c:	2320      	movs	r3, #32
    849e:	4a68      	ldr	r2, [pc, #416]	; (8640 <ll_adv_params_set+0x1f0>)
    84a0:	7811      	ldrb	r1, [r2, #0]
    84a2:	4001      	ands	r1, r0
    84a4:	430b      	orrs	r3, r1
    84a6:	7013      	strb	r3, [r2, #0]

	/* extended */
	if (adv_type > 0x04) {
    84a8:	2d04      	cmp	r5, #4
    84aa:	d967      	bls.n	857c <ll_adv_params_set+0x12c>
    84ac:	2303      	movs	r3, #3
		/* legacy */
		if (evt_prop & BIT(4)) {
    84ae:	06f9      	lsls	r1, r7, #27
    84b0:	d50e      	bpl.n	84d0 <ll_adv_params_set+0x80>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    84b2:	2104      	movs	r1, #4
    84b4:	aa07      	add	r2, sp, #28
    84b6:	7051      	strb	r1, [r2, #1]
    84b8:	3902      	subs	r1, #2
    84ba:	7013      	strb	r3, [r2, #0]
    84bc:	7091      	strb	r1, [r2, #2]
    84be:	70d4      	strb	r4, [r2, #3]

			adv_type = leg_adv_type[evt_prop & 0x03];
    84c0:	403b      	ands	r3, r7
    84c2:	5cd5      	ldrb	r5, [r2, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    84c4:	073b      	lsls	r3, r7, #28
    84c6:	d559      	bpl.n	857c <ll_adv_params_set+0x12c>
				adv_type = 0x01;
    84c8:	0035      	movs	r5, r6
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    84ca:	2200      	movs	r2, #0
    84cc:	4b5c      	ldr	r3, [pc, #368]	; (8640 <ll_adv_params_set+0x1f0>)
    84ce:	e011      	b.n	84f4 <ll_adv_params_set+0xa4>
			if (((evt_prop & 0x03) == 0x03) ||
    84d0:	403b      	ands	r3, r7
    84d2:	2b03      	cmp	r3, #3
    84d4:	d100      	bne.n	84d8 <ll_adv_params_set+0x88>
    84d6:	e0b1      	b.n	863c <ll_adv_params_set+0x1ec>
    84d8:	230c      	movs	r3, #12
    84da:	403b      	ands	r3, r7
    84dc:	2b0c      	cmp	r3, #12
    84de:	d100      	bne.n	84e2 <ll_adv_params_set+0x92>
    84e0:	e0ac      	b.n	863c <ll_adv_params_set+0x1ec>
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    84e2:	2505      	movs	r5, #5
			ll_adv.phy_p = phy_p;
    84e4:	9b00      	ldr	r3, [sp, #0]
    84e6:	0159      	lsls	r1, r3, #5
    84e8:	7813      	ldrb	r3, [r2, #0]
    84ea:	4003      	ands	r3, r0
    84ec:	430b      	orrs	r3, r1
    84ee:	7013      	strb	r3, [r2, #0]
		ll_adv.interval = interval;
    84f0:	4b53      	ldr	r3, [pc, #332]	; (8640 <ll_adv_params_set+0x1f0>)
    84f2:	9a01      	ldr	r2, [sp, #4]
	}
	ll_adv.chan_map = chan_map;
    84f4:	2107      	movs	r1, #7
		ll_adv.interval = 0;
    84f6:	605a      	str	r2, [r3, #4]
	ll_adv.chan_map = chan_map;
    84f8:	4a51      	ldr	r2, [pc, #324]	; (8640 <ll_adv_params_set+0x1f0>)
    84fa:	9804      	ldr	r0, [sp, #16]
    84fc:	7813      	ldrb	r3, [r2, #0]
    84fe:	4008      	ands	r0, r1
    8500:	438b      	bics	r3, r1
	ll_adv.filter_policy = filter_policy;
    8502:	4303      	orrs	r3, r0
    8504:	2018      	movs	r0, #24
    8506:	9e05      	ldr	r6, [sp, #20]
    8508:	3904      	subs	r1, #4
    850a:	400e      	ands	r6, r1
    850c:	00f1      	lsls	r1, r6, #3
    850e:	4383      	bics	r3, r0
    8510:	430b      	orrs	r3, r1
    8512:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    8514:	f7ff fb9a 	bl	7c4c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8518:	0003      	movs	r3, r0
    851a:	2627      	movs	r6, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
    851c:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    851e:	334f      	adds	r3, #79	; 0x4f
    8520:	781b      	ldrb	r3, [r3, #0]
    8522:	435e      	muls	r6, r3
	pdu->type = pdu_adv_type[adv_type];
    8524:	ab08      	add	r3, sp, #32
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8526:	1986      	adds	r6, r0, r6
	pdu->type = pdu_adv_type[adv_type];
    8528:	5d59      	ldrb	r1, [r3, r5]
    852a:	7833      	ldrb	r3, [r6, #0]
    852c:	4011      	ands	r1, r2
    852e:	4393      	bics	r3, r2
	pdu->rfu = 0;
    8530:	430b      	orrs	r3, r1
    8532:	2110      	movs	r1, #16
    8534:	438b      	bics	r3, r1
    8536:	7033      	strb	r3, [r6, #0]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    8538:	401a      	ands	r2, r3
    853a:	1849      	adds	r1, r1, r1
    853c:	2a01      	cmp	r2, #1
    853e:	d820      	bhi.n	8582 <ll_adv_params_set+0x132>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    8540:	430b      	orrs	r3, r1
	} else {
		pdu->chan_sel = 0;
    8542:	7033      	strb	r3, [r6, #0]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    8544:	2301      	movs	r3, #1
    8546:	2040      	movs	r0, #64	; 0x40
    8548:	9d02      	ldr	r5, [sp, #8]
    854a:	401d      	ands	r5, r3
    854c:	7833      	ldrb	r3, [r6, #0]
    854e:	01a9      	lsls	r1, r5, #6
    8550:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    8552:	430b      	orrs	r3, r1
    8554:	217f      	movs	r1, #127	; 0x7f
    8556:	400b      	ands	r3, r1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8558:	3970      	subs	r1, #112	; 0x70
	pdu->rx_addr = 0;
    855a:	7033      	strb	r3, [r6, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    855c:	4019      	ands	r1, r3
    855e:	2901      	cmp	r1, #1
    8560:	d111      	bne.n	8586 <ll_adv_params_set+0x136>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    8562:	0030      	movs	r0, r6
		pdu->rx_addr = direct_addr_type;
    8564:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    8566:	3008      	adds	r0, #8
		pdu->rx_addr = direct_addr_type;
    8568:	01d2      	lsls	r2, r2, #7
    856a:	4313      	orrs	r3, r2
    856c:	7033      	strb	r3, [r6, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    856e:	2206      	movs	r2, #6
    8570:	9912      	ldr	r1, [sp, #72]	; 0x48
    8572:	f7f8 f879 	bl	668 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    8576:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    8578:	7073      	strb	r3, [r6, #1]
    857a:	e039      	b.n	85f0 <ll_adv_params_set+0x1a0>
	if (adv_type != 0x01) {
    857c:	2d01      	cmp	r5, #1
    857e:	d1b7      	bne.n	84f0 <ll_adv_params_set+0xa0>
    8580:	e7a3      	b.n	84ca <ll_adv_params_set+0x7a>
		pdu->chan_sel = 0;
    8582:	438b      	bics	r3, r1
    8584:	e7dd      	b.n	8542 <ll_adv_params_set+0xf2>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    8586:	2907      	cmp	r1, #7
    8588:	d151      	bne.n	862e <ll_adv_params_set+0x1de>
		p->adv_mode = evt_prop & 0x03;
    858a:	01b9      	lsls	r1, r7, #6
    858c:	70b1      	strb	r1, [r6, #2]
		*(u8_t *)h = 0;
    858e:	2100      	movs	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    8590:	1cb0      	adds	r0, r6, #2
		ptr = (u8_t *)h + sizeof(*h);
    8592:	1d33      	adds	r3, r6, #4
		*(u8_t *)h = 0;
    8594:	70f1      	strb	r1, [r6, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    8596:	06ba      	lsls	r2, r7, #26
    8598:	d40a      	bmi.n	85b0 <ll_adv_params_set+0x160>
    859a:	223f      	movs	r2, #63	; 0x3f
    859c:	78b1      	ldrb	r1, [r6, #2]
    859e:	4391      	bics	r1, r2
    85a0:	d106      	bne.n	85b0 <ll_adv_params_set+0x160>
    85a2:	9a00      	ldr	r2, [sp, #0]
    85a4:	2a04      	cmp	r2, #4
    85a6:	d003      	beq.n	85b0 <ll_adv_params_set+0x160>
			h->adv_addr = 1;
    85a8:	2301      	movs	r3, #1
    85aa:	70f3      	strb	r3, [r6, #3]
			ptr += BDADDR_SIZE;
    85ac:	0033      	movs	r3, r6
    85ae:	330a      	adds	r3, #10
		if (evt_prop & BIT(6)) {
    85b0:	2140      	movs	r1, #64	; 0x40
    85b2:	420f      	tst	r7, r1
    85b4:	d003      	beq.n	85be <ll_adv_params_set+0x16e>
			h->tx_pwr = 1;
    85b6:	78f2      	ldrb	r2, [r6, #3]
			ptr++;
    85b8:	3301      	adds	r3, #1
			h->tx_pwr = 1;
    85ba:	4311      	orrs	r1, r2
    85bc:	70f1      	strb	r1, [r6, #3]
		len = ptr - (u8_t *)p;
    85be:	1a1a      	subs	r2, r3, r0
    85c0:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    85c2:	2a02      	cmp	r2, #2
    85c4:	d931      	bls.n	862a <ll_adv_params_set+0x1da>
			p->ext_hdr_len = len -
    85c6:	273f      	movs	r7, #63	; 0x3f
    85c8:	78b1      	ldrb	r1, [r6, #2]
    85ca:	1e50      	subs	r0, r2, #1
    85cc:	4038      	ands	r0, r7
    85ce:	43b9      	bics	r1, r7
    85d0:	4301      	orrs	r1, r0
    85d2:	70b1      	strb	r1, [r6, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    85d4:	7072      	strb	r2, [r6, #1]
		if (h->tx_pwr) {
    85d6:	78f2      	ldrb	r2, [r6, #3]
    85d8:	0652      	lsls	r2, r2, #25
    85da:	d509      	bpl.n	85f0 <ll_adv_params_set+0x1a0>
			_tx_pwr = 0;
    85dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
			if (tx_pwr) {
    85de:	1e11      	subs	r1, r2, #0
    85e0:	d004      	beq.n	85ec <ll_adv_params_set+0x19c>
				if (*tx_pwr != 0x7F) {
    85e2:	7812      	ldrb	r2, [r2, #0]
    85e4:	2a7f      	cmp	r2, #127	; 0x7f
    85e6:	d101      	bne.n	85ec <ll_adv_params_set+0x19c>
					*tx_pwr = _tx_pwr;
    85e8:	2200      	movs	r2, #0
    85ea:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    85ec:	3b01      	subs	r3, #1
    85ee:	701a      	strb	r2, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    85f0:	f7ff fb32 	bl	7c58 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    85f4:	0003      	movs	r3, r0
    85f6:	334f      	adds	r3, #79	; 0x4f
    85f8:	781a      	ldrb	r2, [r3, #0]
    85fa:	2327      	movs	r3, #39	; 0x27
    85fc:	4353      	muls	r3, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    85fe:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8600:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8602:	7803      	ldrb	r3, [r0, #0]
    8604:	4393      	bics	r3, r2
    8606:	001a      	movs	r2, r3
	pdu->rfu = 0;
    8608:	2304      	movs	r3, #4
    860a:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    860c:	01aa      	lsls	r2, r5, #6
    860e:	258f      	movs	r5, #143	; 0x8f
    8610:	401d      	ands	r5, r3
	pdu->rx_addr = 0;
    8612:	237f      	movs	r3, #127	; 0x7f
    8614:	4315      	orrs	r5, r2
    8616:	401d      	ands	r5, r3
	if (pdu->len == 0) {
    8618:	7843      	ldrb	r3, [r0, #1]
	pdu->rx_addr = 0;
    861a:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
    861c:	2b00      	cmp	r3, #0
    861e:	d101      	bne.n	8624 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
    8620:	3306      	adds	r3, #6
    8622:	7043      	strb	r3, [r0, #1]
	}

	return 0;
}
    8624:	0020      	movs	r0, r4
    8626:	b00b      	add	sp, #44	; 0x2c
    8628:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    862a:	2201      	movs	r2, #1
    862c:	e7d2      	b.n	85d4 <ll_adv_params_set+0x184>
	} else if (pdu->len == 0) {
    862e:	7873      	ldrb	r3, [r6, #1]
    8630:	2b00      	cmp	r3, #0
    8632:	d1dd      	bne.n	85f0 <ll_adv_params_set+0x1a0>
		pdu->len = BDADDR_SIZE;
    8634:	3306      	adds	r3, #6
    8636:	e79f      	b.n	8578 <ll_adv_params_set+0x128>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8638:	240c      	movs	r4, #12
    863a:	e7f3      	b.n	8624 <ll_adv_params_set+0x1d4>
				return 0x12; /* invalid HCI cmd param */
    863c:	2412      	movs	r4, #18
    863e:	e7f1      	b.n	8624 <ll_adv_params_set+0x1d4>
    8640:	20000a1c 	.word	0x20000a1c

00008644 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    8644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8646:	0007      	movs	r7, r0
    8648:	9100      	str	r1, [sp, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    864a:	f7ff faff 	bl	7c4c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    864e:	0003      	movs	r3, r0
    8650:	2127      	movs	r1, #39	; 0x27
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    8652:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8654:	334f      	adds	r3, #79	; 0x4f
    8656:	781d      	ldrb	r5, [r3, #0]
	radio_adv_data = radio_adv_data_get();
    8658:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    865a:	4369      	muls	r1, r5
    865c:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    865e:	780b      	ldrb	r3, [r1, #0]
    8660:	401a      	ands	r2, r3
    8662:	2a01      	cmp	r2, #1
    8664:	d045      	beq.n	86f2 <ll_adv_data_set+0xae>
    8666:	2a07      	cmp	r2, #7
    8668:	d043      	beq.n	86f2 <ll_adv_data_set+0xae>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    866a:	0002      	movs	r2, r0
    866c:	324e      	adds	r2, #78	; 0x4e
    866e:	7812      	ldrb	r2, [r2, #0]
    8670:	42aa      	cmp	r2, r5
    8672:	d104      	bne.n	867e <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
    8674:	3501      	adds	r5, #1
    8676:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    8678:	2d02      	cmp	r5, #2
    867a:	d100      	bne.n	867e <ll_adv_data_set+0x3a>
			last = 0;
    867c:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    867e:	200f      	movs	r0, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    8680:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
    8682:	4003      	ands	r3, r0
    8684:	001a      	movs	r2, r3
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    8686:	436c      	muls	r4, r5
    8688:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
    868a:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    868c:	364f      	adds	r6, #79	; 0x4f
	pdu->type = prev->type;
    868e:	4383      	bics	r3, r0
	pdu->rfu = 0;
    8690:	4313      	orrs	r3, r2
    8692:	2210      	movs	r2, #16
    8694:	4393      	bics	r3, r2
    8696:	7023      	strb	r3, [r4, #0]
		pdu->chan_sel = prev->chan_sel;
    8698:	780a      	ldrb	r2, [r1, #0]
    869a:	380e      	subs	r0, #14
    869c:	0952      	lsrs	r2, r2, #5
    869e:	4002      	ands	r2, r0
    86a0:	0153      	lsls	r3, r2, #5
    86a2:	9301      	str	r3, [sp, #4]
    86a4:	7823      	ldrb	r3, [r4, #0]
    86a6:	001a      	movs	r2, r3
    86a8:	2320      	movs	r3, #32
    86aa:	439a      	bics	r2, r3
    86ac:	0013      	movs	r3, r2
    86ae:	9a01      	ldr	r2, [sp, #4]
    86b0:	431a      	orrs	r2, r3
    86b2:	7022      	strb	r2, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
    86b4:	780b      	ldrb	r3, [r1, #0]
    86b6:	b2d2      	uxtb	r2, r2
    86b8:	099b      	lsrs	r3, r3, #6
    86ba:	4003      	ands	r3, r0
    86bc:	303f      	adds	r0, #63	; 0x3f
    86be:	4382      	bics	r2, r0
    86c0:	019b      	lsls	r3, r3, #6
    86c2:	4313      	orrs	r3, r2
    86c4:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
    86c6:	780b      	ldrb	r3, [r1, #0]
    86c8:	303f      	adds	r0, #63	; 0x3f
    86ca:	09db      	lsrs	r3, r3, #7
    86cc:	01da      	lsls	r2, r3, #7
    86ce:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    86d0:	3102      	adds	r1, #2
	pdu->rx_addr = prev->rx_addr;
    86d2:	4003      	ands	r3, r0
    86d4:	4313      	orrs	r3, r2
    86d6:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    86d8:	2206      	movs	r2, #6
    86da:	1ca0      	adds	r0, r4, #2
    86dc:	f7f7 ffc4 	bl	668 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    86e0:	0020      	movs	r0, r4
    86e2:	003a      	movs	r2, r7
    86e4:	3008      	adds	r0, #8
    86e6:	9900      	ldr	r1, [sp, #0]
    86e8:	f7f7 ffbe 	bl	668 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    86ec:	1dbb      	adds	r3, r7, #6
    86ee:	7063      	strb	r3, [r4, #1]
	radio_adv_data->last = last;
    86f0:	7035      	strb	r5, [r6, #0]
}
    86f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000086f4 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    86f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    86f6:	0007      	movs	r7, r0
    86f8:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    86fa:	f7ff faad 	bl	7c58 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    86fe:	0003      	movs	r3, r0
    8700:	334f      	adds	r3, #79	; 0x4f
    8702:	7819      	ldrb	r1, [r3, #0]
    8704:	3b01      	subs	r3, #1
    8706:	781b      	ldrb	r3, [r3, #0]
	radio_scan_data = radio_scan_data_get();
    8708:	0005      	movs	r5, r0
    870a:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
    870c:	428b      	cmp	r3, r1
    870e:	d104      	bne.n	871a <ll_scan_data_set+0x26>
		last = radio_scan_data->last + 1;
    8710:	1c4e      	adds	r6, r1, #1
    8712:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    8714:	2e02      	cmp	r6, #2
    8716:	d100      	bne.n	871a <ll_scan_data_set+0x26>
			last = 0;
    8718:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    871a:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    871c:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)
    871e:	4361      	muls	r1, r4
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    8720:	4374      	muls	r4, r6
    8722:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8724:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    8726:	2040      	movs	r0, #64	; 0x40
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8728:	4393      	bics	r3, r2
    872a:	001a      	movs	r2, r3
	pdu->rfu = 0;
    872c:	2304      	movs	r3, #4
    872e:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
    8730:	22cf      	movs	r2, #207	; 0xcf
    8732:	4013      	ands	r3, r2
    8734:	7023      	strb	r3, [r4, #0]
	prev = (struct pdu_adv *)
    8736:	1869      	adds	r1, r5, r1
	pdu->tx_addr = prev->tx_addr;
    8738:	780b      	ldrb	r3, [r1, #0]
    873a:	3a8f      	subs	r2, #143	; 0x8f
    873c:	401a      	ands	r2, r3
    873e:	7823      	ldrb	r3, [r4, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    8740:	3102      	adds	r1, #2
	pdu->tx_addr = prev->tx_addr;
    8742:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    8744:	4313      	orrs	r3, r2
    8746:	227f      	movs	r2, #127	; 0x7f
    8748:	4013      	ands	r3, r2
    874a:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    874c:	1dbb      	adds	r3, r7, #6
    874e:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    8750:	1ca0      	adds	r0, r4, #2
    8752:	3a79      	subs	r2, #121	; 0x79
    8754:	f7f7 ff88 	bl	668 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    8758:	0020      	movs	r0, r4
    875a:	003a      	movs	r2, r7

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    875c:	354f      	adds	r5, #79	; 0x4f
	memcpy(&pdu->scan_rsp.data[0], data, len);
    875e:	9901      	ldr	r1, [sp, #4]
    8760:	3008      	adds	r0, #8
    8762:	f7f7 ff81 	bl	668 <memcpy>
	radio_scan_data->last = last;
    8766:	702e      	strb	r6, [r5, #0]
}
    8768:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0000876c <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    876c:	b5f0      	push	{r4, r5, r6, r7, lr}
    876e:	b085      	sub	sp, #20
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    8770:	2800      	cmp	r0, #0
    8772:	d103      	bne.n	877c <ll_adv_enable+0x10>
		return radio_adv_disable();
    8774:	f7ff fd06 	bl	8184 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    8778:	b005      	add	sp, #20
    877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ll_adv_is_enabled()) {
    877c:	f7ff fa72 	bl	7c64 <ll_adv_is_enabled>
    8780:	0007      	movs	r7, r0
		return 0;
    8782:	2000      	movs	r0, #0
	} else if (ll_adv_is_enabled()) {
    8784:	4287      	cmp	r7, r0
    8786:	d1f7      	bne.n	8778 <ll_adv_enable+0xc>
	radio_adv_data = radio_adv_data_get();
    8788:	f7ff fa60 	bl	7c4c <radio_adv_data_get>
    878c:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
    878e:	f7ff fa63 	bl	7c58 <radio_scan_data_get>
			[radio_adv_data->last][0];
    8792:	0023      	movs	r3, r4
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    8794:	2627      	movs	r6, #39	; 0x27
			[radio_adv_data->last][0];
    8796:	334f      	adds	r3, #79	; 0x4f
	radio_scan_data = radio_scan_data_get();
    8798:	0005      	movs	r5, r0
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    879a:	7818      	ldrb	r0, [r3, #0]
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    879c:	230f      	movs	r3, #15
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    879e:	4370      	muls	r0, r6
    87a0:	1824      	adds	r4, r4, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    87a2:	7820      	ldrb	r0, [r4, #0]
    87a4:	4003      	ands	r3, r0
    87a6:	2b07      	cmp	r3, #7
    87a8:	d11a      	bne.n	87e0 <ll_adv_enable+0x74>
		if (h->adv_addr) {
    87aa:	78e3      	ldrb	r3, [r4, #3]
    87ac:	07db      	lsls	r3, r3, #31
    87ae:	d509      	bpl.n	87c4 <ll_adv_enable+0x58>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    87b0:	0640      	lsls	r0, r0, #25
    87b2:	0039      	movs	r1, r7
    87b4:	0fc0      	lsrs	r0, r0, #31
    87b6:	f7fa ffd3 	bl	3760 <ll_addr_get>
    87ba:	0001      	movs	r1, r0
		ptr = (u8_t *)h + sizeof(*h);
    87bc:	1d20      	adds	r0, r4, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    87be:	2206      	movs	r2, #6
    87c0:	f7f7 ff52 	bl	668 <memcpy>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    87c4:	24ff      	movs	r4, #255	; 0xff
				  ll_adv.chan_map, ll_adv.filter_policy,
    87c6:	4913      	ldr	r1, [pc, #76]	; (8814 <ll_adv_enable+0xa8>)
    87c8:	7808      	ldrb	r0, [r1, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    87ca:	6849      	ldr	r1, [r1, #4]
				  ll_adv.chan_map, ll_adv.filter_policy,
    87cc:	06c3      	lsls	r3, r0, #27
    87ce:	0742      	lsls	r2, r0, #29
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    87d0:	0f9b      	lsrs	r3, r3, #30
    87d2:	0f52      	lsrs	r2, r2, #29
    87d4:	b289      	uxth	r1, r1
    87d6:	9400      	str	r4, [sp, #0]
    87d8:	0940      	lsrs	r0, r0, #5
    87da:	f7ff fb59 	bl	7e90 <radio_adv_enable>
	return status;
    87de:	e7cb      	b.n	8778 <ll_adv_enable+0xc>
			[radio_scan_data->last][0];
    87e0:	002b      	movs	r3, r5
    87e2:	334f      	adds	r3, #79	; 0x4f
    87e4:	781b      	ldrb	r3, [r3, #0]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    87e6:	0640      	lsls	r0, r0, #25
    87e8:	0039      	movs	r1, r7
    87ea:	0fc0      	lsrs	r0, r0, #31
			[radio_scan_data->last][0];
    87ec:	9303      	str	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    87ee:	f7fa ffb7 	bl	3760 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    87f2:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    87f4:	0001      	movs	r1, r0
			memcpy(&pdu_adv->adv_ind.addr[0],
    87f6:	1ca0      	adds	r0, r4, #2
    87f8:	f7f7 ff36 	bl	668 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    87fc:	7820      	ldrb	r0, [r4, #0]
    87fe:	0039      	movs	r1, r7
    8800:	0640      	lsls	r0, r0, #25
    8802:	0fc0      	lsrs	r0, r0, #31
    8804:	f7fa ffac 	bl	3760 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    8808:	9b03      	ldr	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    880a:	0001      	movs	r1, r0
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    880c:	435e      	muls	r6, r3
    880e:	19ad      	adds	r5, r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    8810:	1ca8      	adds	r0, r5, #2
    8812:	e7d4      	b.n	87be <ll_adv_enable+0x52>
    8814:	20000a1c 	.word	0x20000a1c

00008818 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    8818:	2800      	cmp	r0, #0
    881a:	d102      	bne.n	8822 <ctrl_filter_get+0xa>
    881c:	b662      	cpsie	i
    881e:	2004      	movs	r0, #4
    8820:	df02      	svc	2
	return &wl_filter;
#endif
}
    8822:	4801      	ldr	r0, [pc, #4]	; (8828 <ctrl_filter_get+0x10>)
    8824:	4770      	bx	lr
    8826:	46c0      	nop			; (mov r8, r8)
    8828:	20000a24 	.word	0x20000a24

0000882c <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    882c:	2008      	movs	r0, #8
    882e:	4770      	bx	lr

00008830 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    8830:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8832:	f7ff fa1f 	bl	7c74 <radio_adv_filter_pol_get>
    8836:	1e04      	subs	r4, r0, #0
    8838:	d002      	beq.n	8840 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    883a:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    883c:	0020      	movs	r0, r4
    883e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8840:	f7ff fa3a 	bl	7cb8 <radio_scan_filter_pol_get>
    8844:	07c3      	lsls	r3, r0, #31
    8846:	d4f8      	bmi.n	883a <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    8848:	4b02      	ldr	r3, [pc, #8]	; (8854 <ll_wl_clear+0x24>)
    884a:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    884c:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    884e:	4b02      	ldr	r3, [pc, #8]	; (8858 <ll_wl_clear+0x28>)
    8850:	701c      	strb	r4, [r3, #0]
	return 0;
    8852:	e7f3      	b.n	883c <ll_wl_clear+0xc>
    8854:	20000a24 	.word	0x20000a24
    8858:	20000d98 	.word	0x20000d98

0000885c <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    885e:	0005      	movs	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8860:	f7ff fa08 	bl	7c74 <radio_adv_filter_pol_get>
    8864:	1e04      	subs	r4, r0, #0
    8866:	d002      	beq.n	886e <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8868:	240c      	movs	r4, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    886a:	0020      	movs	r0, r4
    886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    886e:	f7ff fa23 	bl	7cb8 <radio_scan_filter_pol_get>
    8872:	2101      	movs	r1, #1
    8874:	4208      	tst	r0, r1
    8876:	d1f7      	bne.n	8868 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    8878:	782a      	ldrb	r2, [r5, #0]
    887a:	2aff      	cmp	r2, #255	; 0xff
    887c:	d102      	bne.n	8884 <ll_wl_add+0x28>
		wl_anon = 1;
    887e:	4b10      	ldr	r3, [pc, #64]	; (88c0 <ll_wl_add+0x64>)
    8880:	7019      	strb	r1, [r3, #0]
		return 0;
    8882:	e7f2      	b.n	886a <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    8884:	480f      	ldr	r0, [pc, #60]	; (88c4 <ll_wl_add+0x68>)
    8886:	0023      	movs	r3, r4
    8888:	7806      	ldrb	r6, [r0, #0]
    888a:	2eff      	cmp	r6, #255	; 0xff
    888c:	d102      	bne.n	8894 <ll_wl_add+0x38>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    888e:	2407      	movs	r4, #7
    8890:	e7eb      	b.n	886a <ll_wl_add+0xe>
	     index++) {
    8892:	3301      	adds	r3, #1
	     (filter->enable_bitmask & BIT(index));
    8894:	0037      	movs	r7, r6
    8896:	40df      	lsrs	r7, r3
	for (index = 0;
    8898:	420f      	tst	r7, r1
    889a:	d1fa      	bne.n	8892 <ll_wl_add+0x36>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    889c:	400a      	ands	r2, r1
    889e:	409a      	lsls	r2, r3
	filter->enable_bitmask |= BIT(index);
    88a0:	000f      	movs	r7, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    88a2:	7841      	ldrb	r1, [r0, #1]
	filter->enable_bitmask |= BIT(index);
    88a4:	409f      	lsls	r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    88a6:	430a      	orrs	r2, r1
    88a8:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    88aa:	2206      	movs	r2, #6
    88ac:	4353      	muls	r3, r2
	filter->enable_bitmask |= BIT(index);
    88ae:	433e      	orrs	r6, r7
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    88b0:	3302      	adds	r3, #2
	filter->enable_bitmask |= BIT(index);
    88b2:	7006      	strb	r6, [r0, #0]
	return filter_add(&wl_filter, addr->type, addr->a.val);
    88b4:	1c69      	adds	r1, r5, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    88b6:	18c0      	adds	r0, r0, r3
    88b8:	f7f7 fed6 	bl	668 <memcpy>
    88bc:	e7d5      	b.n	886a <ll_wl_add+0xe>
    88be:	46c0      	nop			; (mov r8, r8)
    88c0:	20000d98 	.word	0x20000d98
    88c4:	20000a24 	.word	0x20000a24

000088c8 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    88c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    88ca:	9001      	str	r0, [sp, #4]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    88cc:	f7ff f9d2 	bl	7c74 <radio_adv_filter_pol_get>
    88d0:	1e07      	subs	r7, r0, #0
    88d2:	d002      	beq.n	88da <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    88d4:	270c      	movs	r7, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    88d6:	0038      	movs	r0, r7
    88d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    88da:	f7ff f9ed 	bl	7cb8 <radio_scan_filter_pol_get>
    88de:	2401      	movs	r4, #1
    88e0:	4220      	tst	r0, r4
    88e2:	d1f7      	bne.n	88d4 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    88e4:	9b01      	ldr	r3, [sp, #4]
    88e6:	781b      	ldrb	r3, [r3, #0]
    88e8:	9300      	str	r3, [sp, #0]
    88ea:	2bff      	cmp	r3, #255	; 0xff
    88ec:	d102      	bne.n	88f4 <ll_wl_remove+0x2c>
		wl_anon = 0;
    88ee:	4b16      	ldr	r3, [pc, #88]	; (8948 <ll_wl_remove+0x80>)
    88f0:	701f      	strb	r7, [r3, #0]
		return 0;
    88f2:	e7f0      	b.n	88d6 <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
    88f4:	4b15      	ldr	r3, [pc, #84]	; (894c <ll_wl_remove+0x84>)
    88f6:	2508      	movs	r5, #8
    88f8:	781b      	ldrb	r3, [r3, #0]
    88fa:	2b00      	cmp	r3, #0
    88fc:	d101      	bne.n	8902 <ll_wl_remove+0x3a>
		return BT_HCI_ERR_INVALID_PARAM;
    88fe:	2712      	movs	r7, #18
    8900:	e7e9      	b.n	88d6 <ll_wl_remove+0xe>
	while (index--) {
    8902:	3d01      	subs	r5, #1
    8904:	d3fb      	bcc.n	88fe <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
    8906:	4e11      	ldr	r6, [pc, #68]	; (894c <ll_wl_remove+0x84>)
    8908:	7833      	ldrb	r3, [r6, #0]
    890a:	40eb      	lsrs	r3, r5
    890c:	4223      	tst	r3, r4
    890e:	d0f8      	beq.n	8902 <ll_wl_remove+0x3a>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    8910:	7873      	ldrb	r3, [r6, #1]
    8912:	9a00      	ldr	r2, [sp, #0]
    8914:	412b      	asrs	r3, r5
    8916:	4053      	eors	r3, r2
		if ((filter->enable_bitmask & BIT(index)) &&
    8918:	4223      	tst	r3, r4
    891a:	d1f2      	bne.n	8902 <ll_wl_remove+0x3a>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    891c:	2006      	movs	r0, #6
    891e:	4368      	muls	r0, r5
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    8920:	9b01      	ldr	r3, [sp, #4]
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    8922:	3002      	adds	r0, #2
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    8924:	1c59      	adds	r1, r3, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    8926:	1830      	adds	r0, r6, r0
    8928:	2206      	movs	r2, #6
    892a:	f7f7 fe8a 	bl	642 <memcmp>
		     (addr_type & 0x01)) &&
    892e:	2800      	cmp	r0, #0
    8930:	d1e7      	bne.n	8902 <ll_wl_remove+0x3a>
			filter->enable_bitmask &= ~BIT(index);
    8932:	40ac      	lsls	r4, r5
    8934:	43e4      	mvns	r4, r4
    8936:	7833      	ldrb	r3, [r6, #0]
    8938:	b2e4      	uxtb	r4, r4
    893a:	4023      	ands	r3, r4
    893c:	7033      	strb	r3, [r6, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    893e:	7873      	ldrb	r3, [r6, #1]
    8940:	401c      	ands	r4, r3
    8942:	7074      	strb	r4, [r6, #1]
    8944:	e7c7      	b.n	88d6 <ll_wl_remove+0xe>
    8946:	46c0      	nop			; (mov r8, r8)
    8948:	20000d98 	.word	0x20000d98
    894c:	20000a24 	.word	0x20000a24

00008950 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    8950:	2300      	movs	r3, #0
    8952:	4a03      	ldr	r2, [pc, #12]	; (8960 <ll_filter_reset+0x10>)
    8954:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    8956:	4a03      	ldr	r2, [pc, #12]	; (8964 <ll_filter_reset+0x14>)
    8958:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    895a:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    895c:	4770      	bx	lr
    895e:	46c0      	nop			; (mov r8, r8)
    8960:	20000d98 	.word	0x20000d98
    8964:	20000a24 	.word	0x20000a24

00008968 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    8968:	22a1      	movs	r2, #161	; 0xa1
    896a:	2100      	movs	r1, #0
    896c:	4b05      	ldr	r3, [pc, #20]	; (8984 <cntr_init+0x1c>)
    896e:	00d2      	lsls	r2, r2, #3
    8970:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    8972:	22c0      	movs	r2, #192	; 0xc0
    8974:	21d1      	movs	r1, #209	; 0xd1
    8976:	0292      	lsls	r2, r2, #10
    8978:	0089      	lsls	r1, r1, #2
    897a:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    897c:	3940      	subs	r1, #64	; 0x40
    897e:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif
}
    8980:	4770      	bx	lr
    8982:	46c0      	nop			; (mov r8, r8)
    8984:	4000b000 	.word	0x4000b000

00008988 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    8988:	4a05      	ldr	r2, [pc, #20]	; (89a0 <cntr_start+0x18>)
    898a:	2001      	movs	r0, #1
    898c:	7813      	ldrb	r3, [r2, #0]
    898e:	1c59      	adds	r1, r3, #1
    8990:	7011      	strb	r1, [r2, #0]
    8992:	2b00      	cmp	r3, #0
    8994:	d102      	bne.n	899c <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    8996:	4a03      	ldr	r2, [pc, #12]	; (89a4 <cntr_start+0x1c>)
    8998:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    899a:	0018      	movs	r0, r3
}
    899c:	4770      	bx	lr
    899e:	46c0      	nop			; (mov r8, r8)
    89a0:	20000a56 	.word	0x20000a56
    89a4:	4000b000 	.word	0x4000b000

000089a8 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    89a8:	4a08      	ldr	r2, [pc, #32]	; (89cc <cntr_stop+0x24>)
    89aa:	7813      	ldrb	r3, [r2, #0]
    89ac:	2b00      	cmp	r3, #0
    89ae:	d102      	bne.n	89b6 <cntr_stop+0xe>
    89b0:	b662      	cpsie	i
    89b2:	2004      	movs	r0, #4
    89b4:	df02      	svc	2

	if (--_refcount) {
    89b6:	3b01      	subs	r3, #1
    89b8:	b2db      	uxtb	r3, r3
    89ba:	7013      	strb	r3, [r2, #0]
    89bc:	2001      	movs	r0, #1
    89be:	2b00      	cmp	r3, #0
    89c0:	d102      	bne.n	89c8 <cntr_stop+0x20>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    89c2:	4a03      	ldr	r2, [pc, #12]	; (89d0 <cntr_stop+0x28>)
    89c4:	6050      	str	r0, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    89c6:	0018      	movs	r0, r3
}
    89c8:	4770      	bx	lr
    89ca:	46c0      	nop			; (mov r8, r8)
    89cc:	20000a56 	.word	0x20000a56
    89d0:	4000b000 	.word	0x4000b000

000089d4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    89d4:	4b01      	ldr	r3, [pc, #4]	; (89dc <cntr_cnt_get+0x8>)
    89d6:	4a02      	ldr	r2, [pc, #8]	; (89e0 <cntr_cnt_get+0xc>)
    89d8:	58d0      	ldr	r0, [r2, r3]
}
    89da:	4770      	bx	lr
    89dc:	00000504 	.word	0x00000504
    89e0:	4000b000 	.word	0x4000b000

000089e4 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    89e4:	3051      	adds	r0, #81	; 0x51
    89e6:	4b02      	ldr	r3, [pc, #8]	; (89f0 <cntr_cmp_set+0xc>)
    89e8:	30ff      	adds	r0, #255	; 0xff
    89ea:	0080      	lsls	r0, r0, #2
    89ec:	50c1      	str	r1, [r0, r3]
}
    89ee:	4770      	bx	lr
    89f0:	4000b000 	.word	0x4000b000

000089f4 <isr>:
{
	return get(rng_isr, octets, rand);
}

static int isr(struct rand *rng, bool store)
{
    89f4:	b570      	push	{r4, r5, r6, lr}
	u8_t last;

	if (!rng) {
    89f6:	2800      	cmp	r0, #0
    89f8:	d01d      	beq.n	8a36 <isr+0x42>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    89fa:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    89fc:	7805      	ldrb	r5, [r0, #0]
	last = rng->last + 1;
    89fe:	1c53      	adds	r3, r2, #1
    8a00:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    8a02:	42ab      	cmp	r3, r5
    8a04:	d100      	bne.n	8a08 <isr+0x14>
		last = 0;
    8a06:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
    8a08:	7884      	ldrb	r4, [r0, #2]
    8a0a:	42a3      	cmp	r3, r4
    8a0c:	d013      	beq.n	8a36 <isr+0x42>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    8a0e:	2900      	cmp	r1, #0
    8a10:	d00e      	beq.n	8a30 <isr+0x3c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    8a12:	21a1      	movs	r1, #161	; 0xa1
    8a14:	4e09      	ldr	r6, [pc, #36]	; (8a3c <isr+0x48>)
    8a16:	00c9      	lsls	r1, r1, #3
    8a18:	5871      	ldr	r1, [r6, r1]
    8a1a:	1882      	adds	r2, r0, r2
    8a1c:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    8a1e:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    8a20:	3301      	adds	r3, #1
    8a22:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    8a24:	429d      	cmp	r5, r3
    8a26:	d100      	bne.n	8a2a <isr+0x36>
		last = 0;
    8a28:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
		return 0;
    8a2a:	2000      	movs	r0, #0
	if (last == rng->first) {
    8a2c:	42a3      	cmp	r3, r4
    8a2e:	d001      	beq.n	8a34 <isr+0x40>
	}

	return -EBUSY;
    8a30:	2010      	movs	r0, #16
		return -ENOBUFS;
    8a32:	4240      	negs	r0, r0
}
    8a34:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8a36:	2037      	movs	r0, #55	; 0x37
    8a38:	e7fb      	b.n	8a32 <isr+0x3e>
    8a3a:	46c0      	nop			; (mov r8, r8)
    8a3c:	4000d000 	.word	0x4000d000

00008a40 <get>:
{
    8a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a42:	b085      	sub	sp, #20
	LL_ASSERT(rng);
    8a44:	2800      	cmp	r0, #0
    8a46:	d102      	bne.n	8a4e <get+0xe>
    8a48:	b662      	cpsie	i
    8a4a:	2004      	movs	r0, #4
    8a4c:	df02      	svc	2
	first = rng->first;
    8a4e:	7884      	ldrb	r4, [r0, #2]
	last = rng->last;
    8a50:	78c3      	ldrb	r3, [r0, #3]
    8a52:	1852      	adds	r2, r2, r1
    8a54:	1d25      	adds	r5, r4, #4
    8a56:	4694      	mov	ip, r2
		s = &rng->rand[first];
    8a58:	1945      	adds	r5, r0, r5
	if (first <= last) {
    8a5a:	429c      	cmp	r4, r3
    8a5c:	d81d      	bhi.n	8a9a <get+0x5a>
		avail = last - first;
    8a5e:	1b1b      	subs	r3, r3, r4
    8a60:	b2db      	uxtb	r3, r3
			remaining = 0;
    8a62:	2700      	movs	r7, #0
		if (octets < avail) {
    8a64:	4299      	cmp	r1, r3
    8a66:	d203      	bcs.n	8a70 <get+0x30>
			remaining = avail - octets;
    8a68:	b2ce      	uxtb	r6, r1
    8a6a:	1b9b      	subs	r3, r3, r6
    8a6c:	b2df      	uxtb	r7, r3
			avail = octets;
    8a6e:	0033      	movs	r3, r6
		first += avail;
    8a70:	191c      	adds	r4, r3, r4
		octets -= avail;
    8a72:	1ac9      	subs	r1, r1, r3
		first += avail;
    8a74:	b2e4      	uxtb	r4, r4
    8a76:	18eb      	adds	r3, r5, r3
		while (avail--) {
    8a78:	42ab      	cmp	r3, r5
    8a7a:	d109      	bne.n	8a90 <get+0x50>
	if (remaining < rng->threshold) {
    8a7c:	7843      	ldrb	r3, [r0, #1]
		rng->first = first;
    8a7e:	7084      	strb	r4, [r0, #2]
	if (remaining < rng->threshold) {
    8a80:	42bb      	cmp	r3, r7
    8a82:	d902      	bls.n	8a8a <get+0x4a>
		NRF_RNG->TASKS_START = 1;
    8a84:	2201      	movs	r2, #1
    8a86:	4b23      	ldr	r3, [pc, #140]	; (8b14 <get+0xd4>)
    8a88:	601a      	str	r2, [r3, #0]
}
    8a8a:	0008      	movs	r0, r1
    8a8c:	b005      	add	sp, #20
    8a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*(--d) = *s++;
    8a90:	782e      	ldrb	r6, [r5, #0]
    8a92:	3a01      	subs	r2, #1
    8a94:	7016      	strb	r6, [r2, #0]
    8a96:	3501      	adds	r5, #1
    8a98:	e7ee      	b.n	8a78 <get+0x38>
		avail = rng->count - first;
    8a9a:	7802      	ldrb	r2, [r0, #0]
    8a9c:	1b12      	subs	r2, r2, r4
    8a9e:	b2d2      	uxtb	r2, r2
		if (octets < avail) {
    8aa0:	4291      	cmp	r1, r2
    8aa2:	d225      	bcs.n	8af0 <get+0xb0>
			remaining = avail + last - octets;
    8aa4:	b2ce      	uxtb	r6, r1
    8aa6:	1b9f      	subs	r7, r3, r6
    8aa8:	19d7      	adds	r7, r2, r7
			avail = octets;
    8aaa:	0032      	movs	r2, r6
			first += avail;
    8aac:	19a4      	adds	r4, r4, r6
			remaining = avail + last - octets;
    8aae:	b2ff      	uxtb	r7, r7
			first += avail;
    8ab0:	b2e4      	uxtb	r4, r4
    8ab2:	18ae      	adds	r6, r5, r2
    8ab4:	9501      	str	r5, [sp, #4]
		d = &rand[octets];
    8ab6:	4665      	mov	r5, ip
		octets -= avail;
    8ab8:	1a89      	subs	r1, r1, r2
    8aba:	9603      	str	r6, [sp, #12]
		d = &rand[octets];
    8abc:	9502      	str	r5, [sp, #8]
		while (avail--) {
    8abe:	9e03      	ldr	r6, [sp, #12]
    8ac0:	9d01      	ldr	r5, [sp, #4]
    8ac2:	42b5      	cmp	r5, r6
    8ac4:	d117      	bne.n	8af6 <get+0xb6>
    8ac6:	4665      	mov	r5, ip
    8ac8:	1aaa      	subs	r2, r5, r2
		if (octets && last) {
    8aca:	2900      	cmp	r1, #0
    8acc:	d0d6      	beq.n	8a7c <get+0x3c>
    8ace:	2b00      	cmp	r3, #0
    8ad0:	d0d4      	beq.n	8a7c <get+0x3c>
			s = &rng->rand[0];
    8ad2:	1d05      	adds	r5, r0, #4
			if (octets < last) {
    8ad4:	4299      	cmp	r1, r3
    8ad6:	d219      	bcs.n	8b0c <get+0xcc>
				remaining = last - octets;
    8ad8:	b2cc      	uxtb	r4, r1
    8ada:	1b1b      	subs	r3, r3, r4
    8adc:	b2df      	uxtb	r7, r3
			octets -= last;
    8ade:	1b09      	subs	r1, r1, r4
    8ae0:	192b      	adds	r3, r5, r4
			while (last--) {
    8ae2:	429d      	cmp	r5, r3
    8ae4:	d0ca      	beq.n	8a7c <get+0x3c>
				*(--d) = *s++;
    8ae6:	782e      	ldrb	r6, [r5, #0]
    8ae8:	3a01      	subs	r2, #1
    8aea:	7016      	strb	r6, [r2, #0]
    8aec:	3501      	adds	r5, #1
    8aee:	e7f8      	b.n	8ae2 <get+0xa2>
    8af0:	001f      	movs	r7, r3
			first = 0;
    8af2:	2400      	movs	r4, #0
    8af4:	e7dd      	b.n	8ab2 <get+0x72>
			*(--d) = *s++;
    8af6:	9e02      	ldr	r6, [sp, #8]
    8af8:	9d01      	ldr	r5, [sp, #4]
    8afa:	3e01      	subs	r6, #1
    8afc:	9602      	str	r6, [sp, #8]
    8afe:	782e      	ldrb	r6, [r5, #0]
    8b00:	9d02      	ldr	r5, [sp, #8]
    8b02:	702e      	strb	r6, [r5, #0]
    8b04:	9e01      	ldr	r6, [sp, #4]
    8b06:	3601      	adds	r6, #1
    8b08:	9601      	str	r6, [sp, #4]
    8b0a:	e7d8      	b.n	8abe <get+0x7e>
    8b0c:	001c      	movs	r4, r3
				remaining = 0;
    8b0e:	2700      	movs	r7, #0
    8b10:	e7e5      	b.n	8ade <get+0x9e>
    8b12:	46c0      	nop			; (mov r8, r8)
    8b14:	4000d000 	.word	0x4000d000

00008b18 <init>:
{
    8b18:	b510      	push	{r4, lr}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    8b1a:	1d1c      	adds	r4, r3, #4
    8b1c:	42a2      	cmp	r2, r4
    8b1e:	d802      	bhi.n	8b26 <init+0xe>
    8b20:	b662      	cpsie	i
    8b22:	2004      	movs	r0, #4
    8b24:	df02      	svc	2
	*rng = (struct rand *)context;
    8b26:	6001      	str	r1, [r0, #0]
	p->threshold = threshold;
    8b28:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    8b2a:	2300      	movs	r3, #0
	p->count = len - offsetof(struct rand, rand);
    8b2c:	3a04      	subs	r2, #4
	p->first = p->last = 0;
    8b2e:	70cb      	strb	r3, [r1, #3]
    8b30:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    8b32:	4b0a      	ldr	r3, [pc, #40]	; (8b5c <init+0x44>)
	p->count = len - offsetof(struct rand, rand);
    8b34:	700a      	strb	r2, [r1, #0]
	if (!rng_isr || !rng_thr) {
    8b36:	681b      	ldr	r3, [r3, #0]
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d003      	beq.n	8b44 <init+0x2c>
    8b3c:	4b08      	ldr	r3, [pc, #32]	; (8b60 <init+0x48>)
    8b3e:	681b      	ldr	r3, [r3, #0]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d10a      	bne.n	8b5a <init+0x42>
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    8b44:	2201      	movs	r2, #1
		NRF_RNG->EVENTS_VALRDY = 0;
    8b46:	2000      	movs	r0, #0
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    8b48:	4b06      	ldr	r3, [pc, #24]	; (8b64 <init+0x4c>)
    8b4a:	4907      	ldr	r1, [pc, #28]	; (8b68 <init+0x50>)
    8b4c:	505a      	str	r2, [r3, r1]
		NRF_RNG->EVENTS_VALRDY = 0;
    8b4e:	4907      	ldr	r1, [pc, #28]	; (8b6c <init+0x54>)
    8b50:	6048      	str	r0, [r1, #4]
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    8b52:	21c1      	movs	r1, #193	; 0xc1
    8b54:	0089      	lsls	r1, r1, #2
    8b56:	505a      	str	r2, [r3, r1]
		NRF_RNG->TASKS_START = 1;
    8b58:	601a      	str	r2, [r3, #0]
}
    8b5a:	bd10      	pop	{r4, pc}
    8b5c:	20000a58 	.word	0x20000a58
    8b60:	20000a5c 	.word	0x20000a5c
    8b64:	4000d000 	.word	0x4000d000
    8b68:	00000504 	.word	0x00000504
    8b6c:	4000d0fc 	.word	0x4000d0fc

00008b70 <rand_init>:
{
    8b70:	b510      	push	{r4, lr}
    8b72:	0013      	movs	r3, r2
	init(&rng_thr, context, context_len, threshold);
    8b74:	000a      	movs	r2, r1
    8b76:	0001      	movs	r1, r0
    8b78:	4801      	ldr	r0, [pc, #4]	; (8b80 <rand_init+0x10>)
    8b7a:	f7ff ffcd 	bl	8b18 <init>
}
    8b7e:	bd10      	pop	{r4, pc}
    8b80:	20000a5c 	.word	0x20000a5c

00008b84 <rand_isr_init>:
{
    8b84:	b510      	push	{r4, lr}
    8b86:	0013      	movs	r3, r2
	init(&rng_isr, context, context_len, threshold);
    8b88:	000a      	movs	r2, r1
    8b8a:	0001      	movs	r1, r0
    8b8c:	4801      	ldr	r0, [pc, #4]	; (8b94 <rand_isr_init+0x10>)
    8b8e:	f7ff ffc3 	bl	8b18 <init>
}
    8b92:	bd10      	pop	{r4, pc}
    8b94:	20000a58 	.word	0x20000a58

00008b98 <rand_get>:
{
    8b98:	b510      	push	{r4, lr}
	return get(rng_thr, octets, rand);
    8b9a:	4b03      	ldr	r3, [pc, #12]	; (8ba8 <rand_get+0x10>)
{
    8b9c:	000a      	movs	r2, r1
	return get(rng_thr, octets, rand);
    8b9e:	0001      	movs	r1, r0
    8ba0:	6818      	ldr	r0, [r3, #0]
    8ba2:	f7ff ff4d 	bl	8a40 <get>
}
    8ba6:	bd10      	pop	{r4, pc}
    8ba8:	20000a5c 	.word	0x20000a5c

00008bac <rand_isr_get>:
{
    8bac:	b510      	push	{r4, lr}
	return get(rng_isr, octets, rand);
    8bae:	4b03      	ldr	r3, [pc, #12]	; (8bbc <rand_isr_get+0x10>)
{
    8bb0:	000a      	movs	r2, r1
	return get(rng_isr, octets, rand);
    8bb2:	0001      	movs	r1, r0
    8bb4:	6818      	ldr	r0, [r3, #0]
    8bb6:	f7ff ff43 	bl	8a40 <get>
}
    8bba:	bd10      	pop	{r4, pc}
    8bbc:	20000a58 	.word	0x20000a58

00008bc0 <isr_rand>:

void isr_rand(void *param)
{
    8bc0:	b510      	push	{r4, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    8bc2:	4c0e      	ldr	r4, [pc, #56]	; (8bfc <isr_rand+0x3c>)
    8bc4:	6863      	ldr	r3, [r4, #4]
    8bc6:	2b00      	cmp	r3, #0
    8bc8:	d016      	beq.n	8bf8 <isr_rand+0x38>
		int ret;

		ret = isr(rng_isr, true);
    8bca:	4b0d      	ldr	r3, [pc, #52]	; (8c00 <isr_rand+0x40>)
    8bcc:	2101      	movs	r1, #1
    8bce:	6818      	ldr	r0, [r3, #0]
    8bd0:	f7ff ff10 	bl	89f4 <isr>
		if (ret != -EBUSY) {
    8bd4:	0003      	movs	r3, r0
    8bd6:	3310      	adds	r3, #16
    8bd8:	d007      	beq.n	8bea <isr_rand+0x2a>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    8bda:	3037      	adds	r0, #55	; 0x37
    8bdc:	4241      	negs	r1, r0
    8bde:	4141      	adcs	r1, r0
    8be0:	4b08      	ldr	r3, [pc, #32]	; (8c04 <isr_rand+0x44>)
    8be2:	b2c9      	uxtb	r1, r1
    8be4:	6818      	ldr	r0, [r3, #0]
    8be6:	f7ff ff05 	bl	89f4 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    8bea:	2300      	movs	r3, #0
    8bec:	6063      	str	r3, [r4, #4]

		if (ret != -EBUSY) {
    8bee:	3010      	adds	r0, #16
    8bf0:	d002      	beq.n	8bf8 <isr_rand+0x38>
			NRF_RNG->TASKS_STOP = 1;
    8bf2:	2201      	movs	r2, #1
    8bf4:	4b04      	ldr	r3, [pc, #16]	; (8c08 <isr_rand+0x48>)
    8bf6:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
			NRF_RNG_regw_sideeffects();
#endif
		}
	}
}
    8bf8:	bd10      	pop	{r4, pc}
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	4000d0fc 	.word	0x4000d0fc
    8c00:	20000a58 	.word	0x20000a58
    8c04:	20000a5c 	.word	0x20000a5c
    8c08:	4000d000 	.word	0x4000d000

00008c0c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    8c0c:	b570      	push	{r4, r5, r6, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    8c0e:	2401      	movs	r4, #1
    8c10:	4b0d      	ldr	r3, [pc, #52]	; (8c48 <do_ecb+0x3c>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    8c12:	4a0e      	ldr	r2, [pc, #56]	; (8c4c <do_ecb+0x40>)
		NRF_ECB->EVENTS_ENDECB = 0;
    8c14:	2500      	movs	r5, #0
    8c16:	490e      	ldr	r1, [pc, #56]	; (8c50 <do_ecb+0x44>)
		NRF_ECB->TASKS_STOPECB = 1;
    8c18:	605c      	str	r4, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    8c1a:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    8c1c:	604d      	str	r5, [r1, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    8c1e:	608d      	str	r5, [r1, #8]
    8c20:	000d      	movs	r5, r1
		NRF_ECB->TASKS_STARTECB = 1;
    8c22:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8c24:	686e      	ldr	r6, [r5, #4]
    8c26:	2e00      	cmp	r6, #0
    8c28:	d105      	bne.n	8c36 <do_ecb+0x2a>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8c2a:	68ae      	ldr	r6, [r5, #8]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8c2c:	2e00      	cmp	r6, #0
    8c2e:	d102      	bne.n	8c36 <do_ecb+0x2a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    8c30:	589e      	ldr	r6, [r3, r2]
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8c32:	2e00      	cmp	r6, #0
    8c34:	d1f6      	bne.n	8c24 <do_ecb+0x18>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    8c36:	605c      	str	r4, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    8c38:	6889      	ldr	r1, [r1, #8]
    8c3a:	2900      	cmp	r1, #0
    8c3c:	d1ea      	bne.n	8c14 <do_ecb+0x8>
    8c3e:	589d      	ldr	r5, [r3, r2]
    8c40:	2d00      	cmp	r5, #0
    8c42:	d0e7      	beq.n	8c14 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    8c44:	5099      	str	r1, [r3, r2]
}
    8c46:	bd70      	pop	{r4, r5, r6, pc}
    8c48:	4000e000 	.word	0x4000e000
    8c4c:	00000504 	.word	0x00000504
    8c50:	4000e0fc 	.word	0x4000e0fc

00008c54 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    8c54:	b570      	push	{r4, r5, r6, lr}
    8c56:	000e      	movs	r6, r1
    8c58:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8c5a:	0001      	movs	r1, r0
{
    8c5c:	0015      	movs	r5, r2
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8c5e:	4668      	mov	r0, sp
    8c60:	2210      	movs	r2, #16
{
    8c62:	001c      	movs	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8c64:	f7f9 fe4e 	bl	2904 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    8c68:	a804      	add	r0, sp, #16
    8c6a:	2210      	movs	r2, #16
    8c6c:	0031      	movs	r1, r6
    8c6e:	f7f9 fe49 	bl	2904 <mem_rcopy>

	do_ecb(&ecb);
    8c72:	4668      	mov	r0, sp
    8c74:	f7ff ffca 	bl	8c0c <do_ecb>

	if (cipher_text_le) {
    8c78:	2d00      	cmp	r5, #0
    8c7a:	d004      	beq.n	8c86 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    8c7c:	2210      	movs	r2, #16
    8c7e:	a908      	add	r1, sp, #32
    8c80:	0028      	movs	r0, r5
    8c82:	f7f9 fe3f 	bl	2904 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    8c86:	2c00      	cmp	r4, #0
    8c88:	d004      	beq.n	8c94 <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    8c8a:	2210      	movs	r2, #16
    8c8c:	a908      	add	r1, sp, #32
    8c8e:	0020      	movs	r0, r4
    8c90:	f7f7 fcea 	bl	668 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    8c94:	b00c      	add	sp, #48	; 0x30
    8c96:	bd70      	pop	{r4, r5, r6, pc}

00008c98 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    8c98:	22a2      	movs	r2, #162	; 0xa2
    8c9a:	4b07      	ldr	r3, [pc, #28]	; (8cb8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    8c9c:	4907      	ldr	r1, [pc, #28]	; (8cbc <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    8c9e:	00d2      	lsls	r2, r2, #3
    8ca0:	5099      	str	r1, [r3, r2]
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d106      	bne.n	8cb4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x1c>
    8ca6:	4a06      	ldr	r2, [pc, #24]	; (8cc0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    8ca8:	4906      	ldr	r1, [pc, #24]	; (8cc4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    8caa:	505a      	str	r2, [r3, r1]
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    8cac:	2101      	movs	r1, #1
    8cae:	4a06      	ldr	r2, [pc, #24]	; (8cc8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x30>)
    8cb0:	5099      	str	r1, [r3, r2]
}
    8cb2:	4770      	bx	lr
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    8cb4:	4a05      	ldr	r2, [pc, #20]	; (8ccc <hal_radio_enable_on_tick_ppi_config_and_enable+0x34>)
    8cb6:	e7f7      	b.n	8ca8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x10>
    8cb8:	4001f000 	.word	0x4001f000
    8cbc:	40008140 	.word	0x40008140
    8cc0:	40001004 	.word	0x40001004
    8cc4:	00000514 	.word	0x00000514
    8cc8:	00000504 	.word	0x00000504
    8ccc:	40001000 	.word	0x40001000

00008cd0 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    8cd0:	4b03      	ldr	r3, [pc, #12]	; (8ce0 <isr_radio+0x10>)
{
    8cd2:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    8cd4:	681b      	ldr	r3, [r3, #0]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d000      	beq.n	8cdc <isr_radio+0xc>
		sfp_radio_isr();
    8cda:	4798      	blx	r3
	}
}
    8cdc:	bd10      	pop	{r4, pc}
    8cde:	46c0      	nop			; (mov r8, r8)
    8ce0:	20000abc 	.word	0x20000abc

00008ce4 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    8ce4:	4b08      	ldr	r3, [pc, #32]	; (8d08 <radio_isr_set+0x24>)
{
    8ce6:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    8ce8:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    8cea:	23c1      	movs	r3, #193	; 0xc1
    8cec:	2110      	movs	r1, #16
    8cee:	4a07      	ldr	r2, [pc, #28]	; (8d0c <radio_isr_set+0x28>)
    8cf0:	009b      	lsls	r3, r3, #2
    8cf2:	50d1      	str	r1, [r2, r3]
    8cf4:	4a06      	ldr	r2, [pc, #24]	; (8d10 <radio_isr_set+0x2c>)
    8cf6:	3b85      	subs	r3, #133	; 0x85
    8cf8:	390e      	subs	r1, #14
    8cfa:	3bff      	subs	r3, #255	; 0xff
    8cfc:	50d1      	str	r1, [r2, r3]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_INTENSET();
#endif
	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    8cfe:	2001      	movs	r0, #1
    8d00:	f7f7 fea0 	bl	a44 <_arch_irq_enable>
}
    8d04:	bd10      	pop	{r4, pc}
    8d06:	46c0      	nop			; (mov r8, r8)
    8d08:	20000abc 	.word	0x20000abc
    8d0c:	40001000 	.word	0x40001000
    8d10:	e000e100 	.word	0xe000e100

00008d14 <radio_setup>:

	radio_gpio_lna_off();
#endif /* CONFIG_BT_CTLR_GPIO_LNA_PIN */

	hal_radio_ram_prio_setup();
}
    8d14:	4770      	bx	lr
	...

00008d18 <radio_reset>:

void radio_reset(void)
{
    8d18:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    8d1a:	2001      	movs	r0, #1
    8d1c:	f7f7 fe9e 	bl	a5c <_arch_irq_disable>

	NRF_RADIO->POWER =
    8d20:	2100      	movs	r1, #0
    8d22:	4a03      	ldr	r2, [pc, #12]	; (8d30 <radio_reset+0x18>)
    8d24:	4b03      	ldr	r3, [pc, #12]	; (8d34 <radio_reset+0x1c>)
    8d26:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif
	NRF_RADIO->POWER =
    8d28:	3101      	adds	r1, #1
    8d2a:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif

	hal_radio_reset();
}
    8d2c:	bd10      	pop	{r4, pc}
    8d2e:	46c0      	nop			; (mov r8, r8)
    8d30:	40001000 	.word	0x40001000
    8d34:	00000ffc 	.word	0x00000ffc

00008d38 <radio_phy_set>:
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    8d38:	2301      	movs	r3, #1
	switch (phy) {
    8d3a:	2802      	cmp	r0, #2
    8d3c:	d000      	beq.n	8d40 <radio_phy_set+0x8>
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    8d3e:	3302      	adds	r3, #2
{
	u32_t mode;

	mode = hal_radio_phy_mode_get(phy, flags);

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    8d40:	22a2      	movs	r2, #162	; 0xa2
    8d42:	4902      	ldr	r1, [pc, #8]	; (8d4c <radio_phy_set+0x14>)
    8d44:	00d2      	lsls	r2, r2, #3
    8d46:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BT_CTLR_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BT_CTLR_RADIO_ENABLE_FAST */
}
    8d48:	4770      	bx	lr
    8d4a:	46c0      	nop			; (mov r8, r8)
    8d4c:	40001000 	.word	0x40001000

00008d50 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    8d50:	4b01      	ldr	r3, [pc, #4]	; (8d58 <radio_tx_power_set+0x8>)
    8d52:	4a02      	ldr	r2, [pc, #8]	; (8d5c <radio_tx_power_set+0xc>)
    8d54:	50d0      	str	r0, [r2, r3]
}
    8d56:	4770      	bx	lr
    8d58:	0000050c 	.word	0x0000050c
    8d5c:	40001000 	.word	0x40001000

00008d60 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    8d60:	23a1      	movs	r3, #161	; 0xa1
    8d62:	4a02      	ldr	r2, [pc, #8]	; (8d6c <radio_freq_chan_set+0xc>)
    8d64:	00db      	lsls	r3, r3, #3
    8d66:	50d0      	str	r0, [r2, r3]
}
    8d68:	4770      	bx	lr
    8d6a:	46c0      	nop			; (mov r8, r8)
    8d6c:	40001000 	.word	0x40001000

00008d70 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    8d70:	4b06      	ldr	r3, [pc, #24]	; (8d8c <radio_whiten_iv_set+0x1c>)
    8d72:	4a07      	ldr	r2, [pc, #28]	; (8d90 <radio_whiten_iv_set+0x20>)
    8d74:	5098      	str	r0, [r3, r2]

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    8d76:	3a3c      	subs	r2, #60	; 0x3c
    8d78:	5899      	ldr	r1, [r3, r2]
    8d7a:	4806      	ldr	r0, [pc, #24]	; (8d94 <radio_whiten_iv_set+0x24>)
    8d7c:	4001      	ands	r1, r0
    8d7e:	5099      	str	r1, [r3, r2]
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    8d80:	2180      	movs	r1, #128	; 0x80
    8d82:	5898      	ldr	r0, [r3, r2]
    8d84:	0489      	lsls	r1, r1, #18
    8d86:	4301      	orrs	r1, r0
    8d88:	5099      	str	r1, [r3, r2]
			    RADIO_PCNF1_WHITEEN_Msk;
}
    8d8a:	4770      	bx	lr
    8d8c:	40001000 	.word	0x40001000
    8d90:	00000554 	.word	0x00000554
    8d94:	fdffffff 	.word	0xfdffffff

00008d98 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    8d98:	2100      	movs	r1, #0
    8d9a:	4a0a      	ldr	r2, [pc, #40]	; (8dc4 <radio_aa_set+0x2c>)
    8d9c:	4b0a      	ldr	r3, [pc, #40]	; (8dc8 <radio_aa_set+0x30>)
    8d9e:	50d1      	str	r1, [r2, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    8da0:	3101      	adds	r1, #1
    8da2:	3304      	adds	r3, #4
    8da4:	50d1      	str	r1, [r2, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    8da6:	78c1      	ldrb	r1, [r0, #3]
    8da8:	4b08      	ldr	r3, [pc, #32]	; (8dcc <radio_aa_set+0x34>)
    8daa:	50d1      	str	r1, [r2, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    8dac:	7883      	ldrb	r3, [r0, #2]
    8dae:	7841      	ldrb	r1, [r0, #1]
    8db0:	061b      	lsls	r3, r3, #24
    8db2:	0409      	lsls	r1, r1, #16
    8db4:	430b      	orrs	r3, r1
    8db6:	7801      	ldrb	r1, [r0, #0]
    8db8:	0209      	lsls	r1, r1, #8
    8dba:	430b      	orrs	r3, r1
    8dbc:	4904      	ldr	r1, [pc, #16]	; (8dd0 <radio_aa_set+0x38>)
    8dbe:	5053      	str	r3, [r2, r1]
}
    8dc0:	4770      	bx	lr
    8dc2:	46c0      	nop			; (mov r8, r8)
    8dc4:	40001000 	.word	0x40001000
    8dc8:	0000052c 	.word	0x0000052c
    8dcc:	00000524 	.word	0x00000524
    8dd0:	0000051c 	.word	0x0000051c

00008dd4 <radio_pkt_configure>:

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    8dd4:	b510      	push	{r4, lr}
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DATA_LENGTH_CLEAR) && dc) {
    8dd6:	07d3      	lsls	r3, r2, #31
    8dd8:	d500      	bpl.n	8ddc <radio_pkt_configure+0x8>
		bits_len = 5;
    8dda:	2005      	movs	r0, #5

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    8ddc:	2308      	movs	r3, #8
    8dde:	22f0      	movs	r2, #240	; 0xf0
    8de0:	1a1b      	subs	r3, r3, r0
    8de2:	0312      	lsls	r2, r2, #12
    8de4:	041b      	lsls	r3, r3, #16
    8de6:	4013      	ands	r3, r2
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    8de8:	220f      	movs	r2, #15
    8dea:	4010      	ands	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    8dec:	32f1      	adds	r2, #241	; 0xf1
    8dee:	4310      	orrs	r0, r2
    8df0:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    8df2:	4a08      	ldr	r2, [pc, #32]	; (8e14 <radio_pkt_configure+0x40>)
    8df4:	4b08      	ldr	r3, [pc, #32]	; (8e18 <radio_pkt_configure+0x44>)
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    8df6:	4c09      	ldr	r4, [pc, #36]	; (8e1c <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    8df8:	5098      	str	r0, [r3, r2]
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    8dfa:	20a3      	movs	r0, #163	; 0xa3
    8dfc:	00c0      	lsls	r0, r0, #3
    8dfe:	581a      	ldr	r2, [r3, r0]
    8e00:	4022      	ands	r2, r4
    8e02:	501a      	str	r2, [r3, r0]
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    8e04:	22c0      	movs	r2, #192	; 0xc0
    8e06:	581c      	ldr	r4, [r3, r0]
    8e08:	0292      	lsls	r2, r2, #10
    8e0a:	4322      	orrs	r2, r4
    8e0c:	4311      	orrs	r1, r2
    8e0e:	5019      	str	r1, [r3, r0]
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    8e10:	bd10      	pop	{r4, pc}
    8e12:	46c0      	nop			; (mov r8, r8)
    8e14:	00000514 	.word	0x00000514
    8e18:	40001000 	.word	0x40001000
    8e1c:	fef80000 	.word	0xfef80000

00008e20 <radio_pkt_rx_set>:
    8e20:	4b01      	ldr	r3, [pc, #4]	; (8e28 <radio_pkt_rx_set+0x8>)
    8e22:	4a02      	ldr	r2, [pc, #8]	; (8e2c <radio_pkt_rx_set+0xc>)
    8e24:	50d0      	str	r0, [r2, r3]
    8e26:	4770      	bx	lr
    8e28:	00000504 	.word	0x00000504
    8e2c:	40001000 	.word	0x40001000

00008e30 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    8e30:	4b01      	ldr	r3, [pc, #4]	; (8e38 <radio_pkt_tx_set+0x8>)
    8e32:	4a02      	ldr	r2, [pc, #8]	; (8e3c <radio_pkt_tx_set+0xc>)
    8e34:	50d0      	str	r0, [r2, r3]
}
    8e36:	4770      	bx	lr
    8e38:	00000504 	.word	0x00000504
    8e3c:	40001000 	.word	0x40001000

00008e40 <radio_tx_ready_delay_get>:

u32_t radio_tx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_ready_delay_us_get(phy, flags);
}
    8e40:	208c      	movs	r0, #140	; 0x8c
    8e42:	4770      	bx	lr

00008e44 <radio_tx_chain_delay_get>:

u32_t radio_tx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_chain_delay_us_get(phy, flags);
}
    8e44:	2001      	movs	r0, #1
    8e46:	4770      	bx	lr

00008e48 <radio_rx_ready_delay_get>:

u32_t radio_rx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_ready_delay_us_get(phy, flags);
}
    8e48:	208a      	movs	r0, #138	; 0x8a
    8e4a:	4770      	bx	lr

00008e4c <radio_rx_chain_delay_get>:

u32_t radio_rx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_chain_delay_us_get(phy, flags);
}
    8e4c:	2003      	movs	r0, #3
    8e4e:	4770      	bx	lr

00008e50 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    8e50:	2201      	movs	r2, #1
    8e52:	4b01      	ldr	r3, [pc, #4]	; (8e58 <radio_rx_enable+0x8>)
    8e54:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_RXEN();
#endif
}
    8e56:	4770      	bx	lr
    8e58:	40001000 	.word	0x40001000

00008e5c <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    8e5c:	2201      	movs	r2, #1
    8e5e:	4b01      	ldr	r3, [pc, #4]	; (8e64 <radio_tx_enable+0x8>)
    8e60:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_TXEN();
#endif
}
    8e62:	4770      	bx	lr
    8e64:	40001000 	.word	0x40001000

00008e68 <radio_disable>:
	NRF_PPI_regw_sideeffects_CHEN();
	NRF_PPI_tasw_sideeffects();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    8e68:	2280      	movs	r2, #128	; 0x80
    8e6a:	2100      	movs	r1, #0
    8e6c:	4b02      	ldr	r3, [pc, #8]	; (8e78 <radio_disable+0x10>)
    8e6e:	0092      	lsls	r2, r2, #2
    8e70:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    8e72:	2201      	movs	r2, #1
    8e74:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_DISABLE();
#endif
}
    8e76:	4770      	bx	lr
    8e78:	40001000 	.word	0x40001000

00008e7c <radio_status_reset>:
	/* NOTE: Only EVENTS_* registers read (checked) by software needs reset
	 *       between Radio IRQs. In PPI use, irrespective of stored EVENT_*
	 *       register value, PPI task will be triggered. Hence, other
	 *       EVENT_* registers are not reset to save code and CPU time.
	 */
	NRF_RADIO->EVENTS_READY = 0;
    8e7c:	2200      	movs	r2, #0
    8e7e:	4b02      	ldr	r3, [pc, #8]	; (8e88 <radio_status_reset+0xc>)
    8e80:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_END = 0;
    8e82:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    8e84:	615a      	str	r2, [r3, #20]
}
    8e86:	4770      	bx	lr
    8e88:	400010fc 	.word	0x400010fc

00008e8c <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    8e8c:	4b02      	ldr	r3, [pc, #8]	; (8e98 <radio_is_ready+0xc>)
    8e8e:	6858      	ldr	r0, [r3, #4]
    8e90:	1e43      	subs	r3, r0, #1
    8e92:	4198      	sbcs	r0, r3
}
    8e94:	4770      	bx	lr
    8e96:	46c0      	nop			; (mov r8, r8)
    8e98:	400010fc 	.word	0x400010fc

00008e9c <radio_is_done>:
}

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    8e9c:	4b02      	ldr	r3, [pc, #8]	; (8ea8 <radio_is_done+0xc>)
    8e9e:	6918      	ldr	r0, [r3, #16]
    8ea0:	1e43      	subs	r3, r0, #1
    8ea2:	4198      	sbcs	r0, r3
}
    8ea4:	4770      	bx	lr
    8ea6:	46c0      	nop			; (mov r8, r8)
    8ea8:	400010fc 	.word	0x400010fc

00008eac <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    8eac:	23aa      	movs	r3, #170	; 0xaa
    8eae:	4a03      	ldr	r2, [pc, #12]	; (8ebc <radio_is_idle+0x10>)
    8eb0:	00db      	lsls	r3, r3, #3
    8eb2:	58d0      	ldr	r0, [r2, r3]
    8eb4:	4243      	negs	r3, r0
    8eb6:	4158      	adcs	r0, r3
}
    8eb8:	4770      	bx	lr
    8eba:	46c0      	nop			; (mov r8, r8)
    8ebc:	40001000 	.word	0x40001000

00008ec0 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    8ec0:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    8ec2:	2404      	movs	r4, #4
    8ec4:	4b04      	ldr	r3, [pc, #16]	; (8ed8 <radio_crc_configure+0x18>)
    8ec6:	4a05      	ldr	r2, [pc, #20]	; (8edc <radio_crc_configure+0x1c>)
    8ec8:	34ff      	adds	r4, #255	; 0xff
    8eca:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    8ecc:	3204      	adds	r2, #4
    8ece:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    8ed0:	4a03      	ldr	r2, [pc, #12]	; (8ee0 <radio_crc_configure+0x20>)
    8ed2:	5099      	str	r1, [r3, r2]
}
    8ed4:	bd10      	pop	{r4, pc}
    8ed6:	46c0      	nop			; (mov r8, r8)
    8ed8:	40001000 	.word	0x40001000
    8edc:	00000534 	.word	0x00000534
    8ee0:	0000053c 	.word	0x0000053c

00008ee4 <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    8ee4:	2380      	movs	r3, #128	; 0x80
    8ee6:	4a03      	ldr	r2, [pc, #12]	; (8ef4 <radio_crc_is_valid+0x10>)
    8ee8:	00db      	lsls	r3, r3, #3
    8eea:	58d0      	ldr	r0, [r2, r3]
    8eec:	1e43      	subs	r3, r0, #1
    8eee:	4198      	sbcs	r0, r3
}
    8ef0:	4770      	bx	lr
    8ef2:	46c0      	nop			; (mov r8, r8)
    8ef4:	40001000 	.word	0x40001000

00008ef8 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    8ef8:	4800      	ldr	r0, [pc, #0]	; (8efc <radio_pkt_empty_get+0x4>)
    8efa:	4770      	bx	lr
    8efc:	20000a8c 	.word	0x20000a8c

00008f00 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    8f00:	4800      	ldr	r0, [pc, #0]	; (8f04 <radio_pkt_scratch_get+0x4>)
    8f02:	4770      	bx	lr
    8f04:	20000a90 	.word	0x20000a90

00008f08 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8f08:	2380      	movs	r3, #128	; 0x80
    8f0a:	210b      	movs	r1, #11
    8f0c:	4a01      	ldr	r2, [pc, #4]	; (8f14 <radio_switch_complete_and_rx+0xc>)
    8f0e:	009b      	lsls	r3, r3, #2
    8f10:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8f12:	4770      	bx	lr
    8f14:	40001000 	.word	0x40001000

00008f18 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8f18:	2380      	movs	r3, #128	; 0x80
    8f1a:	2107      	movs	r1, #7
    8f1c:	4a01      	ldr	r2, [pc, #4]	; (8f24 <radio_switch_complete_and_tx+0xc>)
    8f1e:	009b      	lsls	r3, r3, #2
    8f20:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8f22:	4770      	bx	lr
    8f24:	40001000 	.word	0x40001000

00008f28 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    8f28:	2380      	movs	r3, #128	; 0x80
    8f2a:	2103      	movs	r1, #3
    8f2c:	4a01      	ldr	r2, [pc, #4]	; (8f34 <radio_switch_complete_and_disable+0xc>)
    8f2e:	009b      	lsls	r3, r3, #2
    8f30:	50d1      	str	r1, [r2, r3]
			   HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8f32:	4770      	bx	lr
    8f34:	40001000 	.word	0x40001000

00008f38 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    8f38:	2280      	movs	r2, #128	; 0x80
    8f3a:	2388      	movs	r3, #136	; 0x88
    8f3c:	4903      	ldr	r1, [pc, #12]	; (8f4c <radio_rssi_measure+0x14>)
    8f3e:	0092      	lsls	r2, r2, #2
    8f40:	5888      	ldr	r0, [r1, r2]
    8f42:	005b      	lsls	r3, r3, #1
    8f44:	4303      	orrs	r3, r0
    8f46:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    8f48:	4770      	bx	lr
    8f4a:	46c0      	nop			; (mov r8, r8)
    8f4c:	40001000 	.word	0x40001000

00008f50 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    8f50:	23a9      	movs	r3, #169	; 0xa9
    8f52:	4a02      	ldr	r2, [pc, #8]	; (8f5c <radio_rssi_get+0xc>)
    8f54:	00db      	lsls	r3, r3, #3
    8f56:	58d0      	ldr	r0, [r2, r3]
}
    8f58:	4770      	bx	lr
    8f5a:	46c0      	nop			; (mov r8, r8)
    8f5c:	40001000 	.word	0x40001000

00008f60 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    8f60:	2200      	movs	r2, #0
    8f62:	4b01      	ldr	r3, [pc, #4]	; (8f68 <radio_rssi_status_reset+0x8>)
    8f64:	621a      	str	r2, [r3, #32]
}
    8f66:	4770      	bx	lr
    8f68:	400010fc 	.word	0x400010fc

00008f6c <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    8f6c:	4b02      	ldr	r3, [pc, #8]	; (8f78 <radio_rssi_is_ready+0xc>)
    8f6e:	6a18      	ldr	r0, [r3, #32]
    8f70:	1e43      	subs	r3, r0, #1
    8f72:	4198      	sbcs	r0, r3
}
    8f74:	4770      	bx	lr
    8f76:	46c0      	nop			; (mov r8, r8)
    8f78:	400010fc 	.word	0x400010fc

00008f7c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    8f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8f7e:	27c0      	movs	r7, #192	; 0xc0
{
    8f80:	2400      	movs	r4, #0
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8f82:	00ff      	lsls	r7, r7, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    8f84:	7855      	ldrb	r5, [r2, #1]
    8f86:	7813      	ldrb	r3, [r2, #0]
    8f88:	022d      	lsls	r5, r5, #8
    8f8a:	431d      	orrs	r5, r3
    8f8c:	7893      	ldrb	r3, [r2, #2]
    8f8e:	4e0e      	ldr	r6, [pc, #56]	; (8fc8 <radio_filter_configure+0x4c>)
    8f90:	041b      	lsls	r3, r3, #16
    8f92:	431d      	orrs	r5, r3
    8f94:	78d3      	ldrb	r3, [r2, #3]
    8f96:	061b      	lsls	r3, r3, #24
    8f98:	432b      	orrs	r3, r5
    8f9a:	00a5      	lsls	r5, r4, #2
    8f9c:	19ad      	adds	r5, r5, r6
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8f9e:	51eb      	str	r3, [r5, r7]
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    8fa0:	7913      	ldrb	r3, [r2, #4]
    8fa2:	3401      	adds	r4, #1
    8fa4:	469c      	mov	ip, r3
    8fa6:	4666      	mov	r6, ip
    8fa8:	7953      	ldrb	r3, [r2, #5]
		bdaddr += 6;
    8faa:	3206      	adds	r2, #6
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    8fac:	021b      	lsls	r3, r3, #8
    8fae:	4333      	orrs	r3, r6
    8fb0:	26c4      	movs	r6, #196	; 0xc4
    8fb2:	00f6      	lsls	r6, r6, #3
    8fb4:	51ab      	str	r3, [r5, r6]
	for (index = 0; index < 8; index++) {
    8fb6:	2c08      	cmp	r4, #8
    8fb8:	d1e4      	bne.n	8f84 <radio_filter_configure+0x8>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    8fba:	23c8      	movs	r3, #200	; 0xc8
    8fbc:	0209      	lsls	r1, r1, #8
    8fbe:	4a02      	ldr	r2, [pc, #8]	; (8fc8 <radio_filter_configure+0x4c>)
    8fc0:	4308      	orrs	r0, r1
    8fc2:	00db      	lsls	r3, r3, #3
    8fc4:	50d0      	str	r0, [r2, r3]
}
    8fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fc8:	40001000 	.word	0x40001000

00008fcc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    8fcc:	22c8      	movs	r2, #200	; 0xc8
    8fce:	20ff      	movs	r0, #255	; 0xff
    8fd0:	4902      	ldr	r1, [pc, #8]	; (8fdc <radio_filter_disable+0x10>)
    8fd2:	00d2      	lsls	r2, r2, #3
    8fd4:	588b      	ldr	r3, [r1, r2]
    8fd6:	4383      	bics	r3, r0
    8fd8:	508b      	str	r3, [r1, r2]
}
    8fda:	4770      	bx	lr
    8fdc:	40001000 	.word	0x40001000

00008fe0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    8fe0:	2200      	movs	r2, #0
    8fe2:	4b01      	ldr	r3, [pc, #4]	; (8fe8 <radio_filter_status_reset+0x8>)
    8fe4:	619a      	str	r2, [r3, #24]
}
    8fe6:	4770      	bx	lr
    8fe8:	400010fc 	.word	0x400010fc

00008fec <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    8fec:	4b02      	ldr	r3, [pc, #8]	; (8ff8 <radio_filter_has_match+0xc>)
    8fee:	6998      	ldr	r0, [r3, #24]
    8ff0:	1e43      	subs	r3, r0, #1
    8ff2:	4198      	sbcs	r0, r3
}
    8ff4:	4770      	bx	lr
    8ff6:	46c0      	nop			; (mov r8, r8)
    8ff8:	400010fc 	.word	0x400010fc

00008ffc <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    8ffc:	2382      	movs	r3, #130	; 0x82
    8ffe:	4a02      	ldr	r2, [pc, #8]	; (9008 <radio_filter_match_get+0xc>)
    9000:	00db      	lsls	r3, r3, #3
    9002:	58d0      	ldr	r0, [r2, r3]
}
    9004:	4770      	bx	lr
    9006:	46c0      	nop			; (mov r8, r8)
    9008:	40001000 	.word	0x40001000

0000900c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    900c:	2180      	movs	r1, #128	; 0x80
    900e:	23d2      	movs	r3, #210	; 0xd2
    9010:	4a04      	ldr	r2, [pc, #16]	; (9024 <radio_tmr_status_reset+0x18>)
    9012:	02c9      	lsls	r1, r1, #11
    9014:	009b      	lsls	r3, r3, #2
    9016:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    9018:	217f      	movs	r1, #127	; 0x7f
    901a:	4a03      	ldr	r2, [pc, #12]	; (9028 <radio_tmr_status_reset+0x1c>)
    901c:	33c1      	adds	r3, #193	; 0xc1
    901e:	33ff      	adds	r3, #255	; 0xff
    9020:	50d1      	str	r1, [r2, r3]
			HAL_TRIGGER_CRYPT_PPI_DISABLE;

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
}
    9022:	4770      	bx	lr
    9024:	4000b000 	.word	0x4000b000
    9028:	4001f000 	.word	0x4001f000

0000902c <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    902c:	4b01      	ldr	r3, [pc, #4]	; (9034 <radio_tmr_tifs_set+0x8>)
    902e:	4a02      	ldr	r2, [pc, #8]	; (9038 <radio_tmr_tifs_set+0xc>)
    9030:	50d0      	str	r0, [r2, r3]
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    9032:	4770      	bx	lr
    9034:	00000544 	.word	0x00000544
    9038:	40001000 	.word	0x40001000

0000903c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    903e:	4b1a      	ldr	r3, [pc, #104]	; (90a8 <radio_tmr_start+0x6c>)
{
    9040:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    9042:	18d1      	adds	r1, r2, r3
    9044:	4b19      	ldr	r3, [pc, #100]	; (90ac <radio_tmr_start+0x70>)
{
    9046:	0005      	movs	r5, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    9048:	4299      	cmp	r1, r3
    904a:	d902      	bls.n	9052 <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    904c:	4b18      	ldr	r3, [pc, #96]	; (90b0 <radio_tmr_start+0x74>)
		ticks_start--;
    904e:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    9050:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    9052:	4918      	ldr	r1, [pc, #96]	; (90b4 <radio_tmr_start+0x78>)
    9054:	0010      	movs	r0, r2
    9056:	f7f7 f8b7 	bl	1c8 <__aeabi_uidiv>

	EVENT_TIMER->TASKS_CLEAR = 1;
    905a:	2201      	movs	r2, #1
    905c:	4b16      	ldr	r3, [pc, #88]	; (90b8 <radio_tmr_start+0x7c>)
	EVENT_TIMER->MODE = 0;
    905e:	4917      	ldr	r1, [pc, #92]	; (90bc <radio_tmr_start+0x80>)
	EVENT_TIMER->TASKS_CLEAR = 1;
    9060:	60da      	str	r2, [r3, #12]
	EVENT_TIMER->MODE = 0;
    9062:	2200      	movs	r2, #0
    9064:	505a      	str	r2, [r3, r1]
	EVENT_TIMER->PRESCALER = 4;
    9066:	22a2      	movs	r2, #162	; 0xa2
	remainder /= 1000000UL;
    9068:	0006      	movs	r6, r0
	EVENT_TIMER->PRESCALER = 4;
    906a:	2004      	movs	r0, #4

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    906c:	27a9      	movs	r7, #169	; 0xa9
	EVENT_TIMER->PRESCALER = 4;
    906e:	00d2      	lsls	r2, r2, #3
    9070:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    9072:	3802      	subs	r0, #2
    9074:	3a08      	subs	r2, #8
    9076:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->CC[0] = remainder;
    9078:	3238      	adds	r2, #56	; 0x38
    907a:	509e      	str	r6, [r3, r2]
	NRF_RTC0->CC[2] = ticks_start;
    907c:	4a10      	ldr	r2, [pc, #64]	; (90c0 <radio_tmr_start+0x84>)
    907e:	00ff      	lsls	r7, r7, #3
    9080:	51d4      	str	r4, [r2, r7]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    9082:	2780      	movs	r7, #128	; 0x80
    9084:	24d1      	movs	r4, #209	; 0xd1
    9086:	02ff      	lsls	r7, r7, #11
    9088:	00a4      	lsls	r4, r4, #2
    908a:	5117      	str	r7, [r2, r4]

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    908c:	4a0d      	ldr	r2, [pc, #52]	; (90c4 <radio_tmr_start+0x88>)
    908e:	4f0e      	ldr	r7, [pc, #56]	; (90c8 <radio_tmr_start+0x8c>)
    9090:	34d5      	adds	r4, #213	; 0xd5
    9092:	34ff      	adds	r4, #255	; 0xff
    9094:	5117      	str	r7, [r2, r4]
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    9096:	4c0d      	ldr	r4, [pc, #52]	; (90cc <radio_tmr_start+0x90>)
    9098:	5113      	str	r3, [r2, r4]
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    909a:	5050      	str	r0, [r2, r1]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    909c:	0028      	movs	r0, r5
    909e:	f7ff fdfb 	bl	8c98 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    90a2:	0030      	movs	r0, r6
    90a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90a6:	46c0      	nop			; (mov r8, r8)
    90a8:	fff0bdc0 	.word	0xfff0bdc0
    90ac:	7ff0bdbf 	.word	0x7ff0bdbf
    90b0:	01d1a94a 	.word	0x01d1a94a
    90b4:	000f4240 	.word	0x000f4240
    90b8:	40008000 	.word	0x40008000
    90bc:	00000504 	.word	0x00000504
    90c0:	4000b000 	.word	0x4000b000
    90c4:	4001f000 	.word	0x4001f000
    90c8:	4000b148 	.word	0x4000b148
    90cc:	0000051c 	.word	0x0000051c

000090d0 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    90d0:	2201      	movs	r2, #1
    90d2:	4b02      	ldr	r3, [pc, #8]	; (90dc <radio_tmr_stop+0xc>)
    90d4:	605a      	str	r2, [r3, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    90d6:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_STOP(SW_SWITCH_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    90d8:	4770      	bx	lr
    90da:	46c0      	nop			; (mov r8, r8)
    90dc:	40008000 	.word	0x40008000

000090e0 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    90e0:	4b0a      	ldr	r3, [pc, #40]	; (910c <radio_tmr_hcto_configure+0x2c>)
    90e2:	4a0b      	ldr	r2, [pc, #44]	; (9110 <radio_tmr_hcto_configure+0x30>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    90e4:	490b      	ldr	r1, [pc, #44]	; (9114 <radio_tmr_hcto_configure+0x34>)
	EVENT_TIMER->CC[1] = hcto;
    90e6:	50d0      	str	r0, [r2, r3]
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    90e8:	22a5      	movs	r2, #165	; 0xa5
    90ea:	4b0b      	ldr	r3, [pc, #44]	; (9118 <radio_tmr_hcto_configure+0x38>)
    90ec:	00d2      	lsls	r2, r2, #3
    90ee:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    90f0:	490a      	ldr	r1, [pc, #40]	; (911c <radio_tmr_hcto_configure+0x3c>)
    90f2:	4a0b      	ldr	r2, [pc, #44]	; (9120 <radio_tmr_hcto_configure+0x40>)
    90f4:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    90f6:	490b      	ldr	r1, [pc, #44]	; (9124 <radio_tmr_hcto_configure+0x44>)
    90f8:	3204      	adds	r2, #4
    90fa:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    90fc:	490a      	ldr	r1, [pc, #40]	; (9128 <radio_tmr_hcto_configure+0x48>)
    90fe:	4a0b      	ldr	r2, [pc, #44]	; (912c <radio_tmr_hcto_configure+0x4c>)
    9100:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    9102:	2118      	movs	r1, #24
    9104:	4a0a      	ldr	r2, [pc, #40]	; (9130 <radio_tmr_hcto_configure+0x50>)
    9106:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
		HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    9108:	4770      	bx	lr
    910a:	46c0      	nop			; (mov r8, r8)
    910c:	00000544 	.word	0x00000544
    9110:	40008000 	.word	0x40008000
    9114:	40001104 	.word	0x40001104
    9118:	4001f000 	.word	0x4001f000
    911c:	40008044 	.word	0x40008044
    9120:	0000052c 	.word	0x0000052c
    9124:	40008144 	.word	0x40008144
    9128:	40001010 	.word	0x40001010
    912c:	00000534 	.word	0x00000534
    9130:	00000504 	.word	0x00000504

00009134 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    9134:	22a4      	movs	r2, #164	; 0xa4
    9136:	4b08      	ldr	r3, [pc, #32]	; (9158 <radio_tmr_aa_capture+0x24>)
    9138:	4908      	ldr	r1, [pc, #32]	; (915c <radio_tmr_aa_capture+0x28>)
    913a:	00d2      	lsls	r2, r2, #3
    913c:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    913e:	4908      	ldr	r1, [pc, #32]	; (9160 <radio_tmr_aa_capture+0x2c>)
    9140:	4a08      	ldr	r2, [pc, #32]	; (9164 <radio_tmr_aa_capture+0x30>)
    9142:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    9144:	4908      	ldr	r1, [pc, #32]	; (9168 <radio_tmr_aa_capture+0x34>)
    9146:	3204      	adds	r2, #4
    9148:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    914a:	4908      	ldr	r1, [pc, #32]	; (916c <radio_tmr_aa_capture+0x38>)
    914c:	4a08      	ldr	r2, [pc, #32]	; (9170 <radio_tmr_aa_capture+0x3c>)
    914e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    9150:	210c      	movs	r1, #12
    9152:	4a08      	ldr	r2, [pc, #32]	; (9174 <radio_tmr_aa_capture+0x40>)
    9154:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    9156:	4770      	bx	lr
    9158:	4001f000 	.word	0x4001f000
    915c:	40001100 	.word	0x40001100
    9160:	40008040 	.word	0x40008040
    9164:	00000524 	.word	0x00000524
    9168:	40001104 	.word	0x40001104
    916c:	40008044 	.word	0x40008044
    9170:	0000052c 	.word	0x0000052c
    9174:	00000504 	.word	0x00000504

00009178 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    9178:	4b01      	ldr	r3, [pc, #4]	; (9180 <radio_tmr_aa_get+0x8>)
    917a:	4a02      	ldr	r2, [pc, #8]	; (9184 <radio_tmr_aa_get+0xc>)
    917c:	58d0      	ldr	r0, [r2, r3]
}
    917e:	4770      	bx	lr
    9180:	00000544 	.word	0x00000544
    9184:	40008000 	.word	0x40008000

00009188 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    9188:	4b01      	ldr	r3, [pc, #4]	; (9190 <radio_tmr_aa_save+0x8>)
    918a:	6018      	str	r0, [r3, #0]
}
    918c:	4770      	bx	lr
    918e:	46c0      	nop			; (mov r8, r8)
    9190:	20000ab8 	.word	0x20000ab8

00009194 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
    9194:	4b01      	ldr	r3, [pc, #4]	; (919c <radio_tmr_aa_restore+0x8>)
    9196:	6818      	ldr	r0, [r3, #0]
}
    9198:	4770      	bx	lr
    919a:	46c0      	nop			; (mov r8, r8)
    919c:	20000ab8 	.word	0x20000ab8

000091a0 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    91a0:	23a8      	movs	r3, #168	; 0xa8
    91a2:	4a02      	ldr	r2, [pc, #8]	; (91ac <radio_tmr_ready_get+0xc>)
    91a4:	00db      	lsls	r3, r3, #3
    91a6:	58d0      	ldr	r0, [r2, r3]
}
    91a8:	4770      	bx	lr
    91aa:	46c0      	nop			; (mov r8, r8)
    91ac:	40008000 	.word	0x40008000

000091b0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    91b0:	22a7      	movs	r2, #167	; 0xa7
    91b2:	4b05      	ldr	r3, [pc, #20]	; (91c8 <radio_tmr_end_capture+0x18>)
    91b4:	4905      	ldr	r1, [pc, #20]	; (91cc <radio_tmr_end_capture+0x1c>)
    91b6:	00d2      	lsls	r2, r2, #3
    91b8:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    91ba:	4905      	ldr	r1, [pc, #20]	; (91d0 <radio_tmr_end_capture+0x20>)
    91bc:	4a05      	ldr	r2, [pc, #20]	; (91d4 <radio_tmr_end_capture+0x24>)
    91be:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    91c0:	2120      	movs	r1, #32
    91c2:	4a05      	ldr	r2, [pc, #20]	; (91d8 <radio_tmr_end_capture+0x28>)
    91c4:	5099      	str	r1, [r3, r2]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    91c6:	4770      	bx	lr
    91c8:	4001f000 	.word	0x4001f000
    91cc:	4000110c 	.word	0x4000110c
    91d0:	40008048 	.word	0x40008048
    91d4:	0000053c 	.word	0x0000053c
    91d8:	00000504 	.word	0x00000504

000091dc <radio_tmr_end_get>:
    91dc:	23a9      	movs	r3, #169	; 0xa9
    91de:	4a02      	ldr	r2, [pc, #8]	; (91e8 <radio_tmr_end_get+0xc>)
    91e0:	00db      	lsls	r3, r3, #3
    91e2:	58d0      	ldr	r0, [r2, r3]
    91e4:	4770      	bx	lr
    91e6:	46c0      	nop			; (mov r8, r8)
    91e8:	40008000 	.word	0x40008000

000091ec <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    91ec:	23a9      	movs	r3, #169	; 0xa9
    91ee:	4a02      	ldr	r2, [pc, #8]	; (91f8 <radio_tmr_tifs_base_get+0xc>)
    91f0:	00db      	lsls	r3, r3, #3
    91f2:	58d0      	ldr	r0, [r2, r3]
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    91f4:	4770      	bx	lr
    91f6:	46c0      	nop			; (mov r8, r8)
    91f8:	40008000 	.word	0x40008000

000091fc <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    91fc:	b570      	push	{r4, r5, r6, lr}

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    91fe:	24a0      	movs	r4, #160	; 0xa0
    9200:	2100      	movs	r1, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9202:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9204:	4b12      	ldr	r3, [pc, #72]	; (9250 <radio_ccm_rx_pkt_set+0x54>)
    9206:	00e4      	lsls	r4, r4, #3
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9208:	26a1      	movs	r6, #161	; 0xa1
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    920a:	5119      	str	r1, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    920c:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE = mode;
    920e:	2401      	movs	r4, #1
    9210:	4d10      	ldr	r5, [pc, #64]	; (9254 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9212:	00f6      	lsls	r6, r6, #3
	NRF_CCM->MODE = mode;
    9214:	515c      	str	r4, [r3, r5]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9216:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    9218:	480f      	ldr	r0, [pc, #60]	; (9258 <radio_ccm_rx_pkt_set+0x5c>)
    921a:	4e10      	ldr	r6, [pc, #64]	; (925c <radio_ccm_rx_pkt_set+0x60>)
    921c:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    921e:	3604      	adds	r6, #4
    9220:	519a      	str	r2, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9222:	4e0f      	ldr	r6, [pc, #60]	; (9260 <radio_ccm_rx_pkt_set+0x64>)
    9224:	4a0f      	ldr	r2, [pc, #60]	; (9264 <radio_ccm_rx_pkt_set+0x68>)
    9226:	509e      	str	r6, [r3, r2]
	NRF_CCM->SHORTS = 0;
    9228:	2280      	movs	r2, #128	; 0x80
    922a:	0092      	lsls	r2, r2, #2
    922c:	5099      	str	r1, [r3, r2]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    922e:	001a      	movs	r2, r3
    9230:	32fc      	adds	r2, #252	; 0xfc
    9232:	6091      	str	r1, [r2, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    9234:	60d1      	str	r1, [r2, #12]

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    9236:	21a8      	movs	r1, #168	; 0xa8
    9238:	4a0b      	ldr	r2, [pc, #44]	; (9268 <radio_ccm_rx_pkt_set+0x6c>)
    923a:	4e0c      	ldr	r6, [pc, #48]	; (926c <radio_ccm_rx_pkt_set+0x70>)
    923c:	00c9      	lsls	r1, r1, #3
    923e:	5056      	str	r6, [r2, r1]
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    9240:	4e0b      	ldr	r6, [pc, #44]	; (9270 <radio_ccm_rx_pkt_set+0x74>)
    9242:	490c      	ldr	r1, [pc, #48]	; (9274 <radio_ccm_rx_pkt_set+0x78>)
    9244:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    9246:	2140      	movs	r1, #64	; 0x40
    9248:	5151      	str	r1, [r2, r5]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    924a:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    924c:	bd70      	pop	{r4, r5, r6, pc}
    924e:	46c0      	nop			; (mov r8, r8)
    9250:	4000f000 	.word	0x4000f000
    9254:	00000504 	.word	0x00000504
    9258:	20000a90 	.word	0x20000a90
    925c:	0000050c 	.word	0x0000050c
    9260:	20000a60 	.word	0x20000a60
    9264:	00000514 	.word	0x00000514
    9268:	4001f000 	.word	0x4001f000
    926c:	40001104 	.word	0x40001104
    9270:	4000f004 	.word	0x4000f004
    9274:	00000544 	.word	0x00000544

00009278 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    9278:	b530      	push	{r4, r5, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    927a:	24a0      	movs	r4, #160	; 0xa0
    927c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    927e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9280:	4b0d      	ldr	r3, [pc, #52]	; (92b8 <radio_ccm_tx_pkt_set+0x40>)
    9282:	00e4      	lsls	r4, r4, #3
    9284:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9286:	511d      	str	r5, [r3, r4]
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    9288:	4c0c      	ldr	r4, [pc, #48]	; (92bc <radio_ccm_tx_pkt_set+0x44>)
    928a:	511a      	str	r2, [r3, r4]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    928c:	3404      	adds	r4, #4
    928e:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    9290:	480b      	ldr	r0, [pc, #44]	; (92c0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9292:	4c0c      	ldr	r4, [pc, #48]	; (92c4 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (u32_t)pkt;
    9294:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9296:	21a2      	movs	r1, #162	; 0xa2
    9298:	480b      	ldr	r0, [pc, #44]	; (92c8 <radio_ccm_tx_pkt_set+0x50>)
    929a:	00c9      	lsls	r1, r1, #3
    929c:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    929e:	490b      	ldr	r1, [pc, #44]	; (92cc <radio_ccm_tx_pkt_set+0x54>)
    92a0:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    92a2:	2480      	movs	r4, #128	; 0x80
    92a4:	2101      	movs	r1, #1
    92a6:	00a4      	lsls	r4, r4, #2
    92a8:	5119      	str	r1, [r3, r4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    92aa:	001c      	movs	r4, r3
    92ac:	34fc      	adds	r4, #252	; 0xfc
    92ae:	60a2      	str	r2, [r4, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    92b0:	60e2      	str	r2, [r4, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    92b2:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    92b4:	bd30      	pop	{r4, r5, pc}
    92b6:	46c0      	nop			; (mov r8, r8)
    92b8:	4000f000 	.word	0x4000f000
    92bc:	00000504 	.word	0x00000504
    92c0:	0000050c 	.word	0x0000050c
    92c4:	20000a60 	.word	0x20000a60
    92c8:	20000a90 	.word	0x20000a90
    92cc:	00000514 	.word	0x00000514

000092d0 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    92d0:	22c1      	movs	r2, #193	; 0xc1
    92d2:	2102      	movs	r1, #2
    92d4:	4b0c      	ldr	r3, [pc, #48]	; (9308 <radio_ccm_is_done+0x38>)
    92d6:	0092      	lsls	r2, r2, #2
    92d8:	5099      	str	r1, [r3, r2]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    92da:	4a0c      	ldr	r2, [pc, #48]	; (930c <radio_ccm_is_done+0x3c>)
    92dc:	6891      	ldr	r1, [r2, #8]
    92de:	2900      	cmp	r1, #0
    92e0:	d00d      	beq.n	92fe <radio_ccm_is_done+0x2e>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    92e2:	21c2      	movs	r1, #194	; 0xc2
    92e4:	2002      	movs	r0, #2
    92e6:	0089      	lsls	r1, r1, #2
    92e8:	5058      	str	r0, [r3, r1]
    92ea:	2080      	movs	r0, #128	; 0x80
    92ec:	23c0      	movs	r3, #192	; 0xc0
    92ee:	4908      	ldr	r1, [pc, #32]	; (9310 <radio_ccm_is_done+0x40>)
    92f0:	005b      	lsls	r3, r3, #1
    92f2:	0200      	lsls	r0, r0, #8
    92f4:	50c8      	str	r0, [r1, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    92f6:	68d0      	ldr	r0, [r2, #12]
    92f8:	4243      	negs	r3, r0
    92fa:	4158      	adcs	r0, r3
}
    92fc:	4770      	bx	lr
		__WFE();
    92fe:	bf20      	wfe
		__SEV();
    9300:	bf40      	sev
		__WFE();
    9302:	bf20      	wfe
    9304:	e7ea      	b.n	92dc <radio_ccm_is_done+0xc>
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	4000f000 	.word	0x4000f000
    930c:	4000f0fc 	.word	0x4000f0fc
    9310:	e000e100 	.word	0xe000e100

00009314 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    9314:	2380      	movs	r3, #128	; 0x80
    9316:	4a03      	ldr	r2, [pc, #12]	; (9324 <radio_ccm_mic_is_valid+0x10>)
    9318:	00db      	lsls	r3, r3, #3
    931a:	58d0      	ldr	r0, [r2, r3]
    931c:	1e43      	subs	r3, r0, #1
    931e:	4198      	sbcs	r0, r3
}
    9320:	4770      	bx	lr
    9322:	46c0      	nop			; (mov r8, r8)
    9324:	4000f000 	.word	0x4000f000

00009328 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    9328:	2380      	movs	r3, #128	; 0x80
    932a:	4a02      	ldr	r2, [pc, #8]	; (9334 <radio_ar_match_get+0xc>)
    932c:	00db      	lsls	r3, r3, #3
    932e:	58d0      	ldr	r0, [r2, r3]
}
    9330:	4770      	bx	lr
    9332:	46c0      	nop			; (mov r8, r8)
    9334:	4000f000 	.word	0x4000f000

00009338 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    9338:	2300      	movs	r3, #0
    933a:	4a03      	ldr	r2, [pc, #12]	; (9348 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    933c:	4903      	ldr	r1, [pc, #12]	; (934c <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
    933e:	62d3      	str	r3, [r2, #44]	; 0x2c
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    9340:	22a0      	movs	r2, #160	; 0xa0
    9342:	00d2      	lsls	r2, r2, #3
    9344:	508b      	str	r3, [r1, r2]
			  AAR_ENABLE_ENABLE_Msk;
}
    9346:	4770      	bx	lr
    9348:	400010fc 	.word	0x400010fc
    934c:	4000f000 	.word	0x4000f000

00009350 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    9350:	2000      	movs	r0, #0
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    9352:	4b07      	ldr	r3, [pc, #28]	; (9370 <radio_ar_has_match+0x20>)
    9354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED &&
    9356:	4283      	cmp	r3, r0
    9358:	d009      	beq.n	936e <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_END &&
    935a:	4b06      	ldr	r3, [pc, #24]	; (9374 <radio_ar_has_match+0x24>)
    935c:	685a      	ldr	r2, [r3, #4]
	return (radio_bc_has_match() &&
    935e:	4282      	cmp	r2, r0
    9360:	d005      	beq.n	936e <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_RESOLVED &&
    9362:	689a      	ldr	r2, [r3, #8]
		NRF_AAR->EVENTS_END &&
    9364:	4282      	cmp	r2, r0
    9366:	d002      	beq.n	936e <radio_ar_has_match+0x1e>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    9368:	68d8      	ldr	r0, [r3, #12]
		NRF_AAR->EVENTS_RESOLVED &&
    936a:	4243      	negs	r3, r0
    936c:	4158      	adcs	r0, r3
}
    936e:	4770      	bx	lr
    9370:	400010fc 	.word	0x400010fc
    9374:	4000f0fc 	.word	0x4000f0fc

00009378 <mayfly_enable_cb>:
#else
#error Unknown LL variant.
#endif

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    9378:	b510      	push	{r4, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    937a:	2901      	cmp	r1, #1
    937c:	d002      	beq.n	9384 <mayfly_enable_cb+0xc>
    937e:	b662      	cpsie	i
    9380:	2004      	movs	r0, #4
    9382:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    9384:	2018      	movs	r0, #24
	if (enable) {
    9386:	2a00      	cmp	r2, #0
    9388:	d002      	beq.n	9390 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    938a:	f7f7 fb5b 	bl	a44 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    938e:	bd10      	pop	{r4, pc}
		irq_disable(SWI4_IRQn);
    9390:	f7f7 fb64 	bl	a5c <_arch_irq_disable>
}
    9394:	e7fb      	b.n	938e <mayfly_enable_cb+0x16>

00009396 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    9396:	b510      	push	{r4, lr}
	(void)caller_id;

	switch (callee_id) {
    9398:	2900      	cmp	r1, #0
    939a:	d004      	beq.n	93a6 <mayfly_is_enabled+0x10>
    939c:	2901      	cmp	r1, #1
    939e:	d006      	beq.n	93ae <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    93a0:	b662      	cpsie	i
    93a2:	2004      	movs	r0, #4
    93a4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    93a6:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    93a8:	f7f7 fb68 	bl	a7c <_arch_irq_is_enabled>
		break;
	}

	return 0;
}
    93ac:	bd10      	pop	{r4, pc}
		return irq_is_enabled(SWI4_IRQn);
    93ae:	2018      	movs	r0, #24
    93b0:	e7fa      	b.n	93a8 <mayfly_is_enabled+0x12>

000093b2 <mayfly_prio_is_equal>:

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    93b2:	0003      	movs	r3, r0
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    93b4:	2001      	movs	r0, #1
    93b6:	428b      	cmp	r3, r1
    93b8:	d008      	beq.n	93cc <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    93ba:	2b00      	cmp	r3, #0
    93bc:	d103      	bne.n	93c6 <mayfly_prio_is_equal+0x14>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    93be:	3901      	subs	r1, #1
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    93c0:	4248      	negs	r0, r1
    93c2:	4148      	adcs	r0, r1
    93c4:	e002      	b.n	93cc <mayfly_prio_is_equal+0x1a>
    93c6:	2000      	movs	r0, #0
    93c8:	2b01      	cmp	r3, #1
    93ca:	d0f9      	beq.n	93c0 <mayfly_prio_is_equal+0xe>
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    93cc:	4770      	bx	lr
	...

000093d0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    93d0:	4b07      	ldr	r3, [pc, #28]	; (93f0 <mayfly_pend+0x20>)
	(void)caller_id;

	switch (callee_id) {
    93d2:	2900      	cmp	r1, #0
    93d4:	d004      	beq.n	93e0 <mayfly_pend+0x10>
    93d6:	2901      	cmp	r1, #1
    93d8:	d006      	beq.n	93e8 <mayfly_pend+0x18>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    93da:	b662      	cpsie	i
    93dc:	2004      	movs	r0, #4
    93de:	df02      	svc	2
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93e0:	2280      	movs	r2, #128	; 0x80
    93e2:	0112      	lsls	r2, r2, #4
    93e4:	605a      	str	r2, [r3, #4]
		break;
	}
}
    93e6:	4770      	bx	lr
    93e8:	2280      	movs	r2, #128	; 0x80
    93ea:	0452      	lsls	r2, r2, #17
    93ec:	e7fa      	b.n	93e4 <mayfly_pend+0x14>
    93ee:	46c0      	nop			; (mov r8, r8)
    93f0:	e000e1fc 	.word	0xe000e1fc

000093f4 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    93f4:	2803      	cmp	r0, #3
    93f6:	d902      	bls.n	93fe <hal_ticker_instance0_caller_id_get+0xa>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    93f8:	b662      	cpsie	i
    93fa:	2004      	movs	r0, #4
    93fc:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    93fe:	4b02      	ldr	r3, [pc, #8]	; (9408 <hal_ticker_instance0_caller_id_get+0x14>)
    9400:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9402:	2800      	cmp	r0, #0
    9404:	d0f8      	beq.n	93f8 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    9406:	4770      	bx	lr
    9408:	0000b1c6 	.word	0x0000b1c6

0000940c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    940c:	3802      	subs	r0, #2
{
    940e:	b510      	push	{r4, lr}
    9410:	001c      	movs	r4, r3
	switch (caller_id) {
    9412:	2803      	cmp	r0, #3
    9414:	d817      	bhi.n	9446 <hal_ticker_instance0_sched+0x3a>
    9416:	f7f6 feb9 	bl	18c <__gnu_thumb1_case_uqi>
    941a:	0902      	.short	0x0902
    941c:	2212      	.short	0x2212
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    941e:	2903      	cmp	r1, #3
    9420:	d111      	bne.n	9446 <hal_ticker_instance0_sched+0x3a>
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    9422:	2100      	movs	r1, #0
			m.param = instance;
    9424:	4b11      	ldr	r3, [pc, #68]	; (946c <hal_ticker_instance0_sched+0x60>)
    9426:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9428:	0008      	movs	r0, r1
    942a:	e005      	b.n	9438 <hal_ticker_instance0_sched+0x2c>
		switch (callee_id) {
    942c:	2904      	cmp	r1, #4
    942e:	d10a      	bne.n	9446 <hal_ticker_instance0_sched+0x3a>
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    9430:	2000      	movs	r0, #0
			m.param = instance;
    9432:	4b0f      	ldr	r3, [pc, #60]	; (9470 <hal_ticker_instance0_sched+0x64>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    9434:	3903      	subs	r1, #3
			m.param = instance;
    9436:	609c      	str	r4, [r3, #8]
						  ticker_job};

			m.param = instance;

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9438:	f7f9 fae0 	bl	29fc <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    943c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
    943e:	2903      	cmp	r1, #3
    9440:	d004      	beq.n	944c <hal_ticker_instance0_sched+0x40>
    9442:	2904      	cmp	r1, #4
    9444:	d007      	beq.n	9456 <hal_ticker_instance0_sched+0x4a>
		LL_ASSERT(0);
    9446:	b662      	cpsie	i
    9448:	2004      	movs	r0, #4
    944a:	df02      	svc	2
			m.param = instance;
    944c:	4b09      	ldr	r3, [pc, #36]	; (9474 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    944e:	2100      	movs	r1, #0
			m.param = instance;
    9450:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9452:	2001      	movs	r0, #1
    9454:	e7f0      	b.n	9438 <hal_ticker_instance0_sched+0x2c>
			m.param = instance;
    9456:	4b08      	ldr	r3, [pc, #32]	; (9478 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9458:	2101      	movs	r1, #1
			m.param = instance;
    945a:	609c      	str	r4, [r3, #8]
    945c:	e7e4      	b.n	9428 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    945e:	2904      	cmp	r1, #4
    9460:	d1f1      	bne.n	9446 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    9462:	4b06      	ldr	r3, [pc, #24]	; (947c <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9464:	3903      	subs	r1, #3
			m.param = instance;
    9466:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9468:	2003      	movs	r0, #3
    946a:	e7e5      	b.n	9438 <hal_ticker_instance0_sched+0x2c>
    946c:	200023e8 	.word	0x200023e8
    9470:	200023f8 	.word	0x200023f8
    9474:	20002408 	.word	0x20002408
    9478:	20002418 	.word	0x20002418
    947c:	20002428 	.word	0x20002428

00009480 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
    9480:	b510      	push	{r4, lr}
    9482:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    9484:	2000      	movs	r0, #0
    9486:	f7ff faad 	bl	89e4 <cntr_cmp_set>
}
    948a:	bd10      	pop	{r4, pc}

0000948c <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    948c:	4770      	bx	lr
	...

00009490 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
    9490:	4b01      	ldr	r3, [pc, #4]	; (9498 <net_buf_pool_get+0x8>)
    9492:	0140      	lsls	r0, r0, #5
    9494:	18c0      	adds	r0, r0, r3
}
    9496:	4770      	bx	lr
    9498:	2000250c 	.word	0x2000250c

0000949c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    949c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    949e:	4b04      	ldr	r3, [pc, #16]	; (94b0 <net_buf_id+0x14>)
    94a0:	0152      	lsls	r2, r2, #5
    94a2:	189b      	adds	r3, r3, r2
    94a4:	69db      	ldr	r3, [r3, #28]
    94a6:	1ac0      	subs	r0, r0, r3
    94a8:	4b02      	ldr	r3, [pc, #8]	; (94b4 <net_buf_id+0x18>)
    94aa:	10c0      	asrs	r0, r0, #3
    94ac:	4358      	muls	r0, r3
}
    94ae:	4770      	bx	lr
    94b0:	2000250c 	.word	0x2000250c
    94b4:	aaaaaaab 	.word	0xaaaaaaab

000094b8 <fixed_data_alloc>:
{
    94b8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    94ba:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    94bc:	4b08      	ldr	r3, [pc, #32]	; (94e0 <fixed_data_alloc+0x28>)
    94be:	0152      	lsls	r2, r2, #5
    94c0:	189b      	adds	r3, r3, r2
    94c2:	699b      	ldr	r3, [r3, #24]
    94c4:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    94c6:	680b      	ldr	r3, [r1, #0]
    94c8:	6822      	ldr	r2, [r4, #0]
    94ca:	4293      	cmp	r3, r2
    94cc:	d900      	bls.n	94d0 <fixed_data_alloc+0x18>
    94ce:	0013      	movs	r3, r2
    94d0:	600b      	str	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    94d2:	f7ff ffe3 	bl	949c <net_buf_id>
    94d6:	6823      	ldr	r3, [r4, #0]
    94d8:	4343      	muls	r3, r0
    94da:	6860      	ldr	r0, [r4, #4]
    94dc:	18c0      	adds	r0, r0, r3
}
    94de:	bd10      	pop	{r4, pc}
    94e0:	2000250c 	.word	0x2000250c

000094e4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    94e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94e6:	0005      	movs	r5, r0
    94e8:	9101      	str	r1, [sp, #4]
    94ea:	0016      	movs	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    94ec:	f000 fe44 	bl	a178 <_impl_k_uptime_get_32>
    94f0:	9000      	str	r0, [sp, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    94f2:	f3ef 8710 	mrs	r7, PRIMASK
    94f6:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    94f8:	8a6b      	ldrh	r3, [r5, #18]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d040      	beq.n	9580 <net_buf_alloc_len+0x9c>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    94fe:	8a2a      	ldrh	r2, [r5, #16]
    9500:	429a      	cmp	r2, r3
    9502:	d92c      	bls.n	955e <net_buf_alloc_len+0x7a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    9504:	2100      	movs	r1, #0
    9506:	0028      	movs	r0, r5
    9508:	f000 fba0 	bl	9c4c <k_queue_get>
    950c:	1e04      	subs	r4, r0, #0
			if (buf) {
    950e:	d026      	beq.n	955e <net_buf_alloc_len+0x7a>
	if (key) {
    9510:	2f00      	cmp	r7, #0
    9512:	d100      	bne.n	9516 <net_buf_alloc_len+0x32>
	__asm__ volatile("cpsie i" : : : "memory");
    9514:	b662      	cpsie	i
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    9516:	9b01      	ldr	r3, [sp, #4]
    9518:	2b00      	cmp	r3, #0
    951a:	d03c      	beq.n	9596 <net_buf_alloc_len+0xb2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    951c:	1c73      	adds	r3, r6, #1
    951e:	2b01      	cmp	r3, #1
    9520:	d907      	bls.n	9532 <net_buf_alloc_len+0x4e>
    9522:	f000 fe29 	bl	a178 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    9526:	9b00      	ldr	r3, [sp, #0]
    9528:	1ac0      	subs	r0, r0, r3

			timeout -= min(timeout, diff);
    952a:	42b0      	cmp	r0, r6
    952c:	d900      	bls.n	9530 <net_buf_alloc_len+0x4c>
    952e:	0030      	movs	r0, r6
    9530:	1a36      	subs	r6, r6, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9532:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    9534:	4f1e      	ldr	r7, [pc, #120]	; (95b0 <net_buf_alloc_len+0xcc>)
    9536:	015b      	lsls	r3, r3, #5
    9538:	18fb      	adds	r3, r7, r3
    953a:	699b      	ldr	r3, [r3, #24]
    953c:	0032      	movs	r2, r6
    953e:	681b      	ldr	r3, [r3, #0]
    9540:	a901      	add	r1, sp, #4
    9542:	681b      	ldr	r3, [r3, #0]
    9544:	0020      	movs	r0, r4
    9546:	4798      	blx	r3
    9548:	1e05      	subs	r5, r0, #0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    954a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    954c:	d124      	bne.n	9598 <net_buf_alloc_len+0xb4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    954e:	79a0      	ldrb	r0, [r4, #6]
    9550:	0021      	movs	r1, r4
    9552:	0140      	lsls	r0, r0, #5
    9554:	19c0      	adds	r0, r0, r7
    9556:	f000 fb58 	bl	9c0a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    955a:	002c      	movs	r4, r5
    955c:	e019      	b.n	9592 <net_buf_alloc_len+0xae>
		uninit_count = pool->uninit_count--;
    955e:	8a6b      	ldrh	r3, [r5, #18]
    9560:	1e5a      	subs	r2, r3, #1
    9562:	826a      	strh	r2, [r5, #18]
	if (key) {
    9564:	2f00      	cmp	r7, #0
    9566:	d100      	bne.n	956a <net_buf_alloc_len+0x86>
	__asm__ volatile("cpsie i" : : : "memory");
    9568:	b662      	cpsie	i
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    956a:	8a2c      	ldrh	r4, [r5, #16]
    956c:	1ae3      	subs	r3, r4, r3
    956e:	2418      	movs	r4, #24
    9570:	435c      	muls	r4, r3
    9572:	69eb      	ldr	r3, [r5, #28]
    9574:	191c      	adds	r4, r3, r4
	return pool - _net_buf_pool_list;
    9576:	4b0e      	ldr	r3, [pc, #56]	; (95b0 <net_buf_alloc_len+0xcc>)
    9578:	1aed      	subs	r5, r5, r3
    957a:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    957c:	71a5      	strb	r5, [r4, #6]
		goto success;
    957e:	e7ca      	b.n	9516 <net_buf_alloc_len+0x32>
	if (key) {
    9580:	2f00      	cmp	r7, #0
    9582:	d100      	bne.n	9586 <net_buf_alloc_len+0xa2>
	__asm__ volatile("cpsie i" : : : "memory");
    9584:	b662      	cpsie	i
	buf = k_lifo_get(&pool->free, timeout);
    9586:	0031      	movs	r1, r6
    9588:	0028      	movs	r0, r5
    958a:	f000 fb5f 	bl	9c4c <k_queue_get>
    958e:	1e04      	subs	r4, r0, #0
	if (!buf) {
    9590:	d1c1      	bne.n	9516 <net_buf_alloc_len+0x32>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    9592:	0020      	movs	r0, r4
    9594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		buf->__buf = NULL;
    9596:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    9598:	2301      	movs	r3, #1
    959a:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    959c:	2300      	movs	r3, #0
	buf->size  = size;
    959e:	466a      	mov	r2, sp
	buf->frags = NULL;
    95a0:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    95a2:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    95a4:	8892      	ldrh	r2, [r2, #4]
	buf->len  = 0;
    95a6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    95a8:	6923      	ldr	r3, [r4, #16]
    95aa:	81e2      	strh	r2, [r4, #14]
    95ac:	60a3      	str	r3, [r4, #8]
	return buf;
    95ae:	e7f0      	b.n	9592 <net_buf_alloc_len+0xae>
    95b0:	2000250c 	.word	0x2000250c

000095b4 <net_buf_alloc_fixed>:
	return net_buf_alloc_len_debug(pool, fixed->data_size, timeout, func,
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
    95b4:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    95b6:	6983      	ldr	r3, [r0, #24]
{
    95b8:	000a      	movs	r2, r1

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    95ba:	685b      	ldr	r3, [r3, #4]
    95bc:	6819      	ldr	r1, [r3, #0]
    95be:	f7ff ff91 	bl	94e4 <net_buf_alloc_len>
}
    95c2:	bd10      	pop	{r4, pc}

000095c4 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    95c4:	6883      	ldr	r3, [r0, #8]
    95c6:	1859      	adds	r1, r3, r1
    95c8:	6001      	str	r1, [r0, #0]
}
    95ca:	4770      	bx	lr

000095cc <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    95cc:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    95ce:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
    95d0:	2501      	movs	r5, #1
	for (tail = buf; tail->frags; tail = tail->frags) {
    95d2:	6814      	ldr	r4, [r2, #0]
    95d4:	2c00      	cmp	r4, #0
    95d6:	d102      	bne.n	95de <net_buf_put+0x12>
	}

	k_fifo_put_list(fifo, buf, tail);
    95d8:	f000 fb1d 	bl	9c16 <k_queue_append_list>
}
    95dc:	bd70      	pop	{r4, r5, r6, pc}
		tail->flags |= NET_BUF_FRAGS;
    95de:	7953      	ldrb	r3, [r2, #5]
    95e0:	432b      	orrs	r3, r5
    95e2:	7153      	strb	r3, [r2, #5]
    95e4:	0022      	movs	r2, r4
    95e6:	e7f4      	b.n	95d2 <net_buf_put+0x6>

000095e8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    95e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    95ea:	0004      	movs	r4, r0
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    95ec:	2502      	movs	r5, #2
	NET_BUF_ASSERT(buf);

	while (buf) {
    95ee:	2c00      	cmp	r4, #0
    95f0:	d100      	bne.n	95f4 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    95f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    95f4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    95f6:	6826      	ldr	r6, [r4, #0]
		if (--buf->ref > 0) {
    95f8:	3b01      	subs	r3, #1
    95fa:	b2db      	uxtb	r3, r3
    95fc:	7123      	strb	r3, [r4, #4]
    95fe:	2b00      	cmp	r3, #0
    9600:	d1f7      	bne.n	95f2 <net_buf_unref+0xa>
		if (buf->__buf) {
    9602:	6921      	ldr	r1, [r4, #16]
    9604:	4f10      	ldr	r7, [pc, #64]	; (9648 <net_buf_unref+0x60>)
    9606:	2900      	cmp	r1, #0
    9608:	d00c      	beq.n	9624 <net_buf_unref+0x3c>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    960a:	7963      	ldrb	r3, [r4, #5]
    960c:	422b      	tst	r3, r5
    960e:	d107      	bne.n	9620 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9610:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    9612:	0020      	movs	r0, r4
    9614:	015b      	lsls	r3, r3, #5
    9616:	18fb      	adds	r3, r7, r3
    9618:	699b      	ldr	r3, [r3, #24]
    961a:	681b      	ldr	r3, [r3, #0]
    961c:	689b      	ldr	r3, [r3, #8]
    961e:	4798      	blx	r3
			buf->__buf = NULL;
    9620:	2300      	movs	r3, #0
    9622:	6123      	str	r3, [r4, #16]
		buf->data = NULL;
    9624:	2300      	movs	r3, #0
		pool = net_buf_pool_get(buf->pool_id);
    9626:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    9628:	60a3      	str	r3, [r4, #8]
		if (pool->destroy) {
    962a:	0140      	lsls	r0, r0, #5
		buf->frags = NULL;
    962c:	6023      	str	r3, [r4, #0]
		if (pool->destroy) {
    962e:	1838      	adds	r0, r7, r0
    9630:	6943      	ldr	r3, [r0, #20]
    9632:	2b00      	cmp	r3, #0
    9634:	d003      	beq.n	963e <net_buf_unref+0x56>
			pool->destroy(buf);
    9636:	0020      	movs	r0, r4
    9638:	4798      	blx	r3
{
    963a:	0034      	movs	r4, r6
    963c:	e7d7      	b.n	95ee <net_buf_unref+0x6>
	k_lifo_put(&pool->free, buf);
    963e:	0021      	movs	r1, r4
    9640:	f000 fae3 	bl	9c0a <k_queue_prepend>
    9644:	e7f9      	b.n	963a <net_buf_unref+0x52>
    9646:	46c0      	nop			; (mov r8, r8)
    9648:	2000250c 	.word	0x2000250c

0000964c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    964c:	7903      	ldrb	r3, [r0, #4]
    964e:	3301      	adds	r3, #1
    9650:	7103      	strb	r3, [r0, #4]
	return buf;
}
    9652:	4770      	bx	lr

00009654 <net_buf_simple_add>:
	return buf->data + buf->len;
    9654:	8883      	ldrh	r3, [r0, #4]
    9656:	6802      	ldr	r2, [r0, #0]
    9658:	18d2      	adds	r2, r2, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    965a:	185b      	adds	r3, r3, r1
    965c:	8083      	strh	r3, [r0, #4]
	return tail;
}
    965e:	0010      	movs	r0, r2
    9660:	4770      	bx	lr

00009662 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    9662:	b510      	push	{r4, lr}
    9664:	0004      	movs	r4, r0
    9666:	8883      	ldrh	r3, [r0, #4]
    9668:	6800      	ldr	r0, [r0, #0]
    966a:	18c0      	adds	r0, r0, r3
	buf->len += len;
    966c:	189b      	adds	r3, r3, r2
    966e:	80a3      	strh	r3, [r4, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    9670:	f7f6 fffa 	bl	668 <memcpy>
}
    9674:	bd10      	pop	{r4, pc}

00009676 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    9676:	8883      	ldrh	r3, [r0, #4]
    9678:	1a5b      	subs	r3, r3, r1
    967a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    967c:	6803      	ldr	r3, [r0, #0]
    967e:	1859      	adds	r1, r3, r1
    9680:	6001      	str	r1, [r0, #0]
}
    9682:	0008      	movs	r0, r1
    9684:	4770      	bx	lr

00009686 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    9686:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
    9688:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    968a:	2101      	movs	r1, #1
	val = buf->data[0];
    968c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
    968e:	f7ff fff2 	bl	9676 <net_buf_simple_pull>

	return val;
}
    9692:	0020      	movs	r0, r4
    9694:	bd10      	pop	{r4, pc}

00009696 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    9696:	6803      	ldr	r3, [r0, #0]
    9698:	6880      	ldr	r0, [r0, #8]
    969a:	1a18      	subs	r0, r3, r0
}
    969c:	4770      	bx	lr
	...

000096a0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    96a0:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    96a2:	4e07      	ldr	r6, [pc, #28]	; (96c0 <_sys_device_do_config_level+0x20>)
    96a4:	0083      	lsls	r3, r0, #2
    96a6:	599d      	ldr	r5, [r3, r6]
    96a8:	3001      	adds	r0, #1
    96aa:	0084      	lsls	r4, r0, #2
    96ac:	5933      	ldr	r3, [r6, r4]
    96ae:	429d      	cmp	r5, r3
    96b0:	d300      	bcc.n	96b4 <_sys_device_do_config_level+0x14>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    96b2:	bd70      	pop	{r4, r5, r6, pc}
		device->init(info);
    96b4:	682b      	ldr	r3, [r5, #0]
    96b6:	0028      	movs	r0, r5
    96b8:	685b      	ldr	r3, [r3, #4]
    96ba:	4798      	blx	r3
								info++) {
    96bc:	350c      	adds	r5, #12
    96be:	e7f5      	b.n	96ac <_sys_device_do_config_level+0xc>
    96c0:	0000b1d8 	.word	0x0000b1d8

000096c4 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    96c4:	b570      	push	{r4, r5, r6, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    96c6:	4c11      	ldr	r4, [pc, #68]	; (970c <device_get_binding+0x48>)
{
    96c8:	0006      	movs	r6, r0
    96ca:	0023      	movs	r3, r4
	for (info = __device_init_start; info != __device_init_end; info++) {
    96cc:	4d10      	ldr	r5, [pc, #64]	; (9710 <device_get_binding+0x4c>)
    96ce:	42ac      	cmp	r4, r5
    96d0:	d104      	bne.n	96dc <device_get_binding+0x18>
    96d2:	001c      	movs	r4, r3
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    96d4:	42ac      	cmp	r4, r5
    96d6:	d10a      	bne.n	96ee <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    96d8:	2400      	movs	r4, #0
    96da:	e014      	b.n	9706 <device_get_binding+0x42>
		if (info->driver_api != NULL && info->config->name == name) {
    96dc:	6862      	ldr	r2, [r4, #4]
    96de:	2a00      	cmp	r2, #0
    96e0:	d003      	beq.n	96ea <device_get_binding+0x26>
    96e2:	6822      	ldr	r2, [r4, #0]
    96e4:	6812      	ldr	r2, [r2, #0]
    96e6:	42b2      	cmp	r2, r6
    96e8:	d00d      	beq.n	9706 <device_get_binding+0x42>
	for (info = __device_init_start; info != __device_init_end; info++) {
    96ea:	340c      	adds	r4, #12
    96ec:	e7ef      	b.n	96ce <device_get_binding+0xa>
		if (!info->driver_api) {
    96ee:	6863      	ldr	r3, [r4, #4]
    96f0:	2b00      	cmp	r3, #0
    96f2:	d101      	bne.n	96f8 <device_get_binding+0x34>
	for (info = __device_init_start; info != __device_init_end; info++) {
    96f4:	340c      	adds	r4, #12
    96f6:	e7ed      	b.n	96d4 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    96f8:	6823      	ldr	r3, [r4, #0]
    96fa:	0030      	movs	r0, r6
    96fc:	6819      	ldr	r1, [r3, #0]
    96fe:	f7f6 ff94 	bl	62a <strcmp>
    9702:	2800      	cmp	r0, #0
    9704:	d1f6      	bne.n	96f4 <device_get_binding+0x30>
}
    9706:	0020      	movs	r0, r4
    9708:	bd70      	pop	{r4, r5, r6, pc}
    970a:	46c0      	nop			; (mov r8, r8)
    970c:	20002440 	.word	0x20002440
    9710:	200024d0 	.word	0x200024d0

00009714 <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    9714:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    9716:	1c43      	adds	r3, r0, #1
    9718:	d003      	beq.n	9722 <_sys_power_save_idle_exit+0xe>
    971a:	4b03      	ldr	r3, [pc, #12]	; (9728 <_sys_power_save_idle_exit+0x14>)
    971c:	681b      	ldr	r3, [r3, #0]
    971e:	4298      	cmp	r0, r3
    9720:	db01      	blt.n	9726 <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    9722:	f7f8 fbe5 	bl	1ef0 <_timer_idle_exit>
	}
}
    9726:	bd10      	pop	{r4, pc}
    9728:	20002438 	.word	0x20002438

0000972c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    972c:	b570      	push	{r4, r5, r6, lr}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    972e:	2601      	movs	r6, #1
    9730:	4276      	negs	r6, r6
	__asm__ volatile("mrs %0, PRIMASK;"
    9732:	f3ef 8310 	mrs	r3, PRIMASK
    9736:	b672      	cpsid	i
	return list->head == list;
    9738:	4d0b      	ldr	r5, [pc, #44]	; (9768 <idle+0x3c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    973a:	4a0c      	ldr	r2, [pc, #48]	; (976c <idle+0x40>)
	return list->head == list;
    973c:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    973e:	4293      	cmp	r3, r2
    9740:	d00c      	beq.n	975c <idle+0x30>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    9742:	2b00      	cmp	r3, #0
    9744:	d00a      	beq.n	975c <idle+0x30>
    9746:	691c      	ldr	r4, [r3, #16]
	if (_must_enter_tickless_idle(ticks)) {
    9748:	1c63      	adds	r3, r4, #1
    974a:	d008      	beq.n	975e <idle+0x32>
    974c:	4b08      	ldr	r3, [pc, #32]	; (9770 <idle+0x44>)
    974e:	681b      	ldr	r3, [r3, #0]
    9750:	42a3      	cmp	r3, r4
    9752:	dd04      	ble.n	975e <idle+0x32>
	_kernel.idle = ticks;
    9754:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    9756:	f7f7 fa13 	bl	b80 <k_cpu_idle>
    975a:	e7ea      	b.n	9732 <idle+0x6>
    975c:	0034      	movs	r4, r6
		_timer_idle_enter(ticks);
    975e:	0020      	movs	r0, r4
    9760:	f7f8 fbb0 	bl	1ec4 <_timer_idle_enter>
    9764:	e7f6      	b.n	9754 <idle+0x28>
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	20000ba8 	.word	0x20000ba8
    976c:	20000bb8 	.word	0x20000bb8
    9770:	20002438 	.word	0x20002438

00009774 <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    9774:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
    9776:	4803      	ldr	r0, [pc, #12]	; (9784 <_bss_zero+0x10>)
    9778:	4a03      	ldr	r2, [pc, #12]	; (9788 <_bss_zero+0x14>)
    977a:	2100      	movs	r1, #0
    977c:	1a12      	subs	r2, r2, r0
    977e:	f7f6 ff9d 	bl	6bc <memset>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
    9782:	bd10      	pop	{r4, pc}
    9784:	20000000 	.word	0x20000000
    9788:	20000e20 	.word	0x20000e20

0000978c <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    978c:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
    978e:	4803      	ldr	r0, [pc, #12]	; (979c <_data_copy+0x10>)
    9790:	4a03      	ldr	r2, [pc, #12]	; (97a0 <_data_copy+0x14>)
    9792:	4904      	ldr	r1, [pc, #16]	; (97a4 <_data_copy+0x18>)
    9794:	1a12      	subs	r2, r2, r0
    9796:	f7f6 ff67 	bl	668 <memcpy>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
    979a:	bd10      	pop	{r4, pc}
    979c:	20002158 	.word	0x20002158
    97a0:	2000254c 	.word	0x2000254c
    97a4:	0000b23c 	.word	0x0000b23c

000097a8 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    97a8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    97aa:	2002      	movs	r0, #2
    97ac:	f7ff ff78 	bl	96a0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    97b0:	4908      	ldr	r1, [pc, #32]	; (97d4 <_main+0x2c>)
    97b2:	4809      	ldr	r0, [pc, #36]	; (97d8 <_main+0x30>)
    97b4:	f7f7 fc68 	bl	1088 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    97b8:	2003      	movs	r0, #3
    97ba:	f7ff ff71 	bl	96a0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    97be:	f000 fed5 	bl	a56c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    97c2:	f7f7 f805 	bl	7d0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    97c6:	2101      	movs	r1, #1
    97c8:	4a04      	ldr	r2, [pc, #16]	; (97dc <_main+0x34>)
    97ca:	7a13      	ldrb	r3, [r2, #8]
    97cc:	438b      	bics	r3, r1
    97ce:	7213      	strb	r3, [r2, #8]
}
    97d0:	bd10      	pop	{r4, pc}
    97d2:	46c0      	nop			; (mov r8, r8)
    97d4:	0000b1f4 	.word	0x0000b1f4
    97d8:	0000b210 	.word	0x0000b210
    97dc:	20000b48 	.word	0x20000b48

000097e0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    97e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    97e2:	b087      	sub	sp, #28
    97e4:	af06      	add	r7, sp, #24
	_IntLibInit();
    97e6:	f7f7 f893 	bl	910 <_IntLibInit>
    97ea:	4b30      	ldr	r3, [pc, #192]	; (98ac <_Cstart+0xcc>)
    97ec:	4a30      	ldr	r2, [pc, #192]	; (98b0 <_Cstart+0xd0>)
	list->head = (sys_dnode_t *)list;
    97ee:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    97f0:	605b      	str	r3, [r3, #4]
    97f2:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    97f4:	4293      	cmp	r3, r2
    97f6:	d1fa      	bne.n	97ee <_Cstart+0xe>
	_setup_new_thread(_main_thread, _main_stack,
    97f8:	2400      	movs	r4, #0
    97fa:	2301      	movs	r3, #1
    97fc:	2280      	movs	r2, #128	; 0x80
	_ready_q.cache = _main_thread;
    97fe:	4d2d      	ldr	r5, [pc, #180]	; (98b4 <_Cstart+0xd4>)
    9800:	4e2d      	ldr	r6, [pc, #180]	; (98b8 <_Cstart+0xd8>)
	_setup_new_thread(_main_thread, _main_stack,
    9802:	492e      	ldr	r1, [pc, #184]	; (98bc <_Cstart+0xdc>)
	_ready_q.cache = _main_thread;
    9804:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    9806:	0028      	movs	r0, r5
    9808:	9304      	str	r3, [sp, #16]
    980a:	9403      	str	r4, [sp, #12]
    980c:	9402      	str	r4, [sp, #8]
    980e:	9401      	str	r4, [sp, #4]
    9810:	9400      	str	r4, [sp, #0]
    9812:	4b2b      	ldr	r3, [pc, #172]	; (98c0 <_Cstart+0xe0>)
    9814:	00d2      	lsls	r2, r2, #3
    9816:	f000 fe51 	bl	a4bc <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    981a:	2204      	movs	r2, #4
    981c:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    981e:	0028      	movs	r0, r5
    9820:	4393      	bics	r3, r2
    9822:	726b      	strb	r3, [r5, #9]
    9824:	f000 fa5a 	bl	9cdc <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    9828:	2301      	movs	r3, #1
    982a:	2280      	movs	r2, #128	; 0x80
    982c:	9304      	str	r3, [sp, #16]
    982e:	330e      	adds	r3, #14
    9830:	9303      	str	r3, [sp, #12]
    9832:	4924      	ldr	r1, [pc, #144]	; (98c4 <_Cstart+0xe4>)
    9834:	9402      	str	r4, [sp, #8]
    9836:	9401      	str	r4, [sp, #4]
    9838:	9400      	str	r4, [sp, #0]
    983a:	4b23      	ldr	r3, [pc, #140]	; (98c8 <_Cstart+0xe8>)
    983c:	0052      	lsls	r2, r2, #1
    983e:	4823      	ldr	r0, [pc, #140]	; (98cc <_Cstart+0xec>)
    9840:	f000 fe3c 	bl	a4bc <_setup_new_thread>
    9844:	2204      	movs	r2, #4
    9846:	4b21      	ldr	r3, [pc, #132]	; (98cc <_Cstart+0xec>)
    9848:	7a5b      	ldrb	r3, [r3, #9]
    984a:	4393      	bics	r3, r2
    984c:	4a1f      	ldr	r2, [pc, #124]	; (98cc <_Cstart+0xec>)
    984e:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    9850:	0010      	movs	r0, r2
    9852:	f000 fa43 	bl	9cdc <_add_thread_to_ready_q>
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    9856:	22a0      	movs	r2, #160	; 0xa0
	list->head = (sys_dnode_t *)list;
    9858:	4b1d      	ldr	r3, [pc, #116]	; (98d0 <_Cstart+0xf0>)
    985a:	0092      	lsls	r2, r2, #2
    985c:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    985e:	6173      	str	r3, [r6, #20]
    9860:	4b1c      	ldr	r3, [pc, #112]	; (98d4 <_Cstart+0xf4>)
    9862:	189b      	adds	r3, r3, r2
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    9864:	f383 8808 	msr	MSP, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    9868:	491b      	ldr	r1, [pc, #108]	; (98d8 <_Cstart+0xf8>)
    986a:	4a1c      	ldr	r2, [pc, #112]	; (98dc <_Cstart+0xfc>)
    986c:	6a0b      	ldr	r3, [r1, #32]
    986e:	401a      	ands	r2, r3
    9870:	23c0      	movs	r3, #192	; 0xc0
    9872:	041b      	lsls	r3, r3, #16
    9874:	4313      	orrs	r3, r2
    9876:	620b      	str	r3, [r1, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    9878:	f7f7 f8e2 	bl	a40 <_FaultInit>
	_CpuIdleInit();
    987c:	f7f7 f97a 	bl	b74 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9880:	0020      	movs	r0, r4
    9882:	f7ff ff0d 	bl	96a0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9886:	2001      	movs	r0, #1
    9888:	f7ff ff0a 	bl	96a0 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    988c:	2280      	movs	r2, #128	; 0x80
    988e:	4b0b      	ldr	r3, [pc, #44]	; (98bc <_Cstart+0xdc>)
    9890:	00d2      	lsls	r2, r2, #3
    9892:	189b      	adds	r3, r3, r2
    9894:	2207      	movs	r2, #7

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    9896:	490a      	ldr	r1, [pc, #40]	; (98c0 <_Cstart+0xe0>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    9898:	4393      	bics	r3, r2
	_current = main_thread;
    989a:	60b5      	str	r5, [r6, #8]
	__asm__ __volatile__(
    989c:	4a10      	ldr	r2, [pc, #64]	; (98e0 <_Cstart+0x100>)
    989e:	000c      	movs	r4, r1
    98a0:	f383 8809 	msr	PSP, r3
    98a4:	b662      	cpsie	i
    98a6:	1c20      	adds	r0, r4, #0
    98a8:	4710      	bx	r2
    98aa:	46c0      	nop			; (mov r8, r8)
    98ac:	20000bcc 	.word	0x20000bcc
    98b0:	20000ccc 	.word	0x20000ccc
    98b4:	20000b48 	.word	0x20000b48
    98b8:	20000ba8 	.word	0x20000ba8
    98bc:	200015d8 	.word	0x200015d8
    98c0:	000097a9 	.word	0x000097a9
    98c4:	200019d8 	.word	0x200019d8
    98c8:	0000972d 	.word	0x0000972d
    98cc:	20000ae8 	.word	0x20000ae8
    98d0:	20000bb8 	.word	0x20000bb8
    98d4:	20001ad8 	.word	0x20001ad8
    98d8:	e000ed00 	.word	0xe000ed00
    98dc:	ff00ffff 	.word	0xff00ffff
    98e0:	0000a459 	.word	0x0000a459

000098e4 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    98e4:	b570      	push	{r4, r5, r6, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    98e6:	7ac6      	ldrb	r6, [r0, #11]
    98e8:	250c      	movs	r5, #12
    98ea:	68c4      	ldr	r4, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    98ec:	428e      	cmp	r6, r1
    98ee:	db0b      	blt.n	9908 <get_bit_ptr+0x24>
    98f0:	4369      	muls	r1, r5
    98f2:	1861      	adds	r1, r4, r1

	*word = &bitarray[bn / 32];
    98f4:	201f      	movs	r0, #31
    98f6:	17d4      	asrs	r4, r2, #31
    98f8:	4004      	ands	r4, r0
    98fa:	18a4      	adds	r4, r4, r2
    98fc:	1164      	asrs	r4, r4, #5
    98fe:	00a4      	lsls	r4, r4, #2
    9900:	190c      	adds	r4, r1, r4

	return bn & 0x1f;
    9902:	4010      	ands	r0, r2
	*word = &bitarray[bn / 32];
    9904:	601c      	str	r4, [r3, #0]
}
    9906:	bd70      	pop	{r4, r5, r6, pc}
		&p->levels[level].bits : p->levels[level].bits_p;
    9908:	434d      	muls	r5, r1
    990a:	5961      	ldr	r1, [r4, r5]
    990c:	e7f2      	b.n	98f4 <get_bit_ptr+0x10>

0000990e <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    990e:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    9910:	ab01      	add	r3, sp, #4
    9912:	f7ff ffe7 	bl	98e4 <get_bit_ptr>

	*word |= (1<<bit);
    9916:	2301      	movs	r3, #1
    9918:	4083      	lsls	r3, r0
    991a:	9a01      	ldr	r2, [sp, #4]
    991c:	6811      	ldr	r1, [r2, #0]
    991e:	430b      	orrs	r3, r1
    9920:	6013      	str	r3, [r2, #0]
}
    9922:	bd07      	pop	{r0, r1, r2, pc}

00009924 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    9924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9926:	4c26      	ldr	r4, [pc, #152]	; (99c0 <init_static_pools+0x9c>)
    9928:	4b26      	ldr	r3, [pc, #152]	; (99c4 <init_static_pools+0xa0>)
    992a:	429c      	cmp	r4, r3
    992c:	d301      	bcc.n	9932 <init_static_pools+0xe>
		init_mem_pool(p);
	}

	return 0;
}
    992e:	2000      	movs	r0, #0
    9930:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    9932:	6865      	ldr	r5, [r4, #4]
    9934:	8923      	ldrh	r3, [r4, #8]
	for (i = 0; i < p->n_levels; i++) {
    9936:	2600      	movs	r6, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    9938:	436b      	muls	r3, r5
    993a:	9301      	str	r3, [sp, #4]
	u32_t *bits = p->buf + buflen;
    993c:	9a01      	ldr	r2, [sp, #4]
    993e:	6823      	ldr	r3, [r4, #0]
    9940:	189f      	adds	r7, r3, r2
    9942:	0023      	movs	r3, r4
    9944:	3310      	adds	r3, #16
	list->head = (sys_dnode_t *)list;
    9946:	6123      	str	r3, [r4, #16]
	list->tail = (sys_dnode_t *)list;
    9948:	6163      	str	r3, [r4, #20]
	for (i = 0; i < p->n_levels; i++) {
    994a:	7aa3      	ldrb	r3, [r4, #10]
    994c:	429e      	cmp	r6, r3
    994e:	db05      	blt.n	995c <init_static_pools+0x38>
    9950:	2500      	movs	r5, #0
	for (i = 0; i < p->n_max; i++) {
    9952:	8923      	ldrh	r3, [r4, #8]
    9954:	429d      	cmp	r5, r3
    9956:	db20      	blt.n	999a <init_static_pools+0x76>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9958:	3418      	adds	r4, #24
    995a:	e7e5      	b.n	9928 <init_static_pools+0x4>
		int nblocks = buflen / sz;
    995c:	0029      	movs	r1, r5
    995e:	9801      	ldr	r0, [sp, #4]
    9960:	f7f6 fc32 	bl	1c8 <__aeabi_uidiv>
		sys_dlist_init(&p->levels[i].free_list);
    9964:	230c      	movs	r3, #12
    9966:	4373      	muls	r3, r6
    9968:	68e2      	ldr	r2, [r4, #12]
    996a:	18d3      	adds	r3, r2, r3
    996c:	1d1a      	adds	r2, r3, #4
	list->head = (sys_dnode_t *)list;
    996e:	605a      	str	r2, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    9970:	609a      	str	r2, [r3, #8]
		if (nblocks < 32) {
    9972:	281f      	cmp	r0, #31
    9974:	dc06      	bgt.n	9984 <init_static_pools+0x60>
			p->max_inline_level = i;
    9976:	72e6      	strb	r6, [r4, #11]
		sz = _ALIGN4(sz / 4);
    9978:	2303      	movs	r3, #3
    997a:	08ad      	lsrs	r5, r5, #2
    997c:	3503      	adds	r5, #3
    997e:	439d      	bics	r5, r3
	for (i = 0; i < p->n_levels; i++) {
    9980:	3601      	adds	r6, #1
    9982:	e7e2      	b.n	994a <init_static_pools+0x26>
			p->levels[i].bits_p = bits;
    9984:	601f      	str	r7, [r3, #0]
			bits += (nblocks + 31)/32;
    9986:	0003      	movs	r3, r0
    9988:	221f      	movs	r2, #31
    998a:	331f      	adds	r3, #31
    998c:	17d8      	asrs	r0, r3, #31
    998e:	4010      	ands	r0, r2
    9990:	18c0      	adds	r0, r0, r3
    9992:	1140      	asrs	r0, r0, #5
    9994:	0080      	lsls	r0, r0, #2
    9996:	183f      	adds	r7, r7, r0
    9998:	e7ee      	b.n	9978 <init_static_pools+0x54>
	return p->buf + lsz * block;
    999a:	6863      	ldr	r3, [r4, #4]
    999c:	6822      	ldr	r2, [r4, #0]
    999e:	436b      	muls	r3, r5
    99a0:	18d3      	adds	r3, r2, r3
		sys_dlist_append(&p->levels[0].free_list, block);
    99a2:	68e2      	ldr	r2, [r4, #12]
		set_free_bit(p, 0, i);
    99a4:	0020      	movs	r0, r4
		sys_dlist_append(&p->levels[0].free_list, block);
    99a6:	1d11      	adds	r1, r2, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    99a8:	6019      	str	r1, [r3, #0]
	node->prev = list->tail;
    99aa:	6891      	ldr	r1, [r2, #8]
    99ac:	6059      	str	r1, [r3, #4]

	list->tail->next = node;
    99ae:	6891      	ldr	r1, [r2, #8]
    99b0:	600b      	str	r3, [r1, #0]
	list->tail = node;
    99b2:	6093      	str	r3, [r2, #8]
		set_free_bit(p, 0, i);
    99b4:	2100      	movs	r1, #0
    99b6:	002a      	movs	r2, r5
    99b8:	f7ff ffa9 	bl	990e <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    99bc:	3501      	adds	r5, #1
    99be:	e7c8      	b.n	9952 <init_static_pools+0x2e>
    99c0:	200024d0 	.word	0x200024d0
    99c4:	200024d0 	.word	0x200024d0

000099c8 <adjust_owner_prio.isra.7>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    99c8:	230a      	movs	r3, #10
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    99ca:	b570      	push	{r4, r5, r6, lr}
	if (mutex->owner->base.prio != new_prio) {
    99cc:	56c3      	ldrsb	r3, [r0, r3]
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    99ce:	0004      	movs	r4, r0
    99d0:	000d      	movs	r5, r1
	if (mutex->owner->base.prio != new_prio) {
    99d2:	428b      	cmp	r3, r1
    99d4:	d00b      	beq.n	99ee <adjust_owner_prio.isra.7+0x26>
	return !(_is_thread_prevented_from_running(thread) ||
    99d6:	7a43      	ldrb	r3, [r0, #9]
    99d8:	06db      	lsls	r3, r3, #27
    99da:	d109      	bne.n	99f0 <adjust_owner_prio.isra.7+0x28>
    99dc:	6a03      	ldr	r3, [r0, #32]
    99de:	3301      	adds	r3, #1
    99e0:	d106      	bne.n	99f0 <adjust_owner_prio.isra.7+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    99e2:	f000 fa03 	bl	9dec <_remove_thread_from_ready_q>
		thread->base.prio = prio;
    99e6:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
    99e8:	0020      	movs	r0, r4
    99ea:	f000 f977 	bl	9cdc <_add_thread_to_ready_q>
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    99ee:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		thread->base.prio = prio;
    99f0:	72a5      	strb	r5, [r4, #10]
    99f2:	e7fc      	b.n	99ee <adjust_owner_prio.isra.7+0x26>

000099f4 <_impl_k_mutex_lock>:

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    99f4:	b570      	push	{r4, r5, r6, lr}
	--_current->base.sched_locked;
    99f6:	4b2f      	ldr	r3, [pc, #188]	; (9ab4 <_impl_k_mutex_lock+0xc0>)
    99f8:	000d      	movs	r5, r1
    99fa:	6899      	ldr	r1, [r3, #8]
    99fc:	0004      	movs	r4, r0
    99fe:	7aca      	ldrb	r2, [r1, #11]
    9a00:	3a01      	subs	r2, #1
    9a02:	72ca      	strb	r2, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    9a04:	68c2      	ldr	r2, [r0, #12]
    9a06:	2a00      	cmp	r2, #0
    9a08:	d00a      	beq.n	9a20 <_impl_k_mutex_lock+0x2c>
    9a0a:	6880      	ldr	r0, [r0, #8]
    9a0c:	6899      	ldr	r1, [r3, #8]
    9a0e:	4288      	cmp	r0, r1
    9a10:	d012      	beq.n	9a38 <_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    9a12:	2d00      	cmp	r5, #0
    9a14:	d112      	bne.n	9a3c <_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    9a16:	f000 fa83 	bl	9f20 <k_sched_unlock>
		return -EBUSY;
    9a1a:	2010      	movs	r0, #16
	adjust_owner_prio(mutex, new_prio);
	irq_unlock(key);

	k_sched_unlock();

	return -EAGAIN;
    9a1c:	4240      	negs	r0, r0
    9a1e:	e00a      	b.n	9a36 <_impl_k_mutex_lock+0x42>
					_current->base.prio :
    9a20:	6899      	ldr	r1, [r3, #8]
    9a22:	7a89      	ldrb	r1, [r1, #10]
    9a24:	b249      	sxtb	r1, r1
		mutex->owner = _current;
    9a26:	689b      	ldr	r3, [r3, #8]
		mutex->lock_count++;
    9a28:	3201      	adds	r2, #1
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    9a2a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    9a2c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    9a2e:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    9a30:	f000 fa76 	bl	9f20 <k_sched_unlock>
		return 0;
    9a34:	2000      	movs	r0, #0
}
    9a36:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    9a38:	6921      	ldr	r1, [r4, #16]
    9a3a:	e7f4      	b.n	9a26 <_impl_k_mutex_lock+0x32>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9a3c:	230a      	movs	r3, #10
    9a3e:	7a89      	ldrb	r1, [r1, #10]
    9a40:	56c3      	ldrsb	r3, [r0, r3]
    9a42:	b249      	sxtb	r1, r1
    9a44:	4299      	cmp	r1, r3
    9a46:	dd00      	ble.n	9a4a <_impl_k_mutex_lock+0x56>
    9a48:	0019      	movs	r1, r3
    9a4a:	43cb      	mvns	r3, r1
    9a4c:	17db      	asrs	r3, r3, #31
    9a4e:	4019      	ands	r1, r3
    9a50:	f3ef 8610 	mrs	r6, PRIMASK
    9a54:	b672      	cpsid	i
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9a56:	230a      	movs	r3, #10
    9a58:	68a0      	ldr	r0, [r4, #8]
    9a5a:	56c3      	ldrsb	r3, [r0, r3]
    9a5c:	4299      	cmp	r1, r3
    9a5e:	da01      	bge.n	9a64 <_impl_k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
    9a60:	f7ff ffb2 	bl	99c8 <adjust_owner_prio.isra.7>
	_pend_current_thread(&mutex->wait_q, timeout);
    9a64:	0020      	movs	r0, r4
    9a66:	0029      	movs	r1, r5
    9a68:	f000 fa1e 	bl	9ea8 <_pend_current_thread>
	_update_time_slice_before_swap();
    9a6c:	f000 fad6 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    9a70:	0030      	movs	r0, r6
    9a72:	f7f6 ffa7 	bl	9c4 <__swap>
	if (got_mutex == 0) {
    9a76:	2800      	cmp	r0, #0
    9a78:	d0da      	beq.n	9a30 <_impl_k_mutex_lock+0x3c>
	return list->head == list;
    9a7a:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a7c:	429c      	cmp	r4, r3
    9a7e:	d100      	bne.n	9a82 <_impl_k_mutex_lock+0x8e>
    9a80:	2300      	movs	r3, #0
	new_prio = mutex->owner_orig_prio;
    9a82:	6921      	ldr	r1, [r4, #16]
						     new_prio) : new_prio;
    9a84:	2b00      	cmp	r3, #0
    9a86:	d007      	beq.n	9a98 <_impl_k_mutex_lock+0xa4>
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    9a88:	7a9b      	ldrb	r3, [r3, #10]
    9a8a:	b25b      	sxtb	r3, r3
    9a8c:	4299      	cmp	r1, r3
    9a8e:	dd00      	ble.n	9a92 <_impl_k_mutex_lock+0x9e>
    9a90:	0019      	movs	r1, r3
    9a92:	43cb      	mvns	r3, r1
    9a94:	17db      	asrs	r3, r3, #31
    9a96:	4019      	ands	r1, r3
    9a98:	f3ef 8510 	mrs	r5, PRIMASK
    9a9c:	b672      	cpsid	i
	adjust_owner_prio(mutex, new_prio);
    9a9e:	68a0      	ldr	r0, [r4, #8]
    9aa0:	f7ff ff92 	bl	99c8 <adjust_owner_prio.isra.7>
	if (key) {
    9aa4:	2d00      	cmp	r5, #0
    9aa6:	d100      	bne.n	9aaa <_impl_k_mutex_lock+0xb6>
	__asm__ volatile("cpsie i" : : : "memory");
    9aa8:	b662      	cpsie	i
	k_sched_unlock();
    9aaa:	f000 fa39 	bl	9f20 <k_sched_unlock>
	return -EAGAIN;
    9aae:	200b      	movs	r0, #11
    9ab0:	e7b4      	b.n	9a1c <_impl_k_mutex_lock+0x28>
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	20000ba8 	.word	0x20000ba8

00009ab8 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aba:	4f35      	ldr	r7, [pc, #212]	; (9b90 <_impl_k_mutex_unlock+0xd8>)
    9abc:	0005      	movs	r5, r0
    9abe:	68ba      	ldr	r2, [r7, #8]
    9ac0:	7ad3      	ldrb	r3, [r2, #11]
    9ac2:	3b01      	subs	r3, #1
    9ac4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    9ac6:	68c3      	ldr	r3, [r0, #12]
    9ac8:	1e5c      	subs	r4, r3, #1
    9aca:	60c4      	str	r4, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    9acc:	2c00      	cmp	r4, #0
    9ace:	d002      	beq.n	9ad6 <_impl_k_mutex_unlock+0x1e>
		k_sched_unlock();
    9ad0:	f000 fa26 	bl	9f20 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    9ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    9ad6:	f3ef 8610 	mrs	r6, PRIMASK
    9ada:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    9adc:	6901      	ldr	r1, [r0, #16]
    9ade:	6880      	ldr	r0, [r0, #8]
    9ae0:	f7ff ff72 	bl	99c8 <adjust_owner_prio.isra.7>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    9ae4:	4b2b      	ldr	r3, [pc, #172]	; (9b94 <_impl_k_mutex_unlock+0xdc>)
    9ae6:	681a      	ldr	r2, [r3, #0]
    9ae8:	682b      	ldr	r3, [r5, #0]
    9aea:	2a00      	cmp	r2, #0
    9aec:	d012      	beq.n	9b14 <_impl_k_mutex_unlock+0x5c>
    9aee:	429d      	cmp	r5, r3
    9af0:	d100      	bne.n	9af4 <_impl_k_mutex_unlock+0x3c>
    9af2:	0023      	movs	r3, r4
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    9af4:	2b00      	cmp	r3, #0
    9af6:	d105      	bne.n	9b04 <_impl_k_mutex_unlock+0x4c>
	if (key) {
    9af8:	2e00      	cmp	r6, #0
    9afa:	d100      	bne.n	9afe <_impl_k_mutex_unlock+0x46>
	__asm__ volatile("cpsie i" : : : "memory");
    9afc:	b662      	cpsie	i
		mutex->owner = NULL;
    9afe:	2300      	movs	r3, #0
    9b00:	60ab      	str	r3, [r5, #8]
    9b02:	e7e5      	b.n	9ad0 <_impl_k_mutex_unlock+0x18>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    9b04:	6a1a      	ldr	r2, [r3, #32]
    9b06:	3202      	adds	r2, #2
    9b08:	d108      	bne.n	9b1c <_impl_k_mutex_unlock+0x64>
	return (node == list->tail) ? NULL : node->next;
    9b0a:	686a      	ldr	r2, [r5, #4]
    9b0c:	4293      	cmp	r3, r2
    9b0e:	d0f3      	beq.n	9af8 <_impl_k_mutex_unlock+0x40>
    9b10:	681b      	ldr	r3, [r3, #0]
    9b12:	e7ef      	b.n	9af4 <_impl_k_mutex_unlock+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9b14:	429d      	cmp	r5, r3
    9b16:	d0ef      	beq.n	9af8 <_impl_k_mutex_unlock+0x40>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d0ed      	beq.n	9af8 <_impl_k_mutex_unlock+0x40>
			if (_is_thread_timeout_expired(thread)) {
    9b1c:	001c      	movs	r4, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9b1e:	685b      	ldr	r3, [r3, #4]
    9b20:	6822      	ldr	r2, [r4, #0]
	return _abort_timeout(&thread->base.timeout);
    9b22:	0021      	movs	r1, r4
    9b24:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9b26:	6822      	ldr	r2, [r4, #0]
    9b28:	3110      	adds	r1, #16
    9b2a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9b2c:	2202      	movs	r2, #2
    9b2e:	7a63      	ldrb	r3, [r4, #9]
    9b30:	4393      	bics	r3, r2
    9b32:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9b34:	6a23      	ldr	r3, [r4, #32]
    9b36:	1c5a      	adds	r2, r3, #1
    9b38:	d00e      	beq.n	9b58 <_impl_k_mutex_unlock+0xa0>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9b3a:	697a      	ldr	r2, [r7, #20]
    9b3c:	4291      	cmp	r1, r2
    9b3e:	d003      	beq.n	9b48 <_impl_k_mutex_unlock+0x90>
	return (node == list->tail) ? NULL : node->next;
    9b40:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9b42:	6911      	ldr	r1, [r2, #16]
    9b44:	18cb      	adds	r3, r1, r3
    9b46:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    9b48:	6963      	ldr	r3, [r4, #20]
    9b4a:	6922      	ldr	r2, [r4, #16]
    9b4c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9b4e:	6922      	ldr	r2, [r4, #16]
    9b50:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    9b52:	2301      	movs	r3, #1
    9b54:	425b      	negs	r3, r3
    9b56:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9b58:	7a63      	ldrb	r3, [r4, #9]
    9b5a:	2204      	movs	r2, #4
    9b5c:	0019      	movs	r1, r3
    9b5e:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    9b60:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9b62:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    9b64:	4213      	tst	r3, r2
    9b66:	d102      	bne.n	9b6e <_impl_k_mutex_unlock+0xb6>
    9b68:	6a23      	ldr	r3, [r4, #32]
    9b6a:	3301      	adds	r3, #1
    9b6c:	d00c      	beq.n	9b88 <_impl_k_mutex_unlock+0xd0>
	if (key) {
    9b6e:	2e00      	cmp	r6, #0
    9b70:	d100      	bne.n	9b74 <_impl_k_mutex_unlock+0xbc>
	__asm__ volatile("cpsie i" : : : "memory");
    9b72:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9b74:	2300      	movs	r3, #0
    9b76:	65e3      	str	r3, [r4, #92]	; 0x5c
		mutex->lock_count++;
    9b78:	68eb      	ldr	r3, [r5, #12]
		mutex->owner = new_owner;
    9b7a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    9b7c:	3301      	adds	r3, #1
    9b7e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    9b80:	230a      	movs	r3, #10
    9b82:	56e3      	ldrsb	r3, [r4, r3]
    9b84:	612b      	str	r3, [r5, #16]
    9b86:	e7a3      	b.n	9ad0 <_impl_k_mutex_unlock+0x18>
		_add_thread_to_ready_q(thread);
    9b88:	0020      	movs	r0, r4
    9b8a:	f000 f8a7 	bl	9cdc <_add_thread_to_ready_q>
    9b8e:	e7ee      	b.n	9b6e <_impl_k_mutex_unlock+0xb6>
    9b90:	20000ba8 	.word	0x20000ba8
    9b94:	20000da0 	.word	0x20000da0

00009b98 <k_queue_init>:
	list->head = NULL;
    9b98:	2300      	movs	r3, #0
    9b9a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    9b9c:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    9b9e:	0003      	movs	r3, r0
    9ba0:	3308      	adds	r3, #8
	list->head = (sys_dnode_t *)list;
    9ba2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    9ba4:	60c3      	str	r3, [r0, #12]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    9ba6:	4770      	bx	lr

00009ba8 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    9ba8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9baa:	f3ef 8410 	mrs	r4, PRIMASK
    9bae:	b672      	cpsid	i
	if (!prev) {
    9bb0:	2900      	cmp	r1, #0
    9bb2:	d107      	bne.n	9bc4 <k_queue_insert+0x1c>
	node->next = list->head;
    9bb4:	6803      	ldr	r3, [r0, #0]
    9bb6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    9bb8:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    9bba:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	d10a      	bne.n	9bd6 <k_queue_insert+0x2e>
		list->tail = node;
    9bc0:	6042      	str	r2, [r0, #4]
    9bc2:	e008      	b.n	9bd6 <k_queue_insert+0x2e>
	} else if (!prev->next) {
    9bc4:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    9bc6:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d112      	bne.n	9bf2 <k_queue_insert+0x4a>
	if (!list->tail) {
    9bcc:	6843      	ldr	r3, [r0, #4]
    9bce:	2b00      	cmp	r3, #0
    9bd0:	d10d      	bne.n	9bee <k_queue_insert+0x46>
		list->tail = node;
    9bd2:	6042      	str	r2, [r0, #4]
		list->head = node;
    9bd4:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9bd6:	3008      	adds	r0, #8
    9bd8:	2104      	movs	r1, #4
    9bda:	f000 ffc9 	bl	ab70 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    9bde:	2800      	cmp	r0, #0
    9be0:	d009      	beq.n	9bf6 <k_queue_insert+0x4e>
	_update_time_slice_before_swap();
    9be2:	f000 fa1b 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    9be6:	0020      	movs	r0, r4
    9be8:	f7f6 feec 	bl	9c4 <__swap>
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    9bec:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    9bee:	601a      	str	r2, [r3, #0]
    9bf0:	e7e6      	b.n	9bc0 <k_queue_insert+0x18>
		prev->next = node;
    9bf2:	600a      	str	r2, [r1, #0]
    9bf4:	e7ef      	b.n	9bd6 <k_queue_insert+0x2e>
	if (key) {
    9bf6:	2c00      	cmp	r4, #0
    9bf8:	d1f8      	bne.n	9bec <k_queue_insert+0x44>
	__asm__ volatile("cpsie i" : : : "memory");
    9bfa:	b662      	cpsie	i
    9bfc:	e7f6      	b.n	9bec <k_queue_insert+0x44>

00009bfe <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
    9bfe:	b510      	push	{r4, lr}
    9c00:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
    9c02:	6841      	ldr	r1, [r0, #4]
    9c04:	f7ff ffd0 	bl	9ba8 <k_queue_insert>
}
    9c08:	bd10      	pop	{r4, pc}

00009c0a <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
    9c0a:	b510      	push	{r4, lr}
    9c0c:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
    9c0e:	2100      	movs	r1, #0
    9c10:	f7ff ffca 	bl	9ba8 <k_queue_insert>
}
    9c14:	bd10      	pop	{r4, pc}

00009c16 <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    9c16:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9c18:	f3ef 8410 	mrs	r4, PRIMASK
    9c1c:	b672      	cpsid	i
	if (!list->tail) {
    9c1e:	6843      	ldr	r3, [r0, #4]
    9c20:	2b00      	cmp	r3, #0
    9c22:	d10d      	bne.n	9c40 <k_queue_append_list+0x2a>
		list->head = (sys_snode_t *)head;
    9c24:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    9c26:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9c28:	2104      	movs	r1, #4
    9c2a:	3008      	adds	r0, #8
    9c2c:	f000 ffa0 	bl	ab70 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    9c30:	2800      	cmp	r0, #0
    9c32:	d007      	beq.n	9c44 <k_queue_append_list+0x2e>
	_update_time_slice_before_swap();
    9c34:	f000 f9f2 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    9c38:	0020      	movs	r0, r4
    9c3a:	f7f6 fec3 	bl	9c4 <__swap>
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    9c3e:	bd10      	pop	{r4, pc}
		list->tail->next = (sys_snode_t *)head;
    9c40:	6019      	str	r1, [r3, #0]
    9c42:	e7f0      	b.n	9c26 <k_queue_append_list+0x10>
	if (key) {
    9c44:	2c00      	cmp	r4, #0
    9c46:	d1fa      	bne.n	9c3e <k_queue_append_list+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    9c48:	b662      	cpsie	i
    9c4a:	e7f8      	b.n	9c3e <k_queue_append_list+0x28>

00009c4c <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c4e:	0004      	movs	r4, r0
    9c50:	b087      	sub	sp, #28
    9c52:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    9c54:	f3ef 8310 	mrs	r3, PRIMASK
    9c58:	b672      	cpsid	i
    9c5a:	6800      	ldr	r0, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    9c5c:	2800      	cmp	r0, #0
    9c5e:	d00a      	beq.n	9c76 <k_queue_get+0x2a>
	list->head = node->next;
    9c60:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    9c62:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    9c64:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    9c66:	4288      	cmp	r0, r1
    9c68:	d100      	bne.n	9c6c <k_queue_get+0x20>
		list->tail = list->head;
    9c6a:	6062      	str	r2, [r4, #4]
	if (key) {
    9c6c:	2b00      	cmp	r3, #0
    9c6e:	d100      	bne.n	9c72 <k_queue_get+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    9c70:	b662      	cpsie	i
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    9c72:	b007      	add	sp, #28
    9c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (timeout == K_NO_WAIT) {
    9c76:	2900      	cmp	r1, #0
    9c78:	d101      	bne.n	9c7e <k_queue_get+0x32>
		return NULL;
    9c7a:	0008      	movs	r0, r1
    9c7c:	e7f6      	b.n	9c6c <k_queue_get+0x20>
	if (key) {
    9c7e:	2b00      	cmp	r3, #0
    9c80:	d100      	bne.n	9c84 <k_queue_get+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    9c82:	b662      	cpsie	i
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    9c84:	ae01      	add	r6, sp, #4
    9c86:	0023      	movs	r3, r4
    9c88:	2200      	movs	r2, #0
    9c8a:	2104      	movs	r1, #4
    9c8c:	0030      	movs	r0, r6
    9c8e:	f000 fec1 	bl	aa14 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    9c92:	270f      	movs	r7, #15
    9c94:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    9c96:	002a      	movs	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    9c98:	403b      	ands	r3, r7
		err = k_poll(&event, 1, timeout);
    9c9a:	2101      	movs	r1, #1
    9c9c:	0030      	movs	r0, r6
		event.state = K_POLL_STATE_NOT_READY;
    9c9e:	7373      	strb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    9ca0:	f000 fed0 	bl	aa44 <k_poll>
		if (err) {
    9ca4:	2800      	cmp	r0, #0
    9ca6:	d001      	beq.n	9cac <k_queue_get+0x60>
			return NULL;
    9ca8:	2000      	movs	r0, #0
    9caa:	e7e2      	b.n	9c72 <k_queue_get+0x26>
	__asm__ volatile("mrs %0, PRIMASK;"
    9cac:	f3ef 8310 	mrs	r3, PRIMASK
    9cb0:	b672      	cpsid	i
    9cb2:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    9cb4:	2800      	cmp	r0, #0
    9cb6:	d008      	beq.n	9cca <k_queue_get+0x7e>
	list->head = node->next;
    9cb8:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    9cba:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    9cbc:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    9cbe:	4288      	cmp	r0, r1
    9cc0:	d100      	bne.n	9cc4 <k_queue_get+0x78>
		list->tail = list->head;
    9cc2:	6062      	str	r2, [r4, #4]
	if (key) {
    9cc4:	2b00      	cmp	r3, #0
    9cc6:	d002      	beq.n	9cce <k_queue_get+0x82>
    9cc8:	e7d3      	b.n	9c72 <k_queue_get+0x26>
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d102      	bne.n	9cd4 <k_queue_get+0x88>
	__asm__ volatile("cpsie i" : : : "memory");
    9cce:	b662      	cpsie	i
	} while (!val && timeout == K_FOREVER);
    9cd0:	2800      	cmp	r0, #0
    9cd2:	d1ce      	bne.n	9c72 <k_queue_get+0x26>
    9cd4:	1c6b      	adds	r3, r5, #1
    9cd6:	d0dd      	beq.n	9c94 <k_queue_get+0x48>
    9cd8:	e7e6      	b.n	9ca8 <k_queue_get+0x5c>
	...

00009cdc <_add_thread_to_ready_q>:
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9cdc:	230a      	movs	r3, #10
{
    9cde:	b530      	push	{r4, r5, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9ce0:	56c3      	ldrsb	r3, [r0, r3]
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9ce2:	251f      	movs	r5, #31
	return prio + _NUM_COOP_PRIO;
    9ce4:	001c      	movs	r4, r3
    9ce6:	3410      	adds	r4, #16
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9ce8:	4025      	ands	r5, r4
	return (prio + _NUM_COOP_PRIO) >> 5;
    9cea:	1162      	asrs	r2, r4, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9cec:	2401      	movs	r4, #1
    9cee:	40ac      	lsls	r4, r5
	*bmap |= _get_ready_q_prio_bit(prio);
    9cf0:	490d      	ldr	r1, [pc, #52]	; (9d28 <_add_thread_to_ready_q+0x4c>)
    9cf2:	3206      	adds	r2, #6
    9cf4:	0092      	lsls	r2, r2, #2
    9cf6:	188a      	adds	r2, r1, r2
    9cf8:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9cfa:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    9cfc:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    9cfe:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    9d00:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9d02:	1d1a      	adds	r2, r3, #4
    9d04:	188a      	adds	r2, r1, r2
	node->next = list;
    9d06:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    9d08:	18cb      	adds	r3, r1, r3
    9d0a:	689a      	ldr	r2, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    9d0c:	240a      	movs	r4, #10
    9d0e:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    9d10:	689a      	ldr	r2, [r3, #8]
    9d12:	6010      	str	r0, [r2, #0]
    9d14:	220a      	movs	r2, #10
	list->tail = node;
    9d16:	6098      	str	r0, [r3, #8]
    9d18:	69cb      	ldr	r3, [r1, #28]
    9d1a:	5704      	ldrsb	r4, [r0, r4]
    9d1c:	569a      	ldrsb	r2, [r3, r2]
    9d1e:	4294      	cmp	r4, r2
    9d20:	db00      	blt.n	9d24 <_add_thread_to_ready_q+0x48>
    9d22:	0018      	movs	r0, r3
    9d24:	61c8      	str	r0, [r1, #28]
	_ready_q.prio_bmap[0] = 1;
# ifndef CONFIG_SMP
	_ready_q.cache = thread;
# endif
#endif
}
    9d26:	bd30      	pop	{r4, r5, pc}
    9d28:	20000ba8 	.word	0x20000ba8

00009d2c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9d2c:	7a43      	ldrb	r3, [r0, #9]
    9d2e:	2204      	movs	r2, #4
    9d30:	0019      	movs	r1, r3
    9d32:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    9d34:	221b      	movs	r2, #27
{
    9d36:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9d38:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    9d3a:	4213      	tst	r3, r2
    9d3c:	d104      	bne.n	9d48 <_ready_thread+0x1c>
    9d3e:	6a03      	ldr	r3, [r0, #32]
    9d40:	3301      	adds	r3, #1
    9d42:	d101      	bne.n	9d48 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    9d44:	f7ff ffca 	bl	9cdc <_add_thread_to_ready_q>
}
    9d48:	bd10      	pop	{r4, pc}
	...

00009d4c <_add_timeout>:
{
    9d4c:	b510      	push	{r4, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    9d4e:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    9d50:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    9d52:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    9d54:	2b00      	cmp	r3, #0
    9d56:	d123      	bne.n	9da0 <_add_timeout+0x54>
	__asm__ volatile("mrs %0, PRIMASK;"
    9d58:	f3ef 8410 	mrs	r4, PRIMASK
    9d5c:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    9d5e:	2201      	movs	r2, #1
    9d60:	4252      	negs	r2, r2
    9d62:	610a      	str	r2, [r1, #16]
	if (thread) {
    9d64:	2800      	cmp	r0, #0
    9d66:	d012      	beq.n	9d8e <_add_timeout+0x42>
	if (timeout_obj->wait_q) {
    9d68:	68ca      	ldr	r2, [r1, #12]
    9d6a:	2a00      	cmp	r2, #0
    9d6c:	d009      	beq.n	9d82 <_add_timeout+0x36>
	node->prev->next = node->next;
    9d6e:	6842      	ldr	r2, [r0, #4]
    9d70:	6801      	ldr	r1, [r0, #0]
    9d72:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9d74:	6801      	ldr	r1, [r0, #0]
    9d76:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9d78:	2102      	movs	r1, #2
    9d7a:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    9d7c:	61c3      	str	r3, [r0, #28]
    9d7e:	438a      	bics	r2, r1
    9d80:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    9d82:	f7ff ffd3 	bl	9d2c <_ready_thread>
	if (key) {
    9d86:	2c00      	cmp	r4, #0
    9d88:	d100      	bne.n	9d8c <_add_timeout+0x40>
	__asm__ volatile("cpsie i" : : : "memory");
    9d8a:	b662      	cpsie	i
}
    9d8c:	bd10      	pop	{r4, pc}
	if (key) {
    9d8e:	2c00      	cmp	r4, #0
    9d90:	d100      	bne.n	9d94 <_add_timeout+0x48>
	__asm__ volatile("cpsie i" : : : "memory");
    9d92:	b662      	cpsie	i
		if (timeout->func) {
    9d94:	694b      	ldr	r3, [r1, #20]
    9d96:	2b00      	cmp	r3, #0
    9d98:	d0f8      	beq.n	9d8c <_add_timeout+0x40>
			timeout->func(timeout);
    9d9a:	0008      	movs	r0, r1
    9d9c:	4798      	blx	r3
    9d9e:	e7f5      	b.n	9d8c <_add_timeout+0x40>
	return list->head == list;
    9da0:	4a11      	ldr	r2, [pc, #68]	; (9de8 <_add_timeout+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9da2:	0010      	movs	r0, r2
	return list->head == list;
    9da4:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9da6:	3010      	adds	r0, #16
    9da8:	4283      	cmp	r3, r0
    9daa:	d10e      	bne.n	9dca <_add_timeout+0x7e>
	node->next = list;
    9dac:	0013      	movs	r3, r2
    9dae:	3310      	adds	r3, #16
    9db0:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
    9db2:	6953      	ldr	r3, [r2, #20]
    9db4:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    9db6:	6953      	ldr	r3, [r2, #20]
    9db8:	6019      	str	r1, [r3, #0]
	list->tail = node;
    9dba:	6151      	str	r1, [r2, #20]
    9dbc:	e7e6      	b.n	9d8c <_add_timeout+0x40>
		*delta -= in_q->delta_ticks_from_prev;
    9dbe:	1b00      	subs	r0, r0, r4
    9dc0:	6108      	str	r0, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    9dc2:	6950      	ldr	r0, [r2, #20]
    9dc4:	4283      	cmp	r3, r0
    9dc6:	d0f1      	beq.n	9dac <_add_timeout+0x60>
    9dc8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d0ee      	beq.n	9dac <_add_timeout+0x60>
		if (*delta <= in_q->delta_ticks_from_prev) {
    9dce:	6908      	ldr	r0, [r1, #16]
    9dd0:	691c      	ldr	r4, [r3, #16]
    9dd2:	42a0      	cmp	r0, r4
    9dd4:	dcf3      	bgt.n	9dbe <_add_timeout+0x72>
		node->prev = insert_point->prev;
    9dd6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    9dd8:	1a20      	subs	r0, r4, r0
    9dda:	6118      	str	r0, [r3, #16]
    9ddc:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    9dde:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    9de0:	685a      	ldr	r2, [r3, #4]
    9de2:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    9de4:	6059      	str	r1, [r3, #4]
    9de6:	e7d1      	b.n	9d8c <_add_timeout+0x40>
    9de8:	20000ba8 	.word	0x20000ba8

00009dec <_remove_thread_from_ready_q>:
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9dec:	230a      	movs	r3, #10
{
    9dee:	b510      	push	{r4, lr}
	node->prev->next = node->next;
    9df0:	6842      	ldr	r2, [r0, #4]
    9df2:	6801      	ldr	r1, [r0, #0]
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9df4:	56c3      	ldrsb	r3, [r0, r3]
    9df6:	6011      	str	r1, [r2, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9df8:	4c12      	ldr	r4, [pc, #72]	; (9e44 <_remove_thread_from_ready_q+0x58>)
	node->next->prev = node->prev;
    9dfa:	6801      	ldr	r1, [r0, #0]
    9dfc:	3314      	adds	r3, #20
    9dfe:	00db      	lsls	r3, r3, #3
    9e00:	604a      	str	r2, [r1, #4]
    9e02:	1d1a      	adds	r2, r3, #4
	return list->head == list;
    9e04:	18e3      	adds	r3, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    9e06:	685b      	ldr	r3, [r3, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9e08:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_empty(q)) {
    9e0a:	4293      	cmp	r3, r2
    9e0c:	d10d      	bne.n	9e2a <_remove_thread_from_ready_q+0x3e>
		_clear_ready_q_prio_bit(thread->base.prio);
    9e0e:	220a      	movs	r2, #10
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9e10:	211f      	movs	r1, #31
    9e12:	5682      	ldrsb	r2, [r0, r2]
	return (prio + _NUM_COOP_PRIO) >> 5;
    9e14:	3210      	adds	r2, #16
    9e16:	1153      	asrs	r3, r2, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9e18:	400a      	ands	r2, r1
    9e1a:	391e      	subs	r1, #30
    9e1c:	4091      	lsls	r1, r2
	*bmap &= ~_get_ready_q_prio_bit(prio);
    9e1e:	3306      	adds	r3, #6
    9e20:	009b      	lsls	r3, r3, #2
    9e22:	18e3      	adds	r3, r4, r3
    9e24:	689a      	ldr	r2, [r3, #8]
    9e26:	438a      	bics	r2, r1
    9e28:	609a      	str	r2, [r3, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9e2a:	69e3      	ldr	r3, [r4, #28]
    9e2c:	4298      	cmp	r0, r3
    9e2e:	d106      	bne.n	9e3e <_remove_thread_from_ready_q+0x52>
	return __builtin_ffs(op);
    9e30:	6a20      	ldr	r0, [r4, #32]
    9e32:	f7f6 fac3 	bl	3bc <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    9e36:	3003      	adds	r0, #3
    9e38:	00c0      	lsls	r0, r0, #3
    9e3a:	1820      	adds	r0, r4, r0
    9e3c:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9e3e:	61e3      	str	r3, [r4, #28]
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
# endif
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    9e40:	bd10      	pop	{r4, pc}
    9e42:	46c0      	nop			; (mov r8, r8)
    9e44:	20000ba8 	.word	0x20000ba8

00009e48 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    9e48:	b570      	push	{r4, r5, r6, lr}
    9e4a:	680c      	ldr	r4, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e4c:	42a1      	cmp	r1, r4
    9e4e:	d100      	bne.n	9e52 <_pend_thread+0xa>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    9e50:	2400      	movs	r4, #0
    9e52:	2c00      	cmp	r4, #0
    9e54:	d021      	beq.n	9e9a <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    9e56:	250a      	movs	r5, #10
    9e58:	230a      	movs	r3, #10
    9e5a:	5745      	ldrsb	r5, [r0, r5]
    9e5c:	56e3      	ldrsb	r3, [r4, r3]
    9e5e:	429d      	cmp	r5, r3
    9e60:	da15      	bge.n	9e8e <_pend_thread+0x46>
		node->prev = insert_point->prev;
    9e62:	6863      	ldr	r3, [r4, #4]
		node->next = insert_point;
    9e64:	6004      	str	r4, [r0, #0]
		node->prev = insert_point->prev;
    9e66:	6043      	str	r3, [r0, #4]
		insert_point->prev->next = node;
    9e68:	6863      	ldr	r3, [r4, #4]
    9e6a:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    9e6c:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    9e6e:	2302      	movs	r3, #2
    9e70:	7a44      	ldrb	r4, [r0, #9]
    9e72:	4323      	orrs	r3, r4
    9e74:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    9e76:	1c53      	adds	r3, r2, #1
    9e78:	d008      	beq.n	9e8c <_pend_thread+0x44>
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    9e7a:	0004      	movs	r4, r0
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    9e7c:	1cd3      	adds	r3, r2, #3
    9e7e:	089b      	lsrs	r3, r3, #2
    9e80:	3410      	adds	r4, #16
    9e82:	000a      	movs	r2, r1
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
    9e84:	3301      	adds	r3, #1
    9e86:	0021      	movs	r1, r4
    9e88:	f7ff ff60 	bl	9d4c <_add_timeout>

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    9e8c:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    9e8e:	684b      	ldr	r3, [r1, #4]
    9e90:	429c      	cmp	r4, r3
    9e92:	d002      	beq.n	9e9a <_pend_thread+0x52>
    9e94:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    9e96:	2c00      	cmp	r4, #0
    9e98:	d1db      	bne.n	9e52 <_pend_thread+0xa>
	node->next = list;
    9e9a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    9e9c:	684b      	ldr	r3, [r1, #4]
    9e9e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    9ea0:	684b      	ldr	r3, [r1, #4]
    9ea2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    9ea4:	6048      	str	r0, [r1, #4]
    9ea6:	e7e2      	b.n	9e6e <_pend_thread+0x26>

00009ea8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    9ea8:	b570      	push	{r4, r5, r6, lr}
    9eaa:	000e      	movs	r6, r1
    9eac:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
    9eae:	4c05      	ldr	r4, [pc, #20]	; (9ec4 <_pend_current_thread+0x1c>)
    9eb0:	68a0      	ldr	r0, [r4, #8]
    9eb2:	f7ff ff9b 	bl	9dec <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    9eb6:	0032      	movs	r2, r6
    9eb8:	0029      	movs	r1, r5
    9eba:	68a0      	ldr	r0, [r4, #8]
    9ebc:	f7ff ffc4 	bl	9e48 <_pend_thread>
}
    9ec0:	bd70      	pop	{r4, r5, r6, pc}
    9ec2:	46c0      	nop			; (mov r8, r8)
    9ec4:	20000ba8 	.word	0x20000ba8

00009ec8 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    9ec8:	b510      	push	{r4, lr}
	ready_range = _ready_q.prio_bmap[0];
    9eca:	4c07      	ldr	r4, [pc, #28]	; (9ee8 <__must_switch_threads+0x20>)
    9ecc:	6a20      	ldr	r0, [r4, #32]
    9ece:	f7f6 fa75 	bl	3bc <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    9ed2:	220a      	movs	r2, #10
    9ed4:	68a3      	ldr	r3, [r4, #8]
    9ed6:	569a      	ldrsb	r2, [r3, r2]
	return abs_prio - _NUM_COOP_PRIO;
    9ed8:	0003      	movs	r3, r0
    9eda:	3b11      	subs	r3, #17
	return prio1 < prio2;
    9edc:	2001      	movs	r0, #1
    9ede:	429a      	cmp	r2, r3
    9ee0:	dc00      	bgt.n	9ee4 <__must_switch_threads+0x1c>
    9ee2:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    9ee4:	bd10      	pop	{r4, pc}
    9ee6:	46c0      	nop			; (mov r8, r8)
    9ee8:	20000ba8 	.word	0x20000ba8

00009eec <_reschedule_threads>:
{
    9eec:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    9eee:	4b0a      	ldr	r3, [pc, #40]	; (9f18 <_reschedule_threads+0x2c>)
    9ef0:	0004      	movs	r4, r0
    9ef2:	689b      	ldr	r3, [r3, #8]
    9ef4:	895b      	ldrh	r3, [r3, #10]
    9ef6:	2b7f      	cmp	r3, #127	; 0x7f
    9ef8:	d80a      	bhi.n	9f10 <_reschedule_threads+0x24>
    9efa:	f7ff ffe5 	bl	9ec8 <__must_switch_threads>
    9efe:	2800      	cmp	r0, #0
    9f00:	d006      	beq.n	9f10 <_reschedule_threads+0x24>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    9f02:	2200      	movs	r2, #0
    9f04:	4b05      	ldr	r3, [pc, #20]	; (9f1c <_reschedule_threads+0x30>)
    9f06:	0020      	movs	r0, r4
    9f08:	601a      	str	r2, [r3, #0]
    9f0a:	f7f6 fd5b 	bl	9c4 <__swap>
    9f0e:	e002      	b.n	9f16 <_reschedule_threads+0x2a>
	if (key) {
    9f10:	2c00      	cmp	r4, #0
    9f12:	d100      	bne.n	9f16 <_reschedule_threads+0x2a>
	__asm__ volatile("cpsie i" : : : "memory");
    9f14:	b662      	cpsie	i
}
    9f16:	bd10      	pop	{r4, pc}
    9f18:	20000ba8 	.word	0x20000ba8
    9f1c:	20000da4 	.word	0x20000da4

00009f20 <k_sched_unlock>:
{
    9f20:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9f22:	f3ef 8010 	mrs	r0, PRIMASK
    9f26:	b672      	cpsid	i
	++_current->base.sched_locked;
    9f28:	4b03      	ldr	r3, [pc, #12]	; (9f38 <k_sched_unlock+0x18>)
    9f2a:	689a      	ldr	r2, [r3, #8]
    9f2c:	7ad3      	ldrb	r3, [r2, #11]
    9f2e:	3301      	adds	r3, #1
    9f30:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    9f32:	f7ff ffdb 	bl	9eec <_reschedule_threads>
}
    9f36:	bd10      	pop	{r4, pc}
    9f38:	20000ba8 	.word	0x20000ba8

00009f3c <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9f3c:	230a      	movs	r3, #10
{
    9f3e:	b570      	push	{r4, r5, r6, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9f40:	56c3      	ldrsb	r3, [r0, r3]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9f42:	4c10      	ldr	r4, [pc, #64]	; (9f84 <_move_thread_to_end_of_prio_q+0x48>)
    9f44:	3314      	adds	r3, #20
    9f46:	00db      	lsls	r3, r3, #3
    9f48:	1d1a      	adds	r2, r3, #4
    9f4a:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    9f4c:	6851      	ldr	r1, [r2, #4]
    9f4e:	4288      	cmp	r0, r1
    9f50:	d016      	beq.n	9f80 <_move_thread_to_end_of_prio_q+0x44>
	node->prev->next = node->next;
    9f52:	6805      	ldr	r5, [r0, #0]
    9f54:	6841      	ldr	r1, [r0, #4]
	node->prev = list->tail;
    9f56:	18e3      	adds	r3, r4, r3
	node->prev->next = node->next;
    9f58:	600d      	str	r5, [r1, #0]
	node->next->prev = node->prev;
    9f5a:	6805      	ldr	r5, [r0, #0]
    9f5c:	6069      	str	r1, [r5, #4]
	node->next = list;
    9f5e:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    9f60:	689a      	ldr	r2, [r3, #8]
    9f62:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    9f64:	689a      	ldr	r2, [r3, #8]
    9f66:	6010      	str	r0, [r2, #0]
	list->tail = node;
    9f68:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9f6a:	69e3      	ldr	r3, [r4, #28]
    9f6c:	4298      	cmp	r0, r3
    9f6e:	d106      	bne.n	9f7e <_move_thread_to_end_of_prio_q+0x42>
	return __builtin_ffs(op);
    9f70:	6a20      	ldr	r0, [r4, #32]
    9f72:	f7f6 fa23 	bl	3bc <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    9f76:	3003      	adds	r0, #3
    9f78:	00c0      	lsls	r0, r0, #3
    9f7a:	1820      	adds	r0, r4, r0
    9f7c:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9f7e:	61e3      	str	r3, [r4, #28]
}
    9f80:	bd70      	pop	{r4, r5, r6, pc}
    9f82:	46c0      	nop			; (mov r8, r8)
    9f84:	20000ba8 	.word	0x20000ba8

00009f88 <_impl_k_yield>:
{
    9f88:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9f8a:	f3ef 8510 	mrs	r5, PRIMASK
    9f8e:	b672      	cpsid	i
	_move_thread_to_end_of_prio_q(_current);
    9f90:	4c09      	ldr	r4, [pc, #36]	; (9fb8 <_impl_k_yield+0x30>)
    9f92:	68a0      	ldr	r0, [r4, #8]
    9f94:	f7ff ffd2 	bl	9f3c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    9f98:	68a2      	ldr	r2, [r4, #8]
    9f9a:	69e3      	ldr	r3, [r4, #28]
    9f9c:	429a      	cmp	r2, r3
    9f9e:	d103      	bne.n	9fa8 <_impl_k_yield+0x20>
	if (key) {
    9fa0:	2d00      	cmp	r5, #0
    9fa2:	d100      	bne.n	9fa6 <_impl_k_yield+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
    9fa4:	b662      	cpsie	i
}
    9fa6:	bd70      	pop	{r4, r5, r6, pc}
	_time_slice_elapsed = 0;
    9fa8:	2200      	movs	r2, #0
    9faa:	4b04      	ldr	r3, [pc, #16]	; (9fbc <_impl_k_yield+0x34>)
    9fac:	0028      	movs	r0, r5
    9fae:	601a      	str	r2, [r3, #0]
    9fb0:	f7f6 fd08 	bl	9c4 <__swap>
}
    9fb4:	e7f7      	b.n	9fa6 <_impl_k_yield+0x1e>
    9fb6:	46c0      	nop			; (mov r8, r8)
    9fb8:	20000ba8 	.word	0x20000ba8
    9fbc:	20000da4 	.word	0x20000da4

00009fc0 <_impl_k_current_get>:
	return _current;
    9fc0:	4b01      	ldr	r3, [pc, #4]	; (9fc8 <_impl_k_current_get+0x8>)
    9fc2:	6898      	ldr	r0, [r3, #8]
}
    9fc4:	4770      	bx	lr
    9fc6:	46c0      	nop			; (mov r8, r8)
    9fc8:	20000ba8 	.word	0x20000ba8

00009fcc <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9fcc:	4b0f      	ldr	r3, [pc, #60]	; (a00c <_is_thread_time_slicing+0x40>)
{
    9fce:	b082      	sub	sp, #8
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9fd0:	681a      	ldr	r2, [r3, #0]
		return 0;
    9fd2:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9fd4:	429a      	cmp	r2, r3
    9fd6:	dd16      	ble.n	a006 <_is_thread_time_slicing+0x3a>
	return thread == _idle_thread;
    9fd8:	4b0d      	ldr	r3, [pc, #52]	; (a010 <_is_thread_time_slicing+0x44>)
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	9301      	str	r3, [sp, #4]
    9fde:	9a01      	ldr	r2, [sp, #4]
		return 0;
    9fe0:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9fe2:	4290      	cmp	r0, r2
    9fe4:	d00f      	beq.n	a006 <_is_thread_time_slicing+0x3a>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    9fe6:	220a      	movs	r2, #10
    9fe8:	4b0a      	ldr	r3, [pc, #40]	; (a014 <_is_thread_time_slicing+0x48>)
    9fea:	5682      	ldrsb	r2, [r0, r2]
    9fec:	6819      	ldr	r1, [r3, #0]
		return 0;
    9fee:	2300      	movs	r3, #0
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    9ff0:	428a      	cmp	r2, r1
    9ff2:	db08      	blt.n	a006 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
    9ff4:	4b08      	ldr	r3, [pc, #32]	; (a018 <_is_thread_time_slicing+0x4c>)
    9ff6:	3214      	adds	r2, #20
    9ff8:	00d2      	lsls	r2, r2, #3
    9ffa:	189a      	adds	r2, r3, r2
    9ffc:	6890      	ldr	r0, [r2, #8]
    9ffe:	6853      	ldr	r3, [r2, #4]
    a000:	1a1b      	subs	r3, r3, r0
    a002:	1e58      	subs	r0, r3, #1
    a004:	4183      	sbcs	r3, r0
}
    a006:	0018      	movs	r0, r3
    a008:	b002      	add	sp, #8
    a00a:	4770      	bx	lr
    a00c:	20000ccc 	.word	0x20000ccc
    a010:	0000b1f0 	.word	0x0000b1f0
    a014:	20000cd0 	.word	0x20000cd0
    a018:	20000ba8 	.word	0x20000ba8

0000a01c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    a01c:	2200      	movs	r2, #0
    a01e:	4b01      	ldr	r3, [pc, #4]	; (a024 <_update_time_slice_before_swap+0x8>)
    a020:	601a      	str	r2, [r3, #0]
}
    a022:	4770      	bx	lr
    a024:	20000da4 	.word	0x20000da4

0000a028 <_unpend_first_thread>:
	if (_handling_timeouts) {
    a028:	4b11      	ldr	r3, [pc, #68]	; (a070 <_unpend_first_thread+0x48>)
    a02a:	6802      	ldr	r2, [r0, #0]
    a02c:	681b      	ldr	r3, [r3, #0]
    a02e:	2b00      	cmp	r3, #0
    a030:	d010      	beq.n	a054 <_unpend_first_thread+0x2c>
	return list->head == list;
    a032:	0013      	movs	r3, r2
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a034:	4290      	cmp	r0, r2
    a036:	d100      	bne.n	a03a <_unpend_first_thread+0x12>
    a038:	2300      	movs	r3, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    a03a:	2b00      	cmp	r3, #0
    a03c:	d102      	bne.n	a044 <_unpend_first_thread+0x1c>
    a03e:	2300      	movs	r3, #0
		_unpend_thread(thread);
	}

	return thread;
}
    a040:	0018      	movs	r0, r3
    a042:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    a044:	6a1a      	ldr	r2, [r3, #32]
    a046:	3202      	adds	r2, #2
    a048:	d108      	bne.n	a05c <_unpend_first_thread+0x34>
	return (node == list->tail) ? NULL : node->next;
    a04a:	6842      	ldr	r2, [r0, #4]
    a04c:	4293      	cmp	r3, r2
    a04e:	d0f6      	beq.n	a03e <_unpend_first_thread+0x16>
    a050:	681b      	ldr	r3, [r3, #0]
    a052:	e7f2      	b.n	a03a <_unpend_first_thread+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a054:	4290      	cmp	r0, r2
    a056:	d0f3      	beq.n	a040 <_unpend_first_thread+0x18>
    a058:	1e13      	subs	r3, r2, #0
	if (thread) {
    a05a:	d0f1      	beq.n	a040 <_unpend_first_thread+0x18>
	node->prev->next = node->next;
    a05c:	685a      	ldr	r2, [r3, #4]
    a05e:	6819      	ldr	r1, [r3, #0]
    a060:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a062:	6819      	ldr	r1, [r3, #0]
    a064:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a066:	2102      	movs	r1, #2
    a068:	7a5a      	ldrb	r2, [r3, #9]
    a06a:	438a      	bics	r2, r1
    a06c:	725a      	strb	r2, [r3, #9]
    a06e:	e7e7      	b.n	a040 <_unpend_first_thread+0x18>
    a070:	20000da0 	.word	0x20000da0

0000a074 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    a074:	0003      	movs	r3, r0
    a076:	3310      	adds	r3, #16
	sem->count = initial_count;
    a078:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    a07a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    a07c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    a07e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    a080:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    a082:	6143      	str	r3, [r0, #20]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    a084:	4770      	bx	lr
	...

0000a088 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    a088:	b570      	push	{r4, r5, r6, lr}
    a08a:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a08c:	f3ef 8610 	mrs	r6, PRIMASK
    a090:	b672      	cpsid	i
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    a092:	f7ff ffc9 	bl	a028 <_unpend_first_thread>
    a096:	1e04      	subs	r4, r0, #0
	if (!thread) {
    a098:	d113      	bne.n	a0c2 <_impl_k_sem_give+0x3a>
	sem->count += (sem->count != sem->limit);
    a09a:	68aa      	ldr	r2, [r5, #8]
    a09c:	68eb      	ldr	r3, [r5, #12]
	return _handle_obj_poll_events(&sem->poll_events, state);
    a09e:	0028      	movs	r0, r5
	sem->count += (sem->count != sem->limit);
    a0a0:	1a9b      	subs	r3, r3, r2
    a0a2:	1e59      	subs	r1, r3, #1
    a0a4:	418b      	sbcs	r3, r1
    a0a6:	189b      	adds	r3, r3, r2
    a0a8:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    a0aa:	3010      	adds	r0, #16
    a0ac:	2102      	movs	r1, #2
    a0ae:	f000 fd5f 	bl	ab70 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    a0b2:	2800      	cmp	r0, #0
    a0b4:	d02d      	beq.n	a112 <_impl_k_sem_give+0x8a>
	_update_time_slice_before_swap();
    a0b6:	f7ff ffb1 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    a0ba:	0030      	movs	r0, r6
    a0bc:	f7f6 fc82 	bl	9c4 <__swap>
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    a0c0:	bd70      	pop	{r4, r5, r6, pc}
	return _abort_timeout(&thread->base.timeout);
    a0c2:	0001      	movs	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a0c4:	6a03      	ldr	r3, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    a0c6:	3110      	adds	r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a0c8:	1c5a      	adds	r2, r3, #1
    a0ca:	d00f      	beq.n	a0ec <_impl_k_sem_give+0x64>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a0cc:	4a1a      	ldr	r2, [pc, #104]	; (a138 <_impl_k_sem_give+0xb0>)
    a0ce:	6952      	ldr	r2, [r2, #20]
    a0d0:	4291      	cmp	r1, r2
    a0d2:	d003      	beq.n	a0dc <_impl_k_sem_give+0x54>
	return (node == list->tail) ? NULL : node->next;
    a0d4:	6902      	ldr	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a0d6:	6911      	ldr	r1, [r2, #16]
    a0d8:	18cb      	adds	r3, r1, r3
    a0da:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    a0dc:	6963      	ldr	r3, [r4, #20]
    a0de:	6922      	ldr	r2, [r4, #16]
    a0e0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a0e2:	6922      	ldr	r2, [r4, #16]
    a0e4:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a0e6:	2301      	movs	r3, #1
    a0e8:	425b      	negs	r3, r3
    a0ea:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a0ec:	7a63      	ldrb	r3, [r4, #9]
    a0ee:	2204      	movs	r2, #4
    a0f0:	0019      	movs	r1, r3
    a0f2:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    a0f4:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a0f6:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a0f8:	4213      	tst	r3, r2
    a0fa:	d102      	bne.n	a102 <_impl_k_sem_give+0x7a>
    a0fc:	6a23      	ldr	r3, [r4, #32]
    a0fe:	3301      	adds	r3, #1
    a100:	d00b      	beq.n	a11a <_impl_k_sem_give+0x92>
    a102:	2300      	movs	r3, #0
    a104:	65e3      	str	r3, [r4, #92]	; 0x5c
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    a106:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
    a10a:	2b0d      	cmp	r3, #13
    a10c:	d801      	bhi.n	a112 <_impl_k_sem_give+0x8a>
    a10e:	2b03      	cmp	r3, #3
    a110:	d107      	bne.n	a122 <_impl_k_sem_give+0x9a>
	if (key) {
    a112:	2e00      	cmp	r6, #0
    a114:	d1d4      	bne.n	a0c0 <_impl_k_sem_give+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    a116:	b662      	cpsie	i
    a118:	e7d2      	b.n	a0c0 <_impl_k_sem_give+0x38>
		_add_thread_to_ready_q(thread);
    a11a:	0020      	movs	r0, r4
    a11c:	f7ff fdde 	bl	9cdc <_add_thread_to_ready_q>
    a120:	e7ef      	b.n	a102 <_impl_k_sem_give+0x7a>
	return _is_preempt(_current) && __must_switch_threads();
    a122:	4b05      	ldr	r3, [pc, #20]	; (a138 <_impl_k_sem_give+0xb0>)
    a124:	689b      	ldr	r3, [r3, #8]
    a126:	895b      	ldrh	r3, [r3, #10]
    a128:	2b7f      	cmp	r3, #127	; 0x7f
    a12a:	d8f2      	bhi.n	a112 <_impl_k_sem_give+0x8a>
    a12c:	f7ff fecc 	bl	9ec8 <__must_switch_threads>
		return handle_poll_events(sem);
    a130:	1e43      	subs	r3, r0, #1
    a132:	4198      	sbcs	r0, r3
    a134:	e7bd      	b.n	a0b2 <_impl_k_sem_give+0x2a>
    a136:	46c0      	nop			; (mov r8, r8)
    a138:	20000ba8 	.word	0x20000ba8

0000a13c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    a13c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    a13e:	f3ef 8410 	mrs	r4, PRIMASK
    a142:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    a144:	6883      	ldr	r3, [r0, #8]
    a146:	2b00      	cmp	r3, #0
    a148:	d006      	beq.n	a158 <_impl_k_sem_take+0x1c>
		sem->count--;
    a14a:	3b01      	subs	r3, #1
    a14c:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
    a14e:	2000      	movs	r0, #0
	if (key) {
    a150:	4284      	cmp	r4, r0
    a152:	d100      	bne.n	a156 <_impl_k_sem_take+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    a154:	b662      	cpsie	i
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    a156:	bd10      	pop	{r4, pc}
	if (timeout == K_NO_WAIT) {
    a158:	2900      	cmp	r1, #0
    a15a:	d105      	bne.n	a168 <_impl_k_sem_take+0x2c>
	if (key) {
    a15c:	2c00      	cmp	r4, #0
    a15e:	d100      	bne.n	a162 <_impl_k_sem_take+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    a160:	b662      	cpsie	i
		return -EBUSY;
    a162:	2010      	movs	r0, #16
    a164:	4240      	negs	r0, r0
    a166:	e7f6      	b.n	a156 <_impl_k_sem_take+0x1a>
	_pend_current_thread(&sem->wait_q, timeout);
    a168:	f7ff fe9e 	bl	9ea8 <_pend_current_thread>
	_update_time_slice_before_swap();
    a16c:	f7ff ff56 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    a170:	0020      	movs	r0, r4
    a172:	f7f6 fc27 	bl	9c4 <__swap>
	return _Swap(key);
    a176:	e7ee      	b.n	a156 <_impl_k_sem_take+0x1a>

0000a178 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    a178:	4b02      	ldr	r3, [pc, #8]	; (a184 <_impl_k_uptime_get_32+0xc>)
    a17a:	6818      	ldr	r0, [r3, #0]
    a17c:	6859      	ldr	r1, [r3, #4]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    a17e:	0080      	lsls	r0, r0, #2
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    a180:	4770      	bx	lr
    a182:	46c0      	nop			; (mov r8, r8)
    a184:	20000da8 	.word	0x20000da8

0000a188 <_tick_get>:
	__asm__ volatile("mrs %0, PRIMASK;"
    a188:	f3ef 8310 	mrs	r3, PRIMASK
    a18c:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    a18e:	4a03      	ldr	r2, [pc, #12]	; (a19c <_tick_get+0x14>)
    a190:	6810      	ldr	r0, [r2, #0]
    a192:	6851      	ldr	r1, [r2, #4]
	if (key) {
    a194:	2b00      	cmp	r3, #0
    a196:	d100      	bne.n	a19a <_tick_get+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a198:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    a19a:	4770      	bx	lr
    a19c:	20000da8 	.word	0x20000da8

0000a1a0 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    a1a0:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    a1a2:	f7ff fff1 	bl	a188 <_tick_get>
    a1a6:	0f83      	lsrs	r3, r0, #30
    a1a8:	0089      	lsls	r1, r1, #2
    a1aa:	4319      	orrs	r1, r3
    a1ac:	0080      	lsls	r0, r0, #2
}
    a1ae:	bd10      	pop	{r4, pc}

0000a1b0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1b2:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
    a1b4:	f3ef 8410 	mrs	r4, PRIMASK
    a1b8:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    a1ba:	4960      	ldr	r1, [pc, #384]	; (a33c <_nano_sys_clock_tick_announce+0x18c>)
    a1bc:	17c3      	asrs	r3, r0, #31
    a1be:	9301      	str	r3, [sp, #4]
    a1c0:	9000      	str	r0, [sp, #0]
    a1c2:	680a      	ldr	r2, [r1, #0]
    a1c4:	684b      	ldr	r3, [r1, #4]
    a1c6:	9d00      	ldr	r5, [sp, #0]
    a1c8:	9e01      	ldr	r6, [sp, #4]
    a1ca:	1952      	adds	r2, r2, r5
    a1cc:	4173      	adcs	r3, r6
    a1ce:	600a      	str	r2, [r1, #0]
    a1d0:	604b      	str	r3, [r1, #4]
	if (key) {
    a1d2:	2c00      	cmp	r4, #0
    a1d4:	d100      	bne.n	a1d8 <_nano_sys_clock_tick_announce+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    a1d6:	b662      	cpsie	i
	list->head = (sys_dnode_t *)list;
    a1d8:	aa04      	add	r2, sp, #16
    a1da:	9204      	str	r2, [sp, #16]
	list->tail = (sys_dnode_t *)list;
    a1dc:	6052      	str	r2, [r2, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    a1de:	f3ef 8510 	mrs	r5, PRIMASK
    a1e2:	b672      	cpsid	i
	return list->head == list;
    a1e4:	4c56      	ldr	r4, [pc, #344]	; (a340 <_nano_sys_clock_tick_announce+0x190>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a1e6:	4e57      	ldr	r6, [pc, #348]	; (a344 <_nano_sys_clock_tick_announce+0x194>)
	return list->head == list;
    a1e8:	6923      	ldr	r3, [r4, #16]
    a1ea:	0029      	movs	r1, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a1ec:	42b3      	cmp	r3, r6
    a1ee:	d001      	beq.n	a1f4 <_nano_sys_clock_tick_announce+0x44>
	if (!next) {
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d11f      	bne.n	a234 <_nano_sys_clock_tick_announce+0x84>
	if (key) {
    a1f4:	2d00      	cmp	r5, #0
    a1f6:	d100      	bne.n	a1fa <_nano_sys_clock_tick_announce+0x4a>
	__asm__ volatile("cpsie i" : : : "memory");
    a1f8:	b662      	cpsie	i
	if (!_is_thread_time_slicing(_current)) {
    a1fa:	4c51      	ldr	r4, [pc, #324]	; (a340 <_nano_sys_clock_tick_announce+0x190>)
    a1fc:	68a0      	ldr	r0, [r4, #8]
    a1fe:	f7ff fee5 	bl	9fcc <_is_thread_time_slicing>
    a202:	2800      	cmp	r0, #0
    a204:	d014      	beq.n	a230 <_nano_sys_clock_tick_announce+0x80>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a206:	4a50      	ldr	r2, [pc, #320]	; (a348 <_nano_sys_clock_tick_announce+0x198>)
    a208:	9b00      	ldr	r3, [sp, #0]
    a20a:	6811      	ldr	r1, [r2, #0]
    a20c:	009b      	lsls	r3, r3, #2
    a20e:	18cb      	adds	r3, r1, r3
	if (_time_slice_elapsed >= _time_slice_duration) {
    a210:	494e      	ldr	r1, [pc, #312]	; (a34c <_nano_sys_clock_tick_announce+0x19c>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a212:	6013      	str	r3, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    a214:	6809      	ldr	r1, [r1, #0]
    a216:	428b      	cmp	r3, r1
    a218:	db0a      	blt.n	a230 <_nano_sys_clock_tick_announce+0x80>
		_time_slice_elapsed = 0;
    a21a:	2300      	movs	r3, #0
    a21c:	6013      	str	r3, [r2, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    a21e:	f3ef 8510 	mrs	r5, PRIMASK
    a222:	b672      	cpsid	i
		_move_thread_to_end_of_prio_q(_current);
    a224:	68a0      	ldr	r0, [r4, #8]
    a226:	f7ff fe89 	bl	9f3c <_move_thread_to_end_of_prio_q>
	if (key) {
    a22a:	2d00      	cmp	r5, #0
    a22c:	d100      	bne.n	a230 <_nano_sys_clock_tick_announce+0x80>
	__asm__ volatile("cpsie i" : : : "memory");
    a22e:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    a230:	b007      	add	sp, #28
    a232:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_handling_timeouts = 1;
    a234:	2601      	movs	r6, #1
    a236:	4d46      	ldr	r5, [pc, #280]	; (a350 <_nano_sys_clock_tick_announce+0x1a0>)
			timeout->delta_ticks_from_prev = 0;
    a238:	2700      	movs	r7, #0
	_handling_timeouts = 1;
    a23a:	602e      	str	r6, [r5, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a23c:	2502      	movs	r5, #2
    a23e:	426d      	negs	r5, r5
    a240:	46ac      	mov	ip, r5
	return (node == list->tail) ? NULL : node->next;
    a242:	9403      	str	r4, [sp, #12]
		s32_t tmp = timeout->delta_ticks_from_prev;
    a244:	691d      	ldr	r5, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    a246:	4285      	cmp	r5, r0
    a248:	da20      	bge.n	a28c <_nano_sys_clock_tick_announce+0xdc>
			timeout->delta_ticks_from_prev = 0;
    a24a:	611f      	str	r7, [r3, #16]
    a24c:	9c03      	ldr	r4, [sp, #12]
		ticks -= tmp;
    a24e:	1b40      	subs	r0, r0, r5
    a250:	6966      	ldr	r6, [r4, #20]
    a252:	2500      	movs	r5, #0
    a254:	429e      	cmp	r6, r3
    a256:	d000      	beq.n	a25a <_nano_sys_clock_tick_announce+0xaa>
    a258:	681d      	ldr	r5, [r3, #0]
		if (timeout->delta_ticks_from_prev == 0) {
    a25a:	691e      	ldr	r6, [r3, #16]
    a25c:	2e00      	cmp	r6, #0
    a25e:	d118      	bne.n	a292 <_nano_sys_clock_tick_announce+0xe2>
	node->prev->next = node->next;
    a260:	681c      	ldr	r4, [r3, #0]
    a262:	685e      	ldr	r6, [r3, #4]
    a264:	6034      	str	r4, [r6, #0]
	node->next->prev = node->prev;
    a266:	681c      	ldr	r4, [r3, #0]
    a268:	6066      	str	r6, [r4, #4]
	node->next = list->head;
    a26a:	6814      	ldr	r4, [r2, #0]
	node->prev = list;
    a26c:	605a      	str	r2, [r3, #4]
	node->next = list->head;
    a26e:	601c      	str	r4, [r3, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a270:	4664      	mov	r4, ip
	list->head->prev = node;
    a272:	6816      	ldr	r6, [r2, #0]
	list->head = node;
    a274:	6013      	str	r3, [r2, #0]
	list->head->prev = node;
    a276:	6073      	str	r3, [r6, #4]
    a278:	611c      	str	r4, [r3, #16]
	if (key) {
    a27a:	2900      	cmp	r1, #0
    a27c:	d100      	bne.n	a280 <_nano_sys_clock_tick_announce+0xd0>
	__asm__ volatile("cpsie i" : : : "memory");
    a27e:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    a280:	f3ef 8110 	mrs	r1, PRIMASK
    a284:	b672      	cpsid	i
    a286:	1e2b      	subs	r3, r5, #0
	while (next) {
    a288:	d1dc      	bne.n	a244 <_nano_sys_clock_tick_announce+0x94>
    a28a:	e004      	b.n	a296 <_nano_sys_clock_tick_announce+0xe6>
			timeout->delta_ticks_from_prev -= ticks;
    a28c:	1a2e      	subs	r6, r5, r0
    a28e:	611e      	str	r6, [r3, #16]
    a290:	e7dc      	b.n	a24c <_nano_sys_clock_tick_announce+0x9c>
		} else if (ticks <= 0) {
    a292:	2800      	cmp	r0, #0
    a294:	dcf1      	bgt.n	a27a <_nano_sys_clock_tick_announce+0xca>
	if (key) {
    a296:	2900      	cmp	r1, #0
    a298:	d100      	bne.n	a29c <_nano_sys_clock_tick_announce+0xec>
	__asm__ volatile("cpsie i" : : : "memory");
    a29a:	b662      	cpsie	i
	return list->head == list;
    a29c:	9804      	ldr	r0, [sp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a29e:	4290      	cmp	r0, r2
    a2a0:	d103      	bne.n	a2aa <_nano_sys_clock_tick_announce+0xfa>
	_handling_timeouts = 0;
    a2a2:	2200      	movs	r2, #0
    a2a4:	4b2a      	ldr	r3, [pc, #168]	; (a350 <_nano_sys_clock_tick_announce+0x1a0>)
    a2a6:	601a      	str	r2, [r3, #0]
    a2a8:	e7a7      	b.n	a1fa <_nano_sys_clock_tick_announce+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a2aa:	2800      	cmp	r0, #0
    a2ac:	d0f9      	beq.n	a2a2 <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    a2ae:	9b05      	ldr	r3, [sp, #20]
    a2b0:	2400      	movs	r4, #0
    a2b2:	4298      	cmp	r0, r3
    a2b4:	d000      	beq.n	a2b8 <_nano_sys_clock_tick_announce+0x108>
    a2b6:	6804      	ldr	r4, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a2b8:	2601      	movs	r6, #1
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a2ba:	2704      	movs	r7, #4
    a2bc:	4276      	negs	r6, r6
	node->prev->next = node->next;
    a2be:	6843      	ldr	r3, [r0, #4]
    a2c0:	6802      	ldr	r2, [r0, #0]
    a2c2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a2c4:	6802      	ldr	r2, [r0, #0]
    a2c6:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    a2c8:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
    a2ca:	f3ef 8510 	mrs	r5, PRIMASK
    a2ce:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    a2d0:	6106      	str	r6, [r0, #16]
	if (thread) {
    a2d2:	2b00      	cmp	r3, #0
    a2d4:	d021      	beq.n	a31a <_nano_sys_clock_tick_announce+0x16a>
	if (timeout_obj->wait_q) {
    a2d6:	68c2      	ldr	r2, [r0, #12]
    a2d8:	2a00      	cmp	r2, #0
    a2da:	d00a      	beq.n	a2f2 <_nano_sys_clock_tick_announce+0x142>
	node->prev->next = node->next;
    a2dc:	685a      	ldr	r2, [r3, #4]
    a2de:	6819      	ldr	r1, [r3, #0]
    a2e0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a2e2:	6819      	ldr	r1, [r3, #0]
    a2e4:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a2e6:	2102      	movs	r1, #2
    a2e8:	7a5a      	ldrb	r2, [r3, #9]
    a2ea:	438a      	bics	r2, r1
    a2ec:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    a2ee:	2200      	movs	r2, #0
    a2f0:	61da      	str	r2, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a2f2:	7a5a      	ldrb	r2, [r3, #9]
    a2f4:	0011      	movs	r1, r2
    a2f6:	43b9      	bics	r1, r7
    a2f8:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a2fa:	211b      	movs	r1, #27
    a2fc:	420a      	tst	r2, r1
    a2fe:	d102      	bne.n	a306 <_nano_sys_clock_tick_announce+0x156>
    a300:	6a1a      	ldr	r2, [r3, #32]
    a302:	3201      	adds	r2, #1
    a304:	d015      	beq.n	a332 <_nano_sys_clock_tick_announce+0x182>
	if (key) {
    a306:	2d00      	cmp	r5, #0
    a308:	d100      	bne.n	a30c <_nano_sys_clock_tick_announce+0x15c>
	__asm__ volatile("cpsie i" : : : "memory");
    a30a:	b662      	cpsie	i
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a30c:	2c00      	cmp	r4, #0
    a30e:	d0c8      	beq.n	a2a2 <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    a310:	9b05      	ldr	r3, [sp, #20]
    a312:	42a3      	cmp	r3, r4
    a314:	d109      	bne.n	a32a <_nano_sys_clock_tick_announce+0x17a>
    a316:	2300      	movs	r3, #0
    a318:	e008      	b.n	a32c <_nano_sys_clock_tick_announce+0x17c>
	if (key) {
    a31a:	2d00      	cmp	r5, #0
    a31c:	d100      	bne.n	a320 <_nano_sys_clock_tick_announce+0x170>
	__asm__ volatile("cpsie i" : : : "memory");
    a31e:	b662      	cpsie	i
		if (timeout->func) {
    a320:	6943      	ldr	r3, [r0, #20]
    a322:	2b00      	cmp	r3, #0
    a324:	d0f2      	beq.n	a30c <_nano_sys_clock_tick_announce+0x15c>
			timeout->func(timeout);
    a326:	4798      	blx	r3
    a328:	e7f0      	b.n	a30c <_nano_sys_clock_tick_announce+0x15c>
    a32a:	6823      	ldr	r3, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a32c:	0020      	movs	r0, r4
    a32e:	001c      	movs	r4, r3
    a330:	e7c5      	b.n	a2be <_nano_sys_clock_tick_announce+0x10e>
		_add_thread_to_ready_q(thread);
    a332:	0018      	movs	r0, r3
    a334:	f7ff fcd2 	bl	9cdc <_add_thread_to_ready_q>
    a338:	e7e5      	b.n	a306 <_nano_sys_clock_tick_announce+0x156>
    a33a:	46c0      	nop			; (mov r8, r8)
    a33c:	20000da8 	.word	0x20000da8
    a340:	20000ba8 	.word	0x20000ba8
    a344:	20000bb8 	.word	0x20000bb8
    a348:	20000da4 	.word	0x20000da4
    a34c:	20000ccc 	.word	0x20000ccc
    a350:	20000da0 	.word	0x20000da0

0000a354 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    a354:	2301      	movs	r3, #1
    a356:	2280      	movs	r2, #128	; 0x80
{
    a358:	b510      	push	{r4, lr}
	k_work_q_start(&k_sys_work_q,
    a35a:	4804      	ldr	r0, [pc, #16]	; (a36c <k_sys_work_q_init+0x18>)
    a35c:	425b      	negs	r3, r3
    a35e:	00d2      	lsls	r2, r2, #3
    a360:	4903      	ldr	r1, [pc, #12]	; (a370 <k_sys_work_q_init+0x1c>)
    a362:	f000 f967 	bl	a634 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    a366:	2000      	movs	r0, #0
    a368:	bd10      	pop	{r4, pc}
    a36a:	46c0      	nop			; (mov r8, r8)
    a36c:	20000db0 	.word	0x20000db0
    a370:	20001d58 	.word	0x20001d58

0000a374 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    a374:	7a42      	ldrb	r2, [r0, #9]
    a376:	2300      	movs	r3, #0
    a378:	06d2      	lsls	r2, r2, #27
    a37a:	d104      	bne.n	a386 <_is_thread_ready+0x12>
    a37c:	6a03      	ldr	r3, [r0, #32]
    a37e:	3301      	adds	r3, #1
    a380:	4258      	negs	r0, r3
    a382:	4143      	adcs	r3, r0
    a384:	b2db      	uxtb	r3, r3
}
    a386:	0018      	movs	r0, r3
    a388:	4770      	bx	lr
	...

0000a38c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a38c:	6902      	ldr	r2, [r0, #16]
{
    a38e:	0003      	movs	r3, r0
		return _INACTIVE;
    a390:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a392:	1c51      	adds	r1, r2, #1
    a394:	d010      	beq.n	a3b8 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a396:	4909      	ldr	r1, [pc, #36]	; (a3bc <_abort_timeout+0x30>)
    a398:	6949      	ldr	r1, [r1, #20]
    a39a:	428b      	cmp	r3, r1
    a39c:	d003      	beq.n	a3a6 <_abort_timeout+0x1a>
    a39e:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a3a0:	6908      	ldr	r0, [r1, #16]
    a3a2:	1882      	adds	r2, r0, r2
    a3a4:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    a3a6:	685a      	ldr	r2, [r3, #4]
    a3a8:	6819      	ldr	r1, [r3, #0]
	return 0;
    a3aa:	2000      	movs	r0, #0
    a3ac:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a3ae:	6819      	ldr	r1, [r3, #0]
    a3b0:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a3b2:	2201      	movs	r2, #1
    a3b4:	4252      	negs	r2, r2
    a3b6:	611a      	str	r2, [r3, #16]
}
    a3b8:	4770      	bx	lr
    a3ba:	46c0      	nop			; (mov r8, r8)
    a3bc:	20000ba8 	.word	0x20000ba8

0000a3c0 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    a3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    a3c2:	f3ef 8310 	mrs	r3, PRIMASK
    a3c6:	b672      	cpsid	i
    a3c8:	9301      	str	r3, [sp, #4]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a3ca:	2300      	movs	r3, #0
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a3cc:	0004      	movs	r4, r0
	return list->head == list;
    a3ce:	4a17      	ldr	r2, [pc, #92]	; (a42c <schedule_new_thread.part.13+0x6c>)
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    a3d0:	3103      	adds	r1, #3
    a3d2:	0889      	lsrs	r1, r1, #2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a3d4:	61c3      	str	r3, [r0, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3d6:	4e16      	ldr	r6, [pc, #88]	; (a430 <schedule_new_thread.part.13+0x70>)
	return list->head == list;
    a3d8:	6913      	ldr	r3, [r2, #16]
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    a3da:	3101      	adds	r1, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a3dc:	3410      	adds	r4, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a3de:	6201      	str	r1, [r0, #32]
	timeout->thread = thread;
    a3e0:	6180      	str	r0, [r0, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3e2:	42b3      	cmp	r3, r6
    a3e4:	d10a      	bne.n	a3fc <schedule_new_thread.part.13+0x3c>
	node->next = list;
    a3e6:	6106      	str	r6, [r0, #16]
	node->prev = list->tail;
    a3e8:	6953      	ldr	r3, [r2, #20]
    a3ea:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    a3ec:	6953      	ldr	r3, [r2, #20]
    a3ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a3f0:	6154      	str	r4, [r2, #20]
	if (key) {
    a3f2:	9b01      	ldr	r3, [sp, #4]
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d100      	bne.n	a3fa <schedule_new_thread.part.13+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    a3f8:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a3fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a3fc:	2b00      	cmp	r3, #0
    a3fe:	d0f2      	beq.n	a3e6 <schedule_new_thread.part.13+0x26>
    a400:	6957      	ldr	r7, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    a402:	6a01      	ldr	r1, [r0, #32]
    a404:	691d      	ldr	r5, [r3, #16]
    a406:	42a9      	cmp	r1, r5
    a408:	dc08      	bgt.n	a41c <schedule_new_thread.part.13+0x5c>
		node->prev = insert_point->prev;
    a40a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a40c:	1a69      	subs	r1, r5, r1
    a40e:	6119      	str	r1, [r3, #16]
    a410:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    a412:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    a414:	685a      	ldr	r2, [r3, #4]
    a416:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    a418:	605c      	str	r4, [r3, #4]
    a41a:	e7ea      	b.n	a3f2 <schedule_new_thread.part.13+0x32>
		*delta -= in_q->delta_ticks_from_prev;
    a41c:	1b49      	subs	r1, r1, r5
    a41e:	6201      	str	r1, [r0, #32]
	return (node == list->tail) ? NULL : node->next;
    a420:	42bb      	cmp	r3, r7
    a422:	d0e0      	beq.n	a3e6 <schedule_new_thread.part.13+0x26>
    a424:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a426:	2b00      	cmp	r3, #0
    a428:	d1eb      	bne.n	a402 <schedule_new_thread.part.13+0x42>
    a42a:	e7dc      	b.n	a3e6 <schedule_new_thread.part.13+0x26>
    a42c:	20000ba8 	.word	0x20000ba8
    a430:	20000bb8 	.word	0x20000bb8

0000a434 <k_is_in_isr>:
    a434:	f3ef 8305 	mrs	r3, IPSR
    a438:	2001      	movs	r0, #1
    a43a:	2b0d      	cmp	r3, #13
    a43c:	d803      	bhi.n	a446 <k_is_in_isr+0x12>
    a43e:	3b03      	subs	r3, #3
    a440:	4258      	negs	r0, r3
    a442:	4158      	adcs	r0, r3
    a444:	b2c0      	uxtb	r0, r0
}
    a446:	4770      	bx	lr

0000a448 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    a448:	4b02      	ldr	r3, [pc, #8]	; (a454 <_is_thread_essential+0xc>)
    a44a:	689b      	ldr	r3, [r3, #8]
    a44c:	7a18      	ldrb	r0, [r3, #8]
    a44e:	2301      	movs	r3, #1
    a450:	4018      	ands	r0, r3
}
    a452:	4770      	bx	lr
    a454:	20000ba8 	.word	0x20000ba8

0000a458 <_thread_entry>:
{
    a458:	b510      	push	{r4, lr}
    a45a:	0004      	movs	r4, r0
    a45c:	0008      	movs	r0, r1
    a45e:	0011      	movs	r1, r2
	entry(p1, p2, p3);
    a460:	001a      	movs	r2, r3
    a462:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    a464:	f7ff fdac 	bl	9fc0 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    a468:	f7f6 fbf6 	bl	c58 <_impl_k_thread_abort>

0000a46c <_impl_k_thread_start>:
{
    a46c:	b570      	push	{r4, r5, r6, lr}
    a46e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a470:	f3ef 8510 	mrs	r5, PRIMASK
    a474:	b672      	cpsid	i
	if (_has_thread_started(thread)) {
    a476:	2204      	movs	r2, #4
    a478:	7a43      	ldrb	r3, [r0, #9]
    a47a:	4213      	tst	r3, r2
    a47c:	d102      	bne.n	a484 <_impl_k_thread_start+0x18>
	if (key) {
    a47e:	2d00      	cmp	r5, #0
    a480:	d018      	beq.n	a4b4 <_impl_k_thread_start+0x48>
}
    a482:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a484:	4393      	bics	r3, r2
    a486:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    a488:	f7ff ff74 	bl	a374 <_is_thread_ready>
    a48c:	2800      	cmp	r0, #0
    a48e:	d0f6      	beq.n	a47e <_impl_k_thread_start+0x12>
		_add_thread_to_ready_q(thread);
    a490:	0020      	movs	r0, r4
    a492:	f7ff fc23 	bl	9cdc <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    a496:	4b08      	ldr	r3, [pc, #32]	; (a4b8 <_impl_k_thread_start+0x4c>)
    a498:	689b      	ldr	r3, [r3, #8]
    a49a:	895b      	ldrh	r3, [r3, #10]
    a49c:	2b7f      	cmp	r3, #127	; 0x7f
    a49e:	d8ee      	bhi.n	a47e <_impl_k_thread_start+0x12>
    a4a0:	f7ff fd12 	bl	9ec8 <__must_switch_threads>
    a4a4:	2800      	cmp	r0, #0
    a4a6:	d0ea      	beq.n	a47e <_impl_k_thread_start+0x12>
	_update_time_slice_before_swap();
    a4a8:	f7ff fdb8 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    a4ac:	0028      	movs	r0, r5
    a4ae:	f7f6 fa89 	bl	9c4 <__swap>
    a4b2:	e7e6      	b.n	a482 <_impl_k_thread_start+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    a4b4:	b662      	cpsie	i
    a4b6:	e7e4      	b.n	a482 <_impl_k_thread_start+0x16>
    a4b8:	20000ba8 	.word	0x20000ba8

0000a4bc <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    a4bc:	b510      	push	{r4, lr}
    a4be:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a4c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a4c2:	9404      	str	r4, [sp, #16]
    a4c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a4c6:	9403      	str	r4, [sp, #12]
    a4c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a4ca:	9402      	str	r4, [sp, #8]
    a4cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a4ce:	9401      	str	r4, [sp, #4]
    a4d0:	9c08      	ldr	r4, [sp, #32]
    a4d2:	9400      	str	r4, [sp, #0]
    a4d4:	f7f6 fb28 	bl	b28 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    a4d8:	b006      	add	sp, #24
    a4da:	bd10      	pop	{r4, pc}

0000a4dc <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    a4dc:	b530      	push	{r4, r5, lr}
    a4de:	0004      	movs	r4, r0
    a4e0:	b087      	sub	sp, #28
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a4e2:	980e      	ldr	r0, [sp, #56]	; 0x38
{
    a4e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a4e6:	9004      	str	r0, [sp, #16]
    a4e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    a4ea:	9003      	str	r0, [sp, #12]
    a4ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    a4ee:	9002      	str	r0, [sp, #8]
    a4f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a4f2:	9001      	str	r0, [sp, #4]
    a4f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    a4f6:	9000      	str	r0, [sp, #0]
    a4f8:	0020      	movs	r0, r4
    a4fa:	f7f6 fb15 	bl	b28 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    a4fe:	1c6b      	adds	r3, r5, #1
    a500:	d004      	beq.n	a50c <_impl_k_thread_create+0x30>
	if (delay == 0) {
    a502:	2d00      	cmp	r5, #0
    a504:	d105      	bne.n	a512 <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    a506:	0020      	movs	r0, r4
    a508:	f7ff ffb0 	bl	a46c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    a50c:	0020      	movs	r0, r4
    a50e:	b007      	add	sp, #28
    a510:	bd30      	pop	{r4, r5, pc}
    a512:	0029      	movs	r1, r5
    a514:	0020      	movs	r0, r4
    a516:	f7ff ff53 	bl	a3c0 <schedule_new_thread.part.13>
    a51a:	e7f7      	b.n	a50c <_impl_k_thread_create+0x30>

0000a51c <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    a51c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    a51e:	b510      	push	{r4, lr}
    a520:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
    a522:	2b00      	cmp	r3, #0
    a524:	d000      	beq.n	a528 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    a526:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    a528:	0020      	movs	r0, r4
    a52a:	f7ff ff23 	bl	a374 <_is_thread_ready>
    a52e:	2800      	cmp	r0, #0
    a530:	d007      	beq.n	a542 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    a532:	0020      	movs	r0, r4
    a534:	f7ff fc5a 	bl	9dec <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    a538:	2308      	movs	r3, #8
    a53a:	7a62      	ldrb	r2, [r4, #9]
    a53c:	4313      	orrs	r3, r2
    a53e:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    a540:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    a542:	2202      	movs	r2, #2
    a544:	7a63      	ldrb	r3, [r4, #9]
    a546:	4213      	tst	r3, r2
    a548:	d007      	beq.n	a55a <_k_thread_single_abort+0x3e>
	node->prev->next = node->next;
    a54a:	6863      	ldr	r3, [r4, #4]
    a54c:	6821      	ldr	r1, [r4, #0]
    a54e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    a550:	6821      	ldr	r1, [r4, #0]
    a552:	604b      	str	r3, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a554:	7a63      	ldrb	r3, [r4, #9]
    a556:	4393      	bics	r3, r2
    a558:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    a55a:	6a23      	ldr	r3, [r4, #32]
    a55c:	3301      	adds	r3, #1
    a55e:	d0eb      	beq.n	a538 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    a560:	0020      	movs	r0, r4
    a562:	3010      	adds	r0, #16
    a564:	f7ff ff12 	bl	a38c <_abort_timeout>
    a568:	e7e6      	b.n	a538 <_k_thread_single_abort+0x1c>
	...

0000a56c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    a56c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    a56e:	4c1c      	ldr	r4, [pc, #112]	; (a5e0 <_init_static_threads+0x74>)
{
    a570:	b087      	sub	sp, #28
    a572:	0025      	movs	r5, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    a574:	4e1b      	ldr	r6, [pc, #108]	; (a5e4 <_init_static_threads+0x78>)
    a576:	42b4      	cmp	r4, r6
    a578:	d310      	bcc.n	a59c <_init_static_threads+0x30>
	--_current->base.sched_locked;
    a57a:	4b1b      	ldr	r3, [pc, #108]	; (a5e8 <_init_static_threads+0x7c>)
    a57c:	689a      	ldr	r2, [r3, #8]
    a57e:	7ad3      	ldrb	r3, [r2, #11]
    a580:	3b01      	subs	r3, #1
    a582:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile("mrs %0, PRIMASK;"
    a584:	f3ef 8710 	mrs	r7, PRIMASK
    a588:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    a58a:	42b5      	cmp	r5, r6
    a58c:	d31a      	bcc.n	a5c4 <_init_static_threads+0x58>
	if (key) {
    a58e:	2f00      	cmp	r7, #0
    a590:	d100      	bne.n	a594 <_init_static_threads+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    a592:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    a594:	f7ff fcc4 	bl	9f20 <k_sched_unlock>
}
    a598:	b007      	add	sp, #28
    a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a59c:	6a23      	ldr	r3, [r4, #32]
    a59e:	9304      	str	r3, [sp, #16]
    a5a0:	69e3      	ldr	r3, [r4, #28]
    a5a2:	9303      	str	r3, [sp, #12]
    a5a4:	69a3      	ldr	r3, [r4, #24]
    a5a6:	9302      	str	r3, [sp, #8]
    a5a8:	6963      	ldr	r3, [r4, #20]
    a5aa:	9301      	str	r3, [sp, #4]
    a5ac:	6923      	ldr	r3, [r4, #16]
    a5ae:	9300      	str	r3, [sp, #0]
    a5b0:	68e3      	ldr	r3, [r4, #12]
    a5b2:	68a2      	ldr	r2, [r4, #8]
    a5b4:	6861      	ldr	r1, [r4, #4]
    a5b6:	6820      	ldr	r0, [r4, #0]
    a5b8:	f7f6 fab6 	bl	b28 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a5bc:	6823      	ldr	r3, [r4, #0]
    a5be:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
    a5c0:	342c      	adds	r4, #44	; 0x2c
    a5c2:	e7d7      	b.n	a574 <_init_static_threads+0x8>
		if (thread_data->init_delay != K_FOREVER) {
    a5c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    a5c6:	1c4b      	adds	r3, r1, #1
    a5c8:	d004      	beq.n	a5d4 <_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    a5ca:	6828      	ldr	r0, [r5, #0]
	if (delay == 0) {
    a5cc:	2900      	cmp	r1, #0
    a5ce:	d103      	bne.n	a5d8 <_init_static_threads+0x6c>
    a5d0:	f7ff ff4c 	bl	a46c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a5d4:	352c      	adds	r5, #44	; 0x2c
    a5d6:	e7d8      	b.n	a58a <_init_static_threads+0x1e>
    a5d8:	f7ff fef2 	bl	a3c0 <schedule_new_thread.part.13>
    a5dc:	e7fa      	b.n	a5d4 <_init_static_threads+0x68>
    a5de:	46c0      	nop			; (mov r8, r8)
    a5e0:	200024d0 	.word	0x200024d0
    a5e4:	200024d0 	.word	0x200024d0
    a5e8:	20000ba8 	.word	0x20000ba8

0000a5ec <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    a5ec:	7242      	strb	r2, [r0, #9]
	t->delta_ticks_from_prev = _INACTIVE;
    a5ee:	2201      	movs	r2, #1
	thread_base->user_options = (u8_t)options;
    a5f0:	7203      	strb	r3, [r0, #8]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    a5f2:	2300      	movs	r3, #0
    a5f4:	4252      	negs	r2, r2
	thread_base->prio = priority;
    a5f6:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    a5f8:	72c3      	strb	r3, [r0, #11]
    a5fa:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    a5fc:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    a5fe:	6183      	str	r3, [r0, #24]
	t->func = func;
    a600:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    a602:	4770      	bx	lr

0000a604 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a606:	2602      	movs	r6, #2
    a608:	0005      	movs	r5, r0
    a60a:	4276      	negs	r6, r6

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    a60c:	2101      	movs	r1, #1
    a60e:	0028      	movs	r0, r5
    a610:	4249      	negs	r1, r1
    a612:	f7ff fb1b 	bl	9c4c <k_queue_get>
    a616:	1e04      	subs	r4, r0, #0
		if (!work) {
    a618:	d0f8      	beq.n	a60c <work_q_main+0x8>
			continue;
		}

		handler = work->handler;
    a61a:	6847      	ldr	r7, [r0, #4]
    a61c:	0031      	movs	r1, r6
    a61e:	3008      	adds	r0, #8
    a620:	f000 f937 	bl	a892 <atomic_and>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a624:	07c3      	lsls	r3, r0, #31
    a626:	d501      	bpl.n	a62c <work_q_main+0x28>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a628:	0020      	movs	r0, r4
    a62a:	47b8      	blx	r7
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    a62c:	f7ff fcac 	bl	9f88 <_impl_k_yield>
    a630:	e7ec      	b.n	a60c <work_q_main+0x8>
	...

0000a634 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    a634:	b5f0      	push	{r4, r5, r6, r7, lr}
    a636:	0004      	movs	r4, r0
    a638:	b087      	sub	sp, #28
    a63a:	001f      	movs	r7, r3
    a63c:	000d      	movs	r5, r1
    a63e:	0016      	movs	r6, r2
	k_queue_init(&work_q->queue);
    a640:	f7ff faaa 	bl	9b98 <k_queue_init>

    a644:	2300      	movs	r3, #0
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
    a646:	0020      	movs	r0, r4
    a648:	9305      	str	r3, [sp, #20]
    a64a:	9304      	str	r3, [sp, #16]
    a64c:	9302      	str	r3, [sp, #8]
    a64e:	9301      	str	r3, [sp, #4]
    a650:	9703      	str	r7, [sp, #12]
    a652:	9400      	str	r4, [sp, #0]
    a654:	4b03      	ldr	r3, [pc, #12]	; (a664 <k_work_q_start+0x30>)
    a656:	0032      	movs	r2, r6
    a658:	0029      	movs	r1, r5
    a65a:	3010      	adds	r0, #16
    a65c:	f7ff ff3e 	bl	a4dc <_impl_k_thread_create>
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    a660:	b007      	add	sp, #28
    a662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a664:	0000a605 	.word	0x0000a605

0000a668 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a668:	7a43      	ldrb	r3, [r0, #9]
    a66a:	2204      	movs	r2, #4
    a66c:	0019      	movs	r1, r3
    a66e:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    a670:	221b      	movs	r2, #27
{
    a672:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a674:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a676:	4213      	tst	r3, r2
    a678:	d104      	bne.n	a684 <_ready_thread+0x1c>
    a67a:	6a03      	ldr	r3, [r0, #32]
    a67c:	3301      	adds	r3, #1
    a67e:	d101      	bne.n	a684 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    a680:	f7ff fb2c 	bl	9cdc <_add_thread_to_ready_q>
}
    a684:	bd10      	pop	{r4, pc}

0000a686 <_unpend_thread>:
	node->prev->next = node->next;
    a686:	6843      	ldr	r3, [r0, #4]
    a688:	6802      	ldr	r2, [r0, #0]
    a68a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a68c:	6802      	ldr	r2, [r0, #0]
    a68e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a690:	2202      	movs	r2, #2
    a692:	7a43      	ldrb	r3, [r0, #9]
    a694:	4393      	bics	r3, r2
    a696:	7243      	strb	r3, [r0, #9]
}
    a698:	4770      	bx	lr
	...

0000a69c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a69c:	6902      	ldr	r2, [r0, #16]
{
    a69e:	0003      	movs	r3, r0
		return _INACTIVE;
    a6a0:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a6a2:	1c51      	adds	r1, r2, #1
    a6a4:	d010      	beq.n	a6c8 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a6a6:	4909      	ldr	r1, [pc, #36]	; (a6cc <_abort_timeout+0x30>)
    a6a8:	6949      	ldr	r1, [r1, #20]
    a6aa:	428b      	cmp	r3, r1
    a6ac:	d003      	beq.n	a6b6 <_abort_timeout+0x1a>
	return (node == list->tail) ? NULL : node->next;
    a6ae:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a6b0:	6908      	ldr	r0, [r1, #16]
    a6b2:	1882      	adds	r2, r0, r2
    a6b4:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    a6b6:	685a      	ldr	r2, [r3, #4]
    a6b8:	6819      	ldr	r1, [r3, #0]
	return 0;
    a6ba:	2000      	movs	r0, #0
    a6bc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a6be:	6819      	ldr	r1, [r3, #0]
    a6c0:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a6c2:	2201      	movs	r2, #1
    a6c4:	4252      	negs	r2, r2
    a6c6:	611a      	str	r2, [r3, #16]
}
    a6c8:	4770      	bx	lr
    a6ca:	46c0      	nop			; (mov r8, r8)
    a6cc:	20000ba8 	.word	0x20000ba8

0000a6d0 <_add_timeout.constprop.9>:
	timeout->thread = thread;
    a6d0:	2300      	movs	r3, #0
static inline void _add_timeout(struct k_thread *thread,
    a6d2:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a6d4:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    a6d6:	6083      	str	r3, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a6d8:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    a6da:	429a      	cmp	r2, r3
    a6dc:	d10d      	bne.n	a6fa <_add_timeout.constprop.9+0x2a>
	__asm__ volatile("mrs %0, PRIMASK;"
    a6de:	f3ef 8310 	mrs	r3, PRIMASK
    a6e2:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    a6e4:	2201      	movs	r2, #1
    a6e6:	4252      	negs	r2, r2
    a6e8:	6102      	str	r2, [r0, #16]
	if (key) {
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d100      	bne.n	a6f0 <_add_timeout.constprop.9+0x20>
	__asm__ volatile("cpsie i" : : : "memory");
    a6ee:	b662      	cpsie	i
		if (timeout->func) {
    a6f0:	6943      	ldr	r3, [r0, #20]
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d000      	beq.n	a6f8 <_add_timeout.constprop.9+0x28>
			timeout->func(timeout);
    a6f6:	4798      	blx	r3
}
    a6f8:	bd70      	pop	{r4, r5, r6, pc}
	return list->head == list;
    a6fa:	4a10      	ldr	r2, [pc, #64]	; (a73c <_add_timeout.constprop.9+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6fc:	4d10      	ldr	r5, [pc, #64]	; (a740 <_add_timeout.constprop.9+0x70>)
	return list->head == list;
    a6fe:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a700:	42ab      	cmp	r3, r5
    a702:	d10c      	bne.n	a71e <_add_timeout.constprop.9+0x4e>
	node->next = list;
    a704:	6005      	str	r5, [r0, #0]
	node->prev = list->tail;
    a706:	6953      	ldr	r3, [r2, #20]
    a708:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    a70a:	6953      	ldr	r3, [r2, #20]
    a70c:	6018      	str	r0, [r3, #0]
	list->tail = node;
    a70e:	6150      	str	r0, [r2, #20]
    a710:	e7f2      	b.n	a6f8 <_add_timeout.constprop.9+0x28>
		*delta -= in_q->delta_ticks_from_prev;
    a712:	1b09      	subs	r1, r1, r4
    a714:	6101      	str	r1, [r0, #16]
	return (node == list->tail) ? NULL : node->next;
    a716:	6951      	ldr	r1, [r2, #20]
    a718:	428b      	cmp	r3, r1
    a71a:	d0f3      	beq.n	a704 <_add_timeout.constprop.9+0x34>
    a71c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a71e:	2b00      	cmp	r3, #0
    a720:	d0f0      	beq.n	a704 <_add_timeout.constprop.9+0x34>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a722:	6901      	ldr	r1, [r0, #16]
    a724:	691c      	ldr	r4, [r3, #16]
    a726:	42a1      	cmp	r1, r4
    a728:	dcf3      	bgt.n	a712 <_add_timeout.constprop.9+0x42>
		node->prev = insert_point->prev;
    a72a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a72c:	1a61      	subs	r1, r4, r1
    a72e:	6119      	str	r1, [r3, #16]
    a730:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
    a732:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
    a734:	685a      	ldr	r2, [r3, #4]
    a736:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
    a738:	6058      	str	r0, [r3, #4]
    a73a:	e7dd      	b.n	a6f8 <_add_timeout.constprop.9+0x28>
    a73c:	20000ba8 	.word	0x20000ba8
    a740:	20000bb8 	.word	0x20000bb8

0000a744 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
    a744:	b570      	push	{r4, r5, r6, lr}
    a746:	0005      	movs	r5, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    a748:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    a74a:	0004      	movs	r4, r0
    a74c:	3518      	adds	r5, #24
	if (timer->period > 0) {
    a74e:	2b00      	cmp	r3, #0
    a750:	dd09      	ble.n	a766 <_timer_expiration_handler+0x22>
	__asm__ volatile("mrs %0, PRIMASK;"
    a752:	f3ef 8610 	mrs	r6, PRIMASK
    a756:	b672      	cpsid	i
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    a758:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a75a:	0029      	movs	r1, r5
    a75c:	f7ff ffb8 	bl	a6d0 <_add_timeout.constprop.9>
	if (key) {
    a760:	2e00      	cmp	r6, #0
    a762:	d100      	bne.n	a766 <_timer_expiration_handler+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    a764:	b662      	cpsie	i
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    a766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a768:	3301      	adds	r3, #1
    a76a:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    a76c:	6a23      	ldr	r3, [r4, #32]
    a76e:	2b00      	cmp	r3, #0
    a770:	d001      	beq.n	a776 <_timer_expiration_handler+0x32>
		timer->expiry_fn(timer);
    a772:	0020      	movs	r0, r4
    a774:	4798      	blx	r3
	return list->head == list;
    a776:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a778:	42ac      	cmp	r4, r5
    a77a:	d00f      	beq.n	a79c <_timer_expiration_handler+0x58>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    a77c:	2c00      	cmp	r4, #0
    a77e:	d00d      	beq.n	a79c <_timer_expiration_handler+0x58>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    a780:	0020      	movs	r0, r4
    a782:	f7ff ff80 	bl	a686 <_unpend_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
    a786:	f3ef 8510 	mrs	r5, PRIMASK
    a78a:	b672      	cpsid	i

	key = irq_lock();
	_ready_thread(thread);
    a78c:	0020      	movs	r0, r4
    a78e:	f7ff ff6b 	bl	a668 <_ready_thread>
	if (key) {
    a792:	2d00      	cmp	r5, #0
    a794:	d100      	bne.n	a798 <_timer_expiration_handler+0x54>
	__asm__ volatile("cpsie i" : : : "memory");
    a796:	b662      	cpsie	i
    a798:	2300      	movs	r3, #0
    a79a:	65e3      	str	r3, [r4, #92]	; 0x5c
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
    a79c:	bd70      	pop	{r4, r5, r6, pc}

0000a79e <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    a79e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a7a0:	3203      	adds	r2, #3
    a7a2:	3103      	adds	r1, #3
    a7a4:	0892      	lsrs	r2, r2, #2
    a7a6:	0889      	lsrs	r1, r1, #2
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
    a7a8:	9200      	str	r2, [sp, #0]
{
    a7aa:	0004      	movs	r4, r0
	duration_in_ticks = _ms_to_ticks(duration);
    a7ac:	9101      	str	r1, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    a7ae:	f3ef 8510 	mrs	r5, PRIMASK
    a7b2:	b672      	cpsid	i

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
    a7b4:	6903      	ldr	r3, [r0, #16]
    a7b6:	3301      	adds	r3, #1
    a7b8:	d001      	beq.n	a7be <_impl_k_timer_start+0x20>
		_abort_timeout(&timer->timeout);
    a7ba:	f7ff ff6f 	bl	a69c <_abort_timeout>
	}

	timer->period = period_in_ticks;
    a7be:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0;
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    a7c0:	0021      	movs	r1, r4
	timer->period = period_in_ticks;
    a7c2:	62a3      	str	r3, [r4, #40]	; 0x28
	timer->status = 0;
    a7c4:	2300      	movs	r3, #0
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    a7c6:	9a01      	ldr	r2, [sp, #4]
	timer->status = 0;
    a7c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    a7ca:	3118      	adds	r1, #24
    a7cc:	0020      	movs	r0, r4
    a7ce:	f7ff ff7f 	bl	a6d0 <_add_timeout.constprop.9>
	if (key) {
    a7d2:	2d00      	cmp	r5, #0
    a7d4:	d100      	bne.n	a7d8 <_impl_k_timer_start+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    a7d6:	b662      	cpsie	i
	irq_unlock(key);
}
    a7d8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

0000a7dc <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
    a7dc:	b570      	push	{r4, r5, r6, lr}
    a7de:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a7e0:	f3ef 8510 	mrs	r5, PRIMASK
    a7e4:	b672      	cpsid	i
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
    a7e6:	f7ff ff59 	bl	a69c <_abort_timeout>
	if (key) {
    a7ea:	2d00      	cmp	r5, #0
    a7ec:	d100      	bne.n	a7f0 <_impl_k_timer_stop+0x14>
	__asm__ volatile("cpsie i" : : : "memory");
    a7ee:	b662      	cpsie	i

	irq_unlock(key);

	if (inactive) {
    a7f0:	1c43      	adds	r3, r0, #1
    a7f2:	d01c      	beq.n	a82e <_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn) {
    a7f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	d001      	beq.n	a7fe <_impl_k_timer_stop+0x22>
		timer->stop_fn(timer);
    a7fa:	0020      	movs	r0, r4
    a7fc:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
    a7fe:	f3ef 8510 	mrs	r5, PRIMASK
    a802:	b672      	cpsid	i
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
    a804:	0023      	movs	r3, r4
	if (_handling_timeouts) {
    a806:	4a16      	ldr	r2, [pc, #88]	; (a860 <_impl_k_timer_stop+0x84>)
    a808:	3318      	adds	r3, #24
    a80a:	6812      	ldr	r2, [r2, #0]
    a80c:	69a0      	ldr	r0, [r4, #24]
    a80e:	2a00      	cmp	r2, #0
    a810:	d016      	beq.n	a840 <_impl_k_timer_stop+0x64>
    a812:	4283      	cmp	r3, r0
    a814:	d100      	bne.n	a818 <_impl_k_timer_stop+0x3c>
    a816:	2000      	movs	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    a818:	2800      	cmp	r0, #0
    a81a:	d109      	bne.n	a830 <_impl_k_timer_stop+0x54>
    a81c:	f3ef 8305 	mrs	r3, IPSR
    a820:	2b0d      	cmp	r3, #13
    a822:	d801      	bhi.n	a828 <_impl_k_timer_stop+0x4c>
    a824:	2b03      	cmp	r3, #3
    a826:	d116      	bne.n	a856 <_impl_k_timer_stop+0x7a>
	if (key) {
    a828:	2d00      	cmp	r5, #0
    a82a:	d100      	bne.n	a82e <_impl_k_timer_stop+0x52>
	__asm__ volatile("cpsie i" : : : "memory");
    a82c:	b662      	cpsie	i
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
	}
}
    a82e:	bd70      	pop	{r4, r5, r6, pc}
			if (_is_thread_timeout_expired(thread)) {
    a830:	6a03      	ldr	r3, [r0, #32]
    a832:	3302      	adds	r3, #2
    a834:	d108      	bne.n	a848 <_impl_k_timer_stop+0x6c>
	return (node == list->tail) ? NULL : node->next;
    a836:	69e3      	ldr	r3, [r4, #28]
    a838:	4298      	cmp	r0, r3
    a83a:	d0ef      	beq.n	a81c <_impl_k_timer_stop+0x40>
    a83c:	6800      	ldr	r0, [r0, #0]
    a83e:	e7eb      	b.n	a818 <_impl_k_timer_stop+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a840:	4283      	cmp	r3, r0
    a842:	d0eb      	beq.n	a81c <_impl_k_timer_stop+0x40>
	if (thread) {
    a844:	2800      	cmp	r0, #0
    a846:	d0e9      	beq.n	a81c <_impl_k_timer_stop+0x40>
			if (_is_thread_timeout_expired(thread)) {
    a848:	0004      	movs	r4, r0
		_unpend_thread(thread);
    a84a:	f7ff ff1c 	bl	a686 <_unpend_thread>
		_ready_thread(pending_thread);
    a84e:	0020      	movs	r0, r4
    a850:	f7ff ff0a 	bl	a668 <_ready_thread>
    a854:	e7e2      	b.n	a81c <_impl_k_timer_stop+0x40>
		_reschedule_threads(key);
    a856:	0028      	movs	r0, r5
    a858:	f7ff fb48 	bl	9eec <_reschedule_threads>
    a85c:	e7e7      	b.n	a82e <_impl_k_timer_stop+0x52>
    a85e:	46c0      	nop			; (mov r8, r8)
    a860:	20000da0 	.word	0x20000da0

0000a864 <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
    a864:	6800      	ldr	r0, [r0, #0]
}
    a866:	4770      	bx	lr

0000a868 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    a868:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a86a:	f3ef 8210 	mrs	r2, PRIMASK
    a86e:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    a870:	6800      	ldr	r0, [r0, #0]
	*target = value;
    a872:	6019      	str	r1, [r3, #0]
	if (key) {
    a874:	2a00      	cmp	r2, #0
    a876:	d100      	bne.n	a87a <atomic_set+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a878:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    a87a:	4770      	bx	lr

0000a87c <atomic_or>:
	__asm__ volatile("mrs %0, PRIMASK;"
    a87c:	f3ef 8210 	mrs	r2, PRIMASK
    a880:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    a882:	6803      	ldr	r3, [r0, #0]
	*target |= value;
    a884:	4319      	orrs	r1, r3
    a886:	6001      	str	r1, [r0, #0]
	if (key) {
    a888:	2a00      	cmp	r2, #0
    a88a:	d100      	bne.n	a88e <atomic_or+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a88c:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    a88e:	0018      	movs	r0, r3
    a890:	4770      	bx	lr

0000a892 <atomic_and>:
	__asm__ volatile("mrs %0, PRIMASK;"
    a892:	f3ef 8210 	mrs	r2, PRIMASK
    a896:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    a898:	6803      	ldr	r3, [r0, #0]
	*target &= value;
    a89a:	4019      	ands	r1, r3
    a89c:	6001      	str	r1, [r0, #0]
	if (key) {
    a89e:	2a00      	cmp	r2, #0
    a8a0:	d100      	bne.n	a8a4 <atomic_and+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a8a2:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    a8a4:	0018      	movs	r0, r3
    a8a6:	4770      	bx	lr

0000a8a8 <sys_dlist_remove>:
	node->prev->next = node->next;
    a8a8:	6802      	ldr	r2, [r0, #0]
    a8aa:	6843      	ldr	r3, [r0, #4]
    a8ac:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a8ae:	6802      	ldr	r2, [r0, #0]
    a8b0:	6053      	str	r3, [r2, #4]
}
    a8b2:	4770      	bx	lr

0000a8b4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    a8b4:	b570      	push	{r4, r5, r6, lr}
    a8b6:	2414      	movs	r4, #20
    a8b8:	000d      	movs	r5, r1
    a8ba:	0016      	movs	r6, r2
    a8bc:	434c      	muls	r4, r1
    a8be:	1904      	adds	r4, r0, r4
	for (; last_registered >= 0; last_registered--) {
    a8c0:	2d00      	cmp	r5, #0
    a8c2:	da00      	bge.n	a8c6 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    a8c4:	bd70      	pop	{r4, r5, r6, pc}
	event->poller = NULL;
    a8c6:	2300      	movs	r3, #0
    a8c8:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
    a8ca:	7b63      	ldrb	r3, [r4, #13]
    a8cc:	071b      	lsls	r3, r3, #28
    a8ce:	0f1b      	lsrs	r3, r3, #28
    a8d0:	2b02      	cmp	r3, #2
    a8d2:	d003      	beq.n	a8dc <clear_event_registrations+0x28>
    a8d4:	2b04      	cmp	r3, #4
    a8d6:	d001      	beq.n	a8dc <clear_event_registrations+0x28>
    a8d8:	2b01      	cmp	r3, #1
    a8da:	d102      	bne.n	a8e2 <clear_event_registrations+0x2e>
		sys_dlist_remove(&event->_node);
    a8dc:	0020      	movs	r0, r4
    a8de:	f7ff ffe3 	bl	a8a8 <sys_dlist_remove>
	if (key) {
    a8e2:	2e00      	cmp	r6, #0
    a8e4:	d100      	bne.n	a8e8 <clear_event_registrations+0x34>
	__asm__ volatile("cpsie i" : : : "memory");
    a8e6:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    a8e8:	f3ef 8610 	mrs	r6, PRIMASK
    a8ec:	b672      	cpsid	i
	for (; last_registered >= 0; last_registered--) {
    a8ee:	3d01      	subs	r5, #1
    a8f0:	3c14      	subs	r4, #20
    a8f2:	e7e5      	b.n	a8c0 <clear_event_registrations+0xc>

0000a8f4 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
    a8f4:	2300      	movs	r3, #0
{
    a8f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    a8f8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    a8fa:	6883      	ldr	r3, [r0, #8]
{
    a8fc:	0006      	movs	r6, r0
    a8fe:	9101      	str	r1, [sp, #4]
    a900:	0017      	movs	r7, r2
	if (!event->poller) {
    a902:	2b00      	cmp	r3, #0
    a904:	d039      	beq.n	a97a <_signal_poll_event+0x86>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    a906:	681c      	ldr	r4, [r3, #0]
	thread->base.thread_state &= ~states;
    a908:	2220      	movs	r2, #32
    a90a:	7a63      	ldrb	r3, [r4, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    a90c:	2502      	movs	r5, #2
    a90e:	0019      	movs	r1, r3
    a910:	4391      	bics	r1, r2
    a912:	7261      	strb	r1, [r4, #9]
    a914:	422b      	tst	r3, r5
    a916:	d030      	beq.n	a97a <_signal_poll_event+0x86>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    a918:	6a23      	ldr	r3, [r4, #32]
    a91a:	3302      	adds	r3, #2
    a91c:	d03c      	beq.n	a998 <_signal_poll_event+0xa4>
	sys_dlist_remove(&thread->base.k_q_node);
    a91e:	0020      	movs	r0, r4
    a920:	f7ff ffc2 	bl	a8a8 <sys_dlist_remove>
	return _abort_timeout(&thread->base.timeout);
    a924:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PENDING;
    a926:	7a63      	ldrb	r3, [r4, #9]
    a928:	3010      	adds	r0, #16
    a92a:	43ab      	bics	r3, r5
    a92c:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a92e:	6a23      	ldr	r3, [r4, #32]
    a930:	1c5a      	adds	r2, r3, #1
    a932:	d00c      	beq.n	a94e <_signal_poll_event+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a934:	4a1f      	ldr	r2, [pc, #124]	; (a9b4 <_signal_poll_event+0xc0>)
    a936:	6952      	ldr	r2, [r2, #20]
    a938:	4290      	cmp	r0, r2
    a93a:	d003      	beq.n	a944 <_signal_poll_event+0x50>
	return (node == list->tail) ? NULL : node->next;
    a93c:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a93e:	6911      	ldr	r1, [r2, #16]
    a940:	18cb      	adds	r3, r1, r3
    a942:	6113      	str	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    a944:	f7ff ffb0 	bl	a8a8 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    a948:	2301      	movs	r3, #1
    a94a:	425b      	negs	r3, r3
    a94c:	6223      	str	r3, [r4, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    a94e:	9b01      	ldr	r3, [sp, #4]
    a950:	2b00      	cmp	r3, #0
    a952:	d01e      	beq.n	a992 <_signal_poll_event+0x9e>
    a954:	2300      	movs	r3, #0
	return !(_is_thread_prevented_from_running(thread) ||
    a956:	201f      	movs	r0, #31
    a958:	7a65      	ldrb	r5, [r4, #9]
    a95a:	65e3      	str	r3, [r4, #92]	; 0x5c
    a95c:	4005      	ands	r5, r0
    a95e:	d10c      	bne.n	a97a <_signal_poll_event+0x86>
    a960:	6a23      	ldr	r3, [r4, #32]
    a962:	3301      	adds	r3, #1
    a964:	d109      	bne.n	a97a <_signal_poll_event+0x86>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    a966:	0020      	movs	r0, r4
    a968:	f7ff f9b8 	bl	9cdc <_add_thread_to_ready_q>
    a96c:	f3ef 8305 	mrs	r3, IPSR
    a970:	2b0d      	cmp	r3, #13
    a972:	d801      	bhi.n	a978 <_signal_poll_event+0x84>
    a974:	2b03      	cmp	r3, #3
    a976:	d112      	bne.n	a99e <_signal_poll_event+0xaa>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    a978:	603d      	str	r5, [r7, #0]
	event->state |= state;
    a97a:	7b73      	ldrb	r3, [r6, #13]
    a97c:	9901      	ldr	r1, [sp, #4]
    a97e:	091a      	lsrs	r2, r3, #4
    a980:	4311      	orrs	r1, r2
    a982:	010a      	lsls	r2, r1, #4
    a984:	210f      	movs	r1, #15
	event->poller = NULL;
    a986:	2000      	movs	r0, #0
	event->state |= state;
    a988:	400b      	ands	r3, r1
    a98a:	4313      	orrs	r3, r2
	event->poller = NULL;
    a98c:	60b0      	str	r0, [r6, #8]
	event->state |= state;
    a98e:	7373      	strb	r3, [r6, #13]

ready_event:
	set_event_ready(event, state);
	return 0;
}
    a990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	_set_thread_return_value(thread,
    a992:	2304      	movs	r3, #4
    a994:	425b      	negs	r3, r3
    a996:	e7de      	b.n	a956 <_signal_poll_event+0x62>
		return -EAGAIN;
    a998:	200b      	movs	r0, #11
    a99a:	4240      	negs	r0, r0
    a99c:	e7f8      	b.n	a990 <_signal_poll_event+0x9c>
	return _is_preempt(_current) && __must_switch_threads();
    a99e:	4b05      	ldr	r3, [pc, #20]	; (a9b4 <_signal_poll_event+0xc0>)
    a9a0:	689b      	ldr	r3, [r3, #8]
    a9a2:	895b      	ldrh	r3, [r3, #10]
    a9a4:	2b7f      	cmp	r3, #127	; 0x7f
    a9a6:	d8e7      	bhi.n	a978 <_signal_poll_event+0x84>
    a9a8:	f7ff fa8e 	bl	9ec8 <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    a9ac:	0005      	movs	r5, r0
    a9ae:	1e68      	subs	r0, r5, #1
    a9b0:	4185      	sbcs	r5, r0
    a9b2:	e7e1      	b.n	a978 <_signal_poll_event+0x84>
    a9b4:	20000ba8 	.word	0x20000ba8

0000a9b8 <add_event>:
	return list->head == list;
    a9b8:	6803      	ldr	r3, [r0, #0]
{
    a9ba:	b530      	push	{r4, r5, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    a9bc:	4298      	cmp	r0, r3
    a9be:	d00b      	beq.n	a9d8 <add_event+0x20>
    a9c0:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    a9c2:	2c00      	cmp	r4, #0
    a9c4:	d008      	beq.n	a9d8 <add_event+0x20>
    a9c6:	68a5      	ldr	r5, [r4, #8]
    a9c8:	6812      	ldr	r2, [r2, #0]
    a9ca:	682d      	ldr	r5, [r5, #0]
    a9cc:	7a92      	ldrb	r2, [r2, #10]
    a9ce:	7aad      	ldrb	r5, [r5, #10]
    a9d0:	b252      	sxtb	r2, r2
    a9d2:	b26d      	sxtb	r5, r5
    a9d4:	4295      	cmp	r5, r2
    a9d6:	da18      	bge.n	aa0a <add_event+0x52>
	node->next = list;
    a9d8:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    a9da:	6843      	ldr	r3, [r0, #4]
    a9dc:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    a9de:	6843      	ldr	r3, [r0, #4]
    a9e0:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a9e2:	6041      	str	r1, [r0, #4]
    a9e4:	e00b      	b.n	a9fe <add_event+0x46>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    a9e6:	689d      	ldr	r5, [r3, #8]
    a9e8:	682d      	ldr	r5, [r5, #0]
    a9ea:	7aad      	ldrb	r5, [r5, #10]
    a9ec:	b26d      	sxtb	r5, r5
    a9ee:	4295      	cmp	r5, r2
    a9f0:	dd06      	ble.n	aa00 <add_event+0x48>
		node->prev = insert_point->prev;
    a9f2:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    a9f4:	600b      	str	r3, [r1, #0]
		node->prev = insert_point->prev;
    a9f6:	604a      	str	r2, [r1, #4]
		insert_point->prev->next = node;
    a9f8:	685a      	ldr	r2, [r3, #4]
    a9fa:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a9fc:	6059      	str	r1, [r3, #4]
}
    a9fe:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    aa00:	42a3      	cmp	r3, r4
    aa02:	d004      	beq.n	aa0e <add_event+0x56>
    aa04:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    aa06:	2b00      	cmp	r3, #0
    aa08:	d001      	beq.n	aa0e <add_event+0x56>
    aa0a:	2b00      	cmp	r3, #0
    aa0c:	d1eb      	bne.n	a9e6 <add_event+0x2e>
	node->next = list;
    aa0e:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    aa10:	604c      	str	r4, [r1, #4]
    aa12:	e7e4      	b.n	a9de <add_event+0x26>

0000aa14 <k_poll_event_init>:
{
    aa14:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
    aa16:	2400      	movs	r4, #0
    aa18:	6084      	str	r4, [r0, #8]
	event->type = type;
    aa1a:	340f      	adds	r4, #15
    aa1c:	4021      	ands	r1, r4
    aa1e:	000d      	movs	r5, r1
    aa20:	7b41      	ldrb	r1, [r0, #13]
	event->obj = obj;
    aa22:	6103      	str	r3, [r0, #16]
	event->type = type;
    aa24:	43a1      	bics	r1, r4
	event->state = K_POLL_STATE_NOT_READY;
    aa26:	4329      	orrs	r1, r5
    aa28:	4021      	ands	r1, r4
    aa2a:	7341      	strb	r1, [r0, #13]
	event->mode = mode;
    aa2c:	2101      	movs	r1, #1
    aa2e:	400a      	ands	r2, r1
    aa30:	0014      	movs	r4, r2
    aa32:	7b82      	ldrb	r2, [r0, #14]
    aa34:	438a      	bics	r2, r1
    aa36:	4322      	orrs	r2, r4
    aa38:	7382      	strb	r2, [r0, #14]
	event->unused = 0;
    aa3a:	89c2      	ldrh	r2, [r0, #14]
    aa3c:	400a      	ands	r2, r1
    aa3e:	81c2      	strh	r2, [r0, #14]
}
    aa40:	bd30      	pop	{r4, r5, pc}
	...

0000aa44 <k_poll>:
{
    aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa46:	b089      	sub	sp, #36	; 0x24
    aa48:	0007      	movs	r7, r0
    aa4a:	9102      	str	r1, [sp, #8]
    aa4c:	9201      	str	r2, [sp, #4]
    aa4e:	f3ef 8010 	mrs	r0, PRIMASK
    aa52:	b672      	cpsid	i
	thread->base.thread_state |= states;
    aa54:	2320      	movs	r3, #32
	set_polling_state(_current);
    aa56:	4a45      	ldr	r2, [pc, #276]	; (ab6c <k_poll+0x128>)
    aa58:	6891      	ldr	r1, [r2, #8]
    aa5a:	7a4c      	ldrb	r4, [r1, #9]
    aa5c:	4323      	orrs	r3, r4
    aa5e:	724b      	strb	r3, [r1, #9]
	if (key) {
    aa60:	2800      	cmp	r0, #0
    aa62:	d100      	bne.n	aa66 <k_poll+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    aa64:	b662      	cpsie	i
	int last_registered = -1, rc;
    aa66:	2501      	movs	r5, #1
    aa68:	003c      	movs	r4, r7
	for (int ii = 0; ii < num_events; ii++) {
    aa6a:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current };
    aa6c:	6893      	ldr	r3, [r2, #8]
	int last_registered = -1, rc;
    aa6e:	426d      	negs	r5, r5
	struct _poller poller = { .thread = _current };
    aa70:	9305      	str	r3, [sp, #20]
	for (int ii = 0; ii < num_events; ii++) {
    aa72:	9b02      	ldr	r3, [sp, #8]
    aa74:	429e      	cmp	r6, r3
    aa76:	db14      	blt.n	aaa2 <k_poll+0x5e>
	__asm__ volatile("mrs %0, PRIMASK;"
    aa78:	f3ef 8610 	mrs	r6, PRIMASK
    aa7c:	b672      	cpsid	i
	return _is_thread_polling(_current);
    aa7e:	4b3b      	ldr	r3, [pc, #236]	; (ab6c <k_poll+0x128>)
	if (!is_polling()) {
    aa80:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    aa82:	689a      	ldr	r2, [r3, #8]
    aa84:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    aa86:	001c      	movs	r4, r3
    aa88:	400c      	ands	r4, r1
    aa8a:	d144      	bne.n	ab16 <k_poll+0xd2>
	clear_event_registrations(events, last_registered, key);
    aa8c:	0032      	movs	r2, r6
    aa8e:	0029      	movs	r1, r5
    aa90:	0038      	movs	r0, r7
    aa92:	f7ff ff0f 	bl	a8b4 <clear_event_registrations>
	if (key) {
    aa96:	2e00      	cmp	r6, #0
    aa98:	d100      	bne.n	aa9c <k_poll+0x58>
	__asm__ volatile("cpsie i" : : : "memory");
    aa9a:	b662      	cpsie	i
}
    aa9c:	0020      	movs	r0, r4
    aa9e:	b009      	add	sp, #36	; 0x24
    aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    aaa2:	f3ef 8310 	mrs	r3, PRIMASK
    aaa6:	b672      	cpsid	i
	switch (event->type) {
    aaa8:	7b62      	ldrb	r2, [r4, #13]
    aaaa:	9303      	str	r3, [sp, #12]
    aaac:	0713      	lsls	r3, r2, #28
    aaae:	0f1b      	lsrs	r3, r3, #28
    aab0:	2b02      	cmp	r3, #2
    aab2:	d003      	beq.n	aabc <k_poll+0x78>
    aab4:	2b04      	cmp	r3, #4
    aab6:	d004      	beq.n	aac2 <k_poll+0x7e>
    aab8:	2b01      	cmp	r3, #1
    aaba:	d106      	bne.n	aaca <k_poll+0x86>
		if (event->signal->signaled) {
    aabc:	6921      	ldr	r1, [r4, #16]
    aabe:	6889      	ldr	r1, [r1, #8]
    aac0:	e001      	b.n	aac6 <k_poll+0x82>
		if (!k_queue_is_empty(event->queue)) {
    aac2:	6921      	ldr	r1, [r4, #16]
    aac4:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
    aac6:	2900      	cmp	r1, #0
    aac8:	d140      	bne.n	ab4c <k_poll+0x108>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    aaca:	9a01      	ldr	r2, [sp, #4]
    aacc:	2a00      	cmp	r2, #0
    aace:	d018      	beq.n	ab02 <k_poll+0xbe>
    aad0:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    aad2:	4a26      	ldr	r2, [pc, #152]	; (ab6c <k_poll+0x128>)
		} else if (timeout != K_NO_WAIT && is_polling()) {
    aad4:	6892      	ldr	r2, [r2, #8]
    aad6:	7a52      	ldrb	r2, [r2, #9]
    aad8:	420a      	tst	r2, r1
    aada:	d012      	beq.n	ab02 <k_poll+0xbe>
	switch (event->type) {
    aadc:	2b02      	cmp	r3, #2
    aade:	d007      	beq.n	aaf0 <k_poll+0xac>
    aae0:	2b04      	cmp	r3, #4
    aae2:	d015      	beq.n	ab10 <k_poll+0xcc>
    aae4:	2b01      	cmp	r3, #1
    aae6:	d109      	bne.n	aafc <k_poll+0xb8>
		add_event(&event->signal->poll_events, event, poller);
    aae8:	aa05      	add	r2, sp, #20
    aaea:	0021      	movs	r1, r4
    aaec:	6920      	ldr	r0, [r4, #16]
    aaee:	e003      	b.n	aaf8 <k_poll+0xb4>
		add_event(&event->sem->poll_events, event, poller);
    aaf0:	6920      	ldr	r0, [r4, #16]
    aaf2:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
    aaf4:	0021      	movs	r1, r4
    aaf6:	aa05      	add	r2, sp, #20
		add_event(&event->signal->poll_events, event, poller);
    aaf8:	f7ff ff5e 	bl	a9b8 <add_event>
	event->poller = poller;
    aafc:	ab05      	add	r3, sp, #20
    aafe:	60a3      	str	r3, [r4, #8]
				++last_registered;
    ab00:	3501      	adds	r5, #1
	if (key) {
    ab02:	9b03      	ldr	r3, [sp, #12]
    ab04:	2b00      	cmp	r3, #0
    ab06:	d100      	bne.n	ab0a <k_poll+0xc6>
	__asm__ volatile("cpsie i" : : : "memory");
    ab08:	b662      	cpsie	i
	for (int ii = 0; ii < num_events; ii++) {
    ab0a:	3601      	adds	r6, #1
    ab0c:	3414      	adds	r4, #20
    ab0e:	e7b0      	b.n	aa72 <k_poll+0x2e>
		add_event(&event->queue->poll_events, event, poller);
    ab10:	6920      	ldr	r0, [r4, #16]
    ab12:	3008      	adds	r0, #8
    ab14:	e7ee      	b.n	aaf4 <k_poll+0xb0>
	thread->base.thread_state &= ~states;
    ab16:	438b      	bics	r3, r1
    ab18:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    ab1a:	9b01      	ldr	r3, [sp, #4]
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	d105      	bne.n	ab2c <k_poll+0xe8>
	if (key) {
    ab20:	2e00      	cmp	r6, #0
    ab22:	d100      	bne.n	ab26 <k_poll+0xe2>
	__asm__ volatile("cpsie i" : : : "memory");
    ab24:	b662      	cpsie	i
		return -EAGAIN;
    ab26:	240b      	movs	r4, #11
    ab28:	4264      	negs	r4, r4
    ab2a:	e7b7      	b.n	aa9c <k_poll+0x58>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    ab2c:	a806      	add	r0, sp, #24
	_pend_current_thread(&wait_q, timeout);
    ab2e:	9901      	ldr	r1, [sp, #4]
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    ab30:	9006      	str	r0, [sp, #24]
    ab32:	6040      	str	r0, [r0, #4]
	_pend_current_thread(&wait_q, timeout);
    ab34:	f7ff f9b8 	bl	9ea8 <_pend_current_thread>
	_update_time_slice_before_swap();
    ab38:	f7ff fa70 	bl	a01c <_update_time_slice_before_swap>
	return __swap(key);
    ab3c:	0030      	movs	r0, r6
    ab3e:	f7f5 ff41 	bl	9c4 <__swap>
    ab42:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    ab44:	f3ef 8610 	mrs	r6, PRIMASK
    ab48:	b672      	cpsid	i
    ab4a:	e79f      	b.n	aa8c <k_poll+0x48>
	event->poller = NULL;
    ab4c:	2100      	movs	r1, #0
    ab4e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
    ab50:	0911      	lsrs	r1, r2, #4
    ab52:	430b      	orrs	r3, r1
    ab54:	210f      	movs	r1, #15
    ab56:	011b      	lsls	r3, r3, #4
    ab58:	400a      	ands	r2, r1
    ab5a:	4313      	orrs	r3, r2
    ab5c:	7363      	strb	r3, [r4, #13]
			clear_polling_state(_current);
    ab5e:	4b03      	ldr	r3, [pc, #12]	; (ab6c <k_poll+0x128>)
    ab60:	3111      	adds	r1, #17
    ab62:	689a      	ldr	r2, [r3, #8]
    ab64:	7a53      	ldrb	r3, [r2, #9]
    ab66:	438b      	bics	r3, r1
    ab68:	7253      	strb	r3, [r2, #9]
    ab6a:	e7ca      	b.n	ab02 <k_poll+0xbe>
    ab6c:	20000ba8 	.word	0x20000ba8

0000ab70 <_handle_obj_poll_events>:

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    ab70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return list->head == list;
    ab72:	6804      	ldr	r4, [r0, #0]
    ab74:	000d      	movs	r5, r1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    ab76:	42a0      	cmp	r0, r4
    ab78:	d101      	bne.n	ab7e <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    ab7a:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    ab7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    ab7e:	0020      	movs	r0, r4
    ab80:	f7ff fe92 	bl	a8a8 <sys_dlist_remove>
	if (!poll_event) {
    ab84:	2c00      	cmp	r4, #0
    ab86:	d0f8      	beq.n	ab7a <_handle_obj_poll_events+0xa>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
    ab88:	aa01      	add	r2, sp, #4
    ab8a:	0029      	movs	r1, r5
    ab8c:	0020      	movs	r0, r4
    ab8e:	f7ff feb1 	bl	a8f4 <_signal_poll_event>
	return must_reschedule;
    ab92:	9801      	ldr	r0, [sp, #4]
    ab94:	e7f2      	b.n	ab7c <_handle_obj_poll_events+0xc>

0000ab96 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    ab96:	4770      	bx	lr
