
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
GEN_ABS_SYM_END
       0:	200019d0 	.word	0x200019d0
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
       4:	00000c25 	.word	0x00000c25
}
       8:	00000c59 	.word	0x00000c59
       c:	00000ad9 	.word	0x00000ad9
      10:	00000ad9 	.word	0x00000ad9
      14:	00000ad9 	.word	0x00000ad9
      18:	00000ad9 	.word	0x00000ad9
      1c:	00000ad9 	.word	0x00000ad9
      20:	00000ad9 	.word	0x00000ad9
      24:	00000ad9 	.word	0x00000ad9
      28:	00000ad9 	.word	0x00000ad9
      2c:	000008ed 	.word	0x000008ed
      30:	00000ad9 	.word	0x00000ad9
      34:	00000ad9 	.word	0x00000ad9
      38:	00000891 	.word	0x00000891
      3c:	00000ad9 	.word	0x00000ad9

00000040 <_irq_vector_table>:
      40:	00000bed 0000815b 00000bed 00000bed     ....[...........
      50:	00000bed 00000bed 00000bed 00000bed     ................
      60:	00000bed 00000bed 00000bed 00000bed     ................
      70:	00000bed 00000bed 00000bed 00000bed     ................
      80:	00000bed 00000bed 00000bed 00000bed     ................
      90:	00000bed 00000bed 00000bed 00000bed     ................
      a0:	00000bed 00000bed                       ........

000000a8 <_sw_isr_table>:
      a8:	00000000 000015fd 00000000 00000a4d     ............M...
      b8:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
      c8:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
      d8:	20002464 00001801 00000000 00000a4d     d$. ........M...
      e8:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
      f8:	00000000 00000a4d 00000000 00008119     ....M...........
     108:	00000000 00000a4d 00000000 00008153     ....M.......S...
     118:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
     128:	00000000 00000a4d 00000000 00001d01     ....M...........
     138:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
     148:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
     158:	00000000 00000a4d 00000000 00000a4d     ....M.......M...
     168:	00000000 00008149 00000000 00000a4d     ....I.......M...

00000178 <__gnu_thumb1_case_sqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5609      	ldrsb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uqi>:
     18c:	b402      	push	{r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0049      	lsls	r1, r1, #1
     194:	5c09      	ldrb	r1, [r1, r0]
     196:	0049      	lsls	r1, r1, #1
     198:	448e      	add	lr, r1
     19a:	bc02      	pop	{r1}
     19c:	4770      	bx	lr
     19e:	46c0      	nop			; (mov r8, r8)

000001a0 <__gnu_thumb1_case_shi>:
     1a0:	b403      	push	{r0, r1}
     1a2:	4671      	mov	r1, lr
     1a4:	0849      	lsrs	r1, r1, #1
     1a6:	0040      	lsls	r0, r0, #1
     1a8:	0049      	lsls	r1, r1, #1
     1aa:	5e09      	ldrsh	r1, [r1, r0]
     1ac:	0049      	lsls	r1, r1, #1
     1ae:	448e      	add	lr, r1
     1b0:	bc03      	pop	{r0, r1}
     1b2:	4770      	bx	lr

000001b4 <__gnu_thumb1_case_uhi>:
     1b4:	b403      	push	{r0, r1}
     1b6:	4671      	mov	r1, lr
     1b8:	0849      	lsrs	r1, r1, #1
     1ba:	0040      	lsls	r0, r0, #1
     1bc:	0049      	lsls	r1, r1, #1
     1be:	5a09      	ldrh	r1, [r1, r0]
     1c0:	0049      	lsls	r1, r1, #1
     1c2:	448e      	add	lr, r1
     1c4:	bc03      	pop	{r0, r1}
     1c6:	4770      	bx	lr

000001c8 <__aeabi_uidiv>:
     1c8:	2900      	cmp	r1, #0
     1ca:	d034      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>

000001cc <.udivsi3_skip_div0_test>:
     1cc:	2301      	movs	r3, #1
     1ce:	2200      	movs	r2, #0
     1d0:	b410      	push	{r4}
     1d2:	4288      	cmp	r0, r1
     1d4:	d32c      	bcc.n	230 <.udivsi3_skip_div0_test+0x64>
     1d6:	2401      	movs	r4, #1
     1d8:	0724      	lsls	r4, r4, #28
     1da:	42a1      	cmp	r1, r4
     1dc:	d204      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1de:	4281      	cmp	r1, r0
     1e0:	d202      	bcs.n	1e8 <.udivsi3_skip_div0_test+0x1c>
     1e2:	0109      	lsls	r1, r1, #4
     1e4:	011b      	lsls	r3, r3, #4
     1e6:	e7f8      	b.n	1da <.udivsi3_skip_div0_test+0xe>
     1e8:	00e4      	lsls	r4, r4, #3
     1ea:	42a1      	cmp	r1, r4
     1ec:	d204      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1ee:	4281      	cmp	r1, r0
     1f0:	d202      	bcs.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     1f2:	0049      	lsls	r1, r1, #1
     1f4:	005b      	lsls	r3, r3, #1
     1f6:	e7f8      	b.n	1ea <.udivsi3_skip_div0_test+0x1e>
     1f8:	4288      	cmp	r0, r1
     1fa:	d301      	bcc.n	200 <.udivsi3_skip_div0_test+0x34>
     1fc:	1a40      	subs	r0, r0, r1
     1fe:	431a      	orrs	r2, r3
     200:	084c      	lsrs	r4, r1, #1
     202:	42a0      	cmp	r0, r4
     204:	d302      	bcc.n	20c <.udivsi3_skip_div0_test+0x40>
     206:	1b00      	subs	r0, r0, r4
     208:	085c      	lsrs	r4, r3, #1
     20a:	4322      	orrs	r2, r4
     20c:	088c      	lsrs	r4, r1, #2
     20e:	42a0      	cmp	r0, r4
     210:	d302      	bcc.n	218 <.udivsi3_skip_div0_test+0x4c>
     212:	1b00      	subs	r0, r0, r4
     214:	089c      	lsrs	r4, r3, #2
     216:	4322      	orrs	r2, r4
     218:	08cc      	lsrs	r4, r1, #3
     21a:	42a0      	cmp	r0, r4
     21c:	d302      	bcc.n	224 <.udivsi3_skip_div0_test+0x58>
     21e:	1b00      	subs	r0, r0, r4
     220:	08dc      	lsrs	r4, r3, #3
     222:	4322      	orrs	r2, r4
     224:	2800      	cmp	r0, #0
     226:	d003      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     228:	091b      	lsrs	r3, r3, #4
     22a:	d001      	beq.n	230 <.udivsi3_skip_div0_test+0x64>
     22c:	0909      	lsrs	r1, r1, #4
     22e:	e7e3      	b.n	1f8 <.udivsi3_skip_div0_test+0x2c>
     230:	1c10      	adds	r0, r2, #0
     232:	bc10      	pop	{r4}
     234:	4770      	bx	lr
     236:	2800      	cmp	r0, #0
     238:	d001      	beq.n	23e <.udivsi3_skip_div0_test+0x72>
     23a:	2000      	movs	r0, #0
     23c:	43c0      	mvns	r0, r0
     23e:	b407      	push	{r0, r1, r2}
     240:	4802      	ldr	r0, [pc, #8]	; (24c <.udivsi3_skip_div0_test+0x80>)
     242:	a102      	add	r1, pc, #8	; (adr r1, 24c <.udivsi3_skip_div0_test+0x80>)
     244:	1840      	adds	r0, r0, r1
     246:	9002      	str	r0, [sp, #8]
     248:	bd03      	pop	{r0, r1, pc}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	000000d9 	.word	0x000000d9

00000250 <__aeabi_uidivmod>:
     250:	2900      	cmp	r1, #0
     252:	d0f0      	beq.n	236 <.udivsi3_skip_div0_test+0x6a>
     254:	b503      	push	{r0, r1, lr}
     256:	f7ff ffb9 	bl	1cc <.udivsi3_skip_div0_test>
     25a:	bc0e      	pop	{r1, r2, r3}
     25c:	4342      	muls	r2, r0
     25e:	1a89      	subs	r1, r1, r2
     260:	4718      	bx	r3
     262:	46c0      	nop			; (mov r8, r8)

00000264 <__aeabi_idiv>:
     264:	2900      	cmp	r1, #0
     266:	d041      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>

00000268 <.divsi3_skip_div0_test>:
     268:	b410      	push	{r4}
     26a:	1c04      	adds	r4, r0, #0
     26c:	404c      	eors	r4, r1
     26e:	46a4      	mov	ip, r4
     270:	2301      	movs	r3, #1
     272:	2200      	movs	r2, #0
     274:	2900      	cmp	r1, #0
     276:	d500      	bpl.n	27a <.divsi3_skip_div0_test+0x12>
     278:	4249      	negs	r1, r1
     27a:	2800      	cmp	r0, #0
     27c:	d500      	bpl.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     27e:	4240      	negs	r0, r0
     280:	4288      	cmp	r0, r1
     282:	d32c      	bcc.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     284:	2401      	movs	r4, #1
     286:	0724      	lsls	r4, r4, #28
     288:	42a1      	cmp	r1, r4
     28a:	d204      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     28c:	4281      	cmp	r1, r0
     28e:	d202      	bcs.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     290:	0109      	lsls	r1, r1, #4
     292:	011b      	lsls	r3, r3, #4
     294:	e7f8      	b.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     296:	00e4      	lsls	r4, r4, #3
     298:	42a1      	cmp	r1, r4
     29a:	d204      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     29c:	4281      	cmp	r1, r0
     29e:	d202      	bcs.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2a0:	0049      	lsls	r1, r1, #1
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	e7f8      	b.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     2a6:	4288      	cmp	r0, r1
     2a8:	d301      	bcc.n	2ae <CONFIG_BT_HCI_TX_STACK_SIZE+0x2e>
     2aa:	1a40      	subs	r0, r0, r1
     2ac:	431a      	orrs	r2, r3
     2ae:	084c      	lsrs	r4, r1, #1
     2b0:	42a0      	cmp	r0, r4
     2b2:	d302      	bcc.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2b4:	1b00      	subs	r0, r0, r4
     2b6:	085c      	lsrs	r4, r3, #1
     2b8:	4322      	orrs	r2, r4
     2ba:	088c      	lsrs	r4, r1, #2
     2bc:	42a0      	cmp	r0, r4
     2be:	d302      	bcc.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2c0:	1b00      	subs	r0, r0, r4
     2c2:	089c      	lsrs	r4, r3, #2
     2c4:	4322      	orrs	r2, r4
     2c6:	08cc      	lsrs	r4, r1, #3
     2c8:	42a0      	cmp	r0, r4
     2ca:	d302      	bcc.n	2d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x52>
     2cc:	1b00      	subs	r0, r0, r4
     2ce:	08dc      	lsrs	r4, r3, #3
     2d0:	4322      	orrs	r2, r4
     2d2:	2800      	cmp	r0, #0
     2d4:	d003      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2d6:	091b      	lsrs	r3, r3, #4
     2d8:	d001      	beq.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2da:	0909      	lsrs	r1, r1, #4
     2dc:	e7e3      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     2de:	1c10      	adds	r0, r2, #0
     2e0:	4664      	mov	r4, ip
     2e2:	2c00      	cmp	r4, #0
     2e4:	d500      	bpl.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     2e6:	4240      	negs	r0, r0
     2e8:	bc10      	pop	{r4}
     2ea:	4770      	bx	lr
     2ec:	2800      	cmp	r0, #0
     2ee:	d006      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f0:	db03      	blt.n	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     2f2:	2000      	movs	r0, #0
     2f4:	43c0      	mvns	r0, r0
     2f6:	0840      	lsrs	r0, r0, #1
     2f8:	e001      	b.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2fa:	2080      	movs	r0, #128	; 0x80
     2fc:	0600      	lsls	r0, r0, #24
     2fe:	b407      	push	{r0, r1, r2}
     300:	4802      	ldr	r0, [pc, #8]	; (30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     302:	a102      	add	r1, pc, #8	; (adr r1, 30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>)
     304:	1840      	adds	r0, r0, r1
     306:	9002      	str	r0, [sp, #8]
     308:	bd03      	pop	{r0, r1, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000019 	.word	0x00000019

00000310 <__aeabi_idivmod>:
     310:	2900      	cmp	r1, #0
     312:	d0eb      	beq.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     314:	b503      	push	{r0, r1, lr}
     316:	f7ff ffa7 	bl	268 <.divsi3_skip_div0_test>
     31a:	bc0e      	pop	{r1, r2, r3}
     31c:	4342      	muls	r2, r0
     31e:	1a89      	subs	r1, r1, r2
     320:	4718      	bx	r3
     322:	46c0      	nop			; (mov r8, r8)

00000324 <__aeabi_idiv0>:
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)

00000328 <__aeabi_uldivmod>:
     328:	2b00      	cmp	r3, #0
     32a:	d111      	bne.n	350 <__aeabi_uldivmod+0x28>
     32c:	2a00      	cmp	r2, #0
     32e:	d10f      	bne.n	350 <__aeabi_uldivmod+0x28>
     330:	2900      	cmp	r1, #0
     332:	d100      	bne.n	336 <__aeabi_uldivmod+0xe>
     334:	2800      	cmp	r0, #0
     336:	d002      	beq.n	33e <__aeabi_uldivmod+0x16>
     338:	2100      	movs	r1, #0
     33a:	43c9      	mvns	r1, r1
     33c:	1c08      	adds	r0, r1, #0
     33e:	b407      	push	{r0, r1, r2}
     340:	4802      	ldr	r0, [pc, #8]	; (34c <__aeabi_uldivmod+0x24>)
     342:	a102      	add	r1, pc, #8	; (adr r1, 34c <__aeabi_uldivmod+0x24>)
     344:	1840      	adds	r0, r0, r1
     346:	9002      	str	r0, [sp, #8]
     348:	bd03      	pop	{r0, r1, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	ffffffd9 	.word	0xffffffd9
     350:	b403      	push	{r0, r1}
     352:	4668      	mov	r0, sp
     354:	b501      	push	{r0, lr}
     356:	9802      	ldr	r0, [sp, #8]
     358:	f000 f854 	bl	404 <__udivmoddi4>
     35c:	9b01      	ldr	r3, [sp, #4]
     35e:	469e      	mov	lr, r3
     360:	b002      	add	sp, #8
     362:	bc0c      	pop	{r2, r3}
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)

00000368 <__aeabi_lmul>:
     368:	b5f0      	push	{r4, r5, r6, r7, lr}
     36a:	464f      	mov	r7, r9
     36c:	4646      	mov	r6, r8
     36e:	0415      	lsls	r5, r2, #16
     370:	0c2d      	lsrs	r5, r5, #16
     372:	b4c0      	push	{r6, r7}
     374:	002e      	movs	r6, r5
     376:	0407      	lsls	r7, r0, #16
     378:	0c14      	lsrs	r4, r2, #16
     37a:	0c3f      	lsrs	r7, r7, #16
     37c:	4699      	mov	r9, r3
     37e:	0c03      	lsrs	r3, r0, #16
     380:	437e      	muls	r6, r7
     382:	435d      	muls	r5, r3
     384:	4367      	muls	r7, r4
     386:	4363      	muls	r3, r4
     388:	197f      	adds	r7, r7, r5
     38a:	0c34      	lsrs	r4, r6, #16
     38c:	19e4      	adds	r4, r4, r7
     38e:	469c      	mov	ip, r3
     390:	42a5      	cmp	r5, r4
     392:	d903      	bls.n	39c <__aeabi_lmul+0x34>
     394:	2380      	movs	r3, #128	; 0x80
     396:	025b      	lsls	r3, r3, #9
     398:	4698      	mov	r8, r3
     39a:	44c4      	add	ip, r8
     39c:	464b      	mov	r3, r9
     39e:	4351      	muls	r1, r2
     3a0:	4343      	muls	r3, r0
     3a2:	0436      	lsls	r6, r6, #16
     3a4:	0c36      	lsrs	r6, r6, #16
     3a6:	0c25      	lsrs	r5, r4, #16
     3a8:	0424      	lsls	r4, r4, #16
     3aa:	4465      	add	r5, ip
     3ac:	19a4      	adds	r4, r4, r6
     3ae:	1859      	adds	r1, r3, r1
     3b0:	1949      	adds	r1, r1, r5
     3b2:	0020      	movs	r0, r4
     3b4:	bc0c      	pop	{r2, r3}
     3b6:	4690      	mov	r8, r2
     3b8:	4699      	mov	r9, r3
     3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003bc <__ffssi2>:
     3bc:	b510      	push	{r4, lr}
     3be:	2300      	movs	r3, #0
     3c0:	2800      	cmp	r0, #0
     3c2:	d002      	beq.n	3ca <__ffssi2+0xe>
     3c4:	f000 f8ea 	bl	59c <__ctzsi2>
     3c8:	1c43      	adds	r3, r0, #1
     3ca:	0018      	movs	r0, r3
     3cc:	bd10      	pop	{r4, pc}
     3ce:	46c0      	nop			; (mov r8, r8)

000003d0 <__popcountsi2>:
     3d0:	4a09      	ldr	r2, [pc, #36]	; (3f8 <__popcountsi2+0x28>)
     3d2:	0843      	lsrs	r3, r0, #1
     3d4:	4013      	ands	r3, r2
     3d6:	1ac0      	subs	r0, r0, r3
     3d8:	0003      	movs	r3, r0
     3da:	4a08      	ldr	r2, [pc, #32]	; (3fc <__popcountsi2+0x2c>)
     3dc:	0880      	lsrs	r0, r0, #2
     3de:	4010      	ands	r0, r2
     3e0:	4013      	ands	r3, r2
     3e2:	181b      	adds	r3, r3, r0
     3e4:	0918      	lsrs	r0, r3, #4
     3e6:	18c0      	adds	r0, r0, r3
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <CONFIG_BT_RX_STACK_SIZE>)
     3ea:	4003      	ands	r3, r0
     3ec:	0218      	lsls	r0, r3, #8
     3ee:	18c0      	adds	r0, r0, r3
     3f0:	0403      	lsls	r3, r0, #16
     3f2:	18c0      	adds	r0, r0, r3
     3f4:	0e00      	lsrs	r0, r0, #24
     3f6:	4770      	bx	lr
     3f8:	55555555 	.word	0x55555555
     3fc:	33333333 	.word	0x33333333
     400:	0f0f0f0f 	.word	0x0f0f0f0f

00000404 <__udivmoddi4>:
     404:	b5f0      	push	{r4, r5, r6, r7, lr}
     406:	464d      	mov	r5, r9
     408:	4656      	mov	r6, sl
     40a:	4644      	mov	r4, r8
     40c:	465f      	mov	r7, fp
     40e:	b4f0      	push	{r4, r5, r6, r7}
     410:	4692      	mov	sl, r2
     412:	b083      	sub	sp, #12
     414:	0004      	movs	r4, r0
     416:	000d      	movs	r5, r1
     418:	4699      	mov	r9, r3
     41a:	428b      	cmp	r3, r1
     41c:	d82f      	bhi.n	47e <__udivmoddi4+0x7a>
     41e:	d02c      	beq.n	47a <__udivmoddi4+0x76>
     420:	4649      	mov	r1, r9
     422:	4650      	mov	r0, sl
     424:	f000 f8ae 	bl	584 <__clzdi2>
     428:	0029      	movs	r1, r5
     42a:	0006      	movs	r6, r0
     42c:	0020      	movs	r0, r4
     42e:	f000 f8a9 	bl	584 <__clzdi2>
     432:	1a33      	subs	r3, r6, r0
     434:	4698      	mov	r8, r3
     436:	3b20      	subs	r3, #32
     438:	469b      	mov	fp, r3
     43a:	d500      	bpl.n	43e <__udivmoddi4+0x3a>
     43c:	e074      	b.n	528 <__udivmoddi4+0x124>
     43e:	4653      	mov	r3, sl
     440:	465a      	mov	r2, fp
     442:	4093      	lsls	r3, r2
     444:	001f      	movs	r7, r3
     446:	4653      	mov	r3, sl
     448:	4642      	mov	r2, r8
     44a:	4093      	lsls	r3, r2
     44c:	001e      	movs	r6, r3
     44e:	42af      	cmp	r7, r5
     450:	d829      	bhi.n	4a6 <__udivmoddi4+0xa2>
     452:	d026      	beq.n	4a2 <__udivmoddi4+0x9e>
     454:	465b      	mov	r3, fp
     456:	1ba4      	subs	r4, r4, r6
     458:	41bd      	sbcs	r5, r7
     45a:	2b00      	cmp	r3, #0
     45c:	da00      	bge.n	460 <__udivmoddi4+0x5c>
     45e:	e079      	b.n	554 <__udivmoddi4+0x150>
     460:	2200      	movs	r2, #0
     462:	2300      	movs	r3, #0
     464:	9200      	str	r2, [sp, #0]
     466:	9301      	str	r3, [sp, #4]
     468:	2301      	movs	r3, #1
     46a:	465a      	mov	r2, fp
     46c:	4093      	lsls	r3, r2
     46e:	9301      	str	r3, [sp, #4]
     470:	2301      	movs	r3, #1
     472:	4642      	mov	r2, r8
     474:	4093      	lsls	r3, r2
     476:	9300      	str	r3, [sp, #0]
     478:	e019      	b.n	4ae <__udivmoddi4+0xaa>
     47a:	4282      	cmp	r2, r0
     47c:	d9d0      	bls.n	420 <__udivmoddi4+0x1c>
     47e:	2200      	movs	r2, #0
     480:	2300      	movs	r3, #0
     482:	9200      	str	r2, [sp, #0]
     484:	9301      	str	r3, [sp, #4]
     486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     488:	2b00      	cmp	r3, #0
     48a:	d001      	beq.n	490 <__udivmoddi4+0x8c>
     48c:	601c      	str	r4, [r3, #0]
     48e:	605d      	str	r5, [r3, #4]
     490:	9800      	ldr	r0, [sp, #0]
     492:	9901      	ldr	r1, [sp, #4]
     494:	b003      	add	sp, #12
     496:	bc3c      	pop	{r2, r3, r4, r5}
     498:	4690      	mov	r8, r2
     49a:	4699      	mov	r9, r3
     49c:	46a2      	mov	sl, r4
     49e:	46ab      	mov	fp, r5
     4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a2:	42a3      	cmp	r3, r4
     4a4:	d9d6      	bls.n	454 <__udivmoddi4+0x50>
     4a6:	2200      	movs	r2, #0
     4a8:	2300      	movs	r3, #0
     4aa:	9200      	str	r2, [sp, #0]
     4ac:	9301      	str	r3, [sp, #4]
     4ae:	4643      	mov	r3, r8
     4b0:	2b00      	cmp	r3, #0
     4b2:	d0e8      	beq.n	486 <__udivmoddi4+0x82>
     4b4:	07fb      	lsls	r3, r7, #31
     4b6:	0872      	lsrs	r2, r6, #1
     4b8:	431a      	orrs	r2, r3
     4ba:	4646      	mov	r6, r8
     4bc:	087b      	lsrs	r3, r7, #1
     4be:	e00e      	b.n	4de <__udivmoddi4+0xda>
     4c0:	42ab      	cmp	r3, r5
     4c2:	d101      	bne.n	4c8 <__udivmoddi4+0xc4>
     4c4:	42a2      	cmp	r2, r4
     4c6:	d80c      	bhi.n	4e2 <__udivmoddi4+0xde>
     4c8:	1aa4      	subs	r4, r4, r2
     4ca:	419d      	sbcs	r5, r3
     4cc:	2001      	movs	r0, #1
     4ce:	1924      	adds	r4, r4, r4
     4d0:	416d      	adcs	r5, r5
     4d2:	2100      	movs	r1, #0
     4d4:	3e01      	subs	r6, #1
     4d6:	1824      	adds	r4, r4, r0
     4d8:	414d      	adcs	r5, r1
     4da:	2e00      	cmp	r6, #0
     4dc:	d006      	beq.n	4ec <__udivmoddi4+0xe8>
     4de:	42ab      	cmp	r3, r5
     4e0:	d9ee      	bls.n	4c0 <__udivmoddi4+0xbc>
     4e2:	3e01      	subs	r6, #1
     4e4:	1924      	adds	r4, r4, r4
     4e6:	416d      	adcs	r5, r5
     4e8:	2e00      	cmp	r6, #0
     4ea:	d1f8      	bne.n	4de <__udivmoddi4+0xda>
     4ec:	465b      	mov	r3, fp
     4ee:	9800      	ldr	r0, [sp, #0]
     4f0:	9901      	ldr	r1, [sp, #4]
     4f2:	1900      	adds	r0, r0, r4
     4f4:	4169      	adcs	r1, r5
     4f6:	2b00      	cmp	r3, #0
     4f8:	db22      	blt.n	540 <__udivmoddi4+0x13c>
     4fa:	002b      	movs	r3, r5
     4fc:	465a      	mov	r2, fp
     4fe:	40d3      	lsrs	r3, r2
     500:	002a      	movs	r2, r5
     502:	4644      	mov	r4, r8
     504:	40e2      	lsrs	r2, r4
     506:	001c      	movs	r4, r3
     508:	465b      	mov	r3, fp
     50a:	0015      	movs	r5, r2
     50c:	2b00      	cmp	r3, #0
     50e:	db2c      	blt.n	56a <__udivmoddi4+0x166>
     510:	0026      	movs	r6, r4
     512:	409e      	lsls	r6, r3
     514:	0033      	movs	r3, r6
     516:	0026      	movs	r6, r4
     518:	4647      	mov	r7, r8
     51a:	40be      	lsls	r6, r7
     51c:	0032      	movs	r2, r6
     51e:	1a80      	subs	r0, r0, r2
     520:	4199      	sbcs	r1, r3
     522:	9000      	str	r0, [sp, #0]
     524:	9101      	str	r1, [sp, #4]
     526:	e7ae      	b.n	486 <__udivmoddi4+0x82>
     528:	4642      	mov	r2, r8
     52a:	2320      	movs	r3, #32
     52c:	1a9b      	subs	r3, r3, r2
     52e:	4652      	mov	r2, sl
     530:	40da      	lsrs	r2, r3
     532:	4641      	mov	r1, r8
     534:	0013      	movs	r3, r2
     536:	464a      	mov	r2, r9
     538:	408a      	lsls	r2, r1
     53a:	0017      	movs	r7, r2
     53c:	431f      	orrs	r7, r3
     53e:	e782      	b.n	446 <__udivmoddi4+0x42>
     540:	4642      	mov	r2, r8
     542:	2320      	movs	r3, #32
     544:	1a9b      	subs	r3, r3, r2
     546:	002a      	movs	r2, r5
     548:	4646      	mov	r6, r8
     54a:	409a      	lsls	r2, r3
     54c:	0023      	movs	r3, r4
     54e:	40f3      	lsrs	r3, r6
     550:	4313      	orrs	r3, r2
     552:	e7d5      	b.n	500 <__udivmoddi4+0xfc>
     554:	4642      	mov	r2, r8
     556:	2320      	movs	r3, #32
     558:	2100      	movs	r1, #0
     55a:	1a9b      	subs	r3, r3, r2
     55c:	2200      	movs	r2, #0
     55e:	9100      	str	r1, [sp, #0]
     560:	9201      	str	r2, [sp, #4]
     562:	2201      	movs	r2, #1
     564:	40da      	lsrs	r2, r3
     566:	9201      	str	r2, [sp, #4]
     568:	e782      	b.n	470 <__udivmoddi4+0x6c>
     56a:	4642      	mov	r2, r8
     56c:	2320      	movs	r3, #32
     56e:	0026      	movs	r6, r4
     570:	1a9b      	subs	r3, r3, r2
     572:	40de      	lsrs	r6, r3
     574:	002f      	movs	r7, r5
     576:	46b4      	mov	ip, r6
     578:	4097      	lsls	r7, r2
     57a:	4666      	mov	r6, ip
     57c:	003b      	movs	r3, r7
     57e:	4333      	orrs	r3, r6
     580:	e7c9      	b.n	516 <__udivmoddi4+0x112>
     582:	46c0      	nop			; (mov r8, r8)

00000584 <__clzdi2>:
     584:	b510      	push	{r4, lr}
     586:	2900      	cmp	r1, #0
     588:	d103      	bne.n	592 <__clzdi2+0xe>
     58a:	f000 f827 	bl	5dc <__clzsi2>
     58e:	3020      	adds	r0, #32
     590:	e002      	b.n	598 <__clzdi2+0x14>
     592:	1c08      	adds	r0, r1, #0
     594:	f000 f822 	bl	5dc <__clzsi2>
     598:	bd10      	pop	{r4, pc}
     59a:	46c0      	nop			; (mov r8, r8)

0000059c <__ctzsi2>:
     59c:	4241      	negs	r1, r0
     59e:	4008      	ands	r0, r1
     5a0:	211c      	movs	r1, #28
     5a2:	2301      	movs	r3, #1
     5a4:	041b      	lsls	r3, r3, #16
     5a6:	4298      	cmp	r0, r3
     5a8:	d301      	bcc.n	5ae <__ctzsi2+0x12>
     5aa:	0c00      	lsrs	r0, r0, #16
     5ac:	3910      	subs	r1, #16
     5ae:	0a1b      	lsrs	r3, r3, #8
     5b0:	4298      	cmp	r0, r3
     5b2:	d301      	bcc.n	5b8 <__ctzsi2+0x1c>
     5b4:	0a00      	lsrs	r0, r0, #8
     5b6:	3908      	subs	r1, #8
     5b8:	091b      	lsrs	r3, r3, #4
     5ba:	4298      	cmp	r0, r3
     5bc:	d301      	bcc.n	5c2 <__ctzsi2+0x26>
     5be:	0900      	lsrs	r0, r0, #4
     5c0:	3904      	subs	r1, #4
     5c2:	a202      	add	r2, pc, #8	; (adr r2, 5cc <__ctzsi2+0x30>)
     5c4:	5c10      	ldrb	r0, [r2, r0]
     5c6:	1a40      	subs	r0, r0, r1
     5c8:	4770      	bx	lr
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	1d1d1c1b 	.word	0x1d1d1c1b
     5d0:	1e1e1e1e 	.word	0x1e1e1e1e
     5d4:	1f1f1f1f 	.word	0x1f1f1f1f
     5d8:	1f1f1f1f 	.word	0x1f1f1f1f

000005dc <__clzsi2>:
     5dc:	211c      	movs	r1, #28
     5de:	2301      	movs	r3, #1
     5e0:	041b      	lsls	r3, r3, #16
     5e2:	4298      	cmp	r0, r3
     5e4:	d301      	bcc.n	5ea <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xe>
     5e6:	0c00      	lsrs	r0, r0, #16
     5e8:	3910      	subs	r1, #16
     5ea:	0a1b      	lsrs	r3, r3, #8
     5ec:	4298      	cmp	r0, r3
     5ee:	d301      	bcc.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     5f0:	0a00      	lsrs	r0, r0, #8
     5f2:	3908      	subs	r1, #8
     5f4:	091b      	lsrs	r3, r3, #4
     5f6:	4298      	cmp	r0, r3
     5f8:	d301      	bcc.n	5fe <CONFIG_BT_CTLR_COMPANY_ID+0xd>
     5fa:	0900      	lsrs	r0, r0, #4
     5fc:	3904      	subs	r1, #4
     5fe:	a202      	add	r2, pc, #8	; (adr r2, 608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     600:	5c10      	ldrb	r0, [r2, r0]
     602:	1840      	adds	r0, r0, r1
     604:	4770      	bx	lr
     606:	46c0      	nop			; (mov r8, r8)
     608:	02020304 	.word	0x02020304
     60c:	01010101 	.word	0x01010101
	...

00000618 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     618:	0003      	movs	r3, r0
     61a:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
     61c:	701a      	strb	r2, [r3, #0]
	while (*s != '\0') {
     61e:	2a00      	cmp	r2, #0
     620:	d100      	bne.n	624 <strcpy+0xc>
	}

	*d = '\0';

	return dest;
}
     622:	4770      	bx	lr
		d++;
     624:	3301      	adds	r3, #1
		s++;
     626:	3101      	adds	r1, #1
     628:	e7f7      	b.n	61a <strcpy+0x2>

0000062a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     62a:	7803      	ldrb	r3, [r0, #0]
     62c:	780a      	ldrb	r2, [r1, #0]
     62e:	4293      	cmp	r3, r2
     630:	d102      	bne.n	638 <strcmp+0xe>
     632:	2b00      	cmp	r3, #0
     634:	d102      	bne.n	63c <strcmp+0x12>
     636:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
     638:	1a98      	subs	r0, r3, r2
}
     63a:	4770      	bx	lr
		s1++;
     63c:	3001      	adds	r0, #1
		s2++;
     63e:	3101      	adds	r1, #1
     640:	e7f3      	b.n	62a <strcmp>

00000642 <memcmp>:
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     642:	2300      	movs	r3, #0
{
     644:	b510      	push	{r4, lr}
	if (!n)
     646:	429a      	cmp	r2, r3
     648:	d005      	beq.n	656 <memcmp+0x14>

	while ((--n > 0) && (*c1 == *c2)) {
     64a:	3a01      	subs	r2, #1
     64c:	2a00      	cmp	r2, #0
     64e:	d104      	bne.n	65a <memcmp+0x18>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     650:	7803      	ldrb	r3, [r0, #0]
     652:	7808      	ldrb	r0, [r1, #0]
     654:	1a1b      	subs	r3, r3, r0
}
     656:	0018      	movs	r0, r3
     658:	bd10      	pop	{r4, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     65a:	7804      	ldrb	r4, [r0, #0]
     65c:	780b      	ldrb	r3, [r1, #0]
     65e:	429c      	cmp	r4, r3
     660:	d1f6      	bne.n	650 <memcmp+0xe>
		c1++;
     662:	3001      	adds	r0, #1
		c2++;
     664:	3101      	adds	r1, #1
     666:	e7f0      	b.n	64a <memcmp+0x8>

00000668 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     668:	0003      	movs	r3, r0
{
     66a:	b530      	push	{r4, r5, lr}
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     66c:	2503      	movs	r5, #3
     66e:	404b      	eors	r3, r1
     670:	422b      	tst	r3, r5
     672:	d019      	beq.n	6a8 <memcpy+0x40>
	unsigned char *d_byte = (unsigned char *)d;
     674:	0003      	movs	r3, r0
     676:	2400      	movs	r4, #0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     678:	42a2      	cmp	r2, r4
     67a:	d11b      	bne.n	6b4 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     67c:	bd30      	pop	{r4, r5, pc}
			if (n == 0) {
     67e:	2a00      	cmp	r2, #0
     680:	d0fc      	beq.n	67c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
     682:	780c      	ldrb	r4, [r1, #0]
			n--;
     684:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
     686:	701c      	strb	r4, [r3, #0]
     688:	3101      	adds	r1, #1
     68a:	3301      	adds	r3, #1
		while (((unsigned int)d_byte) & 0x3) {
     68c:	001c      	movs	r4, r3
     68e:	402c      	ands	r4, r5
     690:	d1f5      	bne.n	67e <memcpy+0x16>
		while (n >= sizeof(unsigned int)) {
     692:	1b15      	subs	r5, r2, r4
     694:	2d03      	cmp	r5, #3
     696:	d809      	bhi.n	6ac <memcpy+0x44>
     698:	2403      	movs	r4, #3
     69a:	0015      	movs	r5, r2
     69c:	43a5      	bics	r5, r4
     69e:	2403      	movs	r4, #3
     6a0:	1949      	adds	r1, r1, r5
     6a2:	195b      	adds	r3, r3, r5
     6a4:	4022      	ands	r2, r4
     6a6:	e7e6      	b.n	676 <memcpy+0xe>
     6a8:	0003      	movs	r3, r0
     6aa:	e7ef      	b.n	68c <memcpy+0x24>
			*(d_word++) = *(s_word++);
     6ac:	590d      	ldr	r5, [r1, r4]
     6ae:	511d      	str	r5, [r3, r4]
     6b0:	3404      	adds	r4, #4
     6b2:	e7ee      	b.n	692 <memcpy+0x2a>
		*(d_byte++) = *(s_byte++);
     6b4:	5d0d      	ldrb	r5, [r1, r4]
     6b6:	551d      	strb	r5, [r3, r4]
     6b8:	3401      	adds	r4, #1
     6ba:	e7dd      	b.n	678 <memcpy+0x10>

000006bc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	0005      	movs	r5, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     6c0:	2603      	movs	r6, #3
	unsigned char c_byte = (unsigned char)c;
     6c2:	b2cb      	uxtb	r3, r1
     6c4:	002c      	movs	r4, r5
	while (((unsigned int)d_byte) & 0x3) {
     6c6:	4235      	tst	r5, r6
     6c8:	d111      	bne.n	6ee <memset+0x32>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
     6ca:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
     6cc:	020e      	lsls	r6, r1, #8
     6ce:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
     6d0:	040e      	lsls	r6, r1, #16
     6d2:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
     6d4:	0016      	movs	r6, r2
     6d6:	2e03      	cmp	r6, #3
     6d8:	d80f      	bhi.n	6fa <memset+0x3e>
     6da:	2103      	movs	r1, #3
     6dc:	0015      	movs	r5, r2
     6de:	438d      	bics	r5, r1
     6e0:	1961      	adds	r1, r4, r5
     6e2:	2403      	movs	r4, #3
     6e4:	4022      	ands	r2, r4
     6e6:	188a      	adds	r2, r1, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     6e8:	4291      	cmp	r1, r2
     6ea:	d109      	bne.n	700 <memset+0x44>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     6ec:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     6ee:	2a00      	cmp	r2, #0
     6f0:	d0fc      	beq.n	6ec <memset+0x30>
		*(d_byte++) = c_byte;
     6f2:	702b      	strb	r3, [r5, #0]
		n--;
     6f4:	3a01      	subs	r2, #1
     6f6:	3501      	adds	r5, #1
     6f8:	e7e4      	b.n	6c4 <memset+0x8>
		*(d_word++) = c_word;
     6fa:	c502      	stmia	r5!, {r1}
		n -= sizeof(unsigned int);
     6fc:	3e04      	subs	r6, #4
     6fe:	e7ea      	b.n	6d6 <memset+0x1a>
		*(d_byte++) = c_byte;
     700:	700b      	strb	r3, [r1, #0]
     702:	3101      	adds	r1, #1
     704:	e7f0      	b.n	6e8 <memset+0x2c>
	...

00000708 <button_pressed>:
static struct device *pwm;
static struct device *gpio;

static void button_pressed(struct device *dev, struct gpio_callback *cb,
			   u32_t pins)
{
     708:	b510      	push	{r4, lr}

	if (pins & BIT(SW0_GPIO_PIN)) {
		printk("A pressed\n");
     70a:	4803      	ldr	r0, [pc, #12]	; (718 <button_pressed+0x10>)
	if (pins & BIT(SW0_GPIO_PIN)) {
     70c:	0393      	lsls	r3, r2, #14
     70e:	d400      	bmi.n	712 <button_pressed+0xa>

	} else {
		printk("B pressed\n");
     710:	4802      	ldr	r0, [pc, #8]	; (71c <button_pressed+0x14>)
     712:	f000 fc61 	bl	fd8 <printk>
	}
}
     716:	bd10      	pop	{r4, pc}
     718:	0000aaa1 	.word	0x0000aaa1
     71c:	0000aaac 	.word	0x0000aaac

00000720 <main>:
	gpio_pin_enable_callback(gpio, SW0_GPIO_PIN);
	gpio_pin_enable_callback(gpio, SW1_GPIO_PIN);
}

void main(void)
{
     720:	b570      	push	{r4, r5, r6, lr}
	gpio = device_get_binding(SW0_GPIO_NAME);
     722:	4816      	ldr	r0, [pc, #88]	; (77c <main+0x5c>)
     724:	f008 fef6 	bl	9514 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
     728:	6843      	ldr	r3, [r0, #4]
     72a:	4c15      	ldr	r4, [pc, #84]	; (780 <main+0x60>)
     72c:	681d      	ldr	r5, [r3, #0]
     72e:	2211      	movs	r2, #17
     730:	2322      	movs	r3, #34	; 0x22
     732:	2100      	movs	r1, #0
     734:	6020      	str	r0, [r4, #0]
     736:	47a8      	blx	r5
	gpio_pin_configure(gpio, SW1_GPIO_PIN, (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE | GPIO_INT_ACTIVE_LOW));
     738:	6820      	ldr	r0, [r4, #0]
     73a:	221a      	movs	r2, #26
     73c:	6843      	ldr	r3, [r0, #4]
     73e:	2100      	movs	r1, #0
     740:	681d      	ldr	r5, [r3, #0]
     742:	2322      	movs	r3, #34	; 0x22
     744:	47a8      	blx	r5
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     746:	490f      	ldr	r1, [pc, #60]	; (784 <main+0x64>)
     748:	4b0f      	ldr	r3, [pc, #60]	; (788 <main+0x68>)
	gpio_add_callback(gpio, &button_cb);
     74a:	6820      	ldr	r0, [r4, #0]
     74c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     74e:	4b0f      	ldr	r3, [pc, #60]	; (78c <main+0x6c>)
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
     750:	2201      	movs	r2, #1
	callback->pin_mask = pin_mask;
     752:	608b      	str	r3, [r1, #8]
	return api->manage_callback(port, callback, true);
     754:	6843      	ldr	r3, [r0, #4]
     756:	68db      	ldr	r3, [r3, #12]
     758:	4798      	blx	r3
	pwm = device_get_binding(CONFIG_PWM_NRF5_SW_0_DEV_NAME);
     75a:	480d      	ldr	r0, [pc, #52]	; (790 <main+0x70>)
     75c:	f008 feda 	bl	9514 <device_get_binding>
	gpio_pin_enable_callback(gpio, SW0_GPIO_PIN);
     760:	6820      	ldr	r0, [r4, #0]
	return api->enable_callback(port, access_op, pin);
     762:	2211      	movs	r2, #17
     764:	6843      	ldr	r3, [r0, #4]
     766:	2100      	movs	r1, #0
     768:	691b      	ldr	r3, [r3, #16]
     76a:	4798      	blx	r3
	gpio_pin_enable_callback(gpio, SW1_GPIO_PIN);
     76c:	6820      	ldr	r0, [r4, #0]
     76e:	221a      	movs	r2, #26
     770:	6843      	ldr	r3, [r0, #4]
     772:	2100      	movs	r1, #0
     774:	691b      	ldr	r3, [r3, #16]
     776:	4798      	blx	r3

	configure_buttons();
}
     778:	bd70      	pop	{r4, r5, r6, pc}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	0000aab7 	.word	0x0000aab7
     780:	2000000c 	.word	0x2000000c
     784:	20000000 	.word	0x20000000
     788:	00000709 	.word	0x00000709
     78c:	04020000 	.word	0x04020000
     790:	0000aabe 	.word	0x0000aabe

00000794 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
     794:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
     796:	f3ef 8010 	mrs	r0, PRIMASK
     79a:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     79c:	491d      	ldr	r1, [pc, #116]	; (814 <nordicsemi_nrf51_init+0x80>)
     79e:	780b      	ldrb	r3, [r1, #0]
     7a0:	2b01      	cmp	r3, #1
     7a2:	d10f      	bne.n	7c4 <nordicsemi_nrf51_init+0x30>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7a4:	4b1c      	ldr	r3, [pc, #112]	; (818 <nordicsemi_nrf51_init+0x84>)
     7a6:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     7a8:	071b      	lsls	r3, r3, #28
     7aa:	d10b      	bne.n	7c4 <nordicsemi_nrf51_init+0x30>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
     7ac:	4b1b      	ldr	r3, [pc, #108]	; (81c <nordicsemi_nrf51_init+0x88>)
     7ae:	25e0      	movs	r5, #224	; 0xe0
     7b0:	681a      	ldr	r2, [r3, #0]
     7b2:	23f0      	movs	r3, #240	; 0xf0
     7b4:	0014      	movs	r4, r2
     7b6:	401c      	ands	r4, r3
     7b8:	422a      	tst	r2, r5
     7ba:	d11a      	bne.n	7f2 <nordicsemi_nrf51_init+0x5e>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     7bc:	4a18      	ldr	r2, [pc, #96]	; (820 <nordicsemi_nrf51_init+0x8c>)
     7be:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
     7c0:	421a      	tst	r2, r3
     7c2:	d019      	beq.n	7f8 <nordicsemi_nrf51_init+0x64>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     7c4:	680b      	ldr	r3, [r1, #0]
     7c6:	b2db      	uxtb	r3, r3
     7c8:	2b01      	cmp	r3, #1
     7ca:	d10d      	bne.n	7e8 <nordicsemi_nrf51_init+0x54>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7cc:	4a12      	ldr	r2, [pc, #72]	; (818 <nordicsemi_nrf51_init+0x84>)
     7ce:	6812      	ldr	r2, [r2, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
     7d0:	0712      	lsls	r2, r2, #28
     7d2:	d109      	bne.n	7e8 <nordicsemi_nrf51_init+0x54>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
     7d4:	21f0      	movs	r1, #240	; 0xf0
     7d6:	4a11      	ldr	r2, [pc, #68]	; (81c <nordicsemi_nrf51_init+0x88>)
     7d8:	6812      	ldr	r2, [r2, #0]
     7da:	400a      	ands	r2, r1
     7dc:	2a40      	cmp	r2, #64	; 0x40
     7de:	d103      	bne.n	7e8 <nordicsemi_nrf51_init+0x54>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     7e0:	4a0f      	ldr	r2, [pc, #60]	; (820 <nordicsemi_nrf51_init+0x8c>)
     7e2:	6812      	ldr	r2, [r2, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
     7e4:	420a      	tst	r2, r1
     7e6:	d00f      	beq.n	808 <nordicsemi_nrf51_init+0x74>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key) {
     7e8:	2800      	cmp	r0, #0
     7ea:	d100      	bne.n	7ee <nordicsemi_nrf51_init+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     7ec:	b662      	cpsie	i
}
     7ee:	2000      	movs	r0, #0
     7f0:	bd30      	pop	{r4, r5, pc}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     7f2:	2c30      	cmp	r4, #48	; 0x30
     7f4:	d0e2      	beq.n	7bc <nordicsemi_nrf51_init+0x28>
     7f6:	e7e5      	b.n	7c4 <nordicsemi_nrf51_init+0x30>
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
     7f8:	4a0a      	ldr	r2, [pc, #40]	; (824 <nordicsemi_nrf51_init+0x90>)
     7fa:	4b0b      	ldr	r3, [pc, #44]	; (828 <nordicsemi_nrf51_init+0x94>)
     7fc:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
     7fe:	2280      	movs	r2, #128	; 0x80
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <nordicsemi_nrf51_init+0x98>)
     802:	0212      	lsls	r2, r2, #8
     804:	601a      	str	r2, [r3, #0]
     806:	e7dd      	b.n	7c4 <nordicsemi_nrf51_init+0x30>
		NRF_MPU->DISABLEINDEBUG =
     808:	22c1      	movs	r2, #193	; 0xc1
     80a:	2180      	movs	r1, #128	; 0x80
     80c:	00d2      	lsls	r2, r2, #3
     80e:	05c9      	lsls	r1, r1, #23
     810:	508b      	str	r3, [r1, r2]
     812:	e7e9      	b.n	7e8 <nordicsemi_nrf51_init+0x54>
     814:	f0000fe0 	.word	0xf0000fe0
     818:	f0000fe4 	.word	0xf0000fe4
     81c:	f0000fe8 	.word	0xf0000fe8
     820:	f0000fec 	.word	0xf0000fec
     824:	c007ffdf 	.word	0xc007ffdf
     828:	40000504 	.word	0x40000504
     82c:	40006c18 	.word	0x40006c18

00000830 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     830:	4808      	ldr	r0, [pc, #32]	; (854 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
     832:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     834:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     836:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     838:	d80a      	bhi.n	850 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     83a:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     83c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     83e:	d007      	beq.n	850 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     840:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     842:	f009 fb13 	bl	9e6c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
     846:	bc01      	pop	{r0}
    mov lr, r0
     848:	4686      	mov	lr, r0
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     84a:	4903      	ldr	r1, [pc, #12]	; (858 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
     84c:	4a03      	ldr	r2, [pc, #12]	; (85c <_EXIT_EXC+0xc>)
    str r2, [r1]
     84e:	600a      	str	r2, [r1, #0]

00000850 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     850:	4770      	bx	lr
     852:	0000      	.short	0x0000
    ldr r0, =_kernel
     854:	20000ba4 	.word	0x20000ba4
    ldr r1, =_SCS_ICSR
     858:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
     85c:	10000000 	.word	0x10000000

00000860 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
     860:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     862:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
     864:	2200      	movs	r2, #0
     866:	2603      	movs	r6, #3
     868:	25ff      	movs	r5, #255	; 0xff
     86a:	00a4      	lsls	r4, r4, #2
     86c:	0010      	movs	r0, r2
     86e:	002f      	movs	r7, r5
     870:	4030      	ands	r0, r6
     872:	00c0      	lsls	r0, r0, #3
     874:	4087      	lsls	r7, r0
     876:	0893      	lsrs	r3, r2, #2
     878:	4904      	ldr	r1, [pc, #16]	; (88c <_IntLibInit+0x2c>)
     87a:	009b      	lsls	r3, r3, #2
     87c:	185b      	adds	r3, r3, r1
     87e:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     880:	3201      	adds	r2, #1
     882:	43b9      	bics	r1, r7
     884:	5119      	str	r1, [r3, r4]
     886:	2a1a      	cmp	r2, #26
     888:	d1f0      	bne.n	86c <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     88c:	e000e100 	.word	0xe000e100

00000890 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     890:	4913      	ldr	r1, [pc, #76]	; (8e0 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
     892:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     894:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     896:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     898:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
     89c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
     89e:	4643      	mov	r3, r8
    mov r4, r9
     8a0:	464c      	mov	r4, r9
    mov r5, r10
     8a2:	4655      	mov	r5, sl
    mov r6, r11
     8a4:	465e      	mov	r6, fp
    mov r7, ip
     8a6:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
     8a8:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     8aa:	4f0e      	ldr	r7, [pc, #56]	; (8e4 <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     8ac:	4e0e      	ldr	r6, [pc, #56]	; (8e8 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
     8ae:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     8b0:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     8b2:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     8b4:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     8b6:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
     8b8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     8ba:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
     8bc:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
     8be:	d100      	bne.n	8c2 <_thread_irq_disabled>
    cpsie i
     8c0:	b662      	cpsie	i

000008c2 <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
     8c2:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
     8c4:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
     8c6:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
     8c8:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
     8ca:	4698      	mov	r8, r3
    mov r9, r4
     8cc:	46a1      	mov	r9, r4
    mov r10, r5
     8ce:	46aa      	mov	sl, r5
    mov r11, r6
     8d0:	46b3      	mov	fp, r6
    mov ip, r7
     8d2:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
     8d4:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
     8d6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     8d8:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     8dc:	4770      	bx	lr
     8de:	0000      	.short	0x0000
    ldr r1, =_kernel
     8e0:	20000ba4 	.word	0x20000ba4
    ldr v4, =_SCS_ICSR
     8e4:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
     8e8:	08000000 	.word	0x08000000

000008ec <__svc>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
     8ec:	2004      	movs	r0, #4
    mov r1, lr
     8ee:	4671      	mov	r1, lr
    tst r1, r0
     8f0:	4201      	tst	r1, r0
    beq _stack_frame_msp
     8f2:	d002      	beq.n	8fa <_stack_frame_msp>
    mrs r0, PSP
     8f4:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
     8f8:	d101      	bne.n	8fe <_stack_frame_endif>

000008fa <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
     8fa:	f3ef 8008 	mrs	r0, MSP

000008fe <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     8fe:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
     900:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
     902:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
     904:	2902      	cmp	r1, #2
    beq _oops
     906:	d000      	beq.n	90a <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
     908:	e792      	b.n	830 <_ExcExit>

0000090a <_oops>:

_oops:
    push {lr}
     90a:	b500      	push	{lr}
    blx _do_kernel_oops
     90c:	f000 f91c 	bl	b48 <_do_kernel_oops>
    pop {pc}
     910:	bd00      	pop	{pc}
     912:	46c0      	nop			; (mov r8, r8)

00000914 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
     914:	4905      	ldr	r1, [pc, #20]	; (92c <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
     916:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
     918:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
     91a:	4905      	ldr	r1, [pc, #20]	; (930 <__swap+0x1c>)
    ldr r1, [r1]
     91c:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
     91e:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
     920:	4904      	ldr	r1, [pc, #16]	; (934 <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
     922:	4b05      	ldr	r3, [pc, #20]	; (938 <__swap+0x24>)
    str r3, [r1, #0]
     924:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
     926:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
     928:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
     92a:	4770      	bx	lr
    ldr r1, =_kernel
     92c:	20000ba4 	.word	0x20000ba4
    ldr r1, =_k_neg_eagain
     930:	0000b028 	.word	0x0000b028
    ldr r1, =_SCS_ICSR
     934:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
     938:	10000000 	.word	0x10000000

0000093c <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     93c:	4b0e      	ldr	r3, [pc, #56]	; (978 <_Fault+0x3c>)
{
     93e:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     940:	685a      	ldr	r2, [r3, #4]
{
     942:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     944:	05d2      	lsls	r2, r2, #23
     946:	0dd2      	lsrs	r2, r2, #23
	switch (fault) {
     948:	2a03      	cmp	r2, #3
     94a:	d10e      	bne.n	96a <_Fault+0x2e>
	PR_EXC("***** HARD FAULT *****\n");
     94c:	480b      	ldr	r0, [pc, #44]	; (97c <_Fault+0x40>)
     94e:	f000 fb43 	bl	fd8 <printk>

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     952:	f009 fa5d 	bl	9e10 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
     956:	69a2      	ldr	r2, [r4, #24]
     958:	0001      	movs	r1, r0
     95a:	4809      	ldr	r0, [pc, #36]	; (980 <_Fault+0x44>)
	PR_EXC("***** %s %d) *****\n",
     95c:	f000 fb3c 	bl	fd8 <printk>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     960:	0021      	movs	r1, r4
     962:	2000      	movs	r0, #0
     964:	f000 f8f6 	bl	b54 <_SysFatalErrorHandler>
}
     968:	bd10      	pop	{r4, pc}
	PR_EXC("***** %s %d) *****\n",
     96a:	4906      	ldr	r1, [pc, #24]	; (984 <_Fault+0x48>)
     96c:	2a0f      	cmp	r2, #15
     96e:	dd00      	ble.n	972 <_Fault+0x36>
     970:	4905      	ldr	r1, [pc, #20]	; (988 <_Fault+0x4c>)
     972:	3a10      	subs	r2, #16
     974:	4805      	ldr	r0, [pc, #20]	; (98c <_Fault+0x50>)
     976:	e7f1      	b.n	95c <_Fault+0x20>
     978:	e000ed00 	.word	0xe000ed00
     97c:	0000aaf2 	.word	0x0000aaf2
     980:	0000ab0a 	.word	0x0000ab0a
     984:	0000aac4 	.word	0x0000aac4
     988:	0000aad9 	.word	0x0000aad9
     98c:	0000ab54 	.word	0x0000ab54

00000990 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     990:	4770      	bx	lr
	...

00000994 <_arch_irq_enable>:
  if ((int32_t)(IRQn) >= 0)
     994:	0603      	lsls	r3, r0, #24
     996:	d405      	bmi.n	9a4 <_arch_irq_enable+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     998:	231f      	movs	r3, #31
     99a:	4018      	ands	r0, r3
     99c:	3b1e      	subs	r3, #30
     99e:	4083      	lsls	r3, r0
     9a0:	4a01      	ldr	r2, [pc, #4]	; (9a8 <_arch_irq_enable+0x14>)
     9a2:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
     9a4:	4770      	bx	lr
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	e000e100 	.word	0xe000e100

000009ac <_arch_irq_disable>:
  if ((int32_t)(IRQn) >= 0)
     9ac:	0603      	lsls	r3, r0, #24
     9ae:	d409      	bmi.n	9c4 <_arch_irq_disable+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     9b0:	231f      	movs	r3, #31
     9b2:	4018      	ands	r0, r3
     9b4:	3b1e      	subs	r3, #30
     9b6:	4083      	lsls	r3, r0
     9b8:	4a03      	ldr	r2, [pc, #12]	; (9c8 <_arch_irq_disable+0x1c>)
     9ba:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     9bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     9c0:	f3bf 8f6f 	isb	sy
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
     9c4:	4770      	bx	lr
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	e000e104 	.word	0xe000e104

000009cc <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     9cc:	0943      	lsrs	r3, r0, #5
     9ce:	4a05      	ldr	r2, [pc, #20]	; (9e4 <_arch_irq_is_enabled+0x18>)
     9d0:	009b      	lsls	r3, r3, #2
     9d2:	589b      	ldr	r3, [r3, r2]
     9d4:	221f      	movs	r2, #31
     9d6:	4010      	ands	r0, r2
     9d8:	3a1e      	subs	r2, #30
     9da:	4082      	lsls	r2, r0
     9dc:	0010      	movs	r0, r2
     9de:	4018      	ands	r0, r3
}
     9e0:	4770      	bx	lr
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	e000e100 	.word	0xe000e100

000009e8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     9e8:	b243      	sxtb	r3, r0
{
     9ea:	b570      	push	{r4, r5, r6, lr}
     9ec:	0189      	lsls	r1, r1, #6
  if ((int32_t)(IRQn) >= 0)
     9ee:	2b00      	cmp	r3, #0
     9f0:	db12      	blt.n	a18 <_irq_priority_set+0x30>
     9f2:	4a14      	ldr	r2, [pc, #80]	; (a44 <_irq_priority_set+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     9f4:	089b      	lsrs	r3, r3, #2
     9f6:	2503      	movs	r5, #3
     9f8:	009b      	lsls	r3, r3, #2
     9fa:	189b      	adds	r3, r3, r2
     9fc:	22ff      	movs	r2, #255	; 0xff
     9fe:	4028      	ands	r0, r5
     a00:	40a8      	lsls	r0, r5
     a02:	0015      	movs	r5, r2
     a04:	24c0      	movs	r4, #192	; 0xc0
     a06:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     a08:	4011      	ands	r1, r2
     a0a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     a0c:	00a4      	lsls	r4, r4, #2
     a0e:	591e      	ldr	r6, [r3, r4]
     a10:	43ae      	bics	r6, r5
     a12:	4331      	orrs	r1, r6
     a14:	5119      	str	r1, [r3, r4]
}
     a16:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     a18:	2403      	movs	r4, #3
     a1a:	230f      	movs	r3, #15
     a1c:	b2c0      	uxtb	r0, r0
     a1e:	4003      	ands	r3, r0
     a20:	4020      	ands	r0, r4
     a22:	40a0      	lsls	r0, r4
     a24:	34fc      	adds	r4, #252	; 0xfc
     a26:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     a28:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     a2a:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     a2c:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     a2e:	3b08      	subs	r3, #8
     a30:	4a05      	ldr	r2, [pc, #20]	; (a48 <_irq_priority_set+0x60>)
     a32:	089b      	lsrs	r3, r3, #2
     a34:	009b      	lsls	r3, r3, #2
     a36:	189b      	adds	r3, r3, r2
     a38:	69da      	ldr	r2, [r3, #28]
     a3a:	43aa      	bics	r2, r5
     a3c:	4311      	orrs	r1, r2
     a3e:	61d9      	str	r1, [r3, #28]
     a40:	e7e9      	b.n	a16 <_irq_priority_set+0x2e>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	e000e100 	.word	0xe000e100
     a48:	e000ed00 	.word	0xe000ed00

00000a4c <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
     a4c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
     a4e:	f000 f843 	bl	ad8 <__hard_fault>
}
     a52:	bd10      	pop	{r4, pc}

00000a54 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     a54:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
     a56:	f3ef 8410 	mrs	r4, PRIMASK
     a5a:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     a5c:	4b05      	ldr	r3, [pc, #20]	; (a74 <_arch_isr_direct_pm+0x20>)
     a5e:	6998      	ldr	r0, [r3, #24]
     a60:	2800      	cmp	r0, #0
     a62:	d003      	beq.n	a6c <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     a64:	2200      	movs	r2, #0
     a66:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     a68:	f008 fd7c 	bl	9564 <_sys_power_save_idle_exit>
	if (key) {
     a6c:	2c00      	cmp	r4, #0
     a6e:	d100      	bne.n	a72 <_arch_isr_direct_pm+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
     a70:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
     a72:	bd10      	pop	{r4, pc}
     a74:	20000ba4 	.word	0x20000ba4

00000a78 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a7a:	0017      	movs	r7, r2
     a7c:	001e      	movs	r6, r3
     a7e:	000c      	movs	r4, r1
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a82:	9909      	ldr	r1, [sp, #36]	; 0x24
     a84:	2204      	movs	r2, #4
     a86:	0005      	movs	r5, r0
     a88:	f009 fcd8 	bl	a43c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     a8c:	0039      	movs	r1, r7
     a8e:	2207      	movs	r2, #7
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     a90:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
     a92:	2300      	movs	r3, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     a94:	3920      	subs	r1, #32
     a96:	1861      	adds	r1, r4, r1
     a98:	4391      	bics	r1, r2
	pInitCtx->pc &= 0xfffffffe;
     a9a:	4a09      	ldr	r2, [pc, #36]	; (ac0 <_new_thread+0x48>)
     a9c:	64eb      	str	r3, [r5, #76]	; 0x4c
     a9e:	4382      	bics	r2, r0
	thread->fn_abort = NULL;
     aa0:	652b      	str	r3, [r5, #80]	; 0x50
     aa2:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     aa4:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->a1 = (u32_t)pEntry;
     aa6:	600e      	str	r6, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
     aa8:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     aaa:	9a07      	ldr	r2, [sp, #28]
     aac:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     aae:	9a08      	ldr	r2, [sp, #32]
     ab0:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
     ab2:	2280      	movs	r2, #128	; 0x80
     ab4:	0452      	lsls	r2, r2, #17
     ab6:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     ab8:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     aba:	65ab      	str	r3, [r5, #88]	; 0x58
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
	thread_monitor_init(thread);
#endif
}
     abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	0000a2a9 	.word	0x0000a2a9

00000ac4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     ac4:	4901      	ldr	r1, [pc, #4]	; (acc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     ac6:	2210      	movs	r2, #16
	str r2, [r1]
     ac8:	600a      	str	r2, [r1, #0]
	bx lr
     aca:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     acc:	e000ed10 	.word	0xe000ed10

00000ad0 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
     ad0:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     ad2:	bf30      	wfi

	bx lr
     ad4:	4770      	bx	lr
     ad6:	46c0      	nop			; (mov r8, r8)

00000ad8 <__hard_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* force unlock interrupts */
	cpsie i
     ad8:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
     ada:	2004      	movs	r0, #4
	mov r1, lr
     adc:	4671      	mov	r1, lr
	tst r1, r0
     ade:	4201      	tst	r1, r0
	beq _stack_frame_msp
     ae0:	d002      	beq.n	ae8 <_stack_frame_msp>
	mrs r0, PSP
     ae2:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
     ae6:	d101      	bne.n	aec <_stack_frame_endif>

00000ae8 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
     ae8:	f3ef 8008 	mrs	r0, MSP

00000aec <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     aec:	b500      	push	{lr}
	bl _Fault
     aee:	f7ff ff25 	bl	93c <_Fault>

	pop {pc}
     af2:	bd00      	pop	{pc}

00000af4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
     af4:	b570      	push	{r4, r5, r6, lr}
     af6:	0004      	movs	r4, r0
     af8:	000d      	movs	r5, r1
	switch (reason) {
     afa:	2804      	cmp	r0, #4
     afc:	d009      	beq.n	b12 <_NanoFatalErrorHandler+0x1e>
     afe:	2805      	cmp	r0, #5
     b00:	d016      	beq.n	b30 <_NanoFatalErrorHandler+0x3c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     b02:	480c      	ldr	r0, [pc, #48]	; (b34 <_NanoFatalErrorHandler+0x40>)
	switch (reason) {
     b04:	2c03      	cmp	r4, #3
     b06:	d005      	beq.n	b14 <_NanoFatalErrorHandler+0x20>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     b08:	0021      	movs	r1, r4
     b0a:	480b      	ldr	r0, [pc, #44]	; (b38 <_NanoFatalErrorHandler+0x44>)
     b0c:	f000 fa64 	bl	fd8 <printk>
		break;
     b10:	e002      	b.n	b18 <_NanoFatalErrorHandler+0x24>
		printk("***** Kernel OOPS! *****\n");
     b12:	480a      	ldr	r0, [pc, #40]	; (b3c <_NanoFatalErrorHandler+0x48>)
     b14:	f000 fa60 	bl	fd8 <printk>
     b18:	f009 f97a 	bl	9e10 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
     b1c:	69aa      	ldr	r2, [r5, #24]
     b1e:	0001      	movs	r1, r0
     b20:	4807      	ldr	r0, [pc, #28]	; (b40 <_NanoFatalErrorHandler+0x4c>)
     b22:	f000 fa59 	bl	fd8 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     b26:	0029      	movs	r1, r5
     b28:	0020      	movs	r0, r4
     b2a:	f000 f813 	bl	b54 <_SysFatalErrorHandler>
}
     b2e:	bd70      	pop	{r4, r5, r6, pc}
		printk("***** Kernel Panic! *****\n");
     b30:	4804      	ldr	r0, [pc, #16]	; (b44 <_NanoFatalErrorHandler+0x50>)
     b32:	e7ef      	b.n	b14 <_NanoFatalErrorHandler+0x20>
     b34:	0000ab68 	.word	0x0000ab68
     b38:	0000abc3 	.word	0x0000abc3
     b3c:	0000ab8e 	.word	0x0000ab8e
     b40:	0000abe6 	.word	0x0000abe6
     b44:	0000aba8 	.word	0x0000aba8

00000b48 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     b48:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
     b4a:	0001      	movs	r1, r0
     b4c:	6800      	ldr	r0, [r0, #0]
     b4e:	f7ff ffd1 	bl	af4 <_NanoFatalErrorHandler>
}
     b52:	bd10      	pop	{r4, pc}

00000b54 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
     b54:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     b56:	2805      	cmp	r0, #5
     b58:	d00c      	beq.n	b74 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     b5a:	f009 fb93 	bl	a284 <k_is_in_isr>
     b5e:	2800      	cmp	r0, #0
     b60:	d00b      	beq.n	b7a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     b62:	f009 fb8f 	bl	a284 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     b66:	490b      	ldr	r1, [pc, #44]	; (b94 <_SysFatalErrorHandler+0x40>)
     b68:	2800      	cmp	r0, #0
     b6a:	d100      	bne.n	b6e <_SysFatalErrorHandler+0x1a>
     b6c:	490a      	ldr	r1, [pc, #40]	; (b98 <_SysFatalErrorHandler+0x44>)
     b6e:	480b      	ldr	r0, [pc, #44]	; (b9c <_SysFatalErrorHandler+0x48>)
     b70:	f000 fa32 	bl	fd8 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     b74:	f7ff ffac 	bl	ad0 <k_cpu_idle>
     b78:	e7fc      	b.n	b74 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     b7a:	f009 fb8d 	bl	a298 <_is_thread_essential>
     b7e:	2800      	cmp	r0, #0
     b80:	d1ef      	bne.n	b62 <_SysFatalErrorHandler+0xe>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     b82:	4c07      	ldr	r4, [pc, #28]	; (ba0 <_SysFatalErrorHandler+0x4c>)
     b84:	4807      	ldr	r0, [pc, #28]	; (ba4 <_SysFatalErrorHandler+0x50>)
     b86:	68a1      	ldr	r1, [r4, #8]
     b88:	f000 fa26 	bl	fd8 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     b8c:	68a0      	ldr	r0, [r4, #8]
     b8e:	f000 f80b 	bl	ba8 <_impl_k_thread_abort>
	}
	CODE_UNREACHABLE;
}
     b92:	bd10      	pop	{r4, pc}
     b94:	0000ac22 	.word	0x0000ac22
     b98:	0000ac26 	.word	0x0000ac26
     b9c:	0000ac37 	.word	0x0000ac37
     ba0:	20000ba4 	.word	0x20000ba4
     ba4:	0000ac57 	.word	0x0000ac57

00000ba8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     ba8:	b570      	push	{r4, r5, r6, lr}
     baa:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
     bac:	f3ef 8410 	mrs	r4, PRIMASK
     bb0:	b672      	cpsid	i
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     bb2:	f009 fbdb 	bl	a36c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     bb6:	4b0b      	ldr	r3, [pc, #44]	; (be4 <_impl_k_thread_abort+0x3c>)
     bb8:	689b      	ldr	r3, [r3, #8]
     bba:	429d      	cmp	r5, r3
     bbc:	d10d      	bne.n	bda <_impl_k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     bbe:	4b0a      	ldr	r3, [pc, #40]	; (be8 <_impl_k_thread_abort+0x40>)
     bc0:	685a      	ldr	r2, [r3, #4]
     bc2:	05d2      	lsls	r2, r2, #23
     bc4:	d104      	bne.n	bd0 <_impl_k_thread_abort+0x28>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     bc6:	f009 f951 	bl	9e6c <_update_time_slice_before_swap>

	return __swap(key);
     bca:	0020      	movs	r0, r4
     bcc:	f7ff fea2 	bl	914 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     bd0:	2280      	movs	r2, #128	; 0x80
     bd2:	6859      	ldr	r1, [r3, #4]
     bd4:	0552      	lsls	r2, r2, #21
     bd6:	430a      	orrs	r2, r1
     bd8:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     bda:	0020      	movs	r0, r4
     bdc:	f009 f8ae 	bl	9d3c <_reschedule_threads>
}
     be0:	bd70      	pop	{r4, r5, r6, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	20000ba4 	.word	0x20000ba4
     be8:	e000ed00 	.word	0xe000ed00

00000bec <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     bec:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     bee:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     bf0:	4a0a      	ldr	r2, [pc, #40]	; (c1c <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     bf2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     bf4:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	beq _idle_state_cleared
     bf6:	d003      	beq.n	c00 <_idle_state_cleared>
	movs.n r1, #0
     bf8:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
     bfa:	6191      	str	r1, [r2, #24]
	blx _sys_power_save_idle_exit
     bfc:	f008 fcb2 	bl	9564 <_sys_power_save_idle_exit>

00000c00 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     c00:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     c02:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
     c06:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
     c08:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
     c0a:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     c0c:	4904      	ldr	r1, [pc, #16]	; (c20 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     c0e:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     c10:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     c12:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
     c14:	bc08      	pop	{r3}
	mov lr, r3
     c16:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     c18:	e60a      	b.n	830 <_ExcExit>
     c1a:	0000      	.short	0x0000
	ldr r2, =_kernel
     c1c:	20000ba4 	.word	0x20000ba4
	ldr r1, =_sw_isr_table
     c20:	000000a8 	.word	0x000000a8

00000c24 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
     c24:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     c26:	4804      	ldr	r0, [pc, #16]	; (c38 <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     c28:	4904      	ldr	r1, [pc, #16]	; (c3c <__reset+0x18>)
    adds r0, r0, r1
     c2a:	1840      	adds	r0, r0, r1
    msr PSP, r0
     c2c:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     c30:	2002      	movs	r0, #2
    msr CONTROL, r0
     c32:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     c36:	e006      	b.n	c46 <_PrepC>
    ldr r0, =_interrupt_stack
     c38:	20001ad0 	.word	0x20001ad0
    ldr r1, =CONFIG_ISR_STACK_SIZE
     c3c:	00000280 	.word	0x00000280

00000c40 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     c40:	bf30      	wfi
    b _SysNmiOnReset
     c42:	e7fd      	b.n	c40 <_SysNmiOnReset>

00000c44 <relocate_vector_table>:
	size_t vector_size = (size_t)_vector_end - (size_t)_vector_start;
	memcpy(VECTOR_ADDRESS, _vector_start, vector_size);
#elif defined(CONFIG_SW_VECTOR_RELAY)
	_vector_table_pointer = _vector_start;
#endif
}
     c44:	4770      	bx	lr

00000c46 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     c46:	b510      	push	{r4, lr}
	relocate_vector_table();
     c48:	f7ff fffc 	bl	c44 <relocate_vector_table>
	enable_floating_point();
	_bss_zero();
     c4c:	f008 fcba 	bl	95c4 <_bss_zero>
	_data_copy();
     c50:	f008 fcc4 	bl	95dc <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     c54:	f008 fcec 	bl	9630 <_Cstart>

00000c58 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     c58:	b510      	push	{r4, lr}
	handler();
     c5a:	f7ff fff1 	bl	c40 <_SysNmiOnReset>
	_ExcExit();
     c5e:	f7ff fde7 	bl	830 <_ExcExit>
}
     c62:	bd10      	pop	{r4, pc}

00000c64 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c64:	2000      	movs	r0, #0
     c66:	4770      	bx	lr

00000c68 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c68:	680b      	ldr	r3, [r1, #0]
{
     c6a:	b510      	push	{r4, lr}
	ctx->count++;
     c6c:	3301      	adds	r3, #1
     c6e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c70:	4b01      	ldr	r3, [pc, #4]	; (c78 <char_out+0x10>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	4798      	blx	r3
}
     c76:	bd10      	pop	{r4, pc}
     c78:	20002150 	.word	0x20002150

00000c7c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7e:	b087      	sub	sp, #28
     c80:	9303      	str	r3, [sp, #12]
     c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     c84:	0007      	movs	r7, r0
     c86:	9102      	str	r1, [sp, #8]
     c88:	9300      	str	r3, [sp, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	dc01      	bgt.n	c92 <_printk_dec_ulong+0x16>
     c8e:	2301      	movs	r3, #1
     c90:	9300      	str	r3, [sp, #0]
     c92:	2320      	movs	r3, #32
     c94:	9305      	str	r3, [sp, #20]
     c96:	9b03      	ldr	r3, [sp, #12]
     c98:	2b01      	cmp	r3, #1
     c9a:	d101      	bne.n	ca0 <_printk_dec_ulong+0x24>
     c9c:	332f      	adds	r3, #47	; 0x2f
     c9e:	9305      	str	r3, [sp, #20]
     ca0:	230a      	movs	r3, #10
     ca2:	9301      	str	r3, [sp, #4]
     ca4:	2300      	movs	r3, #0
     ca6:	0014      	movs	r4, r2
     ca8:	2601      	movs	r6, #1
     caa:	4d1f      	ldr	r5, [pc, #124]	; (d28 <_printk_dec_ulong+0xac>)
     cac:	9304      	str	r3, [sp, #16]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     cae:	9b04      	ldr	r3, [sp, #16]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <_printk_dec_ulong+0x3c>
     cb4:	42a5      	cmp	r5, r4
     cb6:	d226      	bcs.n	d06 <_printk_dec_ulong+0x8a>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     cb8:	1c69      	adds	r1, r5, #1
     cba:	0020      	movs	r0, r4
     cbc:	f7ff fa84 	bl	1c8 <__aeabi_uidiv>
     cc0:	9902      	ldr	r1, [sp, #8]
     cc2:	3030      	adds	r0, #48	; 0x30
     cc4:	47b8      	blx	r7
			found_largest_digit = 1;
     cc6:	2301      	movs	r3, #1
			digits++;
     cc8:	3601      	adds	r6, #1
			found_largest_digit = 1;
     cca:	9304      	str	r3, [sp, #16]
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     ccc:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
     cce:	1c69      	adds	r1, r5, #1
		remaining--;
     cd0:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
     cd2:	0020      	movs	r0, r4
		remaining--;
     cd4:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
     cd6:	f7ff fabb 	bl	250 <__aeabi_uidivmod>
		pos /= 10;
     cda:	0028      	movs	r0, r5
		remainder %= (pos + 1);
     cdc:	000c      	movs	r4, r1
		pos /= 10;
     cde:	210a      	movs	r1, #10
     ce0:	f7ff fa72 	bl	1c8 <__aeabi_uidiv>
	while (pos >= 9) {
     ce4:	9b01      	ldr	r3, [sp, #4]
		pos /= 10;
     ce6:	0005      	movs	r5, r0
	while (pos >= 9) {
     ce8:	2b01      	cmp	r3, #1
     cea:	d1e0      	bne.n	cae <_printk_dec_ulong+0x32>
	}
	out((int)(remainder + 48), ctx);
     cec:	0020      	movs	r0, r4
     cee:	9902      	ldr	r1, [sp, #8]
     cf0:	3030      	adds	r0, #48	; 0x30
     cf2:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
     cf4:	9b03      	ldr	r3, [sp, #12]
     cf6:	2b03      	cmp	r3, #3
     cf8:	d103      	bne.n	d02 <_printk_dec_ulong+0x86>
		remaining = min_width - digits;
     cfa:	9b00      	ldr	r3, [sp, #0]
     cfc:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     cfe:	2c00      	cmp	r4, #0
     d00:	dc0d      	bgt.n	d1e <_printk_dec_ulong+0xa2>
			out(' ', ctx);
		}
	}
}
     d02:	b007      	add	sp, #28
     d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (remaining <= min_width
     d06:	9b00      	ldr	r3, [sp, #0]
     d08:	9a01      	ldr	r2, [sp, #4]
     d0a:	4293      	cmp	r3, r2
     d0c:	dbde      	blt.n	ccc <_printk_dec_ulong+0x50>
				&& padding < PAD_SPACE_AFTER) {
     d0e:	9b03      	ldr	r3, [sp, #12]
     d10:	2b02      	cmp	r3, #2
     d12:	d8db      	bhi.n	ccc <_printk_dec_ulong+0x50>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     d14:	9902      	ldr	r1, [sp, #8]
     d16:	9805      	ldr	r0, [sp, #20]
     d18:	47b8      	blx	r7
			digits++;
     d1a:	3601      	adds	r6, #1
     d1c:	e7d6      	b.n	ccc <_printk_dec_ulong+0x50>
			out(' ', ctx);
     d1e:	9902      	ldr	r1, [sp, #8]
     d20:	2020      	movs	r0, #32
     d22:	47b8      	blx	r7
     d24:	3c01      	subs	r4, #1
     d26:	e7ea      	b.n	cfe <_printk_dec_ulong+0x82>
     d28:	3b9ac9ff 	.word	0x3b9ac9ff

00000d2c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     d2c:	680a      	ldr	r2, [r1, #0]
{
     d2e:	b530      	push	{r4, r5, lr}
     d30:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
     d32:	2a00      	cmp	r2, #0
     d34:	d002      	beq.n	d3c <str_out+0x10>
     d36:	684c      	ldr	r4, [r1, #4]
     d38:	42a3      	cmp	r3, r4
     d3a:	db02      	blt.n	d42 <str_out+0x16>
		ctx->count++;
     d3c:	3301      	adds	r3, #1
     d3e:	608b      	str	r3, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
     d40:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
     d42:	1e65      	subs	r5, r4, #1
     d44:	42ab      	cmp	r3, r5
     d46:	d103      	bne.n	d50 <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
     d48:	608c      	str	r4, [r1, #8]
     d4a:	2100      	movs	r1, #0
     d4c:	54d1      	strb	r1, [r2, r3]
     d4e:	e7f7      	b.n	d40 <str_out+0x14>
		ctx->str[ctx->count++] = c;
     d50:	1c5c      	adds	r4, r3, #1
     d52:	608c      	str	r4, [r1, #8]
     d54:	54d0      	strb	r0, [r2, r3]
     d56:	e7f3      	b.n	d40 <str_out+0x14>

00000d58 <__printk_hook_install>:
	_char_out = fn;
     d58:	4b01      	ldr	r3, [pc, #4]	; (d60 <__printk_hook_install+0x8>)
     d5a:	6018      	str	r0, [r3, #0]
}
     d5c:	4770      	bx	lr
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	20002150 	.word	0x20002150

00000d64 <_vprintk>:
{
     d64:	b5f0      	push	{r4, r5, r6, r7, lr}
     d66:	001c      	movs	r4, r3
	int long_ctr = 0;
     d68:	2300      	movs	r3, #0
{
     d6a:	b08d      	sub	sp, #52	; 0x34
	int long_ctr = 0;
     d6c:	9305      	str	r3, [sp, #20]
	int min_width = -1;
     d6e:	3b01      	subs	r3, #1
     d70:	9303      	str	r3, [sp, #12]
	enum pad_type padding = PAD_NONE;
     d72:	2300      	movs	r3, #0
{
     d74:	0007      	movs	r7, r0
	int might_format = 0; /* 1 if encountered a '%' */
     d76:	001e      	movs	r6, r3
{
     d78:	9102      	str	r1, [sp, #8]
     d7a:	9207      	str	r2, [sp, #28]
	enum pad_type padding = PAD_NONE;
     d7c:	9304      	str	r3, [sp, #16]
	while (*fmt) {
     d7e:	9b07      	ldr	r3, [sp, #28]
     d80:	7818      	ldrb	r0, [r3, #0]
     d82:	2800      	cmp	r0, #0
     d84:	d101      	bne.n	d8a <_vprintk+0x26>
}
     d86:	b00d      	add	sp, #52	; 0x34
     d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!might_format) {
     d8a:	2e00      	cmp	r6, #0
     d8c:	d108      	bne.n	da0 <_vprintk+0x3c>
			if (*fmt != '%') {
     d8e:	2825      	cmp	r0, #37	; 0x25
     d90:	d100      	bne.n	d94 <_vprintk+0x30>
     d92:	e107      	b.n	fa4 <_vprintk+0x240>
				out((int)*fmt, ctx);
     d94:	9902      	ldr	r1, [sp, #8]
     d96:	47b8      	blx	r7
		++fmt;
     d98:	9b07      	ldr	r3, [sp, #28]
     d9a:	3301      	adds	r3, #1
     d9c:	9307      	str	r3, [sp, #28]
     d9e:	e7ee      	b.n	d7e <_vprintk+0x1a>
			switch (*fmt) {
     da0:	2864      	cmp	r0, #100	; 0x64
     da2:	d05d      	beq.n	e60 <_vprintk+0xfc>
     da4:	d818      	bhi.n	dd8 <_vprintk+0x74>
     da6:	2839      	cmp	r0, #57	; 0x39
     da8:	d80a      	bhi.n	dc0 <_vprintk+0x5c>
     daa:	2831      	cmp	r0, #49	; 0x31
     dac:	d24c      	bcs.n	e48 <_vprintk+0xe4>
     dae:	282d      	cmp	r0, #45	; 0x2d
     db0:	d039      	beq.n	e26 <_vprintk+0xc2>
     db2:	2830      	cmp	r0, #48	; 0x30
     db4:	d03a      	beq.n	e2c <_vprintk+0xc8>
     db6:	2825      	cmp	r0, #37	; 0x25
     db8:	d108      	bne.n	dcc <_vprintk+0x68>
				out((int)*fmt, ctx);
     dba:	9902      	ldr	r1, [sp, #8]
     dbc:	47b8      	blx	r7
     dbe:	e065      	b.n	e8c <_vprintk+0x128>
			switch (*fmt) {
     dc0:	2858      	cmp	r0, #88	; 0x58
     dc2:	d100      	bne.n	dc6 <_vprintk+0x62>
     dc4:	e087      	b.n	ed6 <_vprintk+0x172>
     dc6:	2863      	cmp	r0, #99	; 0x63
     dc8:	d100      	bne.n	dcc <_vprintk+0x68>
     dca:	e0e6      	b.n	f9a <_vprintk+0x236>
				out((int)'%', ctx);
     dcc:	9902      	ldr	r1, [sp, #8]
     dce:	2025      	movs	r0, #37	; 0x25
     dd0:	47b8      	blx	r7
				out((int)*fmt, ctx);
     dd2:	9b07      	ldr	r3, [sp, #28]
     dd4:	7818      	ldrb	r0, [r3, #0]
     dd6:	e7f0      	b.n	dba <_vprintk+0x56>
			switch (*fmt) {
     dd8:	2870      	cmp	r0, #112	; 0x70
     dda:	d072      	beq.n	ec2 <_vprintk+0x15e>
     ddc:	d806      	bhi.n	dec <_vprintk+0x88>
     dde:	2869      	cmp	r0, #105	; 0x69
     de0:	d03e      	beq.n	e60 <_vprintk+0xfc>
     de2:	286c      	cmp	r0, #108	; 0x6c
     de4:	d038      	beq.n	e58 <_vprintk+0xf4>
     de6:	2868      	cmp	r0, #104	; 0x68
     de8:	d1f0      	bne.n	dcc <_vprintk+0x68>
     dea:	e7d5      	b.n	d98 <_vprintk+0x34>
     dec:	2875      	cmp	r0, #117	; 0x75
     dee:	d057      	beq.n	ea0 <_vprintk+0x13c>
     df0:	d814      	bhi.n	e1c <_vprintk+0xb8>
     df2:	2873      	cmp	r0, #115	; 0x73
     df4:	d1ea      	bne.n	dcc <_vprintk+0x68>
				char *s = va_arg(ap, char *);
     df6:	6826      	ldr	r6, [r4, #0]
     df8:	1d25      	adds	r5, r4, #4
     dfa:	0034      	movs	r4, r6
				while (*s)
     dfc:	7820      	ldrb	r0, [r4, #0]
     dfe:	2800      	cmp	r0, #0
     e00:	d000      	beq.n	e04 <_vprintk+0xa0>
     e02:	e0c1      	b.n	f88 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     e04:	9b04      	ldr	r3, [sp, #16]
     e06:	2b03      	cmp	r3, #3
     e08:	d000      	beq.n	e0c <_vprintk+0xa8>
     e0a:	e0d4      	b.n	fb6 <_vprintk+0x252>
					int remaining = min_width - (s - start);
     e0c:	9b03      	ldr	r3, [sp, #12]
     e0e:	1ba4      	subs	r4, r4, r6
     e10:	1b1c      	subs	r4, r3, r4
					while (remaining-- > 0) {
     e12:	2c00      	cmp	r4, #0
     e14:	dd00      	ble.n	e18 <_vprintk+0xb4>
     e16:	e0bb      	b.n	f90 <_vprintk+0x22c>
				int c = va_arg(ap, int);
     e18:	002c      	movs	r4, r5
     e1a:	e037      	b.n	e8c <_vprintk+0x128>
			switch (*fmt) {
     e1c:	2878      	cmp	r0, #120	; 0x78
     e1e:	d05a      	beq.n	ed6 <_vprintk+0x172>
     e20:	287a      	cmp	r0, #122	; 0x7a
     e22:	d0b9      	beq.n	d98 <_vprintk+0x34>
     e24:	e7d2      	b.n	dcc <_vprintk+0x68>
				padding = PAD_SPACE_AFTER;
     e26:	2303      	movs	r3, #3
					padding = PAD_ZERO_BEFORE;
     e28:	9304      	str	r3, [sp, #16]
     e2a:	e7b5      	b.n	d98 <_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
     e2c:	9b03      	ldr	r3, [sp, #12]
     e2e:	2b00      	cmp	r3, #0
     e30:	da0d      	bge.n	e4e <_vprintk+0xea>
     e32:	9b04      	ldr	r3, [sp, #16]
     e34:	2b00      	cmp	r3, #0
     e36:	d100      	bne.n	e3a <_vprintk+0xd6>
     e38:	e0bb      	b.n	fb2 <_vprintk+0x24e>
				if (padding == PAD_NONE) {
     e3a:	9b04      	ldr	r3, [sp, #16]
					min_width = 10 * min_width + *fmt - '0';
     e3c:	3830      	subs	r0, #48	; 0x30
     e3e:	9003      	str	r0, [sp, #12]
				if (padding == PAD_NONE) {
     e40:	2b00      	cmp	r3, #0
     e42:	d1a9      	bne.n	d98 <_vprintk+0x34>
					padding = PAD_SPACE_BEFORE;
     e44:	3302      	adds	r3, #2
     e46:	e7ef      	b.n	e28 <_vprintk+0xc4>
				if (min_width < 0) {
     e48:	9b03      	ldr	r3, [sp, #12]
     e4a:	2b00      	cmp	r3, #0
     e4c:	dbf5      	blt.n	e3a <_vprintk+0xd6>
					min_width = 10 * min_width + *fmt - '0';
     e4e:	230a      	movs	r3, #10
     e50:	9a03      	ldr	r2, [sp, #12]
     e52:	4353      	muls	r3, r2
     e54:	1818      	adds	r0, r3, r0
     e56:	e7f0      	b.n	e3a <_vprintk+0xd6>
				long_ctr++;
     e58:	9b05      	ldr	r3, [sp, #20]
     e5a:	3301      	adds	r3, #1
     e5c:	9305      	str	r3, [sp, #20]
     e5e:	e79b      	b.n	d98 <_vprintk+0x34>
				if (long_ctr < 2) {
     e60:	9b05      	ldr	r3, [sp, #20]
     e62:	2b01      	cmp	r3, #1
     e64:	dc14      	bgt.n	e90 <_vprintk+0x12c>
					d = va_arg(ap, long);
     e66:	6825      	ldr	r5, [r4, #0]
     e68:	3404      	adds	r4, #4
				if (d < 0) {
     e6a:	2d00      	cmp	r5, #0
     e6c:	da06      	bge.n	e7c <_vprintk+0x118>
					out((int)'-', ctx);
     e6e:	9902      	ldr	r1, [sp, #8]
     e70:	202d      	movs	r0, #45	; 0x2d
     e72:	47b8      	blx	r7
					min_width--;
     e74:	9b03      	ldr	r3, [sp, #12]
					d = -d;
     e76:	426d      	negs	r5, r5
					min_width--;
     e78:	3b01      	subs	r3, #1
     e7a:	9303      	str	r3, [sp, #12]
				_printk_dec_ulong(out, ctx, d, padding,
     e7c:	002a      	movs	r2, r5
     e7e:	9b03      	ldr	r3, [sp, #12]
     e80:	9300      	str	r3, [sp, #0]
     e82:	9b04      	ldr	r3, [sp, #16]
				_printk_dec_ulong(out, ctx, u, padding,
     e84:	9902      	ldr	r1, [sp, #8]
     e86:	0038      	movs	r0, r7
     e88:	f7ff fef8 	bl	c7c <_printk_dec_ulong>
			might_format = 0;
     e8c:	2600      	movs	r6, #0
				break;
     e8e:	e783      	b.n	d98 <_vprintk+0x34>
					d = (long)va_arg(ap, long long);
     e90:	3407      	adds	r4, #7
     e92:	0023      	movs	r3, r4
     e94:	2207      	movs	r2, #7
     e96:	4393      	bics	r3, r2
     e98:	001c      	movs	r4, r3
     e9a:	681d      	ldr	r5, [r3, #0]
     e9c:	3408      	adds	r4, #8
     e9e:	e7e4      	b.n	e6a <_vprintk+0x106>
				if (long_ctr < 2) {
     ea0:	9b05      	ldr	r3, [sp, #20]
     ea2:	2b01      	cmp	r3, #1
     ea4:	dc05      	bgt.n	eb2 <_vprintk+0x14e>
					u = va_arg(ap, unsigned long);
     ea6:	6822      	ldr	r2, [r4, #0]
     ea8:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     eaa:	9b03      	ldr	r3, [sp, #12]
     eac:	9300      	str	r3, [sp, #0]
     eae:	9b04      	ldr	r3, [sp, #16]
     eb0:	e7e8      	b.n	e84 <_vprintk+0x120>
					u = (unsigned long)va_arg(ap,
     eb2:	3407      	adds	r4, #7
     eb4:	0023      	movs	r3, r4
     eb6:	2207      	movs	r2, #7
     eb8:	4393      	bics	r3, r2
     eba:	001c      	movs	r4, r3
     ebc:	681a      	ldr	r2, [r3, #0]
     ebe:	3408      	adds	r4, #8
     ec0:	e7f3      	b.n	eaa <_vprintk+0x146>
				  out('0', ctx);
     ec2:	9902      	ldr	r1, [sp, #8]
     ec4:	2030      	movs	r0, #48	; 0x30
     ec6:	47b8      	blx	r7
				  out('x', ctx);
     ec8:	9902      	ldr	r1, [sp, #8]
     eca:	2078      	movs	r0, #120	; 0x78
     ecc:	47b8      	blx	r7
				  min_width = 8;
     ece:	2308      	movs	r3, #8
     ed0:	9303      	str	r3, [sp, #12]
				  padding = PAD_ZERO_BEFORE;
     ed2:	3b07      	subs	r3, #7
     ed4:	9304      	str	r3, [sp, #16]
				if (long_ctr < 2) {
     ed6:	9b05      	ldr	r3, [sp, #20]
     ed8:	2b01      	cmp	r3, #1
     eda:	dc16      	bgt.n	f0a <_vprintk+0x1a6>
					x = va_arg(ap, unsigned long);
     edc:	6823      	ldr	r3, [r4, #0]
     ede:	3404      	adds	r4, #4
     ee0:	9309      	str	r3, [sp, #36]	; 0x24
	int remaining = 8; /* 8 digits max */
     ee2:	2308      	movs	r3, #8
     ee4:	9306      	str	r3, [sp, #24]
	int digits = 0;
     ee6:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
     ee8:	2508      	movs	r5, #8
	int digits = 0;
     eea:	9308      	str	r3, [sp, #32]
	int found_largest_digit = 0;
     eec:	930b      	str	r3, [sp, #44]	; 0x2c
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eee:	3d01      	subs	r5, #1
     ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
     ef2:	00ab      	lsls	r3, r5, #2
     ef4:	40d8      	lsrs	r0, r3
     ef6:	230f      	movs	r3, #15
     ef8:	4018      	ands	r0, r3
		if (nibble || found_largest_digit || size == 1) {
     efa:	d112      	bne.n	f22 <_vprintk+0x1be>
     efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     efe:	2b00      	cmp	r3, #0
     f00:	d101      	bne.n	f06 <_vprintk+0x1a2>
     f02:	2d00      	cmp	r5, #0
     f04:	d12c      	bne.n	f60 <_vprintk+0x1fc>
			nibble += nibble > 9 ? 87 : 48;
     f06:	2330      	movs	r3, #48	; 0x30
     f08:	e00f      	b.n	f2a <_vprintk+0x1c6>
					x = (unsigned long)va_arg(ap,
     f0a:	3407      	adds	r4, #7
     f0c:	0023      	movs	r3, r4
     f0e:	2207      	movs	r2, #7
     f10:	4393      	bics	r3, r2
     f12:	001c      	movs	r4, r3
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	3408      	adds	r4, #8
     f18:	9309      	str	r3, [sp, #36]	; 0x24
     f1a:	e7e2      	b.n	ee2 <_vprintk+0x17e>
	for (; size; size--) {
     f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f1e:	9306      	str	r3, [sp, #24]
     f20:	e7e5      	b.n	eee <_vprintk+0x18a>
			nibble += nibble > 9 ? 87 : 48;
     f22:	2357      	movs	r3, #87	; 0x57
     f24:	2809      	cmp	r0, #9
     f26:	d800      	bhi.n	f2a <_vprintk+0x1c6>
     f28:	3b27      	subs	r3, #39	; 0x27
			out((int)nibble, ctx);
     f2a:	18c0      	adds	r0, r0, r3
     f2c:	9902      	ldr	r1, [sp, #8]
     f2e:	47b8      	blx	r7
			digits++;
     f30:	9b08      	ldr	r3, [sp, #32]
			found_largest_digit = 1;
     f32:	960b      	str	r6, [sp, #44]	; 0x2c
			digits++;
     f34:	3301      	adds	r3, #1
     f36:	9308      	str	r3, [sp, #32]
     f38:	9b06      	ldr	r3, [sp, #24]
     f3a:	930a      	str	r3, [sp, #40]	; 0x28
	for (; size; size--) {
     f3c:	2d00      	cmp	r5, #0
     f3e:	d1ed      	bne.n	f1c <_vprintk+0x1b8>
	if (padding == PAD_SPACE_AFTER) {
     f40:	9b04      	ldr	r3, [sp, #16]
			might_format = 0;
     f42:	002e      	movs	r6, r5
	if (padding == PAD_SPACE_AFTER) {
     f44:	2b03      	cmp	r3, #3
     f46:	d000      	beq.n	f4a <_vprintk+0x1e6>
     f48:	e726      	b.n	d98 <_vprintk+0x34>
		remaining = min_width * 2 - digits;
     f4a:	9b03      	ldr	r3, [sp, #12]
     f4c:	005d      	lsls	r5, r3, #1
     f4e:	9b08      	ldr	r3, [sp, #32]
     f50:	1aed      	subs	r5, r5, r3
		while (remaining-- > 0) {
     f52:	2d00      	cmp	r5, #0
     f54:	dd9a      	ble.n	e8c <_vprintk+0x128>
			out(' ', ctx);
     f56:	9902      	ldr	r1, [sp, #8]
     f58:	2020      	movs	r0, #32
     f5a:	47b8      	blx	r7
     f5c:	3d01      	subs	r5, #1
     f5e:	e7f8      	b.n	f52 <_vprintk+0x1ee>
		if (remaining-- <= min_width) {
     f60:	9b06      	ldr	r3, [sp, #24]
     f62:	9a06      	ldr	r2, [sp, #24]
     f64:	3b01      	subs	r3, #1
     f66:	930a      	str	r3, [sp, #40]	; 0x28
     f68:	9b03      	ldr	r3, [sp, #12]
     f6a:	4293      	cmp	r3, r2
     f6c:	dbe6      	blt.n	f3c <_vprintk+0x1d8>
			if (padding == PAD_ZERO_BEFORE) {
     f6e:	9b04      	ldr	r3, [sp, #16]
     f70:	2b01      	cmp	r3, #1
     f72:	d103      	bne.n	f7c <_vprintk+0x218>
				out('0', ctx);
     f74:	2030      	movs	r0, #48	; 0x30
     f76:	9902      	ldr	r1, [sp, #8]
				out(' ', ctx);
     f78:	47b8      	blx	r7
     f7a:	e7df      	b.n	f3c <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
     f7c:	9b04      	ldr	r3, [sp, #16]
     f7e:	2b02      	cmp	r3, #2
     f80:	d1dc      	bne.n	f3c <_vprintk+0x1d8>
				out(' ', ctx);
     f82:	9902      	ldr	r1, [sp, #8]
     f84:	2020      	movs	r0, #32
     f86:	e7f7      	b.n	f78 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f88:	9902      	ldr	r1, [sp, #8]
     f8a:	3401      	adds	r4, #1
     f8c:	47b8      	blx	r7
     f8e:	e735      	b.n	dfc <_vprintk+0x98>
						out(' ', ctx);
     f90:	9902      	ldr	r1, [sp, #8]
     f92:	2020      	movs	r0, #32
     f94:	47b8      	blx	r7
     f96:	3c01      	subs	r4, #1
     f98:	e73b      	b.n	e12 <_vprintk+0xae>
				out(c, ctx);
     f9a:	9902      	ldr	r1, [sp, #8]
     f9c:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f9e:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     fa0:	47b8      	blx	r7
     fa2:	e739      	b.n	e18 <_vprintk+0xb4>
				min_width = -1;
     fa4:	2301      	movs	r3, #1
     fa6:	425b      	negs	r3, r3
				long_ctr = 0;
     fa8:	9605      	str	r6, [sp, #20]
				padding = PAD_NONE;
     faa:	9604      	str	r6, [sp, #16]
				min_width = -1;
     fac:	9303      	str	r3, [sp, #12]
				might_format = 1;
     fae:	2601      	movs	r6, #1
     fb0:	e6f2      	b.n	d98 <_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
     fb2:	2301      	movs	r3, #1
     fb4:	e738      	b.n	e28 <_vprintk+0xc4>
				char *s = va_arg(ap, char *);
     fb6:	002c      	movs	r4, r5
			might_format = 0;
     fb8:	0006      	movs	r6, r0
     fba:	e6ed      	b.n	d98 <_vprintk+0x34>

00000fbc <vprintk>:
{
     fbc:	b507      	push	{r0, r1, r2, lr}
     fbe:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
     fc0:	2100      	movs	r1, #0
{
     fc2:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
     fc4:	9101      	str	r1, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
     fc6:	4803      	ldr	r0, [pc, #12]	; (fd4 <vprintk+0x18>)
     fc8:	a901      	add	r1, sp, #4
     fca:	f7ff fecb 	bl	d64 <_vprintk>
}
     fce:	9801      	ldr	r0, [sp, #4]
     fd0:	bd0e      	pop	{r1, r2, r3, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	00000c69 	.word	0x00000c69

00000fd8 <printk>:
{
     fd8:	b40f      	push	{r0, r1, r2, r3}
     fda:	b507      	push	{r0, r1, r2, lr}
     fdc:	a904      	add	r1, sp, #16
     fde:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
     fe0:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     fe2:	f7ff ffeb 	bl	fbc <vprintk>
}
     fe6:	b003      	add	sp, #12
     fe8:	bc08      	pop	{r3}
     fea:	b004      	add	sp, #16
     fec:	4718      	bx	r3
	...

00000ff0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     ff0:	b40c      	push	{r2, r3}
     ff2:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     ff4:	2500      	movs	r5, #0
{
     ff6:	b085      	sub	sp, #20
     ff8:	ab08      	add	r3, sp, #32
     ffa:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
     ffc:	9001      	str	r0, [sp, #4]
     ffe:	9102      	str	r1, [sp, #8]
{
    1000:	0004      	movs	r4, r0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1002:	a901      	add	r1, sp, #4
    1004:	4807      	ldr	r0, [pc, #28]	; (1024 <snprintk+0x34>)
	va_start(ap, fmt);
    1006:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    1008:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    100a:	f7ff feab 	bl	d64 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    100e:	9803      	ldr	r0, [sp, #12]
    1010:	9b02      	ldr	r3, [sp, #8]
    1012:	4298      	cmp	r0, r3
    1014:	da00      	bge.n	1018 <snprintk+0x28>
		str[ctx.count] = '\0';
    1016:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    1018:	b005      	add	sp, #20
    101a:	bc30      	pop	{r4, r5}
    101c:	bc08      	pop	{r3}
    101e:	b002      	add	sp, #8
    1020:	4718      	bx	r3
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	00000d2d 	.word	0x00000d2d

00001028 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 26);

GEN_ABS_SYM_END
    1028:	4770      	bx	lr
	...

0000102c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	0004      	movs	r4, r0
    1030:	4d07      	ldr	r5, [pc, #28]	; (1050 <console_out+0x24>)
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1032:	280a      	cmp	r0, #10
    1034:	d104      	bne.n	1040 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1036:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    1038:	210d      	movs	r1, #13
    103a:	6843      	ldr	r3, [r0, #4]
    103c:	685b      	ldr	r3, [r3, #4]
    103e:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1040:	6828      	ldr	r0, [r5, #0]
    1042:	b2e1      	uxtb	r1, r4
    1044:	6843      	ldr	r3, [r0, #4]
    1046:	685b      	ldr	r3, [r3, #4]
    1048:	4798      	blx	r3

	return c;
}
    104a:	0020      	movs	r0, r4
    104c:	bd70      	pop	{r4, r5, r6, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	20000010 	.word	0x20000010

00001054 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1054:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1056:	4802      	ldr	r0, [pc, #8]	; (1060 <uart_console_hook_install+0xc>)
    1058:	f7ff fe7e 	bl	d58 <__printk_hook_install>
}
    105c:	bd10      	pop	{r4, pc}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	0000102d 	.word	0x0000102d

00001064 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1064:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1066:	4804      	ldr	r0, [pc, #16]	; (1078 <uart_console_init+0x14>)
    1068:	f008 fa54 	bl	9514 <device_get_binding>
    106c:	4b03      	ldr	r3, [pc, #12]	; (107c <uart_console_init+0x18>)
    106e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1070:	f7ff fff0 	bl	1054 <uart_console_hook_install>

	return 0;
}
    1074:	2000      	movs	r0, #0
    1076:	bd10      	pop	{r4, pc}
    1078:	0000ac7c 	.word	0x0000ac7c
    107c:	20000010 	.word	0x20000010

00001080 <reset_display>:
		gpio_port_write(disp->dev, val);
	}
}

static void reset_display(struct mb_display *disp)
{
    1080:	b510      	push	{r4, lr}
    1082:	0004      	movs	r4, r0
	k_timer_stop(&disp->timer);
    1084:	3004      	adds	r0, #4

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
    1086:	f009 fad1 	bl	a62c <_impl_k_timer_stop>

	disp->str = NULL;
	disp->cur_img = 0;
    108a:	0022      	movs	r2, r4
	disp->str = NULL;
    108c:	2300      	movs	r3, #0
	disp->cur_img = 0;
    108e:	3239      	adds	r2, #57	; 0x39
	disp->str = NULL;
    1090:	6563      	str	r3, [r4, #84]	; 0x54
	disp->img = NULL;
	disp->img_count = 0;
    1092:	3a01      	subs	r2, #1
	disp->cur_img = 0;
    1094:	7053      	strb	r3, [r2, #1]
	disp->img_count = 0;
    1096:	7013      	strb	r3, [r2, #0]
	disp->scroll = SCROLL_OFF;
    1098:	2207      	movs	r2, #7
    109a:	343a      	adds	r4, #58	; 0x3a
    109c:	7823      	ldrb	r3, [r4, #0]
    109e:	4393      	bics	r3, r2
    10a0:	7023      	strb	r3, [r4, #0]
}
    10a2:	bd10      	pop	{r4, pc}

000010a4 <start_image>:
{
    10a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    10a6:	0002      	movs	r2, r0
    10a8:	0004      	movs	r4, r0
    10aa:	468c      	mov	ip, r1
	for (row = 0; row < DISPLAY_ROWS; row++) {
    10ac:	2300      	movs	r3, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    10ae:	2601      	movs	r6, #1
    10b0:	323c      	adds	r2, #60	; 0x3c
    10b2:	2709      	movs	r7, #9
		disp->row[row] = 0;
    10b4:	2100      	movs	r1, #0
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    10b6:	435f      	muls	r7, r3
		disp->row[row] = 0;
    10b8:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    10ba:	000d      	movs	r5, r1
			if (GET_PIXEL(img, map[row][col].x, map[row][col].y)) {
    10bc:	491d      	ldr	r1, [pc, #116]	; (1134 <start_image+0x90>)
    10be:	19c9      	adds	r1, r1, r7
    10c0:	9101      	str	r1, [sp, #4]
    10c2:	4667      	mov	r7, ip
    10c4:	9901      	ldr	r1, [sp, #4]
    10c6:	5d48      	ldrb	r0, [r1, r5]
    10c8:	0901      	lsrs	r1, r0, #4
    10ca:	5c79      	ldrb	r1, [r7, r1]
    10cc:	0700      	lsls	r0, r0, #28
    10ce:	0f00      	lsrs	r0, r0, #28
    10d0:	40c1      	lsrs	r1, r0
    10d2:	4231      	tst	r1, r6
    10d4:	d006      	beq.n	10e4 <start_image+0x40>
				disp->row[row] |= BIT(LED_COL1_GPIO_PIN + col);
    10d6:	0030      	movs	r0, r6
    10d8:	1d29      	adds	r1, r5, #4
    10da:	4088      	lsls	r0, r1
    10dc:	0001      	movs	r1, r0
    10de:	6810      	ldr	r0, [r2, #0]
    10e0:	4301      	orrs	r1, r0
    10e2:	6011      	str	r1, [r2, #0]
		for (col = 0; col < DISPLAY_COLS; col++) {
    10e4:	3501      	adds	r5, #1
    10e6:	2d09      	cmp	r5, #9
    10e8:	d1eb      	bne.n	10c2 <start_image+0x1e>
		disp->row[row] = ~disp->row[row] & col_mask;
    10ea:	6810      	ldr	r0, [r2, #0]
    10ec:	4912      	ldr	r1, [pc, #72]	; (1138 <start_image+0x94>)
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    10ee:	0035      	movs	r5, r6
		disp->row[row] = ~disp->row[row] & col_mask;
    10f0:	4381      	bics	r1, r0
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    10f2:	0018      	movs	r0, r3
    10f4:	300d      	adds	r0, #13
    10f6:	4085      	lsls	r5, r0
	for (row = 0; row < DISPLAY_ROWS; row++) {
    10f8:	3301      	adds	r3, #1
		disp->row[row] |= BIT(LED_ROW1_GPIO_PIN + row);
    10fa:	4329      	orrs	r1, r5
    10fc:	c202      	stmia	r2!, {r1}
	for (row = 0; row < DISPLAY_ROWS; row++) {
    10fe:	2b03      	cmp	r3, #3
    1100:	d1d7      	bne.n	10b2 <start_image+0xe>
	disp->cur = 0;
    1102:	0023      	movs	r3, r4
    1104:	2200      	movs	r2, #0
    1106:	333b      	adds	r3, #59	; 0x3b
    1108:	701a      	strb	r2, [r3, #0]
	if (disp->duration == K_FOREVER) {
    110a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    110c:	3301      	adds	r3, #1
    110e:	d10a      	bne.n	1126 <start_image+0x82>
		disp->expiry = K_FOREVER;
    1110:	2201      	movs	r2, #1
    1112:	4252      	negs	r2, r2
    1114:	17d3      	asrs	r3, r2, #31
		disp->expiry = k_uptime_get() + disp->duration;
    1116:	64a2      	str	r2, [r4, #72]	; 0x48
    1118:	64e3      	str	r3, [r4, #76]	; 0x4c
	k_timer_start(&disp->timer, K_NO_WAIT, K_MSEC(4));
    111a:	1d20      	adds	r0, r4, #4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
    111c:	2204      	movs	r2, #4
    111e:	2100      	movs	r1, #0
    1120:	f009 fa65 	bl	a5ee <_impl_k_timer_start>
}
    1124:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_TIMER_USER_DATA_SET, k_timer_user_data_set, struct k_timer *, timer, void *, user_data);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer);

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    1126:	f008 ff63 	bl	9ff0 <_impl_k_uptime_get>
		disp->expiry = k_uptime_get() + disp->duration;
    112a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    112c:	17d3      	asrs	r3, r2, #31
    112e:	1812      	adds	r2, r2, r0
    1130:	414b      	adcs	r3, r1
    1132:	e7f0      	b.n	1116 <start_image+0x72>
    1134:	0000ac83 	.word	0x0000ac83
    1138:	00001ff0 	.word	0x00001ff0

0000113c <gpio_pin_configure.constprop.4>:
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    113c:	b510      	push	{r4, lr}
	return api->config(port, access_op, pin, flags);
    113e:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_configure(struct device *port, u32_t pin,
    1140:	000a      	movs	r2, r1
	return api->config(port, access_op, pin, flags);
    1142:	681c      	ldr	r4, [r3, #0]
    1144:	2100      	movs	r1, #0
    1146:	2301      	movs	r3, #1
    1148:	47a0      	blx	r4
}
    114a:	bd10      	pop	{r4, pc}

0000114c <mb_display_init>:
{
	return &display;
}

static int mb_display_init(struct device *dev)
{
    114c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    114e:	481b      	ldr	r0, [pc, #108]	; (11bc <mb_display_init+0x70>)
    1150:	f008 f9e0 	bl	9514 <device_get_binding>
    1154:	4c1a      	ldr	r4, [pc, #104]	; (11c0 <mb_display_init+0x74>)

	__ASSERT(dev, "No GPIO device found");

	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    1156:	210d      	movs	r1, #13
	display.dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1158:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(display.dev, LED_ROW1_GPIO_PIN, GPIO_DIR_OUT);
    115a:	f7ff ffef 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW2_GPIO_PIN, GPIO_DIR_OUT);
    115e:	210e      	movs	r1, #14
    1160:	6820      	ldr	r0, [r4, #0]
    1162:	f7ff ffeb 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_ROW3_GPIO_PIN, GPIO_DIR_OUT);
    1166:	210f      	movs	r1, #15
    1168:	6820      	ldr	r0, [r4, #0]
    116a:	f7ff ffe7 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL1_GPIO_PIN, GPIO_DIR_OUT);
    116e:	2104      	movs	r1, #4
    1170:	6820      	ldr	r0, [r4, #0]
    1172:	f7ff ffe3 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL2_GPIO_PIN, GPIO_DIR_OUT);
    1176:	2105      	movs	r1, #5
    1178:	6820      	ldr	r0, [r4, #0]
    117a:	f7ff ffdf 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL3_GPIO_PIN, GPIO_DIR_OUT);
    117e:	2106      	movs	r1, #6
    1180:	6820      	ldr	r0, [r4, #0]
    1182:	f7ff ffdb 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL4_GPIO_PIN, GPIO_DIR_OUT);
    1186:	2107      	movs	r1, #7
    1188:	6820      	ldr	r0, [r4, #0]
    118a:	f7ff ffd7 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL5_GPIO_PIN, GPIO_DIR_OUT);
    118e:	2108      	movs	r1, #8
    1190:	6820      	ldr	r0, [r4, #0]
    1192:	f7ff ffd3 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL6_GPIO_PIN, GPIO_DIR_OUT);
    1196:	2109      	movs	r1, #9
    1198:	6820      	ldr	r0, [r4, #0]
    119a:	f7ff ffcf 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL7_GPIO_PIN, GPIO_DIR_OUT);
    119e:	210a      	movs	r1, #10
    11a0:	6820      	ldr	r0, [r4, #0]
    11a2:	f7ff ffcb 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL8_GPIO_PIN, GPIO_DIR_OUT);
    11a6:	210b      	movs	r1, #11
    11a8:	6820      	ldr	r0, [r4, #0]
    11aa:	f7ff ffc7 	bl	113c <gpio_pin_configure.constprop.4>
	gpio_pin_configure(display.dev, LED_COL9_GPIO_PIN, GPIO_DIR_OUT);
    11ae:	210c      	movs	r1, #12
    11b0:	6820      	ldr	r0, [r4, #0]
    11b2:	f7ff ffc3 	bl	113c <gpio_pin_configure.constprop.4>

	return 0;
}
    11b6:	2000      	movs	r0, #0
    11b8:	bd10      	pop	{r4, pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	0000aab7 	.word	0x0000aab7
    11c0:	20002158 	.word	0x20002158

000011c4 <current_img>:
	if (disp->scroll && disp->first) {
    11c4:	0002      	movs	r2, r0
    11c6:	323a      	adds	r2, #58	; 0x3a
    11c8:	7812      	ldrb	r2, [r2, #0]
{
    11ca:	0003      	movs	r3, r0
	if (disp->scroll && disp->first) {
    11cc:	0751      	lsls	r1, r2, #29
    11ce:	d002      	beq.n	11d6 <current_img+0x12>
		return get_font(' ');
    11d0:	480c      	ldr	r0, [pc, #48]	; (1204 <current_img+0x40>)
	if (disp->scroll && disp->first) {
    11d2:	0711      	lsls	r1, r2, #28
    11d4:	d40e      	bmi.n	11f4 <current_img+0x30>
    11d6:	0019      	movs	r1, r3
    11d8:	3139      	adds	r1, #57	; 0x39
	if (disp->text) {
    11da:	0692      	lsls	r2, r2, #26
    11dc:	d50b      	bpl.n	11f6 <current_img+0x32>
		return get_font(disp->str[disp->cur_img]);
    11de:	780a      	ldrb	r2, [r1, #0]
    11e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    11e2:	4808      	ldr	r0, [pc, #32]	; (1204 <current_img+0x40>)
    11e4:	5c9b      	ldrb	r3, [r3, r2]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    11e6:	3b20      	subs	r3, #32
    11e8:	b2da      	uxtb	r2, r3
    11ea:	2a5e      	cmp	r2, #94	; 0x5e
    11ec:	d802      	bhi.n	11f4 <current_img+0x30>
	return &mb_font[ch - MB_FONT_START];
    11ee:	2205      	movs	r2, #5
    11f0:	4353      	muls	r3, r2
    11f2:	18c0      	adds	r0, r0, r3
}
    11f4:	4770      	bx	lr
		return &disp->img[disp->cur_img];
    11f6:	2005      	movs	r0, #5
    11f8:	780a      	ldrb	r2, [r1, #0]
    11fa:	4342      	muls	r2, r0
    11fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
    11fe:	1880      	adds	r0, r0, r2
    1200:	e7f8      	b.n	11f4 <current_img+0x30>
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	0000ac9e 	.word	0x0000ac9e

00001208 <clear_display>:
{
    1208:	3804      	subs	r0, #4
    120a:	b510      	push	{r4, lr}
    120c:	6800      	ldr	r0, [r0, #0]
	return api->write(port, access_op, pin, value);
    120e:	2200      	movs	r2, #0
    1210:	6843      	ldr	r3, [r0, #4]
    1212:	2101      	movs	r1, #1
    1214:	685c      	ldr	r4, [r3, #4]
    1216:	4b01      	ldr	r3, [pc, #4]	; (121c <clear_display+0x14>)
    1218:	47a0      	blx	r4
}
    121a:	bd10      	pop	{r4, pc}
    121c:	00001ff0 	.word	0x00001ff0

00001220 <show_row>:
{
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    1222:	0004      	movs	r4, r0
	update_pins(disp, disp->row[disp->cur]);
    1224:	0026      	movs	r6, r4
    1226:	3637      	adds	r6, #55	; 0x37
    1228:	1f05      	subs	r5, r0, #4
    122a:	7833      	ldrb	r3, [r6, #0]
    122c:	6828      	ldr	r0, [r5, #0]
    122e:	330e      	adds	r3, #14
    1230:	6842      	ldr	r2, [r0, #4]
    1232:	009b      	lsls	r3, r3, #2
    1234:	18eb      	adds	r3, r5, r3
    1236:	6857      	ldr	r7, [r2, #4]
{
    1238:	b087      	sub	sp, #28
    123a:	685b      	ldr	r3, [r3, #4]
    123c:	2200      	movs	r2, #0
    123e:	2101      	movs	r1, #1
    1240:	47b8      	blx	r7
	disp->cur = (disp->cur + 1) % DISPLAY_ROWS;
    1242:	7830      	ldrb	r0, [r6, #0]
    1244:	2103      	movs	r1, #3
    1246:	3001      	adds	r0, #1
    1248:	f7ff f862 	bl	310 <__aeabi_idivmod>
    124c:	1e0f      	subs	r7, r1, #0
    124e:	7031      	strb	r1, [r6, #0]
	if (disp->cur == 0 && disp->expiry != K_FOREVER &&
    1250:	d000      	beq.n	1254 <show_row+0x34>
    1252:	e091      	b.n	1378 <show_row+0x158>
    1254:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1256:	3301      	adds	r3, #1
    1258:	d103      	bne.n	1262 <show_row+0x42>
    125a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    125c:	3301      	adds	r3, #1
    125e:	d100      	bne.n	1262 <show_row+0x42>
    1260:	e08a      	b.n	1378 <show_row+0x158>
    1262:	f008 fec5 	bl	9ff0 <_impl_k_uptime_get>
    1266:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1268:	428b      	cmp	r3, r1
    126a:	db05      	blt.n	1278 <show_row+0x58>
    126c:	d000      	beq.n	1270 <show_row+0x50>
    126e:	e083      	b.n	1378 <show_row+0x158>
    1270:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1272:	4283      	cmp	r3, r0
    1274:	d300      	bcc.n	1278 <show_row+0x58>
    1276:	e07f      	b.n	1378 <show_row+0x158>
		if (disp->scroll) {
    1278:	0021      	movs	r1, r4
    127a:	3136      	adds	r1, #54	; 0x36
    127c:	780a      	ldrb	r2, [r1, #0]
    127e:	0753      	lsls	r3, r2, #29
    1280:	d100      	bne.n	1284 <show_row+0x64>
    1282:	e097      	b.n	13b4 <show_row+0x194>
	return 5 + disp->img_sep;
    1284:	0653      	lsls	r3, r2, #25
    1286:	0fdb      	lsrs	r3, r3, #31
    1288:	3305      	adds	r3, #5
	if (disp->scroll < scroll_steps(disp)) {
    128a:	0756      	lsls	r6, r2, #29
    128c:	b2db      	uxtb	r3, r3
    128e:	0f76      	lsrs	r6, r6, #29
    1290:	9300      	str	r3, [sp, #0]
    1292:	429e      	cmp	r6, r3
    1294:	da58      	bge.n	1348 <show_row+0x128>
	if (disp->text) {
    1296:	2320      	movs	r3, #32
    1298:	4013      	ands	r3, r2
    129a:	9303      	str	r3, [sp, #12]
		if (disp->first) {
    129c:	2308      	movs	r3, #8
    129e:	401a      	ands	r2, r3
    12a0:	9201      	str	r2, [sp, #4]
			const struct mb_image *i1 = current_img(disp);
    12a2:	0028      	movs	r0, r5
    12a4:	f7ff ff8e 	bl	11c4 <current_img>
	if (disp->text) {
    12a8:	9b03      	ldr	r3, [sp, #12]
			const struct mb_image *i1 = current_img(disp);
    12aa:	9002      	str	r0, [sp, #8]
    12ac:	1f22      	subs	r2, r4, #4
	if (disp->text) {
    12ae:	2b00      	cmp	r3, #0
    12b0:	d035      	beq.n	131e <show_row+0xfe>
		if (disp->first) {
    12b2:	9b01      	ldr	r3, [sp, #4]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d023      	beq.n	1300 <show_row+0xe0>
			return get_font(disp->str[0]);
    12b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
    12ba:	781a      	ldrb	r2, [r3, #0]
    12bc:	4b4a      	ldr	r3, [pc, #296]	; (13e8 <show_row+0x1c8>)
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    12be:	3a20      	subs	r2, #32
    12c0:	b2d1      	uxtb	r1, r2
    12c2:	295e      	cmp	r1, #94	; 0x5e
    12c4:	d802      	bhi.n	12cc <show_row+0xac>
	return &mb_font[ch - MB_FONT_START];
    12c6:	2105      	movs	r1, #5
    12c8:	434a      	muls	r2, r1
    12ca:	189b      	adds	r3, r3, r2
				      (i2->row[i] << (scroll_steps(disp) -
    12cc:	9a00      	ldr	r2, [sp, #0]
    12ce:	5ddb      	ldrb	r3, [r3, r7]
    12d0:	1b92      	subs	r2, r2, r6
    12d2:	4093      	lsls	r3, r2
			img.row[i] = ((i1->row[i] >> disp->scroll) |
    12d4:	9a02      	ldr	r2, [sp, #8]
    12d6:	5dd2      	ldrb	r2, [r2, r7]
    12d8:	4132      	asrs	r2, r6
    12da:	4313      	orrs	r3, r2
    12dc:	aa04      	add	r2, sp, #16
    12de:	54bb      	strb	r3, [r7, r2]
		for (i = 0; i < 5; i++) {
    12e0:	3701      	adds	r7, #1
    12e2:	2f05      	cmp	r7, #5
    12e4:	d1dd      	bne.n	12a2 <show_row+0x82>
		disp->scroll++;
    12e6:	2207      	movs	r2, #7
    12e8:	3436      	adds	r4, #54	; 0x36
    12ea:	7823      	ldrb	r3, [r4, #0]
    12ec:	3601      	adds	r6, #1
    12ee:	4016      	ands	r6, r2
    12f0:	4393      	bics	r3, r2
    12f2:	431e      	orrs	r6, r3
    12f4:	7026      	strb	r6, [r4, #0]
		start_image(disp, &img);
    12f6:	a904      	add	r1, sp, #16
	start_image(disp, current_img(disp));
    12f8:	0028      	movs	r0, r5
    12fa:	f7ff fed3 	bl	10a4 <start_image>
}
    12fe:	e03b      	b.n	1378 <show_row+0x158>
		} else if (disp->str[disp->cur_img]) {
    1300:	0023      	movs	r3, r4
    1302:	3335      	adds	r3, #53	; 0x35
    1304:	6d52      	ldr	r2, [r2, #84]	; 0x54
    1306:	7819      	ldrb	r1, [r3, #0]
    1308:	5c53      	ldrb	r3, [r2, r1]
    130a:	469c      	mov	ip, r3
    130c:	4660      	mov	r0, ip
			return get_font(' ');
    130e:	4b36      	ldr	r3, [pc, #216]	; (13e8 <show_row+0x1c8>)
		} else if (disp->str[disp->cur_img]) {
    1310:	2800      	cmp	r0, #0
    1312:	d0db      	beq.n	12cc <show_row+0xac>
			return get_font(disp->str[disp->cur_img + 1]);
    1314:	1852      	adds	r2, r2, r1
    1316:	7852      	ldrb	r2, [r2, #1]
	if (ch < MB_FONT_START || ch > MB_FONT_END) {
    1318:	3a20      	subs	r2, #32
    131a:	b2d1      	uxtb	r1, r2
    131c:	e7d1      	b.n	12c2 <show_row+0xa2>
		if (disp->first) {
    131e:	9b01      	ldr	r3, [sp, #4]
    1320:	2b00      	cmp	r3, #0
    1322:	d001      	beq.n	1328 <show_row+0x108>
			return &disp->img[0];
    1324:	6d53      	ldr	r3, [r2, #84]	; 0x54
    1326:	e7d1      	b.n	12cc <show_row+0xac>
		} else if (disp->cur_img < (disp->img_count - 1)) {
    1328:	0023      	movs	r3, r4
    132a:	3335      	adds	r3, #53	; 0x35
    132c:	7819      	ldrb	r1, [r3, #0]
    132e:	3b01      	subs	r3, #1
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	3b01      	subs	r3, #1
    1334:	469c      	mov	ip, r3
			return get_font(' ');
    1336:	4b2c      	ldr	r3, [pc, #176]	; (13e8 <show_row+0x1c8>)
		} else if (disp->cur_img < (disp->img_count - 1)) {
    1338:	4561      	cmp	r1, ip
    133a:	dac7      	bge.n	12cc <show_row+0xac>
			return &disp->img[disp->cur_img + 1];
    133c:	2305      	movs	r3, #5
    133e:	3101      	adds	r1, #1
    1340:	4359      	muls	r1, r3
    1342:	6d53      	ldr	r3, [r2, #84]	; 0x54
    1344:	185b      	adds	r3, r3, r1
    1346:	e7c1      	b.n	12cc <show_row+0xac>
    1348:	0020      	movs	r0, r4
		if (disp->first) {
    134a:	2308      	movs	r3, #8
    134c:	3035      	adds	r0, #53	; 0x35
    134e:	421a      	tst	r2, r3
    1350:	d014      	beq.n	137c <show_row+0x15c>
			disp->first = 0;
    1352:	439a      	bics	r2, r3
    1354:	700a      	strb	r2, [r1, #0]
	if (disp->text) {
    1356:	2320      	movs	r3, #32
    1358:	780a      	ldrb	r2, [r1, #0]
    135a:	4013      	ands	r3, r2
    135c:	d012      	beq.n	1384 <show_row+0x164>
		return (disp->str[disp->cur_img] == '\0');
    135e:	7803      	ldrb	r3, [r0, #0]
    1360:	6d6c      	ldr	r4, [r5, #84]	; 0x54
    1362:	5ce4      	ldrb	r4, [r4, r3]
    1364:	4263      	negs	r3, r4
    1366:	4163      	adcs	r3, r4
		return (disp->cur_img >= disp->img_count);
    1368:	b2db      	uxtb	r3, r3
		if (last_frame(disp)) {
    136a:	2b00      	cmp	r3, #0
    136c:	d016      	beq.n	139c <show_row+0x17c>
			if (!disp->loop) {
    136e:	06d3      	lsls	r3, r2, #27
    1370:	d40e      	bmi.n	1390 <show_row+0x170>
			reset_display(disp);
    1372:	0028      	movs	r0, r5
    1374:	f7ff fe84 	bl	1080 <reset_display>
}
    1378:	b007      	add	sp, #28
    137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			disp->cur_img++;
    137c:	7803      	ldrb	r3, [r0, #0]
    137e:	3301      	adds	r3, #1
    1380:	7003      	strb	r3, [r0, #0]
    1382:	e7e8      	b.n	1356 <show_row+0x136>
		return (disp->cur_img >= disp->img_count);
    1384:	3434      	adds	r4, #52	; 0x34
    1386:	7806      	ldrb	r6, [r0, #0]
    1388:	7824      	ldrb	r4, [r4, #0]
    138a:	42a6      	cmp	r6, r4
    138c:	415b      	adcs	r3, r3
    138e:	e7eb      	b.n	1368 <show_row+0x148>
			disp->cur_img = 0;
    1390:	2300      	movs	r3, #0
    1392:	7003      	strb	r3, [r0, #0]
			disp->first = 1;
    1394:	780a      	ldrb	r2, [r1, #0]
    1396:	3308      	adds	r3, #8
    1398:	4313      	orrs	r3, r2
    139a:	700b      	strb	r3, [r1, #0]
		disp->scroll = SCROLL_START;
    139c:	2207      	movs	r2, #7
    139e:	780b      	ldrb	r3, [r1, #0]
    13a0:	4393      	bics	r3, r2
    13a2:	001a      	movs	r2, r3
    13a4:	2301      	movs	r3, #1
    13a6:	4313      	orrs	r3, r2
		disp->cur_img = 0;
    13a8:	700b      	strb	r3, [r1, #0]
	start_image(disp, current_img(disp));
    13aa:	0028      	movs	r0, r5
    13ac:	f7ff ff0a 	bl	11c4 <current_img>
    13b0:	0001      	movs	r1, r0
    13b2:	e7a1      	b.n	12f8 <show_row+0xd8>
	disp->cur_img++;
    13b4:	0021      	movs	r1, r4
	if (disp->text) {
    13b6:	2320      	movs	r3, #32
	disp->cur_img++;
    13b8:	3135      	adds	r1, #53	; 0x35
    13ba:	7808      	ldrb	r0, [r1, #0]
	if (disp->text) {
    13bc:	4013      	ands	r3, r2
	disp->cur_img++;
    13be:	3001      	adds	r0, #1
    13c0:	b2c0      	uxtb	r0, r0
    13c2:	7008      	strb	r0, [r1, #0]
	if (disp->text) {
    13c4:	2b00      	cmp	r3, #0
    13c6:	d00a      	beq.n	13de <show_row+0x1be>
		return (disp->str[disp->cur_img] == '\0');
    13c8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    13ca:	5c18      	ldrb	r0, [r3, r0]
    13cc:	4243      	negs	r3, r0
    13ce:	4143      	adcs	r3, r0
		return (disp->cur_img >= disp->img_count);
    13d0:	b2db      	uxtb	r3, r3
	if (last_frame(disp)) {
    13d2:	2b00      	cmp	r3, #0
    13d4:	d0e9      	beq.n	13aa <show_row+0x18a>
		if (!disp->loop) {
    13d6:	06d3      	lsls	r3, r2, #27
    13d8:	d5cb      	bpl.n	1372 <show_row+0x152>
		disp->cur_img = 0;
    13da:	2300      	movs	r3, #0
    13dc:	e7e4      	b.n	13a8 <show_row+0x188>
		return (disp->cur_img >= disp->img_count);
    13de:	3434      	adds	r4, #52	; 0x34
    13e0:	7824      	ldrb	r4, [r4, #0]
    13e2:	42a0      	cmp	r0, r4
    13e4:	415b      	adcs	r3, r3
    13e6:	e7f3      	b.n	13d0 <show_row+0x1b0>
    13e8:	0000ac9e 	.word	0x0000ac9e

000013ec <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    13ec:	b510      	push	{r4, lr}
    13ee:	f3ef 8210 	mrs	r2, PRIMASK
    13f2:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    13f4:	4915      	ldr	r1, [pc, #84]	; (144c <_m16src_stop+0x60>)
    13f6:	780b      	ldrb	r3, [r1, #0]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d105      	bne.n	1408 <_m16src_stop+0x1c>
	if (key) {
    13fc:	2a00      	cmp	r2, #0
    13fe:	d100      	bne.n	1402 <_m16src_stop+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    1400:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    1402:	2045      	movs	r0, #69	; 0x45
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    1404:	4240      	negs	r0, r0
    1406:	e013      	b.n	1430 <_m16src_stop+0x44>
	if (--m16src_ref) {
    1408:	3b01      	subs	r3, #1
    140a:	b2db      	uxtb	r3, r3
    140c:	700b      	strb	r3, [r1, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d004      	beq.n	141c <_m16src_stop+0x30>
	if (key) {
    1412:	2a00      	cmp	r2, #0
    1414:	d100      	bne.n	1418 <_m16src_stop+0x2c>
	__asm__ volatile("cpsie i" : : : "memory");
    1416:	b662      	cpsie	i
		return -EBUSY;
    1418:	2010      	movs	r0, #16
    141a:	e7f3      	b.n	1404 <_m16src_stop+0x18>
	if (m16src_grd) {
    141c:	4b0c      	ldr	r3, [pc, #48]	; (1450 <_m16src_stop+0x64>)
    141e:	2001      	movs	r0, #1
    1420:	781c      	ldrb	r4, [r3, #0]
    1422:	2c00      	cmp	r4, #0
    1424:	d005      	beq.n	1432 <_m16src_stop+0x46>
		m16src_ref++;
    1426:	7008      	strb	r0, [r1, #0]
	if (key) {
    1428:	2a00      	cmp	r2, #0
    142a:	d10d      	bne.n	1448 <_m16src_stop+0x5c>
	__asm__ volatile("cpsie i" : : : "memory");
    142c:	b662      	cpsie	i
		return -EAGAIN;
    142e:	380c      	subs	r0, #12

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1430:	bd10      	pop	{r4, pc}
	m16src_grd = 1;
    1432:	7018      	strb	r0, [r3, #0]
	if (key) {
    1434:	2a00      	cmp	r2, #0
    1436:	d100      	bne.n	143a <_m16src_stop+0x4e>
	__asm__ volatile("cpsie i" : : : "memory");
    1438:	b662      	cpsie	i
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    143a:	2280      	movs	r2, #128	; 0x80
    143c:	2101      	movs	r1, #1
	m16src_grd = 0;
    143e:	2000      	movs	r0, #0
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1440:	05d2      	lsls	r2, r2, #23
    1442:	6051      	str	r1, [r2, #4]
	m16src_grd = 0;
    1444:	7018      	strb	r0, [r3, #0]
	return 0;
    1446:	e7f3      	b.n	1430 <_m16src_stop+0x44>
		return -EAGAIN;
    1448:	200b      	movs	r0, #11
    144a:	e7db      	b.n	1404 <_m16src_stop+0x18>
    144c:	20000016 	.word	0x20000016
    1450:	20000015 	.word	0x20000015

00001454 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1454:	2200      	movs	r2, #0
{
    1456:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1458:	0010      	movs	r0, r2
    145a:	2101      	movs	r1, #1
    145c:	f7ff fac4 	bl	9e8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1460:	2000      	movs	r0, #0
    1462:	f7ff fa97 	bl	994 <_arch_irq_enable>

	return 0;
}
    1466:	2000      	movs	r0, #0
    1468:	bd10      	pop	{r4, pc}
	...

0000146c <_m16src_start>:
{
    146c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    146e:	f3ef 8310 	mrs	r3, PRIMASK
    1472:	b672      	cpsid	i
	if (m16src_ref++) {
    1474:	4a27      	ldr	r2, [pc, #156]	; (1514 <_m16src_start+0xa8>)
    1476:	7810      	ldrb	r0, [r2, #0]
    1478:	1c44      	adds	r4, r0, #1
    147a:	7014      	strb	r4, [r2, #0]
    147c:	2800      	cmp	r0, #0
    147e:	d00b      	beq.n	1498 <_m16src_start+0x2c>
	if (key) {
    1480:	2b00      	cmp	r3, #0
    1482:	d100      	bne.n	1486 <_m16src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    1484:	b662      	cpsie	i
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1486:	2280      	movs	r2, #128	; 0x80
    1488:	4b23      	ldr	r3, [pc, #140]	; (1518 <_m16src_start+0xac>)
    148a:	05d2      	lsls	r2, r2, #23
    148c:	58d3      	ldr	r3, [r2, r3]
		return 0;
    148e:	2000      	movs	r0, #0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1490:	03db      	lsls	r3, r3, #15
    1492:	d400      	bmi.n	1496 <_m16src_start+0x2a>
		return -EINPROGRESS;
    1494:	3844      	subs	r0, #68	; 0x44
}
    1496:	bd70      	pop	{r4, r5, r6, pc}
	if (m16src_grd) {
    1498:	4e20      	ldr	r6, [pc, #128]	; (151c <_m16src_start+0xb0>)
    149a:	7834      	ldrb	r4, [r6, #0]
    149c:	2c00      	cmp	r4, #0
    149e:	d006      	beq.n	14ae <_m16src_start+0x42>
		m16src_ref--;
    14a0:	7010      	strb	r0, [r2, #0]
	if (key) {
    14a2:	2b00      	cmp	r3, #0
    14a4:	d100      	bne.n	14a8 <_m16src_start+0x3c>
	__asm__ volatile("cpsie i" : : : "memory");
    14a6:	b662      	cpsie	i
		return -EAGAIN;
    14a8:	200b      	movs	r0, #11
    14aa:	4240      	negs	r0, r0
    14ac:	e7f3      	b.n	1496 <_m16src_start+0x2a>
	m16src_grd = 1;
    14ae:	2201      	movs	r2, #1
    14b0:	7032      	strb	r2, [r6, #0]
	if (key) {
    14b2:	2b00      	cmp	r3, #0
    14b4:	d100      	bne.n	14b8 <_m16src_start+0x4c>
	__asm__ volatile("cpsie i" : : : "memory");
    14b6:	b662      	cpsie	i
    14b8:	2480      	movs	r4, #128	; 0x80
    14ba:	4d19      	ldr	r5, [pc, #100]	; (1520 <_m16src_start+0xb4>)
    14bc:	05e4      	lsls	r4, r4, #23
	if (blocking) {
    14be:	2900      	cmp	r1, #0
    14c0:	d024      	beq.n	150c <_m16src_start+0xa0>
		irq_disable(POWER_CLOCK_IRQn);
    14c2:	2000      	movs	r0, #0
    14c4:	f7ff fa72 	bl	9ac <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14c8:	2300      	movs	r3, #0
		intenset = NRF_CLOCK->INTENSET;
    14ca:	22c1      	movs	r2, #193	; 0xc1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14cc:	606b      	str	r3, [r5, #4]
		intenset = NRF_CLOCK->INTENSET;
    14ce:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    14d0:	3301      	adds	r3, #1
		intenset = NRF_CLOCK->INTENSET;
    14d2:	58a1      	ldr	r1, [r4, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    14d4:	50a3      	str	r3, [r4, r2]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    14d6:	6023      	str	r3, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    14d8:	686b      	ldr	r3, [r5, #4]
    14da:	2b00      	cmp	r3, #0
    14dc:	d012      	beq.n	1504 <_m16src_start+0x98>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14de:	2300      	movs	r3, #0
    14e0:	606b      	str	r3, [r5, #4]
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    14e2:	3301      	adds	r3, #1
    14e4:	4219      	tst	r1, r3
    14e6:	d102      	bne.n	14ee <_m16src_start+0x82>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    14e8:	22c2      	movs	r2, #194	; 0xc2
    14ea:	0092      	lsls	r2, r2, #2
    14ec:	50a3      	str	r3, [r4, r2]
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    14ee:	23c0      	movs	r3, #192	; 0xc0
    14f0:	2101      	movs	r1, #1
    14f2:	4a0c      	ldr	r2, [pc, #48]	; (1524 <_m16src_start+0xb8>)
    14f4:	005b      	lsls	r3, r3, #1
    14f6:	50d1      	str	r1, [r2, r3]
		irq_enable(POWER_CLOCK_IRQn);
    14f8:	2000      	movs	r0, #0
    14fa:	f7ff fa4b 	bl	994 <_arch_irq_enable>
	m16src_grd = 0;
    14fe:	2300      	movs	r3, #0
    1500:	7033      	strb	r3, [r6, #0]
    1502:	e7c0      	b.n	1486 <_m16src_start+0x1a>
			__WFE();
    1504:	bf20      	wfe
			__SEV();
    1506:	bf40      	sev
			__WFE();
    1508:	bf20      	wfe
    150a:	e7e5      	b.n	14d8 <_m16src_start+0x6c>
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    150c:	2301      	movs	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    150e:	6069      	str	r1, [r5, #4]
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1510:	6023      	str	r3, [r4, #0]
    1512:	e7f4      	b.n	14fe <_m16src_start+0x92>
    1514:	20000016 	.word	0x20000016
    1518:	0000040c 	.word	0x0000040c
    151c:	20000015 	.word	0x20000015
    1520:	400000fc 	.word	0x400000fc
    1524:	e000e100 	.word	0xe000e100

00001528 <_k32src_start>:
{
    1528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    152a:	0007      	movs	r7, r0
    152c:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    152e:	f3ef 8310 	mrs	r3, PRIMASK
    1532:	b672      	cpsid	i
	if (k32src_initialized) {
    1534:	4a2d      	ldr	r2, [pc, #180]	; (15ec <_k32src_start+0xc4>)
    1536:	7811      	ldrb	r1, [r2, #0]
    1538:	2900      	cmp	r1, #0
    153a:	d00c      	beq.n	1556 <_k32src_start+0x2e>
	if (key) {
    153c:	2b00      	cmp	r3, #0
    153e:	d100      	bne.n	1542 <_k32src_start+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    1540:	b662      	cpsie	i
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1542:	2383      	movs	r3, #131	; 0x83
    1544:	2280      	movs	r2, #128	; 0x80
    1546:	00db      	lsls	r3, r3, #3
    1548:	05d2      	lsls	r2, r2, #23
    154a:	58d3      	ldr	r3, [r2, r3]
		return 0;
    154c:	2000      	movs	r0, #0
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    154e:	03db      	lsls	r3, r3, #15
    1550:	d400      	bmi.n	1554 <_k32src_start+0x2c>
		return -EINPROGRESS;
    1552:	3844      	subs	r0, #68	; 0x44
}
    1554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1556:	2101      	movs	r1, #1
    1558:	7011      	strb	r1, [r2, #0]
	if (key) {
    155a:	2b00      	cmp	r3, #0
    155c:	d100      	bne.n	1560 <_k32src_start+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    155e:	b662      	cpsie	i
	irq_disable(POWER_CLOCK_IRQn);
    1560:	2000      	movs	r0, #0
    1562:	f7ff fa23 	bl	9ac <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1566:	2200      	movs	r2, #0
    1568:	4c21      	ldr	r4, [pc, #132]	; (15f0 <_k32src_start+0xc8>)
    156a:	2380      	movs	r3, #128	; 0x80
    156c:	60a2      	str	r2, [r4, #8]
	intenset = NRF_CLOCK->INTENSET;
    156e:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1570:	2002      	movs	r0, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1572:	05db      	lsls	r3, r3, #23
	intenset = NRF_CLOCK->INTENSET;
    1574:	0092      	lsls	r2, r2, #2
    1576:	5899      	ldr	r1, [r3, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1578:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    157a:	22a3      	movs	r2, #163	; 0xa3
    157c:	00d2      	lsls	r2, r2, #3
    157e:	509d      	str	r5, [r3, r2]
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1580:	2201      	movs	r2, #1
    1582:	609a      	str	r2, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1584:	68a2      	ldr	r2, [r4, #8]
    1586:	2a00      	cmp	r2, #0
    1588:	d02c      	beq.n	15e4 <_k32src_start+0xbc>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    158a:	2200      	movs	r2, #0
    158c:	60a2      	str	r2, [r4, #8]
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    158e:	3202      	adds	r2, #2
    1590:	4211      	tst	r1, r2
    1592:	d102      	bne.n	159a <_k32src_start+0x72>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1594:	21c2      	movs	r1, #194	; 0xc2
    1596:	0089      	lsls	r1, r1, #2
    1598:	505a      	str	r2, [r3, r1]
    159a:	23c0      	movs	r3, #192	; 0xc0
    159c:	2601      	movs	r6, #1
    159e:	4a15      	ldr	r2, [pc, #84]	; (15f4 <_k32src_start+0xcc>)
    15a0:	005b      	lsls	r3, r3, #1
    15a2:	50d6      	str	r6, [r2, r3]
	irq_enable(POWER_CLOCK_IRQn);
    15a4:	2000      	movs	r0, #0
    15a6:	f7ff f9f5 	bl	994 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    15aa:	2380      	movs	r3, #128	; 0x80
    15ac:	22c2      	movs	r2, #194	; 0xc2
    15ae:	2018      	movs	r0, #24
    15b0:	0092      	lsls	r2, r2, #2
    15b2:	05db      	lsls	r3, r3, #23
    15b4:	5098      	str	r0, [r3, r2]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15b6:	2103      	movs	r1, #3
	NRF_CLOCK->EVENTS_DONE = 0;
    15b8:	2200      	movs	r2, #0
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15ba:	4029      	ands	r1, r5
	NRF_CLOCK->EVENTS_DONE = 0;
    15bc:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    15be:	6162      	str	r2, [r4, #20]
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15c0:	4291      	cmp	r1, r2
    15c2:	d1be      	bne.n	1542 <_k32src_start+0x1a>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    15c4:	22a7      	movs	r2, #167	; 0xa7
    15c6:	2410      	movs	r4, #16
    15c8:	00d2      	lsls	r2, r2, #3
    15ca:	509c      	str	r4, [r3, r2]
		NRF_CLOCK->INTENSET =
    15cc:	22c1      	movs	r2, #193	; 0xc1
    15ce:	0092      	lsls	r2, r2, #2
    15d0:	5098      	str	r0, [r3, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    15d2:	509e      	str	r6, [r3, r2]
		err = _m16src_start(dev, false);
    15d4:	0038      	movs	r0, r7
    15d6:	f7ff ff49 	bl	146c <_m16src_start>
		if (!err) {
    15da:	2800      	cmp	r0, #0
    15dc:	d1b1      	bne.n	1542 <_k32src_start+0x1a>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    15de:	4b06      	ldr	r3, [pc, #24]	; (15f8 <_k32src_start+0xd0>)
    15e0:	605e      	str	r6, [r3, #4]
    15e2:	e7ae      	b.n	1542 <_k32src_start+0x1a>
		__WFE();
    15e4:	bf20      	wfe
		__SEV();
    15e6:	bf40      	sev
		__WFE();
    15e8:	bf20      	wfe
    15ea:	e7cb      	b.n	1584 <_k32src_start+0x5c>
    15ec:	20000014 	.word	0x20000014
    15f0:	400000fc 	.word	0x400000fc
    15f4:	e000e100 	.word	0xe000e100
    15f8:	e000e1fc 	.word	0xe000e1fc

000015fc <_power_clock_isr>:
{
    15fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    15fe:	4c24      	ldr	r4, [pc, #144]	; (1690 <_power_clock_isr+0x94>)
    1600:	2380      	movs	r3, #128	; 0x80
    1602:	68e2      	ldr	r2, [r4, #12]
    1604:	05db      	lsls	r3, r3, #23
    1606:	4694      	mov	ip, r2
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1608:	22c1      	movs	r2, #193	; 0xc1
    160a:	0092      	lsls	r2, r2, #2
    160c:	5899      	ldr	r1, [r3, r2]
    160e:	2201      	movs	r2, #1
    1610:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1612:	4920      	ldr	r1, [pc, #128]	; (1694 <_power_clock_isr+0x98>)
{
    1614:	0005      	movs	r5, r0
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1616:	585e      	ldr	r6, [r3, r1]
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1618:	9200      	str	r2, [sp, #0]
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    161a:	6867      	ldr	r7, [r4, #4]
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    161c:	68a0      	ldr	r0, [r4, #8]
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    161e:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1620:	6962      	ldr	r2, [r4, #20]
    1622:	9201      	str	r2, [sp, #4]
	if (pof) {
    1624:	4662      	mov	r2, ip
    1626:	2a00      	cmp	r2, #0
    1628:	d001      	beq.n	162e <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    162a:	2200      	movs	r2, #0
    162c:	60e2      	str	r2, [r4, #12]
	if (hf) {
    162e:	2f00      	cmp	r7, #0
    1630:	d001      	beq.n	1636 <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1632:	2700      	movs	r7, #0
    1634:	6067      	str	r7, [r4, #4]
	if (hf_intenset && hf_stat) {
    1636:	9a00      	ldr	r2, [sp, #0]
    1638:	2a00      	cmp	r2, #0
    163a:	d006      	beq.n	164a <_power_clock_isr+0x4e>
    163c:	03f2      	lsls	r2, r6, #15
    163e:	d504      	bpl.n	164a <_power_clock_isr+0x4e>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1640:	26c2      	movs	r6, #194	; 0xc2
    1642:	2201      	movs	r2, #1
    1644:	00b6      	lsls	r6, r6, #2
    1646:	519a      	str	r2, [r3, r6]
		NRF_CLOCK->TASKS_CAL = 1;
    1648:	611a      	str	r2, [r3, #16]
	if (lf) {
    164a:	2800      	cmp	r0, #0
    164c:	d001      	beq.n	1652 <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    164e:	2300      	movs	r3, #0
    1650:	60a3      	str	r3, [r4, #8]
	if (done) {
    1652:	2900      	cmp	r1, #0
    1654:	d008      	beq.n	1668 <_power_clock_isr+0x6c>
		NRF_CLOCK->EVENTS_DONE = 0;
    1656:	2100      	movs	r1, #0
		err = _m16src_stop(dev, NULL);
    1658:	0028      	movs	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    165a:	6121      	str	r1, [r4, #16]
		err = _m16src_stop(dev, NULL);
    165c:	f7ff fec6 	bl	13ec <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    1660:	2380      	movs	r3, #128	; 0x80
    1662:	2201      	movs	r2, #1
    1664:	05db      	lsls	r3, r3, #23
    1666:	615a      	str	r2, [r3, #20]
	if (ctto) {
    1668:	9b01      	ldr	r3, [sp, #4]
    166a:	2b00      	cmp	r3, #0
    166c:	d00e      	beq.n	168c <_power_clock_isr+0x90>
		NRF_CLOCK->EVENTS_CTTO = 0;
    166e:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1670:	23c1      	movs	r3, #193	; 0xc1
    1672:	2280      	movs	r2, #128	; 0x80
		NRF_CLOCK->EVENTS_CTTO = 0;
    1674:	6161      	str	r1, [r4, #20]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1676:	2401      	movs	r4, #1
    1678:	009b      	lsls	r3, r3, #2
    167a:	05d2      	lsls	r2, r2, #23
    167c:	50d4      	str	r4, [r2, r3]
		err = _m16src_start(dev, false);
    167e:	0028      	movs	r0, r5
    1680:	f7ff fef4 	bl	146c <_m16src_start>
		if (!err) {
    1684:	2800      	cmp	r0, #0
    1686:	d101      	bne.n	168c <_power_clock_isr+0x90>
    1688:	4b03      	ldr	r3, [pc, #12]	; (1698 <_power_clock_isr+0x9c>)
    168a:	605c      	str	r4, [r3, #4]
}
    168c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	400000fc 	.word	0x400000fc
    1694:	0000040c 	.word	0x0000040c
    1698:	e000e1fc 	.word	0xe000e1fc

0000169c <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    169c:	6803      	ldr	r3, [r0, #0]
{
    169e:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    16a0:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    16a2:	2501      	movs	r5, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    16a4:	689a      	ldr	r2, [r3, #8]
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    16a6:	261f      	movs	r6, #31
		if ((data->gpiote_chan_mask & BIT(i)) &&
    16a8:	6883      	ldr	r3, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    16aa:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    16ac:	68dc      	ldr	r4, [r3, #12]
    16ae:	0023      	movs	r3, r4
    16b0:	40c3      	lsrs	r3, r0
    16b2:	422b      	tst	r3, r5
    16b4:	d008      	beq.n	16c8 <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    16b6:	0003      	movs	r3, r0
    16b8:	3345      	adds	r3, #69	; 0x45
    16ba:	33ff      	adds	r3, #255	; 0xff
    16bc:	009b      	lsls	r3, r3, #2
    16be:	589b      	ldr	r3, [r3, r2]
    16c0:	0a1b      	lsrs	r3, r3, #8
    16c2:	4033      	ands	r3, r6
		if ((data->gpiote_chan_mask & BIT(i)) &&
    16c4:	428b      	cmp	r3, r1
    16c6:	d003      	beq.n	16d0 <gpiote_find_channel+0x34>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    16c8:	3001      	adds	r0, #1
    16ca:	2804      	cmp	r0, #4
    16cc:	d1ef      	bne.n	16ae <gpiote_find_channel+0x12>
			return i;
		}
	}

	return -ENODEV;
    16ce:	3817      	subs	r0, #23
}
    16d0:	bd70      	pop	{r4, r5, r6, pc}

000016d2 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
    16d2:	b530      	push	{r4, r5, lr}
    16d4:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    16d6:	6802      	ldr	r2, [r0, #0]
    16d8:	20a2      	movs	r0, #162	; 0xa2
    16da:	6892      	ldr	r2, [r2, #8]
    16dc:	00c0      	lsls	r0, r0, #3
    16de:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
    16e0:	5822      	ldr	r2, [r4, r0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    16e2:	2900      	cmp	r1, #0
    16e4:	d102      	bne.n	16ec <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    16e6:	40ea      	lsrs	r2, r5
    16e8:	3101      	adds	r1, #1
    16ea:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
    16ec:	2000      	movs	r0, #0
		*value = gpio->IN;
    16ee:	601a      	str	r2, [r3, #0]
}
    16f0:	bd30      	pop	{r4, r5, pc}
	...

000016f4 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    16f4:	6800      	ldr	r0, [r0, #0]
    16f6:	6880      	ldr	r0, [r0, #8]
    16f8:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    16fa:	2900      	cmp	r1, #0
    16fc:	d10a      	bne.n	1714 <gpio_nrf5_write+0x20>
    16fe:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1700:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1702:	2b00      	cmp	r3, #0
    1704:	d004      	beq.n	1710 <gpio_nrf5_write+0x1c>
			gpio->OUTSET = BIT(pin);
    1706:	23a1      	movs	r3, #161	; 0xa1
    1708:	00db      	lsls	r3, r3, #3
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    170a:	50c1      	str	r1, [r0, r3]
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    170c:	2000      	movs	r0, #0
    170e:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1710:	4b02      	ldr	r3, [pc, #8]	; (171c <gpio_nrf5_write+0x28>)
    1712:	e7fa      	b.n	170a <gpio_nrf5_write+0x16>
		gpio->OUT = value;
    1714:	4a02      	ldr	r2, [pc, #8]	; (1720 <gpio_nrf5_write+0x2c>)
    1716:	5083      	str	r3, [r0, r2]
    1718:	e7f8      	b.n	170c <gpio_nrf5_write+0x18>
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	0000050c 	.word	0x0000050c
    1720:	00000504 	.word	0x00000504

00001724 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1724:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1726:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1728:	2a00      	cmp	r2, #0
    172a:	d008      	beq.n	173e <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    172c:	681a      	ldr	r2, [r3, #0]
    172e:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    1730:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1732:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    1734:	2a00      	cmp	r2, #0
    1736:	d100      	bne.n	173a <gpio_nrf5_manage_callback+0x16>
		list->tail = list->head;
    1738:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    173a:	2000      	movs	r0, #0
    173c:	bd10      	pop	{r4, pc}
    173e:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1740:	2800      	cmp	r0, #0
    1742:	d0fa      	beq.n	173a <gpio_nrf5_manage_callback+0x16>
		if (test == node) {
    1744:	4281      	cmp	r1, r0
    1746:	d10f      	bne.n	1768 <gpio_nrf5_manage_callback+0x44>
    1748:	685c      	ldr	r4, [r3, #4]
    174a:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    174c:	2a00      	cmp	r2, #0
    174e:	d106      	bne.n	175e <gpio_nrf5_manage_callback+0x3a>
		list->head = node->next;
    1750:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    1752:	42a1      	cmp	r1, r4
    1754:	d100      	bne.n	1758 <gpio_nrf5_manage_callback+0x34>
			list->tail = list->head;
    1756:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    1758:	2300      	movs	r3, #0
    175a:	600b      	str	r3, [r1, #0]
    175c:	e7ed      	b.n	173a <gpio_nrf5_manage_callback+0x16>
		prev_node->next = node->next;
    175e:	6010      	str	r0, [r2, #0]
		if (list->tail == node) {
    1760:	42a1      	cmp	r1, r4
    1762:	d1f9      	bne.n	1758 <gpio_nrf5_manage_callback+0x34>
			list->tail = prev_node;
    1764:	605a      	str	r2, [r3, #4]
    1766:	e7f7      	b.n	1758 <gpio_nrf5_manage_callback+0x34>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1768:	0002      	movs	r2, r0
    176a:	6800      	ldr	r0, [r0, #0]
    176c:	e7e8      	b.n	1740 <gpio_nrf5_manage_callback+0x1c>

0000176e <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    176e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1770:	6803      	ldr	r3, [r0, #0]
{
    1772:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1774:	689b      	ldr	r3, [r3, #8]
{
    1776:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1778:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    177a:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    177c:	2900      	cmp	r1, #0
    177e:	d114      	bne.n	17aa <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    1780:	0011      	movs	r1, r2
    1782:	f7ff ff8b 	bl	169c <gpiote_find_channel>
		if (i < 0) {
    1786:	2800      	cmp	r0, #0
    1788:	db0e      	blt.n	17a8 <gpio_nrf5_enable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    178a:	2301      	movs	r3, #1
    178c:	001a      	movs	r2, r3
    178e:	40ba      	lsls	r2, r7
    1790:	68b1      	ldr	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1792:	4083      	lsls	r3, r0
		data->pin_callback_enables |= BIT(pin);
    1794:	430a      	orrs	r2, r1
    1796:	60b2      	str	r2, [r6, #8]
		gpiote->EVENTS_IN[i] = 0;
    1798:	0002      	movs	r2, r0
    179a:	3240      	adds	r2, #64	; 0x40
    179c:	0092      	lsls	r2, r2, #2
    179e:	5154      	str	r4, [r2, r5]
		gpiote->INTENSET = BIT(i);
    17a0:	22c1      	movs	r2, #193	; 0xc1
	} else {
		return -ENOTSUP;
	}

	return 0;
    17a2:	0020      	movs	r0, r4
		gpiote->INTENSET = BIT(i);
    17a4:	0092      	lsls	r2, r2, #2
    17a6:	50ab      	str	r3, [r5, r2]
}
    17a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    17aa:	2023      	movs	r0, #35	; 0x23
    17ac:	4240      	negs	r0, r0
    17ae:	e7fb      	b.n	17a8 <gpio_nrf5_enable_callback+0x3a>

000017b0 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    17b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17b2:	6803      	ldr	r3, [r0, #0]
{
    17b4:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17b6:	689b      	ldr	r3, [r3, #8]
{
    17b8:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17ba:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    17bc:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    17be:	2900      	cmp	r1, #0
    17c0:	d110      	bne.n	17e4 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    17c2:	0011      	movs	r1, r2
    17c4:	f7ff ff6a 	bl	169c <gpiote_find_channel>
		if (i < 0) {
    17c8:	2800      	cmp	r0, #0
    17ca:	db0a      	blt.n	17e2 <gpio_nrf5_disable_callback+0x32>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    17cc:	2301      	movs	r3, #1
    17ce:	001a      	movs	r2, r3
    17d0:	40b2      	lsls	r2, r6
    17d2:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    17d4:	4083      	lsls	r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    17d6:	4391      	bics	r1, r2
		gpiote->INTENCLR = BIT(i);
    17d8:	22c2      	movs	r2, #194	; 0xc2
	} else {
		return -ENOTSUP;
	}

	return 0;
    17da:	0020      	movs	r0, r4
		gpiote->INTENCLR = BIT(i);
    17dc:	0092      	lsls	r2, r2, #2
		data->pin_callback_enables &= ~(BIT(pin));
    17de:	60a9      	str	r1, [r5, #8]
		gpiote->INTENCLR = BIT(i);
    17e0:	50bb      	str	r3, [r7, r2]
}
    17e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    17e4:	2023      	movs	r0, #35	; 0x23
    17e6:	4240      	negs	r0, r0
    17e8:	e7fb      	b.n	17e2 <gpio_nrf5_disable_callback+0x32>

000017ea <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    17ea:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    17ec:	2200      	movs	r2, #0
    17ee:	2101      	movs	r1, #1
    17f0:	2006      	movs	r0, #6
    17f2:	f7ff f8f9 	bl	9e8 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    17f6:	2006      	movs	r0, #6
    17f8:	f7ff f8cc 	bl	994 <_arch_irq_enable>

	return 0;
}
    17fc:	2000      	movs	r0, #0
    17fe:	bd10      	pop	{r4, pc}

00001800 <gpio_nrf5_port_isr>:
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1800:	6803      	ldr	r3, [r0, #0]
{
    1802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1804:	689b      	ldr	r3, [r3, #8]
{
    1806:	0004      	movs	r4, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1808:	689b      	ldr	r3, [r3, #8]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    180a:	2701      	movs	r7, #1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    180c:	9301      	str	r3, [sp, #4]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    180e:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    1810:	001a      	movs	r2, r3
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1812:	6885      	ldr	r5, [r0, #8]
    1814:	9801      	ldr	r0, [sp, #4]
    1816:	0099      	lsls	r1, r3, #2
    1818:	1841      	adds	r1, r0, r1
		if (gpiote->EVENTS_IN[i]) {
    181a:	0008      	movs	r0, r1
    181c:	30fc      	adds	r0, #252	; 0xfc
    181e:	6846      	ldr	r6, [r0, #4]
    1820:	2e00      	cmp	r6, #0
    1822:	d00a      	beq.n	183a <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    1824:	2600      	movs	r6, #0
    1826:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1828:	20a2      	movs	r0, #162	; 0xa2
    182a:	00c0      	lsls	r0, r0, #3
    182c:	5809      	ldr	r1, [r1, r0]
    182e:	201f      	movs	r0, #31
    1830:	0a09      	lsrs	r1, r1, #8
    1832:	4001      	ands	r1, r0
    1834:	0038      	movs	r0, r7
    1836:	4088      	lsls	r0, r1
    1838:	4302      	orrs	r2, r0
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    183a:	3301      	adds	r3, #1
    183c:	2b04      	cmp	r3, #4
    183e:	d1e9      	bne.n	1814 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    1840:	68ae      	ldr	r6, [r5, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1842:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    1844:	4016      	ands	r6, r2
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1846:	f7ff f8b1 	bl	9ac <_arch_irq_disable>
    184a:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    184c:	2d00      	cmp	r5, #0
    184e:	d103      	bne.n	1858 <gpio_nrf5_port_isr+0x58>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1850:	2006      	movs	r0, #6
    1852:	f7ff f89f 	bl	994 <_arch_irq_enable>
}
    1856:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    1858:	68ab      	ldr	r3, [r5, #8]
    185a:	4233      	tst	r3, r6
    185c:	d0f5      	beq.n	184a <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    185e:	0032      	movs	r2, r6
    1860:	0029      	movs	r1, r5
    1862:	0020      	movs	r0, r4
    1864:	686b      	ldr	r3, [r5, #4]
    1866:	4798      	blx	r3
    1868:	e7ef      	b.n	184a <gpio_nrf5_port_isr+0x4a>
	...

0000186c <gpio_nrf5_config>:
{
    186c:	b5f0      	push	{r4, r5, r6, r7, lr}
    186e:	0006      	movs	r6, r0
    1870:	0014      	movs	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1872:	6802      	ldr	r2, [r0, #0]
{
    1874:	b085      	sub	sp, #20
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1876:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1878:	68b5      	ldr	r5, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    187a:	6890      	ldr	r0, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    187c:	6817      	ldr	r7, [r2, #0]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    187e:	9003      	str	r0, [sp, #12]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1880:	2900      	cmp	r1, #0
    1882:	d002      	beq.n	188a <gpio_nrf5_config+0x1e>
		return -ENOTSUP;
    1884:	2023      	movs	r0, #35	; 0x23
			return -EIO;
    1886:	4240      	negs	r0, r0
    1888:	e063      	b.n	1952 <gpio_nrf5_config+0xe6>
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    188a:	2203      	movs	r2, #3
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    188c:	20c0      	movs	r0, #192	; 0xc0
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    188e:	1319      	asrs	r1, r3, #12
    1890:	4011      	ands	r1, r2
    1892:	468c      	mov	ip, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1894:	1399      	asrs	r1, r3, #14
    1896:	4011      	ands	r1, r2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1898:	0280      	lsls	r0, r0, #10
    189a:	4018      	ands	r0, r3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    189c:	9102      	str	r1, [sp, #8]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    189e:	21c0      	movs	r1, #192	; 0xc0
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    18a0:	9001      	str	r0, [sp, #4]
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    18a2:	2080      	movs	r0, #128	; 0x80
    18a4:	0089      	lsls	r1, r1, #2
    18a6:	4019      	ands	r1, r3
			pull = GPIO_PULL_UP;
    18a8:	3209      	adds	r2, #9
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    18aa:	0040      	lsls	r0, r0, #1
    18ac:	4281      	cmp	r1, r0
    18ae:	d004      	beq.n	18ba <gpio_nrf5_config+0x4e>
		u8_t pull = GPIO_PULL_DISABLE;
    18b0:	4a35      	ldr	r2, [pc, #212]	; (1988 <gpio_nrf5_config+0x11c>)
    18b2:	1889      	adds	r1, r1, r2
    18b4:	424a      	negs	r2, r1
    18b6:	414a      	adcs	r2, r1
    18b8:	0092      	lsls	r2, r2, #2
		if (sense == GPIO_SENSE_INVALID) {
    18ba:	2180      	movs	r1, #128	; 0x80
    18bc:	9801      	ldr	r0, [sp, #4]
    18be:	0249      	lsls	r1, r1, #9
    18c0:	4288      	cmp	r0, r1
    18c2:	d101      	bne.n	18c8 <gpio_nrf5_config+0x5c>
			sense = GPIO_SENSE_DISABLE;
    18c4:	2100      	movs	r1, #0
    18c6:	9101      	str	r1, [sp, #4]
    18c8:	4660      	mov	r0, ip
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    18ca:	2101      	movs	r1, #1
    18cc:	0080      	lsls	r0, r0, #2
    18ce:	4684      	mov	ip, r0
    18d0:	420b      	tst	r3, r1
    18d2:	d045      	beq.n	1960 <gpio_nrf5_config+0xf4>
			if (pull == GPIO_PULL_UP) {
    18d4:	2a0c      	cmp	r2, #12
    18d6:	d13e      	bne.n	1956 <gpio_nrf5_config+0xea>
				gpio->OUTSET = BIT(pin);
    18d8:	20a1      	movs	r0, #161	; 0xa1
    18da:	40a1      	lsls	r1, r4
    18dc:	00c0      	lsls	r0, r0, #3
				gpio->OUTCLR = BIT(pin);
    18de:	5039      	str	r1, [r7, r0]
					      drive_strength[ds_low][ds_high] |
    18e0:	9902      	ldr	r1, [sp, #8]
					      GPIO_INPUT_DISCONNECT |
    18e2:	482a      	ldr	r0, [pc, #168]	; (198c <gpio_nrf5_config+0x120>)
					      drive_strength[ds_low][ds_high] |
    18e4:	4461      	add	r1, ip
    18e6:	0089      	lsls	r1, r1, #2
					      GPIO_INPUT_DISCONNECT |
    18e8:	5808      	ldr	r0, [r1, r0]
    18ea:	2103      	movs	r1, #3
    18ec:	4301      	orrs	r1, r0
    18ee:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    18f0:	0021      	movs	r1, r4
    18f2:	31c1      	adds	r1, #193	; 0xc1
    18f4:	31ff      	adds	r1, #255	; 0xff
    18f6:	0089      	lsls	r1, r1, #2
    18f8:	51ca      	str	r2, [r1, r7]
	if (flags & GPIO_INT) {
    18fa:	2002      	movs	r0, #2
    18fc:	4018      	ands	r0, r3
    18fe:	d028      	beq.n	1952 <gpio_nrf5_config+0xe6>
		if (flags & GPIO_INT_EDGE) {
    1900:	069a      	lsls	r2, r3, #26
    1902:	d5bf      	bpl.n	1884 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1904:	065a      	lsls	r2, r3, #25
    1906:	d439      	bmi.n	197c <gpio_nrf5_config+0x110>
				config |= GPIOTE_CFG_POL_L2H;
    1908:	2780      	movs	r7, #128	; 0x80
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    190a:	075b      	lsls	r3, r3, #29
    190c:	d438      	bmi.n	1980 <gpio_nrf5_config+0x114>
				config |= GPIOTE_CFG_POL_TOGG;
    190e:	02bf      	lsls	r7, r7, #10
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1910:	68e8      	ldr	r0, [r5, #12]
    1912:	f7fe fd5d 	bl	3d0 <__popcountsi2>
    1916:	2804      	cmp	r0, #4
    1918:	d034      	beq.n	1984 <gpio_nrf5_config+0x118>
		int i = gpiote_find_channel(dev, pin);
    191a:	0030      	movs	r0, r6
    191c:	0021      	movs	r1, r4
    191e:	f7ff febd 	bl	169c <gpiote_find_channel>
    1922:	68ee      	ldr	r6, [r5, #12]
		if (i < 0) {
    1924:	2800      	cmp	r0, #0
    1926:	da03      	bge.n	1930 <gpio_nrf5_config+0xc4>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1928:	43f0      	mvns	r0, r6
    192a:	f7fe fd47 	bl	3bc <__ffssi2>
    192e:	3801      	subs	r0, #1
		data->gpiote_chan_mask |= BIT(i);
    1930:	2301      	movs	r3, #1
    1932:	001a      	movs	r2, r3
    1934:	4082      	lsls	r2, r0
    1936:	4316      	orrs	r6, r2
		config |= GPIOTE_CFG_PIN(pin);
    1938:	22f8      	movs	r2, #248	; 0xf8
    193a:	0224      	lsls	r4, r4, #8
    193c:	0152      	lsls	r2, r2, #5
    193e:	4014      	ands	r4, r2
		gpiote->CONFIG[i] = config;
    1940:	3045      	adds	r0, #69	; 0x45
		config |= GPIOTE_CFG_PIN(pin);
    1942:	431c      	orrs	r4, r3
		gpiote->CONFIG[i] = config;
    1944:	30ff      	adds	r0, #255	; 0xff
    1946:	9b03      	ldr	r3, [sp, #12]
    1948:	0080      	lsls	r0, r0, #2
		config |= GPIOTE_CFG_PIN(pin);
    194a:	4327      	orrs	r7, r4
		data->gpiote_chan_mask |= BIT(i);
    194c:	60ee      	str	r6, [r5, #12]
		gpiote->CONFIG[i] = config;
    194e:	50c7      	str	r7, [r0, r3]
	return 0;
    1950:	2000      	movs	r0, #0
}
    1952:	b005      	add	sp, #20
    1954:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if (pull == GPIO_PULL_DOWN) {
    1956:	2a04      	cmp	r2, #4
    1958:	d1c2      	bne.n	18e0 <gpio_nrf5_config+0x74>
				gpio->OUTCLR = BIT(pin);
    195a:	40a1      	lsls	r1, r4
    195c:	480c      	ldr	r0, [pc, #48]	; (1990 <gpio_nrf5_config+0x124>)
    195e:	e7be      	b.n	18de <gpio_nrf5_config+0x72>
					      drive_strength[ds_low][ds_high] |
    1960:	9902      	ldr	r1, [sp, #8]
    1962:	480a      	ldr	r0, [pc, #40]	; (198c <gpio_nrf5_config+0x120>)
    1964:	4461      	add	r1, ip
    1966:	0089      	lsls	r1, r1, #2
    1968:	5809      	ldr	r1, [r1, r0]
    196a:	9801      	ldr	r0, [sp, #4]
    196c:	430a      	orrs	r2, r1
    196e:	4310      	orrs	r0, r2
			gpio->PIN_CNF[pin] = (sense |
    1970:	0022      	movs	r2, r4
    1972:	32c1      	adds	r2, #193	; 0xc1
    1974:	32ff      	adds	r2, #255	; 0xff
    1976:	0092      	lsls	r2, r2, #2
    1978:	51d0      	str	r0, [r2, r7]
    197a:	e7be      	b.n	18fa <gpio_nrf5_config+0x8e>
				config |= GPIOTE_CFG_POL_TOGG;
    197c:	27c0      	movs	r7, #192	; 0xc0
    197e:	e7c6      	b.n	190e <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_L2H;
    1980:	027f      	lsls	r7, r7, #9
    1982:	e7c5      	b.n	1910 <gpio_nrf5_config+0xa4>
			return -EIO;
    1984:	2005      	movs	r0, #5
    1986:	e77e      	b.n	1886 <gpio_nrf5_config+0x1a>
    1988:	fffffe00 	.word	0xfffffe00
    198c:	0000aeac 	.word	0x0000aeac
    1990:	0000050c 	.word	0x0000050c

00001994 <pwm_nrf5_sw_pin_set>:
	return i;
}

static int pwm_nrf5_sw_pin_set(struct device *dev, u32_t pwm,
			       u32_t period_cycles, u32_t pulse_cycles)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	b087      	sub	sp, #28
    1998:	9301      	str	r3, [sp, #4]
	u8_t ppi_index;
	u8_t channel;
	u16_t div;
	u32_t ret;

	config = (struct pwm_config *)dev->config->config_info;
    199a:	6803      	ldr	r3, [r0, #0]
{
    199c:	9200      	str	r2, [sp, #0]
	config = (struct pwm_config *)dev->config->config_info;
    199e:	689e      	ldr	r6, [r3, #8]
	timer = config->timer;
	data = dev->driver_data;
    19a0:	6882      	ldr	r2, [r0, #8]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    19a2:	9801      	ldr	r0, [sp, #4]
{
    19a4:	9102      	str	r1, [sp, #8]

	/* check if requested period is allowed while other channels are
	 * active.
	 */
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    19a6:	79b1      	ldrb	r1, [r6, #6]
    19a8:	1d13      	adds	r3, r2, #4
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    19aa:	2800      	cmp	r0, #0
    19ac:	d009      	beq.n	19c2 <pwm_nrf5_sw_pin_set+0x2e>
    19ae:	9800      	ldr	r0, [sp, #0]
    19b0:	9c01      	ldr	r4, [sp, #4]
    19b2:	42a0      	cmp	r0, r4
    19b4:	d005      	beq.n	19c2 <pwm_nrf5_sw_pin_set+0x2e>
    19b6:	001c      	movs	r4, r3
    19b8:	00c8      	lsls	r0, r1, #3
    19ba:	3004      	adds	r0, #4
    19bc:	1810      	adds	r0, r2, r0
	for (i = 0; i < map_size; i++) {
    19be:	4284      	cmp	r4, r0
    19c0:	d105      	bne.n	19ce <pwm_nrf5_sw_pin_set+0x3a>
{
    19c2:	2000      	movs	r0, #0
	for (i = 0; i < map_size; i++) {
    19c4:	4281      	cmp	r1, r0
    19c6:	d110      	bne.n	19ea <pwm_nrf5_sw_pin_set+0x56>
    19c8:	1e4b      	subs	r3, r1, #1
    19ca:	b2db      	uxtb	r3, r3
    19cc:	e01f      	b.n	1a0e <pwm_nrf5_sw_pin_set+0x7a>
		if ((data->map[i].pwm != pwm) &&
    19ce:	9d02      	ldr	r5, [sp, #8]
    19d0:	6827      	ldr	r7, [r4, #0]
    19d2:	42bd      	cmp	r5, r7
    19d4:	d007      	beq.n	19e6 <pwm_nrf5_sw_pin_set+0x52>
    19d6:	6865      	ldr	r5, [r4, #4]
    19d8:	2d00      	cmp	r5, #0
    19da:	d004      	beq.n	19e6 <pwm_nrf5_sw_pin_set+0x52>
		    (data->map[i].pulse_cycles != 0) &&
    19dc:	9d00      	ldr	r5, [sp, #0]
    19de:	6817      	ldr	r7, [r2, #0]
    19e0:	42bd      	cmp	r5, r7
    19e2:	d000      	beq.n	19e6 <pwm_nrf5_sw_pin_set+0x52>
    19e4:	e0b7      	b.n	1b56 <pwm_nrf5_sw_pin_set+0x1c2>
    19e6:	3408      	adds	r4, #8
    19e8:	e7e9      	b.n	19be <pwm_nrf5_sw_pin_set+0x2a>
    19ea:	3308      	adds	r3, #8
		if (pwm == data->map[i].pwm) {
    19ec:	001c      	movs	r4, r3
    19ee:	3c08      	subs	r4, #8
    19f0:	6824      	ldr	r4, [r4, #0]
    19f2:	9d02      	ldr	r5, [sp, #8]
    19f4:	42a5      	cmp	r5, r4
    19f6:	d044      	beq.n	1a82 <pwm_nrf5_sw_pin_set+0xee>
	for (i = 0; i < map_size; i++) {
    19f8:	3001      	adds	r0, #1
    19fa:	b2c0      	uxtb	r0, r0
    19fc:	e7e2      	b.n	19c4 <pwm_nrf5_sw_pin_set+0x30>
		if (data->map[i].pulse_cycles == 0) {
    19fe:	00dd      	lsls	r5, r3, #3
    1a00:	1955      	adds	r5, r2, r5
    1a02:	68ad      	ldr	r5, [r5, #8]
    1a04:	1e5c      	subs	r4, r3, #1
    1a06:	b2e4      	uxtb	r4, r4
    1a08:	2d00      	cmp	r5, #0
    1a0a:	d004      	beq.n	1a16 <pwm_nrf5_sw_pin_set+0x82>
    1a0c:	0023      	movs	r3, r4
	while (i--) {
    1a0e:	2bff      	cmp	r3, #255	; 0xff
    1a10:	d1f5      	bne.n	19fe <pwm_nrf5_sw_pin_set+0x6a>

	/* map pwm pin to GPIOTE config/channel */
	channel = pwm_channel_map(data, config->map_size, pwm);
	if (channel >= config->map_size) {
		SYS_LOG_ERR("No more channels available");
		return -ENOMEM;
    1a12:	200c      	movs	r0, #12
    1a14:	e0a0      	b.n	1b58 <pwm_nrf5_sw_pin_set+0x1c4>
	if (channel >= config->map_size) {
    1a16:	4283      	cmp	r3, r0
    1a18:	d2fb      	bcs.n	1a12 <pwm_nrf5_sw_pin_set+0x7e>

	SYS_LOG_DBG("PWM %d, period %u, pulse %u", pwm,
			period_cycles, pulse_cycles);

	/* clear GPIOTE config */
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    1a1a:	7930      	ldrb	r0, [r6, #4]
    1a1c:	4d4f      	ldr	r5, [pc, #316]	; (1b5c <pwm_nrf5_sw_pin_set+0x1c8>)
    1a1e:	18c0      	adds	r0, r0, r3
    1a20:	0080      	lsls	r0, r0, #2
    1a22:	1940      	adds	r0, r0, r5
    1a24:	27a2      	movs	r7, #162	; 0xa2
    1a26:	9004      	str	r0, [sp, #16]
    1a28:	2000      	movs	r0, #0
    1a2a:	9d04      	ldr	r5, [sp, #16]
    1a2c:	00ff      	lsls	r7, r7, #3
	timer = config->timer;
    1a2e:	6834      	ldr	r4, [r6, #0]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    1a30:	51e8      	str	r0, [r5, r7]

	/* clear PPI used */
	ppi_index = config->ppi_base + (channel << 1);
    1a32:	7976      	ldrb	r6, [r6, #5]
    1a34:	005d      	lsls	r5, r3, #1
    1a36:	1975      	adds	r5, r6, r5
    1a38:	b2ed      	uxtb	r5, r5
    1a3a:	46ac      	mov	ip, r5
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    1a3c:	2601      	movs	r6, #1
    1a3e:	3501      	adds	r5, #1
    1a40:	40ae      	lsls	r6, r5
    1a42:	4667      	mov	r7, ip
    1a44:	2501      	movs	r5, #1
    1a46:	40bd      	lsls	r5, r7
    1a48:	27a1      	movs	r7, #161	; 0xa1
    1a4a:	432e      	orrs	r6, r5
    1a4c:	4d44      	ldr	r5, [pc, #272]	; (1b60 <pwm_nrf5_sw_pin_set+0x1cc>)
    1a4e:	00ff      	lsls	r7, r7, #3
    1a50:	9603      	str	r6, [sp, #12]
    1a52:	51ee      	str	r6, [r5, r7]

	/* configure GPIO pin as output */
	NRF_GPIO->DIRSET = BIT(pwm);
    1a54:	2601      	movs	r6, #1
    1a56:	9d02      	ldr	r5, [sp, #8]
    1a58:	3710      	adds	r7, #16
    1a5a:	40ae      	lsls	r6, r5
    1a5c:	25a0      	movs	r5, #160	; 0xa0
    1a5e:	05ed      	lsls	r5, r5, #23
    1a60:	51ee      	str	r6, [r5, r7]
	if (pulse_cycles == 0) {
    1a62:	9f01      	ldr	r7, [sp, #4]
    1a64:	4287      	cmp	r7, r0
    1a66:	d10e      	bne.n	1a86 <pwm_nrf5_sw_pin_set+0xf2>
		/* 0% duty cycle, keep pin low */
		NRF_GPIO->OUTCLR = BIT(pwm);
    1a68:	483e      	ldr	r0, [pc, #248]	; (1b64 <pwm_nrf5_sw_pin_set+0x1d0>)

		goto pin_set_pwm_off;
	} else if (pulse_cycles == period_cycles) {
		/* 100% duty cycle, keep pin high */
		NRF_GPIO->OUTSET = BIT(pwm);
    1a6a:	502e      	str	r6, [r5, r0]
	data->map[channel].pulse_cycles = pulse_cycles;

	return 0;

pin_set_pwm_off:
	data->map[channel].pulse_cycles = 0;
    1a6c:	2000      	movs	r0, #0
    1a6e:	00db      	lsls	r3, r3, #3
    1a70:	18d3      	adds	r3, r2, r3
    1a72:	00c9      	lsls	r1, r1, #3
    1a74:	6098      	str	r0, [r3, #8]
    1a76:	1851      	adds	r1, r2, r1
	bool pwm_active = false;

	/* stop timer if all channels are inactive */
	for (channel = 0; channel < config->map_size; channel++) {
    1a78:	4291      	cmp	r1, r2
    1a7a:	d165      	bne.n	1b48 <pwm_nrf5_sw_pin_set+0x1b4>
		}
	}

	if (!pwm_active) {
		/* No active PWM, stop timer */
		timer->TASKS_STOP = 1;
    1a7c:	2301      	movs	r3, #1
    1a7e:	6063      	str	r3, [r4, #4]
    1a80:	e067      	b.n	1b52 <pwm_nrf5_sw_pin_set+0x1be>
		if (pwm == data->map[i].pwm) {
    1a82:	0003      	movs	r3, r0
    1a84:	e7c9      	b.n	1a1a <pwm_nrf5_sw_pin_set+0x86>
	} else if (pulse_cycles == period_cycles) {
    1a86:	9f00      	ldr	r7, [sp, #0]
    1a88:	9d01      	ldr	r5, [sp, #4]
    1a8a:	42af      	cmp	r7, r5
    1a8c:	d104      	bne.n	1a98 <pwm_nrf5_sw_pin_set+0x104>
		NRF_GPIO->OUTSET = BIT(pwm);
    1a8e:	20a1      	movs	r0, #161	; 0xa1
    1a90:	25a0      	movs	r5, #160	; 0xa0
    1a92:	00c0      	lsls	r0, r0, #3
    1a94:	05ed      	lsls	r5, r5, #23
    1a96:	e7e8      	b.n	1a6a <pwm_nrf5_sw_pin_set+0xd6>
		NRF_GPIO->OUTCLR = BIT(pwm);
    1a98:	25a0      	movs	r5, #160	; 0xa0
    1a9a:	4f32      	ldr	r7, [pc, #200]	; (1b64 <pwm_nrf5_sw_pin_set+0x1d0>)
    1a9c:	05ed      	lsls	r5, r5, #23
    1a9e:	51ee      	str	r6, [r5, r7]
	timer->MODE = TIMER_MODE_MODE_Timer;
    1aa0:	4d31      	ldr	r5, [pc, #196]	; (1b68 <pwm_nrf5_sw_pin_set+0x1d4>)
    1aa2:	0089      	lsls	r1, r1, #2
    1aa4:	5160      	str	r0, [r4, r5]
	timer->PRESCALER = 0;
    1aa6:	350c      	adds	r5, #12
    1aa8:	5160      	str	r0, [r4, r5]
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    1aaa:	3d08      	subs	r5, #8
    1aac:	5160      	str	r0, [r4, r5]
    1aae:	009d      	lsls	r5, r3, #2
    1ab0:	1967      	adds	r7, r4, r5
	timer->EVENTS_COMPARE[channel] = 0;
    1ab2:	003d      	movs	r5, r7
    1ab4:	1861      	adds	r1, r4, r1
    1ab6:	35fc      	adds	r5, #252	; 0xfc
    1ab8:	6468      	str	r0, [r5, #68]	; 0x44
	timer->EVENTS_COMPARE[config->map_size] = 0;
    1aba:	000d      	movs	r5, r1
    1abc:	35fc      	adds	r5, #252	; 0xfc
    1abe:	6468      	str	r0, [r5, #68]	; 0x44
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    1ac0:	2580      	movs	r5, #128	; 0x80
    1ac2:	2608      	movs	r6, #8
    1ac4:	00ad      	lsls	r5, r5, #2
    1ac6:	5166      	str	r6, [r4, r5]
	div = period_cycles >> 16;
    1ac8:	9d00      	ldr	r5, [sp, #0]
    1aca:	9105      	str	r1, [sp, #20]
    1acc:	0c2e      	lsrs	r6, r5, #16
	timer->CC[channel] = pulse_cycles >> div;
    1ace:	9d01      	ldr	r5, [sp, #4]
    1ad0:	40f5      	lsrs	r5, r6
    1ad2:	0029      	movs	r1, r5
    1ad4:	25a8      	movs	r5, #168	; 0xa8
    1ad6:	00ed      	lsls	r5, r5, #3
    1ad8:	5179      	str	r1, [r7, r5]
	timer->CC[config->map_size] = period_cycles >> div;
    1ada:	9f00      	ldr	r7, [sp, #0]
    1adc:	9905      	ldr	r1, [sp, #20]
    1ade:	40f7      	lsrs	r7, r6
    1ae0:	514f      	str	r7, [r1, r5]
	timer->TASKS_CLEAR = 1;
    1ae2:	2101      	movs	r1, #1
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1ae4:	26a2      	movs	r6, #162	; 0xa2
	timer->TASKS_CLEAR = 1;
    1ae6:	60e1      	str	r1, [r4, #12]
							    (pwm << 8);
    1ae8:	9902      	ldr	r1, [sp, #8]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1aea:	00f6      	lsls	r6, r6, #3
							    (pwm << 8);
    1aec:	020d      	lsls	r5, r1, #8
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1aee:	491f      	ldr	r1, [pc, #124]	; (1b6c <pwm_nrf5_sw_pin_set+0x1d8>)
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1af0:	27a3      	movs	r7, #163	; 0xa3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1af2:	4329      	orrs	r1, r5
    1af4:	9d04      	ldr	r5, [sp, #16]
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1af6:	00ff      	lsls	r7, r7, #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    1af8:	51a9      	str	r1, [r5, r6]
    1afa:	4661      	mov	r1, ip
				     &(timer->EVENTS_COMPARE[channel]);
    1afc:	001d      	movs	r5, r3
    1afe:	4e18      	ldr	r6, [pc, #96]	; (1b60 <pwm_nrf5_sw_pin_set+0x1cc>)
    1b00:	00c9      	lsls	r1, r1, #3
    1b02:	1989      	adds	r1, r1, r6
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    1b04:	26a2      	movs	r6, #162	; 0xa2
				     &(timer->EVENTS_COMPARE[channel]);
    1b06:	3550      	adds	r5, #80	; 0x50
    1b08:	00ad      	lsls	r5, r5, #2
    1b0a:	1965      	adds	r5, r4, r5
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    1b0c:	00f6      	lsls	r6, r6, #3
    1b0e:	518d      	str	r5, [r1, r6]
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    1b10:	4e12      	ldr	r6, [pc, #72]	; (1b5c <pwm_nrf5_sw_pin_set+0x1c8>)
    1b12:	009d      	lsls	r5, r3, #2
    1b14:	46b4      	mov	ip, r6
    1b16:	4e16      	ldr	r6, [pc, #88]	; (1b70 <pwm_nrf5_sw_pin_set+0x1dc>)
    1b18:	4465      	add	r5, ip
    1b1a:	518d      	str	r5, [r1, r6]
					 &(timer->EVENTS_COMPARE[3]);
    1b1c:	0026      	movs	r6, r4
    1b1e:	364d      	adds	r6, #77	; 0x4d
    1b20:	36ff      	adds	r6, #255	; 0xff
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    1b22:	51ce      	str	r6, [r1, r7]
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    1b24:	4e13      	ldr	r6, [pc, #76]	; (1b74 <pwm_nrf5_sw_pin_set+0x1e0>)
    1b26:	00db      	lsls	r3, r3, #3
    1b28:	518d      	str	r5, [r1, r6]
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    1b2a:	490d      	ldr	r1, [pc, #52]	; (1b60 <pwm_nrf5_sw_pin_set+0x1cc>)
    1b2c:	4d0e      	ldr	r5, [pc, #56]	; (1b68 <pwm_nrf5_sw_pin_set+0x1d4>)
    1b2e:	9e03      	ldr	r6, [sp, #12]
    1b30:	514e      	str	r6, [r1, r5]
	timer->TASKS_START = 1;
    1b32:	2101      	movs	r1, #1
    1b34:	6021      	str	r1, [r4, #0]
	data->period_cycles = period_cycles;
    1b36:	9900      	ldr	r1, [sp, #0]
    1b38:	6011      	str	r1, [r2, #0]
    1b3a:	18d2      	adds	r2, r2, r3
	data->map[channel].pwm = pwm;
    1b3c:	9b02      	ldr	r3, [sp, #8]
    1b3e:	6053      	str	r3, [r2, #4]
	data->map[channel].pulse_cycles = pulse_cycles;
    1b40:	9b01      	ldr	r3, [sp, #4]
    1b42:	6093      	str	r3, [r2, #8]
	}

	return 0;
}
    1b44:	b007      	add	sp, #28
    1b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b48:	3208      	adds	r2, #8
		if (data->map[channel].pulse_cycles) {
    1b4a:	6813      	ldr	r3, [r2, #0]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d100      	bne.n	1b52 <pwm_nrf5_sw_pin_set+0x1be>
    1b50:	e792      	b.n	1a78 <pwm_nrf5_sw_pin_set+0xe4>
	return 0;
    1b52:	2000      	movs	r0, #0
    1b54:	e7f6      	b.n	1b44 <pwm_nrf5_sw_pin_set+0x1b0>
		return ret;
    1b56:	2016      	movs	r0, #22
		return -ENOMEM;
    1b58:	4240      	negs	r0, r0
    1b5a:	e7f3      	b.n	1b44 <pwm_nrf5_sw_pin_set+0x1b0>
    1b5c:	40006000 	.word	0x40006000
    1b60:	4001f000 	.word	0x4001f000
    1b64:	0000050c 	.word	0x0000050c
    1b68:	00000504 	.word	0x00000504
    1b6c:	00130003 	.word	0x00130003
    1b70:	00000514 	.word	0x00000514
    1b74:	0000051c 	.word	0x0000051c

00001b78 <pwm_nrf5_sw_get_cycles_per_sec>:
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;

	/* HF timer frequency is derived from 16MHz source and prescaler is 0 */
	*cycles = 16 * 1024 * 1024;
    1b78:	2080      	movs	r0, #128	; 0x80
    1b7a:	2100      	movs	r1, #0
    1b7c:	0440      	lsls	r0, r0, #17
    1b7e:	6010      	str	r0, [r2, #0]
    1b80:	6051      	str	r1, [r2, #4]

	return 0;
}
    1b82:	2000      	movs	r0, #0
    1b84:	4770      	bx	lr

00001b86 <pwm_nrf5_sw_init>:
};

static int pwm_nrf5_sw_init(struct device *dev)
{
	return 0;
}
    1b86:	2000      	movs	r0, #0
    1b88:	4770      	bx	lr

00001b8a <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b8a:	6803      	ldr	r3, [r0, #0]
    1b8c:	689b      	ldr	r3, [r3, #8]
    1b8e:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1b90:	001a      	movs	r2, r3
    1b92:	32fc      	adds	r2, #252	; 0xfc
    1b94:	68d0      	ldr	r0, [r2, #12]
    1b96:	2800      	cmp	r0, #0
    1b98:	d006      	beq.n	1ba8 <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1b9a:	2000      	movs	r0, #0
    1b9c:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1b9e:	22a3      	movs	r2, #163	; 0xa3
    1ba0:	00d2      	lsls	r2, r2, #3
    1ba2:	589b      	ldr	r3, [r3, r2]
    1ba4:	700b      	strb	r3, [r1, #0]

	return 0;
}
    1ba6:	4770      	bx	lr
		return -1;
    1ba8:	2001      	movs	r0, #1
    1baa:	4240      	negs	r0, r0
    1bac:	e7fb      	b.n	1ba6 <uart_nrf5_poll_in+0x1c>
	...

00001bb0 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bb0:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1bb2:	4a06      	ldr	r2, [pc, #24]	; (1bcc <uart_nrf5_poll_out+0x1c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bb4:	689b      	ldr	r3, [r3, #8]
    1bb6:	681b      	ldr	r3, [r3, #0]
	uart->TXD = (u8_t)c;
    1bb8:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1bba:	33fc      	adds	r3, #252	; 0xfc
    1bbc:	6a1a      	ldr	r2, [r3, #32]
    1bbe:	2a00      	cmp	r2, #0
    1bc0:	d0fc      	beq.n	1bbc <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
    1bc2:	2200      	movs	r2, #0

	return c;
}
    1bc4:	0008      	movs	r0, r1
	uart->EVENTS_TXDRDY = 0;
    1bc6:	621a      	str	r2, [r3, #32]
}
    1bc8:	4770      	bx	lr
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	0000051c 	.word	0x0000051c

00001bd0 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bd0:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
    1bd2:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bd4:	689b      	ldr	r3, [r3, #8]
    1bd6:	681b      	ldr	r3, [r3, #0]

	if (uart->EVENTS_ERROR) {
    1bd8:	001a      	movs	r2, r3
    1bda:	32fc      	adds	r2, #252	; 0xfc
    1bdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1bde:	4282      	cmp	r2, r0
    1be0:	d003      	beq.n	1bea <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1be2:	2290      	movs	r2, #144	; 0x90
    1be4:	00d2      	lsls	r2, r2, #3
    1be6:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
    1be8:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;
    1bea:	230f      	movs	r3, #15
    1bec:	4018      	ands	r0, r3

	return error;
}
    1bee:	4770      	bx	lr

00001bf0 <uart_nrf5_init>:
{
    1bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bf2:	6803      	ldr	r3, [r0, #0]
{
    1bf4:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bf6:	689b      	ldr	r3, [r3, #8]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1bf8:	4818      	ldr	r0, [pc, #96]	; (1c5c <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bfa:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1bfc:	f007 fc8a 	bl	9514 <device_get_binding>
	return api->config(port, access_op, pin, flags);
    1c00:	6843      	ldr	r3, [r0, #4]
    1c02:	0006      	movs	r6, r0
    1c04:	681f      	ldr	r7, [r3, #0]
    1c06:	2302      	movs	r3, #2
    1c08:	2218      	movs	r2, #24
    1c0a:	33ff      	adds	r3, #255	; 0xff
    1c0c:	2100      	movs	r1, #0
    1c0e:	47b8      	blx	r7
    1c10:	6873      	ldr	r3, [r6, #4]
    1c12:	0030      	movs	r0, r6
    1c14:	681f      	ldr	r7, [r3, #0]
    1c16:	2300      	movs	r3, #0
    1c18:	2219      	movs	r2, #25
    1c1a:	0019      	movs	r1, r3
    1c1c:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1c1e:	2218      	movs	r2, #24
    1c20:	4b0f      	ldr	r3, [pc, #60]	; (1c60 <uart_nrf5_init+0x70>)
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1c22:	21eb      	movs	r1, #235	; 0xeb
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1c24:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1c26:	4b0f      	ldr	r3, [pc, #60]	; (1c64 <uart_nrf5_init+0x74>)
    1c28:	3201      	adds	r2, #1
    1c2a:	50e2      	str	r2, [r4, r3]
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1c2c:	22e1      	movs	r2, #225	; 0xe1
    1c2e:	68ab      	ldr	r3, [r5, #8]
    1c30:	0252      	lsls	r2, r2, #9
    1c32:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1c34:	682b      	ldr	r3, [r5, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1c36:	0449      	lsls	r1, r1, #17
	volatile struct _uart *uart = UART_STRUCT(dev);
    1c38:	689b      	ldr	r3, [r3, #8]
	uart->EVENTS_TXDRDY = 0;
    1c3a:	2000      	movs	r0, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
    1c3c:	681a      	ldr	r2, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1c3e:	4b0a      	ldr	r3, [pc, #40]	; (1c68 <uart_nrf5_init+0x78>)
    1c40:	50d1      	str	r1, [r2, r3]
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1c42:	2204      	movs	r2, #4
    1c44:	3b24      	subs	r3, #36	; 0x24
    1c46:	50e2      	str	r2, [r4, r3]
	uart->EVENTS_TXDRDY = 0;
    1c48:	0023      	movs	r3, r4
    1c4a:	33fc      	adds	r3, #252	; 0xfc
    1c4c:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
    1c4e:	60d8      	str	r0, [r3, #12]
	uart->TASKS_STARTTX = 1;
    1c50:	2301      	movs	r3, #1
    1c52:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1c54:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1c56:	4b05      	ldr	r3, [pc, #20]	; (1c6c <uart_nrf5_init+0x7c>)
    1c58:	606b      	str	r3, [r5, #4]
}
    1c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c5c:	0000aab7 	.word	0x0000aab7
    1c60:	0000050c 	.word	0x0000050c
    1c64:	00000514 	.word	0x00000514
    1c68:	00000524 	.word	0x00000524
    1c6c:	0000af2c 	.word	0x0000af2c

00001c70 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1c70:	22a8      	movs	r2, #168	; 0xa8
    1c72:	4b08      	ldr	r3, [pc, #32]	; (1c94 <rtc_compare_set+0x24>)
    1c74:	00d2      	lsls	r2, r2, #3
    1c76:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
    1c78:	4a07      	ldr	r2, [pc, #28]	; (1c98 <rtc_compare_set+0x28>)
    1c7a:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1c7c:	1ac0      	subs	r0, r0, r3
    1c7e:	0200      	lsls	r0, r0, #8
    1c80:	0a00      	lsrs	r0, r0, #8
    1c82:	4b06      	ldr	r3, [pc, #24]	; (1c9c <rtc_compare_set+0x2c>)
    1c84:	3802      	subs	r0, #2
    1c86:	4298      	cmp	r0, r3
    1c88:	d903      	bls.n	1c92 <rtc_compare_set+0x22>
    1c8a:	2280      	movs	r2, #128	; 0x80
    1c8c:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <rtc_compare_set+0x30>)
    1c8e:	0292      	lsls	r2, r2, #10
    1c90:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    1c92:	4770      	bx	lr
    1c94:	40011000 	.word	0x40011000
    1c98:	00000504 	.word	0x00000504
    1c9c:	007ffffd 	.word	0x007ffffd
    1ca0:	e000e1fc 	.word	0xe000e1fc

00001ca4 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1ca4:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1ca6:	4b11      	ldr	r3, [pc, #68]	; (1cec <rtc_announce_set_next+0x48>)
    1ca8:	4a11      	ldr	r2, [pc, #68]	; (1cf0 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1caa:	4c12      	ldr	r4, [pc, #72]	; (1cf4 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1cac:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1cae:	6825      	ldr	r5, [r4, #0]
    1cb0:	1b40      	subs	r0, r0, r5
    1cb2:	0200      	lsls	r0, r0, #8
    1cb4:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1cb6:	2882      	cmp	r0, #130	; 0x82
    1cb8:	d912      	bls.n	1ce0 <rtc_announce_set_next+0x3c>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1cba:	2183      	movs	r1, #131	; 0x83
    1cbc:	f7fe fa84 	bl	1c8 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
    1cc0:	4b0d      	ldr	r3, [pc, #52]	; (1cf8 <rtc_announce_set_next+0x54>)
    1cc2:	681a      	ldr	r2, [r3, #0]
    1cc4:	4282      	cmp	r2, r0
    1cc6:	d900      	bls.n	1cca <rtc_announce_set_next+0x26>
    1cc8:	0002      	movs	r2, r0
		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
    1cca:	2383      	movs	r3, #131	; 0x83
    1ccc:	4353      	muls	r3, r2
		rtc_past = (rtc_past +
    1cce:	195b      	adds	r3, r3, r5
			   ) & RTC_MASK;
    1cd0:	021b      	lsls	r3, r3, #8
    1cd2:	0a1b      	lsrs	r3, r3, #8
		rtc_past = (rtc_past +
    1cd4:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1cd6:	4b09      	ldr	r3, [pc, #36]	; (1cfc <rtc_announce_set_next+0x58>)
		_sys_clock_tick_announce();
    1cd8:	0010      	movs	r0, r2
		_sys_idle_elapsed_ticks = sys_elapsed;
    1cda:	601a      	str	r2, [r3, #0]
		_sys_clock_tick_announce();
    1cdc:	f008 f990 	bl	a000 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1ce0:	6820      	ldr	r0, [r4, #0]
    1ce2:	3083      	adds	r0, #131	; 0x83
    1ce4:	f7ff ffc4 	bl	1c70 <rtc_compare_set>
}
    1ce8:	bd70      	pop	{r4, r5, r6, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00000504 	.word	0x00000504
    1cf0:	40011000 	.word	0x40011000
    1cf4:	20000048 	.word	0x20000048
    1cf8:	20000044 	.word	0x20000044
    1cfc:	2000240c 	.word	0x2000240c

00001d00 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1d00:	2200      	movs	r2, #0
{
    1d02:	b510      	push	{r4, lr}
	RTC_CC_EVENT = 0;
    1d04:	4b02      	ldr	r3, [pc, #8]	; (1d10 <rtc1_nrf5_isr+0x10>)
    1d06:	645a      	str	r2, [r3, #68]	; 0x44
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1d08:	f7ff ffcc 	bl	1ca4 <rtc_announce_set_next>
#ifdef CONFIG_EXECUTION_BENCHMARKING
	extern void read_timer_end_of_tick_handler(void);
	read_timer_end_of_tick_handler();
#endif

}
    1d0c:	bd10      	pop	{r4, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	400110fc 	.word	0x400110fc

00001d14 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1d14:	4a07      	ldr	r2, [pc, #28]	; (1d34 <_timer_idle_enter+0x20>)
{
    1d16:	b510      	push	{r4, lr}
    1d18:	0003      	movs	r3, r0
	if ((sys_ticks < 0) ||
    1d1a:	4290      	cmp	r0, r2
    1d1c:	d900      	bls.n	1d20 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1d1e:	0013      	movs	r3, r2
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1d20:	2083      	movs	r0, #131	; 0x83
	expected_sys_ticks = sys_ticks;
    1d22:	4a05      	ldr	r2, [pc, #20]	; (1d38 <_timer_idle_enter+0x24>)
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1d24:	4358      	muls	r0, r3
	expected_sys_ticks = sys_ticks;
    1d26:	6013      	str	r3, [r2, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1d28:	4b04      	ldr	r3, [pc, #16]	; (1d3c <_timer_idle_enter+0x28>)
    1d2a:	681b      	ldr	r3, [r3, #0]
    1d2c:	18c0      	adds	r0, r0, r3
    1d2e:	f7ff ff9f 	bl	1c70 <rtc_compare_set>
}
    1d32:	bd10      	pop	{r4, pc}
    1d34:	0000fa23 	.word	0x0000fa23
    1d38:	20000044 	.word	0x20000044
    1d3c:	20000048 	.word	0x20000048

00001d40 <_timer_idle_exit>:
	RTC_CC_EVENT = 0;
    1d40:	2200      	movs	r2, #0
    1d42:	4b07      	ldr	r3, [pc, #28]	; (1d60 <_timer_idle_exit+0x20>)
{
    1d44:	b510      	push	{r4, lr}
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1d46:	2180      	movs	r1, #128	; 0x80
	RTC_CC_EVENT = 0;
    1d48:	645a      	str	r2, [r3, #68]	; 0x44
    1d4a:	23c0      	movs	r3, #192	; 0xc0
    1d4c:	4a05      	ldr	r2, [pc, #20]	; (1d64 <_timer_idle_exit+0x24>)
    1d4e:	005b      	lsls	r3, r3, #1
    1d50:	0289      	lsls	r1, r1, #10
    1d52:	50d1      	str	r1, [r2, r3]
	rtc_announce_set_next();
    1d54:	f7ff ffa6 	bl	1ca4 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1d58:	2201      	movs	r2, #1
    1d5a:	4b03      	ldr	r3, [pc, #12]	; (1d68 <_timer_idle_exit+0x28>)
    1d5c:	601a      	str	r2, [r3, #0]
}
    1d5e:	bd10      	pop	{r4, pc}
    1d60:	400110fc 	.word	0x400110fc
    1d64:	e000e100 	.word	0xe000e100
    1d68:	20000044 	.word	0x20000044

00001d6c <_sys_clock_driver_init>:

int _sys_clock_driver_init(struct device *device)
{
    1d6c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1d6e:	481a      	ldr	r0, [pc, #104]	; (1dd8 <_sys_clock_driver_init+0x6c>)
    1d70:	f007 fbd0 	bl	9514 <device_get_binding>
	if (!clock) {
    1d74:	2800      	cmp	r0, #0
    1d76:	d02b      	beq.n	1dd0 <_sys_clock_driver_init+0x64>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    1d78:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    1d7a:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1d7c:	6843      	ldr	r3, [r0, #4]
    1d7e:	2100      	movs	r1, #0
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	4798      	blx	r3
	rtc_past = 0;
    1d84:	4b15      	ldr	r3, [pc, #84]	; (1ddc <_sys_clock_driver_init+0x70>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1d86:	2283      	movs	r2, #131	; 0x83
	rtc_past = 0;
    1d88:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1d8a:	4b15      	ldr	r3, [pc, #84]	; (1de0 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1d8c:	4d15      	ldr	r5, [pc, #84]	; (1de4 <_sys_clock_driver_init+0x78>)
	expected_sys_ticks = 1;
    1d8e:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->PRESCALER = 0;
    1d90:	23a1      	movs	r3, #161	; 0xa1
    1d92:	00db      	lsls	r3, r3, #3
    1d94:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1d96:	3338      	adds	r3, #56	; 0x38
    1d98:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1d9a:	2380      	movs	r3, #128	; 0x80
    1d9c:	22d1      	movs	r2, #209	; 0xd1
    1d9e:	025b      	lsls	r3, r3, #9
    1da0:	0092      	lsls	r2, r2, #2
    1da2:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1da4:	3a40      	subs	r2, #64	; 0x40
    1da6:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1da8:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <_sys_clock_driver_init+0x7c>)
    1daa:	2180      	movs	r1, #128	; 0x80
    1dac:	645c      	str	r4, [r3, #68]	; 0x44
    1dae:	23c0      	movs	r3, #192	; 0xc0
    1db0:	4a0e      	ldr	r2, [pc, #56]	; (1dec <_sys_clock_driver_init+0x80>)
    1db2:	005b      	lsls	r3, r3, #1
    1db4:	0289      	lsls	r1, r1, #10
    1db6:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1db8:	2011      	movs	r0, #17
    1dba:	0022      	movs	r2, r4
    1dbc:	0031      	movs	r1, r6
    1dbe:	f7fe fe13 	bl	9e8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1dc2:	2011      	movs	r0, #17
    1dc4:	f7fe fde6 	bl	994 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1dc8:	0020      	movs	r0, r4
	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1dca:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    1dcc:	602e      	str	r6, [r5, #0]
}
    1dce:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1dd0:	2001      	movs	r0, #1
    1dd2:	4240      	negs	r0, r0
    1dd4:	e7fb      	b.n	1dce <_sys_clock_driver_init+0x62>
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	0000ae94 	.word	0x0000ae94
    1ddc:	20000048 	.word	0x20000048
    1de0:	20000044 	.word	0x20000044
    1de4:	40011000 	.word	0x40011000
    1de8:	400110fc 	.word	0x400110fc
    1dec:	e000e100 	.word	0xe000e100

00001df0 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1df0:	b570      	push	{r4, r5, r6, lr}
    1df2:	0006      	movs	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1df4:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1df6:	000d      	movs	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1df8:	f007 fa72 	bl	92e0 <net_buf_pool_get>
    1dfc:	4b0e      	ldr	r3, [pc, #56]	; (1e38 <hci_cmd_done.isra.9+0x48>)
    1dfe:	4298      	cmp	r0, r3
    1e00:	d118      	bne.n	1e34 <hci_cmd_done.isra.9+0x44>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1e02:	0028      	movs	r0, r5
    1e04:	f007 fa72 	bl	92ec <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1e08:	0028      	movs	r0, r5
    1e0a:	f007 fa6f 	bl	92ec <net_buf_id>
    1e0e:	4c0b      	ldr	r4, [pc, #44]	; (1e3c <hci_cmd_done.isra.9+0x4c>)
    1e10:	00c0      	lsls	r0, r0, #3
    1e12:	1820      	adds	r0, r4, r0
    1e14:	6843      	ldr	r3, [r0, #4]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d00c      	beq.n	1e34 <hci_cmd_done.isra.9+0x44>
		cmd(buf)->status = status;
    1e1a:	0028      	movs	r0, r5
    1e1c:	f007 fa66 	bl	92ec <net_buf_id>
    1e20:	00c0      	lsls	r0, r0, #3
    1e22:	5506      	strb	r6, [r0, r4]
		k_sem_give(cmd(buf)->sync);
    1e24:	0028      	movs	r0, r5
    1e26:	f007 fa61 	bl	92ec <net_buf_id>
    1e2a:	00c0      	lsls	r0, r0, #3
    1e2c:	1824      	adds	r4, r4, r0

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1e2e:	6860      	ldr	r0, [r4, #4]
    1e30:	f008 f852 	bl	9ed8 <_impl_k_sem_give>
	}
}
    1e34:	bd70      	pop	{r4, r5, r6, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	200024dc 	.word	0x200024dc
    1e3c:	2000004c 	.word	0x2000004c

00001e40 <atomic_test_bit.constprop.24>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
    1e40:	b510      	push	{r4, lr}
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1e42:	0942      	lsrs	r2, r0, #5
static inline int atomic_test_bit(const atomic_t *target, int bit)
    1e44:	0004      	movs	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1e46:	4806      	ldr	r0, [pc, #24]	; (1e60 <atomic_test_bit.constprop.24+0x20>)
    1e48:	0092      	lsls	r2, r2, #2
    1e4a:	3070      	adds	r0, #112	; 0x70
    1e4c:	1880      	adds	r0, r0, r2
    1e4e:	f008 fc31 	bl	a6b4 <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1e52:	231f      	movs	r3, #31
    1e54:	401c      	ands	r4, r3
    1e56:	4120      	asrs	r0, r4
    1e58:	3b1e      	subs	r3, #30
    1e5a:	4018      	ands	r0, r3
}
    1e5c:	bd10      	pop	{r4, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	200021e0 	.word	0x200021e0

00001e64 <bt_hci_cmd_create>:
{
    1e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e66:	9101      	str	r1, [sp, #4]
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e68:	2101      	movs	r1, #1
{
    1e6a:	0005      	movs	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e6c:	4249      	negs	r1, r1
    1e6e:	4813      	ldr	r0, [pc, #76]	; (1ebc <bt_hci_cmd_create+0x58>)
    1e70:	f007 fac8 	bl	9404 <net_buf_alloc_fixed>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1e74:	0007      	movs	r7, r0
    1e76:	3708      	adds	r7, #8
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e78:	0004      	movs	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1e7a:	2100      	movs	r1, #0
    1e7c:	0038      	movs	r0, r7
    1e7e:	f007 fac9 	bl	9414 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1e82:	2300      	movs	r3, #0
	cmd(buf)->opcode = opcode;
    1e84:	0020      	movs	r0, r4
    1e86:	7523      	strb	r3, [r4, #20]
    1e88:	f007 fa30 	bl	92ec <net_buf_id>
    1e8c:	4e0c      	ldr	r6, [pc, #48]	; (1ec0 <bt_hci_cmd_create+0x5c>)
    1e8e:	00c0      	lsls	r0, r0, #3
    1e90:	1830      	adds	r0, r6, r0
    1e92:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    1e94:	0020      	movs	r0, r4
    1e96:	f007 fa29 	bl	92ec <net_buf_id>
    1e9a:	2300      	movs	r3, #0
    1e9c:	00c0      	lsls	r0, r0, #3
    1e9e:	1836      	adds	r6, r6, r0
    1ea0:	6073      	str	r3, [r6, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1ea2:	0038      	movs	r0, r7
    1ea4:	2103      	movs	r1, #3
    1ea6:	f007 fafd 	bl	94a4 <net_buf_simple_add>
	hdr->param_len = param_len;
    1eaa:	466b      	mov	r3, sp
    1eac:	791b      	ldrb	r3, [r3, #4]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1eae:	7005      	strb	r5, [r0, #0]
    1eb0:	0a2d      	lsrs	r5, r5, #8
    1eb2:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    1eb4:	7083      	strb	r3, [r0, #2]
}
    1eb6:	0020      	movs	r0, r4
    1eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	200024dc 	.word	0x200024dc
    1ec0:	2000004c 	.word	0x2000004c

00001ec4 <bt_hci_cmd_send_sync>:
{
    1ec4:	b570      	push	{r4, r5, r6, lr}
    1ec6:	000c      	movs	r4, r1
    1ec8:	b086      	sub	sp, #24
    1eca:	0015      	movs	r5, r2
	if (!buf) {
    1ecc:	2900      	cmp	r1, #0
    1ece:	d103      	bne.n	1ed8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    1ed0:	f7ff ffc8 	bl	1e64 <bt_hci_cmd_create>
    1ed4:	1e04      	subs	r4, r0, #0
		if (!buf) {
    1ed6:	d02f      	beq.n	1f38 <bt_hci_cmd_send_sync+0x74>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1ed8:	2201      	movs	r2, #1
    1eda:	2100      	movs	r1, #0
    1edc:	4668      	mov	r0, sp
    1ede:	f007 fff1 	bl	9ec4 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1ee2:	0020      	movs	r0, r4
    1ee4:	f007 fa02 	bl	92ec <net_buf_id>
    1ee8:	466b      	mov	r3, sp
    1eea:	4e14      	ldr	r6, [pc, #80]	; (1f3c <bt_hci_cmd_send_sync+0x78>)
    1eec:	00c0      	lsls	r0, r0, #3
    1eee:	1830      	adds	r0, r6, r0
    1ef0:	6043      	str	r3, [r0, #4]
	net_buf_ref(buf);
    1ef2:	0020      	movs	r0, r4
    1ef4:	f007 fad2 	bl	949c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1ef8:	4811      	ldr	r0, [pc, #68]	; (1f40 <bt_hci_cmd_send_sync+0x7c>)
    1efa:	0021      	movs	r1, r4
    1efc:	30b4      	adds	r0, #180	; 0xb4
    1efe:	f007 fa8d 	bl	941c <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1f02:	4910      	ldr	r1, [pc, #64]	; (1f44 <bt_hci_cmd_send_sync+0x80>)
    1f04:	4668      	mov	r0, sp
    1f06:	f008 f841 	bl	9f8c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1f0a:	0020      	movs	r0, r4
    1f0c:	f007 f9ee 	bl	92ec <net_buf_id>
    1f10:	00c0      	lsls	r0, r0, #3
    1f12:	5d80      	ldrb	r0, [r0, r6]
    1f14:	2800      	cmp	r0, #0
    1f16:	d005      	beq.n	1f24 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
    1f18:	0020      	movs	r0, r4
    1f1a:	f007 fa8d 	bl	9438 <net_buf_unref>
		err = -EIO;
    1f1e:	2005      	movs	r0, #5
			return -ENOBUFS;
    1f20:	4240      	negs	r0, r0
    1f22:	e002      	b.n	1f2a <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    1f24:	2d00      	cmp	r5, #0
    1f26:	d002      	beq.n	1f2e <bt_hci_cmd_send_sync+0x6a>
			*rsp = buf;
    1f28:	602c      	str	r4, [r5, #0]
}
    1f2a:	b006      	add	sp, #24
    1f2c:	bd70      	pop	{r4, r5, r6, pc}
			net_buf_unref(buf);
    1f2e:	0020      	movs	r0, r4
    1f30:	f007 fa82 	bl	9438 <net_buf_unref>
		err = 0;
    1f34:	0028      	movs	r0, r5
    1f36:	e7f8      	b.n	1f2a <bt_hci_cmd_send_sync+0x66>
			return -ENOBUFS;
    1f38:	2037      	movs	r0, #55	; 0x37
    1f3a:	e7f1      	b.n	1f20 <bt_hci_cmd_send_sync+0x5c>
    1f3c:	2000004c 	.word	0x2000004c
    1f40:	200021e0 	.word	0x200021e0
    1f44:	00002710 	.word	0x00002710

00001f48 <set_random_address>:
{
    1f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1f4a:	4e14      	ldr	r6, [pc, #80]	; (1f9c <set_random_address+0x54>)
    1f4c:	2206      	movs	r2, #6
    1f4e:	0037      	movs	r7, r6
    1f50:	3708      	adds	r7, #8
    1f52:	0039      	movs	r1, r7
    1f54:	0005      	movs	r5, r0
    1f56:	f7fe fb74 	bl	642 <memcmp>
    1f5a:	1e04      	subs	r4, r0, #0
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1f5c:	d018      	beq.n	1f90 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1f5e:	2106      	movs	r1, #6
    1f60:	480f      	ldr	r0, [pc, #60]	; (1fa0 <set_random_address+0x58>)
    1f62:	f7ff ff7f 	bl	1e64 <bt_hci_cmd_create>
    1f66:	1e04      	subs	r4, r0, #0
	if (!buf) {
    1f68:	d014      	beq.n	1f94 <set_random_address+0x4c>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    1f6a:	2206      	movs	r2, #6
    1f6c:	0029      	movs	r1, r5
    1f6e:	3008      	adds	r0, #8
    1f70:	f007 fa9f 	bl	94b2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1f74:	0021      	movs	r1, r4
    1f76:	2200      	movs	r2, #0
    1f78:	4809      	ldr	r0, [pc, #36]	; (1fa0 <set_random_address+0x58>)
    1f7a:	f7ff ffa3 	bl	1ec4 <bt_hci_cmd_send_sync>
    1f7e:	1e04      	subs	r4, r0, #0
	if (err) {
    1f80:	d106      	bne.n	1f90 <set_random_address+0x48>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f82:	2206      	movs	r2, #6
    1f84:	0029      	movs	r1, r5
    1f86:	0038      	movs	r0, r7
    1f88:	f7fe fb6e 	bl	668 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1f8c:	2301      	movs	r3, #1
    1f8e:	71f3      	strb	r3, [r6, #7]
}
    1f90:	0020      	movs	r0, r4
    1f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    1f94:	2437      	movs	r4, #55	; 0x37
    1f96:	4264      	negs	r4, r4
    1f98:	e7fa      	b.n	1f90 <set_random_address+0x48>
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	200021e0 	.word	0x200021e0
    1fa0:	00002005 	.word	0x00002005

00001fa4 <set_le_scan_enable>:
{
    1fa4:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1fa6:	2102      	movs	r1, #2
{
    1fa8:	0005      	movs	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1faa:	4816      	ldr	r0, [pc, #88]	; (2004 <set_le_scan_enable+0x60>)
    1fac:	f7ff ff5a 	bl	1e64 <bt_hci_cmd_create>
    1fb0:	1e04      	subs	r4, r0, #0
	if (!buf) {
    1fb2:	d023      	beq.n	1ffc <set_le_scan_enable+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    1fb4:	2102      	movs	r1, #2
    1fb6:	3008      	adds	r0, #8
    1fb8:	f007 fa74 	bl	94a4 <net_buf_simple_add>
    1fbc:	0006      	movs	r6, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fbe:	2d01      	cmp	r5, #1
    1fc0:	d114      	bne.n	1fec <set_le_scan_enable+0x48>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1fc2:	200a      	movs	r0, #10
    1fc4:	f7ff ff3c 	bl	1e40 <atomic_test_bit.constprop.24>
    1fc8:	7070      	strb	r0, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1fca:	0021      	movs	r1, r4
	cp->enable = enable;
    1fcc:	7035      	strb	r5, [r6, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1fce:	2200      	movs	r2, #0
    1fd0:	480c      	ldr	r0, [pc, #48]	; (2004 <set_le_scan_enable+0x60>)
    1fd2:	f7ff ff77 	bl	1ec4 <bt_hci_cmd_send_sync>
    1fd6:	1e04      	subs	r4, r0, #0
	if (err) {
    1fd8:	d106      	bne.n	1fe8 <set_le_scan_enable+0x44>
    1fda:	480b      	ldr	r0, [pc, #44]	; (2008 <set_le_scan_enable+0x64>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fdc:	3070      	adds	r0, #112	; 0x70
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fde:	2d01      	cmp	r5, #1
    1fe0:	d107      	bne.n	1ff2 <set_le_scan_enable+0x4e>
    1fe2:	2180      	movs	r1, #128	; 0x80
    1fe4:	f008 fb72 	bl	a6cc <atomic_or>
}
    1fe8:	0020      	movs	r0, r4
    1fea:	bd70      	pop	{r4, r5, r6, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1fec:	2300      	movs	r3, #0
    1fee:	7043      	strb	r3, [r0, #1]
    1ff0:	e7eb      	b.n	1fca <set_le_scan_enable+0x26>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ff2:	2181      	movs	r1, #129	; 0x81
    1ff4:	4249      	negs	r1, r1
    1ff6:	f008 fb74 	bl	a6e2 <atomic_and>
    1ffa:	e7f5      	b.n	1fe8 <set_le_scan_enable+0x44>
		return -ENOBUFS;
    1ffc:	2437      	movs	r4, #55	; 0x37
    1ffe:	4264      	negs	r4, r4
    2000:	e7f2      	b.n	1fe8 <set_le_scan_enable+0x44>
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	0000200c 	.word	0x0000200c
    2008:	200021e0 	.word	0x200021e0

0000200c <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    200c:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    200e:	2008      	movs	r0, #8
    2010:	f7ff ff16 	bl	1e40 <atomic_test_bit.constprop.24>
    2014:	1e04      	subs	r4, r0, #0
    2016:	d001      	beq.n	201c <bt_le_scan_update+0x10>
		return 0;
    2018:	2000      	movs	r0, #0

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    201a:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    201c:	2007      	movs	r0, #7
    201e:	f7ff ff0f 	bl	1e40 <atomic_test_bit.constprop.24>
    2022:	2800      	cmp	r0, #0
    2024:	d0f8      	beq.n	2018 <bt_le_scan_update+0xc>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2026:	0020      	movs	r0, r4
    2028:	f7ff ffbc 	bl	1fa4 <set_le_scan_enable>
    202c:	e7f5      	b.n	201a <bt_le_scan_update+0xe>

0000202e <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    202e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2030:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2032:	2106      	movs	r1, #6
{
    2034:	0004      	movs	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2036:	7003      	strb	r3, [r0, #0]
	return bt_rand(addr->a.val, 6);
    2038:	18c0      	adds	r0, r0, r3
    203a:	f001 faf1 	bl	3620 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    203e:	2800      	cmp	r0, #0
    2040:	d104      	bne.n	204c <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    2042:	2340      	movs	r3, #64	; 0x40
    2044:	79a2      	ldrb	r2, [r4, #6]
    2046:	425b      	negs	r3, r3
    2048:	4313      	orrs	r3, r2
    204a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    204c:	bd10      	pop	{r4, pc}
	...

00002050 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    2050:	b5f0      	push	{r4, r5, r6, r7, lr}
    2052:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2054:	aa04      	add	r2, sp, #16
    2056:	2100      	movs	r1, #0
    2058:	48c5      	ldr	r0, [pc, #788]	; (2370 <hci_init+0x320>)
    205a:	f7ff ff33 	bl	1ec4 <bt_hci_cmd_send_sync>
    205e:	1e04      	subs	r4, r0, #0
	if (err) {
    2060:	d000      	beq.n	2064 <hci_init+0x14>
    2062:	e135      	b.n	22d0 <hci_init+0x280>
	u8_t status = buf->data[0];
    2064:	9b04      	ldr	r3, [sp, #16]
    2066:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	2b00      	cmp	r3, #0
    206c:	d106      	bne.n	207c <hci_init+0x2c>
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    206e:	48c1      	ldr	r0, [pc, #772]	; (2374 <hci_init+0x324>)
	scan_dev_found_cb = NULL;
    2070:	4ac1      	ldr	r2, [pc, #772]	; (2378 <hci_init+0x328>)
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    2072:	2101      	movs	r1, #1
    2074:	3070      	adds	r0, #112	; 0x70
	scan_dev_found_cb = NULL;
    2076:	6013      	str	r3, [r2, #0]
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    2078:	f008 fb1e 	bl	a6b8 <atomic_set>
	net_buf_unref(rsp);
    207c:	9804      	ldr	r0, [sp, #16]
    207e:	f007 f9db 	bl	9438 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2082:	aa04      	add	r2, sp, #16
    2084:	2100      	movs	r1, #0
    2086:	48bd      	ldr	r0, [pc, #756]	; (237c <hci_init+0x32c>)
    2088:	f7ff ff1c 	bl	1ec4 <bt_hci_cmd_send_sync>
    208c:	1e04      	subs	r4, r0, #0
	if (err) {
    208e:	d000      	beq.n	2092 <hci_init+0x42>
    2090:	e11e      	b.n	22d0 <hci_init+0x280>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2092:	4db8      	ldr	r5, [pc, #736]	; (2374 <hci_init+0x324>)
    2094:	9b04      	ldr	r3, [sp, #16]
    2096:	0028      	movs	r0, r5
    2098:	6899      	ldr	r1, [r3, #8]
    209a:	2208      	movs	r2, #8
    209c:	3101      	adds	r1, #1
    209e:	3016      	adds	r0, #22
    20a0:	f7fe fae2 	bl	668 <memcpy>
	net_buf_unref(rsp);
    20a4:	9804      	ldr	r0, [sp, #16]
    20a6:	f007 f9c7 	bl	9438 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    20aa:	0021      	movs	r1, r4
    20ac:	aa04      	add	r2, sp, #16
    20ae:	48b4      	ldr	r0, [pc, #720]	; (2380 <hci_init+0x330>)
    20b0:	f7ff ff08 	bl	1ec4 <bt_hci_cmd_send_sync>
    20b4:	1e04      	subs	r4, r0, #0
	if (err) {
    20b6:	d000      	beq.n	20ba <hci_init+0x6a>
    20b8:	e10a      	b.n	22d0 <hci_init+0x280>
	read_local_ver_complete(rsp);
    20ba:	9804      	ldr	r0, [sp, #16]
    20bc:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    20be:	785a      	ldrb	r2, [r3, #1]
    20c0:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    20c2:	78da      	ldrb	r2, [r3, #3]
    20c4:	7899      	ldrb	r1, [r3, #2]
    20c6:	0212      	lsls	r2, r2, #8
    20c8:	430a      	orrs	r2, r1
    20ca:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    20cc:	791a      	ldrb	r2, [r3, #4]
    20ce:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    20d0:	7a1a      	ldrb	r2, [r3, #8]
    20d2:	79d9      	ldrb	r1, [r3, #7]
    20d4:	0212      	lsls	r2, r2, #8
    20d6:	430a      	orrs	r2, r1
    20d8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    20da:	795a      	ldrb	r2, [r3, #5]
    20dc:	799b      	ldrb	r3, [r3, #6]
    20de:	021b      	lsls	r3, r3, #8
    20e0:	4313      	orrs	r3, r2
    20e2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    20e4:	f007 f9a8 	bl	9438 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    20e8:	0021      	movs	r1, r4
    20ea:	aa04      	add	r2, sp, #16
    20ec:	48a5      	ldr	r0, [pc, #660]	; (2384 <hci_init+0x334>)
    20ee:	f7ff fee9 	bl	1ec4 <bt_hci_cmd_send_sync>
    20f2:	1e04      	subs	r4, r0, #0
	if (err) {
    20f4:	d000      	beq.n	20f8 <hci_init+0xa8>
    20f6:	e0eb      	b.n	22d0 <hci_init+0x280>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    20f8:	9b04      	ldr	r3, [sp, #16]
    20fa:	2206      	movs	r2, #6
    20fc:	6899      	ldr	r1, [r3, #8]
    20fe:	1c68      	adds	r0, r5, #1
    2100:	3101      	adds	r1, #1
    2102:	f7fe fab1 	bl	668 <memcpy>
	net_buf_unref(rsp);
    2106:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2108:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    210a:	f007 f995 	bl	9438 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    210e:	0021      	movs	r1, r4
    2110:	aa04      	add	r2, sp, #16
    2112:	489d      	ldr	r0, [pc, #628]	; (2388 <hci_init+0x338>)
    2114:	f7ff fed6 	bl	1ec4 <bt_hci_cmd_send_sync>
    2118:	1e04      	subs	r4, r0, #0
	if (err) {
    211a:	d000      	beq.n	211e <hci_init+0xce>
    211c:	e0d8      	b.n	22d0 <hci_init+0x280>
	memcpy(bt_dev.supported_commands, rp->commands,
    211e:	0028      	movs	r0, r5
    2120:	9b04      	ldr	r3, [sp, #16]
    2122:	2240      	movs	r2, #64	; 0x40
    2124:	6899      	ldr	r1, [r3, #8]
    2126:	301e      	adds	r0, #30
    2128:	3101      	adds	r1, #1
    212a:	f7fe fa9d 	bl	668 <memcpy>
	net_buf_unref(rsp);
    212e:	9804      	ldr	r0, [sp, #16]
    2130:	f007 f982 	bl	9438 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2134:	7eab      	ldrb	r3, [r5, #26]
    2136:	065b      	lsls	r3, r3, #25
    2138:	d400      	bmi.n	213c <hci_init+0xec>
    213a:	e157      	b.n	23ec <hci_init+0x39c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    213c:	0021      	movs	r1, r4
    213e:	aa04      	add	r2, sp, #16
    2140:	4892      	ldr	r0, [pc, #584]	; (238c <hci_init+0x33c>)
    2142:	f7ff febf 	bl	1ec4 <bt_hci_cmd_send_sync>
    2146:	1e04      	subs	r4, r0, #0
	if (err) {
    2148:	d000      	beq.n	214c <hci_init+0xfc>
    214a:	e0c1      	b.n	22d0 <hci_init+0x280>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    214c:	0028      	movs	r0, r5
    214e:	9b04      	ldr	r3, [sp, #16]
    2150:	2208      	movs	r2, #8
    2152:	6899      	ldr	r1, [r3, #8]
    2154:	3078      	adds	r0, #120	; 0x78
    2156:	3101      	adds	r1, #1
    2158:	f7fe fa86 	bl	668 <memcpy>
	net_buf_unref(rsp);
    215c:	9804      	ldr	r0, [sp, #16]
    215e:	f007 f96b 	bl	9438 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2162:	7eab      	ldrb	r3, [r5, #26]
    2164:	069b      	lsls	r3, r3, #26
    2166:	d400      	bmi.n	216a <hci_init+0x11a>
    2168:	e09a      	b.n	22a0 <hci_init+0x250>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    216a:	002b      	movs	r3, r5
    216c:	333a      	adds	r3, #58	; 0x3a
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	071b      	lsls	r3, r3, #28
    2172:	d500      	bpl.n	2176 <hci_init+0x126>
    2174:	e0af      	b.n	22d6 <hci_init+0x286>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2176:	2108      	movs	r1, #8
    2178:	4885      	ldr	r0, [pc, #532]	; (2390 <hci_init+0x340>)
    217a:	f7ff fe73 	bl	1e64 <bt_hci_cmd_create>
    217e:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2180:	d100      	bne.n	2184 <hci_init+0x134>
    2182:	e093      	b.n	22ac <hci_init+0x25c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2184:	2108      	movs	r1, #8
    2186:	1840      	adds	r0, r0, r1
    2188:	f007 f98c 	bl	94a4 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    218c:	002b      	movs	r3, r5
    218e:	3340      	adds	r3, #64	; 0x40
    2190:	781a      	ldrb	r2, [r3, #0]
    2192:	2306      	movs	r3, #6
    2194:	401a      	ands	r2, r3
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;
    2196:	3b04      	subs	r3, #4
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2198:	2a06      	cmp	r2, #6
    219a:	d101      	bne.n	21a0 <hci_init+0x150>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    219c:	3381      	adds	r3, #129	; 0x81
    219e:	33ff      	adds	r3, #255	; 0xff
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    21a0:	2200      	movs	r2, #0
    21a2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    21a4:	0a1b      	lsrs	r3, r3, #8
    21a6:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    21a8:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    21aa:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    21ac:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    21ae:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    21b0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    21b2:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    21b4:	0021      	movs	r1, r4
    21b6:	4876      	ldr	r0, [pc, #472]	; (2390 <hci_init+0x340>)
    21b8:	f7ff fe84 	bl	1ec4 <bt_hci_cmd_send_sync>
    21bc:	1e04      	subs	r4, r0, #0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    21be:	d000      	beq.n	21c2 <hci_init+0x172>
    21c0:	e086      	b.n	22d0 <hci_init+0x280>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    21c2:	2108      	movs	r1, #8
    21c4:	4873      	ldr	r0, [pc, #460]	; (2394 <hci_init+0x344>)
    21c6:	f7ff fe4d 	bl	1e64 <bt_hci_cmd_create>
    21ca:	1e06      	subs	r6, r0, #0
	if (!buf) {
    21cc:	d06e      	beq.n	22ac <hci_init+0x25c>
	ev = net_buf_add(buf, sizeof(*ev));
    21ce:	2108      	movs	r1, #8
    21d0:	3008      	adds	r0, #8
    21d2:	f007 f967 	bl	94a4 <net_buf_simple_add>
    21d6:	2380      	movs	r3, #128	; 0x80
    21d8:	2702      	movs	r7, #2
    21da:	7043      	strb	r3, [r0, #1]
    21dc:	3b60      	subs	r3, #96	; 0x60
	dst[0] = val;
    21de:	7004      	strb	r4, [r0, #0]
    21e0:	7084      	strb	r4, [r0, #2]
    21e2:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    21e4:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    21e6:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    21e8:	70c7      	strb	r7, [r0, #3]
    21ea:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    21ec:	0022      	movs	r2, r4
    21ee:	0031      	movs	r1, r6
    21f0:	4868      	ldr	r0, [pc, #416]	; (2394 <hci_init+0x344>)
    21f2:	f7ff fe67 	bl	1ec4 <bt_hci_cmd_send_sync>
    21f6:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    21f8:	d16a      	bne.n	22d0 <hci_init+0x280>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    21fa:	0001      	movs	r1, r0
    21fc:	aa04      	add	r2, sp, #16
    21fe:	4866      	ldr	r0, [pc, #408]	; (2398 <hci_init+0x348>)
    2200:	f7ff fe60 	bl	1ec4 <bt_hci_cmd_send_sync>
	if (err) {
    2204:	2800      	cmp	r0, #0
    2206:	d126      	bne.n	2256 <hci_init+0x206>
	net_buf_unref(rsp);
    2208:	9804      	ldr	r0, [sp, #16]
    220a:	f007 f915 	bl	9438 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    220e:	aa04      	add	r2, sp, #16
    2210:	0021      	movs	r1, r4
    2212:	4862      	ldr	r0, [pc, #392]	; (239c <hci_init+0x34c>)
    2214:	f7ff fe56 	bl	1ec4 <bt_hci_cmd_send_sync>
	if (err) {
    2218:	2800      	cmp	r0, #0
    221a:	d11c      	bne.n	2256 <hci_init+0x206>
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    221c:	0028      	movs	r0, r5
	rp.cmds = (void *)rsp->data;
    221e:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2220:	003a      	movs	r2, r7
    2222:	6899      	ldr	r1, [r3, #8]
    2224:	305f      	adds	r0, #95	; 0x5f
    2226:	3101      	adds	r1, #1
    2228:	f7fe fa1e 	bl	668 <memcpy>
	net_buf_unref(rsp);
    222c:	9804      	ldr	r0, [sp, #16]
    222e:	f007 f903 	bl	9438 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2232:	aa04      	add	r2, sp, #16
    2234:	0021      	movs	r1, r4
    2236:	485a      	ldr	r0, [pc, #360]	; (23a0 <hci_init+0x350>)
    2238:	f7ff fe44 	bl	1ec4 <bt_hci_cmd_send_sync>
	if (err) {
    223c:	2800      	cmp	r0, #0
    223e:	d10a      	bne.n	2256 <hci_init+0x206>
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2240:	0028      	movs	r0, r5
	rp.feat = (void *)rsp->data;
    2242:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2244:	305e      	adds	r0, #94	; 0x5e
    2246:	6899      	ldr	r1, [r3, #8]
    2248:	2201      	movs	r2, #1
    224a:	3101      	adds	r1, #1
    224c:	f7fe fa0c 	bl	668 <memcpy>
	net_buf_unref(rsp);
    2250:	9804      	ldr	r0, [sp, #16]
    2252:	f007 f8f1 	bl	9438 <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2256:	2207      	movs	r2, #7
    2258:	2100      	movs	r1, #0
    225a:	a802      	add	r0, sp, #8
    225c:	f7fe fa2e 	bl	6bc <memset>
	return memcmp(a, b, sizeof(*a));
    2260:	2207      	movs	r2, #7
    2262:	a902      	add	r1, sp, #8
    2264:	0028      	movs	r0, r5
    2266:	f7fe f9ec 	bl	642 <memcmp>
    226a:	2800      	cmp	r0, #0
    226c:	d157      	bne.n	231e <hci_init+0x2ce>
	if (bt_storage) {
    226e:	4e4d      	ldr	r6, [pc, #308]	; (23a4 <hci_init+0x354>)
    2270:	6833      	ldr	r3, [r6, #0]
    2272:	2b00      	cmp	r3, #0
    2274:	d160      	bne.n	2338 <hci_init+0x2e8>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2276:	002b      	movs	r3, r5
    2278:	2401      	movs	r4, #1
    227a:	3360      	adds	r3, #96	; 0x60
    227c:	781b      	ldrb	r3, [r3, #0]
    227e:	4223      	tst	r3, r4
    2280:	d000      	beq.n	2284 <hci_init+0x234>
    2282:	e097      	b.n	23b4 <hci_init+0x364>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2284:	0028      	movs	r0, r5
    2286:	f7ff fed2 	bl	202e <bt_addr_le_create_static>
    228a:	1e04      	subs	r4, r0, #0
	if (err) {
    228c:	d120      	bne.n	22d0 <hci_init+0x280>
	if (bt_storage) {
    228e:	6833      	ldr	r3, [r6, #0]
    2290:	2b00      	cmp	r3, #0
    2292:	d05a      	beq.n	234a <hci_init+0x2fa>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2294:	685e      	ldr	r6, [r3, #4]
    2296:	002a      	movs	r2, r5
    2298:	2307      	movs	r3, #7
    229a:	0001      	movs	r1, r0
    229c:	47b0      	blx	r6
    229e:	e054      	b.n	234a <hci_init+0x2fa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    22a0:	2102      	movs	r1, #2
    22a2:	4841      	ldr	r0, [pc, #260]	; (23a8 <hci_init+0x358>)
    22a4:	f7ff fdde 	bl	1e64 <bt_hci_cmd_create>
    22a8:	1e06      	subs	r6, r0, #0
		if (!buf) {
    22aa:	d102      	bne.n	22b2 <hci_init+0x262>
		return -ENOBUFS;
    22ac:	2437      	movs	r4, #55	; 0x37
		return -ENODEV;
    22ae:	4264      	negs	r4, r4
    22b0:	e00e      	b.n	22d0 <hci_init+0x280>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    22b2:	2102      	movs	r1, #2
    22b4:	3008      	adds	r0, #8
    22b6:	f007 f8f5 	bl	94a4 <net_buf_simple_add>
		cp_le->le = 0x01;
    22ba:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    22bc:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    22be:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    22c0:	0022      	movs	r2, r4
    22c2:	0031      	movs	r1, r6
    22c4:	4838      	ldr	r0, [pc, #224]	; (23a8 <hci_init+0x358>)
    22c6:	f7ff fdfd 	bl	1ec4 <bt_hci_cmd_send_sync>
    22ca:	1e04      	subs	r4, r0, #0
		if (err) {
    22cc:	d100      	bne.n	22d0 <hci_init+0x280>
    22ce:	e74c      	b.n	216a <hci_init+0x11a>
	}

	show_dev_info();

	return 0;
}
    22d0:	0020      	movs	r0, r4
    22d2:	b007      	add	sp, #28
    22d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    22d6:	aa04      	add	r2, sp, #16
    22d8:	2100      	movs	r1, #0
    22da:	4834      	ldr	r0, [pc, #208]	; (23ac <hci_init+0x35c>)
    22dc:	f7ff fdf2 	bl	1ec4 <bt_hci_cmd_send_sync>
    22e0:	1e04      	subs	r4, r0, #0
		if (err) {
    22e2:	d1f5      	bne.n	22d0 <hci_init+0x280>
		le_read_supp_states_complete(rsp);
    22e4:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    22e6:	6882      	ldr	r2, [r0, #8]
    22e8:	1c53      	adds	r3, r2, #1
    22ea:	7859      	ldrb	r1, [r3, #1]
    22ec:	7852      	ldrb	r2, [r2, #1]
    22ee:	0209      	lsls	r1, r1, #8
    22f0:	4311      	orrs	r1, r2
    22f2:	789a      	ldrb	r2, [r3, #2]
    22f4:	791c      	ldrb	r4, [r3, #4]
    22f6:	0412      	lsls	r2, r2, #16
    22f8:	4311      	orrs	r1, r2
    22fa:	78da      	ldrb	r2, [r3, #3]
    22fc:	0612      	lsls	r2, r2, #24
    22fe:	430a      	orrs	r2, r1
    2300:	7959      	ldrb	r1, [r3, #5]
    2302:	0209      	lsls	r1, r1, #8
    2304:	430c      	orrs	r4, r1
    2306:	7999      	ldrb	r1, [r3, #6]
    2308:	79db      	ldrb	r3, [r3, #7]
    230a:	0409      	lsls	r1, r1, #16
    230c:	4321      	orrs	r1, r4
    230e:	061b      	lsls	r3, r3, #24
    2310:	430b      	orrs	r3, r1
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2312:	0029      	movs	r1, r5
    2314:	3180      	adds	r1, #128	; 0x80
    2316:	c10c      	stmia	r1!, {r2, r3}
		net_buf_unref(rsp);
    2318:	f007 f88e 	bl	9438 <net_buf_unref>
    231c:	e72b      	b.n	2176 <hci_init+0x126>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    231e:	2207      	movs	r2, #7
    2320:	4923      	ldr	r1, [pc, #140]	; (23b0 <hci_init+0x360>)
    2322:	a804      	add	r0, sp, #16
    2324:	f7fe f9a0 	bl	668 <memcpy>
    2328:	2207      	movs	r2, #7
    232a:	a904      	add	r1, sp, #16
    232c:	0028      	movs	r0, r5
    232e:	f7fe f988 	bl	642 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2332:	2800      	cmp	r0, #0
    2334:	d09b      	beq.n	226e <hci_init+0x21e>
    2336:	e7cb      	b.n	22d0 <hci_init+0x280>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2338:	2100      	movs	r1, #0
    233a:	681c      	ldr	r4, [r3, #0]
    233c:	002a      	movs	r2, r5
    233e:	2307      	movs	r3, #7
    2340:	0008      	movs	r0, r1
    2342:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    2344:	2807      	cmp	r0, #7
    2346:	d000      	beq.n	234a <hci_init+0x2fa>
    2348:	e795      	b.n	2276 <hci_init+0x226>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    234a:	782b      	ldrb	r3, [r5, #0]
    234c:	2b01      	cmp	r3, #1
    234e:	d14b      	bne.n	23e8 <hci_init+0x398>
    2350:	223f      	movs	r2, #63	; 0x3f
    2352:	79ab      	ldrb	r3, [r5, #6]
    2354:	4393      	bics	r3, r2
    2356:	2bc0      	cmp	r3, #192	; 0xc0
    2358:	d146      	bne.n	23e8 <hci_init+0x398>
	err = set_random_address(&bt_dev.id_addr.a);
    235a:	1c68      	adds	r0, r5, #1
    235c:	f7ff fdf4 	bl	1f48 <set_random_address>
    2360:	1e04      	subs	r4, r0, #0
	if (err) {
    2362:	d1b5      	bne.n	22d0 <hci_init+0x280>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2364:	0028      	movs	r0, r5
    2366:	2104      	movs	r1, #4
    2368:	3070      	adds	r0, #112	; 0x70
    236a:	f008 f9af 	bl	a6cc <atomic_or>
    236e:	e7af      	b.n	22d0 <hci_init+0x280>
    2370:	00000c03 	.word	0x00000c03
    2374:	200021e0 	.word	0x200021e0
    2378:	200000a8 	.word	0x200000a8
    237c:	00001003 	.word	0x00001003
    2380:	00001001 	.word	0x00001001
    2384:	00001009 	.word	0x00001009
    2388:	00001002 	.word	0x00001002
    238c:	00002003 	.word	0x00002003
    2390:	00002001 	.word	0x00002001
    2394:	00000c01 	.word	0x00000c01
    2398:	0000fc01 	.word	0x0000fc01
    239c:	0000fc02 	.word	0x0000fc02
    23a0:	0000fc03 	.word	0x0000fc03
    23a4:	20000cd0 	.word	0x20000cd0
    23a8:	00000c6d 	.word	0x00000c6d
    23ac:	0000201c 	.word	0x0000201c
    23b0:	0000aa80 	.word	0x0000aa80
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    23b4:	aa01      	add	r2, sp, #4
    23b6:	2100      	movs	r1, #0
    23b8:	480d      	ldr	r0, [pc, #52]	; (23f0 <hci_init+0x3a0>)
    23ba:	f7ff fd83 	bl	1ec4 <bt_hci_cmd_send_sync>
		if (err) {
    23be:	2800      	cmp	r0, #0
    23c0:	d000      	beq.n	23c4 <hci_init+0x374>
    23c2:	e75f      	b.n	2284 <hci_init+0x234>
		rp = (void *)rsp->data;
    23c4:	9801      	ldr	r0, [sp, #4]
    23c6:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    23c8:	784b      	ldrb	r3, [r1, #1]
    23ca:	2b00      	cmp	r3, #0
    23cc:	d009      	beq.n	23e2 <hci_init+0x392>
			bt_addr_copy(&bt_dev.id_addr.a, &rp->a[0].bdaddr);
    23ce:	3102      	adds	r1, #2
	memcpy(dst, src, sizeof(*dst));
    23d0:	1c68      	adds	r0, r5, #1
    23d2:	2206      	movs	r2, #6
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    23d4:	702c      	strb	r4, [r5, #0]
    23d6:	f7fe f947 	bl	668 <memcpy>
			net_buf_unref(rsp);
    23da:	9801      	ldr	r0, [sp, #4]
    23dc:	f007 f82c 	bl	9438 <net_buf_unref>
    23e0:	e7b3      	b.n	234a <hci_init+0x2fa>
		net_buf_unref(rsp);
    23e2:	f007 f829 	bl	9438 <net_buf_unref>
    23e6:	e74d      	b.n	2284 <hci_init+0x234>
		return -EINVAL;
    23e8:	2416      	movs	r4, #22
    23ea:	e760      	b.n	22ae <hci_init+0x25e>
		return -ENODEV;
    23ec:	2413      	movs	r4, #19
    23ee:	e75e      	b.n	22ae <hci_init+0x25e>
    23f0:	0000fc09 	.word	0x0000fc09

000023f4 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    23f4:	b510      	push	{r4, lr}
	err = hci_init();
    23f6:	f7ff fe2b 	bl	2050 <hci_init>
    23fa:	1e04      	subs	r4, r0, #0
	if (err) {
    23fc:	d107      	bne.n	240e <init_work+0x1a>
    23fe:	4807      	ldr	r0, [pc, #28]	; (241c <init_work+0x28>)
    2400:	2102      	movs	r1, #2
    2402:	3070      	adds	r0, #112	; 0x70
    2404:	f008 f962 	bl	a6cc <atomic_or>
	bt_le_scan_update(false);
    2408:	0020      	movs	r0, r4
    240a:	f7ff fdff 	bl	200c <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    240e:	4b04      	ldr	r3, [pc, #16]	; (2420 <init_work+0x2c>)
    2410:	681b      	ldr	r3, [r3, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d001      	beq.n	241a <init_work+0x26>
		ready_cb(err);
    2416:	0020      	movs	r0, r4
    2418:	4798      	blx	r3
	}
}
    241a:	bd10      	pop	{r4, pc}
    241c:	200021e0 	.word	0x200021e0
    2420:	200000a4 	.word	0x200000a4

00002424 <bt_recv>:
{
    2424:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    2426:	7d05      	ldrb	r5, [r0, #20]
{
    2428:	b087      	sub	sp, #28
    242a:	0004      	movs	r4, r0
	switch (bt_buf_get_type(buf)) {
    242c:	2d01      	cmp	r5, #1
    242e:	d13f      	bne.n	24b0 <bt_recv+0x8c>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2430:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2432:	783b      	ldrb	r3, [r7, #0]
    2434:	3b0e      	subs	r3, #14
    2436:	2b01      	cmp	r3, #1
    2438:	d83f      	bhi.n	24ba <bt_recv+0x96>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    243a:	b662      	cpsie	i
    243c:	2004      	movs	r0, #4
    243e:	df02      	svc	2
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2440:	2111      	movs	r1, #17
    2442:	4f4a      	ldr	r7, [pc, #296]	; (256c <bt_recv+0x148>)
    2444:	68a6      	ldr	r6, [r4, #8]
    2446:	3770      	adds	r7, #112	; 0x70
    2448:	4249      	negs	r1, r1
    244a:	0038      	movs	r0, r7
    244c:	f008 f949 	bl	a6e2 <atomic_and>
	if (!evt->status) {
    2450:	7833      	ldrb	r3, [r6, #0]
    2452:	2b00      	cmp	r3, #0
    2454:	d108      	bne.n	2468 <bt_recv+0x44>
		memcpy(pub_key, evt->key, 64);
    2456:	1c71      	adds	r1, r6, #1
    2458:	2240      	movs	r2, #64	; 0x40
    245a:	4845      	ldr	r0, [pc, #276]	; (2570 <bt_recv+0x14c>)
    245c:	f7fe f904 	bl	668 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2460:	0029      	movs	r1, r5
    2462:	0038      	movs	r0, r7
    2464:	f008 f932 	bl	a6cc <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2468:	4b42      	ldr	r3, [pc, #264]	; (2574 <bt_recv+0x150>)
    246a:	681d      	ldr	r5, [r3, #0]
    246c:	2d00      	cmp	r5, #0
    246e:	d105      	bne.n	247c <bt_recv+0x58>
	net_buf_unref(buf);
    2470:	0020      	movs	r0, r4
    2472:	f006 ffe1 	bl	9438 <net_buf_unref>
		return 0;
    2476:	2000      	movs	r0, #0
}
    2478:	b007      	add	sp, #28
    247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : evt->key);
    247c:	2000      	movs	r0, #0
    247e:	7832      	ldrb	r2, [r6, #0]
    2480:	682b      	ldr	r3, [r5, #0]
    2482:	4282      	cmp	r2, r0
    2484:	d100      	bne.n	2488 <bt_recv+0x64>
    2486:	1c70      	adds	r0, r6, #1
    2488:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    248a:	686d      	ldr	r5, [r5, #4]
    248c:	e7ee      	b.n	246c <bt_recv+0x48>
	if (dh_key_cb) {
    248e:	4d3a      	ldr	r5, [pc, #232]	; (2578 <bt_recv+0x154>)
    2490:	68a2      	ldr	r2, [r4, #8]
    2492:	682b      	ldr	r3, [r5, #0]
    2494:	2b00      	cmp	r3, #0
    2496:	d0eb      	beq.n	2470 <bt_recv+0x4c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2498:	2000      	movs	r0, #0
    249a:	7811      	ldrb	r1, [r2, #0]
    249c:	4281      	cmp	r1, r0
    249e:	d100      	bne.n	24a2 <bt_recv+0x7e>
    24a0:	1c50      	adds	r0, r2, #1
    24a2:	4798      	blx	r3
		dh_key_cb = NULL;
    24a4:	2300      	movs	r3, #0
    24a6:	602b      	str	r3, [r5, #0]
    24a8:	e7e2      	b.n	2470 <bt_recv+0x4c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    24aa:	f7fe f8dd 	bl	668 <memcpy>
    24ae:	e037      	b.n	2520 <bt_recv+0xfc>
		net_buf_unref(buf);
    24b0:	f006 ffc2 	bl	9438 <net_buf_unref>
		return -EINVAL;
    24b4:	2016      	movs	r0, #22
    24b6:	4240      	negs	r0, r0
    24b8:	e7de      	b.n	2478 <bt_recv+0x54>
	net_buf_pull(buf, sizeof(*hdr));
    24ba:	0006      	movs	r6, r0
    24bc:	3608      	adds	r6, #8
    24be:	2102      	movs	r1, #2
    24c0:	0030      	movs	r0, r6
    24c2:	f007 f800 	bl	94c6 <net_buf_simple_pull>
	switch (hdr->evt) {
    24c6:	783b      	ldrb	r3, [r7, #0]
    24c8:	2b3e      	cmp	r3, #62	; 0x3e
    24ca:	d1d1      	bne.n	2470 <bt_recv+0x4c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    24cc:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    24ce:	0029      	movs	r1, r5
    24d0:	0030      	movs	r0, r6
    24d2:	f006 fff8 	bl	94c6 <net_buf_simple_pull>
	switch (evt->subevent) {
    24d6:	783d      	ldrb	r5, [r7, #0]
    24d8:	2d08      	cmp	r5, #8
    24da:	d0b1      	beq.n	2440 <bt_recv+0x1c>
    24dc:	2d09      	cmp	r5, #9
    24de:	d0d6      	beq.n	248e <bt_recv+0x6a>
    24e0:	2d02      	cmp	r5, #2
    24e2:	d1c5      	bne.n	2470 <bt_recv+0x4c>
	u8_t num_reports = net_buf_pull_u8(buf);
    24e4:	0030      	movs	r0, r6
    24e6:	f006 fff6 	bl	94d6 <net_buf_simple_pull_u8>
    24ea:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    24ec:	9b00      	ldr	r3, [sp, #0]
    24ee:	2b00      	cmp	r3, #0
    24f0:	d0be      	beq.n	2470 <bt_recv+0x4c>
		info = (void *)buf->data;
    24f2:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    24f4:	2109      	movs	r1, #9
    24f6:	0030      	movs	r0, r6
    24f8:	f006 ffe5 	bl	94c6 <net_buf_simple_pull>
		rssi = info->data[info->length];
    24fc:	7a2b      	ldrb	r3, [r5, #8]
    24fe:	1c69      	adds	r1, r5, #1
    2500:	18eb      	adds	r3, r5, r3
    2502:	7a5b      	ldrb	r3, [r3, #9]
    2504:	2207      	movs	r2, #7
    2506:	9301      	str	r3, [sp, #4]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2508:	786b      	ldrb	r3, [r5, #1]
    250a:	a804      	add	r0, sp, #16
    250c:	3b02      	subs	r3, #2
    250e:	2b01      	cmp	r3, #1
    2510:	d8cb      	bhi.n	24aa <bt_recv+0x86>
    2512:	f7fe f8a9 	bl	668 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2516:	ab04      	add	r3, sp, #16
    2518:	781b      	ldrb	r3, [r3, #0]
    251a:	aa04      	add	r2, sp, #16
    251c:	3b02      	subs	r3, #2
    251e:	7013      	strb	r3, [r2, #0]
		if (scan_dev_found_cb) {
    2520:	4f16      	ldr	r7, [pc, #88]	; (257c <bt_recv+0x158>)
    2522:	683b      	ldr	r3, [r7, #0]
    2524:	2b00      	cmp	r3, #0
    2526:	d017      	beq.n	2558 <bt_recv+0x134>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2528:	0030      	movs	r0, r6
    252a:	f006 ffdc 	bl	94e6 <net_buf_simple_headroom>
	state->len = buf->len;
    252e:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    2530:	9002      	str	r0, [sp, #8]
	state->len = buf->len;
    2532:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    2534:	7a2b      	ldrb	r3, [r5, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2536:	2104      	movs	r1, #4
			buf->len = info->length;
    2538:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    253a:	466b      	mov	r3, sp
    253c:	782a      	ldrb	r2, [r5, #0]
    253e:	5659      	ldrsb	r1, [r3, r1]
    2540:	683f      	ldr	r7, [r7, #0]
    2542:	0033      	movs	r3, r6
    2544:	a804      	add	r0, sp, #16
    2546:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2548:	466b      	mov	r3, sp
    254a:	6922      	ldr	r2, [r4, #16]
    254c:	891b      	ldrh	r3, [r3, #8]
    254e:	18d3      	adds	r3, r2, r3
    2550:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    2552:	466b      	mov	r3, sp
    2554:	899b      	ldrh	r3, [r3, #12]
    2556:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2558:	7a29      	ldrb	r1, [r5, #8]
    255a:	0030      	movs	r0, r6
    255c:	3101      	adds	r1, #1
    255e:	f006 ffb2 	bl	94c6 <net_buf_simple_pull>
    2562:	9b00      	ldr	r3, [sp, #0]
    2564:	3b01      	subs	r3, #1
    2566:	b2db      	uxtb	r3, r3
    2568:	9300      	str	r3, [sp, #0]
    256a:	e7bf      	b.n	24ec <bt_recv+0xc8>
    256c:	200021e0 	.word	0x200021e0
    2570:	20000060 	.word	0x20000060
    2574:	200000a0 	.word	0x200000a0
    2578:	2000005c 	.word	0x2000005c
    257c:	200000a8 	.word	0x200000a8

00002580 <bt_recv_prio>:
{
    2580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2582:	7d03      	ldrb	r3, [r0, #20]
{
    2584:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2586:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2588:	2b01      	cmp	r3, #1
    258a:	d002      	beq.n	2592 <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    258c:	b662      	cpsie	i
    258e:	2004      	movs	r0, #4
    2590:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2592:	8983      	ldrh	r3, [r0, #12]
    2594:	2b01      	cmp	r3, #1
    2596:	d9f9      	bls.n	258c <bt_recv_prio+0xc>
    2598:	7833      	ldrb	r3, [r6, #0]
    259a:	3b0e      	subs	r3, #14
    259c:	2b01      	cmp	r3, #1
    259e:	d8f5      	bhi.n	258c <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    25a0:	0005      	movs	r5, r0
    25a2:	3508      	adds	r5, #8
    25a4:	2102      	movs	r1, #2
    25a6:	0028      	movs	r0, r5
    25a8:	f006 ff8d 	bl	94c6 <net_buf_simple_pull>
	switch (hdr->evt) {
    25ac:	7833      	ldrb	r3, [r6, #0]
    25ae:	2b0e      	cmp	r3, #14
    25b0:	d005      	beq.n	25be <bt_recv_prio+0x3e>
    25b2:	2b0f      	cmp	r3, #15
    25b4:	d019      	beq.n	25ea <bt_recv_prio+0x6a>
		net_buf_unref(buf);
    25b6:	0020      	movs	r0, r4
    25b8:	f006 ff3e 	bl	9438 <net_buf_unref>
    25bc:	e7e6      	b.n	258c <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    25be:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    25c0:	2103      	movs	r1, #3
    25c2:	0028      	movs	r0, r5
	u8_t status, ncmd = evt->ncmd;
    25c4:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    25c6:	f006 ff7e 	bl	94c6 <net_buf_simple_pull>
	hci_cmd_done(opcode, status, buf);
    25ca:	68a3      	ldr	r3, [r4, #8]
    25cc:	0021      	movs	r1, r4
    25ce:	7818      	ldrb	r0, [r3, #0]
    25d0:	f7ff fc0e 	bl	1df0 <hci_cmd_done.isra.9>
	if (ncmd) {
    25d4:	2e00      	cmp	r6, #0
    25d6:	d003      	beq.n	25e0 <bt_recv_prio+0x60>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    25d8:	480a      	ldr	r0, [pc, #40]	; (2604 <bt_recv_prio+0x84>)
    25da:	3088      	adds	r0, #136	; 0x88
    25dc:	f007 fc7c 	bl	9ed8 <_impl_k_sem_give>
	net_buf_unref(buf);
    25e0:	0020      	movs	r0, r4
    25e2:	f006 ff29 	bl	9438 <net_buf_unref>
}
    25e6:	2000      	movs	r0, #0
    25e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    25ea:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    25ec:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    25ee:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    25f0:	0028      	movs	r0, r5
    25f2:	f006 ff68 	bl	94c6 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    25f6:	7830      	ldrb	r0, [r6, #0]
    25f8:	0021      	movs	r1, r4
    25fa:	f7ff fbf9 	bl	1df0 <hci_cmd_done.isra.9>
	if (ncmd) {
    25fe:	2f00      	cmp	r7, #0
    2600:	d0ee      	beq.n	25e0 <bt_recv_prio+0x60>
    2602:	e7e9      	b.n	25d8 <bt_recv_prio+0x58>
    2604:	200021e0 	.word	0x200021e0

00002608 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2608:	4a09      	ldr	r2, [pc, #36]	; (2630 <bt_hci_driver_register+0x28>)
    260a:	32c4      	adds	r2, #196	; 0xc4
    260c:	6813      	ldr	r3, [r2, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d108      	bne.n	2624 <bt_hci_driver_register+0x1c>
	if (!drv->open || !drv->send) {
    2612:	6881      	ldr	r1, [r0, #8]
    2614:	2900      	cmp	r1, #0
    2616:	d008      	beq.n	262a <bt_hci_driver_register+0x22>
    2618:	68c1      	ldr	r1, [r0, #12]
    261a:	2900      	cmp	r1, #0
    261c:	d005      	beq.n	262a <bt_hci_driver_register+0x22>
	bt_dev.drv = drv;
    261e:	6010      	str	r0, [r2, #0]
	return 0;
    2620:	0018      	movs	r0, r3
}
    2622:	4770      	bx	lr
		return -EALREADY;
    2624:	2045      	movs	r0, #69	; 0x45
		return -EINVAL;
    2626:	4240      	negs	r0, r0
    2628:	e7fb      	b.n	2622 <bt_hci_driver_register+0x1a>
    262a:	2016      	movs	r0, #22
    262c:	e7fb      	b.n	2626 <bt_hci_driver_register+0x1e>
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	200021e0 	.word	0x200021e0

00002634 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2638:	4805      	ldr	r0, [pc, #20]	; (2650 <bt_buf_get_rx+0x1c>)
    263a:	f006 fee3 	bl	9404 <net_buf_alloc_fixed>
    263e:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    2640:	d004      	beq.n	264c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2642:	2100      	movs	r1, #0
    2644:	3008      	adds	r0, #8
    2646:	f006 fee5 	bl	9414 <net_buf_simple_reserve>
    264a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    264c:	0020      	movs	r0, r4
    264e:	bd70      	pop	{r4, r5, r6, pc}
    2650:	200024fc 	.word	0x200024fc

00002654 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2654:	b510      	push	{r4, lr}
    2656:	0001      	movs	r1, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    2658:	f3ef 8210 	mrs	r2, PRIMASK
    265c:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    265e:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    2660:	4b0b      	ldr	r3, [pc, #44]	; (2690 <bt_buf_get_cmd_complete+0x3c>)
    2662:	33a0      	adds	r3, #160	; 0xa0
    2664:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    2666:	6018      	str	r0, [r3, #0]
	if (key) {
    2668:	4282      	cmp	r2, r0
    266a:	d100      	bne.n	266e <bt_buf_get_cmd_complete+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    266c:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    266e:	2c00      	cmp	r4, #0
    2670:	d009      	beq.n	2686 <bt_buf_get_cmd_complete+0x32>
    2672:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    2674:	2100      	movs	r1, #0
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2676:	0020      	movs	r0, r4
    2678:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    267a:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    267c:	3008      	adds	r0, #8
    267e:	f006 fec9 	bl	9414 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    2682:	0020      	movs	r0, r4
    2684:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2686:	2001      	movs	r0, #1
    2688:	f7ff ffd4 	bl	2634 <bt_buf_get_rx>
    268c:	0004      	movs	r4, r0
    268e:	e7f8      	b.n	2682 <bt_buf_get_cmd_complete+0x2e>
    2690:	200021e0 	.word	0x200021e0

00002694 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2694:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2696:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2698:	2203      	movs	r2, #3
{
    269a:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    269c:	6018      	str	r0, [r3, #0]
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    269e:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    26a0:	1e60      	subs	r0, r4, #1
    26a2:	b280      	uxth	r0, r0
    26a4:	4348      	muls	r0, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    26a6:	4393      	bics	r3, r2
    26a8:	801c      	strh	r4, [r3, #0]
{
    26aa:	000e      	movs	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    26ac:	1828      	adds	r0, r5, r0
    26ae:	3201      	adds	r2, #1
    26b0:	2100      	movs	r1, #0
    26b2:	f7fe f803 	bl	6bc <memset>
    26b6:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    26b8:	4b08      	ldr	r3, [pc, #32]	; (26dc <mem_init+0x48>)
    26ba:	b2a4      	uxth	r4, r4
    26bc:	429c      	cmp	r4, r3
    26be:	d100      	bne.n	26c2 <mem_init+0x2e>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    26c0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			       (mem_size * (mem_count + 1)));
    26c2:	1c60      	adds	r0, r4, #1
    26c4:	4370      	muls	r0, r6
		next = (u32_t)((u8_t *) mem_pool +
    26c6:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    26c8:	1b80      	subs	r0, r0, r6
    26ca:	1828      	adds	r0, r5, r0
    26cc:	2204      	movs	r2, #4
    26ce:	a901      	add	r1, sp, #4
		next = (u32_t)((u8_t *) mem_pool +
    26d0:	9301      	str	r3, [sp, #4]
    26d2:	3c01      	subs	r4, #1
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    26d4:	f7fd ffc8 	bl	668 <memcpy>
    26d8:	e7ee      	b.n	26b8 <mem_init+0x24>
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	0000ffff 	.word	0x0000ffff

000026e0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    26e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    26e2:	6805      	ldr	r5, [r0, #0]
{
    26e4:	0006      	movs	r6, r0
	if (*mem_head) {
    26e6:	2d00      	cmp	r5, #0
    26e8:	d011      	beq.n	270e <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    26ea:	2703      	movs	r7, #3
    26ec:	1deb      	adds	r3, r5, #7
    26ee:	43bb      	bics	r3, r7
    26f0:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    26f2:	2204      	movs	r2, #4
    26f4:	0029      	movs	r1, r5
    26f6:	a801      	add	r0, sp, #4
    26f8:	f7fd ffb6 	bl	668 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    26fc:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    26fe:	3c01      	subs	r4, #1
    2700:	b2a4      	uxth	r4, r4
		if (head) {
    2702:	2b00      	cmp	r3, #0
    2704:	d002      	beq.n	270c <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2706:	1dda      	adds	r2, r3, #7
    2708:	43ba      	bics	r2, r7
    270a:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    270c:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    270e:	0028      	movs	r0, r5
    2710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002712 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2712:	680b      	ldr	r3, [r1, #0]
{
    2714:	b570      	push	{r4, r5, r6, lr}
    2716:	0005      	movs	r5, r0
    2718:	000c      	movs	r4, r1
	u16_t free_count = 0;
    271a:	1e1e      	subs	r6, r3, #0
	if (*mem_head) {
    271c:	d003      	beq.n	2726 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    271e:	2203      	movs	r2, #3
    2720:	3307      	adds	r3, #7
    2722:	4393      	bics	r3, r2
    2724:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2726:	0028      	movs	r0, r5
    2728:	2204      	movs	r2, #4
    272a:	0021      	movs	r1, r4
    272c:	f7fd ff9c 	bl	668 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2730:	2203      	movs	r2, #3
    2732:	1deb      	adds	r3, r5, #7
	free_count++;
    2734:	3601      	adds	r6, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2736:	4393      	bics	r3, r2
    2738:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    273a:	6025      	str	r5, [r4, #0]
}
    273c:	bd70      	pop	{r4, r5, r6, pc}

0000273e <mem_get>:
	return free_count;
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    273e:	434a      	muls	r2, r1
    2740:	1880      	adds	r0, r0, r2
}
    2742:	4770      	bx	lr

00002744 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    2744:	1a40      	subs	r0, r0, r1
{
    2746:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    2748:	b280      	uxth	r0, r0
    274a:	0011      	movs	r1, r2
    274c:	f7fd fd3c 	bl	1c8 <__aeabi_uidiv>
    2750:	b280      	uxth	r0, r0
}
    2752:	bd10      	pop	{r4, pc}

00002754 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2754:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    2756:	4b06      	ldr	r3, [pc, #24]	; (2770 <mem_rcopy+0x1c>)
	src += len;
    2758:	1889      	adds	r1, r1, r2
	while (len--) {
    275a:	3a01      	subs	r2, #1
    275c:	b292      	uxth	r2, r2
    275e:	429a      	cmp	r2, r3
    2760:	d100      	bne.n	2764 <mem_rcopy+0x10>
		*dst++ = *--src;
	}
}
    2762:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    2764:	3901      	subs	r1, #1
    2766:	780c      	ldrb	r4, [r1, #0]
    2768:	7004      	strb	r4, [r0, #0]
    276a:	3001      	adds	r0, #1
    276c:	e7f5      	b.n	275a <mem_rcopy+0x6>
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	0000ffff 	.word	0x0000ffff

00002774 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2774:	6010      	str	r0, [r2, #0]
    2776:	6008      	str	r0, [r1, #0]

	return link;
}
    2778:	4770      	bx	lr

0000277a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    277a:	6813      	ldr	r3, [r2, #0]
    277c:	6018      	str	r0, [r3, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    277e:	6813      	ldr	r3, [r2, #0]
    2780:	6059      	str	r1, [r3, #4]

	/* increment the tail! */
	*tail = link;
    2782:	6010      	str	r0, [r2, #0]

	return link;
}
    2784:	4770      	bx	lr

00002786 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2786:	4288      	cmp	r0, r1
    2788:	d004      	beq.n	2794 <memq_peek+0xe>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    278a:	2a00      	cmp	r2, #0
    278c:	d001      	beq.n	2792 <memq_peek+0xc>
		*mem = head->mem;
    278e:	6843      	ldr	r3, [r0, #4]
    2790:	6013      	str	r3, [r2, #0]
	}

	return head;
}
    2792:	4770      	bx	lr
		return NULL;
    2794:	2000      	movs	r0, #0
    2796:	e7fc      	b.n	2792 <memq_peek+0xc>

00002798 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    2798:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    279a:	4283      	cmp	r3, r0
    279c:	d00a      	beq.n	27b4 <memq_dequeue+0x1c>
	if (mem) {
    279e:	2a00      	cmp	r2, #0
    27a0:	d004      	beq.n	27ac <memq_dequeue+0x14>
		*mem = head->mem;
    27a2:	6858      	ldr	r0, [r3, #4]
    27a4:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    27a6:	681a      	ldr	r2, [r3, #0]
    27a8:	600a      	str	r2, [r1, #0]

	return link;
    27aa:	e001      	b.n	27b0 <memq_dequeue+0x18>
	if (!link) {
    27ac:	2b00      	cmp	r3, #0
    27ae:	d1fa      	bne.n	27a6 <memq_dequeue+0xe>
}
    27b0:	0018      	movs	r0, r3
    27b2:	4770      	bx	lr
		return NULL;
    27b4:	2300      	movs	r3, #0
    27b6:	e7fb      	b.n	27b0 <memq_dequeue+0x18>

000027b8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    27b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    27ba:	2404      	movs	r4, #4
    27bc:	2630      	movs	r6, #48	; 0x30
	while (callee_id--) {
    27be:	3c01      	subs	r4, #1
    27c0:	b2e4      	uxtb	r4, r4
    27c2:	2cff      	cmp	r4, #255	; 0xff
    27c4:	d018      	beq.n	27f8 <mayfly_init+0x40>
    27c6:	0033      	movs	r3, r6
    27c8:	4363      	muls	r3, r4
    27ca:	00a7      	lsls	r7, r4, #2
    27cc:	9301      	str	r3, [sp, #4]
    27ce:	2504      	movs	r5, #4
    27d0:	e00d      	b.n	27ee <mayfly_init+0x36>
    27d2:	210c      	movs	r1, #12
    27d4:	4369      	muls	r1, r5
    27d6:	9b01      	ldr	r3, [sp, #4]
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    27d8:	4808      	ldr	r0, [pc, #32]	; (27fc <mayfly_init+0x44>)
    27da:	18c9      	adds	r1, r1, r3
    27dc:	4b08      	ldr	r3, [pc, #32]	; (2800 <mayfly_init+0x48>)
    27de:	1d0a      	adds	r2, r1, #4
    27e0:	189a      	adds	r2, r3, r2
    27e2:	1859      	adds	r1, r3, r1
    27e4:	197b      	adds	r3, r7, r5
    27e6:	00db      	lsls	r3, r3, #3
    27e8:	18c0      	adds	r0, r0, r3
    27ea:	f7ff ffc3 	bl	2774 <memq_init>
		while (caller_id--) {
    27ee:	3d01      	subs	r5, #1
    27f0:	b2ed      	uxtb	r5, r5
    27f2:	2dff      	cmp	r5, #255	; 0xff
    27f4:	d1ed      	bne.n	27d2 <mayfly_init+0x1a>
    27f6:	e7e2      	b.n	27be <mayfly_init+0x6>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    27f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	200000ac 	.word	0x200000ac
    2800:	2000012c 	.word	0x2000012c

00002804 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2804:	b570      	push	{r4, r5, r6, lr}
    2806:	4d10      	ldr	r5, [pc, #64]	; (2848 <mayfly_enable+0x44>)
    2808:	240c      	movs	r4, #12
    280a:	2630      	movs	r6, #48	; 0x30
	if (enable) {
    280c:	2a00      	cmp	r2, #0
    280e:	d00d      	beq.n	282c <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    2810:	0023      	movs	r3, r4
    2812:	434e      	muls	r6, r1
    2814:	4343      	muls	r3, r0
    2816:	199b      	adds	r3, r3, r6
    2818:	18eb      	adds	r3, r5, r3
    281a:	7a1d      	ldrb	r5, [r3, #8]
    281c:	7a5c      	ldrb	r4, [r3, #9]
    281e:	42ac      	cmp	r4, r5
    2820:	d101      	bne.n	2826 <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    2822:	3401      	adds	r4, #1
    2824:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    2826:	f006 fccf 	bl	91c8 <mayfly_enable_cb>
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    282a:	bd70      	pop	{r4, r5, r6, pc}
		if (mft[callee_id][caller_id].disable_req ==
    282c:	4344      	muls	r4, r0
    282e:	434e      	muls	r6, r1
    2830:	19a4      	adds	r4, r4, r6
    2832:	192c      	adds	r4, r5, r4
    2834:	7aa2      	ldrb	r2, [r4, #10]
    2836:	7ae3      	ldrb	r3, [r4, #11]
    2838:	4293      	cmp	r3, r2
    283a:	d1f6      	bne.n	282a <mayfly_enable+0x26>
			mft[callee_id][caller_id].disable_req++;
    283c:	3301      	adds	r3, #1
    283e:	72a3      	strb	r3, [r4, #10]
			mayfly_pend(caller_id, callee_id);
    2840:	f006 fcee 	bl	9220 <mayfly_pend>
}
    2844:	e7f1      	b.n	282a <mayfly_enable+0x26>
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	2000012c 	.word	0x2000012c

0000284c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284e:	0006      	movs	r6, r0
    2850:	000f      	movs	r7, r1
    2852:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2854:	2a00      	cmp	r2, #0
    2856:	d014      	beq.n	2882 <mayfly_enqueue+0x36>
    2858:	2101      	movs	r1, #1

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    285a:	2203      	movs	r2, #3
	ack = m->_ack;
    285c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    285e:	7825      	ldrb	r5, [r4, #0]
    2860:	1aed      	subs	r5, r5, r3
    2862:	4015      	ands	r5, r2
	if (state != 0) {
    2864:	d02b      	beq.n	28be <mayfly_enqueue+0x72>
		if (chain) {
    2866:	2900      	cmp	r1, #0
    2868:	d022      	beq.n	28b0 <mayfly_enqueue+0x64>

				return 0;
			}

			/* already ready */
			return 1;
    286a:	2001      	movs	r0, #1
			if (state != 1) {
    286c:	4285      	cmp	r5, r0
    286e:	d007      	beq.n	2880 <mayfly_enqueue+0x34>
				m->_req = ack + 1;
    2870:	181b      	adds	r3, r3, r0
    2872:	b2db      	uxtb	r3, r3
    2874:	7023      	strb	r3, [r4, #0]
				mayfly_pend(caller_id, callee_id);
    2876:	0039      	movs	r1, r7
    2878:	0030      	movs	r0, r6
    287a:	f006 fcd1 	bl	9220 <mayfly_pend>
	/* handle mayfly(s) that can be inline */
	if (!chain) {
		/* call fp */
		m->fp(m->param);

		return 0;
    287e:	2000      	movs	r0, #0

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
    2880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2882:	f006 fcbe 	bl	9202 <mayfly_prio_is_equal>
    2886:	2800      	cmp	r0, #0
    2888:	d0e6      	beq.n	2858 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    288a:	0039      	movs	r1, r7
    288c:	0030      	movs	r0, r6
    288e:	f006 fcaa 	bl	91e6 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2892:	2800      	cmp	r0, #0
    2894:	d0e0      	beq.n	2858 <mayfly_enqueue+0xc>
		(mft[callee_id][caller_id].disable_req !=
    2896:	230c      	movs	r3, #12
    2898:	2230      	movs	r2, #48	; 0x30
    289a:	4373      	muls	r3, r6
    289c:	437a      	muls	r2, r7
    289e:	189b      	adds	r3, r3, r2
    28a0:	4a12      	ldr	r2, [pc, #72]	; (28ec <mayfly_enqueue+0xa0>)
    28a2:	18d3      	adds	r3, r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    28a4:	7a9a      	ldrb	r2, [r3, #10]
    28a6:	7ad9      	ldrb	r1, [r3, #11]
    28a8:	1a51      	subs	r1, r2, r1
    28aa:	1e4a      	subs	r2, r1, #1
    28ac:	4191      	sbcs	r1, r2
    28ae:	e7d4      	b.n	285a <mayfly_enqueue+0xe>
		m->_req = ack + 2;
    28b0:	3302      	adds	r3, #2
    28b2:	b2db      	uxtb	r3, r3
    28b4:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    28b6:	68e3      	ldr	r3, [r4, #12]
    28b8:	68a0      	ldr	r0, [r4, #8]
    28ba:	4798      	blx	r3
    28bc:	e7df      	b.n	287e <mayfly_enqueue+0x32>
	if (!chain) {
    28be:	2900      	cmp	r1, #0
    28c0:	d0f9      	beq.n	28b6 <mayfly_enqueue+0x6a>
	m->_req = ack + 1;
    28c2:	3301      	adds	r3, #1
    28c4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    28c6:	2230      	movs	r2, #48	; 0x30
	m->_req = ack + 1;
    28c8:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    28ca:	230c      	movs	r3, #12
    28cc:	437a      	muls	r2, r7
    28ce:	4373      	muls	r3, r6
    28d0:	3204      	adds	r2, #4
    28d2:	18d2      	adds	r2, r2, r3
    28d4:	4b05      	ldr	r3, [pc, #20]	; (28ec <mayfly_enqueue+0xa0>)
    28d6:	0021      	movs	r1, r4
    28d8:	189a      	adds	r2, r3, r2
    28da:	6860      	ldr	r0, [r4, #4]
    28dc:	f7ff ff4d 	bl	277a <memq_enqueue>
	mayfly_pend(caller_id, callee_id);
    28e0:	0030      	movs	r0, r6
    28e2:	0039      	movs	r1, r7
    28e4:	f006 fc9c 	bl	9220 <mayfly_pend>
	return 0;
    28e8:	0028      	movs	r0, r5
    28ea:	e7c9      	b.n	2880 <mayfly_enqueue+0x34>
    28ec:	2000012c 	.word	0x2000012c

000028f0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    28f0:	2330      	movs	r3, #48	; 0x30
    28f2:	001a      	movs	r2, r3
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	4342      	muls	r2, r0
    28f8:	b089      	sub	sp, #36	; 0x24
    28fa:	9205      	str	r2, [sp, #20]
	u8_t disable = 0;
	u8_t enable = 0;
    28fc:	2200      	movs	r2, #0
{
    28fe:	0004      	movs	r4, r0
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    2900:	2604      	movs	r6, #4
	u8_t enable = 0;
    2902:	9202      	str	r2, [sp, #8]
	u8_t disable = 0;
    2904:	9203      	str	r2, [sp, #12]
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2906:	9300      	str	r3, [sp, #0]
	while (caller_id--) {
    2908:	3e01      	subs	r6, #1
    290a:	b2f6      	uxtb	r6, r6
    290c:	2eff      	cmp	r6, #255	; 0xff
    290e:	d10b      	bne.n	2928 <mayfly_run+0x38>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2910:	9b03      	ldr	r3, [sp, #12]
    2912:	2b00      	cmp	r3, #0
    2914:	d077      	beq.n	2a06 <mayfly_run+0x116>
    2916:	9b02      	ldr	r3, [sp, #8]
    2918:	2b00      	cmp	r3, #0
    291a:	d174      	bne.n	2a06 <mayfly_run+0x116>
		mayfly_enable_cb(callee_id, callee_id, 0);
    291c:	001a      	movs	r2, r3
    291e:	0021      	movs	r1, r4
    2920:	0020      	movs	r0, r4
    2922:	f006 fc51 	bl	91c8 <mayfly_enable_cb>
    2926:	e06e      	b.n	2a06 <mayfly_run+0x116>
		struct mayfly *m = 0;
    2928:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    292a:	250c      	movs	r5, #12
		struct mayfly *m = 0;
    292c:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    292e:	9b00      	ldr	r3, [sp, #0]
    2930:	4375      	muls	r5, r6
    2932:	4363      	muls	r3, r4
    2934:	4f35      	ldr	r7, [pc, #212]	; (2a0c <mayfly_run+0x11c>)
    2936:	18eb      	adds	r3, r5, r3
    2938:	18f9      	adds	r1, r7, r3
    293a:	59d8      	ldr	r0, [r3, r7]
    293c:	aa07      	add	r2, sp, #28
    293e:	6849      	ldr	r1, [r1, #4]
    2940:	f7ff ff21 	bl	2786 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2944:	9b05      	ldr	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    2946:	9001      	str	r0, [sp, #4]
				memq_dequeue(mft[callee_id][caller_id].tail,
    2948:	18ed      	adds	r5, r5, r3
    294a:	197b      	adds	r3, r7, r5
    294c:	9304      	str	r3, [sp, #16]
		while (link) {
    294e:	9b01      	ldr	r3, [sp, #4]
    2950:	2b00      	cmp	r3, #0
    2952:	d11b      	bne.n	298c <mayfly_run+0x9c>
		if (mft[callee_id][caller_id].disable_req !=
    2954:	230c      	movs	r3, #12
    2956:	9900      	ldr	r1, [sp, #0]
    2958:	4373      	muls	r3, r6
    295a:	4361      	muls	r1, r4
    295c:	4a2b      	ldr	r2, [pc, #172]	; (2a0c <mayfly_run+0x11c>)
    295e:	185b      	adds	r3, r3, r1
    2960:	18d3      	adds	r3, r2, r3
    2962:	7a99      	ldrb	r1, [r3, #10]
    2964:	7ad8      	ldrb	r0, [r3, #11]
    2966:	4288      	cmp	r0, r1
    2968:	d002      	beq.n	2970 <mayfly_run+0x80>
			mft[callee_id][caller_id].disable_ack =
    296a:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    296c:	2301      	movs	r3, #1
    296e:	9303      	str	r3, [sp, #12]
		if (mft[callee_id][caller_id].enable_req !=
    2970:	230c      	movs	r3, #12
    2972:	9900      	ldr	r1, [sp, #0]
    2974:	4373      	muls	r3, r6
    2976:	4361      	muls	r1, r4
    2978:	185b      	adds	r3, r3, r1
    297a:	18d3      	adds	r3, r2, r3
    297c:	7a1a      	ldrb	r2, [r3, #8]
    297e:	7a59      	ldrb	r1, [r3, #9]
    2980:	4291      	cmp	r1, r2
    2982:	d0c1      	beq.n	2908 <mayfly_run+0x18>
			mft[callee_id][caller_id].enable_ack =
    2984:	725a      	strb	r2, [r3, #9]
			enable = 1;
    2986:	2301      	movs	r3, #1
    2988:	9302      	str	r3, [sp, #8]
    298a:	e7bd      	b.n	2908 <mayfly_run+0x18>
			state = (req - m->_ack) & 0x03;
    298c:	2103      	movs	r1, #3
			req = m->_req;
    298e:	9b07      	ldr	r3, [sp, #28]
    2990:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2992:	785a      	ldrb	r2, [r3, #1]
    2994:	1abf      	subs	r7, r7, r2
    2996:	400f      	ands	r7, r1
			if (state == 1) {
    2998:	2f01      	cmp	r7, #1
    299a:	d104      	bne.n	29a6 <mayfly_run+0xb6>
				m->_ack--;
    299c:	3a01      	subs	r2, #1
    299e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    29a0:	6898      	ldr	r0, [r3, #8]
    29a2:	68da      	ldr	r2, [r3, #12]
    29a4:	4790      	blx	r2
			if (((req - m->_ack) & 0x03) != 1) {
    29a6:	2203      	movs	r2, #3
			req = m->_req;
    29a8:	9b07      	ldr	r3, [sp, #28]
    29aa:	781d      	ldrb	r5, [r3, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    29ac:	785b      	ldrb	r3, [r3, #1]
			req = m->_req;
    29ae:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    29b0:	1aeb      	subs	r3, r5, r3
    29b2:	4013      	ands	r3, r2
    29b4:	2b01      	cmp	r3, #1
    29b6:	d00f      	beq.n	29d8 <mayfly_run+0xe8>
				memq_dequeue(mft[callee_id][caller_id].tail,
    29b8:	230c      	movs	r3, #12
    29ba:	9a00      	ldr	r2, [sp, #0]
    29bc:	4373      	muls	r3, r6
    29be:	4362      	muls	r2, r4
    29c0:	189b      	adds	r3, r3, r2
    29c2:	4a12      	ldr	r2, [pc, #72]	; (2a0c <mayfly_run+0x11c>)
    29c4:	9904      	ldr	r1, [sp, #16]
    29c6:	18d3      	adds	r3, r2, r3
    29c8:	6858      	ldr	r0, [r3, #4]
    29ca:	2200      	movs	r2, #0
    29cc:	f7ff fee4 	bl	2798 <memq_dequeue>
				m->_link = link;
    29d0:	9b07      	ldr	r3, [sp, #28]
    29d2:	9a01      	ldr	r2, [sp, #4]
				m->_ack = req;
    29d4:	705d      	strb	r5, [r3, #1]
				m->_link = link;
    29d6:	605a      	str	r2, [r3, #4]
			link = memq_peek(mft[callee_id][caller_id].head,
    29d8:	230c      	movs	r3, #12
    29da:	9a00      	ldr	r2, [sp, #0]
    29dc:	4373      	muls	r3, r6
    29de:	4362      	muls	r2, r4
    29e0:	480a      	ldr	r0, [pc, #40]	; (2a0c <mayfly_run+0x11c>)
    29e2:	189b      	adds	r3, r3, r2
    29e4:	18c1      	adds	r1, r0, r3
    29e6:	aa07      	add	r2, sp, #28
    29e8:	6849      	ldr	r1, [r1, #4]
    29ea:	5818      	ldr	r0, [r3, r0]
    29ec:	f7ff fecb 	bl	2786 <memq_peek>
    29f0:	9001      	str	r0, [sp, #4]
			if (state == 1) {
    29f2:	2f01      	cmp	r7, #1
    29f4:	d1ab      	bne.n	294e <mayfly_run+0x5e>
				if (caller_id || link) {
    29f6:	2e00      	cmp	r6, #0
    29f8:	d101      	bne.n	29fe <mayfly_run+0x10e>
    29fa:	2800      	cmp	r0, #0
    29fc:	d0aa      	beq.n	2954 <mayfly_run+0x64>
					mayfly_pend(callee_id, callee_id);
    29fe:	0021      	movs	r1, r4
    2a00:	0020      	movs	r0, r4
    2a02:	f006 fc0d 	bl	9220 <mayfly_pend>
	}
}
    2a06:	b009      	add	sp, #36	; 0x24
    2a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	2000012c 	.word	0x2000012c

00002a10 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2a10:	0002      	movs	r2, r0
    2a12:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    2a14:	2000      	movs	r0, #0
{
    2a16:	b510      	push	{r4, lr}

	while (octets_len--) {
    2a18:	428a      	cmp	r2, r1
    2a1a:	d100      	bne.n	2a1e <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    2a1c:	bd10      	pop	{r4, pc}
		bite = *octets;
    2a1e:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    2a20:	2c00      	cmp	r4, #0
    2a22:	d101      	bne.n	2a28 <util_ones_count_get+0x18>
		octets++;
    2a24:	3201      	adds	r2, #1
    2a26:	e7f7      	b.n	2a18 <util_ones_count_get+0x8>
			bite &= (bite - 1);
    2a28:	1e63      	subs	r3, r4, #1
			one_count++;
    2a2a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2a2c:	401c      	ands	r4, r3
			one_count++;
    2a2e:	b2c0      	uxtb	r0, r0
    2a30:	e7f6      	b.n	2a20 <util_ones_count_get+0x10>

00002a32 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    2a32:	2328      	movs	r3, #40	; 0x28
{
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
    2a36:	7f45      	ldrb	r5, [r0, #29]
	total = 0;
    2a38:	2400      	movs	r4, #0
	current = previous;
    2a3a:	002a      	movs	r2, r5
		ticker_current = &node[current];
    2a3c:	469c      	mov	ip, r3
	node = &instance->node[0];
    2a3e:	6806      	ldr	r6, [r0, #0]
	while (current != TICKER_NULL) {
    2a40:	2aff      	cmp	r2, #255	; 0xff
    2a42:	d101      	bne.n	2a48 <ticker_dequeue+0x16>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2a44:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    2a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2a48:	4663      	mov	r3, ip
    2a4a:	4353      	muls	r3, r2
    2a4c:	18f3      	adds	r3, r6, r3
    2a4e:	781f      	ldrb	r7, [r3, #0]
		if (current == id) {
    2a50:	428a      	cmp	r2, r1
    2a52:	d004      	beq.n	2a5e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2a54:	689b      	ldr	r3, [r3, #8]
		current = ticker_current->next;
    2a56:	0015      	movs	r5, r2
		total += ticker_current->ticks_to_expire;
    2a58:	18e4      	adds	r4, r4, r3
		current = ticker_current->next;
    2a5a:	003a      	movs	r2, r7
    2a5c:	e7f0      	b.n	2a40 <ticker_dequeue+0xe>
	if (previous == current) {
    2a5e:	4295      	cmp	r5, r2
    2a60:	d100      	bne.n	2a64 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2a62:	7747      	strb	r7, [r0, #29]
	node[previous].next = ticker_current->next;
    2a64:	2228      	movs	r2, #40	; 0x28
    2a66:	4355      	muls	r5, r2
    2a68:	7819      	ldrb	r1, [r3, #0]
	timeout = ticker_current->ticks_to_expire;
    2a6a:	6898      	ldr	r0, [r3, #8]
	node[previous].next = ticker_current->next;
    2a6c:	55a9      	strb	r1, [r5, r6]
	if (ticker_current->next != TICKER_NULL) {
    2a6e:	781b      	ldrb	r3, [r3, #0]
    2a70:	2bff      	cmp	r3, #255	; 0xff
    2a72:	d004      	beq.n	2a7e <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    2a74:	4353      	muls	r3, r2
    2a76:	18f3      	adds	r3, r6, r3
    2a78:	689a      	ldr	r2, [r3, #8]
    2a7a:	1812      	adds	r2, r2, r0
    2a7c:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    2a7e:	1820      	adds	r0, r4, r0
    2a80:	e7e1      	b.n	2a46 <ticker_dequeue+0x14>

00002a82 <ticks_to_expire_prep>:
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2a82:	1a53      	subs	r3, r2, r1
{
    2a84:	b570      	push	{r4, r5, r6, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2a86:	6884      	ldr	r4, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2a88:	6945      	ldr	r5, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2a8a:	021e      	lsls	r6, r3, #8
    2a8c:	d409      	bmi.n	2aa2 <ticks_to_expire_prep+0x20>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a8e:	021b      	lsls	r3, r3, #8
    2a90:	0a1b      	lsrs	r3, r3, #8
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2a92:	191b      	adds	r3, r3, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
    2a94:	42ab      	cmp	r3, r5
    2a96:	d90e      	bls.n	2ab6 <ticks_to_expire_prep+0x34>
		ticks_to_expire -= ticks_to_expire_minus;
    2a98:	1b5b      	subs	r3, r3, r5
		ticks_to_expire_minus = 0;
    2a9a:	2500      	movs	r5, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2a9c:	6145      	str	r5, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    2a9e:	6083      	str	r3, [r0, #8]
}
    2aa0:	bd70      	pop	{r4, r5, r6, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2aa2:	1a8b      	subs	r3, r1, r2
    2aa4:	021b      	lsls	r3, r3, #8
    2aa6:	0a1b      	lsrs	r3, r3, #8
		if (ticks_to_expire > delta_current_start) {
    2aa8:	429c      	cmp	r4, r3
    2aaa:	d901      	bls.n	2ab0 <ticks_to_expire_prep+0x2e>
			ticks_to_expire -= delta_current_start;
    2aac:	1ae3      	subs	r3, r4, r3
    2aae:	e7f1      	b.n	2a94 <ticks_to_expire_prep+0x12>
    2ab0:	18ed      	adds	r5, r5, r3
			ticks_to_expire = 0;
    2ab2:	2300      	movs	r3, #0
			ticks_to_expire_minus +=
    2ab4:	1b2d      	subs	r5, r5, r4
		ticks_to_expire_minus -= ticks_to_expire;
    2ab6:	1aed      	subs	r5, r5, r3
		ticks_to_expire = 0;
    2ab8:	2300      	movs	r3, #0
    2aba:	e7ef      	b.n	2a9c <ticks_to_expire_prep+0x1a>

00002abc <ticker_job_op_cb>:
{
    2abc:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2abe:	2200      	movs	r2, #0
    2ac0:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2ac4:	b510      	push	{r4, lr}
    2ac6:	0008      	movs	r0, r1
	user_op->status = status;
    2ac8:	6259      	str	r1, [r3, #36]	; 0x24
	if (user_op->fp_op_func) {
    2aca:	2a00      	cmp	r2, #0
    2acc:	d001      	beq.n	2ad2 <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2ace:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2ad0:	4790      	blx	r2
}
    2ad2:	bd10      	pop	{r4, pc}

00002ad4 <ticker_worker>:
	instance->worker_trigger = 1;
    2ad4:	2301      	movs	r3, #1
{
    2ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (instance->job_guard) {
    2ad8:	7f86      	ldrb	r6, [r0, #30]
{
    2ada:	0004      	movs	r4, r0
	instance->worker_trigger = 1;
    2adc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2ade:	2e00      	cmp	r6, #0
    2ae0:	d103      	bne.n	2aea <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    2ae2:	7f43      	ldrb	r3, [r0, #29]
    2ae4:	2bff      	cmp	r3, #255	; 0xff
    2ae6:	d101      	bne.n	2aec <ticker_worker+0x18>
		instance->worker_trigger = 0;
    2ae8:	77c6      	strb	r6, [r0, #31]
}
    2aea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2aec:	f005 fe9a 	bl	8824 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2af0:	6963      	ldr	r3, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2af2:	7f67      	ldrb	r7, [r4, #29]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2af4:	1ac5      	subs	r5, r0, r3
    2af6:	022d      	lsls	r5, r5, #8
    2af8:	0a2b      	lsrs	r3, r5, #8
    2afa:	9300      	str	r3, [sp, #0]
	node = &instance->node[0];
    2afc:	6823      	ldr	r3, [r4, #0]
    2afe:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    2b00:	2fff      	cmp	r7, #255	; 0xff
    2b02:	d007      	beq.n	2b14 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    2b04:	2328      	movs	r3, #40	; 0x28
    2b06:	435f      	muls	r7, r3
    2b08:	9b01      	ldr	r3, [sp, #4]
		if (ticks_elapsed < ticks_to_expire) {
    2b0a:	9a00      	ldr	r2, [sp, #0]
		ticker = &node[ticker_id_head];
    2b0c:	19d9      	adds	r1, r3, r7
		ticks_to_expire = ticker->ticks_to_expire;
    2b0e:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2b10:	429a      	cmp	r2, r3
    2b12:	d217      	bcs.n	2b44 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2b14:	7aa2      	ldrb	r2, [r4, #10]
    2b16:	7ae3      	ldrb	r3, [r4, #11]
    2b18:	4293      	cmp	r3, r2
    2b1a:	d105      	bne.n	2b28 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    2b1c:	3301      	adds	r3, #1
    2b1e:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    2b20:	2b02      	cmp	r3, #2
    2b22:	d100      	bne.n	2b26 <ticker_worker+0x52>
			last = 0;
    2b24:	2300      	movs	r3, #0
		instance->ticks_elapsed_last = last;
    2b26:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2b28:	7ae3      	ldrb	r3, [r4, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2b2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2b2c:	3302      	adds	r3, #2
    2b2e:	009b      	lsls	r3, r3, #2
    2b30:	18e3      	adds	r3, r4, r3
    2b32:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
    2b34:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2b36:	2201      	movs	r2, #1
	instance->worker_trigger = 0;
    2b38:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2b3a:	2104      	movs	r1, #4
    2b3c:	0023      	movs	r3, r4
    2b3e:	2003      	movs	r0, #3
    2b40:	47a8      	blx	r5
    2b42:	e7d2      	b.n	2aea <ticker_worker+0x16>
		ticks_elapsed -= ticks_to_expire;
    2b44:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    2b46:	18f6      	adds	r6, r6, r3
		ticks_elapsed -= ticks_to_expire;
    2b48:	1ad2      	subs	r2, r2, r3
    2b4a:	9200      	str	r2, [sp, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2b4c:	788a      	ldrb	r2, [r1, #2]
    2b4e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2b50:	780f      	ldrb	r7, [r1, #0]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2b52:	1a9b      	subs	r3, r3, r2
    2b54:	b2db      	uxtb	r3, r3
    2b56:	2b01      	cmp	r3, #1
    2b58:	d1d2      	bne.n	2b00 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    2b5a:	68cb      	ldr	r3, [r1, #12]
		ticker->ack--;
    2b5c:	3a01      	subs	r2, #1
    2b5e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2b60:	1e1d      	subs	r5, r3, #0
    2b62:	d0cd      	beq.n	2b00 <ticker_worker+0x2c>
					   ticks_expired -
    2b64:	694b      	ldr	r3, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
    2b66:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2b68:	1af0      	subs	r0, r6, r3
    2b6a:	6963      	ldr	r3, [r4, #20]
    2b6c:	18c0      	adds	r0, r0, r3
			ticks_at_expire = (instance->ticks_current +
    2b6e:	0200      	lsls	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    2b70:	690b      	ldr	r3, [r1, #16]
			ticks_at_expire = (instance->ticks_current +
    2b72:	0a00      	lsrs	r0, r0, #8
			ticker->timeout_func(ticks_at_expire,
    2b74:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2b76:	47a8      	blx	r5
    2b78:	e7c2      	b.n	2b00 <ticker_worker+0x2c>
	...

00002b7c <ticker_job>:
{
    2b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (instance->worker_trigger) {
    2b7e:	7fc2      	ldrb	r2, [r0, #31]
{
    2b80:	b097      	sub	sp, #92	; 0x5c
    2b82:	0007      	movs	r7, r0
	if (instance->worker_trigger) {
    2b84:	2a00      	cmp	r2, #0
    2b86:	d000      	beq.n	2b8a <ticker_job+0xe>
    2b88:	e080      	b.n	2c8c <ticker_job+0x110>
	instance->job_guard = 1;
    2b8a:	2301      	movs	r3, #1
    2b8c:	7783      	strb	r3, [r0, #30]
	ticks_previous = instance->ticks_current;
    2b8e:	6943      	ldr	r3, [r0, #20]
    2b90:	9308      	str	r3, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2b92:	7a83      	ldrb	r3, [r0, #10]
    2b94:	7ac1      	ldrb	r1, [r0, #11]
    2b96:	4299      	cmp	r1, r3
    2b98:	d100      	bne.n	2b9c <ticker_job+0x20>
    2b9a:	e079      	b.n	2c90 <ticker_job+0x114>
		first = instance->ticks_elapsed_first + 1;
    2b9c:	3301      	adds	r3, #1
    2b9e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    2ba0:	2b02      	cmp	r3, #2
    2ba2:	d100      	bne.n	2ba6 <ticker_job+0x2a>
			first = 0;
    2ba4:	0013      	movs	r3, r2
		instance->ticks_elapsed_first = first;
    2ba6:	72bb      	strb	r3, [r7, #10]
		ticks_elapsed =
    2ba8:	3302      	adds	r3, #2
    2baa:	009b      	lsls	r3, r3, #2
    2bac:	18fb      	adds	r3, r7, r3
    2bae:	685b      	ldr	r3, [r3, #4]
    2bb0:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    2bb2:	9a00      	ldr	r2, [sp, #0]
    2bb4:	9b08      	ldr	r3, [sp, #32]
    2bb6:	189b      	adds	r3, r3, r2
		instance->ticks_current &= 0x00FFFFFF;
    2bb8:	021b      	lsls	r3, r3, #8
    2bba:	0a1b      	lsrs	r3, r3, #8
    2bbc:	617b      	str	r3, [r7, #20]
		flag_elapsed = 1;
    2bbe:	2301      	movs	r3, #1
    2bc0:	9303      	str	r3, [sp, #12]
	ticker_id_old_head = instance->ticker_id_head;
    2bc2:	7f7b      	ldrb	r3, [r7, #29]
    2bc4:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    2bc6:	683b      	ldr	r3, [r7, #0]
    2bc8:	930d      	str	r3, [sp, #52]	; 0x34
	users = &instance->user[0];
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	930e      	str	r3, [sp, #56]	; 0x38
    2bce:	7a7b      	ldrb	r3, [r7, #9]
    2bd0:	3b01      	subs	r3, #1
    2bd2:	b2db      	uxtb	r3, r3
    2bd4:	9304      	str	r3, [sp, #16]
	pending = 0;
    2bd6:	2300      	movs	r3, #0
    2bd8:	930c      	str	r3, [sp, #48]	; 0x30
	insert_head = TICKER_NULL;
    2bda:	33ff      	adds	r3, #255	; 0xff
    2bdc:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2bde:	9b04      	ldr	r3, [sp, #16]
    2be0:	2bff      	cmp	r3, #255	; 0xff
    2be2:	d158      	bne.n	2c96 <ticker_job+0x11a>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2be4:	7f7b      	ldrb	r3, [r7, #29]
    2be6:	9a05      	ldr	r2, [sp, #20]
    2be8:	1a9b      	subs	r3, r3, r2
    2bea:	1e5a      	subs	r2, r3, #1
    2bec:	4193      	sbcs	r3, r2
	flag_compare_update = 0;
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (flag_elapsed) {
    2bf2:	9b03      	ldr	r3, [sp, #12]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d016      	beq.n	2c26 <ticker_job+0xaa>
	node = &instance->node[0];
    2bf8:	683b      	ldr	r3, [r7, #0]
    2bfa:	9307      	str	r3, [sp, #28]
	ticks_expired = 0;
    2bfc:	2300      	movs	r3, #0
    2bfe:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    2c00:	7f7e      	ldrb	r6, [r7, #29]
    2c02:	2eff      	cmp	r6, #255	; 0xff
    2c04:	d00a      	beq.n	2c1c <ticker_job+0xa0>
		ticker = &node[id_expired];
    2c06:	2428      	movs	r4, #40	; 0x28
    2c08:	4374      	muls	r4, r6
    2c0a:	9b07      	ldr	r3, [sp, #28]
    2c0c:	191c      	adds	r4, r3, r4
		ticks_to_expire = ticker->ticks_to_expire;
    2c0e:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2c10:	9b00      	ldr	r3, [sp, #0]
    2c12:	429d      	cmp	r5, r3
    2c14:	d800      	bhi.n	2c18 <ticker_job+0x9c>
    2c16:	e121      	b.n	2e5c <ticker_job+0x2e0>
			ticker->ticks_to_expire -= ticks_elapsed;
    2c18:	1aed      	subs	r5, r5, r3
    2c1a:	60a5      	str	r5, [r4, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
    2c1c:	9b05      	ldr	r3, [sp, #20]
    2c1e:	42b3      	cmp	r3, r6
    2c20:	d001      	beq.n	2c26 <ticker_job+0xaa>
			flag_compare_update = 1;
    2c22:	9b03      	ldr	r3, [sp, #12]
    2c24:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->node[0];
    2c26:	683b      	ldr	r3, [r7, #0]
    2c28:	930e      	str	r3, [sp, #56]	; 0x38
	users = &instance->user[0];
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	9312      	str	r3, [sp, #72]	; 0x48
    2c2e:	7a7b      	ldrb	r3, [r7, #9]
    2c30:	3b01      	subs	r3, #1
    2c32:	b2db      	uxtb	r3, r3
    2c34:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    2c36:	9b06      	ldr	r3, [sp, #24]
    2c38:	2bff      	cmp	r3, #255	; 0xff
    2c3a:	d000      	beq.n	2c3e <ticker_job+0xc2>
    2c3c:	e159      	b.n	2ef2 <ticker_job+0x376>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2c3e:	7f7b      	ldrb	r3, [r7, #29]
    2c40:	9a05      	ldr	r2, [sp, #20]
    2c42:	4293      	cmp	r3, r2
    2c44:	d000      	beq.n	2c48 <ticker_job+0xcc>
    2c46:	e321      	b.n	328c <ticker_job+0x710>
	if (!pending) {
    2c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d107      	bne.n	2c5e <ticker_job+0xe2>
	users = &instance->user[0];
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	9303      	str	r3, [sp, #12]
    2c52:	7a7b      	ldrb	r3, [r7, #9]
    2c54:	3b01      	subs	r3, #1
    2c56:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    2c58:	2dff      	cmp	r5, #255	; 0xff
    2c5a:	d000      	beq.n	2c5e <ticker_job+0xe2>
    2c5c:	e287      	b.n	316e <ticker_job+0x5f2>
	instance->job_guard = 0;
    2c5e:	2300      	movs	r3, #0
    2c60:	77bb      	strb	r3, [r7, #30]
	if (flag_compare_update) {
    2c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c64:	2b00      	cmp	r3, #0
    2c66:	d008      	beq.n	2c7a <ticker_job+0xfe>
	if (instance->ticker_id_head == TICKER_NULL) {
    2c68:	7f7b      	ldrb	r3, [r7, #29]
    2c6a:	2bff      	cmp	r3, #255	; 0xff
    2c6c:	d000      	beq.n	2c70 <ticker_job+0xf4>
    2c6e:	e2d3      	b.n	3218 <ticker_job+0x69c>
		if (cntr_stop() == 0) {
    2c70:	f005 fdc2 	bl	87f8 <cntr_stop>
    2c74:	2800      	cmp	r0, #0
    2c76:	d100      	bne.n	2c7a <ticker_job+0xfe>
			instance->ticks_slot_previous = 0;
    2c78:	61b8      	str	r0, [r7, #24]
	if (instance->worker_trigger) {
    2c7a:	7ffb      	ldrb	r3, [r7, #31]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d005      	beq.n	2c8c <ticker_job+0x110>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2c80:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    2c82:	003b      	movs	r3, r7
    2c84:	2201      	movs	r2, #1
    2c86:	2103      	movs	r1, #3
    2c88:	2004      	movs	r0, #4
    2c8a:	47a0      	blx	r4
}
    2c8c:	b017      	add	sp, #92	; 0x5c
    2c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_elapsed = 0;
    2c90:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    2c92:	9200      	str	r2, [sp, #0]
    2c94:	e795      	b.n	2bc2 <ticker_job+0x46>
		user = &users[count_user];
    2c96:	9b04      	ldr	r3, [sp, #16]
    2c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2c9a:	00db      	lsls	r3, r3, #3
    2c9c:	18d3      	adds	r3, r2, r3
    2c9e:	9302      	str	r3, [sp, #8]
		user_ops = &user->user_op[0];
    2ca0:	685b      	ldr	r3, [r3, #4]
    2ca2:	930f      	str	r3, [sp, #60]	; 0x3c
		while (user->middle != user->last) {
    2ca4:	9b02      	ldr	r3, [sp, #8]
    2ca6:	78da      	ldrb	r2, [r3, #3]
    2ca8:	9b02      	ldr	r3, [sp, #8]
    2caa:	789e      	ldrb	r6, [r3, #2]
    2cac:	4296      	cmp	r6, r2
    2cae:	d100      	bne.n	2cb2 <ticker_job+0x136>
    2cb0:	e0cf      	b.n	2e52 <ticker_job+0x2d6>
			user_op = &user_ops[user->middle];
    2cb2:	2530      	movs	r5, #48	; 0x30
    2cb4:	4375      	muls	r5, r6
    2cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			if (middle == user->count_user_op) {
    2cb8:	9902      	ldr	r1, [sp, #8]
			user_op = &user_ops[user->middle];
    2cba:	195d      	adds	r5, r3, r5
			if (middle == user->count_user_op) {
    2cbc:	7809      	ldrb	r1, [r1, #0]
			middle = user->middle + 1;
    2cbe:	1c73      	adds	r3, r6, #1
    2cc0:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    2cc2:	4299      	cmp	r1, r3
    2cc4:	d100      	bne.n	2cc8 <ticker_job+0x14c>
				middle = 0;
    2cc6:	2300      	movs	r3, #0
			user->middle = middle;
    2cc8:	9902      	ldr	r1, [sp, #8]
    2cca:	708b      	strb	r3, [r1, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2ccc:	782b      	ldrb	r3, [r5, #0]
    2cce:	2b03      	cmp	r3, #3
    2cd0:	d9ea      	bls.n	2ca8 <ticker_job+0x12c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2cd2:	2b05      	cmp	r3, #5
    2cd4:	d816      	bhi.n	2d04 <ticker_job+0x188>
			ticker = &node[user_op->id];
    2cd6:	2428      	movs	r4, #40	; 0x28
    2cd8:	7869      	ldrb	r1, [r5, #1]
    2cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2cdc:	434c      	muls	r4, r1
    2cde:	1914      	adds	r4, r2, r4
			state = (ticker->req - ticker->ack) & 0xff;
    2ce0:	7862      	ldrb	r2, [r4, #1]
    2ce2:	78a0      	ldrb	r0, [r4, #2]
    2ce4:	1a12      	subs	r2, r2, r0
    2ce6:	b2d2      	uxtb	r2, r2
    2ce8:	9206      	str	r2, [sp, #24]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2cea:	2a00      	cmp	r2, #0
    2cec:	d00a      	beq.n	2d04 <ticker_job+0x188>
			    (state == 0) ||
    2cee:	2b04      	cmp	r3, #4
    2cf0:	d10d      	bne.n	2d0e <ticker_job+0x192>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2cf2:	686b      	ldr	r3, [r5, #4]
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d10a      	bne.n	2d0e <ticker_job+0x192>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2cf8:	68ab      	ldr	r3, [r5, #8]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d107      	bne.n	2d0e <ticker_job+0x192>
			     (user_op->params.update.lazy == 0) &&
    2cfe:	68eb      	ldr	r3, [r5, #12]
    2d00:	021b      	lsls	r3, r3, #8
    2d02:	d104      	bne.n	2d0e <ticker_job+0x192>
				ticker_job_op_cb(user_op,
    2d04:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2d06:	0028      	movs	r0, r5
    2d08:	f7ff fed8 	bl	2abc <ticker_job_op_cb>
    2d0c:	e7ca      	b.n	2ca4 <ticker_job+0x128>
			if (state == 1) {
    2d0e:	9b06      	ldr	r3, [sp, #24]
    2d10:	2b01      	cmp	r3, #1
    2d12:	d000      	beq.n	2d16 <ticker_job+0x19a>
    2d14:	e093      	b.n	2e3e <ticker_job+0x2c2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2d16:	0038      	movs	r0, r7
    2d18:	f7ff fe8b 	bl	2a32 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2d1c:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2d1e:	0006      	movs	r6, r0
    2d20:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2d22:	2b04      	cmp	r3, #4
    2d24:	d000      	beq.n	2d28 <ticker_job+0x1ac>
    2d26:	e07f      	b.n	2e28 <ticker_job+0x2ac>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2d28:	697b      	ldr	r3, [r7, #20]
    2d2a:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    2d2c:	f005 fd7a 	bl	8824 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    2d32:	900a      	str	r0, [sp, #40]	; 0x28
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2d34:	1a80      	subs	r0, r0, r2
    2d36:	0200      	lsls	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2d38:	9b00      	ldr	r3, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2d3a:	0a00      	lsrs	r0, r0, #8
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2d3c:	18c0      	adds	r0, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
    2d3e:	4286      	cmp	r6, r0
    2d40:	d93a      	bls.n	2db8 <ticker_job+0x23c>
		ticks_to_expire -= ticks_elapsed;
    2d42:	1a30      	subs	r0, r6, r0
	if ((ticker->ticks_periodic != 0) &&
    2d44:	6863      	ldr	r3, [r4, #4]
    2d46:	469c      	mov	ip, r3
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d012      	beq.n	2d72 <ticker_job+0x1f6>
	    (user_op->params.update.lazy != 0)) {
    2d4c:	89ab      	ldrh	r3, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d00f      	beq.n	2d72 <ticker_job+0x1f6>
		user_op->params.update.lazy--;
    2d52:	3b01      	subs	r3, #1
    2d54:	b29b      	uxth	r3, r3
    2d56:	9307      	str	r3, [sp, #28]
    2d58:	466b      	mov	r3, sp
    2d5a:	8b9b      	ldrh	r3, [r3, #28]
    2d5c:	81ab      	strh	r3, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2d5e:	4584      	cmp	ip, r0
    2d60:	d330      	bcc.n	2dc4 <ticker_job+0x248>
	if ((ticker->remainder_current < BIT(31)) &&
    2d62:	4ed3      	ldr	r6, [pc, #844]	; (30b0 <ticker_job+0x534>)
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2d64:	8be1      	ldrh	r1, [r4, #30]
    2d66:	9b07      	ldr	r3, [sp, #28]
    2d68:	428b      	cmp	r3, r1
    2d6a:	d848      	bhi.n	2dfe <ticker_job+0x282>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2d6c:	466b      	mov	r3, sp
    2d6e:	8b9b      	ldrh	r3, [r3, #28]
    2d70:	83a3      	strh	r3, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    2d72:	88ab      	ldrh	r3, [r5, #4]
	ticker->ticks_to_expire_minus +=
    2d74:	6962      	ldr	r2, [r4, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    2d76:	1818      	adds	r0, r3, r0
    2d78:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    2d7a:	88eb      	ldrh	r3, [r5, #6]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
	ticker->ticks_to_expire_minus +=
    2d7e:	18d3      	adds	r3, r2, r3
    2d80:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d84:	0020      	movs	r0, r4
    2d86:	f7ff fe7c 	bl	2a82 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2d8a:	69a2      	ldr	r2, [r4, #24]
    2d8c:	892b      	ldrh	r3, [r5, #8]
    2d8e:	189b      	adds	r3, r3, r2
    2d90:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2d92:	896a      	ldrh	r2, [r5, #10]
    2d94:	4293      	cmp	r3, r2
    2d96:	d945      	bls.n	2e24 <ticker_job+0x2a8>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2d98:	1a9b      	subs	r3, r3, r2
		ticker->ticks_slot = 0;
    2d9a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2d9c:	7bab      	ldrb	r3, [r5, #14]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d000      	beq.n	2da4 <ticker_job+0x228>
		ticker->force = user_op->params.update.force;
    2da2:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2da4:	466b      	mov	r3, sp
    2da6:	791b      	ldrb	r3, [r3, #4]
    2da8:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    2daa:	786b      	ldrb	r3, [r5, #1]
    2dac:	9301      	str	r3, [sp, #4]
		ticker->req++;
    2dae:	7863      	ldrb	r3, [r4, #1]
    2db0:	3301      	adds	r3, #1
    2db2:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2db4:	2100      	movs	r1, #0
    2db6:	e7a6      	b.n	2d06 <ticker_job+0x18a>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2db8:	6963      	ldr	r3, [r4, #20]
    2dba:	1b9e      	subs	r6, r3, r6
    2dbc:	1830      	adds	r0, r6, r0
    2dbe:	6160      	str	r0, [r4, #20]
		ticks_to_expire = 0;
    2dc0:	2000      	movs	r0, #0
    2dc2:	e7bf      	b.n	2d44 <ticker_job+0x1c8>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    2dc4:	8be3      	ldrh	r3, [r4, #30]
    2dc6:	930b      	str	r3, [sp, #44]	; 0x2c
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2dca:	9b07      	ldr	r3, [sp, #28]
    2dcc:	4293      	cmp	r3, r2
    2dce:	d2c8      	bcs.n	2d62 <ticker_job+0x1e6>
	if ((ticker->remainder_current >= BIT(31)) ||
    2dd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2dd2:	49b8      	ldr	r1, [pc, #736]	; (30b4 <ticker_job+0x538>)
    2dd4:	1871      	adds	r1, r6, r1
    2dd6:	000b      	movs	r3, r1
    2dd8:	001a      	movs	r2, r3
    2dda:	4bb5      	ldr	r3, [pc, #724]	; (30b0 <ticker_job+0x534>)
	u8_t decrement = 0;
    2ddc:	2100      	movs	r1, #0
	if ((ticker->remainder_current >= BIT(31)) ||
    2dde:	429a      	cmp	r2, r3
    2de0:	d903      	bls.n	2dea <ticker_job+0x26e>
		ticker->remainder_current += 30517578UL;
    2de2:	4bb5      	ldr	r3, [pc, #724]	; (30b8 <ticker_job+0x53c>)
		decrement++;
    2de4:	9906      	ldr	r1, [sp, #24]
		ticker->remainder_current += 30517578UL;
    2de6:	18f6      	adds	r6, r6, r3
    2de8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2dec:	6a26      	ldr	r6, [r4, #32]
			ticker->lazy_current--;
    2dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	ticker->remainder_current -= ticker->remainder_periodic;
    2df0:	1b9e      	subs	r6, r3, r6
			ticks_to_expire -= ticker->ticks_periodic +
    2df2:	4461      	add	r1, ip
			ticker->lazy_current--;
    2df4:	3a01      	subs	r2, #1
	ticker->remainder_current -= ticker->remainder_periodic;
    2df6:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2df8:	1a40      	subs	r0, r0, r1
			ticker->lazy_current--;
    2dfa:	83e2      	strh	r2, [r4, #30]
    2dfc:	e7af      	b.n	2d5e <ticker_job+0x1e2>
	ticker->remainder_current += ticker->remainder_periodic;
    2dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2e00:	6a22      	ldr	r2, [r4, #32]
    2e02:	189a      	adds	r2, r3, r2
	if ((ticker->remainder_current < BIT(31)) &&
    2e04:	4bab      	ldr	r3, [pc, #684]	; (30b4 <ticker_job+0x538>)
    2e06:	18d3      	adds	r3, r2, r3
    2e08:	42b3      	cmp	r3, r6
    2e0a:	d906      	bls.n	2e1a <ticker_job+0x29e>
	ticker->remainder_current += ticker->remainder_periodic;
    2e0c:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    2e0e:	2200      	movs	r2, #0
			ticks_to_expire += ticker->ticks_periodic +
    2e10:	4462      	add	r2, ip
			ticker->lazy_current++;
    2e12:	3101      	adds	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
    2e14:	1880      	adds	r0, r0, r2
			ticker->lazy_current++;
    2e16:	83e1      	strh	r1, [r4, #30]
    2e18:	e7a4      	b.n	2d64 <ticker_job+0x1e8>
		ticker->remainder_current -= 30517578UL;
    2e1a:	4ba8      	ldr	r3, [pc, #672]	; (30bc <ticker_job+0x540>)
    2e1c:	18d2      	adds	r2, r2, r3
    2e1e:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    2e20:	9a06      	ldr	r2, [sp, #24]
    2e22:	e7f5      	b.n	2e10 <ticker_job+0x294>
		ticker->ticks_slot = 0;
    2e24:	2300      	movs	r3, #0
    2e26:	e7b8      	b.n	2d9a <ticker_job+0x21e>
		ticker->req = ticker->ack;
    2e28:	78a3      	ldrb	r3, [r4, #2]
    2e2a:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2e2c:	7f3a      	ldrb	r2, [r7, #28]
    2e2e:	786b      	ldrb	r3, [r5, #1]
    2e30:	429a      	cmp	r2, r3
    2e32:	d1bf      	bne.n	2db4 <ticker_job+0x238>
			instance->ticker_id_slot_previous = TICKER_NULL;
    2e34:	23ff      	movs	r3, #255	; 0xff
    2e36:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    2e38:	2300      	movs	r3, #0
    2e3a:	61bb      	str	r3, [r7, #24]
    2e3c:	e7ba      	b.n	2db4 <ticker_job+0x238>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2e3e:	2104      	movs	r1, #4
    2e40:	003b      	movs	r3, r7
    2e42:	2201      	movs	r2, #1
    2e44:	0008      	movs	r0, r1
    2e46:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    2e48:	47a0      	blx	r4
				user->middle = prev;
    2e4a:	9b02      	ldr	r3, [sp, #8]
    2e4c:	709e      	strb	r6, [r3, #2]
				pending = 1;
    2e4e:	2301      	movs	r3, #1
    2e50:	930c      	str	r3, [sp, #48]	; 0x30
    2e52:	9b04      	ldr	r3, [sp, #16]
    2e54:	3b01      	subs	r3, #1
    2e56:	b2db      	uxtb	r3, r3
    2e58:	9304      	str	r3, [sp, #16]
    2e5a:	e6c0      	b.n	2bde <ticker_job+0x62>
		ticks_expired += ticks_to_expire;
    2e5c:	9b02      	ldr	r3, [sp, #8]
    2e5e:	195b      	adds	r3, r3, r5
    2e60:	9302      	str	r3, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    2e62:	69bb      	ldr	r3, [r7, #24]
    2e64:	429d      	cmp	r5, r3
    2e66:	d237      	bcs.n	2ed8 <ticker_job+0x35c>
			instance->ticks_slot_previous -= ticks_to_expire;
    2e68:	1b5b      	subs	r3, r3, r5
			instance->ticks_slot_previous = 0;
    2e6a:	61bb      	str	r3, [r7, #24]
		if (ticker->ticks_slot != 0) {
    2e6c:	69a3      	ldr	r3, [r4, #24]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d001      	beq.n	2e76 <ticker_job+0x2fa>
			instance->ticker_id_slot_previous = id_expired;
    2e72:	773e      	strb	r6, [r7, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    2e74:	61bb      	str	r3, [r7, #24]
		ticker->ticks_to_expire = 0;
    2e76:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    2e78:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0;
    2e7a:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    2e7c:	777b      	strb	r3, [r7, #29]
		if (ticker->ticks_periodic != 0) {
    2e7e:	6860      	ldr	r0, [r4, #4]
    2e80:	4290      	cmp	r0, r2
    2e82:	d032      	beq.n	2eea <ticker_job+0x36e>
    2e84:	8ba3      	ldrh	r3, [r4, #28]
    2e86:	9306      	str	r3, [sp, #24]
	if ((ticker->remainder_current < BIT(31)) &&
    2e88:	4b89      	ldr	r3, [pc, #548]	; (30b0 <ticker_job+0x534>)
    2e8a:	469c      	mov	ip, r3
	ticker->remainder_current += ticker->remainder_periodic;
    2e8c:	6a21      	ldr	r1, [r4, #32]
    2e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2e90:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2e92:	4988      	ldr	r1, [pc, #544]	; (30b4 <ticker_job+0x538>)
    2e94:	1859      	adds	r1, r3, r1
    2e96:	4561      	cmp	r1, ip
    2e98:	d922      	bls.n	2ee0 <ticker_job+0x364>
	ticker->remainder_current += ticker->remainder_periodic;
    2e9a:	6263      	str	r3, [r4, #36]	; 0x24
	return 0;
    2e9c:	2300      	movs	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e9e:	181b      	adds	r3, r3, r0
    2ea0:	18d2      	adds	r2, r2, r3
			while (count--) {
    2ea2:	9b06      	ldr	r3, [sp, #24]
    2ea4:	3b01      	subs	r3, #1
    2ea6:	9306      	str	r3, [sp, #24]
    2ea8:	d2f0      	bcs.n	2e8c <ticker_job+0x310>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2eaa:	9b08      	ldr	r3, [sp, #32]
			ticker->ticks_to_expire = ticks_to_expire;
    2eac:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2eae:	9a02      	ldr	r2, [sp, #8]
    2eb0:	6979      	ldr	r1, [r7, #20]
    2eb2:	189a      	adds	r2, r3, r2
    2eb4:	0020      	movs	r0, r4
    2eb6:	f7ff fde4 	bl	2a82 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    2eba:	8ba3      	ldrh	r3, [r4, #28]
    2ebc:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    2ebe:	2300      	movs	r3, #0
    2ec0:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    2ec2:	466b      	mov	r3, sp
    2ec4:	791b      	ldrb	r3, [r3, #4]
    2ec6:	7023      	strb	r3, [r4, #0]
			ticker->req++;
    2ec8:	7863      	ldrb	r3, [r4, #1]
    2eca:	3301      	adds	r3, #1
    2ecc:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    2ece:	9b00      	ldr	r3, [sp, #0]
    2ed0:	9601      	str	r6, [sp, #4]
    2ed2:	1b5b      	subs	r3, r3, r5
    2ed4:	9300      	str	r3, [sp, #0]
    2ed6:	e693      	b.n	2c00 <ticker_job+0x84>
			instance->ticker_id_slot_previous = TICKER_NULL;
    2ed8:	23ff      	movs	r3, #255	; 0xff
    2eda:	773b      	strb	r3, [r7, #28]
			instance->ticks_slot_previous = 0;
    2edc:	2300      	movs	r3, #0
    2ede:	e7c4      	b.n	2e6a <ticker_job+0x2ee>
		ticker->remainder_current -= 30517578UL;
    2ee0:	4976      	ldr	r1, [pc, #472]	; (30bc <ticker_job+0x540>)
    2ee2:	185b      	adds	r3, r3, r1
    2ee4:	6263      	str	r3, [r4, #36]	; 0x24
		return 1;
    2ee6:	9b03      	ldr	r3, [sp, #12]
    2ee8:	e7d9      	b.n	2e9e <ticker_job+0x322>
			ticker->req = ticker->ack;
    2eea:	78a3      	ldrb	r3, [r4, #2]
    2eec:	9e01      	ldr	r6, [sp, #4]
    2eee:	7063      	strb	r3, [r4, #1]
    2ef0:	e7ed      	b.n	2ece <ticker_job+0x352>
		user = &users[count_user];
    2ef2:	9b06      	ldr	r3, [sp, #24]
    2ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2ef6:	00db      	lsls	r3, r3, #3
    2ef8:	18d3      	adds	r3, r2, r3
    2efa:	9307      	str	r3, [sp, #28]
		user_ops = (void *)&user->user_op[0];
    2efc:	685b      	ldr	r3, [r3, #4]
    2efe:	9313      	str	r3, [sp, #76]	; 0x4c
		user_ops_first = user->first;
    2f00:	9b07      	ldr	r3, [sp, #28]
    2f02:	785b      	ldrb	r3, [r3, #1]
    2f04:	9303      	str	r3, [sp, #12]
		while ((insert_head != TICKER_NULL) ||
    2f06:	9b01      	ldr	r3, [sp, #4]
    2f08:	2bff      	cmp	r3, #255	; 0xff
    2f0a:	d100      	bne.n	2f0e <ticker_job+0x392>
    2f0c:	e083      	b.n	3016 <ticker_job+0x49a>
				ticker = &node[id_insert];
    2f0e:	2428      	movs	r4, #40	; 0x28
    2f10:	9b01      	ldr	r3, [sp, #4]
    2f12:	435c      	muls	r4, r3
    2f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2f16:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    2f18:	9b01      	ldr	r3, [sp, #4]
    2f1a:	9302      	str	r3, [sp, #8]
    2f1c:	7823      	ldrb	r3, [r4, #0]
    2f1e:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    2f20:	2300      	movs	r3, #0
    2f22:	9300      	str	r3, [sp, #0]
	struct ticker_node *node = &instance->node[0];
    2f24:	683b      	ldr	r3, [r7, #0]
		skip = 0;
    2f26:	2100      	movs	r1, #0
	struct ticker_node *node = &instance->node[0];
    2f28:	9314      	str	r3, [sp, #80]	; 0x50
	ticker->next = TICKER_NULL;
    2f2a:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2f2c:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    2f2e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2f30:	8be3      	ldrh	r3, [r4, #30]
		skip = 0;
    2f32:	910f      	str	r1, [sp, #60]	; 0x3c
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2f34:	4293      	cmp	r3, r2
    2f36:	d902      	bls.n	2f3e <ticker_job+0x3c2>
		skip = ticker->lazy_current -
    2f38:	1a9b      	subs	r3, r3, r2
    2f3a:	b29b      	uxth	r3, r3
    2f3c:	930f      	str	r3, [sp, #60]	; 0x3c
	ticker_new = &node[id];
    2f3e:	2328      	movs	r3, #40	; 0x28
    2f40:	9a02      	ldr	r2, [sp, #8]
    2f42:	4353      	muls	r3, r2
    2f44:	9315      	str	r3, [sp, #84]	; 0x54
	node = &instance->node[0];
    2f46:	683b      	ldr	r3, [r7, #0]
	ticks_slot_previous = instance->ticks_slot_previous;
    2f48:	69ba      	ldr	r2, [r7, #24]
	node = &instance->node[0];
    2f4a:	469c      	mov	ip, r3
	ticker_new = &node[id];
    2f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2f4e:	4463      	add	r3, ip
    2f50:	9308      	str	r3, [sp, #32]
	ticks_to_expire = ticker_new->ticks_to_expire;
    2f52:	689e      	ldr	r6, [r3, #8]
	current = instance->ticker_id_head;
    2f54:	7f7b      	ldrb	r3, [r7, #29]
	ticks_slot_previous = instance->ticks_slot_previous;
    2f56:	9209      	str	r2, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    2f58:	22ff      	movs	r2, #255	; 0xff
	previous = current;
    2f5a:	930d      	str	r3, [sp, #52]	; 0x34
	collide = ticker_id_slot_previous = TICKER_NULL;
    2f5c:	920a      	str	r2, [sp, #40]	; 0x28
	while ((current != TICKER_NULL) &&
    2f5e:	2bff      	cmp	r3, #255	; 0xff
    2f60:	d006      	beq.n	2f70 <ticker_job+0x3f4>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    2f62:	2228      	movs	r2, #40	; 0x28
    2f64:	435a      	muls	r2, r3
    2f66:	4462      	add	r2, ip
		(ticks_to_expire_current =
    2f68:	6890      	ldr	r0, [r2, #8]
	while ((current != TICKER_NULL) &&
    2f6a:	4286      	cmp	r6, r0
    2f6c:	d900      	bls.n	2f70 <ticker_job+0x3f4>
    2f6e:	e0ab      	b.n	30c8 <ticker_job+0x54c>
	collide = ticker_by_slot_get(&node[0], current,
    2f70:	001d      	movs	r5, r3
				     ticks_to_expire + ticker_new->ticks_slot);
    2f72:	9a08      	ldr	r2, [sp, #32]
    2f74:	6992      	ldr	r2, [r2, #24]
    2f76:	9210      	str	r2, [sp, #64]	; 0x40
	collide = ticker_by_slot_get(&node[0], current,
    2f78:	18b0      	adds	r0, r6, r2
	while (ticker_id_head != TICKER_NULL) {
    2f7a:	2dff      	cmp	r5, #255	; 0xff
    2f7c:	d000      	beq.n	2f80 <ticker_job+0x404>
    2f7e:	e0b1      	b.n	30e4 <ticker_job+0x568>
	if ((ticker_new->ticks_slot == 0) ||
    2f80:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2f82:	2a00      	cmp	r2, #0
    2f84:	d006      	beq.n	2f94 <ticker_job+0x418>
    2f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f88:	4296      	cmp	r6, r2
    2f8a:	d200      	bcs.n	2f8e <ticker_job+0x412>
    2f8c:	e0c3      	b.n	3116 <ticker_job+0x59a>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    2f8e:	2dff      	cmp	r5, #255	; 0xff
    2f90:	d000      	beq.n	2f94 <ticker_job+0x418>
    2f92:	e181      	b.n	3298 <ticker_job+0x71c>
		ticker_new->ticks_to_expire = ticks_to_expire;
    2f94:	9a08      	ldr	r2, [sp, #32]
    2f96:	6096      	str	r6, [r2, #8]
		ticker_new->next = current;
    2f98:	7013      	strb	r3, [r2, #0]
		if (previous == current) {
    2f9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2f9c:	4293      	cmp	r3, r2
    2f9e:	d000      	beq.n	2fa2 <ticker_job+0x426>
    2fa0:	e0b1      	b.n	3106 <ticker_job+0x58a>
			instance->ticker_id_head = id;
    2fa2:	466a      	mov	r2, sp
    2fa4:	7a12      	ldrb	r2, [r2, #8]
    2fa6:	777a      	strb	r2, [r7, #29]
		if (current != TICKER_NULL) {
    2fa8:	2bff      	cmp	r3, #255	; 0xff
    2faa:	d005      	beq.n	2fb8 <ticker_job+0x43c>
			node[current].ticks_to_expire -= ticks_to_expire;
    2fac:	2228      	movs	r2, #40	; 0x28
    2fae:	4353      	muls	r3, r2
    2fb0:	4463      	add	r3, ip
    2fb2:	689a      	ldr	r2, [r3, #8]
    2fb4:	1b92      	subs	r2, r2, r6
    2fb6:	609a      	str	r2, [r3, #8]
	return TICKER_STATUS_SUCCESS;
    2fb8:	2100      	movs	r1, #0
	ticker->req = ticker->ack + 1;
    2fba:	78a3      	ldrb	r3, [r4, #2]
    2fbc:	3301      	adds	r3, #1
    2fbe:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    2fc0:	9b00      	ldr	r3, [sp, #0]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d09f      	beq.n	2f06 <ticker_job+0x38a>
				ticker_job_op_cb(user_op, status);
    2fc6:	0018      	movs	r0, r3
    2fc8:	f7ff fd78 	bl	2abc <ticker_job_op_cb>
    2fcc:	e79b      	b.n	2f06 <ticker_job+0x38a>
				user_op = &user_ops[user_ops_first];
    2fce:	2330      	movs	r3, #48	; 0x30
    2fd0:	9a03      	ldr	r2, [sp, #12]
    2fd2:	4353      	muls	r3, r2
    2fd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2fd6:	18d3      	adds	r3, r2, r3
    2fd8:	9300      	str	r3, [sp, #0]
				first = user_ops_first + 1;
    2fda:	9b03      	ldr	r3, [sp, #12]
    2fdc:	3301      	adds	r3, #1
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	9303      	str	r3, [sp, #12]
				if (first == user->count_user_op) {
    2fe2:	9b07      	ldr	r3, [sp, #28]
    2fe4:	9a03      	ldr	r2, [sp, #12]
    2fe6:	781b      	ldrb	r3, [r3, #0]
    2fe8:	4293      	cmp	r3, r2
    2fea:	d101      	bne.n	2ff0 <ticker_job+0x474>
					first = 0;
    2fec:	2300      	movs	r3, #0
    2fee:	9303      	str	r3, [sp, #12]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    2ff0:	9b00      	ldr	r3, [sp, #0]
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	2b03      	cmp	r3, #3
    2ff6:	d10e      	bne.n	3016 <ticker_job+0x49a>
				ticker = &node[id_insert];
    2ff8:	2428      	movs	r4, #40	; 0x28
				id_insert = user_op->id;
    2ffa:	9b00      	ldr	r3, [sp, #0]
    2ffc:	785b      	ldrb	r3, [r3, #1]
				ticker = &node[id_insert];
    2ffe:	435c      	muls	r4, r3
				id_insert = user_op->id;
    3000:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
    3002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3004:	191c      	adds	r4, r3, r4
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    3006:	7862      	ldrb	r2, [r4, #1]
    3008:	78a3      	ldrb	r3, [r4, #2]
    300a:	429a      	cmp	r2, r3
    300c:	d00a      	beq.n	3024 <ticker_job+0x4a8>
					ticker_job_op_cb(user_op,
    300e:	2101      	movs	r1, #1
    3010:	9800      	ldr	r0, [sp, #0]
    3012:	f7ff fd53 	bl	2abc <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    3016:	9b07      	ldr	r3, [sp, #28]
    3018:	9a03      	ldr	r2, [sp, #12]
    301a:	789b      	ldrb	r3, [r3, #2]
    301c:	4293      	cmp	r3, r2
    301e:	d1d6      	bne.n	2fce <ticker_job+0x452>
    3020:	9b06      	ldr	r3, [sp, #24]
    3022:	e605      	b.n	2c30 <ticker_job+0xb4>
	ticker->ticks_to_expire_minus = 0;
    3024:	2500      	movs	r5, #0
	ticker->ticks_periodic = start->ticks_periodic;
    3026:	9b00      	ldr	r3, [sp, #0]
				ticker_job_op_start(ticker, user_op,
    3028:	6979      	ldr	r1, [r7, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    302a:	68db      	ldr	r3, [r3, #12]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    302c:	0020      	movs	r0, r4
	ticker->ticks_periodic = start->ticks_periodic;
    302e:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    3030:	9b00      	ldr	r3, [sp, #0]
    3032:	691b      	ldr	r3, [r3, #16]
    3034:	9308      	str	r3, [sp, #32]
    3036:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    3038:	9b00      	ldr	r3, [sp, #0]
    303a:	8a9b      	ldrh	r3, [r3, #20]
    303c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    303e:	9b00      	ldr	r3, [sp, #0]
    3040:	699b      	ldr	r3, [r3, #24]
    3042:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    3044:	9b00      	ldr	r3, [sp, #0]
    3046:	69db      	ldr	r3, [r3, #28]
    3048:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    304a:	9b00      	ldr	r3, [sp, #0]
    304c:	6a1b      	ldr	r3, [r3, #32]
    304e:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    3050:	9b00      	ldr	r3, [sp, #0]
    3052:	689b      	ldr	r3, [r3, #8]
	ticker->ticks_to_expire_minus = 0;
    3054:	6165      	str	r5, [r4, #20]
	ticker->ticks_to_expire = start->ticks_first;
    3056:	9308      	str	r3, [sp, #32]
    3058:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    305a:	9b00      	ldr	r3, [sp, #0]
    305c:	685a      	ldr	r2, [r3, #4]
    305e:	f7ff fd10 	bl	2a82 <ticks_to_expire_prep>
	ticker->force = 1;
    3062:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    3064:	6265      	str	r5, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    3066:	83e5      	strh	r5, [r4, #30]
	ticker->force = 1;
    3068:	70e3      	strb	r3, [r4, #3]
    306a:	e75b      	b.n	2f24 <ticker_job+0x3a8>
		if (ticker->ticks_periodic != 0) {
    306c:	6863      	ldr	r3, [r4, #4]
    306e:	2b00      	cmp	r3, #0
    3070:	d100      	bne.n	3074 <ticker_job+0x4f8>
    3072:	e07a      	b.n	316a <ticker_job+0x5ee>
	ticker->remainder_current += ticker->remainder_periodic;
    3074:	6a21      	ldr	r1, [r4, #32]
    3076:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3078:	1852      	adds	r2, r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    307a:	490e      	ldr	r1, [pc, #56]	; (30b4 <ticker_job+0x538>)
    307c:	1850      	adds	r0, r2, r1
    307e:	490c      	ldr	r1, [pc, #48]	; (30b0 <ticker_job+0x534>)
    3080:	4288      	cmp	r0, r1
    3082:	d910      	bls.n	30a6 <ticker_job+0x52a>
	ticker->remainder_current += ticker->remainder_periodic;
    3084:	6262      	str	r2, [r4, #36]	; 0x24
	return 0;
    3086:	2200      	movs	r2, #0
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3088:	68a1      	ldr	r1, [r4, #8]
    308a:	185b      	adds	r3, r3, r1
    308c:	189b      	adds	r3, r3, r2
			ticker->lazy_current++;
    308e:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3090:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    3092:	3201      	adds	r2, #1
    3094:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3096:	6962      	ldr	r2, [r4, #20]
    3098:	2100      	movs	r1, #0
			if (ticker->ticks_to_expire >
    309a:	4293      	cmp	r3, r2
    309c:	d910      	bls.n	30c0 <ticker_job+0x544>
				ticker->ticks_to_expire -=
    309e:	1a9b      	subs	r3, r3, r2
    30a0:	60a3      	str	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    30a2:	6161      	str	r1, [r4, #20]
    30a4:	e74f      	b.n	2f46 <ticker_job+0x3ca>
		ticker->remainder_current -= 30517578UL;
    30a6:	4905      	ldr	r1, [pc, #20]	; (30bc <ticker_job+0x540>)
    30a8:	1852      	adds	r2, r2, r1
    30aa:	6262      	str	r2, [r4, #36]	; 0x24
		return 1;
    30ac:	2201      	movs	r2, #1
    30ae:	e7eb      	b.n	3088 <ticker_job+0x50c>
    30b0:	7f172b59 	.word	0x7f172b59
    30b4:	ff172b5a 	.word	0xff172b5a
    30b8:	01d1a94a 	.word	0x01d1a94a
    30bc:	fe2e56b6 	.word	0xfe2e56b6
				ticker->ticks_to_expire_minus -=
    30c0:	1ad3      	subs	r3, r2, r3
    30c2:	6163      	str	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    30c4:	60a1      	str	r1, [r4, #8]
    30c6:	e73e      	b.n	2f46 <ticker_job+0x3ca>
		if (ticker_current->ticks_slot != 0) {
    30c8:	6995      	ldr	r5, [r2, #24]
		ticks_to_expire -= ticks_to_expire_current;
    30ca:	1a36      	subs	r6, r6, r0
		if (ticker_current->ticks_slot != 0) {
    30cc:	2d00      	cmp	r5, #0
    30ce:	d107      	bne.n	30e0 <ticker_job+0x564>
			if (ticks_slot_previous > ticks_to_expire_current) {
    30d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    30d2:	4288      	cmp	r0, r1
    30d4:	d200      	bcs.n	30d8 <ticker_job+0x55c>
				ticks_slot_previous -= ticks_to_expire_current;
    30d6:	1a0d      	subs	r5, r1, r0
		current = ticker_current->next;
    30d8:	930d      	str	r3, [sp, #52]	; 0x34
    30da:	9509      	str	r5, [sp, #36]	; 0x24
    30dc:	7813      	ldrb	r3, [r2, #0]
    30de:	e73e      	b.n	2f5e <ticker_job+0x3e2>
		if (ticker_current->ticks_slot != 0) {
    30e0:	930a      	str	r3, [sp, #40]	; 0x28
    30e2:	e7f9      	b.n	30d8 <ticker_job+0x55c>
		ticker = &node[ticker_id_head];
    30e4:	2228      	movs	r2, #40	; 0x28
    30e6:	436a      	muls	r2, r5
    30e8:	4462      	add	r2, ip
		ticks_to_expire = ticker->ticks_to_expire;
    30ea:	6891      	ldr	r1, [r2, #8]
    30ec:	9111      	str	r1, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    30ee:	4281      	cmp	r1, r0
    30f0:	d207      	bcs.n	3102 <ticker_job+0x586>
		if (ticker->ticks_slot) {
    30f2:	6991      	ldr	r1, [r2, #24]
    30f4:	2900      	cmp	r1, #0
    30f6:	d000      	beq.n	30fa <ticker_job+0x57e>
    30f8:	e742      	b.n	2f80 <ticker_job+0x404>
		ticks_slot -= ticks_to_expire;
    30fa:	9911      	ldr	r1, [sp, #68]	; 0x44
		ticker_id_head = ticker->next;
    30fc:	7815      	ldrb	r5, [r2, #0]
		ticks_slot -= ticks_to_expire;
    30fe:	1a40      	subs	r0, r0, r1
    3100:	e73b      	b.n	2f7a <ticker_job+0x3fe>
			return TICKER_NULL;
    3102:	9d04      	ldr	r5, [sp, #16]
    3104:	e73c      	b.n	2f80 <ticker_job+0x404>
			node[previous].next = id;
    3106:	2128      	movs	r1, #40	; 0x28
    3108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    310a:	4668      	mov	r0, sp
    310c:	434a      	muls	r2, r1
    310e:	4661      	mov	r1, ip
    3110:	7a00      	ldrb	r0, [r0, #8]
    3112:	5450      	strb	r0, [r2, r1]
    3114:	e748      	b.n	2fa8 <ticker_job+0x42c>
	while (id_insert !=
    3116:	9b02      	ldr	r3, [sp, #8]
    3118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    311a:	4293      	cmp	r3, r2
    311c:	d100      	bne.n	3120 <ticker_job+0x5a4>
    311e:	e74b      	b.n	2fb8 <ticker_job+0x43c>
		if (id_collide != TICKER_NULL) {
    3120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3122:	2bff      	cmp	r3, #255	; 0xff
    3124:	d0a2      	beq.n	306c <ticker_job+0x4f0>
    3126:	001d      	movs	r5, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    3128:	2628      	movs	r6, #40	; 0x28
    312a:	436e      	muls	r6, r5
    312c:	9b14      	ldr	r3, [sp, #80]	; 0x50
				skip_collide = 0;
    312e:	2200      	movs	r2, #0
			struct ticker_node *ticker_collide = &node[id_collide];
    3130:	199e      	adds	r6, r3, r6
			if (ticker_collide->lazy_current >
    3132:	8bf3      	ldrh	r3, [r6, #30]
			    ticker_collide->lazy_periodic) {
    3134:	8bb1      	ldrh	r1, [r6, #28]
			if (ticker_collide->lazy_current >
    3136:	428b      	cmp	r3, r1
    3138:	d901      	bls.n	313e <ticker_job+0x5c2>
				skip_collide = ticker_collide->lazy_current -
    313a:	1a5b      	subs	r3, r3, r1
    313c:	b29a      	uxth	r2, r3
			if (ticker_collide->ticks_periodic &&
    313e:	6873      	ldr	r3, [r6, #4]
    3140:	2b00      	cmp	r3, #0
    3142:	d093      	beq.n	306c <ticker_job+0x4f0>
    3144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3146:	429a      	cmp	r2, r3
    3148:	d890      	bhi.n	306c <ticker_job+0x4f0>
			    skip_collide <= skip &&
    314a:	78f2      	ldrb	r2, [r6, #3]
    314c:	78e3      	ldrb	r3, [r4, #3]
    314e:	429a      	cmp	r2, r3
    3150:	d28c      	bcs.n	306c <ticker_job+0x4f0>
					ticker_dequeue(instance, id_collide);
    3152:	0029      	movs	r1, r5
    3154:	0038      	movs	r0, r7
    3156:	f7ff fc6c 	bl	2a32 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    315a:	78b3      	ldrb	r3, [r6, #2]
				ticker_collide->ticks_to_expire =
    315c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
    315e:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
    3160:	466b      	mov	r3, sp
    3162:	791b      	ldrb	r3, [r3, #4]
    3164:	9501      	str	r5, [sp, #4]
    3166:	7033      	strb	r3, [r6, #0]
    3168:	e6ed      	b.n	2f46 <ticker_job+0x3ca>
			return TICKER_STATUS_FAILURE;
    316a:	2101      	movs	r1, #1
    316c:	e728      	b.n	2fc0 <ticker_job+0x444>
		user = &users[count_user];
    316e:	9b03      	ldr	r3, [sp, #12]
    3170:	00ec      	lsls	r4, r5, #3
    3172:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    3174:	6863      	ldr	r3, [r4, #4]
    3176:	9304      	str	r3, [sp, #16]
		while (user->first != user->last) {
    3178:	7863      	ldrb	r3, [r4, #1]
    317a:	78e2      	ldrb	r2, [r4, #3]
    317c:	429a      	cmp	r2, r3
    317e:	d102      	bne.n	3186 <ticker_job+0x60a>
    3180:	3d01      	subs	r5, #1
    3182:	b2ed      	uxtb	r5, r5
    3184:	e568      	b.n	2c58 <ticker_job+0xdc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3186:	2230      	movs	r2, #48	; 0x30
    3188:	4353      	muls	r3, r2
    318a:	9a04      	ldr	r2, [sp, #16]
    318c:	18d3      	adds	r3, r2, r3
	switch (uop->op) {
    318e:	781a      	ldrb	r2, [r3, #0]
    3190:	2a01      	cmp	r2, #1
    3192:	d026      	beq.n	31e2 <ticker_job+0x666>
    3194:	2a02      	cmp	r2, #2
    3196:	d12b      	bne.n	31f0 <ticker_job+0x674>
		ticker_by_next_slot_get(instance,
    3198:	685a      	ldr	r2, [r3, #4]
    319a:	68d9      	ldr	r1, [r3, #12]
    319c:	4694      	mov	ip, r2
    319e:	9100      	str	r1, [sp, #0]
	node = instance->node;
    31a0:	6839      	ldr	r1, [r7, #0]
		ticker_by_next_slot_get(instance,
    31a2:	689a      	ldr	r2, [r3, #8]
	node = instance->node;
    31a4:	9101      	str	r1, [sp, #4]
	_ticker_id_head = *ticker_id_head;
    31a6:	4661      	mov	r1, ip
    31a8:	7809      	ldrb	r1, [r1, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    31aa:	29ff      	cmp	r1, #255	; 0xff
    31ac:	d004      	beq.n	31b8 <ticker_job+0x63c>
    31ae:	6810      	ldr	r0, [r2, #0]
    31b0:	0006      	movs	r6, r0
    31b2:	6978      	ldr	r0, [r7, #20]
    31b4:	4286      	cmp	r6, r0
    31b6:	d024      	beq.n	3202 <ticker_job+0x686>
		*ticks_current = instance->ticks_current;
    31b8:	6978      	ldr	r0, [r7, #20]
		_ticker_id_head = instance->ticker_id_head;
    31ba:	7f79      	ldrb	r1, [r7, #29]
		*ticks_current = instance->ticks_current;
    31bc:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    31be:	2200      	movs	r2, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    31c0:	29ff      	cmp	r1, #255	; 0xff
    31c2:	d00a      	beq.n	31da <ticker_job+0x65e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    31c4:	2028      	movs	r0, #40	; 0x28
    31c6:	4348      	muls	r0, r1
    31c8:	9e01      	ldr	r6, [sp, #4]
    31ca:	1830      	adds	r0, r6, r0
    31cc:	6886      	ldr	r6, [r0, #8]
    31ce:	9602      	str	r6, [sp, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    31d0:	6986      	ldr	r6, [r0, #24]
    31d2:	2e00      	cmp	r6, #0
    31d4:	d01c      	beq.n	3210 <ticker_job+0x694>
		_ticks_to_expire += ticker->ticks_to_expire;
    31d6:	9802      	ldr	r0, [sp, #8]
    31d8:	1812      	adds	r2, r2, r0
	*ticker_id_head = _ticker_id_head;
    31da:	4660      	mov	r0, ip
    31dc:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    31de:	9900      	ldr	r1, [sp, #0]
    31e0:	600a      	str	r2, [r1, #0]
		uop->status = TICKER_STATUS_SUCCESS;
    31e2:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    31e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    31e6:	6258      	str	r0, [r3, #36]	; 0x24
	if (fp_op_func) {
    31e8:	4282      	cmp	r2, r0
    31ea:	d001      	beq.n	31f0 <ticker_job+0x674>
		fp_op_func(uop->status, uop->op_context);
    31ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    31ee:	4790      	blx	r2
			first = user->first + 1;
    31f0:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    31f2:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    31f4:	3301      	adds	r3, #1
    31f6:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    31f8:	429a      	cmp	r2, r3
    31fa:	d100      	bne.n	31fe <ticker_job+0x682>
				first = 0;
    31fc:	2300      	movs	r3, #0
			user->first = first;
    31fe:	7063      	strb	r3, [r4, #1]
    3200:	e7ba      	b.n	3178 <ticker_job+0x5fc>
		ticker = &node[_ticker_id_head];
    3202:	2028      	movs	r0, #40	; 0x28
    3204:	4341      	muls	r1, r0
	_ticks_to_expire = *ticks_to_expire;
    3206:	9a00      	ldr	r2, [sp, #0]
		_ticker_id_head = ticker->next;
    3208:	9801      	ldr	r0, [sp, #4]
	_ticks_to_expire = *ticks_to_expire;
    320a:	6812      	ldr	r2, [r2, #0]
		_ticker_id_head = ticker->next;
    320c:	5c41      	ldrb	r1, [r0, r1]
    320e:	e7d7      	b.n	31c0 <ticker_job+0x644>
		_ticks_to_expire += ticker->ticks_to_expire;
    3210:	9902      	ldr	r1, [sp, #8]
    3212:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    3214:	7801      	ldrb	r1, [r0, #0]
    3216:	e7d3      	b.n	31c0 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
    3218:	9b05      	ldr	r3, [sp, #20]
    321a:	2bff      	cmp	r3, #255	; 0xff
    321c:	d107      	bne.n	322e <ticker_job+0x6b2>
		ticks_current = cntr_cnt_get();
    321e:	f005 fb01 	bl	8824 <cntr_cnt_get>
    3222:	0004      	movs	r4, r0
		if (cntr_start() == 0) {
    3224:	f005 fad8 	bl	87d8 <cntr_start>
    3228:	2800      	cmp	r0, #0
    322a:	d100      	bne.n	322e <ticker_job+0x6b2>
			instance->ticks_current = ticks_current;
    322c:	617c      	str	r4, [r7, #20]
	ticks_to_expire = ticker->ticks_to_expire;
    322e:	2328      	movs	r3, #40	; 0x28
    3230:	260a      	movs	r6, #10
	ticker = &instance->node[instance->ticker_id_head];
    3232:	7f7a      	ldrb	r2, [r7, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    3234:	4353      	muls	r3, r2
    3236:	683a      	ldr	r2, [r7, #0]
    3238:	18d3      	adds	r3, r2, r3
    323a:	689b      	ldr	r3, [r3, #8]
    323c:	9300      	str	r3, [sp, #0]
		ctr = cntr_cnt_get();
    323e:	f005 faf1 	bl	8824 <cntr_cnt_get>
		cc = instance->ticks_current;
    3242:	697b      	ldr	r3, [r7, #20]
		       ticks_to_expire : ticks_elapsed);
    3244:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3246:	1ac4      	subs	r4, r0, r3
    3248:	0224      	lsls	r4, r4, #8
    324a:	0a24      	lsrs	r4, r4, #8
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    324c:	3403      	adds	r4, #3
		ctr = cntr_cnt_get();
    324e:	0005      	movs	r5, r0
		       ticks_to_expire : ticks_elapsed);
    3250:	4294      	cmp	r4, r2
    3252:	d200      	bcs.n	3256 <ticker_job+0x6da>
    3254:	0014      	movs	r4, r2
		cc += ((ticks_elapsed < ticks_to_expire) ?
    3256:	191c      	adds	r4, r3, r4
		cc &= 0x00FFFFFF;
    3258:	0224      	lsls	r4, r4, #8
    325a:	0a24      	lsrs	r4, r4, #8
		instance->trigger_set_cb(cc);
    325c:	0020      	movs	r0, r4
    325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3260:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3262:	f005 fadf 	bl	8824 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3266:	1b40      	subs	r0, r0, r5
    3268:	0200      	lsls	r0, r0, #8
    326a:	0a00      	lsrs	r0, r0, #8
    326c:	1b64      	subs	r4, r4, r5
    326e:	0224      	lsls	r4, r4, #8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3270:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3272:	0a24      	lsrs	r4, r4, #8
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3274:	42a0      	cmp	r0, r4
    3276:	d800      	bhi.n	327a <ticker_job+0x6fe>
    3278:	e4ff      	b.n	2c7a <ticker_job+0xfe>
    327a:	3e01      	subs	r6, #1
		LL_ASSERT(i);
    327c:	2e00      	cmp	r6, #0
    327e:	d1de      	bne.n	323e <ticker_job+0x6c2>
    3280:	b662      	cpsie	i
    3282:	2004      	movs	r0, #4
    3284:	df02      	svc	2
	instance->job_guard = 0;
    3286:	2300      	movs	r3, #0
    3288:	77bb      	strb	r3, [r7, #30]
    328a:	e4ed      	b.n	2c68 <ticker_job+0xec>
	if (!pending) {
    328c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    328e:	2b00      	cmp	r3, #0
    3290:	d1f9      	bne.n	3286 <ticker_job+0x70a>
		flag_compare_update = 1;
    3292:	2301      	movs	r3, #1
    3294:	930b      	str	r3, [sp, #44]	; 0x2c
    3296:	e4da      	b.n	2c4e <ticker_job+0xd2>
	while (id_insert !=
    3298:	9b02      	ldr	r3, [sp, #8]
    329a:	42ab      	cmp	r3, r5
    329c:	d000      	beq.n	32a0 <ticker_job+0x724>
    329e:	e743      	b.n	3128 <ticker_job+0x5ac>
    32a0:	e68a      	b.n	2fb8 <ticker_job+0x43c>
    32a2:	46c0      	nop			; (mov r8, r8)

000032a4 <ticker_init>:
{
    32a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32a6:	0006      	movs	r6, r0
	instance->count_node = count_node;
    32a8:	272c      	movs	r7, #44	; 0x2c
{
    32aa:	ac08      	add	r4, sp, #32
    32ac:	cc01      	ldmia	r4!, {r0}
	instance->count_node = count_node;
    32ae:	4377      	muls	r7, r6
{
    32b0:	7825      	ldrb	r5, [r4, #0]
	instance->count_node = count_node;
    32b2:	4c17      	ldr	r4, [pc, #92]	; (3310 <ticker_init+0x6c>)
{
    32b4:	9001      	str	r0, [sp, #4]
	instance->node = node;
    32b6:	513a      	str	r2, [r7, r4]
	instance->count_node = count_node;
    32b8:	19e0      	adds	r0, r4, r7
		user_op_ += users[count_user].count_user_op;
    32ba:	2730      	movs	r7, #48	; 0x30
	instance->count_node = count_node;
    32bc:	7201      	strb	r1, [r0, #8]
	instance->user = user;
    32be:	9901      	ldr	r1, [sp, #4]
	instance->count_user = count_user;
    32c0:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    32c2:	6041      	str	r1, [r0, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
    32c4:	990a      	ldr	r1, [sp, #40]	; 0x28
	while (count_user--) {
    32c6:	3b01      	subs	r3, #1
    32c8:	b2db      	uxtb	r3, r3
    32ca:	2bff      	cmp	r3, #255	; 0xff
    32cc:	d113      	bne.n	32f6 <ticker_init+0x52>
		return TICKER_STATUS_FAILURE;
    32ce:	2001      	movs	r0, #1
	if (count_op) {
    32d0:	2d00      	cmp	r5, #0
    32d2:	d10f      	bne.n	32f4 <ticker_init+0x50>
	instance->caller_id_get_cb = caller_id_get_cb;
    32d4:	302b      	adds	r0, #43	; 0x2b
    32d6:	4370      	muls	r0, r6
    32d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    32da:	1820      	adds	r0, r4, r0
    32dc:	6202      	str	r2, [r0, #32]
	instance->sched_cb = sched_cb;
    32de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	instance->ticker_id_head = TICKER_NULL;
    32e0:	7743      	strb	r3, [r0, #29]
	instance->sched_cb = sched_cb;
    32e2:	6242      	str	r2, [r0, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    32e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	instance->ticker_id_slot_previous = TICKER_NULL;
    32e6:	7703      	strb	r3, [r0, #28]
	instance->trigger_set_cb = trigger_set_cb;
    32e8:	6282      	str	r2, [r0, #40]	; 0x28
	instance->ticks_slot_previous = 0;
    32ea:	6185      	str	r5, [r0, #24]
	instance->ticks_current = 0;
    32ec:	6145      	str	r5, [r0, #20]
	instance->ticks_elapsed_first = 0;
    32ee:	7285      	strb	r5, [r0, #10]
	instance->ticks_elapsed_last = 0;
    32f0:	72c5      	strb	r5, [r0, #11]
	return TICKER_STATUS_SUCCESS;
    32f2:	0028      	movs	r0, r5
}
    32f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    32f6:	9801      	ldr	r0, [sp, #4]
    32f8:	00da      	lsls	r2, r3, #3
    32fa:	1882      	adds	r2, r0, r2
		user_op_ += users[count_user].count_user_op;
    32fc:	0038      	movs	r0, r7
		users[count_user].user_op = user_op_;
    32fe:	6051      	str	r1, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    3300:	7812      	ldrb	r2, [r2, #0]
    3302:	4350      	muls	r0, r2
    3304:	4684      	mov	ip, r0
		count_op -= users[count_user].count_user_op;
    3306:	1aad      	subs	r5, r5, r2
		user_op_ += users[count_user].count_user_op;
    3308:	4461      	add	r1, ip
		count_op -= users[count_user].count_user_op;
    330a:	b2ed      	uxtb	r5, r5
    330c:	e7db      	b.n	32c6 <ticker_init+0x22>
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	200001ec 	.word	0x200001ec

00003314 <ticker_trigger>:
	instance = &_instance[instance_index];
    3314:	232c      	movs	r3, #44	; 0x2c
    3316:	4358      	muls	r0, r3
    3318:	4b05      	ldr	r3, [pc, #20]	; (3330 <ticker_trigger+0x1c>)
{
    331a:	b510      	push	{r4, lr}
	instance = &_instance[instance_index];
    331c:	181b      	adds	r3, r3, r0
	if (instance->sched_cb) {
    331e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3320:	2c00      	cmp	r4, #0
    3322:	d003      	beq.n	332c <ticker_trigger+0x18>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3324:	2201      	movs	r2, #1
    3326:	2103      	movs	r1, #3
    3328:	2002      	movs	r0, #2
    332a:	47a0      	blx	r4
}
    332c:	bd10      	pop	{r4, pc}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	200001ec 	.word	0x200001ec

00003334 <ticker_start>:
{
    3334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    3336:	272c      	movs	r7, #44	; 0x2c
    3338:	4378      	muls	r0, r7
    333a:	4f1e      	ldr	r7, [pc, #120]	; (33b4 <ticker_start+0x80>)
{
    333c:	ac0b      	add	r4, sp, #44	; 0x2c
	user = &instance->user[user_id];
    333e:	183f      	adds	r7, r7, r0
{
    3340:	8824      	ldrh	r4, [r4, #0]
	user = &instance->user[user_id];
    3342:	6878      	ldr	r0, [r7, #4]
    3344:	00cd      	lsls	r5, r1, #3
    3346:	1945      	adds	r5, r0, r5
{
    3348:	9401      	str	r4, [sp, #4]
	last = user->last + 1;
    334a:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    334c:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    334e:	1c66      	adds	r6, r4, #1
    3350:	b2f6      	uxtb	r6, r6
		last = 0;
    3352:	4286      	cmp	r6, r0
    3354:	4180      	sbcs	r0, r0
    3356:	4006      	ands	r6, r0
	if (last == user->first) {
    3358:	7868      	ldrb	r0, [r5, #1]
    335a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    335c:	2001      	movs	r0, #1
	if (last == user->first) {
    335e:	45b4      	cmp	ip, r6
    3360:	d026      	beq.n	33b0 <ticker_start+0x7c>
	user_op = &user->user_op[user->last];
    3362:	302f      	adds	r0, #47	; 0x2f
    3364:	4344      	muls	r4, r0
    3366:	6868      	ldr	r0, [r5, #4]
    3368:	1904      	adds	r4, r0, r4
	user_op->params.start.ticks_at_start = ticks_anchor;
    336a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    336c:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_START;
    336e:	2003      	movs	r0, #3
	user_op->params.start.ticks_first = ticks_first;
    3370:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3372:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->id = ticker_id;
    3374:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3376:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    3378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_START;
    337a:	7020      	strb	r0, [r4, #0]
	user_op->params.start.remainder_periodic = remainder_periodic;
    337c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    337e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3380:	0008      	movs	r0, r1
	user_op->params.start.ticks_slot = ticks_slot;
    3382:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3384:	466b      	mov	r3, sp
    3386:	889b      	ldrh	r3, [r3, #4]
    3388:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    338a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    338c:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    338e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3390:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3392:	2302      	movs	r3, #2
    3394:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3398:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    339a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    339c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    339e:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    33a0:	6a3b      	ldr	r3, [r7, #32]
    33a2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    33a4:	4798      	blx	r3
    33a6:	003b      	movs	r3, r7
    33a8:	2200      	movs	r2, #0
    33aa:	2104      	movs	r1, #4
    33ac:	47a8      	blx	r5
	return user_op->status;
    33ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    33b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	200001ec 	.word	0x200001ec

000033b8 <ticker_update>:
{
    33b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    33ba:	262c      	movs	r6, #44	; 0x2c
{
    33bc:	b087      	sub	sp, #28
    33be:	469c      	mov	ip, r3
    33c0:	ab0c      	add	r3, sp, #48	; 0x30
    33c2:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    33c4:	4370      	muls	r0, r6
{
    33c6:	9301      	str	r3, [sp, #4]
    33c8:	ab0d      	add	r3, sp, #52	; 0x34
    33ca:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    33cc:	4e21      	ldr	r6, [pc, #132]	; (3454 <ticker_update+0x9c>)
{
    33ce:	9302      	str	r3, [sp, #8]
    33d0:	ab0e      	add	r3, sp, #56	; 0x38
    33d2:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    33d4:	1836      	adds	r6, r6, r0
{
    33d6:	9303      	str	r3, [sp, #12]
    33d8:	ab0f      	add	r3, sp, #60	; 0x3c
    33da:	881b      	ldrh	r3, [r3, #0]
	user = &instance->user[user_id];
    33dc:	00cd      	lsls	r5, r1, #3
{
    33de:	9304      	str	r3, [sp, #16]
    33e0:	ab10      	add	r3, sp, #64	; 0x40
    33e2:	781b      	ldrb	r3, [r3, #0]
    33e4:	9305      	str	r3, [sp, #20]
	user = &instance->user[user_id];
    33e6:	6873      	ldr	r3, [r6, #4]
    33e8:	195d      	adds	r5, r3, r5
	last = user->last + 1;
    33ea:	78ec      	ldrb	r4, [r5, #3]
	if (last >= user->count_user_op) {
    33ec:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    33ee:	1c63      	adds	r3, r4, #1
    33f0:	b2db      	uxtb	r3, r3
		last = 0;
    33f2:	4283      	cmp	r3, r0
    33f4:	4180      	sbcs	r0, r0
	if (last == user->first) {
    33f6:	786f      	ldrb	r7, [r5, #1]
		last = 0;
    33f8:	4003      	ands	r3, r0
		return TICKER_STATUS_FAILURE;
    33fa:	2001      	movs	r0, #1
	if (last == user->first) {
    33fc:	429f      	cmp	r7, r3
    33fe:	d027      	beq.n	3450 <ticker_update+0x98>
	user_op = &user->user_op[user->last];
    3400:	302f      	adds	r0, #47	; 0x2f
    3402:	4344      	muls	r4, r0
    3404:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3406:	2704      	movs	r7, #4
	user_op = &user->user_op[user->last];
    3408:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    340a:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    340c:	4662      	mov	r2, ip
    340e:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3410:	466a      	mov	r2, sp
    3412:	8892      	ldrh	r2, [r2, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3414:	7027      	strb	r7, [r4, #0]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3416:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    3418:	466a      	mov	r2, sp
    341a:	8912      	ldrh	r2, [r2, #8]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    341c:	0008      	movs	r0, r1
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    341e:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    3420:	466a      	mov	r2, sp
    3422:	8992      	ldrh	r2, [r2, #12]
    3424:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    3426:	466a      	mov	r2, sp
    3428:	8a12      	ldrh	r2, [r2, #16]
    342a:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    342c:	466a      	mov	r2, sp
    342e:	7d12      	ldrb	r2, [r2, #20]
    3430:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    3432:	2202      	movs	r2, #2
    3434:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3436:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3438:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    343a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    343c:	62e2      	str	r2, [r4, #44]	; 0x2c
	user->last = last;
    343e:	70eb      	strb	r3, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3440:	6a33      	ldr	r3, [r6, #32]
    3442:	6a75      	ldr	r5, [r6, #36]	; 0x24
    3444:	4798      	blx	r3
    3446:	0033      	movs	r3, r6
    3448:	2200      	movs	r2, #0
    344a:	0039      	movs	r1, r7
    344c:	47a8      	blx	r5
	return user_op->status;
    344e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3450:	b007      	add	sp, #28
    3452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3454:	200001ec 	.word	0x200001ec

00003458 <ticker_stop>:
{
    3458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    345a:	272c      	movs	r7, #44	; 0x2c
    345c:	4378      	muls	r0, r7
    345e:	4f14      	ldr	r7, [pc, #80]	; (34b0 <ticker_stop+0x58>)
    3460:	00cd      	lsls	r5, r1, #3
    3462:	183f      	adds	r7, r7, r0
    3464:	6878      	ldr	r0, [r7, #4]
    3466:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    3468:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    346a:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    346c:	1c46      	adds	r6, r0, #1
    346e:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    3470:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    3472:	b2f6      	uxtb	r6, r6
		last = 0;
    3474:	4286      	cmp	r6, r0
    3476:	4180      	sbcs	r0, r0
    3478:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    347a:	2001      	movs	r0, #1
	if (last == user->first) {
    347c:	42b4      	cmp	r4, r6
    347e:	d016      	beq.n	34ae <ticker_stop+0x56>
	user_op = &user->user_op[user->last];
    3480:	4660      	mov	r0, ip
    3482:	2430      	movs	r4, #48	; 0x30
    3484:	4344      	muls	r4, r0
    3486:	6868      	ldr	r0, [r5, #4]
    3488:	1904      	adds	r4, r0, r4
	user_op->id = ticker_id;
    348a:	7062      	strb	r2, [r4, #1]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    348c:	2005      	movs	r0, #5
	user_op->status = TICKER_STATUS_BUSY;
    348e:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    3490:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3492:	9b06      	ldr	r3, [sp, #24]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3494:	7020      	strb	r0, [r4, #0]
	user_op->status = TICKER_STATUS_BUSY;
    3496:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3498:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    349a:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    349c:	0008      	movs	r0, r1
    349e:	6a3b      	ldr	r3, [r7, #32]
    34a0:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    34a2:	4798      	blx	r3
    34a4:	003b      	movs	r3, r7
    34a6:	2200      	movs	r2, #0
    34a8:	2104      	movs	r1, #4
    34aa:	47a8      	blx	r5
	return user_op->status;
    34ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    34ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34b0:	200001ec 	.word	0x200001ec

000034b4 <ticker_next_slot_get>:
{
    34b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    34b6:	272c      	movs	r7, #44	; 0x2c
    34b8:	4378      	muls	r0, r7
    34ba:	4f18      	ldr	r7, [pc, #96]	; (351c <ticker_next_slot_get+0x68>)
    34bc:	00cd      	lsls	r5, r1, #3
    34be:	183f      	adds	r7, r7, r0
    34c0:	6878      	ldr	r0, [r7, #4]
{
    34c2:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    34c4:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    34c6:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    34c8:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    34ca:	1c46      	adds	r6, r0, #1
    34cc:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    34ce:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    34d0:	b2f6      	uxtb	r6, r6
		last = 0;
    34d2:	4286      	cmp	r6, r0
    34d4:	4180      	sbcs	r0, r0
    34d6:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    34d8:	2001      	movs	r0, #1
	if (last == user->first) {
    34da:	42b4      	cmp	r4, r6
    34dc:	d01c      	beq.n	3518 <ticker_next_slot_get+0x64>
	user_op = &user->user_op[user->last];
    34de:	4660      	mov	r0, ip
    34e0:	2430      	movs	r4, #48	; 0x30
	user_op->id = TICKER_NULL;
    34e2:	23ff      	movs	r3, #255	; 0xff
	user_op = &user->user_op[user->last];
    34e4:	4344      	muls	r4, r0
    34e6:	6868      	ldr	r0, [r5, #4]
    34e8:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    34ea:	2002      	movs	r0, #2
	user_op->id = TICKER_NULL;
    34ec:	7063      	strb	r3, [r4, #1]
	user_op->params.slot_get.ticks_current = ticks_current;
    34ee:	9b01      	ldr	r3, [sp, #4]
	user_op->params.slot_get.ticker_id = ticker_id;
    34f0:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    34f2:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    34f4:	9b08      	ldr	r3, [sp, #32]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    34f6:	7020      	strb	r0, [r4, #0]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    34f8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    34fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
    34fc:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    34fe:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3502:	0008      	movs	r0, r1
	user_op->op_context = op_context;
    3504:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3506:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3508:	6a3b      	ldr	r3, [r7, #32]
    350a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    350c:	4798      	blx	r3
    350e:	003b      	movs	r3, r7
    3510:	2200      	movs	r2, #0
    3512:	2104      	movs	r1, #4
    3514:	47a8      	blx	r5
	return user_op->status;
    3516:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	200001ec 	.word	0x200001ec

00003520 <ticker_job_idle_get>:
{
    3520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
    3522:	272c      	movs	r7, #44	; 0x2c
    3524:	4378      	muls	r0, r7
    3526:	4f15      	ldr	r7, [pc, #84]	; (357c <ticker_job_idle_get+0x5c>)
    3528:	00cd      	lsls	r5, r1, #3
    352a:	183f      	adds	r7, r7, r0
    352c:	6878      	ldr	r0, [r7, #4]
{
    352e:	9301      	str	r3, [sp, #4]
	user = &instance->user[user_id];
    3530:	1945      	adds	r5, r0, r5
	last = user->last + 1;
    3532:	78e8      	ldrb	r0, [r5, #3]
	if (last == user->first) {
    3534:	786c      	ldrb	r4, [r5, #1]
	last = user->last + 1;
    3536:	1c46      	adds	r6, r0, #1
    3538:	4684      	mov	ip, r0
	if (last >= user->count_user_op) {
    353a:	7828      	ldrb	r0, [r5, #0]
	last = user->last + 1;
    353c:	b2f6      	uxtb	r6, r6
		last = 0;
    353e:	4286      	cmp	r6, r0
    3540:	4180      	sbcs	r0, r0
    3542:	4006      	ands	r6, r0
		return TICKER_STATUS_FAILURE;
    3544:	2001      	movs	r0, #1
	if (last == user->first) {
    3546:	42b4      	cmp	r4, r6
    3548:	d016      	beq.n	3578 <ticker_job_idle_get+0x58>
	user_op = &user->user_op[user->last];
    354a:	4663      	mov	r3, ip
    354c:	2430      	movs	r4, #48	; 0x30
    354e:	435c      	muls	r4, r3
    3550:	686b      	ldr	r3, [r5, #4]
    3552:	191c      	adds	r4, r3, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3554:	7020      	strb	r0, [r4, #0]
	user_op->op_context = op_context;
    3556:	9b01      	ldr	r3, [sp, #4]
	user_op->id = TICKER_NULL;
    3558:	30fe      	adds	r0, #254	; 0xfe
    355a:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    355c:	38fd      	subs	r0, #253	; 0xfd
    355e:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3560:	62a2      	str	r2, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3562:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3564:	70ee      	strb	r6, [r5, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3566:	0008      	movs	r0, r1
    3568:	6a3b      	ldr	r3, [r7, #32]
    356a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    356c:	4798      	blx	r3
    356e:	003b      	movs	r3, r7
    3570:	2200      	movs	r2, #0
    3572:	2104      	movs	r1, #4
    3574:	47a8      	blx	r5
	return user_op->status;
    3576:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3578:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	200001ec 	.word	0x200001ec

00003580 <ticker_job_sched>:
{
    3580:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3582:	242c      	movs	r4, #44	; 0x2c
    3584:	4360      	muls	r0, r4
    3586:	4c05      	ldr	r4, [pc, #20]	; (359c <ticker_job_sched+0x1c>)
    3588:	1824      	adds	r4, r4, r0
    358a:	6a23      	ldr	r3, [r4, #32]
    358c:	0008      	movs	r0, r1
    358e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3590:	4798      	blx	r3
    3592:	0023      	movs	r3, r4
    3594:	2200      	movs	r2, #0
    3596:	2104      	movs	r1, #4
    3598:	47a8      	blx	r5
}
    359a:	bd70      	pop	{r4, r5, r6, pc}
    359c:	200001ec 	.word	0x200001ec

000035a0 <ticker_ticks_now_get>:
{
    35a0:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    35a2:	f005 f93f 	bl	8824 <cntr_cnt_get>
}
    35a6:	bd10      	pop	{r4, pc}

000035a8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    35a8:	1a40      	subs	r0, r0, r1
    35aa:	0200      	lsls	r0, r0, #8
    35ac:	0a00      	lsrs	r0, r0, #8
}
    35ae:	4770      	bx	lr

000035b0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    35b0:	0002      	movs	r2, r0
    35b2:	b510      	push	{r4, lr}
    35b4:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
    35b6:	2300      	movs	r3, #0
	if (addr_type > 1) {
    35b8:	2a01      	cmp	r2, #1
    35ba:	d80b      	bhi.n	35d4 <ll_addr_get+0x24>
    35bc:	4c06      	ldr	r4, [pc, #24]	; (35d8 <ll_addr_get+0x28>)
	}

	if (addr_type) {
    35be:	429a      	cmp	r2, r3
    35c0:	d100      	bne.n	35c4 <ll_addr_get+0x14>
    35c2:	4c06      	ldr	r4, [pc, #24]	; (35dc <ll_addr_get+0x2c>)

	if (bdaddr) {
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    35c4:	0023      	movs	r3, r4
	if (bdaddr) {
    35c6:	2800      	cmp	r0, #0
    35c8:	d004      	beq.n	35d4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    35ca:	2206      	movs	r2, #6
    35cc:	0021      	movs	r1, r4
    35ce:	f7fd f84b 	bl	668 <memcpy>
	return pub_addr;
    35d2:	0023      	movs	r3, r4
}
    35d4:	0018      	movs	r0, r3
    35d6:	bd10      	pop	{r4, pc}
    35d8:	2000024a 	.word	0x2000024a
    35dc:	20000244 	.word	0x20000244

000035e0 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	0006      	movs	r6, r0
    35e4:	000d      	movs	r5, r1
	if (ll_adv_is_enabled() ||
    35e6:	f004 fa65 	bl	7ab4 <ll_adv_is_enabled>
    35ea:	1e04      	subs	r4, r0, #0
    35ec:	d002      	beq.n	35f4 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    35ee:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    35f0:	0020      	movs	r0, r4
    35f2:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    35f4:	f004 fa72 	bl	7adc <ll_scan_is_enabled>
    35f8:	2206      	movs	r2, #6
	if (ll_adv_is_enabled() ||
    35fa:	4210      	tst	r0, r2
    35fc:	d1f7      	bne.n	35ee <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    35fe:	0029      	movs	r1, r5
    3600:	4803      	ldr	r0, [pc, #12]	; (3610 <ll_addr_set+0x30>)
	if (addr_type) {
    3602:	2e00      	cmp	r6, #0
    3604:	d100      	bne.n	3608 <ll_addr_set+0x28>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    3606:	4803      	ldr	r0, [pc, #12]	; (3614 <ll_addr_set+0x34>)
    3608:	f7fd f82e 	bl	668 <memcpy>
    360c:	e7f0      	b.n	35f0 <ll_addr_set+0x10>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	2000024a 	.word	0x2000024a
    3614:	20000244 	.word	0x20000244

00003618 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    3618:	2300      	movs	r3, #0
    361a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    361c:	700b      	strb	r3, [r1, #0]
}
    361e:	4770      	bx	lr

00003620 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    3620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    3622:	2701      	movs	r7, #1
    3624:	0006      	movs	r6, r0
    3626:	000c      	movs	r4, r1
    3628:	427f      	negs	r7, r7
	while (len) {
    362a:	2c00      	cmp	r4, #0
    362c:	d101      	bne.n	3632 <bt_rand+0x12>
			cpu_sleep();
		}
	}

	return 0;
}
    362e:	2000      	movs	r0, #0
    3630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3632:	4d09      	ldr	r5, [pc, #36]	; (3658 <bt_rand+0x38>)
    3634:	0039      	movs	r1, r7
    3636:	0028      	movs	r0, r5
    3638:	f006 f904 	bl	9844 <_impl_k_mutex_lock>
		len = rand_get(len, buf);
    363c:	0020      	movs	r0, r4
    363e:	0031      	movs	r1, r6
    3640:	f005 f9d2 	bl	89e8 <rand_get>
    3644:	0004      	movs	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    3646:	0028      	movs	r0, r5
    3648:	f006 f95e 	bl	9908 <_impl_k_mutex_unlock>
		if (len) {
    364c:	2c00      	cmp	r4, #0
    364e:	d0ee      	beq.n	362e <bt_rand+0xe>
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    3650:	bf20      	wfe
	__SEV();
    3652:	bf40      	sev
	__WFE();
    3654:	bf20      	wfe
    3656:	e7e8      	b.n	362a <bt_rand+0xa>
    3658:	200024b8 	.word	0x200024b8

0000365c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    365c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    365e:	4802      	ldr	r0, [pc, #8]	; (3668 <_hci_driver_init+0xc>)
    3660:	f7fe ffd2 	bl	2608 <bt_hci_driver_register>

	return 0;
}
    3664:	2000      	movs	r0, #0
    3666:	bd10      	pop	{r4, pc}
    3668:	0000af64 	.word	0x0000af64

0000366c <hci_driver_send>:
{
    366c:	b510      	push	{r4, lr}
	if (!buf->len) {
    366e:	8983      	ldrh	r3, [r0, #12]
{
    3670:	0004      	movs	r4, r0
	if (!buf->len) {
    3672:	2b00      	cmp	r3, #0
    3674:	d00d      	beq.n	3692 <hci_driver_send+0x26>
	switch (type) {
    3676:	7d03      	ldrb	r3, [r0, #20]
    3678:	2b00      	cmp	r3, #0
    367a:	d10a      	bne.n	3692 <hci_driver_send+0x26>
	evt = hci_cmd_handle(buf);
    367c:	f000 f978 	bl	3970 <hci_cmd_handle>
	if (evt) {
    3680:	2800      	cmp	r0, #0
    3682:	d001      	beq.n	3688 <hci_driver_send+0x1c>
		bt_recv_prio(evt);
    3684:	f7fe ff7c 	bl	2580 <bt_recv_prio>
		net_buf_unref(buf);
    3688:	0020      	movs	r0, r4
    368a:	f005 fed5 	bl	9438 <net_buf_unref>
	return err;
    368e:	2000      	movs	r0, #0
}
    3690:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3692:	2016      	movs	r0, #22
    3694:	4240      	negs	r0, r0
    3696:	e7fb      	b.n	3690 <hci_driver_send+0x24>

00003698 <recv_thread>:
{
    3698:	b537      	push	{r0, r1, r2, r4, r5, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    369a:	2501      	movs	r5, #1
    369c:	426d      	negs	r5, r5
    369e:	0029      	movs	r1, r5
    36a0:	4819      	ldr	r0, [pc, #100]	; (3708 <recv_thread+0x70>)
    36a2:	f006 f9fb 	bl	9a9c <k_queue_get>
    36a6:	1e04      	subs	r4, r0, #0
		if (node_rx && !buf) {
    36a8:	d025      	beq.n	36f6 <recv_thread+0x5e>
	s8_t class = hci_get_class(node_rx);
    36aa:	f000 fd03 	bl	40b4 <hci_get_class>
	switch (class) {
    36ae:	b2c3      	uxtb	r3, r0
    36b0:	9401      	str	r4, [sp, #4]
    36b2:	2b02      	cmp	r3, #2
    36b4:	d822      	bhi.n	36fc <recv_thread+0x64>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    36b6:	2100      	movs	r1, #0
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    36b8:	2801      	cmp	r0, #1
    36ba:	d001      	beq.n	36c0 <recv_thread+0x28>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    36bc:	0029      	movs	r1, r5
    36be:	2001      	movs	r0, #1
    36c0:	f7fe ffb8 	bl	2634 <bt_buf_get_rx>
    36c4:	1e04      	subs	r4, r0, #0
		if (buf) {
    36c6:	d003      	beq.n	36d0 <recv_thread+0x38>
			hci_evt_encode(node_rx, buf);
    36c8:	0001      	movs	r1, r0
    36ca:	9801      	ldr	r0, [sp, #4]
    36cc:	f000 fc1e 	bl	3f0c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    36d0:	9b01      	ldr	r3, [sp, #4]
    36d2:	2100      	movs	r1, #0
    36d4:	88d8      	ldrh	r0, [r3, #6]
    36d6:	f004 facf 	bl	7c78 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    36da:	2200      	movs	r2, #0
    36dc:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    36de:	a801      	add	r0, sp, #4
	node_rx->hdr.onion.next = 0;
    36e0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    36e2:	f004 fa65 	bl	7bb0 <ll_rx_mem_release>
		if (buf) {
    36e6:	2c00      	cmp	r4, #0
    36e8:	d005      	beq.n	36f6 <recv_thread+0x5e>
			if (buf->len) {
    36ea:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    36ec:	0020      	movs	r0, r4
			if (buf->len) {
    36ee:	2b00      	cmp	r3, #0
    36f0:	d007      	beq.n	3702 <recv_thread+0x6a>
				bt_recv(buf);
    36f2:	f7fe fe97 	bl	2424 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    36f6:	f006 fb6f 	bl	9dd8 <_impl_k_yield>
    36fa:	e7d0      	b.n	369e <recv_thread+0x6>
		LL_ASSERT(0);
    36fc:	b662      	cpsie	i
    36fe:	2004      	movs	r0, #4
    3700:	df02      	svc	2
				net_buf_unref(buf);
    3702:	f005 fe99 	bl	9438 <net_buf_unref>
    3706:	e7f6      	b.n	36f6 <recv_thread+0x5e>
    3708:	200024cc 	.word	0x200024cc

0000370c <prio_recv_thread>:
{
    370c:	b513      	push	{r0, r1, r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    370e:	2401      	movs	r4, #1
    3710:	4264      	negs	r4, r4
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    3712:	466b      	mov	r3, sp
    3714:	a801      	add	r0, sp, #4
    3716:	1c99      	adds	r1, r3, #2
    3718:	f004 fa10 	bl	7b3c <ll_rx_get>
    371c:	2800      	cmp	r0, #0
    371e:	d1f8      	bne.n	3712 <prio_recv_thread+0x6>
		if (node_rx) {
    3720:	9b01      	ldr	r3, [sp, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d006      	beq.n	3734 <prio_recv_thread+0x28>
			ll_rx_dequeue();
    3726:	f004 fc85 	bl	8034 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    372a:	9901      	ldr	r1, [sp, #4]
    372c:	4804      	ldr	r0, [pc, #16]	; (3740 <prio_recv_thread+0x34>)
    372e:	f006 f98e 	bl	9a4e <k_queue_append>
    3732:	e7ee      	b.n	3712 <prio_recv_thread+0x6>
    3734:	0021      	movs	r1, r4
    3736:	4803      	ldr	r0, [pc, #12]	; (3744 <prio_recv_thread+0x38>)
    3738:	f006 fc28 	bl	9f8c <_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    373c:	e7e9      	b.n	3712 <prio_recv_thread+0x6>
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	200024cc 	.word	0x200024cc
    3744:	200024a0 	.word	0x200024a0

00003748 <hci_driver_open>:
{
    3748:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    374a:	4814      	ldr	r0, [pc, #80]	; (379c <hci_driver_open+0x54>)
{
    374c:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    374e:	f004 fd15 	bl	817c <ll_init>
    3752:	1e04      	subs	r4, r0, #0
	if (err) {
    3754:	d11f      	bne.n	3796 <hci_driver_open+0x4e>
	hci_init(NULL);
    3756:	f000 fccd 	bl	40f4 <hci_init>

    375a:	230a      	movs	r3, #10
    375c:	22e0      	movs	r2, #224	; 0xe0
    375e:	425b      	negs	r3, r3
    3760:	9303      	str	r3, [sp, #12]
    3762:	0052      	lsls	r2, r2, #1
    3764:	4b0e      	ldr	r3, [pc, #56]	; (37a0 <hci_driver_open+0x58>)
    3766:	490f      	ldr	r1, [pc, #60]	; (37a4 <hci_driver_open+0x5c>)
    3768:	9405      	str	r4, [sp, #20]
    376a:	9404      	str	r4, [sp, #16]
    376c:	9402      	str	r4, [sp, #8]
    376e:	9401      	str	r4, [sp, #4]
    3770:	9400      	str	r4, [sp, #0]
    3772:	480d      	ldr	r0, [pc, #52]	; (37a8 <hci_driver_open+0x60>)
    3774:	f006 fdda 	bl	a32c <_impl_k_thread_create>
    3778:	2308      	movs	r3, #8
    377a:	2280      	movs	r2, #128	; 0x80
    377c:	425b      	negs	r3, r3
    377e:	9303      	str	r3, [sp, #12]
    3780:	9405      	str	r4, [sp, #20]
    3782:	9404      	str	r4, [sp, #16]
    3784:	9402      	str	r4, [sp, #8]
    3786:	9401      	str	r4, [sp, #4]
    3788:	9400      	str	r4, [sp, #0]
    378a:	4b08      	ldr	r3, [pc, #32]	; (37ac <hci_driver_open+0x64>)
    378c:	00d2      	lsls	r2, r2, #3
    378e:	4908      	ldr	r1, [pc, #32]	; (37b0 <hci_driver_open+0x68>)
    3790:	4808      	ldr	r0, [pc, #32]	; (37b4 <hci_driver_open+0x6c>)
    3792:	f006 fdcb 	bl	a32c <_impl_k_thread_create>
}
    3796:	0020      	movs	r0, r4
    3798:	b006      	add	sp, #24
    379a:	bd10      	pop	{r4, pc}
    379c:	200024a0 	.word	0x200024a0
    37a0:	0000370d 	.word	0x0000370d
    37a4:	20001010 	.word	0x20001010
    37a8:	20000d34 	.word	0x20000d34
    37ac:	00003699 	.word	0x00003699
    37b0:	200011d0 	.word	0x200011d0
    37b4:	20000cd4 	.word	0x20000cd4

000037b8 <sys_put_le32>:
	dst[1] = val >> 8;
    37b8:	0a03      	lsrs	r3, r0, #8
	dst[0] = val;
    37ba:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    37bc:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    37be:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    37c0:	0a00      	lsrs	r0, r0, #8
    37c2:	704b      	strb	r3, [r1, #1]
    37c4:	70c8      	strb	r0, [r1, #3]
}
    37c6:	4770      	bx	lr

000037c8 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    37c8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    37ca:	3008      	adds	r0, #8
{
    37cc:	000d      	movs	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    37ce:	2102      	movs	r1, #2
{
    37d0:	0014      	movs	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    37d2:	f005 fe67 	bl	94a4 <net_buf_simple_add>
	hdr->evt = evt;
    37d6:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    37d8:	7044      	strb	r4, [r0, #1]
}
    37da:	bd70      	pop	{r4, r5, r6, pc}

000037dc <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    37dc:	b570      	push	{r4, r5, r6, lr}
    37de:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    37e0:	2001      	movs	r0, #1
{
    37e2:	000d      	movs	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    37e4:	4240      	negs	r0, r0
    37e6:	f7fe ff35 	bl	2654 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    37ea:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    37ec:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    37ee:	b2d2      	uxtb	r2, r2
    37f0:	210e      	movs	r1, #14
    37f2:	f7ff ffe9 	bl	37c8 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    37f6:	6820      	ldr	r0, [r4, #0]
    37f8:	2103      	movs	r1, #3
    37fa:	3008      	adds	r0, #8
    37fc:	f005 fe52 	bl	94a4 <net_buf_simple_add>
	cc->ncmd = 1;
    3800:	2301      	movs	r3, #1
    3802:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    3804:	4b05      	ldr	r3, [pc, #20]	; (381c <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    3806:	0029      	movs	r1, r5
	cc->opcode = sys_cpu_to_le16(_opcode);
    3808:	781a      	ldrb	r2, [r3, #0]
    380a:	785b      	ldrb	r3, [r3, #1]
    380c:	7042      	strb	r2, [r0, #1]
    380e:	7083      	strb	r3, [r0, #2]
	return net_buf_add(*buf, plen);
    3810:	6820      	ldr	r0, [r4, #0]
    3812:	3008      	adds	r0, #8
    3814:	f005 fe46 	bl	94a4 <net_buf_simple_add>
}
    3818:	bd70      	pop	{r4, r5, r6, pc}
    381a:	46c0      	nop			; (mov r8, r8)
    381c:	20000250 	.word	0x20000250

00003820 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	0004      	movs	r4, r0
    3824:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3826:	3201      	adds	r2, #1
{
    3828:	000e      	movs	r6, r1
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    382a:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    382c:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    382e:	213e      	movs	r1, #62	; 0x3e
    3830:	f7ff ffca 	bl	37c8 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    3834:	2101      	movs	r1, #1
    3836:	0020      	movs	r0, r4
    3838:	f005 fe34 	bl	94a4 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    383c:	0029      	movs	r1, r5
	me->subevent = subevt;
    383e:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    3840:	0020      	movs	r0, r4
    3842:	f005 fe2f 	bl	94a4 <net_buf_simple_add>
}
    3846:	bd70      	pop	{r4, r5, r6, pc}

00003848 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    3848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    384a:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    384c:	4a10      	ldr	r2, [pc, #64]	; (3890 <le_remote_feat_complete+0x48>)
{
    384e:	0007      	movs	r7, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3850:	6852      	ldr	r2, [r2, #4]
{
    3852:	000e      	movs	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3854:	0092      	lsls	r2, r2, #2
    3856:	d514      	bpl.n	3882 <le_remote_feat_complete+0x3a>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    3858:	2508      	movs	r5, #8
    385a:	4a0e      	ldr	r2, [pc, #56]	; (3894 <le_remote_feat_complete+0x4c>)
    385c:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    385e:	422a      	tst	r2, r5
    3860:	d00f      	beq.n	3882 <le_remote_feat_complete+0x3a>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3862:	220b      	movs	r2, #11
    3864:	2104      	movs	r1, #4
    3866:	0018      	movs	r0, r3
    3868:	f7ff ffda 	bl	3820 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    386c:	7044      	strb	r4, [r0, #1]
    386e:	40ec      	lsrs	r4, r5
	sep->status = status;
    3870:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3872:	7084      	strb	r4, [r0, #2]
    3874:	3003      	adds	r0, #3
	if (!status) {
    3876:	2f00      	cmp	r7, #0
    3878:	d104      	bne.n	3884 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->llctrl.feature_rsp.features[0],
    387a:	1d31      	adds	r1, r6, #4
		memcpy(&sep->features[0],
    387c:	002a      	movs	r2, r5
    387e:	f7fc fef3 	bl	668 <memcpy>
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3884:	002a      	movs	r2, r5
    3886:	2100      	movs	r1, #0
    3888:	f7fc ff18 	bl	6bc <memset>
    388c:	e7f9      	b.n	3882 <le_remote_feat_complete+0x3a>
    388e:	46c0      	nop			; (mov r8, r8)
    3890:	200022a8 	.word	0x200022a8
    3894:	200022b0 	.word	0x200022b0

00003898 <bt_addr_le_to_str.constprop.42>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3898:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    389a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    389c:	b08a      	sub	sp, #40	; 0x28
    389e:	0004      	movs	r4, r0
    38a0:	000e      	movs	r6, r1
    38a2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    38a4:	2b03      	cmp	r3, #3
    38a6:	d821      	bhi.n	38ec <bt_addr_le_to_str.constprop.42+0x54>
    38a8:	0018      	movs	r0, r3
    38aa:	f7fc fc6f 	bl	18c <__gnu_thumb1_case_uqi>
    38ae:	1902      	.short	0x1902
    38b0:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    38b2:	4911      	ldr	r1, [pc, #68]	; (38f8 <bt_addr_le_to_str.constprop.42+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    38b4:	0028      	movs	r0, r5
    38b6:	f7fc feaf 	bl	618 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    38ba:	7862      	ldrb	r2, [r4, #1]
    38bc:	79a3      	ldrb	r3, [r4, #6]
    38be:	9204      	str	r2, [sp, #16]
    38c0:	78a2      	ldrb	r2, [r4, #2]
    38c2:	9505      	str	r5, [sp, #20]
    38c4:	9203      	str	r2, [sp, #12]
    38c6:	78e2      	ldrb	r2, [r4, #3]
    38c8:	211b      	movs	r1, #27
    38ca:	9202      	str	r2, [sp, #8]
    38cc:	7922      	ldrb	r2, [r4, #4]
    38ce:	0030      	movs	r0, r6
    38d0:	9201      	str	r2, [sp, #4]
    38d2:	7962      	ldrb	r2, [r4, #5]
    38d4:	9200      	str	r2, [sp, #0]
    38d6:	4a09      	ldr	r2, [pc, #36]	; (38fc <bt_addr_le_to_str.constprop.42+0x64>)
    38d8:	f7fd fb8a 	bl	ff0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    38dc:	b00a      	add	sp, #40	; 0x28
    38de:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    38e0:	4907      	ldr	r1, [pc, #28]	; (3900 <bt_addr_le_to_str.constprop.42+0x68>)
    38e2:	e7e7      	b.n	38b4 <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "public id");
    38e4:	4907      	ldr	r1, [pc, #28]	; (3904 <bt_addr_le_to_str.constprop.42+0x6c>)
    38e6:	e7e5      	b.n	38b4 <bt_addr_le_to_str.constprop.42+0x1c>
		strcpy(type, "random id");
    38e8:	4907      	ldr	r1, [pc, #28]	; (3908 <bt_addr_le_to_str.constprop.42+0x70>)
    38ea:	e7e3      	b.n	38b4 <bt_addr_le_to_str.constprop.42+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    38ec:	4a07      	ldr	r2, [pc, #28]	; (390c <bt_addr_le_to_str.constprop.42+0x74>)
    38ee:	210a      	movs	r1, #10
    38f0:	0028      	movs	r0, r5
    38f2:	f7fd fb7d 	bl	ff0 <snprintk>
    38f6:	e7e0      	b.n	38ba <bt_addr_le_to_str.constprop.42+0x22>
    38f8:	0000af7f 	.word	0x0000af7f
    38fc:	0000afa8 	.word	0x0000afa8
    3900:	0000af86 	.word	0x0000af86
    3904:	0000af8d 	.word	0x0000af8d
    3908:	0000af97 	.word	0x0000af97
    390c:	0000afa1 	.word	0x0000afa1

00003910 <le_adv_ext_report.isra.37.part.38>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3910:	b510      	push	{r4, lr}
		if (!p->ext_hdr_len) {
    3912:	7883      	ldrb	r3, [r0, #2]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3914:	b08a      	sub	sp, #40	; 0x28
		if (!p->ext_hdr_len) {
    3916:	069b      	lsls	r3, r3, #26
    3918:	d011      	beq.n	393e <le_adv_ext_report.isra.37.part.38+0x2e>
		if (h->adv_addr) {
    391a:	78c3      	ldrb	r3, [r0, #3]
    391c:	07db      	lsls	r3, r3, #31
    391e:	d50e      	bpl.n	393e <le_adv_ext_report.isra.37.part.38+0x2e>
			addr.type = adv->tx_addr;
    3920:	7803      	ldrb	r3, [r0, #0]
    3922:	ac01      	add	r4, sp, #4
    3924:	065b      	lsls	r3, r3, #25
    3926:	0fdb      	lsrs	r3, r3, #31
    3928:	7023      	strb	r3, [r4, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    392a:	466b      	mov	r3, sp
		ptr = (u8_t *)h + sizeof(*h);
    392c:	1d01      	adds	r1, r0, #4
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    392e:	2206      	movs	r2, #6
    3930:	1d58      	adds	r0, r3, #5
    3932:	f7fc fe99 	bl	668 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3936:	a903      	add	r1, sp, #12
    3938:	0020      	movs	r0, r4
    393a:	f7ff ffad 	bl	3898 <bt_addr_le_to_str.constprop.42>
}
    393e:	b00a      	add	sp, #40	; 0x28
    3940:	bd10      	pop	{r4, pc}

00003942 <sys_get_le64>:
{
    3942:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3944:	785a      	ldrb	r2, [r3, #1]
    3946:	7800      	ldrb	r0, [r0, #0]
    3948:	0212      	lsls	r2, r2, #8
    394a:	4302      	orrs	r2, r0
    394c:	7898      	ldrb	r0, [r3, #2]
    394e:	7919      	ldrb	r1, [r3, #4]
    3950:	0400      	lsls	r0, r0, #16
    3952:	4302      	orrs	r2, r0
    3954:	78d8      	ldrb	r0, [r3, #3]
    3956:	0600      	lsls	r0, r0, #24
    3958:	4310      	orrs	r0, r2
    395a:	795a      	ldrb	r2, [r3, #5]
    395c:	0212      	lsls	r2, r2, #8
    395e:	430a      	orrs	r2, r1
    3960:	7999      	ldrb	r1, [r3, #6]
    3962:	0409      	lsls	r1, r1, #16
    3964:	430a      	orrs	r2, r1
    3966:	79d9      	ldrb	r1, [r3, #7]
    3968:	0609      	lsls	r1, r1, #24
    396a:	4311      	orrs	r1, r2
}
    396c:	4770      	bx	lr
	...

00003970 <hci_cmd_handle>:
{
    3970:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *evt = NULL;
    3972:	2600      	movs	r6, #0
{
    3974:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    3976:	960d      	str	r6, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    3978:	8981      	ldrh	r1, [r0, #12]
{
    397a:	0005      	movs	r5, r0
	if (cmd->len < sizeof(*chdr)) {
    397c:	2902      	cmp	r1, #2
    397e:	d802      	bhi.n	3986 <hci_cmd_handle+0x16>
		return NULL;
    3980:	2000      	movs	r0, #0
}
    3982:	b019      	add	sp, #100	; 0x64
    3984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    3986:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3988:	4cc0      	ldr	r4, [pc, #768]	; (3c8c <hci_cmd_handle+0x31c>)
    398a:	7853      	ldrb	r3, [r2, #1]
    398c:	7810      	ldrb	r0, [r2, #0]
    398e:	021b      	lsls	r3, r3, #8
    3990:	4303      	orrs	r3, r0
    3992:	8023      	strh	r3, [r4, #0]
	if (cmd->len < chdr->param_len) {
    3994:	7893      	ldrb	r3, [r2, #2]
    3996:	428b      	cmp	r3, r1
    3998:	d8f2      	bhi.n	3980 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    399a:	0028      	movs	r0, r5
    399c:	2103      	movs	r1, #3
    399e:	3008      	adds	r0, #8
    39a0:	f005 fd91 	bl	94c6 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    39a4:	8823      	ldrh	r3, [r4, #0]
    39a6:	059c      	lsls	r4, r3, #22
    39a8:	0da4      	lsrs	r4, r4, #22
	switch (BT_OGF(_opcode)) {
    39aa:	0a9b      	lsrs	r3, r3, #10
    39ac:	2b04      	cmp	r3, #4
    39ae:	d059      	beq.n	3a64 <hci_cmd_handle+0xf4>
    39b0:	d807      	bhi.n	39c2 <hci_cmd_handle+0x52>
    39b2:	2b03      	cmp	r3, #3
    39b4:	d019      	beq.n	39ea <hci_cmd_handle+0x7a>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    39b6:	2101      	movs	r1, #1
    39b8:	a80d      	add	r0, sp, #52	; 0x34
    39ba:	f7ff ff0f 	bl	37dc <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    39be:	2301      	movs	r3, #1
    39c0:	e0da      	b.n	3b78 <hci_cmd_handle+0x208>
	switch (BT_OGF(_opcode)) {
    39c2:	2b08      	cmp	r3, #8
    39c4:	d100      	bne.n	39c8 <hci_cmd_handle+0x58>
    39c6:	e0bd      	b.n	3b44 <hci_cmd_handle+0x1d4>
    39c8:	2b3f      	cmp	r3, #63	; 0x3f
    39ca:	d1f4      	bne.n	39b6 <hci_cmd_handle+0x46>
	switch (ocf) {
    39cc:	1e60      	subs	r0, r4, #1
    39ce:	2809      	cmp	r0, #9
    39d0:	d8f1      	bhi.n	39b6 <hci_cmd_handle+0x46>
    39d2:	f7fc fbe5 	bl	1a0 <__gnu_thumb1_case_shi>
    39d6:	01ad      	.short	0x01ad
    39d8:	01d801c3 	.word	0x01d801c3
    39dc:	fff0fff0 	.word	0xfff0fff0
    39e0:	fff001f1 	.word	0xfff001f1
    39e4:	01f601e3 	.word	0x01f601e3
    39e8:	0228      	.short	0x0228
	switch (ocf) {
    39ea:	2c03      	cmp	r4, #3
    39ec:	d013      	beq.n	3a16 <hci_cmd_handle+0xa6>
    39ee:	d808      	bhi.n	3a02 <hci_cmd_handle+0x92>
    39f0:	2c01      	cmp	r4, #1
    39f2:	d1e0      	bne.n	39b6 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    39f4:	68a8      	ldr	r0, [r5, #8]
    39f6:	f7ff ffa4 	bl	3942 <sys_get_le64>
    39fa:	4ba5      	ldr	r3, [pc, #660]	; (3c90 <hci_cmd_handle+0x320>)
    39fc:	6018      	str	r0, [r3, #0]
    39fe:	6059      	str	r1, [r3, #4]
    3a00:	e003      	b.n	3a0a <hci_cmd_handle+0x9a>
	switch (ocf) {
    3a02:	2c2d      	cmp	r4, #45	; 0x2d
    3a04:	d015      	beq.n	3a32 <hci_cmd_handle+0xc2>
    3a06:	2c63      	cmp	r4, #99	; 0x63
    3a08:	d1d5      	bne.n	39b6 <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3a0a:	2101      	movs	r1, #1
    3a0c:	a80d      	add	r0, sp, #52	; 0x34
    3a0e:	f7ff fee5 	bl	37dc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3a12:	7006      	strb	r6, [r0, #0]
    3a14:	e024      	b.n	3a60 <hci_cmd_handle+0xf0>
	event_mask = DEFAULT_EVENT_MASK;
    3a16:	2001      	movs	r0, #1
    3a18:	499e      	ldr	r1, [pc, #632]	; (3c94 <hci_cmd_handle+0x324>)
    3a1a:	4b9d      	ldr	r3, [pc, #628]	; (3c90 <hci_cmd_handle+0x320>)
    3a1c:	4240      	negs	r0, r0
    3a1e:	6018      	str	r0, [r3, #0]
    3a20:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    3a22:	201f      	movs	r0, #31
    3a24:	2100      	movs	r1, #0
    3a26:	4b9c      	ldr	r3, [pc, #624]	; (3c98 <hci_cmd_handle+0x328>)
    3a28:	6018      	str	r0, [r3, #0]
    3a2a:	6059      	str	r1, [r3, #4]
		ll_reset();
    3a2c:	f003 ffe0 	bl	79f0 <ll_reset>
    3a30:	e7eb      	b.n	3a0a <hci_cmd_handle+0x9a>
    3a32:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3a34:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    3a36:	785c      	ldrb	r4, [r3, #1]
    3a38:	781a      	ldrb	r2, [r3, #0]
    3a3a:	0224      	lsls	r4, r4, #8
	rp = cmd_complete(evt, sizeof(*rp));
    3a3c:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    3a3e:	4314      	orrs	r4, r2
	type = cmd->type;
    3a40:	789e      	ldrb	r6, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    3a42:	f7ff fecb 	bl	37dc <cmd_complete>
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3a46:	0031      	movs	r1, r6
	rp = cmd_complete(evt, sizeof(*rp));
    3a48:	0005      	movs	r5, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3a4a:	1cc2      	adds	r2, r0, #3
    3a4c:	0020      	movs	r0, r4
    3a4e:	f004 f869 	bl	7b24 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3a52:	1e43      	subs	r3, r0, #1
    3a54:	4198      	sbcs	r0, r3
	rp->handle = sys_cpu_to_le16(handle);
    3a56:	706c      	strb	r4, [r5, #1]
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3a58:	0040      	lsls	r0, r0, #1
	rp->handle = sys_cpu_to_le16(handle);
    3a5a:	0a24      	lsrs	r4, r4, #8
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3a5c:	7028      	strb	r0, [r5, #0]
	rp->handle = sys_cpu_to_le16(handle);
    3a5e:	70ac      	strb	r4, [r5, #2]
	return evt;
    3a60:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a62:	e78e      	b.n	3982 <hci_cmd_handle+0x12>
	switch (ocf) {
    3a64:	1e60      	subs	r0, r4, #1
    3a66:	2808      	cmp	r0, #8
    3a68:	d8a5      	bhi.n	39b6 <hci_cmd_handle+0x46>
    3a6a:	f7fc fb85 	bl	178 <__gnu_thumb1_case_sqi>
    3a6e:	1805      	.short	0x1805
    3a70:	a4a4a452 	.word	0xa4a4a452
    3a74:	a4a4      	.short	0xa4a4
    3a76:	60          	.byte	0x60
    3a77:	00          	.byte	0x00
	rp = cmd_complete(evt, sizeof(*rp));
    3a78:	2109      	movs	r1, #9
    3a7a:	a80d      	add	r0, sp, #52	; 0x34
    3a7c:	f7ff feae 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3a80:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    3a82:	2209      	movs	r2, #9
	rp->status = 0x00;
    3a84:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    3a86:	7083      	strb	r3, [r0, #2]
    3a88:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3a8a:	3b0f      	subs	r3, #15
    3a8c:	7143      	strb	r3, [r0, #5]
    3a8e:	3314      	adds	r3, #20
    3a90:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3a92:	3b06      	subs	r3, #6
	rp->hci_version = BT_HCI_VERSION_5_0;
    3a94:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    3a96:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3a98:	71c3      	strb	r3, [r0, #7]
    3a9a:	7203      	strb	r3, [r0, #8]
    3a9c:	e7e0      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3a9e:	2141      	movs	r1, #65	; 0x41
    3aa0:	a80d      	add	r0, sp, #52	; 0x34
    3aa2:	f7ff fe9b 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3aa6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3aa8:	0004      	movs	r4, r0
	rp->status = 0x00;
    3aaa:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3aac:	2240      	movs	r2, #64	; 0x40
    3aae:	3001      	adds	r0, #1
    3ab0:	f7fc fe04 	bl	6bc <memset>
	rp->commands[2] |= BIT(7);
    3ab4:	2380      	movs	r3, #128	; 0x80
    3ab6:	78e2      	ldrb	r2, [r4, #3]
    3ab8:	425b      	negs	r3, r3
    3aba:	431a      	orrs	r2, r3
    3abc:	70e2      	strb	r2, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3abe:	2240      	movs	r2, #64	; 0x40
    3ac0:	79a1      	ldrb	r1, [r4, #6]
    3ac2:	4252      	negs	r2, r2
    3ac4:	430a      	orrs	r2, r1
    3ac6:	71a2      	strb	r2, [r4, #6]
	rp->commands[10] |= BIT(2);
    3ac8:	2204      	movs	r2, #4
    3aca:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3acc:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[10] |= BIT(2);
    3ace:	4311      	orrs	r1, r2
    3ad0:	72e1      	strb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3ad2:	2128      	movs	r1, #40	; 0x28
    3ad4:	4301      	orrs	r1, r0
    3ad6:	73e1      	strb	r1, [r4, #15]
	rp->commands[15] |= BIT(1);
    3ad8:	2102      	movs	r1, #2
    3ada:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    3adc:	7ea6      	ldrb	r6, [r4, #26]
	rp->commands[15] |= BIT(1);
    3ade:	4301      	orrs	r1, r0
    3ae0:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
    3ae2:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    3ae4:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[22] |= BIT(2);
    3ae6:	430a      	orrs	r2, r1
    3ae8:	75e2      	strb	r2, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    3aea:	223d      	movs	r2, #61	; 0x3d
    3aec:	4252      	negs	r2, r2
    3aee:	4310      	orrs	r0, r2
    3af0:	7720      	strb	r0, [r4, #28]
	rp->commands[28] |= BIT(3);
    3af2:	2008      	movs	r0, #8
    3af4:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    3af6:	7ee5      	ldrb	r5, [r4, #27]
	rp->commands[28] |= BIT(3);
    3af8:	4308      	orrs	r0, r1
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3afa:	2109      	movs	r1, #9
    3afc:	4249      	negs	r1, r1
	rp->commands[26] |= BIT(0) | BIT(1);
    3afe:	432a      	orrs	r2, r5
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3b00:	4331      	orrs	r1, r6
	rp->commands[28] |= BIT(3);
    3b02:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3b04:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    3b06:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    3b08:	3408      	adds	r4, #8
    3b0a:	7fe2      	ldrb	r2, [r4, #31]
    3b0c:	4313      	orrs	r3, r2
    3b0e:	77e3      	strb	r3, [r4, #31]
    3b10:	e7a6      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3b12:	2109      	movs	r1, #9
    3b14:	a80d      	add	r0, sp, #52	; 0x34
    3b16:	f7ff fe61 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3b1a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3b1c:	0004      	movs	r4, r0
	rp->status = 0x00;
    3b1e:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3b20:	2208      	movs	r2, #8
    3b22:	3001      	adds	r0, #1
    3b24:	f7fc fdca 	bl	6bc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3b28:	2360      	movs	r3, #96	; 0x60
    3b2a:	7163      	strb	r3, [r4, #5]
    3b2c:	e798      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3b2e:	2107      	movs	r1, #7
    3b30:	a80d      	add	r0, sp, #52	; 0x34
    3b32:	f7ff fe53 	bl	37dc <cmd_complete>
    3b36:	0001      	movs	r1, r0
	rp->status = 0x00;
    3b38:	2000      	movs	r0, #0
    3b3a:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3b3c:	3101      	adds	r1, #1
    3b3e:	f7ff fd37 	bl	35b0 <ll_addr_get>
    3b42:	e78d      	b.n	3a60 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3b44:	2c0a      	cmp	r4, #10
    3b46:	d100      	bne.n	3b4a <hci_cmd_handle+0x1da>
    3b48:	e0e4      	b.n	3d14 <hci_cmd_handle+0x3a4>
    3b4a:	d828      	bhi.n	3b9e <hci_cmd_handle+0x22e>
    3b4c:	2c05      	cmp	r4, #5
    3b4e:	d100      	bne.n	3b52 <hci_cmd_handle+0x1e2>
    3b50:	e080      	b.n	3c54 <hci_cmd_handle+0x2e4>
    3b52:	d813      	bhi.n	3b7c <hci_cmd_handle+0x20c>
    3b54:	2c02      	cmp	r4, #2
    3b56:	d05f      	beq.n	3c18 <hci_cmd_handle+0x2a8>
    3b58:	2c03      	cmp	r4, #3
    3b5a:	d069      	beq.n	3c30 <hci_cmd_handle+0x2c0>
    3b5c:	2c01      	cmp	r4, #1
    3b5e:	d000      	beq.n	3b62 <hci_cmd_handle+0x1f2>
    3b60:	e729      	b.n	39b6 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    3b62:	68a8      	ldr	r0, [r5, #8]
    3b64:	f7ff feed 	bl	3942 <sys_get_le64>
    3b68:	4b4b      	ldr	r3, [pc, #300]	; (3c98 <hci_cmd_handle+0x328>)
    3b6a:	6018      	str	r0, [r3, #0]
    3b6c:	6059      	str	r1, [r3, #4]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3b6e:	2101      	movs	r1, #1
    3b70:	a80d      	add	r0, sp, #52	; 0x34
    3b72:	f7ff fe33 	bl	37dc <cmd_complete>
	ccst->status = 0x00;
    3b76:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3b78:	7003      	strb	r3, [r0, #0]
    3b7a:	e771      	b.n	3a60 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3b7c:	2c07      	cmp	r4, #7
    3b7e:	d100      	bne.n	3b82 <hci_cmd_handle+0x212>
    3b80:	e149      	b.n	3e16 <hci_cmd_handle+0x4a6>
    3b82:	d200      	bcs.n	3b86 <hci_cmd_handle+0x216>
    3b84:	e0a5      	b.n	3cd2 <hci_cmd_handle+0x362>
    3b86:	2c08      	cmp	r4, #8
    3b88:	d100      	bne.n	3b8c <hci_cmd_handle+0x21c>
    3b8a:	e0bd      	b.n	3d08 <hci_cmd_handle+0x398>
    3b8c:	2c09      	cmp	r4, #9
    3b8e:	d000      	beq.n	3b92 <hci_cmd_handle+0x222>
    3b90:	e711      	b.n	39b6 <hci_cmd_handle+0x46>
    3b92:	68ab      	ldr	r3, [r5, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    3b94:	1c59      	adds	r1, r3, #1
    3b96:	7818      	ldrb	r0, [r3, #0]
    3b98:	f004 fcd4 	bl	8544 <ll_scan_data_set>
    3b9c:	e7e7      	b.n	3b6e <hci_cmd_handle+0x1fe>
	switch (ocf) {
    3b9e:	2c12      	cmp	r4, #18
    3ba0:	d070      	beq.n	3c84 <hci_cmd_handle+0x314>
    3ba2:	d810      	bhi.n	3bc6 <hci_cmd_handle+0x256>
    3ba4:	2c10      	cmp	r4, #16
    3ba6:	d060      	beq.n	3c6a <hci_cmd_handle+0x2fa>
    3ba8:	d868      	bhi.n	3c7c <hci_cmd_handle+0x30c>
    3baa:	2c0f      	cmp	r4, #15
    3bac:	d000      	beq.n	3bb0 <hci_cmd_handle+0x240>
    3bae:	e702      	b.n	39b6 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3bb0:	2102      	movs	r1, #2
    3bb2:	a80d      	add	r0, sp, #52	; 0x34
    3bb4:	f7ff fe12 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3bb8:	2300      	movs	r3, #0
    3bba:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3bbc:	0004      	movs	r4, r0
	rp->wl_size = ll_wl_size_get();
    3bbe:	f004 fd5d 	bl	867c <ll_wl_size_get>
    3bc2:	7060      	strb	r0, [r4, #1]
    3bc4:	e74c      	b.n	3a60 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3bc6:	2c18      	cmp	r4, #24
    3bc8:	d068      	beq.n	3c9c <hci_cmd_handle+0x32c>
    3bca:	d815      	bhi.n	3bf8 <hci_cmd_handle+0x288>
    3bcc:	2c17      	cmp	r4, #23
    3bce:	d000      	beq.n	3bd2 <hci_cmd_handle+0x262>
    3bd0:	e6f1      	b.n	39b6 <hci_cmd_handle+0x46>
    3bd2:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3bd4:	2300      	movs	r3, #0
    3bd6:	0001      	movs	r1, r0
    3bd8:	aa0e      	add	r2, sp, #56	; 0x38
    3bda:	3110      	adds	r1, #16
    3bdc:	f004 ff62 	bl	8aa4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3be0:	2111      	movs	r1, #17
    3be2:	a80d      	add	r0, sp, #52	; 0x34
    3be4:	f7ff fdfa 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3be8:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    3bea:	2210      	movs	r2, #16
	rp->status = 0x00;
    3bec:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    3bee:	3001      	adds	r0, #1
	memcpy(rp->info, build_info, sizeof(build_info));
    3bf0:	a90e      	add	r1, sp, #56	; 0x38
    3bf2:	f7fc fd39 	bl	668 <memcpy>
    3bf6:	e733      	b.n	3a60 <hci_cmd_handle+0xf0>
	switch (ocf) {
    3bf8:	2c1c      	cmp	r4, #28
    3bfa:	d05a      	beq.n	3cb2 <hci_cmd_handle+0x342>
    3bfc:	2c4b      	cmp	r4, #75	; 0x4b
    3bfe:	d000      	beq.n	3c02 <hci_cmd_handle+0x292>
    3c00:	e6d9      	b.n	39b6 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3c02:	2103      	movs	r1, #3
    3c04:	a80d      	add	r0, sp, #52	; 0x34
    3c06:	f7ff fde9 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3c0a:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3c0c:	1c81      	adds	r1, r0, #2
	rp->status = 0x00;
    3c0e:	7003      	strb	r3, [r0, #0]
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3c10:	3001      	adds	r0, #1
    3c12:	f7ff fd01 	bl	3618 <ll_tx_pwr_get>
    3c16:	e723      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3c18:	2104      	movs	r1, #4
    3c1a:	a80d      	add	r0, sp, #52	; 0x34
    3c1c:	f7ff fdde 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3c20:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c22:	211b      	movs	r1, #27
	rp->status = 0x00;
    3c24:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c26:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3c28:	3302      	adds	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c2a:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3c2c:	70c3      	strb	r3, [r0, #3]
    3c2e:	e717      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3c30:	2109      	movs	r1, #9
    3c32:	a80d      	add	r0, sp, #52	; 0x34
    3c34:	f7ff fdd2 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3c38:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c3a:	0004      	movs	r4, r0
	rp->status = 0x00;
    3c3c:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c3e:	2208      	movs	r2, #8
    3c40:	3001      	adds	r0, #1
    3c42:	f7fc fd3b 	bl	6bc <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    3c46:	230c      	movs	r3, #12
    3c48:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    3c4a:	3334      	adds	r3, #52	; 0x34
    3c4c:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    3c4e:	3b3f      	subs	r3, #63	; 0x3f
    3c50:	70e3      	strb	r3, [r4, #3]
    3c52:	e705      	b.n	3a60 <hci_cmd_handle+0xf0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3c54:	68a9      	ldr	r1, [r5, #8]
    3c56:	2001      	movs	r0, #1
    3c58:	f7ff fcc2 	bl	35e0 <ll_addr_set>
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3c5c:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3c5e:	2101      	movs	r1, #1
    3c60:	a80d      	add	r0, sp, #52	; 0x34
    3c62:	f7ff fdbb 	bl	37dc <cmd_complete>
	ccst->status = status;
    3c66:	7004      	strb	r4, [r0, #0]
    3c68:	e6fa      	b.n	3a60 <hci_cmd_handle+0xf0>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3c6a:	2101      	movs	r1, #1
    3c6c:	a80d      	add	r0, sp, #52	; 0x34
    3c6e:	f7ff fdb5 	bl	37dc <cmd_complete>
    3c72:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    3c74:	f004 fd04 	bl	8680 <ll_wl_clear>
    3c78:	7020      	strb	r0, [r4, #0]
    3c7a:	e6f1      	b.n	3a60 <hci_cmd_handle+0xf0>
	status = ll_wl_add(&cmd->addr);
    3c7c:	68a8      	ldr	r0, [r5, #8]
    3c7e:	f004 fd15 	bl	86ac <ll_wl_add>
    3c82:	e7eb      	b.n	3c5c <hci_cmd_handle+0x2ec>
	status = ll_wl_remove(&cmd->addr);
    3c84:	68a8      	ldr	r0, [r5, #8]
    3c86:	f004 fd47 	bl	8718 <ll_wl_remove>
    3c8a:	e7e7      	b.n	3c5c <hci_cmd_handle+0x2ec>
    3c8c:	20000250 	.word	0x20000250
    3c90:	200022a8 	.word	0x200022a8
    3c94:	00001fff 	.word	0x00001fff
    3c98:	200022b0 	.word	0x200022b0
	rp = cmd_complete(evt, sizeof(*rp));
    3c9c:	2109      	movs	r1, #9
    3c9e:	a80d      	add	r0, sp, #52	; 0x34
    3ca0:	f7ff fd9c 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3ca4:	2300      	movs	r3, #0
	bt_rand(rp->rand, count);
    3ca6:	2108      	movs	r1, #8
	rp->status = 0x00;
    3ca8:	7003      	strb	r3, [r0, #0]
	bt_rand(rp->rand, count);
    3caa:	3001      	adds	r0, #1
    3cac:	f7ff fcb8 	bl	3620 <bt_rand>
    3cb0:	e6d6      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3cb2:	2109      	movs	r1, #9
    3cb4:	a80d      	add	r0, sp, #52	; 0x34
    3cb6:	f7ff fd91 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3cba:	2500      	movs	r5, #0
	sys_put_le64(states, rp->le_states);
    3cbc:	1c41      	adds	r1, r0, #1
	rp = cmd_complete(evt, sizeof(*rp));
    3cbe:	0004      	movs	r4, r0
	rp->status = 0x00;
    3cc0:	7005      	strb	r5, [r0, #0]
	sys_put_le32(val, dst);
    3cc2:	2003      	movs	r0, #3
    3cc4:	f7ff fd78 	bl	37b8 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3cc8:	0028      	movs	r0, r5
    3cca:	1d61      	adds	r1, r4, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3ccc:	f7ff fd74 	bl	37b8 <sys_put_le32>
    3cd0:	e6c6      	b.n	3a60 <hci_cmd_handle+0xf0>
    3cd2:	68a9      	ldr	r1, [r5, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    3cd4:	784a      	ldrb	r2, [r1, #1]
    3cd6:	7808      	ldrb	r0, [r1, #0]
    3cd8:	0212      	lsls	r2, r2, #8
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3cda:	4302      	orrs	r2, r0
    3cdc:	2000      	movs	r0, #0
    3cde:	790b      	ldrb	r3, [r1, #4]
    3ce0:	900a      	str	r0, [sp, #40]	; 0x28
    3ce2:	9009      	str	r0, [sp, #36]	; 0x24
    3ce4:	9008      	str	r0, [sp, #32]
    3ce6:	9007      	str	r0, [sp, #28]
    3ce8:	9006      	str	r0, [sp, #24]
    3cea:	9005      	str	r0, [sp, #20]
    3cec:	7b8c      	ldrb	r4, [r1, #14]
    3cee:	9404      	str	r4, [sp, #16]
    3cf0:	7b4c      	ldrb	r4, [r1, #13]
    3cf2:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    3cf4:	1dcc      	adds	r4, r1, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3cf6:	9402      	str	r4, [sp, #8]
    3cf8:	798c      	ldrb	r4, [r1, #6]
    3cfa:	9401      	str	r4, [sp, #4]
    3cfc:	7949      	ldrb	r1, [r1, #5]
    3cfe:	9100      	str	r1, [sp, #0]
    3d00:	0001      	movs	r1, r0
    3d02:	f004 facd 	bl	82a0 <ll_adv_params_set>
    3d06:	e7a9      	b.n	3c5c <hci_cmd_handle+0x2ec>
    3d08:	68ab      	ldr	r3, [r5, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    3d0a:	1c59      	adds	r1, r3, #1
    3d0c:	7818      	ldrb	r0, [r3, #0]
    3d0e:	f004 fbc1 	bl	8494 <ll_adv_data_set>
    3d12:	e72c      	b.n	3b6e <hci_cmd_handle+0x1fe>
	status = ll_adv_enable(cmd->enable);
    3d14:	68ab      	ldr	r3, [r5, #8]
    3d16:	7818      	ldrb	r0, [r3, #0]
    3d18:	f004 fc50 	bl	85bc <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3d1c:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    3d1e:	0004      	movs	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3d20:	a80d      	add	r0, sp, #52	; 0x34
    3d22:	f7ff fd5b 	bl	37dc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3d26:	2c00      	cmp	r4, #0
    3d28:	d100      	bne.n	3d2c <hci_cmd_handle+0x3bc>
    3d2a:	e672      	b.n	3a12 <hci_cmd_handle+0xa2>
    3d2c:	260c      	movs	r6, #12
    3d2e:	e670      	b.n	3a12 <hci_cmd_handle+0xa2>
	rp = cmd_complete(evt, sizeof(*rp));
    3d30:	210d      	movs	r1, #13
    3d32:	a80d      	add	r0, sp, #52	; 0x34
    3d34:	f7ff fd52 	bl	37dc <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d38:	2102      	movs	r1, #2
	rp->status = 0x00;
    3d3a:	2300      	movs	r3, #0
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3d3c:	2201      	movs	r2, #1
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d3e:	7041      	strb	r1, [r0, #1]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d40:	210b      	movs	r1, #11
	rp->status = 0x00;
    3d42:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d44:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3d46:	70c2      	strb	r2, [r0, #3]
    3d48:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    3d4a:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    3d4c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d4e:	71c1      	strb	r1, [r0, #7]
    3d50:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3d52:	7243      	strb	r3, [r0, #9]
    3d54:	7283      	strb	r3, [r0, #10]
    3d56:	72c3      	strb	r3, [r0, #11]
    3d58:	7303      	strb	r3, [r0, #12]
    3d5a:	e681      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3d5c:	2141      	movs	r1, #65	; 0x41
    3d5e:	a80d      	add	r0, sp, #52	; 0x34
    3d60:	f7ff fd3c 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3d64:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3d66:	0004      	movs	r4, r0
	rp->status = 0x00;
    3d68:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3d6a:	2240      	movs	r2, #64	; 0x40
    3d6c:	3001      	adds	r0, #1
    3d6e:	f7fc fca5 	bl	6bc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    3d72:	2359      	movs	r3, #89	; 0x59
    3d74:	7862      	ldrb	r2, [r4, #1]
    3d76:	425b      	negs	r3, r3
    3d78:	4313      	orrs	r3, r2
    3d7a:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    3d7c:	2303      	movs	r3, #3
    3d7e:	78a2      	ldrb	r2, [r4, #2]
    3d80:	4313      	orrs	r3, r2
    3d82:	70a3      	strb	r3, [r4, #2]
    3d84:	e66c      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3d86:	2109      	movs	r1, #9
    3d88:	a80d      	add	r0, sp, #52	; 0x34
    3d8a:	f7ff fd27 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3d8e:	2100      	movs	r1, #0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3d90:	2208      	movs	r2, #8
	rp->status = 0x00;
    3d92:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3d94:	3001      	adds	r0, #1
		memset(rp->er, 0x00, sizeof(rp->er));
    3d96:	f7fc fc91 	bl	6bc <memset>
    3d9a:	e661      	b.n	3a60 <hci_cmd_handle+0xf0>
	const char build_info[] = HCI_VS_BUILD_INFO;
    3d9c:	2227      	movs	r2, #39	; 0x27
    3d9e:	494e      	ldr	r1, [pc, #312]	; (3ed8 <hci_cmd_handle+0x568>)
    3da0:	a80e      	add	r0, sp, #56	; 0x38
    3da2:	f7fc fc61 	bl	668 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    3da6:	2128      	movs	r1, #40	; 0x28
    3da8:	a80d      	add	r0, sp, #52	; 0x34
    3daa:	f7ff fd17 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3dae:	2300      	movs	r3, #0
	memcpy(rp->info, build_info, sizeof(build_info));
    3db0:	2227      	movs	r2, #39	; 0x27
	rp->status = 0x00;
    3db2:	7003      	strb	r3, [r0, #0]
	memcpy(rp->info, build_info, sizeof(build_info));
    3db4:	3001      	adds	r0, #1
    3db6:	e71b      	b.n	3bf0 <hci_cmd_handle+0x280>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    3db8:	68a9      	ldr	r1, [r5, #8]
    3dba:	2000      	movs	r0, #0
    3dbc:	f7ff fc10 	bl	35e0 <ll_addr_set>
    3dc0:	e6d5      	b.n	3b6e <hci_cmd_handle+0x1fe>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3dc2:	4e46      	ldr	r6, [pc, #280]	; (3edc <hci_cmd_handle+0x56c>)
    3dc4:	6833      	ldr	r3, [r6, #0]
    3dc6:	3301      	adds	r3, #1
    3dc8:	d105      	bne.n	3dd6 <hci_cmd_handle+0x466>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3dca:	4b45      	ldr	r3, [pc, #276]	; (3ee0 <hci_cmd_handle+0x570>)
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3dcc:	4a45      	ldr	r2, [pc, #276]	; (3ee4 <hci_cmd_handle+0x574>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3dce:	681b      	ldr	r3, [r3, #0]
    3dd0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3dd2:	4293      	cmp	r3, r2
    3dd4:	d01f      	beq.n	3e16 <hci_cmd_handle+0x4a6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    3dd6:	2701      	movs	r7, #1
    3dd8:	4b43      	ldr	r3, [pc, #268]	; (3ee8 <hci_cmd_handle+0x578>)
    3dda:	681b      	ldr	r3, [r3, #0]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3ddc:	423b      	tst	r3, r7
    3dde:	d01a      	beq.n	3e16 <hci_cmd_handle+0x4a6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3de0:	2118      	movs	r1, #24
    3de2:	a80d      	add	r0, sp, #52	; 0x34
    3de4:	f7ff fcfa 	bl	37dc <cmd_complete>
		rp->status = 0x00;
    3de8:	2500      	movs	r5, #0
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3dea:	0004      	movs	r4, r0
		rp->status = 0x00;
    3dec:	7005      	strb	r5, [r0, #0]
		rp->num_addrs = 1;
    3dee:	7047      	strb	r7, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    3df0:	6830      	ldr	r0, [r6, #0]
    3df2:	1ca6      	adds	r6, r4, #2
    3df4:	0031      	movs	r1, r6
    3df6:	f7ff fcdf 	bl	37b8 <sys_put_le32>
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3dfa:	2240      	movs	r2, #64	; 0x40
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3dfc:	0020      	movs	r0, r4
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3dfe:	4b38      	ldr	r3, [pc, #224]	; (3ee0 <hci_cmd_handle+0x570>)
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3e00:	4252      	negs	r2, r2
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3e02:	681b      	ldr	r3, [r3, #0]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3e04:	3008      	adds	r0, #8
	dst[0] = val;
    3e06:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    3e08:	b29b      	uxth	r3, r3
    3e0a:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3e0c:	4313      	orrs	r3, r2
    3e0e:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3e10:	3250      	adds	r2, #80	; 0x50
    3e12:	0029      	movs	r1, r5
    3e14:	e7bf      	b.n	3d96 <hci_cmd_handle+0x426>
	rp = cmd_complete(evt, sizeof(*rp));
    3e16:	2102      	movs	r1, #2
    3e18:	a80d      	add	r0, sp, #52	; 0x34
    3e1a:	f7ff fcdf 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3e1e:	2300      	movs	r3, #0
    3e20:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    3e22:	7043      	strb	r3, [r0, #1]
    3e24:	e61c      	b.n	3a60 <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
    3e26:	2121      	movs	r1, #33	; 0x21
    3e28:	a80d      	add	r0, sp, #52	; 0x34
    3e2a:	f7ff fcd7 	bl	37dc <cmd_complete>
	rp->status = 0x00;
    3e2e:	2300      	movs	r3, #0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e30:	4a2e      	ldr	r2, [pc, #184]	; (3eec <hci_cmd_handle+0x57c>)
	rp->status = 0x00;
    3e32:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e34:	6811      	ldr	r1, [r2, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3e36:	0004      	movs	r4, r0
    3e38:	1c43      	adds	r3, r0, #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e3a:	3101      	adds	r1, #1
    3e3c:	d041      	beq.n	3ec2 <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3e3e:	4f2c      	ldr	r7, [pc, #176]	; (3ef0 <hci_cmd_handle+0x580>)
    3e40:	6839      	ldr	r1, [r7, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e42:	3101      	adds	r1, #1
    3e44:	d03d      	beq.n	3ec2 <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3e46:	4e2b      	ldr	r6, [pc, #172]	; (3ef4 <hci_cmd_handle+0x584>)
    3e48:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3e4a:	3101      	adds	r1, #1
    3e4c:	d039      	beq.n	3ec2 <hci_cmd_handle+0x552>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    3e4e:	4d2a      	ldr	r5, [pc, #168]	; (3ef8 <hci_cmd_handle+0x588>)
    3e50:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3e52:	3101      	adds	r1, #1
    3e54:	d035      	beq.n	3ec2 <hci_cmd_handle+0x552>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    3e56:	6810      	ldr	r0, [r2, #0]
    3e58:	0019      	movs	r1, r3
    3e5a:	f7ff fcad 	bl	37b8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    3e5e:	6838      	ldr	r0, [r7, #0]
    3e60:	1d61      	adds	r1, r4, #5
    3e62:	f7ff fca9 	bl	37b8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    3e66:	0021      	movs	r1, r4
    3e68:	6830      	ldr	r0, [r6, #0]
    3e6a:	3109      	adds	r1, #9
    3e6c:	f7ff fca4 	bl	37b8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    3e70:	0021      	movs	r1, r4
    3e72:	6828      	ldr	r0, [r5, #0]
    3e74:	310d      	adds	r1, #13
    3e76:	f7ff fc9f 	bl	37b8 <sys_put_le32>
    3e7a:	0023      	movs	r3, r4
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3e7c:	4a1f      	ldr	r2, [pc, #124]	; (3efc <hci_cmd_handle+0x58c>)
    3e7e:	3311      	adds	r3, #17
    3e80:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    3e82:	3101      	adds	r1, #1
    3e84:	d023      	beq.n	3ece <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3e86:	4f1e      	ldr	r7, [pc, #120]	; (3f00 <hci_cmd_handle+0x590>)
    3e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3e8a:	3101      	adds	r1, #1
    3e8c:	d01f      	beq.n	3ece <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3e8e:	4e1d      	ldr	r6, [pc, #116]	; (3f04 <hci_cmd_handle+0x594>)
    3e90:	6831      	ldr	r1, [r6, #0]
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3e92:	3101      	adds	r1, #1
    3e94:	d01b      	beq.n	3ece <hci_cmd_handle+0x55e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    3e96:	4d1c      	ldr	r5, [pc, #112]	; (3f08 <hci_cmd_handle+0x598>)
    3e98:	6829      	ldr	r1, [r5, #0]
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3e9a:	3101      	adds	r1, #1
    3e9c:	d017      	beq.n	3ece <hci_cmd_handle+0x55e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    3e9e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    3ea0:	0019      	movs	r1, r3
    3ea2:	f7ff fc89 	bl	37b8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    3ea6:	0021      	movs	r1, r4
    3ea8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    3eaa:	3115      	adds	r1, #21
    3eac:	f7ff fc84 	bl	37b8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    3eb0:	0021      	movs	r1, r4
    3eb2:	6830      	ldr	r0, [r6, #0]
    3eb4:	3119      	adds	r1, #25
    3eb6:	f7ff fc7f 	bl	37b8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3eba:	0021      	movs	r1, r4
    3ebc:	6828      	ldr	r0, [r5, #0]
    3ebe:	311d      	adds	r1, #29
    3ec0:	e704      	b.n	3ccc <hci_cmd_handle+0x35c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    3ec2:	2210      	movs	r2, #16
    3ec4:	2100      	movs	r1, #0
    3ec6:	0018      	movs	r0, r3
    3ec8:	f7fc fbf8 	bl	6bc <memset>
    3ecc:	e7d5      	b.n	3e7a <hci_cmd_handle+0x50a>
		memset(rp->er, 0x00, sizeof(rp->er));
    3ece:	2210      	movs	r2, #16
    3ed0:	2100      	movs	r1, #0
    3ed2:	0018      	movs	r0, r3
    3ed4:	e75f      	b.n	3d96 <hci_cmd_handle+0x426>
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	0000afcb 	.word	0x0000afcb
    3edc:	100000a4 	.word	0x100000a4
    3ee0:	100000a8 	.word	0x100000a8
    3ee4:	0000ffff 	.word	0x0000ffff
    3ee8:	100000a0 	.word	0x100000a0
    3eec:	10000090 	.word	0x10000090
    3ef0:	10000094 	.word	0x10000094
    3ef4:	10000098 	.word	0x10000098
    3ef8:	1000009c 	.word	0x1000009c
    3efc:	10000004 	.word	0x10000004
    3f00:	10000008 	.word	0x10000008
    3f04:	10000088 	.word	0x10000088
    3f08:	1000008c 	.word	0x1000008c

00003f0c <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    3f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;
    3f0e:	0007      	movs	r7, r0
{
    3f10:	0004      	movs	r4, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3f12:	7900      	ldrb	r0, [r0, #4]
{
    3f14:	b08d      	sub	sp, #52	; 0x34
    3f16:	000e      	movs	r6, r1
	pdu_data = (void *)node_rx->pdu_data;
    3f18:	3708      	adds	r7, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3f1a:	2801      	cmp	r0, #1
    3f1c:	d100      	bne.n	3f20 <hci_evt_encode+0x14>
    3f1e:	e088      	b.n	4032 <__kernel_ram_size+0x32>
	switch (node_rx->hdr.type) {
    3f20:	3802      	subs	r0, #2
    3f22:	2803      	cmp	r0, #3
    3f24:	d900      	bls.n	3f28 <hci_evt_encode+0x1c>
    3f26:	e0be      	b.n	40a6 <__kernel_ram_size+0xa6>
    3f28:	f7fc f930 	bl	18c <__gnu_thumb1_case_uqi>
    3f2c:	584c4c02 	.word	0x584c4c02
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3f30:	2201      	movs	r2, #1
    3f32:	2500      	movs	r5, #0
    3f34:	2104      	movs	r1, #4
    3f36:	ab05      	add	r3, sp, #20
    3f38:	705a      	strb	r2, [r3, #1]
    3f3a:	3202      	adds	r2, #2
    3f3c:	709a      	strb	r2, [r3, #2]
    3f3e:	32fc      	adds	r2, #252	; 0xfc
    3f40:	715a      	strb	r2, [r3, #5]
    3f42:	70da      	strb	r2, [r3, #3]
    3f44:	3afd      	subs	r2, #253	; 0xfd
    3f46:	7119      	strb	r1, [r3, #4]
    3f48:	719a      	strb	r2, [r3, #6]
    3f4a:	701d      	strb	r5, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3f4c:	4b57      	ldr	r3, [pc, #348]	; (40ac <__kernel_ram_size+0xac>)
    3f4e:	685b      	ldr	r3, [r3, #4]
    3f50:	009b      	lsls	r3, r3, #2
    3f52:	d535      	bpl.n	3fc0 <hci_evt_encode+0xb4>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    3f54:	4b56      	ldr	r3, [pc, #344]	; (40b0 <__kernel_ram_size+0xb0>)
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	4213      	tst	r3, r2
    3f5a:	d031      	beq.n	3fc0 <hci_evt_encode+0xb4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    3f5c:	230f      	movs	r3, #15
    3f5e:	7a22      	ldrb	r2, [r4, #8]
    3f60:	401a      	ands	r2, r3
    3f62:	7a63      	ldrb	r3, [r4, #9]
    3f64:	2a01      	cmp	r2, #1
    3f66:	d001      	beq.n	3f6c <hci_evt_encode+0x60>
		data_len = (adv->len - BDADDR_SIZE);
    3f68:	1f9d      	subs	r5, r3, #6
    3f6a:	b2ed      	uxtb	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f6c:	002a      	movs	r2, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f6e:	18e3      	adds	r3, r4, r3
    3f70:	7a9b      	ldrb	r3, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f72:	320b      	adds	r2, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f74:	425b      	negs	r3, r3
    3f76:	b25b      	sxtb	r3, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f78:	b2d2      	uxtb	r2, r2
    3f7a:	2102      	movs	r1, #2
    3f7c:	0030      	movs	r0, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f7e:	9301      	str	r3, [sp, #4]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f80:	f7ff fc4e 	bl	3820 <meta_evt>
	sep->num_reports = 1;
    3f84:	2301      	movs	r3, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3f86:	0021      	movs	r1, r4
	sep->num_reports = 1;
    3f88:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    3f8a:	7a23      	ldrb	r3, [r4, #8]
    3f8c:	aa05      	add	r2, sp, #20
    3f8e:	071b      	lsls	r3, r3, #28
    3f90:	0f1b      	lsrs	r3, r3, #28
    3f92:	5cd3      	ldrb	r3, [r2, r3]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f94:	0006      	movs	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    3f96:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    3f98:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3f9a:	310a      	adds	r1, #10
		adv_info->addr.type = adv->tx_addr;
    3f9c:	065b      	lsls	r3, r3, #25
    3f9e:	0fdb      	lsrs	r3, r3, #31
    3fa0:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3fa2:	2206      	movs	r2, #6
    3fa4:	3003      	adds	r0, #3
    3fa6:	f7fc fb5f 	bl	668 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3faa:	0039      	movs	r1, r7
	adv_info->length = data_len;
    3fac:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3fae:	360a      	adds	r6, #10
    3fb0:	3108      	adds	r1, #8
    3fb2:	002a      	movs	r2, r5
    3fb4:	0030      	movs	r0, r6
    3fb6:	f7fc fb57 	bl	668 <memcpy>
	*prssi = rssi;
    3fba:	466b      	mov	r3, sp
    3fbc:	791b      	ldrb	r3, [r3, #4]
    3fbe:	5573      	strb	r3, [r6, r5]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    3fc0:	b00d      	add	sp, #52	; 0x34
    3fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3fc4:	220f      	movs	r2, #15
    3fc6:	7a23      	ldrb	r3, [r4, #8]
    3fc8:	4013      	ands	r3, r2
    3fca:	2b07      	cmp	r3, #7
    3fcc:	d1f8      	bne.n	3fc0 <hci_evt_encode+0xb4>
    3fce:	7a63      	ldrb	r3, [r4, #9]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d0f5      	beq.n	3fc0 <hci_evt_encode+0xb4>
    3fd4:	0038      	movs	r0, r7
    3fd6:	f7ff fc9b 	bl	3910 <le_adv_ext_report.isra.37.part.38>
    3fda:	e7f1      	b.n	3fc0 <hci_evt_encode+0xb4>
    3fdc:	0025      	movs	r5, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3fde:	4b33      	ldr	r3, [pc, #204]	; (40ac <__kernel_ram_size+0xac>)
    3fe0:	350a      	adds	r5, #10
    3fe2:	685b      	ldr	r3, [r3, #4]
    3fe4:	009b      	lsls	r3, r3, #2
    3fe6:	d503      	bpl.n	3ff0 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    3fe8:	4b31      	ldr	r3, [pc, #196]	; (40b0 <__kernel_ram_size+0xb0>)
    3fea:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3fec:	035b      	lsls	r3, r3, #13
    3fee:	d40f      	bmi.n	4010 <__kernel_ram_size+0x10>
		addr.type = adv->tx_addr;
    3ff0:	7a23      	ldrb	r3, [r4, #8]
    3ff2:	ae03      	add	r6, sp, #12
    3ff4:	065b      	lsls	r3, r3, #25
    3ff6:	0fdb      	lsrs	r3, r3, #31
    3ff8:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3ffa:	ab02      	add	r3, sp, #8
    3ffc:	0029      	movs	r1, r5
    3ffe:	2206      	movs	r2, #6
    4000:	1d58      	adds	r0, r3, #5
    4002:	f7fc fb31 	bl	668 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4006:	a905      	add	r1, sp, #20
    4008:	0030      	movs	r0, r6
    400a:	f7ff fc45 	bl	3898 <bt_addr_le_to_str.constprop.42>
    400e:	e7d7      	b.n	3fc0 <hci_evt_encode+0xb4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4010:	2208      	movs	r2, #8
    4012:	2113      	movs	r1, #19
    4014:	0030      	movs	r0, r6
    4016:	f7ff fc03 	bl	3820 <meta_evt>
	sep->handle = 0;
    401a:	2300      	movs	r3, #0
    401c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    401e:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4020:	2206      	movs	r2, #6
	sep->addr.type = adv->tx_addr;
    4022:	065b      	lsls	r3, r3, #25
    4024:	0fdb      	lsrs	r3, r3, #31
    4026:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4028:	0029      	movs	r1, r5
    402a:	3002      	adds	r0, #2
    402c:	f7fc fb1c 	bl	668 <memcpy>
    4030:	e7c6      	b.n	3fc0 <hci_evt_encode+0xb4>
	switch (pdu_data->llctrl.opcode) {
    4032:	7ae1      	ldrb	r1, [r4, #11]
    4034:	88e5      	ldrh	r5, [r4, #6]
    4036:	2909      	cmp	r1, #9
    4038:	d00b      	beq.n	4052 <__kernel_ram_size+0x52>
    403a:	290c      	cmp	r1, #12
    403c:	d010      	beq.n	4060 <__kernel_ram_size+0x60>
    403e:	2907      	cmp	r1, #7
    4040:	d131      	bne.n	40a6 <__kernel_ram_size+0xa6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    4042:	7b23      	ldrb	r3, [r4, #12]
    4044:	2b0e      	cmp	r3, #14
    4046:	d1bb      	bne.n	3fc0 <hci_evt_encode+0xb4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4048:	0033      	movs	r3, r6
    404a:	002a      	movs	r2, r5
    404c:	2100      	movs	r1, #0
    404e:	201a      	movs	r0, #26
    4050:	e003      	b.n	405a <__kernel_ram_size+0x5a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    4052:	0033      	movs	r3, r6
    4054:	002a      	movs	r2, r5
    4056:	0039      	movs	r1, r7
    4058:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    405a:	f7ff fbf5 	bl	3848 <le_remote_feat_complete>
    405e:	e7af      	b.n	3fc0 <hci_evt_encode+0xb4>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    4060:	4b12      	ldr	r3, [pc, #72]	; (40ac <__kernel_ram_size+0xac>)
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	051b      	lsls	r3, r3, #20
    4066:	d5ab      	bpl.n	3fc0 <hci_evt_encode+0xb4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    4068:	2208      	movs	r2, #8
    406a:	0030      	movs	r0, r6
    406c:	f7ff fbac 	bl	37c8 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    4070:	0030      	movs	r0, r6
    4072:	2108      	movs	r1, #8
    4074:	3008      	adds	r0, #8
    4076:	f005 fa15 	bl	94a4 <net_buf_simple_add>
	ep->status = 0x00;
    407a:	2300      	movs	r3, #0
    407c:	7003      	strb	r3, [r0, #0]
	ep->version = ver_ind->version_number;
    407e:	7b23      	ldrb	r3, [r4, #12]
	ep->handle = sys_cpu_to_le16(handle);
    4080:	7045      	strb	r5, [r0, #1]
    4082:	0a2d      	lsrs	r5, r5, #8
	ep->version = ver_ind->version_number;
    4084:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    4086:	7085      	strb	r5, [r0, #2]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    4088:	7ba3      	ldrb	r3, [r4, #14]
    408a:	7b62      	ldrb	r2, [r4, #13]
    408c:	021b      	lsls	r3, r3, #8
    408e:	4313      	orrs	r3, r2
    4090:	7103      	strb	r3, [r0, #4]
    4092:	0a1b      	lsrs	r3, r3, #8
    4094:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4096:	7c23      	ldrb	r3, [r4, #16]
    4098:	7be2      	ldrb	r2, [r4, #15]
    409a:	021b      	lsls	r3, r3, #8
    409c:	4313      	orrs	r3, r2
    409e:	7183      	strb	r3, [r0, #6]
    40a0:	0a1b      	lsrs	r3, r3, #8
    40a2:	71c3      	strb	r3, [r0, #7]
    40a4:	e78c      	b.n	3fc0 <hci_evt_encode+0xb4>
		LL_ASSERT(0);
    40a6:	b662      	cpsie	i
    40a8:	2004      	movs	r0, #4
    40aa:	df02      	svc	2
    40ac:	200022a8 	.word	0x200022a8
    40b0:	200022b0 	.word	0x200022b0

000040b4 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    40b4:	7903      	ldrb	r3, [r0, #4]
    40b6:	2b01      	cmp	r3, #1
    40b8:	d012      	beq.n	40e0 <hci_get_class+0x2c>
    40ba:	2b0a      	cmp	r3, #10
    40bc:	d818      	bhi.n	40f0 <hci_get_class+0x3c>
    40be:	2201      	movs	r2, #1
    40c0:	0011      	movs	r1, r2
    40c2:	4099      	lsls	r1, r3
    40c4:	000b      	movs	r3, r1
    40c6:	21b0      	movs	r1, #176	; 0xb0
    40c8:	00c9      	lsls	r1, r1, #3
		case NODE_RX_TYPE_CHAN_SEL_ALGO:
#endif
#if defined(CONFIG_BT_CTLR_PHY)
		case NODE_RX_TYPE_PHY_UPDATE:
#endif /* CONFIG_BT_CTLR_PHY */
			return HCI_CLASS_EVT_CONNECTION;
    40ca:	2002      	movs	r0, #2
    40cc:	420b      	tst	r3, r1
    40ce:	d10e      	bne.n	40ee <hci_get_class+0x3a>
    40d0:	213c      	movs	r1, #60	; 0x3c
			return HCI_CLASS_EVT_DISCARDABLE;
    40d2:	0010      	movs	r0, r2
    40d4:	420b      	tst	r3, r1
    40d6:	d10a      	bne.n	40ee <hci_get_class+0x3a>
    40d8:	099b      	lsrs	r3, r3, #6
    40da:	4398      	bics	r0, r3
		default:
			return -1;
    40dc:	4240      	negs	r0, r0
    40de:	e006      	b.n	40ee <hci_get_class+0x3a>
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    40e0:	2303      	movs	r3, #3
    40e2:	7a00      	ldrb	r0, [r0, #8]
    40e4:	4018      	ands	r0, r3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    40e6:	3803      	subs	r0, #3
    40e8:	1e43      	subs	r3, r0, #1
    40ea:	4198      	sbcs	r0, r3
    40ec:	3002      	adds	r0, #2
	}
}
    40ee:	4770      	bx	lr
			return -1;
    40f0:	2001      	movs	r0, #1
    40f2:	e7f3      	b.n	40dc <hci_get_class+0x28>

000040f4 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    40f4:	2001      	movs	r0, #1
    40f6:	4b05      	ldr	r3, [pc, #20]	; (410c <hci_init+0x18>)
    40f8:	4905      	ldr	r1, [pc, #20]	; (4110 <hci_init+0x1c>)
    40fa:	4240      	negs	r0, r0
    40fc:	6018      	str	r0, [r3, #0]
    40fe:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4100:	201f      	movs	r0, #31
    4102:	2100      	movs	r1, #0
    4104:	4b03      	ldr	r3, [pc, #12]	; (4114 <hci_init+0x20>)
    4106:	6018      	str	r0, [r3, #0]
    4108:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    410a:	4770      	bx	lr
    410c:	200022a8 	.word	0x200022a8
    4110:	00001fff 	.word	0x00001fff
    4114:	200022b0 	.word	0x200022b0

00004118 <cpu_sleep>:
	__WFE();
    4118:	bf20      	wfe
	__SEV();
    411a:	bf40      	sev
	__WFE();
    411c:	bf20      	wfe
}
    411e:	4770      	bx	lr

00004120 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4120:	b570      	push	{r4, r5, r6, lr}
    4122:	0006      	movs	r6, r0
    4124:	000d      	movs	r5, r1
    4126:	b088      	sub	sp, #32
	const u8_t ctrl_len_lut[] = {
    4128:	ac01      	add	r4, sp, #4
    412a:	221a      	movs	r2, #26
    412c:	4905      	ldr	r1, [pc, #20]	; (4144 <pdu_len_cmp+0x24>)
    412e:	0020      	movs	r0, r4
    4130:	f7fc fa9a 	bl	668 <memcpy>
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    4134:	5da0      	ldrb	r0, [r4, r6]
    4136:	1b40      	subs	r0, r0, r5
    4138:	4243      	negs	r3, r0
    413a:	4158      	adcs	r0, r3
    413c:	b2c0      	uxtb	r0, r0
}
    413e:	b008      	add	sp, #32
    4140:	bd70      	pop	{r4, r5, r6, pc}
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	0000aa87 	.word	0x0000aa87

00004148 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4148:	6008      	str	r0, [r1, #0]
}
    414a:	4770      	bx	lr

0000414c <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    414c:	2800      	cmp	r0, #0
    414e:	d104      	bne.n	415a <prepare_reduced+0xe>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    4150:	2380      	movs	r3, #128	; 0x80
    4152:	680a      	ldr	r2, [r1, #0]
    4154:	061b      	lsls	r3, r3, #24
    4156:	4313      	orrs	r3, r2
    4158:	600b      	str	r3, [r1, #0]
	}
}
    415a:	4770      	bx	lr

0000415c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    415c:	2800      	cmp	r0, #0
    415e:	d103      	bne.n	4168 <prepare_normal+0xc>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4160:	680b      	ldr	r3, [r1, #0]
    4162:	005b      	lsls	r3, r3, #1
    4164:	085b      	lsrs	r3, r3, #1
    4166:	600b      	str	r3, [r1, #0]
	}
}
    4168:	4770      	bx	lr

0000416a <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    416a:	b5f0      	push	{r4, r5, r6, r7, lr}
    416c:	0002      	movs	r2, r0
    416e:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    4170:	2701      	movs	r7, #1
	chan_next = 0;
    4172:	2000      	movs	r0, #0
	while (byte_count--) {
    4174:	42b2      	cmp	r2, r6
    4176:	d100      	bne.n	417a <chan_sel_remap+0x10>

		chan_map++;
	}

	return chan_next;
}
    4178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    417a:	0004      	movs	r4, r0
		bite = *chan_map;
    417c:	7815      	ldrb	r5, [r2, #0]
    417e:	3408      	adds	r4, #8
    4180:	b2e4      	uxtb	r4, r4
		while (bit_count--) {
    4182:	42a0      	cmp	r0, r4
    4184:	d101      	bne.n	418a <chan_sel_remap+0x20>
		chan_map++;
    4186:	3201      	adds	r2, #1
    4188:	e7f4      	b.n	4174 <chan_sel_remap+0xa>
			if (bite & 0x01) {
    418a:	423d      	tst	r5, r7
    418c:	d003      	beq.n	4196 <chan_sel_remap+0x2c>
				if (chan_index == 0) {
    418e:	2900      	cmp	r1, #0
    4190:	d0f2      	beq.n	4178 <chan_sel_remap+0xe>
				chan_index--;
    4192:	3901      	subs	r1, #1
    4194:	b2c9      	uxtb	r1, r1
			chan_next++;
    4196:	3001      	adds	r0, #1
    4198:	b2c0      	uxtb	r0, r0
			bite >>= 1;
    419a:	086d      	lsrs	r5, r5, #1
    419c:	e7f1      	b.n	4182 <chan_sel_remap+0x18>
	...

000041a0 <packet_rx_reserve_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    41a0:	239b      	movs	r3, #155	; 0x9b
	    _radio.packet_rx_last) {
    41a2:	2136      	movs	r1, #54	; 0x36
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    41a4:	b530      	push	{r4, r5, lr}
	if (_radio.packet_rx_acquire >=
    41a6:	4a0d      	ldr	r2, [pc, #52]	; (41dc <packet_rx_reserve_get+0x3c>)
    41a8:	005b      	lsls	r3, r3, #1
	    _radio.packet_rx_last) {
    41aa:	31ff      	adds	r1, #255	; 0xff
	if (_radio.packet_rx_acquire >=
    41ac:	5cd3      	ldrb	r3, [r2, r3]
	    _radio.packet_rx_last) {
    41ae:	5c54      	ldrb	r4, [r2, r1]
	if (_radio.packet_rx_acquire >=
    41b0:	42a3      	cmp	r3, r4
    41b2:	d30c      	bcc.n	41ce <packet_rx_reserve_get+0x2e>
			_radio.packet_rx_last);
    41b4:	5c54      	ldrb	r4, [r2, r1]
			_radio.packet_rx_last +
    41b6:	1b1b      	subs	r3, r3, r4
    41b8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
		return 0;
    41ba:	2400      	movs	r4, #0
	if (count > packet_rx_acquired_count_get()) {
    41bc:	4298      	cmp	r0, r3
    41be:	d804      	bhi.n	41ca <packet_rx_reserve_get+0x2a>
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    41c0:	5c53      	ldrb	r3, [r2, r1]
    41c2:	32fc      	adds	r2, #252	; 0xfc
    41c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
    41c6:	009b      	lsls	r3, r3, #2
    41c8:	589c      	ldr	r4, [r3, r2]
}
    41ca:	0020      	movs	r0, r4
    41cc:	bd30      	pop	{r4, r5, pc}
		return (_radio.packet_rx_count -
    41ce:	259a      	movs	r5, #154	; 0x9a
    41d0:	006d      	lsls	r5, r5, #1
			_radio.packet_rx_last +
    41d2:	5d55      	ldrb	r5, [r2, r5]
    41d4:	5c54      	ldrb	r4, [r2, r1]
    41d6:	195b      	adds	r3, r3, r5
    41d8:	e7ed      	b.n	41b6 <packet_rx_reserve_get+0x16>
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	20000254 	.word	0x20000254

000041e0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    41e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    41e2:	0003      	movs	r3, r0
    41e4:	0007      	movs	r7, r0
    41e6:	335c      	adds	r3, #92	; 0x5c
    41e8:	375d      	adds	r7, #93	; 0x5d
    41ea:	781b      	ldrb	r3, [r3, #0]
    41ec:	783d      	ldrb	r5, [r7, #0]
{
    41ee:	0004      	movs	r4, r0
		return 1;
    41f0:	2001      	movs	r0, #1
	if (conn->llcp_req != conn->llcp_ack) {
    41f2:	429d      	cmp	r5, r3
    41f4:	d128      	bne.n	4248 <conn_update_req+0x68>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    41f6:	7f63      	ldrb	r3, [r4, #29]
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    41f8:	1800      	adds	r0, r0, r0
	if (!conn->role) {
    41fa:	2b7f      	cmp	r3, #127	; 0x7f
    41fc:	d824      	bhi.n	4248 <conn_update_req+0x68>
		conn->llcp.conn_upd.win_size = 1;
    41fe:	0023      	movs	r3, r4
    4200:	2601      	movs	r6, #1
    4202:	3370      	adds	r3, #112	; 0x70
    4204:	701e      	strb	r6, [r3, #0]
		conn->llcp.conn_upd.win_offset_us = 0;
    4206:	2300      	movs	r3, #0
    4208:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->llcp.conn_upd.interval = conn->conn_interval;
    420a:	0023      	movs	r3, r4
    420c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    420e:	3362      	adds	r3, #98	; 0x62
    4210:	8018      	strh	r0, [r3, #0]
		conn->llcp.conn_upd.latency = conn->latency;
    4212:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
					      125 / 1000;
    4214:	21fa      	movs	r1, #250	; 0xfa
		conn->llcp.conn_upd.latency = conn->latency;
    4216:	805a      	strh	r2, [r3, #2]
					      conn->supervision_reload *
    4218:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
					      125 / 1000;
    421a:	0089      	lsls	r1, r1, #2
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    421c:	4358      	muls	r0, r3
					      conn->supervision_reload *
    421e:	237d      	movs	r3, #125	; 0x7d
    4220:	4358      	muls	r0, r3
					      125 / 1000;
    4222:	f7fc f81f 	bl	264 <__aeabi_idiv>
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4226:	0023      	movs	r3, r4
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4228:	0022      	movs	r2, r4
    422a:	2103      	movs	r1, #3
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    422c:	3366      	adds	r3, #102	; 0x66
    422e:	8018      	strh	r0, [r3, #0]
		return 0;
    4230:	2000      	movs	r0, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4232:	3260      	adds	r2, #96	; 0x60
    4234:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    4236:	345e      	adds	r4, #94	; 0x5e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4238:	438b      	bics	r3, r1
		conn->llcp.conn_upd.is_internal = 1;
    423a:	4333      	orrs	r3, r6
    423c:	1989      	adds	r1, r1, r6
    423e:	430b      	orrs	r3, r1
		conn->llcp_ack--;
    4240:	3d01      	subs	r5, #1
		conn->llcp.conn_upd.is_internal = 1;
    4242:	7013      	strb	r3, [r2, #0]
		conn->llcp_type = LLCP_CONN_UPD;
    4244:	7026      	strb	r6, [r4, #0]
		conn->llcp_ack--;
    4246:	703d      	strb	r5, [r7, #0]
}
    4248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000424c <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    424c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    424e:	780c      	ldrb	r4, [r1, #0]
{
    4250:	b085      	sub	sp, #20
    4252:	9001      	str	r0, [sp, #4]
    4254:	9102      	str	r1, [sp, #8]
    4256:	9203      	str	r2, [sp, #12]
	if (_first == last) {
		return 0;
    4258:	2500      	movs	r5, #0
	if (_first == last) {
    425a:	4294      	cmp	r4, r2
    425c:	d039      	beq.n	42d2 <tx_cmplt_get+0x86>
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    425e:	4e20      	ldr	r6, [pc, #128]	; (42e0 <tx_cmplt_get+0x94>)
    4260:	00e3      	lsls	r3, r4, #3
    4262:	36fc      	adds	r6, #252	; 0xfc
    4264:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    4266:	5a9b      	ldrh	r3, [r3, r2]
    4268:	8003      	strh	r3, [r0, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    426a:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    426c:	00e3      	lsls	r3, r4, #3
    426e:	18d3      	adds	r3, r2, r3
    4270:	9a01      	ldr	r2, [sp, #4]
    4272:	8811      	ldrh	r1, [r2, #0]
    4274:	881a      	ldrh	r2, [r3, #0]
    4276:	4291      	cmp	r1, r2
    4278:	d129      	bne.n	42ce <tx_cmplt_get+0x82>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    427a:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (void *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (void *)1) ||
    427c:	2801      	cmp	r0, #1
    427e:	d90d      	bls.n	429c <tx_cmplt_get+0x50>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4280:	2103      	movs	r1, #3
    4282:	0002      	movs	r2, r0
    4284:	438a      	bics	r2, r1
		if ((!node_tx) || (node_tx == (void *)1) ||
    4286:	d027      	beq.n	42d8 <tx_cmplt_get+0x8c>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4288:	1d02      	adds	r2, r0, #4
    428a:	d025      	beq.n	42d8 <tx_cmplt_get+0x8c>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    428c:	7942      	ldrb	r2, [r0, #5]
    428e:	2a00      	cmp	r2, #0
    4290:	d022      	beq.n	42d8 <tx_cmplt_get+0x8c>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    4292:	7902      	ldrb	r2, [r0, #4]
    4294:	400a      	ands	r2, r1
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4296:	3a01      	subs	r2, #1
    4298:	2a01      	cmp	r2, #1
    429a:	d81d      	bhi.n	42d8 <tx_cmplt_get+0x8c>
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)1;
    429c:	2201      	movs	r2, #1

			cmplt++;
    429e:	18ad      	adds	r5, r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    42a0:	605a      	str	r2, [r3, #4]
			cmplt++;
    42a2:	b2ed      	uxtb	r5, r5
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    42a4:	2303      	movs	r3, #3
    42a6:	0002      	movs	r2, r0
    42a8:	4f0d      	ldr	r7, [pc, #52]	; (42e0 <tx_cmplt_get+0x94>)
    42aa:	439a      	bics	r2, r3
    42ac:	d004      	beq.n	42b8 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    42ae:	0039      	movs	r1, r7
    42b0:	3159      	adds	r1, #89	; 0x59
    42b2:	31ff      	adds	r1, #255	; 0xff
    42b4:	f7fe fa2d 	bl	2712 <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    42b8:	23b4      	movs	r3, #180	; 0xb4
    42ba:	005b      	lsls	r3, r3, #1
		_first = _first + 1;
    42bc:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    42be:	5cfb      	ldrb	r3, [r7, r3]
		_first = _first + 1;
    42c0:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    42c2:	42a3      	cmp	r3, r4
    42c4:	d100      	bne.n	42c8 <tx_cmplt_get+0x7c>
			_first = 0;
    42c6:	2400      	movs	r4, #0
		}

	} while (_first != last);
    42c8:	9b03      	ldr	r3, [sp, #12]
    42ca:	429c      	cmp	r4, r3
    42cc:	d1cd      	bne.n	426a <tx_cmplt_get+0x1e>

	*first = _first;
    42ce:	9b02      	ldr	r3, [sp, #8]
    42d0:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    42d2:	0028      	movs	r0, r5
    42d4:	b005      	add	sp, #20
    42d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    42d8:	2202      	movs	r2, #2
    42da:	605a      	str	r2, [r3, #4]
    42dc:	e7e2      	b.n	42a4 <tx_cmplt_get+0x58>
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	20000254 	.word	0x20000254

000042e4 <connection_get>:
	if (handle < _radio.connection_count) {
    42e4:	4b0a      	ldr	r3, [pc, #40]	; (4310 <connection_get+0x2c>)
{
    42e6:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    42e8:	001a      	movs	r2, r3
    42ea:	32ff      	adds	r2, #255	; 0xff
    42ec:	7b52      	ldrb	r2, [r2, #13]
{
    42ee:	0004      	movs	r4, r0
	if (handle < _radio.connection_count) {
    42f0:	4282      	cmp	r2, r0
    42f2:	d90b      	bls.n	430c <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    42f4:	2182      	movs	r1, #130	; 0x82
    42f6:	33fc      	adds	r3, #252	; 0xfc
    42f8:	0002      	movs	r2, r0
    42fa:	0049      	lsls	r1, r1, #1
    42fc:	6898      	ldr	r0, [r3, #8]
    42fe:	f7fe fa1e 	bl	273e <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4302:	2800      	cmp	r0, #0
    4304:	d002      	beq.n	430c <connection_get+0x28>
    4306:	8c03      	ldrh	r3, [r0, #32]
    4308:	42a3      	cmp	r3, r4
    430a:	d000      	beq.n	430e <connection_get+0x2a>
	return 0;
    430c:	2000      	movs	r0, #0
}
    430e:	bd10      	pop	{r4, pc}
    4310:	20000254 	.word	0x20000254

00004314 <role_disable>:
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4314:	2302      	movs	r3, #2
{
    4316:	b5f0      	push	{r4, r5, r6, r7, lr}
    4318:	b089      	sub	sp, #36	; 0x24
    431a:	0004      	movs	r4, r0
    431c:	000f      	movs	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    431e:	9304      	str	r3, [sp, #16]
	switch (ticker_id_primary) {
    4320:	2805      	cmp	r0, #5
    4322:	d00f      	beq.n	4344 <role_disable+0x30>
    4324:	2806      	cmp	r0, #6
    4326:	d100      	bne.n	432a <role_disable+0x16>
    4328:	e090      	b.n	444c <role_disable+0x138>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    432a:	d800      	bhi.n	432e <role_disable+0x1a>
    432c:	e08b      	b.n	4446 <role_disable+0x132>
			conn_handle = ticker_id_primary -
    432e:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    4330:	b280      	uxth	r0, r0
    4332:	f7ff ffd7 	bl	42e4 <connection_get>
			if (!conn) {
    4336:	2800      	cmp	r0, #0
    4338:	d100      	bne.n	433c <role_disable+0x28>
    433a:	e0df      	b.n	44fc <role_disable+0x1e8>
			ticks_xtal_to_start =
    433c:	6803      	ldr	r3, [r0, #0]
    433e:	9303      	str	r3, [sp, #12]
			ticks_active_to_start =
    4340:	6843      	ldr	r3, [r0, #4]
    4342:	e08a      	b.n	445a <role_disable+0x146>
		ticks_xtal_to_start =
    4344:	4b6e      	ldr	r3, [pc, #440]	; (4500 <role_disable+0x1ec>)
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4346:	2000      	movs	r0, #0
		ticks_xtal_to_start =
    4348:	695a      	ldr	r2, [r3, #20]
		ticks_active_to_start =
    434a:	699b      	ldr	r3, [r3, #24]
		ticks_xtal_to_start =
    434c:	9203      	str	r2, [sp, #12]
		ticks_active_to_start =
    434e:	9302      	str	r3, [sp, #8]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4350:	ab04      	add	r3, sp, #16
    4352:	9300      	str	r3, [sp, #0]
    4354:	000a      	movs	r2, r1
    4356:	4b6b      	ldr	r3, [pc, #428]	; (4504 <role_disable+0x1f0>)
    4358:	2103      	movs	r1, #3
    435a:	f7ff f87d 	bl	3458 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    435e:	2802      	cmp	r0, #2
    4360:	d069      	beq.n	4436 <role_disable+0x122>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4362:	9b04      	ldr	r3, [sp, #16]
    4364:	2b00      	cmp	r3, #0
    4366:	d16a      	bne.n	443e <role_disable+0x12a>
	LL_ASSERT(!_radio.ticker_id_stop);
    4368:	4d65      	ldr	r5, [pc, #404]	; (4500 <role_disable+0x1ec>)
    436a:	7ba8      	ldrb	r0, [r5, #14]
    436c:	b2c0      	uxtb	r0, r0
    436e:	2800      	cmp	r0, #0
    4370:	d169      	bne.n	4446 <role_disable+0x132>
	ret_cb = TICKER_STATUS_BUSY;
    4372:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4374:	4e63      	ldr	r6, [pc, #396]	; (4504 <role_disable+0x1f0>)
	_radio.ticker_id_stop = ticker_id_primary;
    4376:	73ac      	strb	r4, [r5, #14]
	ret_cb = TICKER_STATUS_BUSY;
    4378:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    437a:	ab04      	add	r3, sp, #16
    437c:	9300      	str	r3, [sp, #0]
    437e:	0022      	movs	r2, r4
    4380:	0033      	movs	r3, r6
    4382:	2103      	movs	r1, #3
    4384:	f7ff f868 	bl	3458 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4388:	2802      	cmp	r0, #2
    438a:	d100      	bne.n	438e <role_disable+0x7a>
    438c:	e067      	b.n	445e <role_disable+0x14a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    438e:	9b04      	ldr	r3, [sp, #16]
    4390:	4d5b      	ldr	r5, [pc, #364]	; (4500 <role_disable+0x1ec>)
    4392:	2b00      	cmp	r3, #0
    4394:	d148      	bne.n	4428 <role_disable+0x114>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4396:	7b2b      	ldrb	r3, [r5, #12]
    4398:	429c      	cmp	r4, r3
    439a:	d002      	beq.n	43a2 <role_disable+0x8e>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    439c:	7b6b      	ldrb	r3, [r5, #13]
    439e:	429c      	cmp	r4, r3
    43a0:	d13d      	bne.n	441e <role_disable+0x10a>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    43a2:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43a4:	2200      	movs	r2, #0
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    43a6:	9305      	str	r3, [sp, #20]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43a8:	ab05      	add	r3, sp, #20
    43aa:	9300      	str	r3, [sp, #0]
    43ac:	2103      	movs	r1, #3
    43ae:	0033      	movs	r3, r6
    43b0:	0010      	movs	r0, r2
    43b2:	f7ff f851 	bl	3458 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    43b6:	2802      	cmp	r0, #2
    43b8:	d107      	bne.n	43ca <role_disable+0xb6>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    43ba:	2201      	movs	r2, #1
    43bc:	0011      	movs	r1, r2
    43be:	1880      	adds	r0, r0, r2
    43c0:	f7fe fa20 	bl	2804 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    43c4:	9b05      	ldr	r3, [sp, #20]
    43c6:	2b02      	cmp	r3, #2
    43c8:	d03d      	beq.n	4446 <role_disable+0x132>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    43ca:	9805      	ldr	r0, [sp, #20]
    43cc:	2800      	cmp	r0, #0
    43ce:	d162      	bne.n	4496 <role_disable+0x182>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    43d0:	2302      	movs	r3, #2
    43d2:	9306      	str	r3, [sp, #24]
		LL_ASSERT(_radio.ticker_id_prepare);
    43d4:	7b2b      	ldrb	r3, [r5, #12]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d035      	beq.n	4446 <role_disable+0x132>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43da:	ab06      	add	r3, sp, #24
		_radio.ticker_id_prepare = 0;
    43dc:	7328      	strb	r0, [r5, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43de:	2201      	movs	r2, #1
    43e0:	9300      	str	r3, [sp, #0]
    43e2:	2103      	movs	r1, #3
    43e4:	0033      	movs	r3, r6
    43e6:	f7ff f837 	bl	3458 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    43ea:	2802      	cmp	r0, #2
    43ec:	d107      	bne.n	43fe <role_disable+0xea>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    43ee:	2201      	movs	r2, #1
    43f0:	0011      	movs	r1, r2
    43f2:	1880      	adds	r0, r0, r2
    43f4:	f7fe fa06 	bl	2804 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    43f8:	9b06      	ldr	r3, [sp, #24]
    43fa:	2b02      	cmp	r3, #2
    43fc:	d023      	beq.n	4446 <role_disable+0x132>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    43fe:	9906      	ldr	r1, [sp, #24]
    4400:	2900      	cmp	r1, #0
    4402:	d13b      	bne.n	447c <role_disable+0x168>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4404:	9b03      	ldr	r3, [sp, #12]
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4406:	9a02      	ldr	r2, [sp, #8]
			ticks_xtal_to_start &= ~XON_BITMASK;
    4408:	005b      	lsls	r3, r3, #1
    440a:	085b      	lsrs	r3, r3, #1
			if (ticks_active_to_start > ticks_xtal_to_start) {
    440c:	429a      	cmp	r2, r3
    440e:	d940      	bls.n	4492 <role_disable+0x17e>
				ret = mayfly_enqueue(
    4410:	4b3d      	ldr	r3, [pc, #244]	; (4508 <role_disable+0x1f4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4412:	000a      	movs	r2, r1
    4414:	2003      	movs	r0, #3
    4416:	f7fe fa19 	bl	284c <mayfly_enqueue>
			LL_ASSERT(!ret);
    441a:	2800      	cmp	r0, #0
    441c:	d113      	bne.n	4446 <role_disable+0x132>
	if (!_radio.ticker_id_stop) {
    441e:	7bab      	ldrb	r3, [r5, #14]
    4420:	2b00      	cmp	r3, #0
    4422:	d101      	bne.n	4428 <role_disable+0x114>
		ret_cb = TICKER_STATUS_FAILURE;
    4424:	3301      	adds	r3, #1
    4426:	9304      	str	r3, [sp, #16]
	_radio.ticker_id_stop = 0;
    4428:	2300      	movs	r3, #0
    442a:	73ab      	strb	r3, [r5, #14]
	return ret_cb;
    442c:	9804      	ldr	r0, [sp, #16]
}
    442e:	b009      	add	sp, #36	; 0x24
    4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
				cpu_sleep();
    4432:	f7ff fe71 	bl	4118 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4436:	9b04      	ldr	r3, [sp, #16]
    4438:	2b02      	cmp	r3, #2
    443a:	d0fa      	beq.n	4432 <role_disable+0x11e>
    443c:	e791      	b.n	4362 <role_disable+0x4e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    443e:	9b04      	ldr	r3, [sp, #16]
    4440:	2b01      	cmp	r3, #1
    4442:	d100      	bne.n	4446 <role_disable+0x132>
    4444:	e790      	b.n	4368 <role_disable+0x54>
		LL_ASSERT(0);
    4446:	b662      	cpsie	i
    4448:	2004      	movs	r0, #4
    444a:	df02      	svc	2
		ticks_xtal_to_start =
    444c:	4b2c      	ldr	r3, [pc, #176]	; (4500 <role_disable+0x1ec>)
    444e:	001a      	movs	r2, r3
    4450:	32cc      	adds	r2, #204	; 0xcc
    4452:	6812      	ldr	r2, [r2, #0]
		ticks_active_to_start =
    4454:	33d0      	adds	r3, #208	; 0xd0
    4456:	681b      	ldr	r3, [r3, #0]
		ticks_xtal_to_start =
    4458:	9203      	str	r2, [sp, #12]
			ticks_active_to_start =
    445a:	9302      	str	r3, [sp, #8]
		break;
    445c:	e784      	b.n	4368 <role_disable+0x54>
		if (_radio.ticker_id_event == ticker_id_primary) {
    445e:	7b6b      	ldrb	r3, [r5, #13]
    4460:	429c      	cmp	r4, r3
    4462:	d104      	bne.n	446e <role_disable+0x15a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4464:	2201      	movs	r2, #1
    4466:	2003      	movs	r0, #3
    4468:	0011      	movs	r1, r2
    446a:	f7fe f9cb 	bl	2804 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    446e:	9b04      	ldr	r3, [sp, #16]
    4470:	2b02      	cmp	r3, #2
    4472:	d000      	beq.n	4476 <role_disable+0x162>
    4474:	e78b      	b.n	438e <role_disable+0x7a>
			cpu_sleep();
    4476:	f7ff fe4f 	bl	4118 <cpu_sleep>
    447a:	e7f8      	b.n	446e <role_disable+0x15a>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    447c:	9b06      	ldr	r3, [sp, #24]
    447e:	2b01      	cmp	r3, #1
    4480:	d1e1      	bne.n	4446 <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4482:	2200      	movs	r2, #0
    4484:	4b20      	ldr	r3, [pc, #128]	; (4508 <role_disable+0x1f4>)
    4486:	0011      	movs	r1, r2
    4488:	2003      	movs	r0, #3
    448a:	f7fe f9df 	bl	284c <mayfly_enqueue>
    448e:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    4490:	d1d9      	bne.n	4446 <role_disable+0x132>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4492:	4b1e      	ldr	r3, [pc, #120]	; (450c <role_disable+0x1f8>)
    4494:	e7bd      	b.n	4412 <role_disable+0xfe>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4496:	9c05      	ldr	r4, [sp, #20]
    4498:	2c01      	cmp	r4, #1
    449a:	d1d4      	bne.n	4446 <role_disable+0x132>
		if (ticker_id_stop != TICKER_NULL) {
    449c:	2fff      	cmp	r7, #255	; 0xff
    449e:	d019      	beq.n	44d4 <role_disable+0x1c0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    44a0:	2302      	movs	r3, #2
    44a2:	9307      	str	r3, [sp, #28]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    44a4:	ab07      	add	r3, sp, #28
    44a6:	9300      	str	r3, [sp, #0]
    44a8:	003a      	movs	r2, r7
    44aa:	0033      	movs	r3, r6
    44ac:	2103      	movs	r1, #3
    44ae:	2000      	movs	r0, #0
    44b0:	f7fe ffd2 	bl	3458 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    44b4:	2802      	cmp	r0, #2
    44b6:	d107      	bne.n	44c8 <role_disable+0x1b4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    44b8:	0022      	movs	r2, r4
    44ba:	0021      	movs	r1, r4
    44bc:	3001      	adds	r0, #1
    44be:	f7fe f9a1 	bl	2804 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    44c2:	9b07      	ldr	r3, [sp, #28]
    44c4:	2b02      	cmp	r3, #2
    44c6:	d0be      	beq.n	4446 <role_disable+0x132>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    44c8:	9b07      	ldr	r3, [sp, #28]
    44ca:	2b00      	cmp	r3, #0
    44cc:	d002      	beq.n	44d4 <role_disable+0x1c0>
    44ce:	9b07      	ldr	r3, [sp, #28]
    44d0:	2b01      	cmp	r3, #1
    44d2:	d1b8      	bne.n	4446 <role_disable+0x132>
		if (_radio.role != ROLE_NONE) {
    44d4:	7beb      	ldrb	r3, [r5, #15]
    44d6:	2b00      	cmp	r3, #0
    44d8:	d0a1      	beq.n	441e <role_disable+0x10a>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    44da:	2204      	movs	r2, #4
    44dc:	4b0c      	ldr	r3, [pc, #48]	; (4510 <role_disable+0x1fc>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    44de:	2003      	movs	r0, #3
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    44e0:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    44e2:	2200      	movs	r2, #0
    44e4:	0011      	movs	r1, r2
    44e6:	f7fe f9b1 	bl	284c <mayfly_enqueue>
			LL_ASSERT(!ret);
    44ea:	2800      	cmp	r0, #0
    44ec:	d1ab      	bne.n	4446 <role_disable+0x132>
			while (_radio.role != ROLE_NONE) {
    44ee:	7beb      	ldrb	r3, [r5, #15]
    44f0:	2b00      	cmp	r3, #0
    44f2:	d100      	bne.n	44f6 <role_disable+0x1e2>
    44f4:	e793      	b.n	441e <role_disable+0x10a>
				cpu_sleep();
    44f6:	f7ff fe0f 	bl	4118 <cpu_sleep>
    44fa:	e7f8      	b.n	44ee <role_disable+0x1da>
				return 1;
    44fc:	2001      	movs	r0, #1
    44fe:	e796      	b.n	442e <role_disable+0x11a>
    4500:	20000254 	.word	0x20000254
    4504:	00004149 	.word	0x00004149
    4508:	200022e8 	.word	0x200022e8
    450c:	20002378 	.word	0x20002378
    4510:	20002328 	.word	0x20002328

00004514 <sched_after_mstr_free_slot_get>:
{
    4514:	b5f0      	push	{r4, r5, r6, r7, lr}
    4516:	b08f      	sub	sp, #60	; 0x3c
    4518:	001f      	movs	r7, r3
    451a:	9209      	str	r2, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    451c:	1d0b      	adds	r3, r1, #4
	ticker_id = ticker_id_prev = 0xff;
    451e:	2217      	movs	r2, #23
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    4520:	2400      	movs	r4, #0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    4522:	9308      	str	r3, [sp, #32]
	ticker_id = ticker_id_prev = 0xff;
    4524:	23ff      	movs	r3, #255	; 0xff
    4526:	a906      	add	r1, sp, #24
    4528:	1852      	adds	r2, r2, r1
{
    452a:	9007      	str	r0, [sp, #28]
	ticker_id = ticker_id_prev = 0xff;
    452c:	7013      	strb	r3, [r2, #0]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    452e:	603c      	str	r4, [r7, #0]
    4530:	940c      	str	r4, [sp, #48]	; 0x30
	ticker_id = ticker_id_prev = 0xff;
    4532:	9306      	str	r3, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    4534:	9405      	str	r4, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4536:	2302      	movs	r3, #2
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    4538:	2517      	movs	r5, #23
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    453a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    453c:	ab06      	add	r3, sp, #24
    453e:	18ed      	adds	r5, r5, r3
    4540:	ab0d      	add	r3, sp, #52	; 0x34
    4542:	9302      	str	r3, [sp, #8]
    4544:	4b36      	ldr	r3, [pc, #216]	; (4620 <sched_after_mstr_free_slot_get+0x10c>)
    4546:	002a      	movs	r2, r5
    4548:	9301      	str	r3, [sp, #4]
    454a:	ab0c      	add	r3, sp, #48	; 0x30
    454c:	9300      	str	r3, [sp, #0]
    454e:	9907      	ldr	r1, [sp, #28]
    4550:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4552:	2000      	movs	r0, #0
    4554:	f7fe ffae 	bl	34b4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    4558:	2802      	cmp	r0, #2
    455a:	d009      	beq.n	4570 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    455c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    455e:	2b00      	cmp	r3, #0
    4560:	d00a      	beq.n	4578 <sched_after_mstr_free_slot_get+0x64>
    4562:	b662      	cpsie	i
    4564:	2004      	movs	r0, #4
    4566:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4568:	9907      	ldr	r1, [sp, #28]
    456a:	2000      	movs	r0, #0
    456c:	f7ff f808 	bl	3580 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4572:	2b02      	cmp	r3, #2
    4574:	d0f8      	beq.n	4568 <sched_after_mstr_free_slot_get+0x54>
    4576:	e7f1      	b.n	455c <sched_after_mstr_free_slot_get+0x48>
		if (ticker_id == 0xff) {
    4578:	782a      	ldrb	r2, [r5, #0]
    457a:	2aff      	cmp	r2, #255	; 0xff
    457c:	d04c      	beq.n	4618 <sched_after_mstr_free_slot_get+0x104>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    457e:	2a06      	cmp	r2, #6
    4580:	d9d9      	bls.n	4536 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    4582:	4b28      	ldr	r3, [pc, #160]	; (4624 <sched_after_mstr_free_slot_get+0x110>)
    4584:	0019      	movs	r1, r3
    4586:	31ff      	adds	r1, #255	; 0xff
    4588:	7b49      	ldrb	r1, [r1, #13]
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    458a:	3107      	adds	r1, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    458c:	428a      	cmp	r2, r1
    458e:	dad2      	bge.n	4536 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4590:	2182      	movs	r1, #130	; 0x82
    4592:	3a07      	subs	r2, #7
    4594:	33fc      	adds	r3, #252	; 0xfc
    4596:	b292      	uxth	r2, r2
    4598:	0049      	lsls	r1, r1, #1
    459a:	6898      	ldr	r0, [r3, #8]
    459c:	f7fe f8cf 	bl	273e <mem_get>
		if (conn && !conn->role) {
    45a0:	2800      	cmp	r0, #0
    45a2:	d0c8      	beq.n	4536 <sched_after_mstr_free_slot_get+0x22>
    45a4:	7f43      	ldrb	r3, [r0, #29]
    45a6:	2b7f      	cmp	r3, #127	; 0x7f
    45a8:	d8c5      	bhi.n	4536 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    45aa:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    45ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    45ae:	6842      	ldr	r2, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    45b0:	2b00      	cmp	r3, #0
    45b2:	da15      	bge.n	45e0 <sched_after_mstr_free_slot_get+0xcc>
				ticks_slot_abs_curr =
    45b4:	005b      	lsls	r3, r3, #1
    45b6:	085d      	lsrs	r5, r3, #1
				u32_t ticks_prepare_to_start =
    45b8:	6883      	ldr	r3, [r0, #8]
    45ba:	4293      	cmp	r3, r2
    45bc:	d200      	bcs.n	45c0 <sched_after_mstr_free_slot_get+0xac>
    45be:	0013      	movs	r3, r2
    45c0:	199e      	adds	r6, r3, r6
				ticks_to_expire_normal -=
    45c2:	1b76      	subs	r6, r6, r5
			ticks_slot_abs_curr +=
    45c4:	68c3      	ldr	r3, [r0, #12]
    45c6:	3304      	adds	r3, #4
    45c8:	195d      	adds	r5, r3, r5
			if ((ticker_id_prev != 0xFF) &&
    45ca:	9b06      	ldr	r3, [sp, #24]
    45cc:	2bff      	cmp	r3, #255	; 0xff
    45ce:	d10c      	bne.n	45ea <sched_after_mstr_free_slot_get+0xd6>
			ticker_id_prev = ticker_id;
    45d0:	2317      	movs	r3, #23
    45d2:	aa06      	add	r2, sp, #24
    45d4:	189b      	adds	r3, r3, r2
    45d6:	781b      	ldrb	r3, [r3, #0]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    45d8:	002c      	movs	r4, r5
			ticker_id_prev = ticker_id;
    45da:	9306      	str	r3, [sp, #24]
			ticks_to_expire_prev = ticks_to_expire_normal;
    45dc:	9605      	str	r6, [sp, #20]
    45de:	e7aa      	b.n	4536 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    45e0:	0015      	movs	r5, r2
    45e2:	429a      	cmp	r2, r3
    45e4:	d2ee      	bcs.n	45c4 <sched_after_mstr_free_slot_get+0xb0>
    45e6:	001d      	movs	r5, r3
    45e8:	e7ec      	b.n	45c4 <sched_after_mstr_free_slot_get+0xb0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    45ea:	9905      	ldr	r1, [sp, #20]
    45ec:	0030      	movs	r0, r6
    45ee:	f7fe ffdb 	bl	35a8 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    45f2:	9b08      	ldr	r3, [sp, #32]
    45f4:	18e3      	adds	r3, r4, r3
			if ((ticker_id_prev != 0xFF) &&
    45f6:	4298      	cmp	r0, r3
    45f8:	d9ea      	bls.n	45d0 <sched_after_mstr_free_slot_get+0xbc>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    45fa:	9b05      	ldr	r3, [sp, #20]
    45fc:	4a0a      	ldr	r2, [pc, #40]	; (4628 <sched_after_mstr_free_slot_get+0x114>)
    45fe:	1918      	adds	r0, r3, r4
    4600:	2100      	movs	r1, #0
    4602:	2307      	movs	r3, #7
    4604:	f7fb feb0 	bl	368 <__aeabi_lmul>
    4608:	4a08      	ldr	r2, [pc, #32]	; (462c <sched_after_mstr_free_slot_get+0x118>)
    460a:	2300      	movs	r3, #0
    460c:	f7fb fe8c 	bl	328 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    4610:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    4612:	6038      	str	r0, [r7, #0]
}
    4614:	b00f      	add	sp, #60	; 0x3c
    4616:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ticker_id_prev != 0xff) {
    4618:	9b06      	ldr	r3, [sp, #24]
    461a:	2bff      	cmp	r3, #255	; 0xff
    461c:	d1ed      	bne.n	45fa <sched_after_mstr_free_slot_get+0xe6>
    461e:	e7f9      	b.n	4614 <sched_after_mstr_free_slot_get+0x100>
    4620:	00004149 	.word	0x00004149
    4624:	20000254 	.word	0x20000254
    4628:	1afd498d 	.word	0x1afd498d
    462c:	3b9aca00 	.word	0x3b9aca00

00004630 <isr_adv_ci_adva_check>:
{
    4630:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    4632:	7804      	ldrb	r4, [r0, #0]
    4634:	780a      	ldrb	r2, [r1, #0]
    4636:	0665      	lsls	r5, r4, #25
    4638:	0fed      	lsrs	r5, r5, #31
    463a:	09d2      	lsrs	r2, r2, #7
    463c:	2300      	movs	r3, #0
    463e:	4295      	cmp	r5, r2
    4640:	d10d      	bne.n	465e <isr_adv_ci_adva_check+0x2e>
    4642:	330f      	adds	r3, #15
    4644:	3108      	adds	r1, #8
    4646:	401c      	ands	r4, r3
    4648:	000e      	movs	r6, r1
    464a:	1c85      	adds	r5, r0, #2
    464c:	2c01      	cmp	r4, #1
    464e:	d008      	beq.n	4662 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    4650:	2206      	movs	r2, #6
    4652:	0031      	movs	r1, r6
    4654:	0028      	movs	r0, r5
    4656:	f7fb fff4 	bl	642 <memcmp>
	return (adv->tx_addr == ci->rx_addr) &&
    465a:	4243      	negs	r3, r0
    465c:	4143      	adcs	r3, r0
    465e:	0018      	movs	r0, r3
}
    4660:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    4662:	2206      	movs	r2, #6
    4664:	0028      	movs	r0, r5
    4666:	f7fb ffec 	bl	642 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    466a:	2800      	cmp	r0, #0
    466c:	d1f0      	bne.n	4650 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    466e:	0023      	movs	r3, r4
    4670:	e7f5      	b.n	465e <isr_adv_ci_adva_check+0x2e>
	...

00004674 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    4674:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    4676:	21ba      	movs	r1, #186	; 0xba
    4678:	2476      	movs	r4, #118	; 0x76
    467a:	4a0b      	ldr	r2, [pc, #44]	; (46a8 <rx_fc_lock+0x34>)
    467c:	0049      	lsls	r1, r1, #1
    467e:	34ff      	adds	r4, #255	; 0xff
    4680:	5c53      	ldrb	r3, [r2, r1]
    4682:	5d14      	ldrb	r4, [r2, r4]
    4684:	429c      	cmp	r4, r3
    4686:	d10d      	bne.n	46a4 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    4688:	5c53      	ldrb	r3, [r2, r1]
    468a:	33b4      	adds	r3, #180	; 0xb4
    468c:	005b      	lsls	r3, r3, #1
    468e:	18d3      	adds	r3, r2, r3
    4690:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
    4692:	5c53      	ldrb	r3, [r2, r1]
    4694:	3301      	adds	r3, #1
    4696:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
    4698:	2b03      	cmp	r3, #3
    469a:	d100      	bne.n	469e <rx_fc_lock+0x2a>
			req = 0;
    469c:	2300      	movs	r3, #0
		}
		_radio.fc_req = req;
    469e:	21ba      	movs	r1, #186	; 0xba
    46a0:	0049      	lsls	r1, r1, #1
    46a2:	5453      	strb	r3, [r2, r1]
	}
}
    46a4:	bd10      	pop	{r4, pc}
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	20000254 	.word	0x20000254

000046ac <ticker_job_disable>:
{
    46ac:	b510      	push	{r4, lr}
	if (_radio.state != STATE_NONE) {
    46ae:	4b05      	ldr	r3, [pc, #20]	; (46c4 <ticker_job_disable+0x18>)
    46b0:	7c1b      	ldrb	r3, [r3, #16]
    46b2:	2b00      	cmp	r3, #0
    46b4:	d004      	beq.n	46c0 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    46b6:	2101      	movs	r1, #1
    46b8:	2200      	movs	r2, #0
    46ba:	0008      	movs	r0, r1
    46bc:	f7fe f8a2 	bl	2804 <mayfly_enable>
}
    46c0:	bd10      	pop	{r4, pc}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	20000254 	.word	0x20000254

000046c8 <hdr_conn_get>:
{
    46c8:	b510      	push	{r4, lr}
    46ca:	000c      	movs	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    46cc:	2806      	cmp	r0, #6
    46ce:	d90a      	bls.n	46e6 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    46d0:	2182      	movs	r1, #130	; 0x82
    46d2:	4b0b      	ldr	r3, [pc, #44]	; (4700 <hdr_conn_get+0x38>)
    46d4:	3807      	subs	r0, #7
    46d6:	33fc      	adds	r3, #252	; 0xfc
    46d8:	b282      	uxth	r2, r0
    46da:	0049      	lsls	r1, r1, #1
    46dc:	6898      	ldr	r0, [r3, #8]
    46de:	f7fe f82e 	bl	273e <mem_get>
    46e2:	6020      	str	r0, [r4, #0]
}
    46e4:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    46e6:	2805      	cmp	r0, #5
    46e8:	d003      	beq.n	46f2 <hdr_conn_get+0x2a>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    46ea:	2806      	cmp	r0, #6
    46ec:	d004      	beq.n	46f8 <hdr_conn_get+0x30>
	return NULL;
    46ee:	2000      	movs	r0, #0
    46f0:	e7f8      	b.n	46e4 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    46f2:	4803      	ldr	r0, [pc, #12]	; (4700 <hdr_conn_get+0x38>)
    46f4:	3014      	adds	r0, #20
    46f6:	e7f5      	b.n	46e4 <hdr_conn_get+0x1c>
		return &_radio.scanner.hdr;
    46f8:	4801      	ldr	r0, [pc, #4]	; (4700 <hdr_conn_get+0x38>)
    46fa:	30cc      	adds	r0, #204	; 0xcc
    46fc:	e7f2      	b.n	46e4 <hdr_conn_get+0x1c>
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	20000254 	.word	0x20000254

00004704 <mayfly_xtal_retain.part.15>:
			s_xtal_retained = 0;
    4704:	2200      	movs	r2, #0
    4706:	4b09      	ldr	r3, [pc, #36]	; (472c <mayfly_xtal_retain.part.15+0x28>)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    4708:	b510      	push	{r4, lr}
			s_xtal_retained = 0;
    470a:	701a      	strb	r2, [r3, #0]
    470c:	4b08      	ldr	r3, [pc, #32]	; (4730 <mayfly_xtal_retain.part.15+0x2c>)
			switch (caller_id) {
    470e:	4290      	cmp	r0, r2
    4710:	d002      	beq.n	4718 <mayfly_xtal_retain.part.15+0x14>
    4712:	2801      	cmp	r0, #1
    4714:	d106      	bne.n	4724 <mayfly_xtal_retain.part.15+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    4716:	3310      	adds	r3, #16
			retval = mayfly_enqueue(caller_id,
    4718:	2200      	movs	r2, #0
    471a:	0011      	movs	r1, r2
    471c:	f7fe f896 	bl	284c <mayfly_enqueue>
			LL_ASSERT(!retval);
    4720:	2800      	cmp	r0, #0
    4722:	d002      	beq.n	472a <mayfly_xtal_retain.part.15+0x26>
    4724:	b662      	cpsie	i
    4726:	2004      	movs	r0, #4
    4728:	df02      	svc	2
}
    472a:	bd10      	pop	{r4, pc}
    472c:	20000458 	.word	0x20000458
    4730:	20002388 	.word	0x20002388

00004734 <rx_packet_set>:
{
    4734:	b570      	push	{r4, r5, r6, lr}
    4736:	000d      	movs	r5, r1
	radio_phy_set(phy, 0);
    4738:	2100      	movs	r1, #0
{
    473a:	0004      	movs	r4, r0
	radio_phy_set(phy, 0);
    473c:	0008      	movs	r0, r1
    473e:	f004 fa23 	bl	8b88 <radio_phy_set>
	if (conn->enc_rx) {
    4742:	0023      	movs	r3, r4
    4744:	33a8      	adds	r3, #168	; 0xa8
    4746:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4748:	2201      	movs	r2, #1
	if (conn->enc_rx) {
    474a:	06db      	lsls	r3, r3, #27
    474c:	d50c      	bpl.n	4768 <rx_packet_set+0x34>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    474e:	211f      	movs	r1, #31
    4750:	2008      	movs	r0, #8
    4752:	f004 fa67 	bl	8c24 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    4756:	0020      	movs	r0, r4
    4758:	002a      	movs	r2, r5
    475a:	30a9      	adds	r0, #169	; 0xa9
    475c:	2100      	movs	r1, #0
    475e:	f004 fc75 	bl	904c <radio_ccm_rx_pkt_set>
		radio_pkt_rx_set(pdu_data_rx);
    4762:	f004 fa85 	bl	8c70 <radio_pkt_rx_set>
}
    4766:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    4768:	2008      	movs	r0, #8
    476a:	211b      	movs	r1, #27
    476c:	f004 fa5a 	bl	8c24 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    4770:	0028      	movs	r0, r5
    4772:	e7f6      	b.n	4762 <rx_packet_set+0x2e>

00004774 <tx_packet_set>:
{
    4774:	b570      	push	{r4, r5, r6, lr}
    4776:	000d      	movs	r5, r1
	radio_phy_set(phy, flags);
    4778:	2100      	movs	r1, #0
{
    477a:	0004      	movs	r4, r0
	radio_phy_set(phy, flags);
    477c:	0008      	movs	r0, r1
    477e:	f004 fa03 	bl	8b88 <radio_phy_set>
	if (conn->enc_tx) {
    4782:	0023      	movs	r3, r4
    4784:	33a8      	adds	r3, #168	; 0xa8
    4786:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4788:	2201      	movs	r2, #1
	if (conn->enc_tx) {
    478a:	069b      	lsls	r3, r3, #26
    478c:	d50b      	bpl.n	47a6 <tx_packet_set+0x32>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    478e:	211f      	movs	r1, #31
    4790:	2008      	movs	r0, #8
    4792:	f004 fa47 	bl	8c24 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    4796:	0020      	movs	r0, r4
    4798:	0029      	movs	r1, r5
    479a:	30ca      	adds	r0, #202	; 0xca
    479c:	f004 fc94 	bl	90c8 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    47a0:	f004 fa6e 	bl	8c80 <radio_pkt_tx_set>
}
    47a4:	bd70      	pop	{r4, r5, r6, pc}
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    47a6:	2008      	movs	r0, #8
    47a8:	211b      	movs	r1, #27
    47aa:	f004 fa3b 	bl	8c24 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    47ae:	0028      	movs	r0, r5
    47b0:	e7f6      	b.n	47a0 <tx_packet_set+0x2c>
	...

000047b4 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    47b4:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    47b6:	4e15      	ldr	r6, [pc, #84]	; (480c <isr_scan_tgta_check.isra.30+0x58>)
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    47b8:	0005      	movs	r5, r0
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    47ba:	0033      	movs	r3, r6
    47bc:	33dd      	adds	r3, #221	; 0xdd
    47be:	781a      	ldrb	r2, [r3, #0]
    47c0:	7803      	ldrb	r3, [r0, #0]
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    47c2:	000c      	movs	r4, r1
			BDADDR_SIZE) == 0))) ||
    47c4:	09d2      	lsrs	r2, r2, #7
    47c6:	09db      	lsrs	r3, r3, #7
    47c8:	429a      	cmp	r2, r3
    47ca:	d006      	beq.n	47da <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    47cc:	2302      	movs	r3, #2
    47ce:	36dd      	adds	r6, #221	; 0xdd
    47d0:	7830      	ldrb	r0, [r6, #0]
    47d2:	0900      	lsrs	r0, r0, #4
    47d4:	4018      	ands	r0, r3
    47d6:	d10b      	bne.n	47f0 <isr_scan_tgta_check.isra.30+0x3c>
}
    47d8:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    47da:	0030      	movs	r0, r6
    47dc:	0029      	movs	r1, r5
    47de:	30de      	adds	r0, #222	; 0xde
    47e0:	2206      	movs	r2, #6
    47e2:	3108      	adds	r1, #8
    47e4:	f7fb ff2d 	bl	642 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    47e8:	2800      	cmp	r0, #0
    47ea:	d1ef      	bne.n	47cc <isr_scan_tgta_check.isra.30+0x18>
			BDADDR_SIZE) == 0))) ||
    47ec:	2001      	movs	r0, #1
    47ee:	e7f3      	b.n	47d8 <isr_scan_tgta_check.isra.30+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    47f0:	782b      	ldrb	r3, [r5, #0]
			BDADDR_SIZE) == 0))) ||
    47f2:	2000      	movs	r0, #0
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    47f4:	2b7f      	cmp	r3, #127	; 0x7f
    47f6:	d9ef      	bls.n	47d8 <isr_scan_tgta_check.isra.30+0x24>
	    (pdu->rx_addr != 0) &&
    47f8:	223f      	movs	r2, #63	; 0x3f
    47fa:	7b6b      	ldrb	r3, [r5, #13]
    47fc:	4393      	bics	r3, r2
    47fe:	2b40      	cmp	r3, #64	; 0x40
    4800:	d1ea      	bne.n	47d8 <isr_scan_tgta_check.isra.30+0x24>
		if (dir_report) {
    4802:	4284      	cmp	r4, r0
    4804:	d0f2      	beq.n	47ec <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    4806:	3001      	adds	r0, #1
    4808:	7020      	strb	r0, [r4, #0]
    480a:	e7e5      	b.n	47d8 <isr_scan_tgta_check.isra.30+0x24>
    480c:	20000254 	.word	0x20000254

00004810 <chan_set.part.23>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    4810:	b662      	cpsie	i
    4812:	2004      	movs	r0, #4
    4814:	df02      	svc	2
	...

00004818 <prepare_normal_set>:
{
    4818:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    481a:	6803      	ldr	r3, [r0, #0]
{
    481c:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    481e:	2b00      	cmp	r3, #0
    4820:	da19      	bge.n	4856 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    4822:	6845      	ldr	r5, [r0, #4]
    4824:	6884      	ldr	r4, [r0, #8]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    4826:	005b      	lsls	r3, r3, #1
    4828:	085b      	lsrs	r3, r3, #1
		u32_t ticks_prepare_to_start =
    482a:	42ac      	cmp	r4, r5
    482c:	d200      	bcs.n	4830 <prepare_normal_set+0x18>
    482e:	002c      	movs	r4, r5
		ticker_status =
    4830:	9006      	str	r0, [sp, #24]
    4832:	480a      	ldr	r0, [pc, #40]	; (485c <prepare_normal_set+0x44>)
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    4834:	1b1b      	subs	r3, r3, r4
		ticker_status =
    4836:	9005      	str	r0, [sp, #20]
    4838:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    483a:	b29b      	uxth	r3, r3
		ticker_status =
    483c:	9301      	str	r3, [sp, #4]
    483e:	9300      	str	r3, [sp, #0]
    4840:	9004      	str	r0, [sp, #16]
    4842:	0003      	movs	r3, r0
    4844:	9003      	str	r0, [sp, #12]
    4846:	9002      	str	r0, [sp, #8]
    4848:	f7fe fdb6 	bl	33b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    484c:	2302      	movs	r3, #2
    484e:	4398      	bics	r0, r3
    4850:	d001      	beq.n	4856 <prepare_normal_set+0x3e>
    4852:	f7ff ffdd 	bl	4810 <chan_set.part.23>
}
    4856:	b009      	add	sp, #36	; 0x24
    4858:	bd30      	pop	{r4, r5, pc}
    485a:	46c0      	nop			; (mov r8, r8)
    485c:	0000415d 	.word	0x0000415d

00004860 <terminate_ind_rx_enqueue>:
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    4860:	0003      	movs	r3, r0
{
    4862:	b510      	push	{r4, lr}
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    4864:	339c      	adds	r3, #156	; 0x9c
{
    4866:	0002      	movs	r2, r0
	LL_ASSERT(node_rx->hdr.onion.link);
    4868:	6818      	ldr	r0, [r3, #0]
    486a:	2800      	cmp	r0, #0
    486c:	d101      	bne.n	4872 <terminate_ind_rx_enqueue+0x12>
    486e:	f7ff ffcf 	bl	4810 <chan_set.part.23>
	node_rx->hdr.handle = conn->handle;
    4872:	8c12      	ldrh	r2, [r2, #32]
	*((u8_t *)node_rx->pdu_data) = reason;
    4874:	7219      	strb	r1, [r3, #8]
	node_rx->hdr.handle = conn->handle;
    4876:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4878:	2207      	movs	r2, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    487a:	21b6      	movs	r1, #182	; 0xb6
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    487c:	711a      	strb	r2, [r3, #4]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    487e:	4a08      	ldr	r2, [pc, #32]	; (48a0 <terminate_ind_rx_enqueue+0x40>)
    4880:	0049      	lsls	r1, r1, #1
    4882:	5c51      	ldrb	r1, [r2, r1]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4884:	3245      	adds	r2, #69	; 0x45
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4886:	7019      	strb	r1, [r3, #0]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4888:	32ff      	adds	r2, #255	; 0xff
    488a:	0019      	movs	r1, r3
    488c:	f7fd ff75 	bl	277a <memq_enqueue>
	LL_ASSERT(link);
    4890:	2800      	cmp	r0, #0
    4892:	d102      	bne.n	489a <terminate_ind_rx_enqueue+0x3a>
    4894:	b662      	cpsie	i
    4896:	2004      	movs	r0, #4
    4898:	df02      	svc	2
	radio_event_callback();
    489a:	f003 fc67 	bl	816c <radio_event_callback>
}
    489e:	bd10      	pop	{r4, pc}
    48a0:	20000254 	.word	0x20000254

000048a4 <packet_rx_enqueue>:
{
    48a4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    48a6:	219b      	movs	r1, #155	; 0x9b
    48a8:	2436      	movs	r4, #54	; 0x36
    48aa:	4a15      	ldr	r2, [pc, #84]	; (4900 <packet_rx_enqueue+0x5c>)
    48ac:	34ff      	adds	r4, #255	; 0xff
    48ae:	0049      	lsls	r1, r1, #1
    48b0:	5d13      	ldrb	r3, [r2, r4]
    48b2:	5c51      	ldrb	r1, [r2, r1]
    48b4:	4299      	cmp	r1, r3
    48b6:	d101      	bne.n	48bc <packet_rx_enqueue+0x18>
    48b8:	f7ff ffaa 	bl	4810 <chan_set.part.23>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    48bc:	0011      	movs	r1, r2
    48be:	5d13      	ldrb	r3, [r2, r4]
    48c0:	31fc      	adds	r1, #252	; 0xfc
    48c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
    48c4:	009b      	lsls	r3, r3, #2
    48c6:	5859      	ldr	r1, [r3, r1]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    48c8:	23b6      	movs	r3, #182	; 0xb6
	if (last == _radio.packet_rx_count) {
    48ca:	259a      	movs	r5, #154	; 0x9a
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    48cc:	005b      	lsls	r3, r3, #1
    48ce:	5cd3      	ldrb	r3, [r2, r3]
	link = node_rx->hdr.onion.link;
    48d0:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    48d2:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    48d4:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    48d6:	006d      	lsls	r5, r5, #1
	last = _radio.packet_rx_last + 1;
    48d8:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    48da:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_rx_last + 1;
    48dc:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    48de:	429d      	cmp	r5, r3
    48e0:	d100      	bne.n	48e4 <packet_rx_enqueue+0x40>
		last = 0;
    48e2:	2300      	movs	r3, #0
	_radio.packet_rx_last = last;
    48e4:	5513      	strb	r3, [r2, r4]
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    48e6:	3245      	adds	r2, #69	; 0x45
    48e8:	32ff      	adds	r2, #255	; 0xff
    48ea:	f7fd ff46 	bl	277a <memq_enqueue>
	LL_ASSERT(link);
    48ee:	2800      	cmp	r0, #0
    48f0:	d102      	bne.n	48f8 <packet_rx_enqueue+0x54>
    48f2:	b662      	cpsie	i
    48f4:	2004      	movs	r0, #4
    48f6:	df02      	svc	2
	radio_event_callback();
    48f8:	f003 fc38 	bl	816c <radio_event_callback>
}
    48fc:	bd70      	pop	{r4, r5, r6, pc}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	20000254 	.word	0x20000254

00004904 <mayfly_adv_stop>:
{
    4904:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    4906:	2001      	movs	r0, #1
    4908:	f7ff fc4a 	bl	41a0 <packet_rx_reserve_get>
    490c:	1e04      	subs	r4, r0, #0
	LL_ASSERT(node_rx);
    490e:	d101      	bne.n	4914 <mayfly_adv_stop+0x10>
    4910:	f7ff ff7e 	bl	4810 <chan_set.part.23>
	node_rx->hdr.handle = 0xffff;
    4914:	2301      	movs	r3, #1
    4916:	425b      	negs	r3, r3
    4918:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    491a:	3307      	adds	r3, #7
    491c:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    491e:	2210      	movs	r2, #16
    4920:	2100      	movs	r1, #0
	radio_le_conn_cmplt = (void *)pdu_data_rx->lldata;
    4922:	300b      	adds	r0, #11
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4924:	f7fb feca 	bl	6bc <memset>
	radio_le_conn_cmplt->status = 0x3c;
    4928:	233c      	movs	r3, #60	; 0x3c
    492a:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
    492c:	f7ff ffba 	bl	48a4 <packet_rx_enqueue>
}
    4930:	bd10      	pop	{r4, pc}
	...

00004934 <ticker_stop_adv_stop>:
{
    4934:	b530      	push	{r4, r5, lr}
    4936:	4c3f      	ldr	r4, [pc, #252]	; (4a34 <ticker_stop_adv_stop+0x100>)
    4938:	b085      	sub	sp, #20
	if (status != TICKER_STATUS_SUCCESS) {
    493a:	2800      	cmp	r0, #0
    493c:	d004      	beq.n	4948 <ticker_stop_adv_stop+0x14>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    493e:	7ba3      	ldrb	r3, [r4, #14]
    4940:	2b05      	cmp	r3, #5
    4942:	d074      	beq.n	4a2e <ticker_stop_adv_stop+0xfa>
    4944:	f7ff ff64 	bl	4810 <chan_set.part.23>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4948:	7b23      	ldrb	r3, [r4, #12]
    494a:	2b05      	cmp	r3, #5
    494c:	d002      	beq.n	4954 <ticker_stop_adv_stop+0x20>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    494e:	7b63      	ldrb	r3, [r4, #13]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4950:	2b05      	cmp	r3, #5
    4952:	d164      	bne.n	4a1e <ticker_stop_adv_stop+0xea>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4954:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4956:	2200      	movs	r2, #0
    4958:	4d37      	ldr	r5, [pc, #220]	; (4a38 <ticker_stop_adv_stop+0x104>)
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    495a:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    495c:	ab02      	add	r3, sp, #8
    495e:	9300      	str	r3, [sp, #0]
    4960:	2101      	movs	r1, #1
    4962:	002b      	movs	r3, r5
    4964:	0010      	movs	r0, r2
    4966:	f7fe fd77 	bl	3458 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    496a:	2802      	cmp	r0, #2
    496c:	d00e      	beq.n	498c <ticker_stop_adv_stop+0x58>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    496e:	9802      	ldr	r0, [sp, #8]
    4970:	2800      	cmp	r0, #0
    4972:	d018      	beq.n	49a6 <ticker_stop_adv_stop+0x72>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4974:	9802      	ldr	r0, [sp, #8]
    4976:	2801      	cmp	r0, #1
    4978:	d11a      	bne.n	49b0 <ticker_stop_adv_stop+0x7c>
		if (_radio.role != ROLE_NONE) {
    497a:	7be3      	ldrb	r3, [r4, #15]
    497c:	2b00      	cmp	r3, #0
    497e:	d04e      	beq.n	4a1e <ticker_stop_adv_stop+0xea>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4980:	2204      	movs	r2, #4
    4982:	4b2e      	ldr	r3, [pc, #184]	; (4a3c <ticker_stop_adv_stop+0x108>)
    4984:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4986:	2200      	movs	r2, #0
    4988:	0011      	movs	r1, r2
    498a:	e044      	b.n	4a16 <ticker_stop_adv_stop+0xe2>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    498c:	2201      	movs	r2, #1
    498e:	0011      	movs	r1, r2
    4990:	0010      	movs	r0, r2
    4992:	f7fd ff37 	bl	2804 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    4996:	9b02      	ldr	r3, [sp, #8]
    4998:	2b02      	cmp	r3, #2
    499a:	d1e8      	bne.n	496e <ticker_stop_adv_stop+0x3a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    499c:	2101      	movs	r1, #1
    499e:	2000      	movs	r0, #0
    49a0:	f7fe fdee 	bl	3580 <ticker_job_sched>
    49a4:	e7f7      	b.n	4996 <ticker_stop_adv_stop+0x62>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    49a6:	2302      	movs	r3, #2
    49a8:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    49aa:	7b23      	ldrb	r3, [r4, #12]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d102      	bne.n	49b6 <ticker_stop_adv_stop+0x82>
	LL_ASSERT(!retval);
    49b0:	b662      	cpsie	i
    49b2:	2004      	movs	r0, #4
    49b4:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    49b6:	2201      	movs	r2, #1
    49b8:	ab03      	add	r3, sp, #12
		_radio.ticker_id_prepare = 0;
    49ba:	7320      	strb	r0, [r4, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    49bc:	0011      	movs	r1, r2
    49be:	9300      	str	r3, [sp, #0]
    49c0:	002b      	movs	r3, r5
    49c2:	f7fe fd49 	bl	3458 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    49c6:	2802      	cmp	r0, #2
    49c8:	d00f      	beq.n	49ea <ticker_stop_adv_stop+0xb6>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    49ca:	9903      	ldr	r1, [sp, #12]
    49cc:	2900      	cmp	r1, #0
    49ce:	d019      	beq.n	4a04 <ticker_stop_adv_stop+0xd0>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    49d0:	9c03      	ldr	r4, [sp, #12]
    49d2:	2c01      	cmp	r4, #1
    49d4:	d1ec      	bne.n	49b0 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    49d6:	2200      	movs	r2, #0
    49d8:	4b19      	ldr	r3, [pc, #100]	; (4a40 <ticker_stop_adv_stop+0x10c>)
    49da:	0011      	movs	r1, r2
    49dc:	0020      	movs	r0, r4
    49de:	f7fd ff35 	bl	284c <mayfly_enqueue>
    49e2:	1e01      	subs	r1, r0, #0
			LL_ASSERT(!ret);
    49e4:	d1e4      	bne.n	49b0 <ticker_stop_adv_stop+0x7c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    49e6:	4b17      	ldr	r3, [pc, #92]	; (4a44 <ticker_stop_adv_stop+0x110>)
    49e8:	e013      	b.n	4a12 <ticker_stop_adv_stop+0xde>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    49ea:	2201      	movs	r2, #1
    49ec:	0011      	movs	r1, r2
    49ee:	0010      	movs	r0, r2
    49f0:	f7fd ff08 	bl	2804 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    49f4:	9b03      	ldr	r3, [sp, #12]
    49f6:	2b02      	cmp	r3, #2
    49f8:	d1e7      	bne.n	49ca <ticker_stop_adv_stop+0x96>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    49fa:	2101      	movs	r1, #1
    49fc:	2000      	movs	r0, #0
    49fe:	f7fe fdbf 	bl	3580 <ticker_job_sched>
    4a02:	e7f7      	b.n	49f4 <ticker_stop_adv_stop+0xc0>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4a04:	6963      	ldr	r3, [r4, #20]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4a06:	69a2      	ldr	r2, [r4, #24]
			ticks_xtal_to_start &= ~XON_BITMASK;
    4a08:	005b      	lsls	r3, r3, #1
    4a0a:	085b      	lsrs	r3, r3, #1
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4a0c:	4293      	cmp	r3, r2
    4a0e:	d2ea      	bcs.n	49e6 <ticker_stop_adv_stop+0xb2>
				ret = mayfly_enqueue(
    4a10:	4b0b      	ldr	r3, [pc, #44]	; (4a40 <ticker_stop_adv_stop+0x10c>)
    4a12:	000a      	movs	r2, r1
    4a14:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4a16:	f7fd ff19 	bl	284c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d1c8      	bne.n	49b0 <ticker_stop_adv_stop+0x7c>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4a1e:	2200      	movs	r2, #0
    4a20:	4b09      	ldr	r3, [pc, #36]	; (4a48 <ticker_stop_adv_stop+0x114>)
    4a22:	0011      	movs	r1, r2
    4a24:	2001      	movs	r0, #1
    4a26:	f7fd ff11 	bl	284c <mayfly_enqueue>
	LL_ASSERT(!retval);
    4a2a:	2800      	cmp	r0, #0
    4a2c:	d1c0      	bne.n	49b0 <ticker_stop_adv_stop+0x7c>
}
    4a2e:	b005      	add	sp, #20
    4a30:	bd30      	pop	{r4, r5, pc}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	20000254 	.word	0x20000254
    4a38:	00004149 	.word	0x00004149
    4a3c:	20002318 	.word	0x20002318
    4a40:	200022d8 	.word	0x200022d8
    4a44:	20002368 	.word	0x20002368
    4a48:	200022b8 	.word	0x200022b8

00004a4c <sched_after_mstr_free_offset_get>:
{
    4a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a4e:	001c      	movs	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
    4a50:	9201      	str	r2, [sp, #4]
{
    4a52:	0005      	movs	r5, r0
    4a54:	0017      	movs	r7, r2
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    4a56:	3127      	adds	r1, #39	; 0x27
    4a58:	aa01      	add	r2, sp, #4
    4a5a:	2001      	movs	r0, #1
    4a5c:	f7ff fd5a 	bl	4514 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    4a60:	6823      	ldr	r3, [r4, #0]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d01d      	beq.n	4aa2 <sched_after_mstr_free_offset_get+0x56>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    4a66:	2380      	movs	r3, #128	; 0x80
    4a68:	9801      	ldr	r0, [sp, #4]
    4a6a:	041b      	lsls	r3, r3, #16
    4a6c:	1bc6      	subs	r6, r0, r7
    4a6e:	401e      	ands	r6, r3
    4a70:	d001      	beq.n	4a76 <sched_after_mstr_free_offset_get+0x2a>
    4a72:	f7ff fecd 	bl	4810 <chan_set.part.23>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4a76:	0039      	movs	r1, r7
    4a78:	f7fe fd96 	bl	35a8 <ticker_ticks_diff_get>
    4a7c:	4a0b      	ldr	r2, [pc, #44]	; (4aac <sched_after_mstr_free_offset_get+0x60>)
    4a7e:	2307      	movs	r3, #7
    4a80:	0031      	movs	r1, r6
    4a82:	f7fb fc71 	bl	368 <__aeabi_lmul>
    4a86:	2300      	movs	r3, #0
    4a88:	4a09      	ldr	r2, [pc, #36]	; (4ab0 <sched_after_mstr_free_offset_get+0x64>)
    4a8a:	f7fb fc4d 	bl	328 <__aeabi_uldivmod>
    4a8e:	6823      	ldr	r3, [r4, #0]
    4a90:	1818      	adds	r0, r3, r0
    4a92:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    4a94:	2800      	cmp	r0, #0
    4a96:	db04      	blt.n	4aa2 <sched_after_mstr_free_offset_get+0x56>
		u32_t conn_interval_us = conn_interval * 1250;
    4a98:	4806      	ldr	r0, [pc, #24]	; (4ab4 <sched_after_mstr_free_offset_get+0x68>)
    4a9a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    4a9c:	6823      	ldr	r3, [r4, #0]
    4a9e:	4298      	cmp	r0, r3
    4aa0:	d300      	bcc.n	4aa4 <sched_after_mstr_free_offset_get+0x58>
}
    4aa2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			*win_offset_us -= conn_interval_us;
    4aa4:	1a1b      	subs	r3, r3, r0
    4aa6:	6023      	str	r3, [r4, #0]
    4aa8:	e7f8      	b.n	4a9c <sched_after_mstr_free_offset_get+0x50>
    4aaa:	46c0      	nop			; (mov r8, r8)
    4aac:	1afd498d 	.word	0x1afd498d
    4ab0:	3b9aca00 	.word	0x3b9aca00
    4ab4:	000004e2 	.word	0x000004e2

00004ab8 <mayfly_sched_win_offset_use>:
{
    4ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4aba:	0003      	movs	r3, r0
{
    4abc:	0004      	movs	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4abe:	336c      	adds	r3, #108	; 0x6c
    4ac0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    4ac2:	68e1      	ldr	r1, [r4, #12]
    4ac4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    4ac6:	f7ff ffc1 	bl	4a4c <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4aca:	466b      	mov	r3, sp
    4acc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4ace:	4905      	ldr	r1, [pc, #20]	; (4ae4 <mayfly_sched_win_offset_use+0x2c>)
    4ad0:	1d9d      	adds	r5, r3, #6
    4ad2:	f7fb fb79 	bl	1c8 <__aeabi_uidiv>
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4ad6:	0029      	movs	r1, r5
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4ad8:	8028      	strh	r0, [r5, #0]
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4ada:	2202      	movs	r2, #2
    4adc:	6f60      	ldr	r0, [r4, #116]	; 0x74
    4ade:	f7fb fdc3 	bl	668 <memcpy>
}
    4ae2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    4ae4:	000004e2 	.word	0x000004e2

00004ae8 <chan_set>:
{
    4ae8:	b510      	push	{r4, lr}
    4aea:	0004      	movs	r4, r0
	switch (chan) {
    4aec:	2826      	cmp	r0, #38	; 0x26
    4aee:	d009      	beq.n	4b04 <chan_set+0x1c>
    4af0:	2827      	cmp	r0, #39	; 0x27
    4af2:	d00e      	beq.n	4b12 <chan_set+0x2a>
		radio_freq_chan_set(2);
    4af4:	2002      	movs	r0, #2
	switch (chan) {
    4af6:	2c25      	cmp	r4, #37	; 0x25
    4af8:	d005      	beq.n	4b06 <chan_set+0x1e>
		if (chan < 11) {
    4afa:	2c0a      	cmp	r4, #10
    4afc:	d80b      	bhi.n	4b16 <chan_set+0x2e>
			radio_freq_chan_set(4 + (2 * chan));
    4afe:	1ca0      	adds	r0, r4, #2
    4b00:	0040      	lsls	r0, r0, #1
    4b02:	e000      	b.n	4b06 <chan_set+0x1e>
		radio_freq_chan_set(26);
    4b04:	201a      	movs	r0, #26
			radio_freq_chan_set(4 + (2 * chan));
    4b06:	f004 f853 	bl	8bb0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    4b0a:	0020      	movs	r0, r4
    4b0c:	f004 f858 	bl	8bc0 <radio_whiten_iv_set>
}
    4b10:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(80);
    4b12:	2050      	movs	r0, #80	; 0x50
    4b14:	e7f7      	b.n	4b06 <chan_set+0x1e>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    4b16:	1ce0      	adds	r0, r4, #3
		} else if (chan < 40) {
    4b18:	2c27      	cmp	r4, #39	; 0x27
    4b1a:	d9f1      	bls.n	4b00 <chan_set+0x18>
    4b1c:	f7ff fe78 	bl	4810 <chan_set.part.23>

00004b20 <adv_setup>:
{
    4b20:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    4b22:	4c2d      	ldr	r4, [pc, #180]	; (4bd8 <adv_setup+0xb8>)
    4b24:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    4b26:	0022      	movs	r2, r4
	if (_radio.advertiser.adv_data.first !=
    4b28:	3374      	adds	r3, #116	; 0x74
	    _radio.advertiser.adv_data.last) {
    4b2a:	3275      	adds	r2, #117	; 0x75
	if (_radio.advertiser.adv_data.first !=
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	7812      	ldrb	r2, [r2, #0]
    4b30:	429a      	cmp	r2, r3
    4b32:	d007      	beq.n	4b44 <adv_setup+0x24>
		first = _radio.advertiser.adv_data.first + 1;
    4b34:	3301      	adds	r3, #1
    4b36:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    4b38:	2b02      	cmp	r3, #2
    4b3a:	d100      	bne.n	4b3e <adv_setup+0x1e>
			first = 0;
    4b3c:	2300      	movs	r3, #0
		_radio.advertiser.adv_data.first = first;
    4b3e:	0022      	movs	r2, r4
    4b40:	3274      	adds	r2, #116	; 0x74
    4b42:	7013      	strb	r3, [r2, #0]
	if (_radio.advertiser.scan_data.first != _radio.
    4b44:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    4b46:	0022      	movs	r2, r4
	if (_radio.advertiser.scan_data.first != _radio.
    4b48:	33c4      	adds	r3, #196	; 0xc4
	    advertiser.scan_data.last) {
    4b4a:	32c5      	adds	r2, #197	; 0xc5
	if (_radio.advertiser.scan_data.first != _radio.
    4b4c:	781b      	ldrb	r3, [r3, #0]
    4b4e:	7812      	ldrb	r2, [r2, #0]
    4b50:	429a      	cmp	r2, r3
    4b52:	d007      	beq.n	4b64 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    4b54:	3301      	adds	r3, #1
    4b56:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    4b58:	2b02      	cmp	r3, #2
    4b5a:	d100      	bne.n	4b5e <adv_setup+0x3e>
			first = 0;
    4b5c:	2300      	movs	r3, #0
		_radio.advertiser.scan_data.first = first;
    4b5e:	0022      	movs	r2, r4
    4b60:	32c4      	adds	r2, #196	; 0xc4
    4b62:	7013      	strb	r3, [r2, #0]
					[_radio.advertiser.adv_data.first];
    4b64:	0023      	movs	r3, r4
	pdu = (void *)_radio.advertiser.adv_data.data
    4b66:	2527      	movs	r5, #39	; 0x27
					[_radio.advertiser.adv_data.first];
    4b68:	3374      	adds	r3, #116	; 0x74
	pdu = (void *)_radio.advertiser.adv_data.data
    4b6a:	781b      	ldrb	r3, [r3, #0]
    4b6c:	435d      	muls	r5, r3
    4b6e:	3526      	adds	r5, #38	; 0x26
    4b70:	1965      	adds	r5, r4, r5
	radio_pkt_tx_set(pdu);
    4b72:	0028      	movs	r0, r5
    4b74:	f004 f884 	bl	8c80 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    4b78:	220f      	movs	r2, #15
    4b7a:	782b      	ldrb	r3, [r5, #0]
    4b7c:	4013      	ands	r3, r2
    4b7e:	2b02      	cmp	r3, #2
    4b80:	d020      	beq.n	4bc4 <adv_setup+0xa4>
    4b82:	2b07      	cmp	r3, #7
    4b84:	d01e      	beq.n	4bc4 <adv_setup+0xa4>
		_radio.state = STATE_TX;
    4b86:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    4b88:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4b8a:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    4b8c:	f004 f976 	bl	8e7c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4b90:	2000      	movs	r0, #0
    4b92:	f004 f8e1 	bl	8d58 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    4b96:	1d63      	adds	r3, r4, #5
    4b98:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    4b9a:	2000      	movs	r0, #0
	bitmap = _radio.advertiser.chan_map_current;
    4b9c:	075b      	lsls	r3, r3, #29
    4b9e:	0f5a      	lsrs	r2, r3, #29
    4ba0:	b2d3      	uxtb	r3, r2
    4ba2:	0019      	movs	r1, r3
	while ((bitmap & 0x01) == 0) {
    4ba4:	2501      	movs	r5, #1
    4ba6:	4229      	tst	r1, r5
    4ba8:	d011      	beq.n	4bce <adv_setup+0xae>
	_radio.advertiser.chan_map_current &=
    4baa:	2107      	movs	r1, #7
    4bac:	3405      	adds	r4, #5
		(_radio.advertiser.chan_map_current - 1);
    4bae:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    4bb0:	4013      	ands	r3, r2
    4bb2:	7fe2      	ldrb	r2, [r4, #31]
    4bb4:	400b      	ands	r3, r1
    4bb6:	438a      	bics	r2, r1
    4bb8:	4313      	orrs	r3, r2
	chan_set(37 + chan);
    4bba:	3025      	adds	r0, #37	; 0x25
	_radio.advertiser.chan_map_current &=
    4bbc:	77e3      	strb	r3, [r4, #31]
	chan_set(37 + chan);
    4bbe:	f7ff ff93 	bl	4ae8 <chan_set>
}
    4bc2:	bd70      	pop	{r4, r5, r6, pc}
		_radio.state = STATE_CLOSE;
    4bc4:	2303      	movs	r3, #3
    4bc6:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    4bc8:	f004 f8d6 	bl	8d78 <radio_switch_complete_and_disable>
    4bcc:	e7e3      	b.n	4b96 <adv_setup+0x76>
		chan++;
    4bce:	3001      	adds	r0, #1
    4bd0:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    4bd2:	0849      	lsrs	r1, r1, #1
    4bd4:	e7e7      	b.n	4ba6 <adv_setup+0x86>
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	20000254 	.word	0x20000254

00004bdc <pdu_node_tx_release>:
{
    4bdc:	b570      	push	{r4, r5, r6, lr}
	last = _radio.packet_release_last + 1;
    4bde:	24b6      	movs	r4, #182	; 0xb6
	if (last == _radio.packet_tx_count) {
    4be0:	25b4      	movs	r5, #180	; 0xb4
	last = _radio.packet_release_last + 1;
    4be2:	4a0f      	ldr	r2, [pc, #60]	; (4c20 <pdu_node_tx_release+0x44>)
    4be4:	0064      	lsls	r4, r4, #1
    4be6:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_tx_count) {
    4be8:	006d      	lsls	r5, r5, #1
	last = _radio.packet_release_last + 1;
    4bea:	3301      	adds	r3, #1
	if (last == _radio.packet_tx_count) {
    4bec:	5d55      	ldrb	r5, [r2, r5]
	last = _radio.packet_release_last + 1;
    4bee:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
    4bf0:	429d      	cmp	r5, r3
    4bf2:	d100      	bne.n	4bf6 <pdu_node_tx_release+0x1a>
		last = 0;
    4bf4:	2300      	movs	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    4bf6:	256c      	movs	r5, #108	; 0x6c
    4bf8:	35ff      	adds	r5, #255	; 0xff
    4bfa:	5d55      	ldrb	r5, [r2, r5]
    4bfc:	429d      	cmp	r5, r3
    4bfe:	d101      	bne.n	4c04 <pdu_node_tx_release+0x28>
    4c00:	f7ff fe06 	bl	4810 <chan_set.part.23>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    4c04:	0015      	movs	r5, r2
    4c06:	5d16      	ldrb	r6, [r2, r4]
    4c08:	35fc      	adds	r5, #252	; 0xfc
    4c0a:	6ead      	ldr	r5, [r5, #104]	; 0x68
    4c0c:	00f6      	lsls	r6, r6, #3
    4c0e:	5370      	strh	r0, [r6, r5]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    4c10:	5d10      	ldrb	r0, [r2, r4]
    4c12:	00c0      	lsls	r0, r0, #3
    4c14:	182d      	adds	r5, r5, r0
    4c16:	6069      	str	r1, [r5, #4]
	_radio.packet_release_last = last;
    4c18:	5513      	strb	r3, [r2, r4]
	radio_event_callback();
    4c1a:	f003 faa7 	bl	816c <radio_event_callback>
}
    4c1e:	bd70      	pop	{r4, r5, r6, pc}
    4c20:	20000254 	.word	0x20000254

00004c24 <packet_tx_enqueue>:
{
    4c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c26:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4c28:	9b01      	ldr	r3, [sp, #4]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d008      	beq.n	4c40 <packet_tx_enqueue+0x1c>
    4c2e:	266a      	movs	r6, #106	; 0x6a
    4c30:	22b5      	movs	r2, #181	; 0xb5
    4c32:	4d23      	ldr	r5, [pc, #140]	; (4cc0 <packet_tx_enqueue+0x9c>)
    4c34:	36ff      	adds	r6, #255	; 0xff
    4c36:	0052      	lsls	r2, r2, #1
    4c38:	5dab      	ldrb	r3, [r5, r6]
    4c3a:	5caa      	ldrb	r2, [r5, r2]
    4c3c:	429a      	cmp	r2, r3
    4c3e:	d100      	bne.n	4c42 <packet_tx_enqueue+0x1e>
}
    4c40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4c42:	002b      	movs	r3, r5
    4c44:	5daf      	ldrb	r7, [r5, r6]
    4c46:	33fc      	adds	r3, #252	; 0xfc
    4c48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    4c4a:	00ff      	lsls	r7, r7, #3
    4c4c:	19d7      	adds	r7, r2, r7
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4c4e:	2182      	movs	r1, #130	; 0x82
		node_tx_new->next = NULL;
    4c50:	2200      	movs	r2, #0
		node_tx_new = pdu_data_q_tx->node_tx;
    4c52:	687c      	ldr	r4, [r7, #4]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4c54:	6898      	ldr	r0, [r3, #8]
		node_tx_new->next = NULL;
    4c56:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4c58:	0049      	lsls	r1, r1, #1
    4c5a:	883a      	ldrh	r2, [r7, #0]
    4c5c:	f7fd fd6f 	bl	273e <mem_get>
    4c60:	0003      	movs	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    4c62:	8838      	ldrh	r0, [r7, #0]
    4c64:	8c1a      	ldrh	r2, [r3, #32]
    4c66:	4282      	cmp	r2, r0
    4c68:	d121      	bne.n	4cae <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    4c6a:	0019      	movs	r1, r3
    4c6c:	001a      	movs	r2, r3
    4c6e:	31f8      	adds	r1, #248	; 0xf8
    4c70:	6808      	ldr	r0, [r1, #0]
    4c72:	32fc      	adds	r2, #252	; 0xfc
    4c74:	2800      	cmp	r0, #0
    4c76:	d106      	bne.n	4c86 <packet_tx_enqueue+0x62>
				if (conn->pkt_tx_head == 0) {
    4c78:	33ec      	adds	r3, #236	; 0xec
				conn->pkt_tx_data = node_tx_new;
    4c7a:	600c      	str	r4, [r1, #0]
				if (conn->pkt_tx_head == 0) {
    4c7c:	6819      	ldr	r1, [r3, #0]
    4c7e:	2900      	cmp	r1, #0
    4c80:	d101      	bne.n	4c86 <packet_tx_enqueue+0x62>
					conn->pkt_tx_head = node_tx_new;
    4c82:	601c      	str	r4, [r3, #0]
					conn->pkt_tx_last = NULL;
    4c84:	6011      	str	r1, [r2, #0]
			if (conn->pkt_tx_last) {
    4c86:	6813      	ldr	r3, [r2, #0]
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d000      	beq.n	4c8e <packet_tx_enqueue+0x6a>
				conn->pkt_tx_last->next = node_tx_new;
    4c8c:	601c      	str	r4, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
    4c8e:	6014      	str	r4, [r2, #0]
		if (first == _radio.packet_tx_count) {
    4c90:	22b4      	movs	r2, #180	; 0xb4
		first = _radio.packet_tx_first + 1;
    4c92:	5dab      	ldrb	r3, [r5, r6]
		if (first == _radio.packet_tx_count) {
    4c94:	0052      	lsls	r2, r2, #1
		first = _radio.packet_tx_first + 1;
    4c96:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    4c98:	5caa      	ldrb	r2, [r5, r2]
		first = _radio.packet_tx_first + 1;
    4c9a:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d100      	bne.n	4ca2 <packet_tx_enqueue+0x7e>
			first = 0;
    4ca0:	2300      	movs	r3, #0
		_radio.packet_tx_first = first;
    4ca2:	55ab      	strb	r3, [r5, r6]
    4ca4:	9e01      	ldr	r6, [sp, #4]
    4ca6:	3e01      	subs	r6, #1
    4ca8:	b2f3      	uxtb	r3, r6
    4caa:	9301      	str	r3, [sp, #4]
    4cac:	e7bc      	b.n	4c28 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4cae:	2203      	movs	r2, #3
    4cb0:	7923      	ldrb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    4cb2:	0021      	movs	r1, r4
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4cb4:	4393      	bics	r3, r2
    4cb6:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    4cb8:	f7ff ff90 	bl	4bdc <pdu_node_tx_release>
    4cbc:	e7e8      	b.n	4c90 <packet_tx_enqueue+0x6c>
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	20000254 	.word	0x20000254

00004cc4 <connection_release>:
{
    4cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    4cc6:	2201      	movs	r2, #1
{
    4cc8:	0004      	movs	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    4cca:	0011      	movs	r1, r2
    4ccc:	2000      	movs	r0, #0
    4cce:	f7fd fd99 	bl	2804 <mayfly_enable>
	ticker_status =
    4cd2:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4cd4:	8c22      	ldrh	r2, [r4, #32]
	ticker_status =
    4cd6:	4f39      	ldr	r7, [pc, #228]	; (4dbc <connection_release+0xf8>)
    4cd8:	4b39      	ldr	r3, [pc, #228]	; (4dc0 <connection_release+0xfc>)
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4cda:	3207      	adds	r2, #7
	ticker_status =
    4cdc:	9300      	str	r3, [sp, #0]
    4cde:	b2d2      	uxtb	r2, r2
    4ce0:	003b      	movs	r3, r7
    4ce2:	0008      	movs	r0, r1
    4ce4:	f7fe fbb8 	bl	3458 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4ce8:	2602      	movs	r6, #2
    4cea:	43b0      	bics	r0, r6
    4cec:	d002      	beq.n	4cf4 <connection_release+0x30>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4cee:	b662      	cpsie	i
    4cf0:	2004      	movs	r0, #4
    4cf2:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    4cf4:	4d33      	ldr	r5, [pc, #204]	; (4dc4 <connection_release+0x100>)
    4cf6:	7c2b      	ldrb	r3, [r5, #16]
    4cf8:	2b05      	cmp	r3, #5
    4cfa:	d117      	bne.n	4d2c <connection_release+0x68>
					  conn->handle))) {
    4cfc:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    4cfe:	7b2a      	ldrb	r2, [r5, #12]
    4d00:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
    4d02:	429a      	cmp	r2, r3
    4d04:	d112      	bne.n	4d2c <connection_release+0x68>
		ticker_status =
    4d06:	4b30      	ldr	r3, [pc, #192]	; (4dc8 <connection_release+0x104>)
		_radio.ticker_id_prepare = 0;
    4d08:	7328      	strb	r0, [r5, #12]
		ticker_status =
    4d0a:	2201      	movs	r2, #1
    4d0c:	9300      	str	r3, [sp, #0]
    4d0e:	0001      	movs	r1, r0
    4d10:	003b      	movs	r3, r7
    4d12:	f7fe fba1 	bl	3458 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4d16:	43b0      	bics	r0, r6
    4d18:	d1e9      	bne.n	4cee <connection_release+0x2a>
		ticker_status =
    4d1a:	4b2c      	ldr	r3, [pc, #176]	; (4dcc <connection_release+0x108>)
    4d1c:	0002      	movs	r2, r0
    4d1e:	9300      	str	r3, [sp, #0]
    4d20:	0001      	movs	r1, r0
    4d22:	003b      	movs	r3, r7
    4d24:	f7fe fb98 	bl	3458 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4d28:	43b0      	bics	r0, r6
    4d2a:	d1e0      	bne.n	4cee <connection_release+0x2a>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    4d2c:	0026      	movs	r6, r4
    4d2e:	0027      	movs	r7, r4
    4d30:	36ec      	adds	r6, #236	; 0xec
    4d32:	37f0      	adds	r7, #240	; 0xf0
    4d34:	6831      	ldr	r1, [r6, #0]
    4d36:	683b      	ldr	r3, [r7, #0]
    4d38:	4299      	cmp	r1, r3
    4d3a:	d004      	beq.n	4d46 <connection_release+0x82>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    4d3c:	0023      	movs	r3, r4
    4d3e:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	4299      	cmp	r1, r3
    4d44:	d11a      	bne.n	4d7c <connection_release+0xb8>
	while ((conn->pkt_tx_head) &&
    4d46:	6830      	ldr	r0, [r6, #0]
    4d48:	2800      	cmp	r0, #0
    4d4a:	d004      	beq.n	4d56 <connection_release+0x92>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    4d4c:	0023      	movs	r3, r4
    4d4e:	33f8      	adds	r3, #248	; 0xf8
	while ((conn->pkt_tx_head) &&
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	4298      	cmp	r0, r3
    4d54:	d11c      	bne.n	4d90 <connection_release+0xcc>
	conn->pkt_tx_ctrl = NULL;
    4d56:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    4d58:	0022      	movs	r2, r4
	conn->pkt_tx_ctrl = NULL;
    4d5a:	603b      	str	r3, [r7, #0]
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4d5c:	2703      	movs	r7, #3
	conn->pkt_tx_ctrl_last = NULL;
    4d5e:	32f4      	adds	r2, #244	; 0xf4
    4d60:	6013      	str	r3, [r2, #0]
	while (conn->pkt_tx_head) {
    4d62:	6831      	ldr	r1, [r6, #0]
    4d64:	2900      	cmp	r1, #0
    4d66:	d11c      	bne.n	4da2 <connection_release+0xde>
	conn->handle = 0xffff;
    4d68:	2301      	movs	r3, #1
    4d6a:	425b      	negs	r3, r3
    4d6c:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    4d6e:	337e      	adds	r3, #126	; 0x7e
    4d70:	33ff      	adds	r3, #255	; 0xff
    4d72:	58ea      	ldr	r2, [r5, r3]
    4d74:	4294      	cmp	r4, r2
    4d76:	d100      	bne.n	4d7a <connection_release+0xb6>
		_radio.conn_upd = NULL;
    4d78:	50e9      	str	r1, [r5, r3]
}
    4d7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4d7c:	2203      	movs	r2, #3
    4d7e:	790b      	ldrb	r3, [r1, #4]
    4d80:	4393      	bics	r3, r2
    4d82:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4d84:	680b      	ldr	r3, [r1, #0]
    4d86:	6033      	str	r3, [r6, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    4d88:	8c20      	ldrh	r0, [r4, #32]
    4d8a:	f7ff ff27 	bl	4bdc <pdu_node_tx_release>
    4d8e:	e7cd      	b.n	4d2c <connection_release+0x68>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4d90:	0029      	movs	r1, r5
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4d92:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4d94:	3151      	adds	r1, #81	; 0x51
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4d96:	6033      	str	r3, [r6, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4d98:	31ff      	adds	r1, #255	; 0xff
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    4d9a:	603b      	str	r3, [r7, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4d9c:	f7fd fcb9 	bl	2712 <mem_release>
    4da0:	e7d1      	b.n	4d46 <connection_release+0x82>
		conn->pkt_tx_data = conn->pkt_tx_head;
    4da2:	0022      	movs	r2, r4
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4da4:	790b      	ldrb	r3, [r1, #4]
		conn->pkt_tx_data = conn->pkt_tx_head;
    4da6:	32f8      	adds	r2, #248	; 0xf8
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4da8:	43bb      	bics	r3, r7
    4daa:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4dac:	680b      	ldr	r3, [r1, #0]
    4dae:	6033      	str	r3, [r6, #0]
		conn->pkt_tx_data = conn->pkt_tx_head;
    4db0:	6013      	str	r3, [r2, #0]
		pdu_node_tx_release(conn->handle, node_tx);
    4db2:	8c20      	ldrh	r0, [r4, #32]
    4db4:	f7ff ff12 	bl	4bdc <pdu_node_tx_release>
    4db8:	e7d3      	b.n	4d62 <connection_release+0x9e>
    4dba:	46c0      	nop			; (mov r8, r8)
    4dbc:	00004f01 	.word	0x00004f01
    4dc0:	00002308 	.word	0x00002308
    4dc4:	20000254 	.word	0x20000254
    4dc8:	00002319 	.word	0x00002319
    4dcc:	00002320 	.word	0x00002320

00004dd0 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    4dd0:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4dd2:	1f03      	subs	r3, r0, #4
{
    4dd4:	b510      	push	{r4, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4dd6:	2b01      	cmp	r3, #1
    4dd8:	d901      	bls.n	4dde <mayfly_radio_stop+0xe>
    4dda:	f7ff fd19 	bl	4810 <chan_set.part.23>
	radio_used = ((_radio.state != STATE_NONE) &&
    4dde:	4a08      	ldr	r2, [pc, #32]	; (4e00 <mayfly_radio_stop+0x30>)
    4de0:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    4de2:	2b00      	cmp	r3, #0
    4de4:	d006      	beq.n	4df4 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    4de6:	3b04      	subs	r3, #4
    4de8:	2b01      	cmp	r3, #1
    4dea:	d903      	bls.n	4df4 <mayfly_radio_stop+0x24>
			_radio.state = state;
    4dec:	7410      	strb	r0, [r2, #16]
		radio_disable();
    4dee:	f003 ff63 	bl	8cb8 <radio_disable>
}
    4df2:	bd10      	pop	{r4, pc}
	if (radio_used || !radio_is_idle()) {
    4df4:	f003 ff82 	bl	8cfc <radio_is_idle>
    4df8:	2800      	cmp	r0, #0
    4dfa:	d0f8      	beq.n	4dee <mayfly_radio_stop+0x1e>
    4dfc:	e7f9      	b.n	4df2 <mayfly_radio_stop+0x22>
    4dfe:	46c0      	nop			; (mov r8, r8)
    4e00:	20000254 	.word	0x20000254

00004e04 <mayfly_radio_active>:
{
    4e04:	b510      	push	{r4, lr}
    4e06:	4b0b      	ldr	r3, [pc, #44]	; (4e34 <mayfly_radio_active+0x30>)
	if ((u32_t)params) {
    4e08:	2800      	cmp	r0, #0
    4e0a:	d006      	beq.n	4e1a <mayfly_radio_active+0x16>
		if (s_active++) {
    4e0c:	781a      	ldrb	r2, [r3, #0]
		radio_active_callback(1);
    4e0e:	2001      	movs	r0, #1
		if (s_active++) {
    4e10:	1c51      	adds	r1, r2, #1
    4e12:	7019      	strb	r1, [r3, #0]
    4e14:	2a00      	cmp	r2, #0
    4e16:	d00a      	beq.n	4e2e <mayfly_radio_active+0x2a>
}
    4e18:	bd10      	pop	{r4, pc}
		LL_ASSERT(s_active);
    4e1a:	7818      	ldrb	r0, [r3, #0]
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d101      	bne.n	4e24 <mayfly_radio_active+0x20>
    4e20:	f7ff fcf6 	bl	4810 <chan_set.part.23>
		if (--s_active) {
    4e24:	3801      	subs	r0, #1
    4e26:	b2c0      	uxtb	r0, r0
    4e28:	7018      	strb	r0, [r3, #0]
    4e2a:	2800      	cmp	r0, #0
    4e2c:	d1f4      	bne.n	4e18 <mayfly_radio_active+0x14>
		radio_active_callback(0);
    4e2e:	f003 f99c 	bl	816a <radio_active_callback>
    4e32:	e7f1      	b.n	4e18 <mayfly_radio_active+0x14>
    4e34:	20000404 	.word	0x20000404

00004e38 <mayfly_radio_inactive>:
{
    4e38:	b510      	push	{r4, lr}
	mayfly_radio_active(0);
    4e3a:	2000      	movs	r0, #0
    4e3c:	f7ff ffe2 	bl	4e04 <mayfly_radio_active>
}
    4e40:	bd10      	pop	{r4, pc}
	...

00004e44 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4e44:	2200      	movs	r2, #0
{
    4e46:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4e48:	4b04      	ldr	r3, [pc, #16]	; (4e5c <event_xtal+0x18>)
    4e4a:	0011      	movs	r1, r2
    4e4c:	0010      	movs	r0, r2
    4e4e:	f7fd fcfd 	bl	284c <mayfly_enqueue>
	LL_ASSERT(!retval);
    4e52:	2800      	cmp	r0, #0
    4e54:	d001      	beq.n	4e5a <event_xtal+0x16>
    4e56:	f7ff fcdb 	bl	4810 <chan_set.part.23>
}
    4e5a:	bd10      	pop	{r4, pc}
    4e5c:	20002348 	.word	0x20002348

00004e60 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4e60:	2200      	movs	r2, #0
{
    4e62:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4e64:	4b04      	ldr	r3, [pc, #16]	; (4e78 <event_active+0x18>)
    4e66:	0011      	movs	r1, r2
    4e68:	0010      	movs	r0, r2
    4e6a:	f7fd fcef 	bl	284c <mayfly_enqueue>
	LL_ASSERT(!retval);
    4e6e:	2800      	cmp	r0, #0
    4e70:	d001      	beq.n	4e76 <event_active+0x16>
    4e72:	f7ff fccd 	bl	4810 <chan_set.part.23>
}
    4e76:	bd10      	pop	{r4, pc}
    4e78:	200022c8 	.word	0x200022c8

00004e7c <ticker_update_slave_assert>:
{
    4e7c:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    4e7e:	2800      	cmp	r0, #0
    4e80:	d006      	beq.n	4e90 <ticker_update_slave_assert+0x14>
    4e82:	4b04      	ldr	r3, [pc, #16]	; (4e94 <ticker_update_slave_assert+0x18>)
    4e84:	b2c9      	uxtb	r1, r1
    4e86:	7b9b      	ldrb	r3, [r3, #14]
    4e88:	4299      	cmp	r1, r3
    4e8a:	d001      	beq.n	4e90 <ticker_update_slave_assert+0x14>
    4e8c:	f7ff fcc0 	bl	4810 <chan_set.part.23>
}
    4e90:	bd10      	pop	{r4, pc}
    4e92:	46c0      	nop			; (mov r8, r8)
    4e94:	20000254 	.word	0x20000254

00004e98 <ticker_update_adv_assert>:
{
    4e98:	b510      	push	{r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    4e9a:	2800      	cmp	r0, #0
    4e9c:	d005      	beq.n	4eaa <ticker_update_adv_assert+0x12>
    4e9e:	4b03      	ldr	r3, [pc, #12]	; (4eac <ticker_update_adv_assert+0x14>)
    4ea0:	7b9b      	ldrb	r3, [r3, #14]
    4ea2:	2b05      	cmp	r3, #5
    4ea4:	d001      	beq.n	4eaa <ticker_update_adv_assert+0x12>
    4ea6:	f7ff fcb3 	bl	4810 <chan_set.part.23>
}
    4eaa:	bd10      	pop	{r4, pc}
    4eac:	20000254 	.word	0x20000254

00004eb0 <ticker_stop_scan_assert>:
{
    4eb0:	b510      	push	{r4, lr}
    4eb2:	4b08      	ldr	r3, [pc, #32]	; (4ed4 <ticker_stop_scan_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    4eb4:	2801      	cmp	r0, #1
    4eb6:	d107      	bne.n	4ec8 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    4eb8:	7b9a      	ldrb	r2, [r3, #14]
    4eba:	2a06      	cmp	r2, #6
    4ebc:	d102      	bne.n	4ec4 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    4ebe:	2200      	movs	r2, #0
    4ec0:	739a      	strb	r2, [r3, #14]
}
    4ec2:	bd10      	pop	{r4, pc}
    4ec4:	f7ff fca4 	bl	4810 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    4ec8:	7b1b      	ldrb	r3, [r3, #12]
    4eca:	2b06      	cmp	r3, #6
    4ecc:	d1f9      	bne.n	4ec2 <ticker_stop_scan_assert+0x12>
    4ece:	b662      	cpsie	i
    4ed0:	2004      	movs	r0, #4
    4ed2:	df02      	svc	2
    4ed4:	20000254 	.word	0x20000254

00004ed8 <ticker_stop_adv_assert>:
{
    4ed8:	b510      	push	{r4, lr}
    4eda:	4b08      	ldr	r3, [pc, #32]	; (4efc <ticker_stop_adv_assert+0x24>)
	if (status == TICKER_STATUS_FAILURE) {
    4edc:	2801      	cmp	r0, #1
    4ede:	d107      	bne.n	4ef0 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    4ee0:	7b9a      	ldrb	r2, [r3, #14]
    4ee2:	2a05      	cmp	r2, #5
    4ee4:	d102      	bne.n	4eec <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    4ee6:	2200      	movs	r2, #0
    4ee8:	739a      	strb	r2, [r3, #14]
}
    4eea:	bd10      	pop	{r4, pc}
    4eec:	f7ff fc90 	bl	4810 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    4ef0:	7b1b      	ldrb	r3, [r3, #12]
    4ef2:	2b05      	cmp	r3, #5
    4ef4:	d1f9      	bne.n	4eea <ticker_stop_adv_assert+0x12>
    4ef6:	b662      	cpsie	i
    4ef8:	2004      	movs	r0, #4
    4efa:	df02      	svc	2
    4efc:	20000254 	.word	0x20000254

00004f00 <ticker_success_assert>:
{
    4f00:	b510      	push	{r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    4f02:	2800      	cmp	r0, #0
    4f04:	d001      	beq.n	4f0a <ticker_success_assert+0xa>
    4f06:	f7ff fc83 	bl	4810 <chan_set.part.23>
}
    4f0a:	bd10      	pop	{r4, pc}

00004f0c <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    4f0c:	b570      	push	{r4, r5, r6, lr}
    4f0e:	0005      	movs	r5, r0
	node_rx = packet_rx_reserve_get(3);
    4f10:	2003      	movs	r0, #3
    4f12:	f7ff f945 	bl	41a0 <packet_rx_reserve_get>
	if (node_rx == 0) {
    4f16:	2800      	cmp	r0, #0
    4f18:	d023      	beq.n	4f62 <isr_rx_scan_report.isra.37+0x56>
	node_rx->hdr.handle = 0xffff;
    4f1a:	2301      	movs	r3, #1
    4f1c:	425b      	negs	r3, r3
    4f1e:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    4f20:	4b11      	ldr	r3, [pc, #68]	; (4f68 <isr_rx_scan_report.isra.37+0x5c>)
    4f22:	33dd      	adds	r3, #221	; 0xdd
    4f24:	781b      	ldrb	r3, [r3, #0]
    4f26:	075a      	lsls	r2, r3, #29
    4f28:	d019      	beq.n	4f5e <isr_rx_scan_report.isra.37+0x52>
		switch (_radio.scanner.phy) {
    4f2a:	075b      	lsls	r3, r3, #29
    4f2c:	0f5b      	lsrs	r3, r3, #29
    4f2e:	b2da      	uxtb	r2, r3
    4f30:	2a01      	cmp	r2, #1
    4f32:	d004      	beq.n	4f3e <isr_rx_scan_report.isra.37+0x32>
    4f34:	2a04      	cmp	r2, #4
    4f36:	d003      	beq.n	4f40 <isr_rx_scan_report.isra.37+0x34>
		LL_ASSERT(0);
    4f38:	b662      	cpsie	i
    4f3a:	2004      	movs	r0, #4
    4f3c:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    4f3e:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    4f40:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4f42:	7103      	strb	r3, [r0, #4]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    4f44:	1904      	adds	r4, r0, r4
    4f46:	340a      	adds	r4, #10
    4f48:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    4f4a:	2d00      	cmp	r5, #0
    4f4c:	d002      	beq.n	4f54 <isr_rx_scan_report.isra.37+0x48>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4f4e:	f003 ff27 	bl	8da0 <radio_rssi_get>
			     pdu_adv_rx->len] =
    4f52:	4006      	ands	r6, r0
    4f54:	7026      	strb	r6, [r4, #0]
	packet_rx_enqueue();
    4f56:	f7ff fca5 	bl	48a4 <packet_rx_enqueue>
	return 0;
    4f5a:	2000      	movs	r0, #0
}
    4f5c:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4f5e:	2302      	movs	r3, #2
    4f60:	e7ee      	b.n	4f40 <isr_rx_scan_report.isra.37+0x34>
		return 1;
    4f62:	2001      	movs	r0, #1
    4f64:	e7fa      	b.n	4f5c <isr_rx_scan_report.isra.37+0x50>
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	20000254 	.word	0x20000254

00004f6c <adv_scan_configure.constprop.47>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    4f6c:	b513      	push	{r0, r1, r4, lr}
    4f6e:	0004      	movs	r4, r0
	u32_t aa = 0x8e89bed6;
    4f70:	4b0d      	ldr	r3, [pc, #52]	; (4fa8 <adv_scan_configure.constprop.47+0x3c>)
    4f72:	9301      	str	r3, [sp, #4]
	radio_reset();
    4f74:	f003 fdf8 	bl	8b68 <radio_reset>
	radio_tx_power_set(0);
    4f78:	2000      	movs	r0, #0
    4f7a:	f003 fe11 	bl	8ba0 <radio_tx_power_set>
	radio_isr_set(isr);
    4f7e:	480b      	ldr	r0, [pc, #44]	; (4fac <adv_scan_configure.constprop.47+0x40>)
    4f80:	f003 fdd8 	bl	8b34 <radio_isr_set>
	radio_phy_set(phy, flags);
    4f84:	2101      	movs	r1, #1
    4f86:	0020      	movs	r0, r4
    4f88:	f003 fdfe 	bl	8b88 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4f8c:	0064      	lsls	r4, r4, #1
	radio_aa_set((u8_t *)&aa);
    4f8e:	a801      	add	r0, sp, #4
    4f90:	f003 fe2a 	bl	8be8 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4f94:	b2e2      	uxtb	r2, r4
    4f96:	2125      	movs	r1, #37	; 0x25
    4f98:	2008      	movs	r0, #8
    4f9a:	f003 fe43 	bl	8c24 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    4f9e:	4904      	ldr	r1, [pc, #16]	; (4fb0 <adv_scan_configure.constprop.47+0x44>)
    4fa0:	4804      	ldr	r0, [pc, #16]	; (4fb4 <adv_scan_configure.constprop.47+0x48>)
    4fa2:	f003 feb5 	bl	8d10 <radio_crc_configure>
}
    4fa6:	bd13      	pop	{r0, r1, r4, pc}
    4fa8:	8e89bed6 	.word	0x8e89bed6
    4fac:	00005f2d 	.word	0x00005f2d
    4fb0:	00555555 	.word	0x00555555
    4fb4:	0000065b 	.word	0x0000065b

00004fb8 <event_stop.constprop.48>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4fb8:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    4fba:	4b06      	ldr	r3, [pc, #24]	; (4fd4 <event_stop.constprop.48+0x1c>)
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    4fbc:	b510      	push	{r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4fbe:	0011      	movs	r1, r2
	s_mfy_radio_stop.param = context;
    4fc0:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4fc2:	0010      	movs	r0, r2
    4fc4:	f7fd fc42 	bl	284c <mayfly_enqueue>
	LL_ASSERT(!retval);
    4fc8:	2800      	cmp	r0, #0
    4fca:	d001      	beq.n	4fd0 <event_stop.constprop.48+0x18>
    4fcc:	f7ff fc20 	bl	4810 <chan_set.part.23>
}
    4fd0:	bd10      	pop	{r4, pc}
    4fd2:	46c0      	nop			; (mov r8, r8)
    4fd4:	20002308 	.word	0x20002308

00004fd8 <event_common_prepare>:
{
    4fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fda:	0016      	movs	r6, r2
    4fdc:	b08f      	sub	sp, #60	; 0x3c
    4fde:	930b      	str	r3, [sp, #44]	; 0x2c
    4fe0:	ab14      	add	r3, sp, #80	; 0x50
    4fe2:	cb04      	ldmia	r3!, {r2}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    4fe4:	6834      	ldr	r4, [r6, #0]
{
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	900a      	str	r0, [sp, #40]	; 0x28
    4fea:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    4fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
    4fee:	910d      	str	r1, [sp, #52]	; 0x34
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    4ff0:	681f      	ldr	r7, [r3, #0]
	if (_ticks_xtal_to_start & XON_BITMASK) {
    4ff2:	2c00      	cmp	r4, #0
    4ff4:	da03      	bge.n	4ffe <event_common_prepare+0x26>
		_ticks_xtal_to_start =
    4ff6:	003c      	movs	r4, r7
    4ff8:	4297      	cmp	r7, r2
    4ffa:	d200      	bcs.n	4ffe <event_common_prepare+0x26>
    4ffc:	0014      	movs	r4, r2
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    4ffe:	42bc      	cmp	r4, r7
    5000:	d800      	bhi.n	5004 <event_common_prepare+0x2c>
    5002:	e06e      	b.n	50e2 <event_common_prepare+0x10a>
		ticker_status =
    5004:	2000      	movs	r0, #0
    5006:	4b4d      	ldr	r3, [pc, #308]	; (513c <event_common_prepare+0x164>)
    5008:	9006      	str	r0, [sp, #24]
    500a:	9308      	str	r3, [sp, #32]
    500c:	4b4c      	ldr	r3, [pc, #304]	; (5140 <event_common_prepare+0x168>)
    500e:	9004      	str	r0, [sp, #16]
    5010:	9307      	str	r3, [sp, #28]
    5012:	4b4c      	ldr	r3, [pc, #304]	; (5144 <event_common_prepare+0x16c>)
    5014:	9003      	str	r0, [sp, #12]
    5016:	9305      	str	r3, [sp, #20]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    5018:	1be3      	subs	r3, r4, r7
		ticker_status =
    501a:	9300      	str	r3, [sp, #0]
    501c:	9002      	str	r0, [sp, #8]
    501e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5020:	9001      	str	r0, [sp, #4]
    5022:	2201      	movs	r2, #1
    5024:	0001      	movs	r1, r0
    5026:	f7fe f985 	bl	3334 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    502a:	2302      	movs	r3, #2
    502c:	4398      	bics	r0, r3
    502e:	d002      	beq.n	5036 <event_common_prepare+0x5e>
		LL_ASSERT(!retval);
    5030:	b662      	cpsie	i
    5032:	2004      	movs	r0, #4
    5034:	df02      	svc	2
		event_xtal(0, 0, 0, NULL);
    5036:	0003      	movs	r3, r0
    5038:	0002      	movs	r2, r0
    503a:	0001      	movs	r1, r0
		event_xtal(0, 0, 0, NULL);
    503c:	f7ff ff02 	bl	4e44 <event_xtal>
	ticker_status =
    5040:	2000      	movs	r0, #0
	_radio.remainder_anchor = remainder;
    5042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5044:	4d40      	ldr	r5, [pc, #256]	; (5148 <event_common_prepare+0x170>)
	ticker_status =
    5046:	0002      	movs	r2, r0
	_radio.remainder_anchor = remainder;
    5048:	60ab      	str	r3, [r5, #8]
	ticker_status =
    504a:	4b40      	ldr	r3, [pc, #256]	; (514c <event_common_prepare+0x174>)
    504c:	9004      	str	r0, [sp, #16]
    504e:	9308      	str	r3, [sp, #32]
    5050:	4b3b      	ldr	r3, [pc, #236]	; (5140 <event_common_prepare+0x168>)
    5052:	9003      	str	r0, [sp, #12]
    5054:	9307      	str	r3, [sp, #28]
    5056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5058:	9002      	str	r0, [sp, #8]
    505a:	9306      	str	r3, [sp, #24]
    505c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    505e:	9001      	str	r0, [sp, #4]
    5060:	9305      	str	r3, [sp, #20]
    5062:	9400      	str	r4, [sp, #0]
    5064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5066:	0001      	movs	r1, r0
    5068:	f7fe f964 	bl	3334 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    506c:	2302      	movs	r3, #2
    506e:	4398      	bics	r0, r3
    5070:	d1de      	bne.n	5030 <event_common_prepare+0x58>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5072:	2005      	movs	r0, #5
    5074:	f7ff ffa0 	bl	4fb8 <event_stop.constprop.48>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5078:	002b      	movs	r3, r5
    507a:	33fc      	adds	r3, #252	; 0xfc
    507c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    507e:	429f      	cmp	r7, r3
    5080:	d020      	beq.n	50c4 <event_common_prepare+0xec>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    5082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5084:	6013      	str	r3, [r2, #0]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5086:	6833      	ldr	r3, [r6, #0]
    5088:	2b00      	cmp	r3, #0
    508a:	da02      	bge.n	5092 <event_common_prepare+0xba>
			*ticks_xtal_to_start &= ~XON_BITMASK;
    508c:	005b      	lsls	r3, r3, #1
    508e:	085b      	lsrs	r3, r3, #1
    5090:	6033      	str	r3, [r6, #0]
				     _radio.ticks_active_to_start;
    5092:	35fc      	adds	r5, #252	; 0xfc
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5094:	6831      	ldr	r1, [r6, #0]
    5096:	6fea      	ldr	r2, [r5, #124]	; 0x7c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5098:	b2a3      	uxth	r3, r4
		ticks_to_start_new = (_radio.ticks_active_to_start <
    509a:	428a      	cmp	r2, r1
    509c:	d200      	bcs.n	50a0 <event_common_prepare+0xc8>
    509e:	000a      	movs	r2, r1
		ticker_status =
    50a0:	2000      	movs	r0, #0
    50a2:	492b      	ldr	r1, [pc, #172]	; (5150 <event_common_prepare+0x178>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    50a4:	b292      	uxth	r2, r2
		ticker_status =
    50a6:	9106      	str	r1, [sp, #24]
    50a8:	4925      	ldr	r1, [pc, #148]	; (5140 <event_common_prepare+0x168>)
    50aa:	9302      	str	r3, [sp, #8]
    50ac:	9105      	str	r1, [sp, #20]
    50ae:	9201      	str	r2, [sp, #4]
    50b0:	9200      	str	r2, [sp, #0]
    50b2:	9004      	str	r0, [sp, #16]
    50b4:	9003      	str	r0, [sp, #12]
    50b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    50b8:	0001      	movs	r1, r0
    50ba:	f7fe f97d 	bl	33b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    50be:	2302      	movs	r3, #2
    50c0:	4398      	bics	r0, r3
    50c2:	d1b5      	bne.n	5030 <event_common_prepare+0x58>
	packet_tx_enqueue(0xFF);
    50c4:	20ff      	movs	r0, #255	; 0xff
    50c6:	f7ff fdad 	bl	4c24 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    50ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    50cc:	4b21      	ldr	r3, [pc, #132]	; (5154 <event_common_prepare+0x17c>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    50ce:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    50d0:	609a      	str	r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    50d2:	2201      	movs	r2, #1
    50d4:	0011      	movs	r1, r2
    50d6:	f7fd fbb9 	bl	284c <mayfly_enqueue>
		LL_ASSERT(!retval);
    50da:	2800      	cmp	r0, #0
    50dc:	d1a8      	bne.n	5030 <event_common_prepare+0x58>
}
    50de:	b00f      	add	sp, #60	; 0x3c
    50e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    50e2:	42bc      	cmp	r4, r7
    50e4:	d21e      	bcs.n	5124 <event_common_prepare+0x14c>
		event_active(0, 0, 0, NULL);
    50e6:	2300      	movs	r3, #0
    50e8:	001a      	movs	r2, r3
    50ea:	0019      	movs	r1, r3
    50ec:	0018      	movs	r0, r3
    50ee:	f7ff feb7 	bl	4e60 <event_active>
		ticker_status =
    50f2:	2000      	movs	r0, #0
    50f4:	4b18      	ldr	r3, [pc, #96]	; (5158 <event_common_prepare+0x180>)
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    50f6:	1b3c      	subs	r4, r7, r4
		ticker_status =
    50f8:	9308      	str	r3, [sp, #32]
    50fa:	4b11      	ldr	r3, [pc, #68]	; (5140 <event_common_prepare+0x168>)
    50fc:	9006      	str	r0, [sp, #24]
    50fe:	9307      	str	r3, [sp, #28]
    5100:	4b16      	ldr	r3, [pc, #88]	; (515c <event_common_prepare+0x184>)
    5102:	9004      	str	r0, [sp, #16]
    5104:	9305      	str	r3, [sp, #20]
    5106:	9003      	str	r0, [sp, #12]
    5108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    510a:	9002      	str	r0, [sp, #8]
    510c:	9001      	str	r0, [sp, #4]
    510e:	9400      	str	r4, [sp, #0]
    5110:	2201      	movs	r2, #1
    5112:	0001      	movs	r1, r0
    5114:	f7fe f90e 	bl	3334 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5118:	2302      	movs	r3, #2
    511a:	4398      	bics	r0, r3
    511c:	d000      	beq.n	5120 <event_common_prepare+0x148>
    511e:	e787      	b.n	5030 <event_common_prepare+0x58>
    5120:	003c      	movs	r4, r7
    5122:	e78d      	b.n	5040 <event_common_prepare+0x68>
		event_active(0, 0, 0, NULL);
    5124:	2300      	movs	r3, #0
    5126:	001a      	movs	r2, r3
    5128:	0019      	movs	r1, r3
    512a:	0018      	movs	r0, r3
    512c:	f7ff fe98 	bl	4e60 <event_active>
		event_xtal(0, 0, 0, NULL);
    5130:	2300      	movs	r3, #0
    5132:	001a      	movs	r2, r3
    5134:	0019      	movs	r1, r3
    5136:	0018      	movs	r0, r3
    5138:	e780      	b.n	503c <event_common_prepare+0x64>
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	00001585 	.word	0x00001585
    5140:	00004f01 	.word	0x00004f01
    5144:	00004e61 	.word	0x00004e61
    5148:	20000254 	.word	0x20000254
    514c:	000015b2 	.word	0x000015b2
    5150:	000015e2 	.word	0x000015e2
    5154:	200023a8 	.word	0x200023a8
    5158:	0000159a 	.word	0x0000159a
    515c:	00004e45 	.word	0x00004e45

00005160 <radio_event_adv_prepare>:
{
    5160:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5162:	4c0b      	ldr	r4, [pc, #44]	; (5190 <radio_event_adv_prepare+0x30>)
    5164:	7b25      	ldrb	r5, [r4, #12]
    5166:	b2ed      	uxtb	r5, r5
    5168:	2d00      	cmp	r5, #0
    516a:	d001      	beq.n	5170 <radio_event_adv_prepare+0x10>
    516c:	f7ff fb50 	bl	4810 <chan_set.part.23>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5170:	2605      	movs	r6, #5
	event_common_prepare(ticks_at_expire, remainder,
    5172:	0023      	movs	r3, r4
    5174:	0022      	movs	r2, r4
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5176:	7326      	strb	r6, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
    5178:	9503      	str	r5, [sp, #12]
    517a:	4d06      	ldr	r5, [pc, #24]	; (5194 <radio_event_adv_prepare+0x34>)
    517c:	9601      	str	r6, [sp, #4]
    517e:	9502      	str	r5, [sp, #8]
    5180:	69e4      	ldr	r4, [r4, #28]
    5182:	3318      	adds	r3, #24
    5184:	3214      	adds	r2, #20
    5186:	9400      	str	r4, [sp, #0]
    5188:	f7ff ff26 	bl	4fd8 <event_common_prepare>
}
    518c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	20000254 	.word	0x20000254
    5194:	00005411 	.word	0x00005411

00005198 <event_adv_stop>:
{
    5198:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    519a:	2005      	movs	r0, #5
    519c:	f7ff ff0c 	bl	4fb8 <event_stop.constprop.48>
	ticker_status =
    51a0:	2100      	movs	r1, #0
    51a2:	4b06      	ldr	r3, [pc, #24]	; (51bc <event_adv_stop+0x24>)
    51a4:	2205      	movs	r2, #5
    51a6:	9300      	str	r3, [sp, #0]
    51a8:	0008      	movs	r0, r1
    51aa:	4b05      	ldr	r3, [pc, #20]	; (51c0 <event_adv_stop+0x28>)
    51ac:	f7fe f954 	bl	3458 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    51b0:	2302      	movs	r3, #2
    51b2:	4398      	bics	r0, r3
    51b4:	d001      	beq.n	51ba <event_adv_stop+0x22>
    51b6:	f7ff fb2b 	bl	4810 <chan_set.part.23>
}
    51ba:	bd07      	pop	{r0, r1, r2, pc}
    51bc:	000018a6 	.word	0x000018a6
    51c0:	00004935 	.word	0x00004935

000051c4 <packet_rx_allocate.constprop.49>:
static void packet_rx_allocate(u8_t max)
    51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (max > _radio.link_rx_data_quota) {
    51c6:	23a4      	movs	r3, #164	; 0xa4
    51c8:	4d1f      	ldr	r5, [pc, #124]	; (5248 <packet_rx_allocate.constprop.49+0x84>)
    51ca:	005b      	lsls	r3, r3, #1
    51cc:	5cee      	ldrb	r6, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    51ce:	3b12      	subs	r3, #18
    51d0:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    51d2:	3b02      	subs	r3, #2
	acquire = _radio.packet_rx_acquire + 1;
    51d4:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    51d6:	5ceb      	ldrb	r3, [r5, r3]
	acquire = _radio.packet_rx_acquire + 1;
    51d8:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
    51da:	42a3      	cmp	r3, r4
    51dc:	d100      	bne.n	51e0 <packet_rx_allocate.constprop.49+0x1c>
		acquire = 0;
    51de:	2400      	movs	r4, #0
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    51e0:	2e00      	cmp	r6, #0
    51e2:	d014      	beq.n	520e <packet_rx_allocate.constprop.49+0x4a>
    51e4:	2336      	movs	r3, #54	; 0x36
    51e6:	33ff      	adds	r3, #255	; 0xff
    51e8:	5ceb      	ldrb	r3, [r5, r3]
    51ea:	429c      	cmp	r4, r3
    51ec:	d00f      	beq.n	520e <packet_rx_allocate.constprop.49+0x4a>
		link = mem_acquire(&_radio.link_rx_free);
    51ee:	4817      	ldr	r0, [pc, #92]	; (524c <packet_rx_allocate.constprop.49+0x88>)
    51f0:	f7fd fa76 	bl	26e0 <mem_acquire>
    51f4:	1e07      	subs	r7, r0, #0
		if (!link) {
    51f6:	d00a      	beq.n	520e <packet_rx_allocate.constprop.49+0x4a>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    51f8:	0028      	movs	r0, r5
    51fa:	3025      	adds	r0, #37	; 0x25
    51fc:	30ff      	adds	r0, #255	; 0xff
    51fe:	f7fd fa6f 	bl	26e0 <mem_acquire>
		if (!node_rx) {
    5202:	2800      	cmp	r0, #0
    5204:	d104      	bne.n	5210 <packet_rx_allocate.constprop.49+0x4c>
			mem_release(link, &_radio.link_rx_free);
    5206:	4911      	ldr	r1, [pc, #68]	; (524c <packet_rx_allocate.constprop.49+0x88>)
    5208:	0038      	movs	r0, r7
    520a:	f7fd fa82 	bl	2712 <mem_release>
}
    520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    5210:	239b      	movs	r3, #155	; 0x9b
    5212:	002a      	movs	r2, r5
		node_rx->hdr.onion.link = link;
    5214:	6007      	str	r7, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    5216:	005b      	lsls	r3, r3, #1
    5218:	5ceb      	ldrb	r3, [r5, r3]
    521a:	32fc      	adds	r2, #252	; 0xfc
    521c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    521e:	009b      	lsls	r3, r3, #2
    5220:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    5222:	239b      	movs	r3, #155	; 0x9b
    5224:	005b      	lsls	r3, r3, #1
    5226:	54ec      	strb	r4, [r5, r3]
		if (acquire == _radio.packet_rx_count) {
    5228:	3b02      	subs	r3, #2
		acquire = _radio.packet_rx_acquire + 1;
    522a:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    522c:	5ceb      	ldrb	r3, [r5, r3]
		acquire = _radio.packet_rx_acquire + 1;
    522e:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    5230:	42a3      	cmp	r3, r4
    5232:	d100      	bne.n	5236 <packet_rx_allocate.constprop.49+0x72>
			acquire = 0;
    5234:	2400      	movs	r4, #0
		_radio.link_rx_data_quota--;
    5236:	22a4      	movs	r2, #164	; 0xa4
    5238:	0052      	lsls	r2, r2, #1
    523a:	5cab      	ldrb	r3, [r5, r2]
    523c:	3e01      	subs	r6, #1
    523e:	3b01      	subs	r3, #1
    5240:	54ab      	strb	r3, [r5, r2]
    5242:	b2f6      	uxtb	r6, r6
    5244:	e7cc      	b.n	51e0 <packet_rx_allocate.constprop.49+0x1c>
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	20000254 	.word	0x20000254
    524c:	20000390 	.word	0x20000390

00005250 <common_init>:
{
    5250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.connection_count) {
    5252:	4c33      	ldr	r4, [pc, #204]	; (5320 <common_init+0xd0>)
    5254:	0023      	movs	r3, r4
    5256:	0020      	movs	r0, r4
    5258:	33ff      	adds	r3, #255	; 0xff
    525a:	7b5a      	ldrb	r2, [r3, #13]
    525c:	30fc      	adds	r0, #252	; 0xfc
    525e:	2a00      	cmp	r2, #0
    5260:	d043      	beq.n	52ea <common_init+0x9a>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    5262:	0023      	movs	r3, r4
    5264:	2182      	movs	r1, #130	; 0x82
    5266:	3309      	adds	r3, #9
    5268:	33ff      	adds	r3, #255	; 0xff
    526a:	b292      	uxth	r2, r2
    526c:	0049      	lsls	r1, r1, #1
    526e:	6880      	ldr	r0, [r0, #8]
    5270:	f7fd fa10 	bl	2694 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    5274:	0023      	movs	r3, r4
    5276:	2297      	movs	r2, #151	; 0x97
    5278:	0021      	movs	r1, r4
    527a:	0026      	movs	r6, r4
    527c:	3325      	adds	r3, #37	; 0x25
    527e:	36fc      	adds	r6, #252	; 0xfc
    5280:	0052      	lsls	r2, r2, #1
    5282:	31fe      	adds	r1, #254	; 0xfe
    5284:	33ff      	adds	r3, #255	; 0xff
    5286:	5ca2      	ldrb	r2, [r4, r2]
    5288:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
    528a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    528c:	f7fd fa02 	bl	2694 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    5290:	0025      	movs	r5, r4
    5292:	239a      	movs	r3, #154	; 0x9a
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    5294:	0027      	movs	r7, r4
		 (_radio.packet_rx_count + _radio.connection_count),
    5296:	005b      	lsls	r3, r3, #1
    5298:	35ff      	adds	r5, #255	; 0xff
    529a:	5ce2      	ldrb	r2, [r4, r3]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    529c:	373d      	adds	r7, #61	; 0x3d
		 (_radio.packet_rx_count + _radio.connection_count),
    529e:	7b6b      	ldrb	r3, [r5, #13]
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    52a0:	37ff      	adds	r7, #255	; 0xff
    52a2:	18d2      	adds	r2, r2, r3
    52a4:	2108      	movs	r1, #8
    52a6:	003b      	movs	r3, r7
    52a8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    52aa:	f7fd f9f3 	bl	2694 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    52ae:	0023      	movs	r3, r4
    52b0:	3351      	adds	r3, #81	; 0x51
    52b2:	33ff      	adds	r3, #255	; 0xff
    52b4:	2202      	movs	r2, #2
    52b6:	2124      	movs	r1, #36	; 0x24
    52b8:	6d30      	ldr	r0, [r6, #80]	; 0x50
    52ba:	f7fd f9eb 	bl	2694 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    52be:	22b4      	movs	r2, #180	; 0xb4
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    52c0:	0023      	movs	r3, r4
    52c2:	21ae      	movs	r1, #174	; 0xae
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    52c4:	0052      	lsls	r2, r2, #1
    52c6:	5ca2      	ldrb	r2, [r4, r2]
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    52c8:	3359      	adds	r3, #89	; 0x59
    52ca:	3a01      	subs	r2, #1
    52cc:	0049      	lsls	r1, r1, #1
    52ce:	6db0      	ldr	r0, [r6, #88]	; 0x58
    52d0:	33ff      	adds	r3, #255	; 0xff
    52d2:	b292      	uxth	r2, r2
    52d4:	5a61      	ldrh	r1, [r4, r1]
    52d6:	f7fd f9dd 	bl	2694 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    52da:	0038      	movs	r0, r7
    52dc:	f7fd fa00 	bl	26e0 <mem_acquire>
	LL_ASSERT(link);
    52e0:	2800      	cmp	r0, #0
    52e2:	d104      	bne.n	52ee <common_init+0x9e>
    52e4:	b662      	cpsie	i
    52e6:	2004      	movs	r0, #4
    52e8:	df02      	svc	2
		_radio.conn_free = NULL;
    52ea:	60c2      	str	r2, [r0, #12]
    52ec:	e7c2      	b.n	5274 <common_init+0x24>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    52ee:	0022      	movs	r2, r4
    52f0:	0021      	movs	r1, r4
    52f2:	3245      	adds	r2, #69	; 0x45
    52f4:	3141      	adds	r1, #65	; 0x41
    52f6:	31ff      	adds	r1, #255	; 0xff
    52f8:	32ff      	adds	r2, #255	; 0xff
    52fa:	f7fd fa3b 	bl	2774 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    52fe:	2338      	movs	r3, #56	; 0x38
    5300:	3406      	adds	r4, #6
    5302:	7fe2      	ldrb	r2, [r4, #31]
    5304:	4313      	orrs	r3, r2
    5306:	77e3      	strb	r3, [r4, #31]
	_radio.data_chan_map[0] = 0xFF;
    5308:	23ff      	movs	r3, #255	; 0xff
    530a:	75eb      	strb	r3, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    530c:	762b      	strb	r3, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    530e:	766b      	strb	r3, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    5310:	76ab      	strb	r3, [r5, #26]
	_radio.data_chan_map[4] = 0x1F;
    5312:	3be0      	subs	r3, #224	; 0xe0
    5314:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    5316:	3306      	adds	r3, #6
    5318:	772b      	strb	r3, [r5, #28]
	packet_rx_allocate(0xFF);
    531a:	f7ff ff53 	bl	51c4 <packet_rx_allocate.constprop.49>
}
    531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5320:	20000254 	.word	0x20000254

00005324 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    5324:	4b03      	ldr	r3, [pc, #12]	; (5334 <mayfly_xtal_start+0x10>)
{
    5326:	b510      	push	{r4, lr}
	clock_control_on(_radio.hf_clock, NULL);
    5328:	6818      	ldr	r0, [r3, #0]
    532a:	2100      	movs	r1, #0
    532c:	6843      	ldr	r3, [r0, #4]
    532e:	681b      	ldr	r3, [r3, #0]
    5330:	4798      	blx	r3
}
    5332:	bd10      	pop	{r4, pc}
    5334:	20000254 	.word	0x20000254

00005338 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    5338:	4b03      	ldr	r3, [pc, #12]	; (5348 <mayfly_xtal_stop+0x10>)
{
    533a:	b510      	push	{r4, lr}
	clock_control_off(_radio.hf_clock, NULL);
    533c:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    533e:	2100      	movs	r1, #0
    5340:	6843      	ldr	r3, [r0, #4]
    5342:	685b      	ldr	r3, [r3, #4]
    5344:	4798      	blx	r3
}
    5346:	bd10      	pop	{r4, pc}
    5348:	20000254 	.word	0x20000254

0000534c <chan_sel_2>:
{
    534c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    534e:	2703      	movs	r7, #3
		o |= (i & 1);
    5350:	2401      	movs	r4, #1
{
    5352:	9200      	str	r2, [sp, #0]
    5354:	9301      	str	r3, [sp, #4]
	prn_e = counter ^ chan_id;
    5356:	4048      	eors	r0, r1
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5358:	2608      	movs	r6, #8
	o = 0;
    535a:	2200      	movs	r2, #0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    535c:	0a03      	lsrs	r3, r0, #8
		o |= (i & 1);
    535e:	001d      	movs	r5, r3
		o <<= 1;
    5360:	0052      	lsls	r2, r2, #1
		o |= (i & 1);
    5362:	4025      	ands	r5, r4
    5364:	3e01      	subs	r6, #1
    5366:	432a      	orrs	r2, r5
    5368:	b2f6      	uxtb	r6, r6
    536a:	b2d2      	uxtb	r2, r2
		i >>= 1;
    536c:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    536e:	2e00      	cmp	r6, #0
    5370:	d1f5      	bne.n	535e <chan_sel_2+0x12>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5372:	b2c3      	uxtb	r3, r0
    5374:	2008      	movs	r0, #8
    5376:	0212      	lsls	r2, r2, #8
    5378:	b212      	sxth	r2, r2
		o |= (i & 1);
    537a:	001d      	movs	r5, r3
		o <<= 1;
    537c:	0076      	lsls	r6, r6, #1
		o |= (i & 1);
    537e:	4025      	ands	r5, r4
    5380:	3801      	subs	r0, #1
    5382:	432e      	orrs	r6, r5
    5384:	b2c0      	uxtb	r0, r0
    5386:	b2f6      	uxtb	r6, r6
		i >>= 1;
    5388:	085b      	lsrs	r3, r3, #1
	for (iterate = 0; iterate < 8; iterate++) {
    538a:	2800      	cmp	r0, #0
    538c:	d1f5      	bne.n	537a <chan_sel_2+0x2e>
	return ((u32_t)a * 17 + b) & 0xFFFF;
    538e:	2311      	movs	r3, #17
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5390:	4316      	orrs	r6, r2
	return ((u32_t)a * 17 + b) & 0xFFFF;
    5392:	435e      	muls	r6, r3
    5394:	3f01      	subs	r7, #1
    5396:	198e      	adds	r6, r1, r6
    5398:	b2ff      	uxtb	r7, r7
    539a:	b2b0      	uxth	r0, r6
	for (iterate = 0; iterate < 3; iterate++) {
    539c:	2f00      	cmp	r7, #0
    539e:	d1db      	bne.n	5358 <chan_sel_2+0xc>
	prn_e ^= chan_id;
    53a0:	4041      	eors	r1, r0
    53a2:	000e      	movs	r6, r1
	chan_next = prn_e % 37;
    53a4:	2125      	movs	r1, #37	; 0x25
    53a6:	0030      	movs	r0, r6
    53a8:	f7fa ff52 	bl	250 <__aeabi_uidivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    53ac:	9a00      	ldr	r2, [sp, #0]
	chan_next = prn_e % 37;
    53ae:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    53b0:	08c3      	lsrs	r3, r0, #3
    53b2:	5cd3      	ldrb	r3, [r2, r3]
    53b4:	2207      	movs	r2, #7
    53b6:	4002      	ands	r2, r0
    53b8:	4113      	asrs	r3, r2
    53ba:	4223      	tst	r3, r4
    53bc:	d105      	bne.n	53ca <chan_sel_2+0x7e>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    53be:	9901      	ldr	r1, [sp, #4]
		chan_next = chan_sel_remap(chan_map, chan_index);
    53c0:	9800      	ldr	r0, [sp, #0]
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    53c2:	4371      	muls	r1, r6
		chan_next = chan_sel_remap(chan_map, chan_index);
    53c4:	0c09      	lsrs	r1, r1, #16
    53c6:	f7fe fed0 	bl	416a <chan_sel_remap>
}
    53ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000053cc <preempt_calc>:
{
    53cc:	b570      	push	{r4, r5, r6, lr}
    53ce:	0014      	movs	r4, r2
    53d0:	000e      	movs	r6, r1
    53d2:	0005      	movs	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    53d4:	f7fe f8e4 	bl	35a0 <ticker_ticks_now_get>
	u32_t diff =
    53d8:	0021      	movs	r1, r4
    53da:	f7fe f8e5 	bl	35a8 <ticker_ticks_diff_get>
	diff += 3;
    53de:	1cc4      	adds	r4, r0, #3
	return 0;
    53e0:	2000      	movs	r0, #0
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    53e2:	2c09      	cmp	r4, #9
    53e4:	d910      	bls.n	5408 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    53e6:	4b09      	ldr	r3, [pc, #36]	; (540c <preempt_calc+0x40>)
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	4283      	cmp	r3, r0
    53ec:	d001      	beq.n	53f2 <preempt_calc+0x26>
    53ee:	f7ff f989 	bl	4704 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    53f2:	0028      	movs	r0, r5
    53f4:	0032      	movs	r2, r6
    53f6:	2100      	movs	r1, #0
    53f8:	f7ff fa0e 	bl	4818 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    53fc:	68ab      	ldr	r3, [r5, #8]
		return 1;
    53fe:	2001      	movs	r0, #1
		diff += hdr->ticks_preempt_to_start;
    5400:	18e4      	adds	r4, r4, r3
		if (diff <
    5402:	2c26      	cmp	r4, #38	; 0x26
    5404:	d800      	bhi.n	5408 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
    5406:	60ac      	str	r4, [r5, #8]
}
    5408:	bd70      	pop	{r4, r5, r6, pc}
    540a:	46c0      	nop			; (mov r8, r8)
    540c:	20000458 	.word	0x20000458

00005410 <event_adv>:
{
    5410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    5412:	4c27      	ldr	r4, [pc, #156]	; (54b0 <event_adv+0xa0>)
{
    5414:	0005      	movs	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    5416:	7be2      	ldrb	r2, [r4, #15]
    5418:	b2d2      	uxtb	r2, r2
    541a:	2a00      	cmp	r2, #0
    541c:	d002      	beq.n	5424 <event_adv+0x14>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    541e:	b662      	cpsie	i
    5420:	2004      	movs	r0, #4
    5422:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    5424:	7b23      	ldrb	r3, [r4, #12]
    5426:	b2db      	uxtb	r3, r3
    5428:	2b05      	cmp	r3, #5
    542a:	d1f8      	bne.n	541e <event_adv+0xe>
	_radio.role = ROLE_ADV;
    542c:	2701      	movs	r7, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    542e:	1da6      	adds	r6, r4, #6
	_radio.ticks_anchor = ticks_at_expire;
    5430:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    5432:	7ff0      	ldrb	r0, [r6, #31]
	_radio.role = ROLE_ADV;
    5434:	73e7      	strb	r7, [r4, #15]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    5436:	0740      	lsls	r0, r0, #29
    5438:	0f40      	lsrs	r0, r0, #29
	_radio.ticker_id_prepare = 0;
    543a:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    543c:	7363      	strb	r3, [r4, #13]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    543e:	f7ff fd95 	bl	4f6c <adv_scan_configure.constprop.47>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    5442:	2007      	movs	r0, #7
    5444:	7ff3      	ldrb	r3, [r6, #31]
    5446:	1d61      	adds	r1, r4, #5
    5448:	08db      	lsrs	r3, r3, #3
    544a:	4003      	ands	r3, r0
    544c:	001a      	movs	r2, r3
    544e:	7fcb      	ldrb	r3, [r1, #31]
    5450:	4383      	bics	r3, r0
    5452:	4313      	orrs	r3, r2
    5454:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    5456:	f7ff fb63 	bl	4b20 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    545a:	223f      	movs	r2, #63	; 0x3f
    545c:	7ff3      	ldrb	r3, [r6, #31]
    545e:	4393      	bics	r3, r2
    5460:	d007      	beq.n	5472 <event_adv+0x62>
		struct ll_filter *wl = ctrl_filter_get(true);
    5462:	0038      	movs	r0, r7
    5464:	f003 f900 	bl	8668 <ctrl_filter_get>
				       (u8_t *)wl->bdaddr);
    5468:	1c82      	adds	r2, r0, #2
		radio_filter_configure(wl->enable_bitmask,
    546a:	7841      	ldrb	r1, [r0, #1]
    546c:	7800      	ldrb	r0, [r0, #0]
    546e:	f003 fcad 	bl	8dcc <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    5472:	0029      	movs	r1, r5
    5474:	68a2      	ldr	r2, [r4, #8]
    5476:	3109      	adds	r1, #9
    5478:	2001      	movs	r0, #1
    547a:	f003 fd07 	bl	8e8c <radio_tmr_start>
	radio_tmr_end_capture();
    547e:	f003 fdbf 	bl	9000 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    5482:	0020      	movs	r0, r4
    5484:	002a      	movs	r2, r5
    5486:	3014      	adds	r0, #20
    5488:	2105      	movs	r1, #5
    548a:	f7ff ff9f 	bl	53cc <preempt_calc>
    548e:	2800      	cmp	r0, #0
    5490:	d004      	beq.n	549c <event_adv+0x8c>
		_radio.state = STATE_STOP;
    5492:	2304      	movs	r3, #4
    5494:	7423      	strb	r3, [r4, #16]
		radio_disable();
    5496:	f003 fc0f 	bl	8cb8 <radio_disable>
}
    549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ticker_status =
    549c:	0003      	movs	r3, r0
    549e:	4a05      	ldr	r2, [pc, #20]	; (54b4 <event_adv+0xa4>)
    54a0:	0001      	movs	r1, r0
    54a2:	f7fe f83d 	bl	3520 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    54a6:	2302      	movs	r3, #2
    54a8:	4398      	bics	r0, r3
    54aa:	d1b8      	bne.n	541e <event_adv+0xe>
    54ac:	e7f5      	b.n	549a <event_adv+0x8a>
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	20000254 	.word	0x20000254
    54b4:	000046ad 	.word	0x000046ad

000054b8 <ctrl_tx_enqueue>:
	    !conn->empty &&
    54b8:	0003      	movs	r3, r0
{
    54ba:	b570      	push	{r4, r5, r6, lr}
    54bc:	0004      	movs	r4, r0
	    !conn->empty &&
    54be:	33a8      	adds	r3, #168	; 0xa8
    54c0:	781d      	ldrb	r5, [r3, #0]
    54c2:	34f0      	adds	r4, #240	; 0xf0
	if (
    54c4:	b26a      	sxtb	r2, r5
    54c6:	334c      	adds	r3, #76	; 0x4c
    54c8:	2a00      	cmp	r2, #0
    54ca:	db1b      	blt.n	5504 <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    54cc:	0002      	movs	r2, r0
    54ce:	32ec      	adds	r2, #236	; 0xec
    54d0:	6812      	ldr	r2, [r2, #0]
	    !conn->empty &&
    54d2:	2a00      	cmp	r2, #0
    54d4:	d016      	beq.n	5504 <ctrl_tx_enqueue+0x4c>
	    conn->pkt_tx_head &&
    54d6:	072d      	lsls	r5, r5, #28
    54d8:	d414      	bmi.n	5504 <ctrl_tx_enqueue+0x4c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    54da:	0005      	movs	r5, r0
    54dc:	35f8      	adds	r5, #248	; 0xf8
    54de:	682e      	ldr	r6, [r5, #0]
    54e0:	42b2      	cmp	r2, r6
    54e2:	d101      	bne.n	54e8 <ctrl_tx_enqueue+0x30>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    54e4:	6816      	ldr	r6, [r2, #0]
    54e6:	602e      	str	r6, [r5, #0]
		if (!conn->pkt_tx_ctrl) {
    54e8:	6825      	ldr	r5, [r4, #0]
    54ea:	2d00      	cmp	r5, #0
    54ec:	d110      	bne.n	5510 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    54ee:	6815      	ldr	r5, [r2, #0]
    54f0:	600d      	str	r5, [r1, #0]
			conn->pkt_tx_head = node_tx;
    54f2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl = node_tx;
    54f4:	6021      	str	r1, [r4, #0]
	conn->pkt_tx_ctrl_last = node_tx;
    54f6:	6019      	str	r1, [r3, #0]
	if (node_tx->next == 0) {
    54f8:	680b      	ldr	r3, [r1, #0]
    54fa:	2b00      	cmp	r3, #0
    54fc:	d101      	bne.n	5502 <ctrl_tx_enqueue+0x4a>
		conn->pkt_tx_last = node_tx;
    54fe:	30fc      	adds	r0, #252	; 0xfc
    5500:	6001      	str	r1, [r0, #0]
}
    5502:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->pkt_tx_ctrl) {
    5504:	6822      	ldr	r2, [r4, #0]
    5506:	2a00      	cmp	r2, #0
    5508:	d102      	bne.n	5510 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    550a:	0002      	movs	r2, r0
    550c:	32ec      	adds	r2, #236	; 0xec
    550e:	e7ee      	b.n	54ee <ctrl_tx_enqueue+0x36>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    5510:	681a      	ldr	r2, [r3, #0]
    5512:	6814      	ldr	r4, [r2, #0]
    5514:	600c      	str	r4, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    5516:	6011      	str	r1, [r2, #0]
    5518:	e7ed      	b.n	54f6 <ctrl_tx_enqueue+0x3e>

0000551a <ctrl_tx_sec_enqueue>:
	if (conn->pause_tx) {
    551a:	0003      	movs	r3, r0
    551c:	33a8      	adds	r3, #168	; 0xa8
    551e:	781b      	ldrb	r3, [r3, #0]
{
    5520:	b510      	push	{r4, lr}
	if (conn->pause_tx) {
    5522:	071b      	lsls	r3, r3, #28
    5524:	d50f      	bpl.n	5546 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    5526:	0003      	movs	r3, r0
    5528:	33f0      	adds	r3, #240	; 0xf0
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	2b00      	cmp	r3, #0
    552e:	d104      	bne.n	553a <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    5530:	30ec      	adds	r0, #236	; 0xec
    5532:	6803      	ldr	r3, [r0, #0]
    5534:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    5536:	6001      	str	r1, [r0, #0]
}
    5538:	bd10      	pop	{r4, pc}
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    553a:	30f4      	adds	r0, #244	; 0xf4
    553c:	6803      	ldr	r3, [r0, #0]
    553e:	681a      	ldr	r2, [r3, #0]
    5540:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    5542:	6019      	str	r1, [r3, #0]
    5544:	e7f8      	b.n	5538 <ctrl_tx_sec_enqueue+0x1e>
		ctrl_tx_enqueue(conn, node_tx);
    5546:	f7ff ffb7 	bl	54b8 <ctrl_tx_enqueue>
}
    554a:	e7f5      	b.n	5538 <ctrl_tx_sec_enqueue+0x1e>

0000554c <feature_rsp_send>:
{
    554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    554e:	4f1f      	ldr	r7, [pc, #124]	; (55cc <feature_rsp_send+0x80>)
{
    5550:	0005      	movs	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5552:	0038      	movs	r0, r7
    5554:	3051      	adds	r0, #81	; 0x51
    5556:	30ff      	adds	r0, #255	; 0xff
{
    5558:	000e      	movs	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    555a:	f7fd f8c1 	bl	26e0 <mem_acquire>
    555e:	0004      	movs	r4, r0
		return 1;
    5560:	2001      	movs	r0, #1
	if (!node_tx) {
    5562:	2c00      	cmp	r4, #0
    5564:	d030      	beq.n	55c8 <feature_rsp_send+0x7c>
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5566:	37fc      	adds	r7, #252	; 0xfc
    5568:	6979      	ldr	r1, [r7, #20]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    556a:	7932      	ldrb	r2, [r6, #4]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    556c:	0008      	movs	r0, r1
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    556e:	4b18      	ldr	r3, [pc, #96]	; (55d0 <feature_rsp_send+0x84>)
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5570:	308c      	adds	r0, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    5572:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    5574:	7972      	ldrb	r2, [r6, #5]
	_radio.conn_curr->common.fex_valid = 1;
    5576:	3138      	adds	r1, #56	; 0x38
	       (features[1] << 8) | (features[2] << 16);
    5578:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    557a:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    557c:	79b2      	ldrb	r2, [r6, #6]
    557e:	0412      	lsls	r2, r2, #16
    5580:	431a      	orrs	r2, r3
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5582:	6803      	ldr	r3, [r0, #0]
    5584:	03db      	lsls	r3, r3, #15
    5586:	0bdb      	lsrs	r3, r3, #15
    5588:	4013      	ands	r3, r2
    558a:	6003      	str	r3, [r0, #0]
	_radio.conn_curr->common.fex_valid = 1;
    558c:	2320      	movs	r3, #32
    558e:	780a      	ldrb	r2, [r1, #0]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    5590:	0020      	movs	r0, r4
	_radio.conn_curr->common.fex_valid = 1;
    5592:	4313      	orrs	r3, r2
    5594:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5596:	2303      	movs	r3, #3
    5598:	7922      	ldrb	r2, [r4, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    559a:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    559c:	4313      	orrs	r3, r2
    559e:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    55a0:	2309      	movs	r3, #9
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    55a2:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    55a4:	7163      	strb	r3, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    55a6:	71e3      	strb	r3, [r4, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    55a8:	3008      	adds	r0, #8
    55aa:	f7fb f887 	bl	6bc <memset>
		conn->llcp_features & 0xFF;
    55ae:	002b      	movs	r3, r5
    55b0:	338c      	adds	r3, #140	; 0x8c
    55b2:	681b      	ldr	r3, [r3, #0]
	ctrl_tx_sec_enqueue(conn, node_tx);
    55b4:	0028      	movs	r0, r5
		(conn->llcp_features >> 8) & 0xFF;
    55b6:	0a1a      	lsrs	r2, r3, #8
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    55b8:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 16) & 0xFF;
    55ba:	0c1b      	lsrs	r3, r3, #16
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    55bc:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    55be:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    55c0:	0021      	movs	r1, r4
    55c2:	f7ff ffaa 	bl	551a <ctrl_tx_sec_enqueue>
	return 0;
    55c6:	2000      	movs	r0, #0
}
    55c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	20000254 	.word	0x20000254
    55d0:	fffe30d0 	.word	0xfffe30d0

000055d4 <event_connection_prepare>:
{
    55d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    55d6:	4c75      	ldr	r4, [pc, #468]	; (57ac <event_connection_prepare+0x1d8>)
{
    55d8:	b091      	sub	sp, #68	; 0x44
    55da:	900c      	str	r0, [sp, #48]	; 0x30
    55dc:	910e      	str	r1, [sp, #56]	; 0x38
    55de:	001f      	movs	r7, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    55e0:	7b23      	ldrb	r3, [r4, #12]
    55e2:	2b00      	cmp	r3, #0
    55e4:	d002      	beq.n	55ec <event_connection_prepare+0x18>
			LL_ASSERT(0);
    55e6:	b662      	cpsie	i
    55e8:	2004      	movs	r0, #4
    55ea:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    55ec:	8c3b      	ldrh	r3, [r7, #32]
    55ee:	3307      	adds	r3, #7
    55f0:	b2db      	uxtb	r3, r3
    55f2:	7323      	strb	r3, [r4, #12]
	if (conn->role) {
    55f4:	7f7b      	ldrb	r3, [r7, #29]
    55f6:	2b7f      	cmp	r3, #127	; 0x7f
    55f8:	d909      	bls.n	560e <event_connection_prepare+0x3a>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    55fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    55fc:	1c53      	adds	r3, r2, #1
    55fe:	434b      	muls	r3, r1
		conn->slave.window_widening_prepare_us +=
    5600:	6c79      	ldr	r1, [r7, #68]	; 0x44
    5602:	185b      	adds	r3, r3, r1
		    conn->slave.window_widening_max_us) {
    5604:	6c39      	ldr	r1, [r7, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    5606:	647b      	str	r3, [r7, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    5608:	428b      	cmp	r3, r1
    560a:	d900      	bls.n	560e <event_connection_prepare+0x3a>
			conn->slave.window_widening_prepare_us =
    560c:	6479      	str	r1, [r7, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    560e:	003d      	movs	r5, r7
    5610:	003e      	movs	r6, r7
	conn->latency_prepare += lazy;
    5612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    5614:	355d      	adds	r5, #93	; 0x5d
	conn->latency_prepare += lazy;
    5616:	18d2      	adds	r2, r2, r3
	event_counter = conn->event_counter + conn->latency_prepare;
    5618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
	conn->latency_prepare += lazy;
    561a:	b292      	uxth	r2, r2
    561c:	853a      	strh	r2, [r7, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    561e:	18d2      	adds	r2, r2, r3
    5620:	b293      	uxth	r3, r2
    5622:	930a      	str	r3, [sp, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    5624:	365c      	adds	r6, #92	; 0x5c
    5626:	782a      	ldrb	r2, [r5, #0]
    5628:	7833      	ldrb	r3, [r6, #0]
    562a:	429a      	cmp	r2, r3
    562c:	d100      	bne.n	5630 <event_connection_prepare+0x5c>
    562e:	e07f      	b.n	5730 <event_connection_prepare+0x15c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    5630:	2005      	movs	r0, #5
    5632:	f7ff fcc1 	bl	4fb8 <event_stop.constprop.48>
		switch (conn->llcp_type) {
    5636:	003b      	movs	r3, r7
    5638:	335e      	adds	r3, #94	; 0x5e
    563a:	7818      	ldrb	r0, [r3, #0]
    563c:	3801      	subs	r0, #1
    563e:	2803      	cmp	r0, #3
    5640:	d8d1      	bhi.n	55e6 <event_connection_prepare+0x12>
    5642:	f7fa fdb7 	bl	1b4 <__gnu_thumb1_case_uhi>
    5646:	0004      	.short	0x0004
    5648:	02a5023b 	.word	0x02a5023b
    564c:	02d2      	.short	0x02d2
	conn_upd = _radio.conn_upd;
    564e:	23be      	movs	r3, #190	; 0xbe
    5650:	005b      	lsls	r3, r3, #1
	if (!conn_upd) {
    5652:	58e2      	ldr	r2, [r4, r3]
    5654:	2a00      	cmp	r2, #0
    5656:	d100      	bne.n	565a <event_connection_prepare+0x86>
		_radio.conn_upd = conn;
    5658:	50e7      	str	r7, [r4, r3]
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    565a:	003b      	movs	r3, r7
    565c:	2603      	movs	r6, #3
    565e:	3360      	adds	r3, #96	; 0x60
    5660:	930d      	str	r3, [sp, #52]	; 0x34
    5662:	781b      	ldrb	r3, [r3, #0]
    5664:	4033      	ands	r3, r6
    5666:	d100      	bne.n	566a <event_connection_prepare+0x96>
    5668:	e0ac      	b.n	57c4 <event_connection_prepare+0x1f0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    566a:	0020      	movs	r0, r4
    566c:	3051      	adds	r0, #81	; 0x51
    566e:	30ff      	adds	r0, #255	; 0xff
    5670:	f7fd f836 	bl	26e0 <mem_acquire>
    5674:	1e04      	subs	r4, r0, #0
		if (!node_tx) {
    5676:	d05b      	beq.n	5730 <event_connection_prepare+0x15c>
		switch (conn->llcp.conn_upd.state) {
    5678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    567a:	781b      	ldrb	r3, [r3, #0]
    567c:	079a      	lsls	r2, r3, #30
    567e:	0f92      	lsrs	r2, r2, #30
    5680:	2a01      	cmp	r2, #1
    5682:	d1b0      	bne.n	55e6 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    5684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5686:	43b3      	bics	r3, r6
    5688:	7013      	strb	r3, [r2, #0]
		event_counter + conn->latency + 6;
    568a:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
    568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    568e:	3506      	adds	r5, #6
    5690:	195d      	adds	r5, r3, r5
	conn->llcp.conn_upd.instant =
    5692:	003b      	movs	r3, r7
		event_counter + conn->latency + 6;
    5694:	b2ad      	uxth	r5, r5
	conn->llcp.conn_upd.instant =
    5696:	3368      	adds	r3, #104	; 0x68
    5698:	801d      	strh	r5, [r3, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    569a:	7903      	ldrb	r3, [r0, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    569c:	4944      	ldr	r1, [pc, #272]	; (57b0 <event_connection_prepare+0x1dc>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    569e:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    56a0:	230c      	movs	r3, #12
    56a2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    56a4:	2300      	movs	r3, #0
    56a6:	71c3      	strb	r3, [r0, #7]
		conn->llcp.conn_upd.win_size;
    56a8:	003b      	movs	r3, r7
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    56aa:	7106      	strb	r6, [r0, #4]
		conn->llcp.conn_upd.win_size;
    56ac:	3370      	adds	r3, #112	; 0x70
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    56ae:	781b      	ldrb	r3, [r3, #0]
    56b0:	7203      	strb	r3, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    56b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    56b4:	f7fa fd88 	bl	1c8 <__aeabi_uidiv>
    56b8:	0021      	movs	r1, r4
		conn->llcp.conn_upd.interval;
    56ba:	003b      	movs	r3, r7
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    56bc:	b280      	uxth	r0, r0
    56be:	7260      	strb	r0, [r4, #9]
    56c0:	3109      	adds	r1, #9
    56c2:	0a00      	lsrs	r0, r0, #8
    56c4:	7048      	strb	r0, [r1, #1]
		conn->llcp.conn_upd.interval;
    56c6:	3362      	adds	r3, #98	; 0x62
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    56c8:	781a      	ldrb	r2, [r3, #0]
    56ca:	72e2      	strb	r2, [r4, #11]
    56cc:	785b      	ldrb	r3, [r3, #1]
    56ce:	7323      	strb	r3, [r4, #12]
		conn->llcp.conn_upd.latency;
    56d0:	003b      	movs	r3, r7
    56d2:	3364      	adds	r3, #100	; 0x64
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    56d4:	781a      	ldrb	r2, [r3, #0]
    56d6:	7362      	strb	r2, [r4, #13]
    56d8:	785b      	ldrb	r3, [r3, #1]
    56da:	73a3      	strb	r3, [r4, #14]
		conn->llcp.conn_upd.timeout;
    56dc:	003b      	movs	r3, r7
    56de:	3366      	adds	r3, #102	; 0x66
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    56e0:	781a      	ldrb	r2, [r3, #0]
    56e2:	73e2      	strb	r2, [r4, #15]
    56e4:	785b      	ldrb	r3, [r3, #1]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    56e6:	7465      	strb	r5, [r4, #17]
    56e8:	0a2d      	lsrs	r5, r5, #8
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    56ea:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    56ec:	74a5      	strb	r5, [r4, #18]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    56ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    56f0:	683a      	ldr	r2, [r7, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    56f2:	67bb      	str	r3, [r7, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    56f4:	2a00      	cmp	r2, #0
    56f6:	da0a      	bge.n	570e <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    56f8:	6878      	ldr	r0, [r7, #4]
    56fa:	68bb      	ldr	r3, [r7, #8]
    56fc:	4283      	cmp	r3, r0
    56fe:	d200      	bcs.n	5702 <event_connection_prepare+0x12e>
    5700:	0003      	movs	r3, r0
			conn->llcp.conn_upd.ticks_anchor -=
    5702:	980c      	ldr	r0, [sp, #48]	; 0x30
				(conn->hdr.ticks_xtal_to_start &
    5704:	0052      	lsls	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    5706:	181b      	adds	r3, r3, r0
				(conn->hdr.ticks_xtal_to_start &
    5708:	0852      	lsrs	r2, r2, #1
			conn->llcp.conn_upd.ticks_anchor -=
    570a:	1a9b      	subs	r3, r3, r2
    570c:	67bb      	str	r3, [r7, #120]	; 0x78
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    570e:	4b29      	ldr	r3, [pc, #164]	; (57b4 <event_connection_prepare+0x1e0>)
    5710:	4a29      	ldr	r2, [pc, #164]	; (57b8 <event_connection_prepare+0x1e4>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    5712:	6779      	str	r1, [r7, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    5714:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5716:	2201      	movs	r2, #1
    5718:	2000      	movs	r0, #0
    571a:	0011      	movs	r1, r2
		mayfly_sched_offset->param = (void *)conn;
    571c:	609f      	str	r7, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    571e:	f7fd f895 	bl	284c <mayfly_enqueue>
		LL_ASSERT(!retval);
    5722:	2800      	cmp	r0, #0
    5724:	d000      	beq.n	5728 <event_connection_prepare+0x154>
    5726:	e75e      	b.n	55e6 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    5728:	0021      	movs	r1, r4
    572a:	0038      	movs	r0, r7
    572c:	f7ff fec4 	bl	54b8 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    5730:	003c      	movs	r4, r7
    5732:	003d      	movs	r5, r7
    5734:	3499      	adds	r4, #153	; 0x99
    5736:	3598      	adds	r5, #152	; 0x98
    5738:	7822      	ldrb	r2, [r4, #0]
    573a:	782b      	ldrb	r3, [r5, #0]
    573c:	429a      	cmp	r2, r3
    573e:	d01e      	beq.n	577e <event_connection_prepare+0x1aa>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    5740:	2005      	movs	r0, #5
    5742:	f7ff fc39 	bl	4fb8 <event_stop.constprop.48>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5746:	4819      	ldr	r0, [pc, #100]	; (57ac <event_connection_prepare+0x1d8>)
    5748:	3051      	adds	r0, #81	; 0x51
    574a:	30ff      	adds	r0, #255	; 0xff
    574c:	f7fc ffc8 	bl	26e0 <mem_acquire>
    5750:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    5752:	d014      	beq.n	577e <event_connection_prepare+0x1aa>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    5754:	782b      	ldrb	r3, [r5, #0]
    5756:	7023      	strb	r3, [r4, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5758:	2303      	movs	r3, #3
    575a:	7902      	ldrb	r2, [r0, #4]
    575c:	4313      	orrs	r3, r2
    575e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    5760:	2302      	movs	r3, #2
    5762:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5764:	71c3      	strb	r3, [r0, #7]
				conn->llcp_terminate.reason_own;
    5766:	003b      	movs	r3, r7
    5768:	339a      	adds	r3, #154	; 0x9a
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    576a:	781b      	ldrb	r3, [r3, #0]
    576c:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    576e:	0038      	movs	r0, r7
    5770:	f7ff fea2 	bl	54b8 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    5774:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    5776:	2b01      	cmp	r3, #1
    5778:	d800      	bhi.n	577c <event_connection_prepare+0x1a8>
    577a:	e28b      	b.n	5c94 <event_connection_prepare+0x6c0>
				conn->procedure_expire++;
    577c:	86bb      	strh	r3, [r7, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    577e:	8c3a      	ldrh	r2, [r7, #32]
    5780:	7f7c      	ldrb	r4, [r7, #29]
    5782:	3207      	adds	r2, #7
    5784:	1d3b      	adds	r3, r7, #4
    5786:	68b9      	ldr	r1, [r7, #8]
    5788:	b2d2      	uxtb	r2, r2
    578a:	480c      	ldr	r0, [pc, #48]	; (57bc <event_connection_prepare+0x1e8>)
    578c:	2c7f      	cmp	r4, #127	; 0x7f
    578e:	d800      	bhi.n	5792 <event_connection_prepare+0x1be>
    5790:	480b      	ldr	r0, [pc, #44]	; (57c0 <event_connection_prepare+0x1ec>)
    5792:	9002      	str	r0, [sp, #8]
    5794:	9201      	str	r2, [sp, #4]
    5796:	9100      	str	r1, [sp, #0]
    5798:	003a      	movs	r2, r7
    579a:	9703      	str	r7, [sp, #12]
    579c:	990e      	ldr	r1, [sp, #56]	; 0x38
    579e:	980c      	ldr	r0, [sp, #48]	; 0x30
    57a0:	f7ff fc1a 	bl	4fd8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    57a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    57a6:	3201      	adds	r2, #1
    57a8:	847a      	strh	r2, [r7, #34]	; 0x22
    57aa:	e162      	b.n	5a72 <event_connection_prepare+0x49e>
    57ac:	20000254 	.word	0x20000254
    57b0:	000004e2 	.word	0x000004e2
    57b4:	20002338 	.word	0x20002338
    57b8:	00004ab9 	.word	0x00004ab9
    57bc:	00005ce9 	.word	0x00005ce9
    57c0:	000077c5 	.word	0x000077c5
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    57c4:	003a      	movs	r2, r7
    57c6:	3268      	adds	r2, #104	; 0x68
    57c8:	8812      	ldrh	r2, [r2, #0]
    57ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    57cc:	1a8a      	subs	r2, r1, r2
	} else if (instant_latency <= 0x7FFF) {
    57ce:	b296      	uxth	r6, r2
    57d0:	0412      	lsls	r2, r2, #16
    57d2:	d4ad      	bmi.n	5730 <event_connection_prepare+0x15c>
		conn->llcp_ack = conn->llcp_req;
    57d4:	003a      	movs	r2, r7
    57d6:	325c      	adds	r2, #92	; 0x5c
    57d8:	7812      	ldrb	r2, [r2, #0]
		_radio.ticker_id_prepare = 0;
    57da:	7323      	strb	r3, [r4, #12]
		conn->llcp_ack = conn->llcp_req;
    57dc:	702a      	strb	r2, [r5, #0]
		if (_radio.conn_upd == conn) {
    57de:	22be      	movs	r2, #190	; 0xbe
    57e0:	0052      	lsls	r2, r2, #1
    57e2:	58a1      	ldr	r1, [r4, r2]
    57e4:	428f      	cmp	r7, r1
    57e6:	d100      	bne.n	57ea <event_connection_prepare+0x216>
			_radio.conn_upd = NULL;
    57e8:	50a3      	str	r3, [r4, r2]
		if ((conn->llcp.conn_upd.interval !=
    57ea:	003d      	movs	r5, r7
    57ec:	003c      	movs	r4, r7
    57ee:	3562      	adds	r5, #98	; 0x62
    57f0:	882b      	ldrh	r3, [r5, #0]
    57f2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    57f4:	3464      	adds	r4, #100	; 0x64
    57f6:	4299      	cmp	r1, r3
    57f8:	d112      	bne.n	5820 <event_connection_prepare+0x24c>
		     conn->conn_interval) ||
    57fa:	8822      	ldrh	r2, [r4, #0]
    57fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    57fe:	429a      	cmp	r2, r3
    5800:	d10e      	bne.n	5820 <event_connection_prepare+0x24c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    5802:	4bd4      	ldr	r3, [pc, #848]	; (5b54 <event_connection_prepare+0x580>)
    5804:	4359      	muls	r1, r3
    5806:	003b      	movs	r3, r7
    5808:	3366      	adds	r3, #102	; 0x66
    580a:	8818      	ldrh	r0, [r3, #0]
    580c:	4bd2      	ldr	r3, [pc, #840]	; (5b58 <event_connection_prepare+0x584>)
    580e:	4358      	muls	r0, r3
    5810:	1840      	adds	r0, r0, r1
    5812:	3801      	subs	r0, #1
    5814:	f7fa fd26 	bl	264 <__aeabi_idiv>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    5818:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    581a:	b280      	uxth	r0, r0
    581c:	4283      	cmp	r3, r0
    581e:	d01b      	beq.n	5858 <event_connection_prepare+0x284>
			node_rx = packet_rx_reserve_get(2);
    5820:	2002      	movs	r0, #2
    5822:	f7fe fcbd 	bl	41a0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    5826:	2800      	cmp	r0, #0
    5828:	d100      	bne.n	582c <event_connection_prepare+0x258>
    582a:	e6dc      	b.n	55e6 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    582c:	8c3b      	ldrh	r3, [r7, #32]
    582e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    5830:	2308      	movs	r3, #8
    5832:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    5834:	2300      	movs	r3, #0
    5836:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    5838:	782b      	ldrb	r3, [r5, #0]
    583a:	7303      	strb	r3, [r0, #12]
    583c:	786b      	ldrb	r3, [r5, #1]
    583e:	7343      	strb	r3, [r0, #13]
			radio_le_conn_update_cmplt->latency =
    5840:	7823      	ldrb	r3, [r4, #0]
    5842:	7383      	strb	r3, [r0, #14]
    5844:	7863      	ldrb	r3, [r4, #1]
    5846:	73c3      	strb	r3, [r0, #15]
				conn->llcp.conn_upd.timeout;
    5848:	003b      	movs	r3, r7
    584a:	3366      	adds	r3, #102	; 0x66
			radio_le_conn_update_cmplt->timeout =
    584c:	781a      	ldrb	r2, [r3, #0]
    584e:	7402      	strb	r2, [r0, #16]
    5850:	785b      	ldrb	r3, [r3, #1]
    5852:	7443      	strb	r3, [r0, #17]
			packet_rx_enqueue();
    5854:	f7ff f826 	bl	48a4 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5858:	683b      	ldr	r3, [r7, #0]
    585a:	2b00      	cmp	r3, #0
    585c:	da0b      	bge.n	5876 <event_connection_prepare+0x2a2>
			u32_t ticks_prepare_to_start =
    585e:	687a      	ldr	r2, [r7, #4]
    5860:	68b8      	ldr	r0, [r7, #8]
    5862:	4290      	cmp	r0, r2
    5864:	d200      	bcs.n	5868 <event_connection_prepare+0x294>
    5866:	0010      	movs	r0, r2
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    586a:	005b      	lsls	r3, r3, #1
    586c:	085b      	lsrs	r3, r3, #1
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    586e:	1810      	adds	r0, r2, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5870:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5872:	1ac3      	subs	r3, r0, r3
    5874:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_old = instant_latency * conn->conn_interval;
    5876:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    5878:	882b      	ldrh	r3, [r5, #0]
		conn_interval_old = instant_latency * conn->conn_interval;
    587a:	4374      	muls	r4, r6
    587c:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    587e:	0019      	movs	r1, r3
    5880:	0020      	movs	r0, r4
			conn->llcp.conn_upd.interval;
    5882:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
    5884:	f7fa fca0 	bl	1c8 <__aeabi_uidiv>
    5888:	b283      	uxth	r3, r0
		conn_interval_new = latency *
    588a:	980a      	ldr	r0, [sp, #40]	; 0x28
		latency = conn_interval_old /
    588c:	930d      	str	r3, [sp, #52]	; 0x34
		conn_interval_new = latency *
    588e:	4358      	muls	r0, r3
    5890:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    5892:	4284      	cmp	r4, r0
    5894:	d300      	bcc.n	5898 <event_connection_prepare+0x2c4>
    5896:	e0ee      	b.n	5a76 <event_connection_prepare+0x4a2>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    5898:	2324      	movs	r3, #36	; 0x24
    589a:	1b00      	subs	r0, r0, r4
    589c:	4aaf      	ldr	r2, [pc, #700]	; (5b5c <event_connection_prepare+0x588>)
    589e:	33ff      	adds	r3, #255	; 0xff
    58a0:	17c1      	asrs	r1, r0, #31
    58a2:	f7fa fd61 	bl	368 <__aeabi_lmul>
    58a6:	2307      	movs	r3, #7
    58a8:	4aad      	ldr	r2, [pc, #692]	; (5b60 <event_connection_prepare+0x58c>)
    58aa:	f7fa fd3d 	bl	328 <__aeabi_uldivmod>
    58ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    58b0:	0200      	lsls	r0, r0, #8
    58b2:	0a00      	lsrs	r0, r0, #8
    58b4:	18c3      	adds	r3, r0, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    58b6:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    58b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    58ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    58bc:	1b9b      	subs	r3, r3, r6
    58be:	18d3      	adds	r3, r2, r3
    58c0:	853b      	strh	r3, [r7, #40]	; 0x28
		ticks_slot_offset =
    58c2:	687a      	ldr	r2, [r7, #4]
    58c4:	683b      	ldr	r3, [r7, #0]
    58c6:	920e      	str	r2, [sp, #56]	; 0x38
    58c8:	429a      	cmp	r2, r3
    58ca:	d200      	bcs.n	58ce <event_connection_prepare+0x2fa>
    58cc:	930e      	str	r3, [sp, #56]	; 0x38
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    58ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    58d0:	4da0      	ldr	r5, [pc, #640]	; (5b54 <event_connection_prepare+0x580>)
    58d2:	435d      	muls	r5, r3
		if (conn->role) {
    58d4:	7f7b      	ldrb	r3, [r7, #29]
    58d6:	2b7f      	cmp	r3, #127	; 0x7f
    58d8:	d800      	bhi.n	58dc <event_connection_prepare+0x308>
    58da:	e0e0      	b.n	5a9e <event_connection_prepare+0x4ca>
				conn->slave.window_widening_periodic_us *
    58dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				(((gc_lookup_ppm[_radio.sca] +
    58de:	4aa1      	ldr	r2, [pc, #644]	; (5b64 <event_connection_prepare+0x590>)
				conn->slave.window_widening_periodic_us *
    58e0:	435e      	muls	r6, r3
			conn->slave.window_widening_prepare_us -=
    58e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    58e4:	49a0      	ldr	r1, [pc, #640]	; (5b68 <event_connection_prepare+0x594>)
			conn->slave.window_widening_prepare_us -=
    58e6:	1b9e      	subs	r6, r3, r6
				(((gc_lookup_ppm[_radio.sca] +
    58e8:	4ba0      	ldr	r3, [pc, #640]	; (5b6c <event_connection_prepare+0x598>)
    58ea:	33ff      	adds	r3, #255	; 0xff
    58ec:	7f5b      	ldrb	r3, [r3, #29]
    58ee:	005b      	lsls	r3, r3, #1
    58f0:	5a98      	ldrh	r0, [r3, r2]
				   gc_lookup_ppm[conn->slave.sca]) *
    58f2:	003b      	movs	r3, r7
    58f4:	3338      	adds	r3, #56	; 0x38
    58f6:	781b      	ldrb	r3, [r3, #0]
    58f8:	06db      	lsls	r3, r3, #27
    58fa:	0f5b      	lsrs	r3, r3, #29
    58fc:	005b      	lsls	r3, r3, #1
    58fe:	5a9b      	ldrh	r3, [r3, r2]
				(((gc_lookup_ppm[_radio.sca] +
    5900:	18c0      	adds	r0, r0, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    5902:	4368      	muls	r0, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5904:	4b9a      	ldr	r3, [pc, #616]	; (5b70 <event_connection_prepare+0x59c>)
    5906:	18c0      	adds	r0, r0, r3
    5908:	f7fa fc5e 	bl	1c8 <__aeabi_uidiv>
				conn->llcp.conn_upd.win_size * 1250;
    590c:	003a      	movs	r2, r7
				(conn_interval_us >> 1) - RADIO_TIFS;
    590e:	086b      	lsrs	r3, r5, #1
    5910:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_periodic_us =
    5912:	63f8      	str	r0, [r7, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    5914:	643b      	str	r3, [r7, #64]	; 0x40
				conn->llcp.conn_upd.win_size * 1250;
    5916:	3270      	adds	r2, #112	; 0x70
    5918:	7812      	ldrb	r2, [r2, #0]
    591a:	498e      	ldr	r1, [pc, #568]	; (5b54 <event_connection_prepare+0x580>)
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    591c:	0004      	movs	r4, r0
				conn->llcp.conn_upd.win_size * 1250;
    591e:	434a      	muls	r2, r1
			conn->slave.window_size_prepare_us =
    5920:	64fa      	str	r2, [r7, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    5922:	2200      	movs	r2, #0
				conn->slave.window_widening_periodic_us *
    5924:	980d      	ldr	r0, [sp, #52]	; 0x34
			conn->slave.ticks_to_offset = 0;
    5926:	65ba      	str	r2, [r7, #88]	; 0x58
				conn->slave.window_widening_periodic_us *
    5928:	4360      	muls	r0, r4
			conn->slave.window_widening_prepare_us +=
    592a:	1836      	adds	r6, r6, r0
			if (conn->slave.window_widening_prepare_us >
    592c:	42b3      	cmp	r3, r6
    592e:	d200      	bcs.n	5932 <event_connection_prepare+0x35e>
    5930:	e0b3      	b.n	5a9a <event_connection_prepare+0x4c6>
			conn->slave.window_widening_prepare_us +=
    5932:	647e      	str	r6, [r7, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5934:	4a8f      	ldr	r2, [pc, #572]	; (5b74 <event_connection_prepare+0x5a0>)
    5936:	2300      	movs	r3, #0
    5938:	2100      	movs	r1, #0
    593a:	f7fa fd15 	bl	368 <__aeabi_lmul>
    593e:	4a88      	ldr	r2, [pc, #544]	; (5b60 <event_connection_prepare+0x58c>)
    5940:	2307      	movs	r3, #7
    5942:	f7fa fcf1 	bl	328 <__aeabi_uldivmod>
    5946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5948:	4982      	ldr	r1, [pc, #520]	; (5b54 <event_connection_prepare+0x580>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    594a:	1a1b      	subs	r3, r3, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    594c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    594e:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5950:	f7fa fc3a 	bl	1c8 <__aeabi_uidiv>
    5954:	4b7f      	ldr	r3, [pc, #508]	; (5b54 <event_connection_prepare+0x580>)
    5956:	4a87      	ldr	r2, [pc, #540]	; (5b74 <event_connection_prepare+0x5a0>)
    5958:	4358      	muls	r0, r3
    595a:	2100      	movs	r1, #0
    595c:	2300      	movs	r3, #0
    595e:	f7fa fd03 	bl	368 <__aeabi_lmul>
    5962:	4a7f      	ldr	r2, [pc, #508]	; (5b60 <event_connection_prepare+0x58c>)
    5964:	2307      	movs	r3, #7
    5966:	f7fa fcdf 	bl	328 <__aeabi_uldivmod>
    596a:	0200      	lsls	r0, r0, #8
    596c:	0a06      	lsrs	r6, r0, #8
			periodic_us -= conn->slave.window_widening_periodic_us;
    596e:	1b2c      	subs	r4, r5, r4
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5970:	466b      	mov	r3, sp
    5972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5974:	0029      	movs	r1, r5
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5976:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
    5978:	003b      	movs	r3, r7
    597a:	3364      	adds	r3, #100	; 0x64
    597c:	881b      	ldrh	r3, [r3, #0]
    597e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5980:	003b      	movs	r3, r7
    5982:	3366      	adds	r3, #102	; 0x66
    5984:	8818      	ldrh	r0, [r3, #0]
    5986:	4b74      	ldr	r3, [pc, #464]	; (5b58 <event_connection_prepare+0x584>)
    5988:	4358      	muls	r0, r3
    598a:	1940      	adds	r0, r0, r5
    598c:	3801      	subs	r0, #1
    598e:	f7fa fc1b 	bl	1c8 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5992:	4b79      	ldr	r3, [pc, #484]	; (5b78 <event_connection_prepare+0x5a4>)
		conn->supervision_reload =
    5994:	85f8      	strh	r0, [r7, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5996:	0029      	movs	r1, r5
    5998:	18e8      	adds	r0, r5, r3
    599a:	f7fa fc15 	bl	1c8 <__aeabi_uidiv>
		if (!conn->llcp.conn_upd.is_internal) {
    599e:	003b      	movs	r3, r7
    59a0:	2204      	movs	r2, #4
		conn->procedure_reload =
    59a2:	8678      	strh	r0, [r7, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    59a4:	3360      	adds	r3, #96	; 0x60
    59a6:	781b      	ldrb	r3, [r3, #0]
    59a8:	4013      	ands	r3, r2
    59aa:	d100      	bne.n	59ae <event_connection_prepare+0x3da>
			conn->supervision_expire = 0;
    59ac:	863b      	strh	r3, [r7, #48]	; 0x30
		mayfly_was_enabled =
    59ae:	2101      	movs	r1, #1
    59b0:	2000      	movs	r0, #0
    59b2:	f003 fc18 	bl	91e6 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    59b6:	2200      	movs	r2, #0
		mayfly_was_enabled =
    59b8:	900d      	str	r0, [sp, #52]	; 0x34
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    59ba:	2101      	movs	r1, #1
    59bc:	0010      	movs	r0, r2
    59be:	f7fc ff21 	bl	2804 <mayfly_enable>
		ticker_status =
    59c2:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    59c4:	8c3a      	ldrh	r2, [r7, #32]
		ticker_status =
    59c6:	4b6d      	ldr	r3, [pc, #436]	; (5b7c <event_connection_prepare+0x5a8>)
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    59c8:	3207      	adds	r2, #7
		ticker_status =
    59ca:	9300      	str	r3, [sp, #0]
    59cc:	b2d2      	uxtb	r2, r2
    59ce:	4b6c      	ldr	r3, [pc, #432]	; (5b80 <event_connection_prepare+0x5ac>)
    59d0:	0008      	movs	r0, r1
    59d2:	f7fd fd41 	bl	3458 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    59d6:	2302      	movs	r3, #2
    59d8:	4398      	bics	r0, r3
    59da:	1e05      	subs	r5, r0, #0
    59dc:	d000      	beq.n	59e0 <event_connection_prepare+0x40c>
    59de:	e602      	b.n	55e6 <event_connection_prepare+0x12>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    59e0:	8c3b      	ldrh	r3, [r7, #32]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    59e2:	4a64      	ldr	r2, [pc, #400]	; (5b74 <event_connection_prepare+0x5a0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    59e4:	3307      	adds	r3, #7
    59e6:	b2db      	uxtb	r3, r3
    59e8:	930f      	str	r3, [sp, #60]	; 0x3c
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    59ea:	0020      	movs	r0, r4
    59ec:	2300      	movs	r3, #0
    59ee:	0029      	movs	r1, r5
    59f0:	f7fa fcba 	bl	368 <__aeabi_lmul>
    59f4:	4a5a      	ldr	r2, [pc, #360]	; (5b60 <event_connection_prepare+0x58c>)
    59f6:	2307      	movs	r3, #7
    59f8:	900a      	str	r0, [sp, #40]	; 0x28
    59fa:	910b      	str	r1, [sp, #44]	; 0x2c
    59fc:	f7fa fc94 	bl	328 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5a00:	0204      	lsls	r4, r0, #8
    5a02:	0a24      	lsrs	r4, r4, #8
				     HAL_TICKER_REMAINDER(periodic_us),
    5a04:	4a56      	ldr	r2, [pc, #344]	; (5b60 <event_connection_prepare+0x58c>)
    5a06:	2307      	movs	r3, #7
    5a08:	0020      	movs	r0, r4
    5a0a:	0029      	movs	r1, r5
    5a0c:	f7fa fcac 	bl	368 <__aeabi_lmul>
    5a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a14:	1a12      	subs	r2, r2, r0
    5a16:	418b      	sbcs	r3, r1
    5a18:	0010      	movs	r0, r2
    5a1a:	22fa      	movs	r2, #250	; 0xfa
    5a1c:	0019      	movs	r1, r3
    5a1e:	0092      	lsls	r2, r2, #2
    5a20:	2300      	movs	r3, #0
    5a22:	f7fa fc81 	bl	328 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5a26:	68fa      	ldr	r2, [r7, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    5a28:	0001      	movs	r1, r0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5a2a:	4694      	mov	ip, r2
    5a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5a2e:	7f78      	ldrb	r0, [r7, #29]
    5a30:	4463      	add	r3, ip
    5a32:	4a54      	ldr	r2, [pc, #336]	; (5b84 <event_connection_prepare+0x5b0>)
    5a34:	287f      	cmp	r0, #127	; 0x7f
    5a36:	d800      	bhi.n	5a3a <event_connection_prepare+0x466>
    5a38:	4a53      	ldr	r2, [pc, #332]	; (5b88 <event_connection_prepare+0x5b4>)
		ticker_status =
    5a3a:	4854      	ldr	r0, [pc, #336]	; (5b8c <event_connection_prepare+0x5b8>)
    5a3c:	9205      	str	r2, [sp, #20]
    5a3e:	9008      	str	r0, [sp, #32]
    5a40:	484f      	ldr	r0, [pc, #316]	; (5b80 <event_connection_prepare+0x5ac>)
    5a42:	9304      	str	r3, [sp, #16]
    5a44:	9007      	str	r0, [sp, #28]
    5a46:	2000      	movs	r0, #0
    5a48:	9102      	str	r1, [sp, #8]
    5a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a4c:	9706      	str	r7, [sp, #24]
    5a4e:	9003      	str	r0, [sp, #12]
    5a50:	9401      	str	r4, [sp, #4]
    5a52:	9600      	str	r6, [sp, #0]
    5a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5a56:	0001      	movs	r1, r0
    5a58:	f7fd fc6c 	bl	3334 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a5c:	2302      	movs	r3, #2
    5a5e:	4398      	bics	r0, r3
    5a60:	d000      	beq.n	5a64 <event_connection_prepare+0x490>
    5a62:	e5c0      	b.n	55e6 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    5a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5a66:	2b00      	cmp	r3, #0
    5a68:	d003      	beq.n	5a72 <event_connection_prepare+0x49e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5a6a:	2201      	movs	r2, #1
    5a6c:	0011      	movs	r1, r2
    5a6e:	f7fc fec9 	bl	2804 <mayfly_enable>
}
    5a72:	b011      	add	sp, #68	; 0x44
    5a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5a76:	990a      	ldr	r1, [sp, #40]	; 0x28
    5a78:	0020      	movs	r0, r4
    5a7a:	f7fa fbe9 	bl	250 <__aeabi_uidivmod>
    5a7e:	2324      	movs	r3, #36	; 0x24
    5a80:	b288      	uxth	r0, r1
    5a82:	4a36      	ldr	r2, [pc, #216]	; (5b5c <event_connection_prepare+0x588>)
    5a84:	33ff      	adds	r3, #255	; 0xff
    5a86:	2100      	movs	r1, #0
    5a88:	f7fa fc6e 	bl	368 <__aeabi_lmul>
    5a8c:	2307      	movs	r3, #7
    5a8e:	4a34      	ldr	r2, [pc, #208]	; (5b60 <event_connection_prepare+0x58c>)
    5a90:	f7fa fc4a 	bl	328 <__aeabi_uldivmod>
    5a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a96:	1a1b      	subs	r3, r3, r0
    5a98:	e70d      	b.n	58b6 <event_connection_prepare+0x2e2>
				conn->slave.window_widening_prepare_us =
    5a9a:	647b      	str	r3, [r7, #68]	; 0x44
    5a9c:	e74a      	b.n	5934 <event_connection_prepare+0x360>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5a9e:	4a35      	ldr	r2, [pc, #212]	; (5b74 <event_connection_prepare+0x5a0>)
    5aa0:	2300      	movs	r3, #0
    5aa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    5aa4:	2100      	movs	r1, #0
    5aa6:	f7fa fc5f 	bl	368 <__aeabi_lmul>
    5aaa:	4a2d      	ldr	r2, [pc, #180]	; (5b60 <event_connection_prepare+0x58c>)
    5aac:	2307      	movs	r3, #7
    5aae:	f7fa fc3b 	bl	328 <__aeabi_uldivmod>
    5ab2:	0200      	lsls	r0, r0, #8
    5ab4:	0a00      	lsrs	r0, r0, #8
			ticks_win_offset += 1;
    5ab6:	1c46      	adds	r6, r0, #1
		periodic_us = conn_interval_us;
    5ab8:	002c      	movs	r4, r5
    5aba:	e759      	b.n	5970 <event_connection_prepare+0x39c>
	if (conn->llcp.chan_map.initiate) {
    5abc:	003b      	movs	r3, r7
    5abe:	3360      	adds	r3, #96	; 0x60
    5ac0:	930d      	str	r3, [sp, #52]	; 0x34
    5ac2:	781b      	ldrb	r3, [r3, #0]
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d024      	beq.n	5b12 <event_connection_prepare+0x53e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5ac8:	0020      	movs	r0, r4
    5aca:	3051      	adds	r0, #81	; 0x51
    5acc:	30ff      	adds	r0, #255	; 0xff
    5ace:	f7fc fe07 	bl	26e0 <mem_acquire>
    5ad2:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    5ad4:	d100      	bne.n	5ad8 <event_connection_prepare+0x504>
    5ad6:	e62b      	b.n	5730 <event_connection_prepare+0x15c>
			conn->llcp.chan_map.initiate = 0;
    5ad8:	2300      	movs	r3, #0
			conn->llcp.chan_map.instant =
    5ada:	003d      	movs	r5, r7
			conn->llcp.chan_map.initiate = 0;
    5adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			conn->llcp.chan_map.instant =
    5ade:	3566      	adds	r5, #102	; 0x66
			conn->llcp.chan_map.initiate = 0;
    5ae0:	7013      	strb	r3, [r2, #0]
				event_counter + conn->latency + 6;
    5ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    5ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5ae6:	3306      	adds	r3, #6
    5ae8:	18d3      	adds	r3, r2, r3
			conn->llcp.chan_map.instant =
    5aea:	802b      	strh	r3, [r5, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5aec:	2303      	movs	r3, #3
    5aee:	7902      	ldrb	r2, [r0, #4]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    5af0:	0039      	movs	r1, r7
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5af2:	4313      	orrs	r3, r2
    5af4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    5af6:	2308      	movs	r3, #8
    5af8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5afa:	3b07      	subs	r3, #7
    5afc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    5afe:	2205      	movs	r2, #5
    5b00:	3008      	adds	r0, #8
    5b02:	3161      	adds	r1, #97	; 0x61
    5b04:	f7fa fdb0 	bl	668 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    5b08:	782b      	ldrb	r3, [r5, #0]
    5b0a:	7363      	strb	r3, [r4, #13]
    5b0c:	786b      	ldrb	r3, [r5, #1]
    5b0e:	73a3      	strb	r3, [r4, #14]
    5b10:	e60a      	b.n	5728 <event_connection_prepare+0x154>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    5b12:	003b      	movs	r3, r7
    5b14:	3366      	adds	r3, #102	; 0x66
    5b16:	881b      	ldrh	r3, [r3, #0]
    5b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5b1a:	1ad3      	subs	r3, r2, r3
    5b1c:	041b      	lsls	r3, r3, #16
    5b1e:	d500      	bpl.n	5b22 <event_connection_prepare+0x54e>
    5b20:	e606      	b.n	5730 <event_connection_prepare+0x15c>
		memcpy(&conn->data_chan_map[0],
    5b22:	003c      	movs	r4, r7
    5b24:	0039      	movs	r1, r7
		conn->llcp_ack = conn->llcp_req;
    5b26:	7833      	ldrb	r3, [r6, #0]
		memcpy(&conn->data_chan_map[0],
    5b28:	3417      	adds	r4, #23
		conn->llcp_ack = conn->llcp_req;
    5b2a:	702b      	strb	r3, [r5, #0]
		memcpy(&conn->data_chan_map[0],
    5b2c:	2205      	movs	r2, #5
    5b2e:	3161      	adds	r1, #97	; 0x61
    5b30:	0020      	movs	r0, r4
    5b32:	f7fa fd99 	bl	668 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    5b36:	2105      	movs	r1, #5
    5b38:	0020      	movs	r0, r4
    5b3a:	f7fc ff69 	bl	2a10 <util_ones_count_get>
		conn->data_chan_count =
    5b3e:	223f      	movs	r2, #63	; 0x3f
    5b40:	0003      	movs	r3, r0
    5b42:	7f78      	ldrb	r0, [r7, #29]
    5b44:	4013      	ands	r3, r2
    5b46:	4390      	bics	r0, r2
    5b48:	4318      	orrs	r0, r3
		conn->chm_update = 1;
    5b4a:	2301      	movs	r3, #1
		conn->data_chan_count =
    5b4c:	7778      	strb	r0, [r7, #29]
		conn->chm_update = 1;
    5b4e:	773b      	strb	r3, [r7, #28]
    5b50:	e5ee      	b.n	5730 <event_connection_prepare+0x15c>
    5b52:	46c0      	nop			; (mov r8, r8)
    5b54:	000004e2 	.word	0x000004e2
    5b58:	00002710 	.word	0x00002710
    5b5c:	09ce5400 	.word	0x09ce5400
    5b60:	1afd498d 	.word	0x1afd498d
    5b64:	0000aff2 	.word	0x0000aff2
    5b68:	000f4240 	.word	0x000f4240
    5b6c:	20000254 	.word	0x20000254
    5b70:	000f423f 	.word	0x000f423f
    5b74:	3b9aca00 	.word	0x3b9aca00
    5b78:	026259ff 	.word	0x026259ff
    5b7c:	00001aa1 	.word	0x00001aa1
    5b80:	00004f01 	.word	0x00004f01
    5b84:	00005ca5 	.word	0x00005ca5
    5b88:	00005c9d 	.word	0x00005c9d
    5b8c:	00001ab1 	.word	0x00001ab1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5b90:	0020      	movs	r0, r4
    5b92:	3051      	adds	r0, #81	; 0x51
    5b94:	30ff      	adds	r0, #255	; 0xff
    5b96:	f7fc fda3 	bl	26e0 <mem_acquire>
    5b9a:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    5b9c:	d100      	bne.n	5ba0 <event_connection_prepare+0x5cc>
    5b9e:	e5c7      	b.n	5730 <event_connection_prepare+0x15c>
		conn->llcp_ack = conn->llcp_req;
    5ba0:	7833      	ldrb	r3, [r6, #0]
    5ba2:	702b      	strb	r3, [r5, #0]
		conn->llcp_features = RADIO_BLE_FEAT;
    5ba4:	003d      	movs	r5, r7
    5ba6:	4b3c      	ldr	r3, [pc, #240]	; (5c98 <event_connection_prepare+0x6c4>)
    5ba8:	358c      	adds	r5, #140	; 0x8c
    5baa:	602b      	str	r3, [r5, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5bac:	2303      	movs	r3, #3
    5bae:	7902      	ldrb	r2, [r0, #4]
    5bb0:	4313      	orrs	r3, r2
    5bb2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    5bb4:	2309      	movs	r3, #9
		pdu_ctrl_tx->llctrl.opcode =
    5bb6:	7f7a      	ldrb	r2, [r7, #29]
		pdu_ctrl_tx->len =
    5bb8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    5bba:	3b01      	subs	r3, #1
    5bbc:	2a7f      	cmp	r2, #127	; 0x7f
    5bbe:	d900      	bls.n	5bc2 <event_connection_prepare+0x5ee>
    5bc0:	3306      	adds	r3, #6
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5bc2:	0020      	movs	r0, r4
		pdu_ctrl_tx->llctrl.opcode =
    5bc4:	71e3      	strb	r3, [r4, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5bc6:	2208      	movs	r2, #8
    5bc8:	2100      	movs	r1, #0
    5bca:	3008      	adds	r0, #8
    5bcc:	f7fa fd76 	bl	6bc <memset>
		ctrl_tx_enqueue(conn, node_tx);
    5bd0:	0021      	movs	r1, r4
			conn->llcp_features & 0xFF;
    5bd2:	682b      	ldr	r3, [r5, #0]
			(conn->llcp_features >> 8) & 0xFF;
    5bd4:	0a1a      	lsrs	r2, r3, #8
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    5bd6:	7223      	strb	r3, [r4, #8]
			(conn->llcp_features >> 16) & 0xFF;
    5bd8:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    5bda:	7262      	strb	r2, [r4, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    5bdc:	72a3      	strb	r3, [r4, #10]
			ctrl_tx_enqueue(conn, node_tx);
    5bde:	0038      	movs	r0, r7
    5be0:	f7ff fc6a 	bl	54b8 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    5be4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    5be6:	86bb      	strh	r3, [r7, #52]	; 0x34
    5be8:	e5a2      	b.n	5730 <event_connection_prepare+0x15c>
	if (conn->llcp_version.tx == 0) {
    5bea:	003b      	movs	r3, r7
    5bec:	2201      	movs	r2, #1
    5bee:	3390      	adds	r3, #144	; 0x90
    5bf0:	930d      	str	r3, [sp, #52]	; 0x34
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	4213      	tst	r3, r2
    5bf6:	d123      	bne.n	5c40 <event_connection_prepare+0x66c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5bf8:	0020      	movs	r0, r4
    5bfa:	3051      	adds	r0, #81	; 0x51
    5bfc:	30ff      	adds	r0, #255	; 0xff
    5bfe:	f7fc fd6f 	bl	26e0 <mem_acquire>
    5c02:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    5c04:	d100      	bne.n	5c08 <event_connection_prepare+0x634>
    5c06:	e593      	b.n	5730 <event_connection_prepare+0x15c>
			conn->llcp_ack = conn->llcp_req;
    5c08:	003b      	movs	r3, r7
    5c0a:	335c      	adds	r3, #92	; 0x5c
    5c0c:	781a      	ldrb	r2, [r3, #0]
    5c0e:	705a      	strb	r2, [r3, #1]
			conn->llcp_version.tx = 1;
    5c10:	2201      	movs	r2, #1
    5c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c14:	781b      	ldrb	r3, [r3, #0]
    5c16:	4313      	orrs	r3, r2
    5c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5c1a:	7013      	strb	r3, [r2, #0]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5c1c:	2303      	movs	r3, #3
    5c1e:	7902      	ldrb	r2, [r0, #4]
    5c20:	4313      	orrs	r3, r2
    5c22:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    5c24:	2306      	movs	r3, #6
    5c26:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5c28:	18db      	adds	r3, r3, r3
    5c2a:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    5c2c:	3b03      	subs	r3, #3
    5c2e:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    5c30:	3b18      	subs	r3, #24
    5c32:	7243      	strb	r3, [r0, #9]
    5c34:	3314      	adds	r3, #20
    5c36:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    5c38:	3b06      	subs	r3, #6
    5c3a:	72c3      	strb	r3, [r0, #11]
    5c3c:	7303      	strb	r3, [r0, #12]
    5c3e:	e7ce      	b.n	5bde <event_connection_prepare+0x60a>
	} else if (conn->llcp_version.rx != 0) {
    5c40:	2002      	movs	r0, #2
    5c42:	4203      	tst	r3, r0
    5c44:	d100      	bne.n	5c48 <event_connection_prepare+0x674>
    5c46:	e4ce      	b.n	55e6 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    5c48:	7833      	ldrb	r3, [r6, #0]
    5c4a:	702b      	strb	r3, [r5, #0]
		node_rx = packet_rx_reserve_get(2);
    5c4c:	f7fe faa8 	bl	41a0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    5c50:	2800      	cmp	r0, #0
    5c52:	d100      	bne.n	5c56 <event_connection_prepare+0x682>
    5c54:	e4c7      	b.n	55e6 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    5c56:	8c3b      	ldrh	r3, [r7, #32]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5c58:	7a02      	ldrb	r2, [r0, #8]
		node_rx->hdr.handle = conn->handle;
    5c5a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    5c5c:	2301      	movs	r3, #1
    5c5e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5c60:	2303      	movs	r3, #3
    5c62:	4313      	orrs	r3, r2
    5c64:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    5c66:	2306      	movs	r3, #6
    5c68:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    5c6a:	18db      	adds	r3, r3, r3
    5c6c:	72c3      	strb	r3, [r0, #11]
			conn->llcp_version.version_number;
    5c6e:	003b      	movs	r3, r7
    5c70:	3391      	adds	r3, #145	; 0x91
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    5c72:	781b      	ldrb	r3, [r3, #0]
    5c74:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.company_id;
    5c76:	003b      	movs	r3, r7
    5c78:	3392      	adds	r3, #146	; 0x92
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    5c7a:	781a      	ldrb	r2, [r3, #0]
    5c7c:	7342      	strb	r2, [r0, #13]
    5c7e:	785b      	ldrb	r3, [r3, #1]
    5c80:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.sub_version_number;
    5c82:	003b      	movs	r3, r7
    5c84:	3394      	adds	r3, #148	; 0x94
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    5c86:	781a      	ldrb	r2, [r3, #0]
    5c88:	73c2      	strb	r2, [r0, #15]
    5c8a:	785b      	ldrb	r3, [r3, #1]
    5c8c:	7403      	strb	r3, [r0, #16]
		packet_rx_enqueue();
    5c8e:	f7fe fe09 	bl	48a4 <packet_rx_enqueue>
    5c92:	e54d      	b.n	5730 <event_connection_prepare+0x15c>
				conn->procedure_expire++;
    5c94:	3301      	adds	r3, #1
    5c96:	e571      	b.n	577c <event_connection_prepare+0x1a8>
    5c98:	0001400c 	.word	0x0001400c

00005c9c <event_master_prepare>:
{
    5c9c:	b510      	push	{r4, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    5c9e:	f7ff fc99 	bl	55d4 <event_connection_prepare>
}
    5ca2:	bd10      	pop	{r4, pc}

00005ca4 <event_slave_prepare>:
    5ca4:	b510      	push	{r4, lr}
    5ca6:	f7ff fc95 	bl	55d4 <event_connection_prepare>
    5caa:	bd10      	pop	{r4, pc}

00005cac <connection_configure>:
{
    5cac:	b510      	push	{r4, lr}
    5cae:	0004      	movs	r4, r0
	radio_reset();
    5cb0:	f002 ff5a 	bl	8b68 <radio_reset>
	radio_tx_power_set(0);
    5cb4:	2000      	movs	r0, #0
    5cb6:	f002 ff73 	bl	8ba0 <radio_tx_power_set>
	radio_isr_set(isr);
    5cba:	4809      	ldr	r0, [pc, #36]	; (5ce0 <connection_configure+0x34>)
    5cbc:	f002 ff3a 	bl	8b34 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    5cc0:	0020      	movs	r0, r4
    5cc2:	3010      	adds	r0, #16
    5cc4:	f002 ff90 	bl	8be8 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
    5cc8:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    5cca:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    5ccc:	0409      	lsls	r1, r1, #16
			     ((u32_t)conn->crc_init[1] << 8) |
    5cce:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    5cd0:	4319      	orrs	r1, r3
			     ((u32_t)conn->crc_init[0])));
    5cd2:	7d23      	ldrb	r3, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5cd4:	4803      	ldr	r0, [pc, #12]	; (5ce4 <connection_configure+0x38>)
    5cd6:	4319      	orrs	r1, r3
    5cd8:	f003 f81a 	bl	8d10 <radio_crc_configure>
}
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	46c0      	nop			; (mov r8, r8)
    5ce0:	00005f2d 	.word	0x00005f2d
    5ce4:	0000065b 	.word	0x0000065b

00005ce8 <event_slave>:
{
    5ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    5cea:	4e58      	ldr	r6, [pc, #352]	; (5e4c <event_slave+0x164>)
{
    5cec:	9000      	str	r0, [sp, #0]
	LL_ASSERT(_radio.role == ROLE_NONE);
    5cee:	7bf5      	ldrb	r5, [r6, #15]
{
    5cf0:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    5cf2:	b2ed      	uxtb	r5, r5
    5cf4:	2d00      	cmp	r5, #0
    5cf6:	d002      	beq.n	5cfe <event_slave+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5cf8:	b662      	cpsie	i
    5cfa:	2004      	movs	r0, #4
    5cfc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    5cfe:	7b33      	ldrb	r3, [r6, #12]
    5d00:	8c22      	ldrh	r2, [r4, #32]
    5d02:	b2db      	uxtb	r3, r3
    5d04:	3207      	adds	r2, #7
    5d06:	4293      	cmp	r3, r2
    5d08:	d1f6      	bne.n	5cf8 <event_slave+0x10>
	_radio.role = ROLE_SLAVE;
    5d0a:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    5d0c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    5d0e:	73f2      	strb	r2, [r6, #15]
	_radio.ticker_id_prepare = 0;
    5d10:	7335      	strb	r5, [r6, #12]
	_radio.ticker_id_event =
    5d12:	7373      	strb	r3, [r6, #13]
	_radio.ticks_anchor = ticks_at_expire;
    5d14:	9b00      	ldr	r3, [sp, #0]
	_radio.conn_curr = conn;
    5d16:	0037      	movs	r7, r6
	_radio.ticks_anchor = ticks_at_expire;
    5d18:	6073      	str	r3, [r6, #4]
	_radio.packet_counter = 0;
    5d1a:	0033      	movs	r3, r6
	_radio.state = STATE_RX;
    5d1c:	3a02      	subs	r2, #2
	_radio.packet_counter = 0;
    5d1e:	33ff      	adds	r3, #255	; 0xff
	_radio.conn_curr = conn;
    5d20:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
    5d22:	7432      	strb	r2, [r6, #16]
	_radio.packet_counter = 0;
    5d24:	755d      	strb	r5, [r3, #21]
	_radio.crc_expire = 0;
    5d26:	759d      	strb	r5, [r3, #22]
	_radio.conn_curr = conn;
    5d28:	617c      	str	r4, [r7, #20]
	conn->latency_event = conn->latency_prepare;
    5d2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	connection_configure(conn);
    5d2c:	0020      	movs	r0, r4
	conn->latency_event = conn->latency_prepare;
    5d2e:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    5d30:	8525      	strh	r5, [r4, #40]	; 0x28
	connection_configure(conn);
    5d32:	f7ff ffbb 	bl	5cac <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    5d36:	2096      	movs	r0, #150	; 0x96
    5d38:	f003 f8a0 	bl	8e7c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    5d3c:	002b      	movs	r3, r5
    5d3e:	002a      	movs	r2, r5
    5d40:	0029      	movs	r1, r5
    5d42:	0028      	movs	r0, r5
    5d44:	f003 f810 	bl	8d68 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    5d48:	2336      	movs	r3, #54	; 0x36
    5d4a:	33ff      	adds	r3, #255	; 0xff
    5d4c:	5cf3      	ldrb	r3, [r6, r3]
    5d4e:	0026      	movs	r6, r4
    5d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5d52:	009b      	lsls	r3, r3, #2
    5d54:	5899      	ldr	r1, [r3, r2]
	rx_packet_set(conn, (void *)
    5d56:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    5d58:	3108      	adds	r1, #8
	rx_packet_set(conn, (void *)
    5d5a:	f7fe fceb 	bl	4734 <rx_packet_set>
	if (conn->data_chan_sel) {
    5d5e:	7f63      	ldrb	r3, [r4, #29]
    5d60:	3617      	adds	r6, #23
    5d62:	069d      	lsls	r5, r3, #26
    5d64:	065b      	lsls	r3, r3, #25
    5d66:	d54a      	bpl.n	5dfe <event_slave+0x116>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    5d68:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    5d6a:	0eab      	lsrs	r3, r5, #26
    5d6c:	3801      	subs	r0, #1
    5d6e:	8be1      	ldrh	r1, [r4, #30]
    5d70:	b280      	uxth	r0, r0
    5d72:	0032      	movs	r2, r6
    5d74:	f7ff faea 	bl	534c <chan_sel_2>
	chan_set(data_chan_use);
    5d78:	f7fe feb6 	bl	4ae8 <chan_set>
	conn->slave.window_widening_event_us +=
    5d7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5d7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5d80:	189b      	adds	r3, r3, r2
	conn->slave.window_widening_prepare_us = 0;
    5d82:	2200      	movs	r2, #0
    5d84:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    5d86:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    5d88:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    5d8a:	4293      	cmp	r3, r2
    5d8c:	d900      	bls.n	5d90 <event_slave+0xa8>
		conn->slave.window_widening_event_us =
    5d8e:	64a2      	str	r2, [r4, #72]	; 0x48
	conn->slave.window_size_prepare_us = 0;
    5d90:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
    5d92:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5d94:	6d23      	ldr	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5d96:	4f2d      	ldr	r7, [pc, #180]	; (5e4c <event_slave+0x164>)
    5d98:	9900      	ldr	r1, [sp, #0]
	conn->slave.window_size_event_us +=
    5d9a:	189b      	adds	r3, r3, r2
    5d9c:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5d9e:	68ba      	ldr	r2, [r7, #8]
    5da0:	3109      	adds	r1, #9
	conn->slave.window_size_prepare_us = 0;
    5da2:	64e5      	str	r5, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5da4:	0028      	movs	r0, r5
    5da6:	f003 f871 	bl	8e8c <radio_tmr_start>
    5daa:	9001      	str	r0, [sp, #4]
	radio_tmr_aa_capture();
    5dac:	f003 f8ea 	bl	8f84 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    5db0:	0028      	movs	r0, r5
    5db2:	f003 f911 	bl	8fd8 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
    5db6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5db8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5dba:	005e      	lsls	r6, r3, #1
    5dbc:	3078      	adds	r0, #120	; 0x78
    5dbe:	1836      	adds	r6, r6, r0
	hcto += radio_rx_ready_delay_get(0, 0);
    5dc0:	0029      	movs	r1, r5
    5dc2:	0028      	movs	r0, r5
    5dc4:	f002 ff68 	bl	8c98 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    5dc8:	9b01      	ldr	r3, [sp, #4]
	hcto += radio_rx_chain_delay_get(0, 0);
    5dca:	0029      	movs	r1, r5
	hcto += addr_us_get(0);
    5dcc:	199e      	adds	r6, r3, r6
    5dce:	1836      	adds	r6, r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    5dd0:	0028      	movs	r0, r5
    5dd2:	f002 ff63 	bl	8c9c <radio_rx_chain_delay_get>
    5dd6:	1830      	adds	r0, r6, r0
	radio_tmr_hcto_configure(hcto);
    5dd8:	f003 f8aa 	bl	8f30 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    5ddc:	8c21      	ldrh	r1, [r4, #32]
    5dde:	9a00      	ldr	r2, [sp, #0]
    5de0:	3107      	adds	r1, #7
    5de2:	b2c9      	uxtb	r1, r1
    5de4:	0020      	movs	r0, r4
    5de6:	f7ff faf1 	bl	53cc <preempt_calc>
    5dea:	42a8      	cmp	r0, r5
    5dec:	d023      	beq.n	5e36 <event_slave+0x14e>
		_radio.state = STATE_STOP;
    5dee:	2304      	movs	r3, #4
    5df0:	743b      	strb	r3, [r7, #16]
		radio_disable();
    5df2:	f002 ff61 	bl	8cb8 <radio_disable>
	packet_tx_enqueue(2);
    5df6:	2002      	movs	r0, #2
    5df8:	f7fe ff14 	bl	4c24 <packet_tx_enqueue>
}
    5dfc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    5dfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    5e00:	7fa0      	ldrb	r0, [r4, #30]
    5e02:	3301      	adds	r3, #1
    5e04:	4358      	muls	r0, r3
    5e06:	7fe3      	ldrb	r3, [r4, #31]
    5e08:	2125      	movs	r1, #37	; 0x25
    5e0a:	18c0      	adds	r0, r0, r3
    5e0c:	f7fa fa80 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5e10:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    5e12:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    5e14:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5e16:	08c3      	lsrs	r3, r0, #3
    5e18:	5cf3      	ldrb	r3, [r6, r3]
    5e1a:	4011      	ands	r1, r2
    5e1c:	410b      	asrs	r3, r1
    5e1e:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    5e20:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5e22:	4213      	tst	r3, r2
    5e24:	d1a8      	bne.n	5d78 <event_slave+0x90>
		chan_index = chan_next % chan_count;
    5e26:	0029      	movs	r1, r5
    5e28:	f7fa fa12 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    5e2c:	0030      	movs	r0, r6
		chan_index = chan_next % chan_count;
    5e2e:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    5e30:	f7fe f99b 	bl	416a <chan_sel_remap>
    5e34:	e7a0      	b.n	5d78 <event_slave+0x90>
		ticker_status =
    5e36:	0003      	movs	r3, r0
    5e38:	4a05      	ldr	r2, [pc, #20]	; (5e50 <event_slave+0x168>)
    5e3a:	0001      	movs	r1, r0
    5e3c:	f7fd fb70 	bl	3520 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5e40:	2302      	movs	r3, #2
    5e42:	4398      	bics	r0, r3
    5e44:	d000      	beq.n	5e48 <event_slave+0x160>
    5e46:	e757      	b.n	5cf8 <event_slave+0x10>
    5e48:	e7d5      	b.n	5df6 <event_slave+0x10e>
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	20000254 	.word	0x20000254
    5e50:	000046ad 	.word	0x000046ad

00005e54 <prepare_pdu_data_tx>:
	    conn->empty ||
    5e54:	0003      	movs	r3, r0
{
    5e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e58:	0005      	movs	r5, r0
	    conn->empty ||
    5e5a:	33a8      	adds	r3, #168	; 0xa8
{
    5e5c:	9101      	str	r1, [sp, #4]
	    conn->empty ||
    5e5e:	7819      	ldrb	r1, [r3, #0]
    5e60:	35ec      	adds	r5, #236	; 0xec
	if (/* empty packet */
    5e62:	b24a      	sxtb	r2, r1
    5e64:	2a00      	cmp	r2, #0
    5e66:	db09      	blt.n	5e7c <prepare_pdu_data_tx+0x28>
	    !conn->pkt_tx_head ||
    5e68:	682a      	ldr	r2, [r5, #0]
	    conn->empty ||
    5e6a:	2a00      	cmp	r2, #0
    5e6c:	d006      	beq.n	5e7c <prepare_pdu_data_tx+0x28>
    5e6e:	0006      	movs	r6, r0
    5e70:	36f0      	adds	r6, #240	; 0xf0
	    !conn->pkt_tx_head ||
    5e72:	0709      	lsls	r1, r1, #28
    5e74:	d524      	bpl.n	5ec0 <prepare_pdu_data_tx+0x6c>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    5e76:	6831      	ldr	r1, [r6, #0]
    5e78:	428a      	cmp	r2, r1
    5e7a:	d021      	beq.n	5ec0 <prepare_pdu_data_tx+0x6c>
	conn->empty = 1;
    5e7c:	2280      	movs	r2, #128	; 0x80
    5e7e:	7819      	ldrb	r1, [r3, #0]
    5e80:	4252      	negs	r2, r2
    5e82:	430a      	orrs	r2, r1
    5e84:	701a      	strb	r2, [r3, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    5e86:	f002 ff5f 	bl	8d48 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5e8a:	2103      	movs	r1, #3
    5e8c:	7802      	ldrb	r2, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    5e8e:	0003      	movs	r3, r0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5e90:	438a      	bics	r2, r1
    5e92:	0011      	movs	r1, r2
    5e94:	2201      	movs	r2, #1
    5e96:	430a      	orrs	r2, r1
	pdu_data_tx->len = 0;
    5e98:	2100      	movs	r1, #0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5e9a:	7002      	strb	r2, [r0, #0]
	pdu_data_tx->len = 0;
    5e9c:	7041      	strb	r1, [r0, #1]
	if (conn->pkt_tx_head) {
    5e9e:	6828      	ldr	r0, [r5, #0]
    5ea0:	3110      	adds	r1, #16
    5ea2:	2800      	cmp	r0, #0
    5ea4:	d00a      	beq.n	5ebc <prepare_pdu_data_tx+0x68>
		pdu_data_tx->md = 1;
    5ea6:	430a      	orrs	r2, r1
		pdu_data_tx->md = 0;
    5ea8:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->rfu = 0;
    5eaa:	211f      	movs	r1, #31
    5eac:	781a      	ldrb	r2, [r3, #0]
    5eae:	400a      	ands	r2, r1
    5eb0:	701a      	strb	r2, [r3, #0]
	_pdu_data_tx->resv = 0;
    5eb2:	2200      	movs	r2, #0
    5eb4:	709a      	strb	r2, [r3, #2]
	*pdu_data_tx = _pdu_data_tx;
    5eb6:	9a01      	ldr	r2, [sp, #4]
    5eb8:	6013      	str	r3, [r2, #0]
}
    5eba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    5ebc:	438a      	bics	r2, r1
    5ebe:	e7f3      	b.n	5ea8 <prepare_pdu_data_tx+0x54>
					conn->packet_tx_head_offset);
    5ec0:	0005      	movs	r5, r0
    5ec2:	35ff      	adds	r5, #255	; 0xff
    5ec4:	78af      	ldrb	r7, [r5, #2]
		if (!conn->packet_tx_head_len) {
    5ec6:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    5ec8:	1d13      	adds	r3, r2, #4
    5eca:	19db      	adds	r3, r3, r7
		if (!conn->packet_tx_head_len) {
    5ecc:	2900      	cmp	r1, #0
    5ece:	d101      	bne.n	5ed4 <prepare_pdu_data_tx+0x80>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    5ed0:	7859      	ldrb	r1, [r3, #1]
    5ed2:	7069      	strb	r1, [r5, #1]
		if (conn->packet_tx_head_offset) {
    5ed4:	2f00      	cmp	r7, #0
    5ed6:	d007      	beq.n	5ee8 <prepare_pdu_data_tx+0x94>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5ed8:	2403      	movs	r4, #3
    5eda:	7819      	ldrb	r1, [r3, #0]
    5edc:	43a1      	bics	r1, r4
    5ede:	468c      	mov	ip, r1
    5ee0:	2101      	movs	r1, #1
    5ee2:	4664      	mov	r4, ip
    5ee4:	4321      	orrs	r1, r4
    5ee6:	7019      	strb	r1, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    5ee8:	7869      	ldrb	r1, [r5, #1]
		_pdu_data_tx->md = 0;
    5eea:	2510      	movs	r5, #16
		_pdu_data_tx->len = conn->packet_tx_head_len -
    5eec:	1bc9      	subs	r1, r1, r7
		_pdu_data_tx->md = 0;
    5eee:	781f      	ldrb	r7, [r3, #0]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    5ef0:	b2c9      	uxtb	r1, r1
		_pdu_data_tx->md = 0;
    5ef2:	43af      	bics	r7, r5
		_pdu_data_tx->len = conn->packet_tx_head_len -
    5ef4:	7059      	strb	r1, [r3, #1]
		_pdu_data_tx->md = 0;
    5ef6:	701f      	strb	r7, [r3, #0]
		if (_pdu_data_tx->len > max_tx_octets) {
    5ef8:	291b      	cmp	r1, #27
    5efa:	d904      	bls.n	5f06 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->len = max_tx_octets;
    5efc:	211b      	movs	r1, #27
    5efe:	7059      	strb	r1, [r3, #1]
			_pdu_data_tx->md = 1;
    5f00:	b2f9      	uxtb	r1, r7
    5f02:	430d      	orrs	r5, r1
    5f04:	701d      	strb	r5, [r3, #0]
		if (conn->pkt_tx_head->next) {
    5f06:	6811      	ldr	r1, [r2, #0]
    5f08:	2900      	cmp	r1, #0
    5f0a:	d003      	beq.n	5f14 <prepare_pdu_data_tx+0xc0>
			_pdu_data_tx->md = 1;
    5f0c:	2110      	movs	r1, #16
    5f0e:	781d      	ldrb	r5, [r3, #0]
    5f10:	4329      	orrs	r1, r5
    5f12:	7019      	strb	r1, [r3, #0]
		if (!conn->pkt_tx_ctrl &&
    5f14:	6831      	ldr	r1, [r6, #0]
    5f16:	2900      	cmp	r1, #0
    5f18:	d1c7      	bne.n	5eaa <prepare_pdu_data_tx+0x56>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
    5f1a:	0001      	movs	r1, r0
    5f1c:	31f8      	adds	r1, #248	; 0xf8
		if (!conn->pkt_tx_ctrl &&
    5f1e:	6809      	ldr	r1, [r1, #0]
    5f20:	428a      	cmp	r2, r1
    5f22:	d0c2      	beq.n	5eaa <prepare_pdu_data_tx+0x56>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    5f24:	30f4      	adds	r0, #244	; 0xf4
    5f26:	6002      	str	r2, [r0, #0]
    5f28:	6032      	str	r2, [r6, #0]
    5f2a:	e7be      	b.n	5eaa <prepare_pdu_data_tx+0x56>

00005f2c <isr>:
{
    5f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f2e:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
    5f30:	f002 fedc 	bl	8cec <radio_is_done>
    5f34:	b2c7      	uxtb	r7, r0
	if (trx_done) {
    5f36:	2f00      	cmp	r7, #0
    5f38:	d026      	beq.n	5f88 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    5f3a:	f002 fefb 	bl	8d34 <radio_crc_is_valid>
    5f3e:	b2c3      	uxtb	r3, r0
    5f40:	930e      	str	r3, [sp, #56]	; 0x38
		devmatch_ok = radio_filter_has_match();
    5f42:	f002 ff7b 	bl	8e3c <radio_filter_has_match>
    5f46:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    5f48:	f002 ff80 	bl	8e4c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    5f4c:	f003 f928 	bl	91a0 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    5f50:	f003 f912 	bl	9178 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    5f54:	f002 ff32 	bl	8dbc <radio_rssi_is_ready>
    5f58:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    5f5a:	f002 feb7 	bl	8ccc <radio_status_reset>
	radio_tmr_status_reset();
    5f5e:	f002 ff7d 	bl	8e5c <radio_tmr_status_reset>
	radio_filter_status_reset();
    5f62:	f002 ff65 	bl	8e30 <radio_filter_status_reset>
	radio_ar_status_reset();
    5f66:	f003 f90f 	bl	9188 <radio_ar_status_reset>
	radio_rssi_status_reset();
    5f6a:	f002 ff21 	bl	8db0 <radio_rssi_status_reset>
	switch (_radio.state) {
    5f6e:	4c69      	ldr	r4, [pc, #420]	; (6114 <isr+0x1e8>)
    5f70:	7c23      	ldrb	r3, [r4, #16]
    5f72:	2b05      	cmp	r3, #5
    5f74:	d82b      	bhi.n	5fce <isr+0xa2>
    5f76:	0018      	movs	r0, r3
    5f78:	f7fa f91c 	bl	1b4 <__gnu_thumb1_case_uhi>
    5f7c:	007b0058 	.word	0x007b0058
    5f80:	096a000a 	.word	0x096a000a
    5f84:	096a096a 	.word	0x096a096a
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    5f88:	003d      	movs	r5, r7
    5f8a:	003e      	movs	r6, r7
    5f8c:	970e      	str	r7, [sp, #56]	; 0x38
    5f8e:	e7e4      	b.n	5f5a <isr+0x2e>
	_radio.state = STATE_RX;
    5f90:	2301      	movs	r3, #1
    5f92:	7423      	strb	r3, [r4, #16]
	hcto = radio_tmr_tifs_base_get()
    5f94:	f003 f852 	bl	903c <radio_tmr_tifs_base_get>
    5f98:	0005      	movs	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    5f9a:	2096      	movs	r0, #150	; 0x96
    5f9c:	f002 ff6e 	bl	8e7c <radio_tmr_tifs_set>
	switch (_radio.role) {
    5fa0:	7be0      	ldrb	r0, [r4, #15]
    5fa2:	3801      	subs	r0, #1
    5fa4:	2803      	cmp	r0, #3
    5fa6:	d812      	bhi.n	5fce <isr+0xa2>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    5fa8:	2300      	movs	r3, #0
    5faa:	35c3      	adds	r5, #195	; 0xc3
    5fac:	001a      	movs	r2, r3
    5fae:	0019      	movs	r1, r3
	switch (_radio.role) {
    5fb0:	f7fa f8ec 	bl	18c <__gnu_thumb1_case_uqi>
    5fb4:	3e3e1e02 	.word	0x3e3e1e02
		radio_switch_complete_and_tx(0, 0, 0, 0);
    5fb8:	0018      	movs	r0, r3
    5fba:	f002 fed5 	bl	8d68 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    5fbe:	f002 fec7 	bl	8d50 <radio_pkt_scratch_get>
    5fc2:	f002 fe55 	bl	8c70 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    5fc6:	f002 fe89 	bl	8cdc <radio_is_ready>
    5fca:	1e06      	subs	r6, r0, #0
    5fcc:	d002      	beq.n	5fd4 <isr+0xa8>
		LL_ASSERT(0);
    5fce:	b662      	cpsie	i
    5fd0:	2004      	movs	r0, #4
    5fd2:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    5fd4:	0001      	movs	r1, r0
    5fd6:	f002 fe61 	bl	8c9c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    5fda:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    5fdc:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5fde:	0030      	movs	r0, r6
    5fe0:	f002 fe58 	bl	8c94 <radio_tx_chain_delay_get>
    5fe4:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    5fe6:	f002 ffa3 	bl	8f30 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    5fea:	f003 f809 	bl	9000 <radio_tmr_end_capture>
    5fee:	e01d      	b.n	602c <isr+0x100>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    5ff0:	0018      	movs	r0, r3
    5ff2:	f002 feb9 	bl	8d68 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    5ff6:	2336      	movs	r3, #54	; 0x36
    5ff8:	33ff      	adds	r3, #255	; 0xff
    5ffa:	5ce3      	ldrb	r3, [r4, r3]
    5ffc:	34fc      	adds	r4, #252	; 0xfc
    5ffe:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6000:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    6002:	5898      	ldr	r0, [r3, r2]
    6004:	3008      	adds	r0, #8
    6006:	f002 fe33 	bl	8c70 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    600a:	f002 fe67 	bl	8cdc <radio_is_ready>
    600e:	1e06      	subs	r6, r0, #0
    6010:	d1dd      	bne.n	5fce <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    6012:	0001      	movs	r1, r0
    6014:	f002 fe42 	bl	8c9c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6018:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    601a:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    601c:	0030      	movs	r0, r6
    601e:	f002 fe39 	bl	8c94 <radio_tx_chain_delay_get>
    6022:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    6024:	f002 ff84 	bl	8f30 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    6028:	f002 feae 	bl	8d88 <radio_rssi_measure>
}
    602c:	b015      	add	sp, #84	; 0x54
    602e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6030:	0018      	movs	r0, r3
    6032:	f002 fe99 	bl	8d68 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6036:	2336      	movs	r3, #54	; 0x36
    6038:	33ff      	adds	r3, #255	; 0xff
    603a:	5ce3      	ldrb	r3, [r4, r3]
    603c:	34fc      	adds	r4, #252	; 0xfc
    603e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6040:	009b      	lsls	r3, r3, #2
    6042:	5899      	ldr	r1, [r3, r2]
		rx_packet_set(_radio.conn_curr,	(void *)
    6044:	6960      	ldr	r0, [r4, #20]
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6046:	3108      	adds	r1, #8
		rx_packet_set(_radio.conn_curr,	(void *)
    6048:	f7fe fb74 	bl	4734 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    604c:	f002 fe46 	bl	8cdc <radio_is_ready>
    6050:	1e06      	subs	r6, r0, #0
    6052:	d1bc      	bne.n	5fce <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    6054:	0001      	movs	r1, r0
    6056:	f002 fe21 	bl	8c9c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    605a:	0031      	movs	r1, r6
		hcto += addr_us_get(0);
    605c:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    605e:	0030      	movs	r0, r6
    6060:	f002 fe18 	bl	8c94 <radio_tx_chain_delay_get>
    6064:	1a28      	subs	r0, r5, r0
		radio_tmr_hcto_configure(hcto);
    6066:	f002 ff63 	bl	8f30 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    606a:	2001      	movs	r0, #1
    606c:	f7fe fdda 	bl	4c24 <packet_tx_enqueue>
    6070:	e7dc      	b.n	602c <isr+0x100>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6072:	2f00      	cmp	r7, #0
    6074:	d104      	bne.n	6080 <isr+0x154>
		_radio.state = STATE_CLOSE;
    6076:	2303      	movs	r3, #3
    6078:	7423      	strb	r3, [r4, #16]
		radio_disable();
    607a:	f002 fe1d 	bl	8cb8 <radio_disable>
    607e:	e7d5      	b.n	602c <isr+0x100>
	switch (_radio.role) {
    6080:	7be0      	ldrb	r0, [r4, #15]
    6082:	3801      	subs	r0, #1
    6084:	2803      	cmp	r0, #3
    6086:	d8a2      	bhi.n	5fce <isr+0xa2>
    6088:	f7fa f894 	bl	1b4 <__gnu_thumb1_case_uhi>
    608c:	02300004 	.word	0x02300004
    6090:	04c504c5 	.word	0x04c504c5
		if (crc_ok) {
    6094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6096:	2b00      	cmp	r3, #0
    6098:	d0ed      	beq.n	6076 <isr+0x14a>
	pdu_adv = (void *)radio_pkt_scratch_get();
    609a:	f002 fe59 	bl	8d50 <radio_pkt_scratch_get>
					[_radio.advertiser.adv_data.first][0];
    609e:	0023      	movs	r3, r4
    60a0:	3374      	adds	r3, #116	; 0x74
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    60a2:	781a      	ldrb	r2, [r3, #0]
    60a4:	2327      	movs	r3, #39	; 0x27
    60a6:	4353      	muls	r3, r2
    60a8:	3326      	adds	r3, #38	; 0x26
    60aa:	18e3      	adds	r3, r4, r3
    60ac:	930c      	str	r3, [sp, #48]	; 0x30
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    60ae:	230f      	movs	r3, #15
    60b0:	7802      	ldrb	r2, [r0, #0]
	pdu_adv = (void *)radio_pkt_scratch_get();
    60b2:	0005      	movs	r5, r0
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    60b4:	4013      	ands	r3, r2
    60b6:	2b03      	cmp	r3, #3
    60b8:	d12e      	bne.n	6118 <isr+0x1ec>
    60ba:	7843      	ldrb	r3, [r0, #1]
    60bc:	2b0c      	cmp	r3, #12
    60be:	d12b      	bne.n	6118 <isr+0x1ec>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    60c0:	1da3      	adds	r3, r4, #6
    60c2:	7fdb      	ldrb	r3, [r3, #31]
		(devmatch_ok)) &&
    60c4:	065b      	lsls	r3, r3, #25
    60c6:	d501      	bpl.n	60cc <isr+0x1a0>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    60c8:	2e00      	cmp	r6, #0
    60ca:	d025      	beq.n	6118 <isr+0x1ec>
	return (adv->tx_addr == sr->rx_addr) &&
    60cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60ce:	09d2      	lsrs	r2, r2, #7
    60d0:	781b      	ldrb	r3, [r3, #0]
    60d2:	065b      	lsls	r3, r3, #25
    60d4:	0fdb      	lsrs	r3, r3, #31
    60d6:	4293      	cmp	r3, r2
    60d8:	d11e      	bne.n	6118 <isr+0x1ec>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    60da:	0029      	movs	r1, r5
    60dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60de:	2206      	movs	r2, #6
    60e0:	1c98      	adds	r0, r3, #2
    60e2:	3108      	adds	r1, #8
    60e4:	f7fa faad 	bl	642 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    60e8:	2800      	cmp	r0, #0
    60ea:	d115      	bne.n	6118 <isr+0x1ec>
		_radio.state = STATE_CLOSE;
    60ec:	2303      	movs	r3, #3
    60ee:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    60f0:	f002 fe42 	bl	8d78 <radio_switch_complete_and_disable>
					[_radio.advertiser.scan_data.first][0]);
    60f4:	0023      	movs	r3, r4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    60f6:	2027      	movs	r0, #39	; 0x27
					[_radio.advertiser.scan_data.first][0]);
    60f8:	33c4      	adds	r3, #196	; 0xc4
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	4358      	muls	r0, r3
    60fe:	3076      	adds	r0, #118	; 0x76
    6100:	1820      	adds	r0, r4, r0
    6102:	f002 fdbd 	bl	8c80 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6106:	f002 fde9 	bl	8cdc <radio_is_ready>
    610a:	2800      	cmp	r0, #0
    610c:	d100      	bne.n	6110 <isr+0x1e4>
    610e:	e78d      	b.n	602c <isr+0x100>
    6110:	e75d      	b.n	5fce <isr+0xa2>
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	20000254 	.word	0x20000254
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    6118:	210f      	movs	r1, #15
    611a:	782a      	ldrb	r2, [r5, #0]
    611c:	400a      	ands	r2, r1
    611e:	2a05      	cmp	r2, #5
    6120:	d1a9      	bne.n	6076 <isr+0x14a>
    6122:	786b      	ldrb	r3, [r5, #1]
    6124:	2b22      	cmp	r3, #34	; 0x22
    6126:	d1a6      	bne.n	6076 <isr+0x14a>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	400b      	ands	r3, r1
    612e:	2b01      	cmp	r3, #1
    6130:	d000      	beq.n	6134 <isr+0x208>
    6132:	e1ae      	b.n	6492 <isr+0x566>
		       isr_adv_ci_adva_check(adv, ci) &&
    6134:	0029      	movs	r1, r5
    6136:	980c      	ldr	r0, [sp, #48]	; 0x30
    6138:	f7fe fa7a 	bl	4630 <isr_adv_ci_adva_check>
    613c:	2100      	movs	r1, #0
    613e:	4288      	cmp	r0, r1
    6140:	d00f      	beq.n	6162 <isr+0x236>
	return (adv->rx_addr == ci->tx_addr) &&
    6142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6144:	781a      	ldrb	r2, [r3, #0]
    6146:	782b      	ldrb	r3, [r5, #0]
    6148:	09d2      	lsrs	r2, r2, #7
    614a:	065b      	lsls	r3, r3, #25
    614c:	0fdb      	lsrs	r3, r3, #31
    614e:	429a      	cmp	r2, r3
    6150:	d107      	bne.n	6162 <isr+0x236>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    6152:	980c      	ldr	r0, [sp, #48]	; 0x30
    6154:	1ca9      	adds	r1, r5, #2
    6156:	2206      	movs	r2, #6
    6158:	3008      	adds	r0, #8
    615a:	f7fa fa72 	bl	642 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    615e:	4241      	negs	r1, r0
    6160:	4141      	adcs	r1, r0
		       isr_adv_ci_adva_check(adv, ci) &&
    6162:	0008      	movs	r0, r1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    6164:	2800      	cmp	r0, #0
    6166:	d086      	beq.n	6076 <isr+0x14a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6168:	23bb      	movs	r3, #187	; 0xbb
    616a:	005b      	lsls	r3, r3, #1
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    616c:	5ce3      	ldrb	r3, [r4, r3]
    616e:	2b00      	cmp	r3, #0
    6170:	d008      	beq.n	6184 <isr+0x258>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6172:	23ba      	movs	r3, #186	; 0xba
    6174:	2276      	movs	r2, #118	; 0x76
    6176:	005b      	lsls	r3, r3, #1
    6178:	32ff      	adds	r2, #255	; 0xff
    617a:	5ce3      	ldrb	r3, [r4, r3]
    617c:	5ca2      	ldrb	r2, [r4, r2]
    617e:	429a      	cmp	r2, r3
    6180:	d000      	beq.n	6184 <isr+0x258>
    6182:	e778      	b.n	6076 <isr+0x14a>
		   (_radio.advertiser.conn)) {
    6184:	0026      	movs	r6, r4
    6186:	36c8      	adds	r6, #200	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6188:	6833      	ldr	r3, [r6, #0]
    618a:	2b00      	cmp	r3, #0
    618c:	d100      	bne.n	6190 <isr+0x264>
    618e:	e772      	b.n	6076 <isr+0x14a>
			node_rx = packet_rx_reserve_get(4);
    6190:	2004      	movs	r0, #4
    6192:	f7fe f805 	bl	41a0 <packet_rx_reserve_get>
    6196:	900b      	str	r0, [sp, #44]	; 0x2c
		if (!node_rx) {
    6198:	2800      	cmp	r0, #0
    619a:	d100      	bne.n	619e <isr+0x272>
    619c:	e76b      	b.n	6076 <isr+0x14a>
		_radio.state = STATE_STOP;
    619e:	2304      	movs	r3, #4
    61a0:	7423      	strb	r3, [r4, #16]
		radio_disable();
    61a2:	f002 fd89 	bl	8cb8 <radio_disable>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61a6:	2282      	movs	r2, #130	; 0x82
		_radio.advertiser.conn = NULL;
    61a8:	2300      	movs	r3, #0
		conn = _radio.advertiser.conn;
    61aa:	6837      	ldr	r7, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61ac:	34fc      	adds	r4, #252	; 0xfc
    61ae:	68a1      	ldr	r1, [r4, #8]
    61b0:	0052      	lsls	r2, r2, #1
    61b2:	0038      	movs	r0, r7
		_radio.advertiser.conn = NULL;
    61b4:	6033      	str	r3, [r6, #0]
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61b6:	f7fc fac5 	bl	2744 <mem_index_get>
		memcpy(&conn->crc_init[0],
    61ba:	0029      	movs	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61bc:	8438      	strh	r0, [r7, #32]
		memcpy(&conn->crc_init[0],
    61be:	0038      	movs	r0, r7
    61c0:	2203      	movs	r2, #3
    61c2:	3112      	adds	r1, #18
    61c4:	3014      	adds	r0, #20
		memcpy(&conn->access_addr[0],
    61c6:	003e      	movs	r6, r7
		memcpy(&conn->crc_init[0],
    61c8:	f7fa fa4e 	bl	668 <memcpy>
		memcpy(&conn->access_addr[0],
    61cc:	0029      	movs	r1, r5
    61ce:	3610      	adds	r6, #16
    61d0:	2204      	movs	r2, #4
    61d2:	310e      	adds	r1, #14
    61d4:	0030      	movs	r0, r6
		memcpy(&conn->data_chan_map[0],
    61d6:	003c      	movs	r4, r7
		memcpy(&conn->access_addr[0],
    61d8:	f7fa fa46 	bl	668 <memcpy>
		memcpy(&conn->data_chan_map[0],
    61dc:	0029      	movs	r1, r5
    61de:	3417      	adds	r4, #23
    61e0:	2205      	movs	r2, #5
    61e2:	311e      	adds	r1, #30
    61e4:	0020      	movs	r0, r4
    61e6:	f7fa fa3f 	bl	668 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    61ea:	2105      	movs	r1, #5
    61ec:	0020      	movs	r0, r4
    61ee:	f7fc fc0f 	bl	2a10 <util_ones_count_get>
		conn->data_chan_count =
    61f2:	223f      	movs	r2, #63	; 0x3f
    61f4:	0003      	movs	r3, r0
    61f6:	7f78      	ldrb	r0, [r7, #29]
    61f8:	4013      	ands	r3, r2
    61fa:	4390      	bics	r0, r2
    61fc:	4318      	orrs	r0, r3
    61fe:	7778      	strb	r0, [r7, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6200:	0038      	movs	r0, r7
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    6202:	1d2b      	adds	r3, r5, #4
    6204:	7fdb      	ldrb	r3, [r3, #31]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6206:	0031      	movs	r1, r6
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    6208:	06db      	lsls	r3, r3, #27
    620a:	0edb      	lsrs	r3, r3, #27
    620c:	77bb      	strb	r3, [r7, #30]
			pdu_adv->connect_ind.interval;
    620e:	7e6b      	ldrb	r3, [r5, #25]
    6210:	7e2a      	ldrb	r2, [r5, #24]
    6212:	021b      	lsls	r3, r3, #8
    6214:	4313      	orrs	r3, r2
			pdu_adv->connect_ind.interval * 1250;
    6216:	4aa7      	ldr	r2, [pc, #668]	; (64b4 <isr+0x588>)
		conn->conn_interval =
    6218:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    621a:	435a      	muls	r2, r3
    621c:	920e      	str	r2, [sp, #56]	; 0x38
		conn->latency = pdu_adv->connect_ind.latency;
    621e:	7eeb      	ldrb	r3, [r5, #27]
    6220:	7eaa      	ldrb	r2, [r5, #26]
    6222:	021b      	lsls	r3, r3, #8
    6224:	4313      	orrs	r3, r2
    6226:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6228:	2204      	movs	r2, #4
    622a:	3054      	adds	r0, #84	; 0x54
    622c:	f7fa fa1c 	bl	668 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    6230:	7f68      	ldrb	r0, [r5, #29]
    6232:	7f2b      	ldrb	r3, [r5, #28]
    6234:	0200      	lsls	r0, r0, #8
    6236:	4303      	orrs	r3, r0
    6238:	489f      	ldr	r0, [pc, #636]	; (64b8 <isr+0x58c>)
		radio_le_conn_cmplt->role = 0x01;
    623a:	2601      	movs	r6, #1
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    623c:	4358      	muls	r0, r3
    623e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6240:	18c0      	adds	r0, r0, r3
    6242:	0019      	movs	r1, r3
    6244:	3801      	subs	r0, #1
    6246:	f7f9 ffbf 	bl	1c8 <__aeabi_uidiv>
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    624a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    624c:	4a9b      	ldr	r2, [pc, #620]	; (64bc <isr+0x590>)
    624e:	0019      	movs	r1, r3
		conn->supervision_reload =
    6250:	85f8      	strh	r0, [r7, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6252:	1898      	adds	r0, r3, r2
    6254:	f7f9 ffb8 	bl	1c8 <__aeabi_uidiv>
		node_rx->hdr.handle = conn->handle;
    6258:	8c3b      	ldrh	r3, [r7, #32]
    625a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    625c:	8678      	strh	r0, [r7, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    625e:	80d3      	strh	r3, [r2, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		radio_le_conn_cmplt->status = 0x00;
    6262:	2100      	movs	r1, #0
    6264:	001c      	movs	r4, r3
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6266:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6268:	0020      	movs	r0, r4
		radio_le_conn_cmplt->status = 0x00;
    626a:	72d9      	strb	r1, [r3, #11]
		radio_le_conn_cmplt->role = 0x01;
    626c:	731e      	strb	r6, [r3, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    626e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6270:	782b      	ldrb	r3, [r5, #0]
			       &pdu_adv->connect_ind.init_addr[0],
    6272:	1ca9      	adds	r1, r5, #2
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6274:	065b      	lsls	r3, r3, #25
    6276:	0fdb      	lsrs	r3, r3, #31
    6278:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    627a:	300e      	adds	r0, #14
    627c:	f7fa f9f4 	bl	668 <memcpy>
			pdu_adv->connect_ind.interval;
    6280:	7e6b      	ldrb	r3, [r5, #25]
    6282:	7e2a      	ldrb	r2, [r5, #24]
    6284:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->interval =
    6286:	4313      	orrs	r3, r2
    6288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    628a:	7513      	strb	r3, [r2, #20]
    628c:	0a1b      	lsrs	r3, r3, #8
    628e:	7553      	strb	r3, [r2, #21]
			pdu_adv->connect_ind.latency;
    6290:	7eeb      	ldrb	r3, [r5, #27]
    6292:	7eaa      	ldrb	r2, [r5, #26]
    6294:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->latency =
    6296:	4313      	orrs	r3, r2
    6298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    629a:	7593      	strb	r3, [r2, #22]
    629c:	0a1b      	lsrs	r3, r3, #8
    629e:	75d3      	strb	r3, [r2, #23]
			pdu_adv->connect_ind.timeout;
    62a0:	7f6b      	ldrb	r3, [r5, #29]
    62a2:	7f2a      	ldrb	r2, [r5, #28]
    62a4:	021b      	lsls	r3, r3, #8
		radio_le_conn_cmplt->timeout =
    62a6:	4313      	orrs	r3, r2
    62a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    62aa:	7613      	strb	r3, [r2, #24]
    62ac:	0a1b      	lsrs	r3, r3, #8
    62ae:	7653      	strb	r3, [r2, #25]
			pdu_adv->connect_ind.sca;
    62b0:	1d2b      	adds	r3, r5, #4
    62b2:	7fdb      	ldrb	r3, [r3, #31]
    62b4:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    62b6:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    62b8:	8c38      	ldrh	r0, [r7, #32]
    62ba:	f7fe f9db 	bl	4674 <rx_fc_lock>
		packet_rx_enqueue();
    62be:	f7fe faf1 	bl	48a4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    62c2:	2003      	movs	r0, #3
    62c4:	f7fd ff6c 	bl	41a0 <packet_rx_reserve_get>
    62c8:	4b7a      	ldr	r3, [pc, #488]	; (64b4 <isr+0x588>)
    62ca:	930b      	str	r3, [sp, #44]	; 0x2c
			LL_ASSERT(node_rx);
    62cc:	2800      	cmp	r0, #0
    62ce:	d100      	bne.n	62d2 <isr+0x3a6>
    62d0:	e67d      	b.n	5fce <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    62d2:	8c3b      	ldrh	r3, [r7, #32]
			if (pdu_adv->chan_sel) {
    62d4:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    62d6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    62d8:	230a      	movs	r3, #10
    62da:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    62dc:	782b      	ldrb	r3, [r5, #0]
    62de:	4013      	ands	r3, r2
    62e0:	d100      	bne.n	62e4 <isr+0x3b8>
    62e2:	e0e5      	b.n	64b0 <isr+0x584>
					((u16_t)conn->access_addr[1] << 8) |
    62e4:	7c7b      	ldrb	r3, [r7, #17]
					conn->access_addr[0];
    62e6:	7c3a      	ldrb	r2, [r7, #16]
					((u16_t)conn->access_addr[1] << 8) |
    62e8:	021b      	lsls	r3, r3, #8
				u16_t aa_ls =
    62ea:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
    62ec:	7cfa      	ldrb	r2, [r7, #19]
					 conn->access_addr[2];
    62ee:	7cb9      	ldrb	r1, [r7, #18]
					((u16_t)conn->access_addr[3] << 8) |
    62f0:	0212      	lsls	r2, r2, #8
				u16_t aa_ms =
    62f2:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    62f4:	2140      	movs	r1, #64	; 0x40
    62f6:	7f7c      	ldrb	r4, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    62f8:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    62fa:	4321      	orrs	r1, r4
    62fc:	7779      	strb	r1, [r7, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    62fe:	83fb      	strh	r3, [r7, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    6300:	72c6      	strb	r6, [r0, #11]
			packet_rx_enqueue();
    6302:	f7fe facf 	bl	48a4 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    6306:	0039      	movs	r1, r7
    6308:	241c      	movs	r4, #28
    630a:	1d2b      	adds	r3, r5, #4
    630c:	7fdb      	ldrb	r3, [r3, #31]
    630e:	3138      	adds	r1, #56	; 0x38
    6310:	780a      	ldrb	r2, [r1, #0]
    6312:	095b      	lsrs	r3, r3, #5
    6314:	0098      	lsls	r0, r3, #2
			(((gc_lookup_ppm[_radio.sca] +
    6316:	4e6a      	ldr	r6, [pc, #424]	; (64c0 <isr+0x594>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    6318:	43a2      	bics	r2, r4
    631a:	4302      	orrs	r2, r0
    631c:	700a      	strb	r2, [r1, #0]
			(((gc_lookup_ppm[_radio.sca] +
    631e:	0032      	movs	r2, r6
    6320:	32ff      	adds	r2, #255	; 0xff
    6322:	7f52      	ldrb	r2, [r2, #29]
    6324:	4967      	ldr	r1, [pc, #412]	; (64c4 <isr+0x598>)
    6326:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->slave.sca]) *
    6328:	005b      	lsls	r3, r3, #1
			(((gc_lookup_ppm[_radio.sca] +
    632a:	5a50      	ldrh	r0, [r2, r1]
			   gc_lookup_ppm[conn->slave.sca]) *
    632c:	5a5b      	ldrh	r3, [r3, r1]
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    632e:	4966      	ldr	r1, [pc, #408]	; (64c8 <isr+0x59c>)
			(((gc_lookup_ppm[_radio.sca] +
    6330:	18c0      	adds	r0, r0, r3
			   gc_lookup_ppm[conn->slave.sca]) *
    6332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_size_prepare_us = 0;
    6334:	2400      	movs	r4, #0
			   gc_lookup_ppm[conn->slave.sca]) *
    6336:	4358      	muls	r0, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    6338:	4b64      	ldr	r3, [pc, #400]	; (64cc <isr+0x5a0>)
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    633a:	36fc      	adds	r6, #252	; 0xfc
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    633c:	18c0      	adds	r0, r0, r3
    633e:	f7f9 ff43 	bl	1c8 <__aeabi_uidiv>
			(conn_interval_us >> 1) - RADIO_TIFS;
    6342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		conn->slave.window_widening_periodic_us =
    6344:	63f8      	str	r0, [r7, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    6346:	085b      	lsrs	r3, r3, #1
    6348:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    634a:	643b      	str	r3, [r7, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    634c:	7d6b      	ldrb	r3, [r5, #21]
    634e:	4a59      	ldr	r2, [pc, #356]	; (64b4 <isr+0x588>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6350:	0021      	movs	r1, r4
			pdu_adv->connect_ind.win_size * 1250;
    6352:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    6354:	64fc      	str	r4, [r7, #76]	; 0x4c
		conn->slave.window_size_event_us =
    6356:	653b      	str	r3, [r7, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6358:	0020      	movs	r0, r4
    635a:	f002 fc9d 	bl	8c98 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    635e:	4a5c      	ldr	r2, [pc, #368]	; (64d0 <isr+0x5a4>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6360:	900f      	str	r0, [sp, #60]	; 0x3c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6362:	2300      	movs	r3, #0
    6364:	1880      	adds	r0, r0, r2
    6366:	0021      	movs	r1, r4
    6368:	4a5a      	ldr	r2, [pc, #360]	; (64d4 <isr+0x5a8>)
    636a:	f7f9 fffd 	bl	368 <__aeabi_lmul>
    636e:	4a5a      	ldr	r2, [pc, #360]	; (64d8 <isr+0x5ac>)
    6370:	2307      	movs	r3, #7
    6372:	f7f9 ffd9 	bl	328 <__aeabi_uldivmod>
		conn->hdr.ticks_xtal_to_start =
    6376:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6378:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    637a:	0200      	lsls	r0, r0, #8
    637c:	0a00      	lsrs	r0, r0, #8
		conn->hdr.ticks_slot =
    637e:	60f8      	str	r0, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6380:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    6382:	603b      	str	r3, [r7, #0]
		conn->hdr.ticks_preempt_to_start =
    6384:	60bc      	str	r4, [r7, #8]
		ticks_slot_offset =
    6386:	920b      	str	r2, [sp, #44]	; 0x2c
    6388:	429a      	cmp	r2, r3
    638a:	d200      	bcs.n	638e <isr+0x462>
    638c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_us -=
    638e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
			((u64_t)pdu_adv->connect_ind.win_offset +
    6392:	2400      	movs	r4, #0
		conn_interval_us -=
    6394:	1a9b      	subs	r3, r3, r2
    6396:	930e      	str	r3, [sp, #56]	; 0x38
		conn_offset_us = radio_tmr_end_get();
    6398:	f002 fe48 	bl	902c <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    639c:	7deb      	ldrb	r3, [r5, #23]
    639e:	7daa      	ldrb	r2, [r5, #22]
    63a0:	021b      	lsls	r3, r3, #8
    63a2:	4313      	orrs	r3, r2
    63a4:	001d      	movs	r5, r3
		conn_offset_us +=
    63a6:	4b43      	ldr	r3, [pc, #268]	; (64b4 <isr+0x588>)
		conn_offset_us = radio_tmr_end_get();
    63a8:	0006      	movs	r6, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    63aa:	0021      	movs	r1, r4
		conn_offset_us +=
    63ac:	3501      	adds	r5, #1
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    63ae:	0020      	movs	r0, r4
		conn_offset_us +=
    63b0:	435d      	muls	r5, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    63b2:	f002 fc6f 	bl	8c94 <radio_tx_chain_delay_get>
    63b6:	3d30      	subs	r5, #48	; 0x30
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    63b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    63ba:	1975      	adds	r5, r6, r5
    63bc:	1a28      	subs	r0, r5, r0
    63be:	1ac3      	subs	r3, r0, r3
    63c0:	930f      	str	r3, [sp, #60]	; 0x3c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63c2:	2390      	movs	r3, #144	; 0x90
    63c4:	00db      	lsls	r3, r3, #3
    63c6:	2205      	movs	r2, #5
    63c8:	9300      	str	r3, [sp, #0]
    63ca:	0021      	movs	r1, r4
    63cc:	4b43      	ldr	r3, [pc, #268]	; (64dc <isr+0x5b0>)
    63ce:	0020      	movs	r0, r4
    63d0:	f7fd f842 	bl	3458 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    63d4:	4942      	ldr	r1, [pc, #264]	; (64e0 <isr+0x5b4>)
    63d6:	f7fe fd7f 	bl	4ed8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    63da:	220f      	movs	r2, #15
    63dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    63de:	781b      	ldrb	r3, [r3, #0]
    63e0:	4013      	ands	r3, r2
    63e2:	2b01      	cmp	r3, #1
    63e4:	d106      	bne.n	63f4 <isr+0x4c8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63e6:	9400      	str	r4, [sp, #0]
    63e8:	0023      	movs	r3, r4
    63ea:	3a0c      	subs	r2, #12
    63ec:	0021      	movs	r1, r4
    63ee:	0020      	movs	r0, r4
    63f0:	f7fd f832 	bl	3458 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    63f4:	2400      	movs	r4, #0
    63f6:	4a37      	ldr	r2, [pc, #220]	; (64d4 <isr+0x5a8>)
    63f8:	2300      	movs	r3, #0
    63fa:	980e      	ldr	r0, [sp, #56]	; 0x38
    63fc:	0021      	movs	r1, r4
    63fe:	f7f9 ffb3 	bl	368 <__aeabi_lmul>
    6402:	4a35      	ldr	r2, [pc, #212]	; (64d8 <isr+0x5ac>)
    6404:	2307      	movs	r3, #7
    6406:	900c      	str	r0, [sp, #48]	; 0x30
    6408:	910d      	str	r1, [sp, #52]	; 0x34
    640a:	f7f9 ff8d 	bl	328 <__aeabi_uldivmod>
		     (_radio.ticks_anchor - ticks_slot_offset),
    640e:	4b2c      	ldr	r3, [pc, #176]	; (64c0 <isr+0x594>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6410:	8c3e      	ldrh	r6, [r7, #32]
    6412:	685d      	ldr	r5, [r3, #4]
    6414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6416:	9706      	str	r7, [sp, #24]
    6418:	1aed      	subs	r5, r5, r3
    641a:	2393      	movs	r3, #147	; 0x93
    641c:	00db      	lsls	r3, r3, #3
    641e:	9308      	str	r3, [sp, #32]
    6420:	4b30      	ldr	r3, [pc, #192]	; (64e4 <isr+0x5b8>)
    6422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6424:	9307      	str	r3, [sp, #28]
    6426:	4b30      	ldr	r3, [pc, #192]	; (64e8 <isr+0x5bc>)
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6428:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    642a:	9305      	str	r3, [sp, #20]
    642c:	68fb      	ldr	r3, [r7, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    642e:	0207      	lsls	r7, r0, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6430:	18d3      	adds	r3, r2, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6432:	0a3f      	lsrs	r7, r7, #8
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6434:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6436:	4a28      	ldr	r2, [pc, #160]	; (64d8 <isr+0x5ac>)
    6438:	2307      	movs	r3, #7
    643a:	0038      	movs	r0, r7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    643c:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    643e:	f7f9 ff93 	bl	368 <__aeabi_lmul>
    6442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6446:	1a12      	subs	r2, r2, r0
    6448:	418b      	sbcs	r3, r1
    644a:	0010      	movs	r0, r2
    644c:	22fa      	movs	r2, #250	; 0xfa
    644e:	0019      	movs	r1, r3
    6450:	0092      	lsls	r2, r2, #2
    6452:	2300      	movs	r3, #0
    6454:	f7f9 ff68 	bl	328 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    6458:	4a1e      	ldr	r2, [pc, #120]	; (64d4 <isr+0x5a8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    645a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    645c:	2300      	movs	r3, #0
    645e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6460:	0021      	movs	r1, r4
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6462:	9701      	str	r7, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    6464:	f7f9 ff80 	bl	368 <__aeabi_lmul>
    6468:	2307      	movs	r3, #7
    646a:	4a1b      	ldr	r2, [pc, #108]	; (64d8 <isr+0x5ac>)
    646c:	f7f9 ff5c 	bl	328 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6470:	002b      	movs	r3, r5
    6472:	0200      	lsls	r0, r0, #8
    6474:	3607      	adds	r6, #7
    6476:	0a00      	lsrs	r0, r0, #8
    6478:	b2f6      	uxtb	r6, r6
    647a:	9000      	str	r0, [sp, #0]
		ticker_status =
    647c:	0032      	movs	r2, r6
    647e:	0021      	movs	r1, r4
    6480:	0020      	movs	r0, r4
    6482:	f7fc ff57 	bl	3334 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6486:	2302      	movs	r3, #2
    6488:	4398      	bics	r0, r3
    648a:	42a0      	cmp	r0, r4
    648c:	d000      	beq.n	6490 <isr+0x564>
    648e:	e59e      	b.n	5fce <isr+0xa2>
    6490:	e5cc      	b.n	602c <isr+0x100>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    6492:	1da3      	adds	r3, r4, #6
    6494:	7fdb      	ldrb	r3, [r3, #31]
    6496:	099b      	lsrs	r3, r3, #6
		(devmatch_ok)) &&
    6498:	079b      	lsls	r3, r3, #30
    649a:	d502      	bpl.n	64a2 <isr+0x576>
    649c:	2000      	movs	r0, #0
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    649e:	4286      	cmp	r6, r0
    64a0:	d003      	beq.n	64aa <isr+0x57e>
	       isr_adv_ci_adva_check(adv, ci);
    64a2:	0029      	movs	r1, r5
    64a4:	980c      	ldr	r0, [sp, #48]	; 0x30
    64a6:	f7fe f8c3 	bl	4630 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    64aa:	2301      	movs	r3, #1
    64ac:	4018      	ands	r0, r3
    64ae:	e659      	b.n	6164 <isr+0x238>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    64b0:	72c3      	strb	r3, [r0, #11]
    64b2:	e726      	b.n	6302 <isr+0x3d6>
    64b4:	000004e2 	.word	0x000004e2
    64b8:	00002710 	.word	0x00002710
    64bc:	026259ff 	.word	0x026259ff
    64c0:	20000254 	.word	0x20000254
    64c4:	0000aff2 	.word	0x0000aff2
    64c8:	000f4240 	.word	0x000f4240
    64cc:	000f423f 	.word	0x000f423f
    64d0:	00000452 	.word	0x00000452
    64d4:	3b9aca00 	.word	0x3b9aca00
    64d8:	1afd498d 	.word	0x1afd498d
    64dc:	00004ed9 	.word	0x00004ed9
    64e0:	00000481 	.word	0x00000481
    64e4:	00004f01 	.word	0x00004f01
    64e8:	00005ca5 	.word	0x00005ca5
		if (crc_ok &&
    64ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    64ee:	2b00      	cmp	r3, #0
    64f0:	d100      	bne.n	64f4 <isr+0x5c8>
    64f2:	e24b      	b.n	698c <isr+0xa60>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    64f4:	0023      	movs	r3, r4
    64f6:	33dd      	adds	r3, #221	; 0xdd
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	06db      	lsls	r3, r3, #27
    64fc:	0fdb      	lsrs	r3, r3, #31
    64fe:	d002      	beq.n	6506 <isr+0x5da>
		if (crc_ok &&
    6500:	2e00      	cmp	r6, #0
    6502:	d100      	bne.n	6506 <isr+0x5da>
    6504:	e242      	b.n	698c <isr+0xa60>
	bool dir_report = false;
    6506:	2100      	movs	r1, #0
    6508:	aa13      	add	r2, sp, #76	; 0x4c
    650a:	7011      	strb	r1, [r2, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    650c:	2236      	movs	r2, #54	; 0x36
    650e:	0021      	movs	r1, r4
    6510:	32ff      	adds	r2, #255	; 0xff
    6512:	31fc      	adds	r1, #252	; 0xfc
    6514:	5ca2      	ldrb	r2, [r4, r2]
    6516:	6b48      	ldr	r0, [r1, #52]	; 0x34
    6518:	0092      	lsls	r2, r2, #2
    651a:	5817      	ldr	r7, [r2, r0]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    651c:	680a      	ldr	r2, [r1, #0]
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    651e:	003e      	movs	r6, r7
    6520:	3608      	adds	r6, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    6522:	2a00      	cmp	r2, #0
    6524:	d100      	bne.n	6528 <isr+0x5fc>
    6526:	e1bf      	b.n	68a8 <isr+0x97c>
    6528:	22bb      	movs	r2, #187	; 0xbb
    652a:	0052      	lsls	r2, r2, #1
    652c:	5ca2      	ldrb	r2, [r4, r2]
    652e:	2a00      	cmp	r2, #0
    6530:	d008      	beq.n	6544 <isr+0x618>
				      (_radio.fc_req == _radio.fc_ack)) &&
    6532:	22ba      	movs	r2, #186	; 0xba
    6534:	2176      	movs	r1, #118	; 0x76
    6536:	0052      	lsls	r2, r2, #1
    6538:	31ff      	adds	r1, #255	; 0xff
    653a:	5ca2      	ldrb	r2, [r4, r2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    653c:	5c61      	ldrb	r1, [r4, r1]
    653e:	4291      	cmp	r1, r2
    6540:	d000      	beq.n	6544 <isr+0x618>
    6542:	e1b1      	b.n	68a8 <isr+0x97c>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    6544:	2b00      	cmp	r3, #0
    6546:	d100      	bne.n	654a <isr+0x61e>
    6548:	e19a      	b.n	6880 <isr+0x954>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    654a:	220f      	movs	r2, #15
    654c:	7a3b      	ldrb	r3, [r7, #8]
    654e:	4013      	ands	r3, r2
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    6550:	d000      	beq.n	6554 <isr+0x628>
    6552:	e1fb      	b.n	694c <isr+0xa20>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    6554:	f002 fd6a 	bl	902c <radio_tmr_end_get>
    6558:	4bbb      	ldr	r3, [pc, #748]	; (6848 <isr+0x91c>)
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    655a:	4abc      	ldr	r2, [pc, #752]	; (684c <isr+0x920>)
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    655c:	18c3      	adds	r3, r0, r3
    655e:	930b      	str	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    6560:	0023      	movs	r3, r4
    6562:	33d8      	adds	r3, #216	; 0xd8
    6564:	6818      	ldr	r0, [r3, #0]
    6566:	2100      	movs	r1, #0
    6568:	2307      	movs	r3, #7
    656a:	f7f9 fefd 	bl	368 <__aeabi_lmul>
    656e:	2300      	movs	r3, #0
    6570:	4ab7      	ldr	r2, [pc, #732]	; (6850 <isr+0x924>)
    6572:	f7f9 fed9 	bl	328 <__aeabi_uldivmod>
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    6576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    6578:	382d      	subs	r0, #45	; 0x2d
    657a:	38ff      	subs	r0, #255	; 0xff
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    657c:	4283      	cmp	r3, r0
    657e:	d300      	bcc.n	6582 <isr+0x656>
    6580:	e192      	b.n	68a8 <isr+0x97c>
			node_rx = packet_rx_reserve_get(4);
    6582:	2004      	movs	r0, #4
    6584:	f7fd fe0c 	bl	41a0 <packet_rx_reserve_get>
    6588:	900b      	str	r0, [sp, #44]	; 0x2c
		if (node_rx == 0) {
    658a:	2800      	cmp	r0, #0
    658c:	d100      	bne.n	6590 <isr+0x664>
    658e:	e1fd      	b.n	698c <isr+0xa60>
		_radio.state = STATE_STOP;
    6590:	2304      	movs	r3, #4
    6592:	7423      	strb	r3, [r4, #16]
		conn = _radio.scanner.conn;
    6594:	0023      	movs	r3, r4
		_radio.scanner.conn = NULL;
    6596:	2200      	movs	r2, #0
		conn = _radio.scanner.conn;
    6598:	33fc      	adds	r3, #252	; 0xfc
    659a:	681d      	ldr	r5, [r3, #0]
		_radio.scanner.conn = NULL;
    659c:	601a      	str	r2, [r3, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    659e:	f002 fbd7 	bl	8d50 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    65a2:	220f      	movs	r2, #15
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    65a4:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    65a6:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    65a8:	0006      	movs	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    65aa:	4393      	bics	r3, r2
			pdu_adv_tx->chan_sel = 1;
    65ac:	3216      	adds	r2, #22
    65ae:	4313      	orrs	r3, r2
    65b0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    65b2:	7a3b      	ldrb	r3, [r7, #8]
    65b4:	7802      	ldrb	r2, [r0, #0]
    65b6:	065b      	lsls	r3, r3, #25
    65b8:	0fdb      	lsrs	r3, r3, #31
    65ba:	400a      	ands	r2, r1
    65bc:	01db      	lsls	r3, r3, #7
    65be:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    65c0:	2222      	movs	r2, #34	; 0x22
    65c2:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    65c4:	0022      	movs	r2, r4
    65c6:	3140      	adds	r1, #64	; 0x40
    65c8:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    65ca:	0021      	movs	r1, r4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    65cc:	32dd      	adds	r2, #221	; 0xdd
    65ce:	7812      	ldrb	r2, [r2, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    65d0:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    65d2:	09d2      	lsrs	r2, r2, #7
    65d4:	0192      	lsls	r2, r2, #6
    65d6:	4313      	orrs	r3, r2
    65d8:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    65da:	2206      	movs	r2, #6
    65dc:	3002      	adds	r0, #2
    65de:	f7fa f843 	bl	668 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    65e2:	0033      	movs	r3, r6
    65e4:	0039      	movs	r1, r7
    65e6:	3308      	adds	r3, #8
    65e8:	0018      	movs	r0, r3
    65ea:	2206      	movs	r2, #6
    65ec:	310a      	adds	r1, #10
    65ee:	930e      	str	r3, [sp, #56]	; 0x38
    65f0:	f7fa f83a 	bl	668 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
    65f4:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.
    65f6:	0030      	movs	r0, r6
		       access_addr[0], &conn->access_addr[0], 4);
    65f8:	3110      	adds	r1, #16
		memcpy(&pdu_adv_tx->connect_ind.
    65fa:	2204      	movs	r2, #4
    65fc:	300e      	adds	r0, #14
    65fe:	f7fa f833 	bl	668 <memcpy>
		       &conn->crc_init[0], 3);
    6602:	0029      	movs	r1, r5
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    6604:	0030      	movs	r0, r6
		       &conn->crc_init[0], 3);
    6606:	3114      	adds	r1, #20
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    6608:	2203      	movs	r2, #3
    660a:	3012      	adds	r0, #18
    660c:	f7fa f82c 	bl	668 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    6610:	2301      	movs	r3, #1
    6612:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    6614:	0023      	movs	r3, r4
    6616:	33f0      	adds	r3, #240	; 0xf0
    6618:	881b      	ldrh	r3, [r3, #0]
		conn_interval_us =
    661a:	4a8e      	ldr	r2, [pc, #568]	; (6854 <isr+0x928>)
    661c:	435a      	muls	r2, r3
    661e:	920f      	str	r2, [sp, #60]	; 0x3c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    6620:	f002 fd04 	bl	902c <radio_tmr_end_get>
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    6624:	4b8c      	ldr	r3, [pc, #560]	; (6858 <isr+0x92c>)
		if (!_radio.remainder_anchor ||
    6626:	68a2      	ldr	r2, [r4, #8]
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    6628:	18c3      	adds	r3, r0, r3
		if (!_radio.remainder_anchor ||
    662a:	2a00      	cmp	r2, #0
    662c:	dd02      	ble.n	6634 <isr+0x708>
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    662e:	23db      	movs	r3, #219	; 0xdb
    6630:	00db      	lsls	r3, r3, #3
    6632:	18c3      	adds	r3, r0, r3
		if (_radio.scanner.win_offset_us == 0) {
    6634:	4a89      	ldr	r2, [pc, #548]	; (685c <isr+0x930>)
    6636:	32fc      	adds	r2, #252	; 0xfc
    6638:	6854      	ldr	r4, [r2, #4]
    663a:	2c00      	cmp	r4, #0
    663c:	d000      	beq.n	6640 <isr+0x714>
    663e:	e190      	b.n	6962 <isr+0xa36>
			pdu_adv_tx->connect_ind.win_offset = 0;
    6640:	75b4      	strb	r4, [r6, #22]
    6642:	75f4      	strb	r4, [r6, #23]
    6644:	001c      	movs	r4, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    6646:	2100      	movs	r1, #0
    6648:	0008      	movs	r0, r1
    664a:	f002 fb21 	bl	8c90 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    664e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    6650:	1a24      	subs	r4, r4, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    6652:	0008      	movs	r0, r1
    6654:	f002 fb1e 	bl	8c94 <radio_tx_chain_delay_get>
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6658:	0029      	movs	r1, r5
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    665a:	1a24      	subs	r4, r4, r0
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    665c:	0030      	movs	r0, r6
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    665e:	341e      	adds	r4, #30
		pdu_adv_tx->connect_ind.interval =
    6660:	4b7f      	ldr	r3, [pc, #508]	; (6860 <isr+0x934>)
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    6662:	9410      	str	r4, [sp, #64]	; 0x40
		pdu_adv_tx->connect_ind.interval =
    6664:	781b      	ldrb	r3, [r3, #0]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6666:	2205      	movs	r2, #5
		pdu_adv_tx->connect_ind.interval =
    6668:	7633      	strb	r3, [r6, #24]
    666a:	4b7d      	ldr	r3, [pc, #500]	; (6860 <isr+0x934>)
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    666c:	3117      	adds	r1, #23
		pdu_adv_tx->connect_ind.interval =
    666e:	785b      	ldrb	r3, [r3, #1]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6670:	301e      	adds	r0, #30
		pdu_adv_tx->connect_ind.interval =
    6672:	7673      	strb	r3, [r6, #25]
		pdu_adv_tx->connect_ind.latency =
    6674:	4b7b      	ldr	r3, [pc, #492]	; (6864 <isr+0x938>)
			_radio.scanner.conn_interval;
    6676:	4c79      	ldr	r4, [pc, #484]	; (685c <isr+0x930>)
		pdu_adv_tx->connect_ind.latency =
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	76b3      	strb	r3, [r6, #26]
    667c:	4b79      	ldr	r3, [pc, #484]	; (6864 <isr+0x938>)
    667e:	785b      	ldrb	r3, [r3, #1]
    6680:	76f3      	strb	r3, [r6, #27]
		pdu_adv_tx->connect_ind.timeout =
    6682:	4b79      	ldr	r3, [pc, #484]	; (6868 <isr+0x93c>)
    6684:	781b      	ldrb	r3, [r3, #0]
    6686:	7733      	strb	r3, [r6, #28]
    6688:	4b77      	ldr	r3, [pc, #476]	; (6868 <isr+0x93c>)
    668a:	785b      	ldrb	r3, [r3, #1]
    668c:	7773      	strb	r3, [r6, #29]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    668e:	f7f9 ffeb 	bl	668 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    6692:	211f      	movs	r1, #31
    6694:	1d33      	adds	r3, r6, #4
    6696:	9311      	str	r3, [sp, #68]	; 0x44
    6698:	1d32      	adds	r2, r6, #4
    669a:	7fab      	ldrb	r3, [r5, #30]
    669c:	7fd2      	ldrb	r2, [r2, #31]
    669e:	400b      	ands	r3, r1
    66a0:	438a      	bics	r2, r1
    66a2:	431a      	orrs	r2, r3
    66a4:	1d33      	adds	r3, r6, #4
    66a6:	77da      	strb	r2, [r3, #31]
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    66a8:	0023      	movs	r3, r4
    66aa:	33ff      	adds	r3, #255	; 0xff
    66ac:	7f5a      	ldrb	r2, [r3, #29]
    66ae:	1d33      	adds	r3, r6, #4
    66b0:	7fdb      	ldrb	r3, [r3, #31]
    66b2:	0152      	lsls	r2, r2, #5
    66b4:	400b      	ands	r3, r1
    66b6:	4313      	orrs	r3, r2
    66b8:	1d32      	adds	r2, r6, #4
    66ba:	77d3      	strb	r3, [r2, #31]
		radio_switch_complete_and_disable();
    66bc:	f002 fb5c 	bl	8d78 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    66c0:	0030      	movs	r0, r6
    66c2:	f002 fadd 	bl	8c80 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    66c6:	f002 fb09 	bl	8cdc <radio_is_ready>
    66ca:	900c      	str	r0, [sp, #48]	; 0x30
    66cc:	2800      	cmp	r0, #0
    66ce:	d000      	beq.n	66d2 <isr+0x7a6>
    66d0:	e47d      	b.n	5fce <isr+0xa2>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    66d2:	2282      	movs	r2, #130	; 0x82
    66d4:	34fc      	adds	r4, #252	; 0xfc
    66d6:	68a1      	ldr	r1, [r4, #8]
    66d8:	0052      	lsls	r2, r2, #1
    66da:	0028      	movs	r0, r5
    66dc:	f7fc f832 	bl	2744 <mem_index_get>
		node_rx->hdr.handle = conn->handle;
    66e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    66e2:	8428      	strh	r0, [r5, #32]
		radio_le_conn_cmplt->status = 0x00;
    66e4:	4669      	mov	r1, sp
		node_rx->hdr.handle = conn->handle;
    66e6:	80d8      	strh	r0, [r3, #6]
		radio_le_conn_cmplt->status = 0x00;
    66e8:	2030      	movs	r0, #48	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    66ea:	2206      	movs	r2, #6
		radio_le_conn_cmplt->status = 0x00;
    66ec:	1809      	adds	r1, r1, r0
    66ee:	7809      	ldrb	r1, [r1, #0]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    66f0:	711a      	strb	r2, [r3, #4]
		radio_le_conn_cmplt->status = 0x00;
    66f2:	72d9      	strb	r1, [r3, #11]
    66f4:	001c      	movs	r4, r3
		radio_le_conn_cmplt->role = 0x00;
    66f6:	466b      	mov	r3, sp
    66f8:	181b      	adds	r3, r3, r0
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    66fa:	0020      	movs	r0, r4
		radio_le_conn_cmplt->role = 0x00;
    66fc:	781b      	ldrb	r3, [r3, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    66fe:	990e      	ldr	r1, [sp, #56]	; 0x38
		radio_le_conn_cmplt->role = 0x00;
    6700:	7323      	strb	r3, [r4, #12]
				pdu_adv_tx->rx_addr;
    6702:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6704:	300e      	adds	r0, #14
				pdu_adv_tx->rx_addr;
    6706:	09db      	lsrs	r3, r3, #7
			radio_le_conn_cmplt->peer_addr_type =
    6708:	7363      	strb	r3, [r4, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    670a:	f7f9 ffad 	bl	668 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    670e:	4b54      	ldr	r3, [pc, #336]	; (6860 <isr+0x934>)
    6710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6712:	781b      	ldrb	r3, [r3, #0]
    6714:	7513      	strb	r3, [r2, #20]
    6716:	4b52      	ldr	r3, [pc, #328]	; (6860 <isr+0x934>)
    6718:	785b      	ldrb	r3, [r3, #1]
    671a:	7553      	strb	r3, [r2, #21]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    671c:	4b51      	ldr	r3, [pc, #324]	; (6864 <isr+0x938>)
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	7593      	strb	r3, [r2, #22]
    6722:	4b50      	ldr	r3, [pc, #320]	; (6864 <isr+0x938>)
    6724:	785b      	ldrb	r3, [r3, #1]
    6726:	75d3      	strb	r3, [r2, #23]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    6728:	4b4f      	ldr	r3, [pc, #316]	; (6868 <isr+0x93c>)
    672a:	781b      	ldrb	r3, [r3, #0]
    672c:	7613      	strb	r3, [r2, #24]
    672e:	4b4e      	ldr	r3, [pc, #312]	; (6868 <isr+0x93c>)
    6730:	785b      	ldrb	r3, [r3, #1]
    6732:	7653      	strb	r3, [r2, #25]
			pdu_adv_tx->connect_ind.sca;
    6734:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6736:	7fdb      	ldrb	r3, [r3, #31]
    6738:	095b      	lsrs	r3, r3, #5
		radio_le_conn_cmplt->mca =
    673a:	76a3      	strb	r3, [r4, #26]
		rx_fc_lock(conn->handle);
    673c:	8c28      	ldrh	r0, [r5, #32]
    673e:	f7fd ff99 	bl	4674 <rx_fc_lock>
		packet_rx_enqueue();
    6742:	f7fe f8af 	bl	48a4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    6746:	2003      	movs	r0, #3
    6748:	f7fd fd2a 	bl	41a0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    674c:	2800      	cmp	r0, #0
    674e:	d100      	bne.n	6752 <isr+0x826>
    6750:	e43d      	b.n	5fce <isr+0xa2>
			node_rx->hdr.handle = conn->handle;
    6752:	8c2b      	ldrh	r3, [r5, #32]
			if (pdu_adv_rx->chan_sel) {
    6754:	2220      	movs	r2, #32
			node_rx->hdr.handle = conn->handle;
    6756:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    6758:	230a      	movs	r3, #10
    675a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    675c:	7a3b      	ldrb	r3, [r7, #8]
    675e:	4013      	ands	r3, r2
    6760:	d00e      	beq.n	6780 <isr+0x854>
					((u16_t)conn->access_addr[1] << 8) |
    6762:	7c6b      	ldrb	r3, [r5, #17]
					conn->access_addr[0];
    6764:	7c2a      	ldrb	r2, [r5, #16]
					((u16_t)conn->access_addr[1] << 8) |
    6766:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[3] << 8) |
    6768:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    676a:	4313      	orrs	r3, r2
					 conn->access_addr[2];
    676c:	7caa      	ldrb	r2, [r5, #18]
					((u16_t)conn->access_addr[3] << 8) |
    676e:	0209      	lsls	r1, r1, #8
				u16_t aa_ms =
    6770:	430a      	orrs	r2, r1
				conn->data_chan_sel = 1;
    6772:	2140      	movs	r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    6774:	4053      	eors	r3, r2
    6776:	83eb      	strh	r3, [r5, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    6778:	2301      	movs	r3, #1
				conn->data_chan_sel = 1;
    677a:	7f6c      	ldrb	r4, [r5, #29]
    677c:	4321      	orrs	r1, r4
    677e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x00;
    6780:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    6782:	f7fe f88f 	bl	48a4 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6786:	4b35      	ldr	r3, [pc, #212]	; (685c <isr+0x930>)
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    6788:	2100      	movs	r1, #0
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    678a:	001a      	movs	r2, r3
    678c:	32fc      	adds	r2, #252	; 0xfc
    678e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    6790:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    6792:	33f8      	adds	r3, #248	; 0xf8
    6794:	681b      	ldr	r3, [r3, #0]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6796:	6068      	str	r0, [r5, #4]
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    6798:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    679a:	60a9      	str	r1, [r5, #8]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    679c:	60eb      	str	r3, [r5, #12]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    679e:	900b      	str	r0, [sp, #44]	; 0x2c
    67a0:	4290      	cmp	r0, r2
    67a2:	d200      	bcs.n	67a6 <isr+0x87a>
    67a4:	920b      	str	r2, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67a6:	2100      	movs	r1, #0
    67a8:	4b30      	ldr	r3, [pc, #192]	; (686c <isr+0x940>)
    67aa:	2206      	movs	r2, #6
    67ac:	9300      	str	r3, [sp, #0]
    67ae:	0008      	movs	r0, r1
    67b0:	4b2f      	ldr	r3, [pc, #188]	; (6870 <isr+0x944>)
    67b2:	f7fc fe51 	bl	3458 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    67b6:	21c7      	movs	r1, #199	; 0xc7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67b8:	2400      	movs	r4, #0
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    67ba:	00c9      	lsls	r1, r1, #3
    67bc:	f7fe fb78 	bl	4eb0 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67c0:	0023      	movs	r3, r4
    67c2:	2204      	movs	r2, #4
    67c4:	0021      	movs	r1, r4
    67c6:	9400      	str	r4, [sp, #0]
    67c8:	0020      	movs	r0, r4
    67ca:	f7fc fe45 	bl	3458 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    67ce:	4a20      	ldr	r2, [pc, #128]	; (6850 <isr+0x924>)
    67d0:	2300      	movs	r3, #0
    67d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    67d4:	0021      	movs	r1, r4
    67d6:	f7f9 fdc7 	bl	368 <__aeabi_lmul>
				     (_radio.ticks_anchor - ticks_slot_offset),
    67da:	4b20      	ldr	r3, [pc, #128]	; (685c <isr+0x930>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    67dc:	900c      	str	r0, [sp, #48]	; 0x30
    67de:	910d      	str	r1, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    67e0:	685f      	ldr	r7, [r3, #4]
    67e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67e4:	8c2e      	ldrh	r6, [r5, #32]
    67e6:	1aff      	subs	r7, r7, r3
		ticker_status =
    67e8:	4b22      	ldr	r3, [pc, #136]	; (6874 <isr+0x948>)
    67ea:	9506      	str	r5, [sp, #24]
    67ec:	9308      	str	r3, [sp, #32]
    67ee:	4b22      	ldr	r3, [pc, #136]	; (6878 <isr+0x94c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    67f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_status =
    67f2:	9307      	str	r3, [sp, #28]
    67f4:	4b21      	ldr	r3, [pc, #132]	; (687c <isr+0x950>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    67f6:	3607      	adds	r6, #7
		ticker_status =
    67f8:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    67fa:	68eb      	ldr	r3, [r5, #12]
		ticker_status =
    67fc:	9403      	str	r4, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    67fe:	18d5      	adds	r5, r2, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    6800:	4a12      	ldr	r2, [pc, #72]	; (684c <isr+0x920>)
    6802:	2307      	movs	r3, #7
		ticker_status =
    6804:	9504      	str	r5, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    6806:	f7f9 fd8f 	bl	328 <__aeabi_uldivmod>
    680a:	0010      	movs	r0, r2
    680c:	22fa      	movs	r2, #250	; 0xfa
    680e:	0019      	movs	r1, r3
    6810:	0092      	lsls	r2, r2, #2
    6812:	2300      	movs	r3, #0
    6814:	f7f9 fd88 	bl	328 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6818:	4a0c      	ldr	r2, [pc, #48]	; (684c <isr+0x920>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    681a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    681c:	2307      	movs	r3, #7
    681e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6820:	990d      	ldr	r1, [sp, #52]	; 0x34
    6822:	f7f9 fd81 	bl	328 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    6826:	4a0a      	ldr	r2, [pc, #40]	; (6850 <isr+0x924>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6828:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    682a:	2300      	movs	r3, #0
    682c:	9810      	ldr	r0, [sp, #64]	; 0x40
    682e:	0021      	movs	r1, r4
    6830:	f7f9 fd9a 	bl	368 <__aeabi_lmul>
    6834:	2307      	movs	r3, #7
    6836:	4a05      	ldr	r2, [pc, #20]	; (684c <isr+0x920>)
    6838:	f7f9 fd76 	bl	328 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    683c:	0200      	lsls	r0, r0, #8
    683e:	0a00      	lsrs	r0, r0, #8
		ticker_status =
    6840:	b2f6      	uxtb	r6, r6
    6842:	9000      	str	r0, [sp, #0]
    6844:	003b      	movs	r3, r7
    6846:	e619      	b.n	647c <isr+0x550>
    6848:	00000216 	.word	0x00000216
    684c:	1afd498d 	.word	0x1afd498d
    6850:	3b9aca00 	.word	0x3b9aca00
    6854:	000004e2 	.word	0x000004e2
    6858:	000006ba 	.word	0x000006ba
    685c:	20000254 	.word	0x20000254
    6860:	20000344 	.word	0x20000344
    6864:	20000346 	.word	0x20000346
    6868:	20000348 	.word	0x20000348
    686c:	00000637 	.word	0x00000637
    6870:	00004eb1 	.word	0x00004eb1
    6874:	0000064f 	.word	0x0000064f
    6878:	00004f01 	.word	0x00004f01
    687c:	00005c9d 	.word	0x00005c9d
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    6880:	0023      	movs	r3, r4
    6882:	33dd      	adds	r3, #221	; 0xdd
    6884:	781a      	ldrb	r2, [r3, #0]
    6886:	7a3b      	ldrb	r3, [r7, #8]
    6888:	0652      	lsls	r2, r2, #25
    688a:	065b      	lsls	r3, r3, #25
    688c:	0fd2      	lsrs	r2, r2, #31
    688e:	0fdb      	lsrs	r3, r3, #31
    6890:	429a      	cmp	r2, r3
    6892:	d109      	bne.n	68a8 <isr+0x97c>
		(memcmp(&_radio.scanner.adv_addr[0],
    6894:	0020      	movs	r0, r4
    6896:	0039      	movs	r1, r7
    6898:	30e4      	adds	r0, #228	; 0xe4
    689a:	2206      	movs	r2, #6
    689c:	310a      	adds	r1, #10
    689e:	f7f9 fed0 	bl	642 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    68a2:	2800      	cmp	r0, #0
    68a4:	d100      	bne.n	68a8 <isr+0x97c>
    68a6:	e650      	b.n	654a <isr+0x61e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    68a8:	220f      	movs	r2, #15
    68aa:	7a3b      	ldrb	r3, [r7, #8]
    68ac:	4013      	ands	r3, r2
    68ae:	d001      	beq.n	68b4 <isr+0x988>
    68b0:	2b06      	cmp	r3, #6
    68b2:	d177      	bne.n	69a4 <isr+0xa78>
		 (_radio.scanner.type != 0) &&
    68b4:	4ac8      	ldr	r2, [pc, #800]	; (6bd8 <isr+0xcac>)
    68b6:	4cc9      	ldr	r4, [pc, #804]	; (6bdc <isr+0xcb0>)
    68b8:	7812      	ldrb	r2, [r2, #0]
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    68ba:	0712      	lsls	r2, r2, #28
    68bc:	d561      	bpl.n	6982 <isr+0xa56>
		 (_radio.scanner.conn == 0)) {
    68be:	0022      	movs	r2, r4
    68c0:	32fc      	adds	r2, #252	; 0xfc
		 (_radio.scanner.type != 0) &&
    68c2:	6812      	ldr	r2, [r2, #0]
    68c4:	2a00      	cmp	r2, #0
    68c6:	d15c      	bne.n	6982 <isr+0xa56>
		err = isr_rx_scan_report(rssi_ready,
    68c8:	0028      	movs	r0, r5
    68ca:	f7fe fb1f 	bl	4f0c <isr_rx_scan_report.isra.37>
    68ce:	1e06      	subs	r6, r0, #0
		if (err) {
    68d0:	d15c      	bne.n	698c <isr+0xa60>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    68d2:	f002 fa3d 	bl	8d50 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    68d6:	220f      	movs	r2, #15
    68d8:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    68da:	217f      	movs	r1, #127	; 0x7f
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    68dc:	4393      	bics	r3, r2
    68de:	001a      	movs	r2, r3
    68e0:	2303      	movs	r3, #3
    68e2:	4313      	orrs	r3, r2
    68e4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    68e6:	7a3b      	ldrb	r3, [r7, #8]
    68e8:	7802      	ldrb	r2, [r0, #0]
    68ea:	065b      	lsls	r3, r3, #25
    68ec:	0fdb      	lsrs	r3, r3, #31
    68ee:	400a      	ands	r2, r1
    68f0:	01db      	lsls	r3, r3, #7
    68f2:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    68f4:	220c      	movs	r2, #12
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    68f6:	3140      	adds	r1, #64	; 0x40
    68f8:	400b      	ands	r3, r1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    68fa:	0021      	movs	r1, r4
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    68fc:	0005      	movs	r5, r0
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    68fe:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6900:	4ab5      	ldr	r2, [pc, #724]	; (6bd8 <isr+0xcac>)
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6902:	31de      	adds	r1, #222	; 0xde
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6904:	7812      	ldrb	r2, [r2, #0]
    6906:	09d2      	lsrs	r2, r2, #7
    6908:	0192      	lsls	r2, r2, #6
    690a:	4313      	orrs	r3, r2
    690c:	7003      	strb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    690e:	2206      	movs	r2, #6
    6910:	3002      	adds	r0, #2
    6912:	f7f9 fea9 	bl	668 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    6916:	0039      	movs	r1, r7
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    6918:	0028      	movs	r0, r5
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);
    691a:	310a      	adds	r1, #10
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    691c:	2206      	movs	r2, #6
    691e:	3008      	adds	r0, #8
    6920:	f7f9 fea2 	bl	668 <memcpy>
		_radio.scanner.state = 1;
    6924:	0021      	movs	r1, r4
    6926:	2202      	movs	r2, #2
    6928:	31dc      	adds	r1, #220	; 0xdc
    692a:	780b      	ldrb	r3, [r1, #0]
		radio_tmr_tifs_set(RADIO_TIFS);
    692c:	2096      	movs	r0, #150	; 0x96
		_radio.scanner.state = 1;
    692e:	4313      	orrs	r3, r2
    6930:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    6932:	7422      	strb	r2, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    6934:	f002 faa2 	bl	8e7c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    6938:	0030      	movs	r0, r6
    693a:	f002 fa0d 	bl	8d58 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    693e:	0028      	movs	r0, r5
    6940:	f002 f99e 	bl	8c80 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    6944:	f002 fb5c 	bl	9000 <radio_tmr_end_capture>
    6948:	f7ff fbdd 	bl	6106 <isr+0x1da>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    694c:	2b01      	cmp	r3, #1
    694e:	d1af      	bne.n	68b0 <isr+0x984>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    6950:	2100      	movs	r1, #0
    6952:	0030      	movs	r0, r6
    6954:	f7fd ff2e 	bl	47b4 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    6958:	2800      	cmp	r0, #0
    695a:	d0a5      	beq.n	68a8 <isr+0x97c>
    695c:	e5fa      	b.n	6554 <isr+0x628>
				conn_space_us += conn_interval_us;
    695e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6960:	18a4      	adds	r4, r4, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    6962:	2c00      	cmp	r4, #0
    6964:	dbfb      	blt.n	695e <isr+0xa32>
    6966:	429c      	cmp	r4, r3
    6968:	d3f9      	bcc.n	695e <isr+0xa32>
				(conn_space_us - conn_offset_us) / 1250;
    696a:	1ae0      	subs	r0, r4, r3
    696c:	499c      	ldr	r1, [pc, #624]	; (6be0 <isr+0xcb4>)
    696e:	f7f9 fc2b 	bl	1c8 <__aeabi_uidiv>
			pdu_adv_tx->connect_ind.win_size++;
    6972:	7d73      	ldrb	r3, [r6, #21]
			pdu_adv_tx->connect_ind.win_offset =
    6974:	b280      	uxth	r0, r0
    6976:	75b0      	strb	r0, [r6, #22]
			pdu_adv_tx->connect_ind.win_size++;
    6978:	3301      	adds	r3, #1
			pdu_adv_tx->connect_ind.win_offset =
    697a:	0a00      	lsrs	r0, r0, #8
    697c:	75f0      	strb	r0, [r6, #23]
			pdu_adv_tx->connect_ind.win_size++;
    697e:	7573      	strb	r3, [r6, #21]
    6980:	e661      	b.n	6646 <isr+0x71a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6982:	2b00      	cmp	r3, #0
    6984:	d10e      	bne.n	69a4 <isr+0xa78>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    6986:	7a7b      	ldrb	r3, [r7, #9]
    6988:	2b00      	cmp	r3, #0
    698a:	d13b      	bne.n	6a04 <isr+0xad8>
			_radio.state = STATE_CLOSE;
    698c:	2303      	movs	r3, #3
    698e:	4c93      	ldr	r4, [pc, #588]	; (6bdc <isr+0xcb0>)
    6990:	7423      	strb	r3, [r4, #16]
			radio_disable();
    6992:	f002 f991 	bl	8cb8 <radio_disable>
			_radio.scanner.state = 0;
    6996:	2202      	movs	r2, #2
    6998:	34dc      	adds	r4, #220	; 0xdc
    699a:	7823      	ldrb	r3, [r4, #0]
    699c:	4393      	bics	r3, r2
    699e:	7023      	strb	r3, [r4, #0]
    69a0:	f7ff fb44 	bl	602c <isr+0x100>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    69a4:	2b01      	cmp	r3, #1
    69a6:	d00e      	beq.n	69c6 <isr+0xa9a>
					&dir_report))) ||
    69a8:	230b      	movs	r3, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    69aa:	7a3a      	ldrb	r2, [r7, #8]
					&dir_report))) ||
    69ac:	4013      	ands	r3, r2
    69ae:	2b02      	cmp	r3, #2
    69b0:	d0e9      	beq.n	6986 <isr+0xa5a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    69b2:	230f      	movs	r3, #15
    69b4:	401a      	ands	r2, r3
    69b6:	4b89      	ldr	r3, [pc, #548]	; (6bdc <isr+0xcb0>)
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    69b8:	2a07      	cmp	r2, #7
    69ba:	d10b      	bne.n	69d4 <isr+0xaa8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    69bc:	33dd      	adds	r3, #221	; 0xdd
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	4213      	tst	r3, r2
    69c2:	d1e0      	bne.n	6986 <isr+0xa5a>
    69c4:	e7e2      	b.n	698c <isr+0xa60>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    69c6:	a913      	add	r1, sp, #76	; 0x4c
    69c8:	0030      	movs	r0, r6
    69ca:	f7fd fef3 	bl	47b4 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    69ce:	2800      	cmp	r0, #0
    69d0:	d1d9      	bne.n	6986 <isr+0xa5a>
    69d2:	e7e9      	b.n	69a8 <isr+0xa7c>
		   (_radio.scanner.phy)) ||
    69d4:	2a04      	cmp	r2, #4
    69d6:	d1d9      	bne.n	698c <isr+0xa60>
		   (_radio.scanner.state != 0) &&
    69d8:	33dc      	adds	r3, #220	; 0xdc
    69da:	781b      	ldrb	r3, [r3, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    69dc:	079b      	lsls	r3, r3, #30
    69de:	d5d5      	bpl.n	698c <isr+0xa60>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    69e0:	f002 f9b6 	bl	8d50 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    69e4:	7a3b      	ldrb	r3, [r7, #8]
    69e6:	7802      	ldrb	r2, [r0, #0]
    69e8:	065b      	lsls	r3, r3, #25
    69ea:	09d2      	lsrs	r2, r2, #7
    69ec:	0fdb      	lsrs	r3, r3, #31
    69ee:	429a      	cmp	r2, r3
    69f0:	d1cc      	bne.n	698c <isr+0xa60>
		(memcmp(&sreq->scan_req.adv_addr[0],
    69f2:	0039      	movs	r1, r7
    69f4:	3008      	adds	r0, #8
    69f6:	2206      	movs	r2, #6
    69f8:	310a      	adds	r1, #10
    69fa:	f7f9 fe22 	bl	642 <memcmp>
		   (_radio.scanner.state != 0) &&
    69fe:	2800      	cmp	r0, #0
    6a00:	d0c1      	beq.n	6986 <isr+0xa5a>
    6a02:	e7c3      	b.n	698c <isr+0xa60>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    6a04:	4b75      	ldr	r3, [pc, #468]	; (6bdc <isr+0xcb0>)
    6a06:	33fc      	adds	r3, #252	; 0xfc
    6a08:	681b      	ldr	r3, [r3, #0]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d1be      	bne.n	698c <isr+0xa60>
		err = isr_rx_scan_report(rssi_ready,
    6a0e:	0028      	movs	r0, r5
    6a10:	f7fe fa7c 	bl	4f0c <isr_rx_scan_report.isra.37>
    6a14:	e7ba      	b.n	698c <isr+0xa60>
	_radio.packet_counter++;
    6a16:	0022      	movs	r2, r4
    6a18:	32ff      	adds	r2, #255	; 0xff
    6a1a:	7d53      	ldrb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6a1c:	0020      	movs	r0, r4
	_radio.packet_counter++;
    6a1e:	3301      	adds	r3, #1
    6a20:	7553      	strb	r3, [r2, #21]
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6a22:	2336      	movs	r3, #54	; 0x36
    6a24:	33ff      	adds	r3, #255	; 0xff
    6a26:	5ce3      	ldrb	r3, [r4, r3]
    6a28:	30fc      	adds	r0, #252	; 0xfc
    6a2a:	6b41      	ldr	r1, [r0, #52]	; 0x34
    6a2c:	009b      	lsls	r3, r3, #2
    6a2e:	585f      	ldr	r7, [r3, r1]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6a30:	2101      	movs	r1, #1
	if (crc_ok) {
    6a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6a34:	7139      	strb	r1, [r7, #4]
	if (crc_ok) {
    6a36:	2b00      	cmp	r3, #0
    6a38:	d100      	bne.n	6a3c <isr+0xb10>
    6a3a:	e3bc      	b.n	71b6 <isr+0x128a>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    6a3c:	6943      	ldr	r3, [r0, #20]
    6a3e:	7a3d      	ldrb	r5, [r7, #8]
    6a40:	0018      	movs	r0, r3
    6a42:	30a8      	adds	r0, #168	; 0xa8
    6a44:	7806      	ldrb	r6, [r0, #0]
    6a46:	076d      	lsls	r5, r5, #29
    6a48:	07f2      	lsls	r2, r6, #31
    6a4a:	0fd2      	lsrs	r2, r2, #31
    6a4c:	0fed      	lsrs	r5, r5, #31
    6a4e:	4295      	cmp	r5, r2
    6a50:	d100      	bne.n	6a54 <isr+0xb28>
    6a52:	e0ca      	b.n	6bea <isr+0xcbe>
		_radio.conn_curr->sn++;
    6a54:	1852      	adds	r2, r2, r1
    6a56:	400a      	ands	r2, r1
    6a58:	0015      	movs	r5, r2
    6a5a:	0032      	movs	r2, r6
    6a5c:	438a      	bics	r2, r1
    6a5e:	432a      	orrs	r2, r5
    6a60:	7002      	strb	r2, [r0, #0]
		if (_radio.role == ROLE_SLAVE) {
    6a62:	7be2      	ldrb	r2, [r4, #15]
    6a64:	2a03      	cmp	r2, #3
    6a66:	d104      	bne.n	6a72 <isr+0xb46>
			_radio.conn_curr->slave.latency_enabled = 1;
    6a68:	001a      	movs	r2, r3
    6a6a:	3238      	adds	r2, #56	; 0x38
    6a6c:	7814      	ldrb	r4, [r2, #0]
    6a6e:	4321      	orrs	r1, r4
    6a70:	7011      	strb	r1, [r2, #0]
		if (_radio.conn_curr->empty == 0) {
    6a72:	7802      	ldrb	r2, [r0, #0]
    6a74:	b251      	sxtb	r1, r2
    6a76:	2900      	cmp	r1, #0
    6a78:	da00      	bge.n	6a7c <isr+0xb50>
    6a7a:	e0b3      	b.n	6be4 <isr+0xcb8>
			node_tx = _radio.conn_curr->pkt_tx_head;
    6a7c:	0019      	movs	r1, r3
    6a7e:	31ec      	adds	r1, #236	; 0xec
    6a80:	6809      	ldr	r1, [r1, #0]
    6a82:	910b      	str	r1, [sp, #44]	; 0x2c
			pdu_data_tx = (void *)(node_tx->pdu_data +
    6a84:	1d0d      	adds	r5, r1, #4
				_radio.conn_curr->packet_tx_head_offset);
    6a86:	0019      	movs	r1, r3
    6a88:	31ff      	adds	r1, #255	; 0xff
    6a8a:	7889      	ldrb	r1, [r1, #2]
			pdu_data_tx = (void *)(node_tx->pdu_data +
    6a8c:	1869      	adds	r1, r5, r1
    6a8e:	910c      	str	r1, [sp, #48]	; 0x30
			pdu_data_tx_len = pdu_data_tx->len;
    6a90:	784c      	ldrb	r4, [r1, #1]
			if (pdu_data_tx_len != 0) {
    6a92:	2c00      	cmp	r4, #0
    6a94:	d101      	bne.n	6a9a <isr+0xb6e>
	u8_t terminate = 0;
    6a96:	2600      	movs	r6, #0
    6a98:	e03a      	b.n	6b10 <isr+0xbe4>
				if (_radio.conn_curr->enc_tx) {
    6a9a:	0692      	lsls	r2, r2, #26
    6a9c:	d51a      	bpl.n	6ad4 <isr+0xba8>
					_radio.conn_curr->ccm_tx.counter++;
    6a9e:	001a      	movs	r2, r3
    6aa0:	0019      	movs	r1, r3
    6aa2:	32dc      	adds	r2, #220	; 0xdc
    6aa4:	31da      	adds	r1, #218	; 0xda
    6aa6:	8812      	ldrh	r2, [r2, #0]
    6aa8:	8808      	ldrh	r0, [r1, #0]
    6aaa:	0412      	lsls	r2, r2, #16
    6aac:	4302      	orrs	r2, r0
    6aae:	0015      	movs	r5, r2
    6ab0:	001a      	movs	r2, r3
    6ab2:	33e0      	adds	r3, #224	; 0xe0
    6ab4:	881b      	ldrh	r3, [r3, #0]
    6ab6:	32de      	adds	r2, #222	; 0xde
    6ab8:	8812      	ldrh	r2, [r2, #0]
    6aba:	041b      	lsls	r3, r3, #16
    6abc:	4313      	orrs	r3, r2
    6abe:	001e      	movs	r6, r3
    6ac0:	2201      	movs	r2, #1
    6ac2:	2300      	movs	r3, #0
    6ac4:	18ad      	adds	r5, r5, r2
    6ac6:	415e      	adcs	r6, r3
    6ac8:	0c2a      	lsrs	r2, r5, #16
    6aca:	0c33      	lsrs	r3, r6, #16
    6acc:	800d      	strh	r5, [r1, #0]
    6ace:	804a      	strh	r2, [r1, #2]
    6ad0:	808e      	strh	r6, [r1, #4]
    6ad2:	80cb      	strh	r3, [r1, #6]
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    6ad4:	2203      	movs	r2, #3
    6ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ad8:	781b      	ldrb	r3, [r3, #0]
    6ada:	4013      	ands	r3, r2
    6adc:	4293      	cmp	r3, r2
    6ade:	d1da      	bne.n	6a96 <isr+0xb6a>
	switch (pdu_data_tx->llctrl.opcode) {
    6ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6ae2:	78d2      	ldrb	r2, [r2, #3]
    6ae4:	2a02      	cmp	r2, #2
    6ae6:	d1d6      	bne.n	6a96 <isr+0xb6a>
		_radio.state = STATE_CLOSE;
    6ae8:	4e3c      	ldr	r6, [pc, #240]	; (6bdc <isr+0xcb0>)
    6aea:	7433      	strb	r3, [r6, #16]
		radio_disable();
    6aec:	f002 f8e4 	bl	8cb8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    6af0:	f002 f8f4 	bl	8cdc <radio_is_ready>
    6af4:	2800      	cmp	r0, #0
    6af6:	d001      	beq.n	6afc <isr+0xbd0>
    6af8:	f7ff fa69 	bl	5fce <isr+0xa2>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    6afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		terminate_ind_rx_enqueue(_radio.conn_curr,
    6afe:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    6b00:	7919      	ldrb	r1, [r3, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    6b02:	6970      	ldr	r0, [r6, #20]
    6b04:	2913      	cmp	r1, #19
    6b06:	d100      	bne.n	6b0a <isr+0xbde>
    6b08:	3103      	adds	r1, #3
    6b0a:	f7fd fea9 	bl	4860 <terminate_ind_rx_enqueue>
		terminate = 1;
    6b0e:	2601      	movs	r6, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6b10:	4b32      	ldr	r3, [pc, #200]	; (6bdc <isr+0xcb0>)
    6b12:	33fc      	adds	r3, #252	; 0xfc
    6b14:	695b      	ldr	r3, [r3, #20]
    6b16:	001a      	movs	r2, r3
    6b18:	32ff      	adds	r2, #255	; 0xff
    6b1a:	7891      	ldrb	r1, [r2, #2]
    6b1c:	1864      	adds	r4, r4, r1
			if (_radio.conn_curr->packet_tx_head_offset ==
    6b1e:	7851      	ldrb	r1, [r2, #1]
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6b20:	b2e4      	uxtb	r4, r4
    6b22:	7094      	strb	r4, [r2, #2]
			if (_radio.conn_curr->packet_tx_head_offset ==
    6b24:	42a1      	cmp	r1, r4
    6b26:	d11b      	bne.n	6b60 <isr+0xc34>
	conn->packet_tx_head_len = 0;
    6b28:	2100      	movs	r1, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6b2a:	0018      	movs	r0, r3
    6b2c:	001c      	movs	r4, r3
	conn->packet_tx_head_len = 0;
    6b2e:	7051      	strb	r1, [r2, #1]
	conn->packet_tx_head_offset = 0;
    6b30:	7091      	strb	r1, [r2, #2]
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6b32:	30ec      	adds	r0, #236	; 0xec
    6b34:	34f0      	adds	r4, #240	; 0xf0
    6b36:	6802      	ldr	r2, [r0, #0]
    6b38:	6825      	ldr	r5, [r4, #0]
    6b3a:	42aa      	cmp	r2, r5
    6b3c:	d115      	bne.n	6b6a <isr+0xc3e>
		if (node_tx) {
    6b3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6b40:	428d      	cmp	r5, r1
    6b42:	d00d      	beq.n	6b60 <isr+0xc34>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    6b44:	6815      	ldr	r5, [r2, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6b46:	33f4      	adds	r3, #244	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    6b48:	6005      	str	r5, [r0, #0]
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6b4a:	6818      	ldr	r0, [r3, #0]
    6b4c:	4282      	cmp	r2, r0
    6b4e:	d10a      	bne.n	6b66 <isr+0xc3a>
				conn->pkt_tx_ctrl = NULL;
    6b50:	6021      	str	r1, [r4, #0]
				conn->pkt_tx_ctrl_last = NULL;
    6b52:	6019      	str	r1, [r3, #0]
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    6b54:	4921      	ldr	r1, [pc, #132]	; (6bdc <isr+0xcb0>)
    6b56:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6b58:	3151      	adds	r1, #81	; 0x51
    6b5a:	31ff      	adds	r1, #255	; 0xff
    6b5c:	f7fb fdd9 	bl	2712 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    6b60:	2300      	movs	r3, #0
    6b62:	930b      	str	r3, [sp, #44]	; 0x2c
    6b64:	e008      	b.n	6b78 <isr+0xc4c>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    6b66:	6025      	str	r5, [r4, #0]
    6b68:	e7f4      	b.n	6b54 <isr+0xc28>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6b6a:	33f8      	adds	r3, #248	; 0xf8
    6b6c:	681c      	ldr	r4, [r3, #0]
    6b6e:	6811      	ldr	r1, [r2, #0]
    6b70:	42a2      	cmp	r2, r4
    6b72:	d100      	bne.n	6b76 <isr+0xc4a>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6b74:	6019      	str	r1, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6b76:	6001      	str	r1, [r0, #0]
	if (terminate) {
    6b78:	2e00      	cmp	r6, #0
    6b7a:	d038      	beq.n	6bee <isr+0xcc2>
		_radio.conn_curr = NULL;
    6b7c:	2400      	movs	r4, #0
		connection_release(_radio.conn_curr);
    6b7e:	4d17      	ldr	r5, [pc, #92]	; (6bdc <isr+0xcb0>)
    6b80:	35fc      	adds	r5, #252	; 0xfc
    6b82:	6968      	ldr	r0, [r5, #20]
    6b84:	f7fe f89e 	bl	4cc4 <connection_release>
		_radio.conn_curr = NULL;
    6b88:	616c      	str	r4, [r5, #20]
	if (!radio_tmr_aa_restore()) {
    6b8a:	f002 fa2b 	bl	8fe4 <radio_tmr_aa_restore>
    6b8e:	2800      	cmp	r0, #0
    6b90:	d103      	bne.n	6b9a <isr+0xc6e>
		radio_tmr_aa_save(radio_tmr_aa_get());
    6b92:	f002 fa19 	bl	8fc8 <radio_tmr_aa_get>
    6b96:	f002 fa1f 	bl	8fd8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    6b9a:	4d10      	ldr	r5, [pc, #64]	; (6bdc <isr+0xcb0>)
    6b9c:	002b      	movs	r3, r5
    6b9e:	33fc      	adds	r3, #252	; 0xfc
    6ba0:	695b      	ldr	r3, [r3, #20]
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d101      	bne.n	6baa <isr+0xc7e>
    6ba6:	f7ff fa41 	bl	602c <isr+0x100>
	if (tx_release) {
    6baa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6bac:	2a00      	cmp	r2, #0
    6bae:	d003      	beq.n	6bb8 <isr+0xc8c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    6bb0:	8c18      	ldrh	r0, [r3, #32]
    6bb2:	0011      	movs	r1, r2
    6bb4:	f7fe f812 	bl	4bdc <pdu_node_tx_release>
	if (rx_enqueue) {
    6bb8:	2c00      	cmp	r4, #0
    6bba:	d101      	bne.n	6bc0 <isr+0xc94>
    6bbc:	f7ff fa36 	bl	602c <isr+0x100>
		rx_fc_lock(_radio.conn_curr->handle);
    6bc0:	35fc      	adds	r5, #252	; 0xfc
    6bc2:	696b      	ldr	r3, [r5, #20]
    6bc4:	8c18      	ldrh	r0, [r3, #32]
    6bc6:	f7fd fd55 	bl	4674 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    6bca:	696b      	ldr	r3, [r5, #20]
    6bcc:	8c1b      	ldrh	r3, [r3, #32]
    6bce:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    6bd0:	f7fd fe68 	bl	48a4 <packet_rx_enqueue>
    6bd4:	f7ff fa2a 	bl	602c <isr+0x100>
    6bd8:	20000331 	.word	0x20000331
    6bdc:	20000254 	.word	0x20000254
    6be0:	000004e2 	.word	0x000004e2
			_radio.conn_curr->empty = 0;
    6be4:	237f      	movs	r3, #127	; 0x7f
    6be6:	4013      	ands	r3, r2
    6be8:	7003      	strb	r3, [r0, #0]
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    6bea:	2300      	movs	r3, #0
    6bec:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6bee:	4e90      	ldr	r6, [pc, #576]	; (6e30 <isr+0xf04>)
    6bf0:	7a3a      	ldrb	r2, [r7, #8]
    6bf2:	0034      	movs	r4, r6
    6bf4:	34fc      	adds	r4, #252	; 0xfc
    6bf6:	6963      	ldr	r3, [r4, #20]
    6bf8:	0712      	lsls	r2, r2, #28
    6bfa:	33a8      	adds	r3, #168	; 0xa8
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	0fd2      	lsrs	r2, r2, #31
    6c00:	079b      	lsls	r3, r3, #30
    6c02:	0fdb      	lsrs	r3, r3, #31
    6c04:	429a      	cmp	r2, r3
    6c06:	d041      	beq.n	6c8c <isr+0xd60>
	u8_t rx_enqueue = 0;
    6c08:	2400      	movs	r4, #0
		_radio.crc_expire = 0;
    6c0a:	4b89      	ldr	r3, [pc, #548]	; (6e30 <isr+0xf04>)
    6c0c:	2500      	movs	r5, #0
    6c0e:	001a      	movs	r2, r3
		_radio.conn_curr->supervision_expire = 0;
    6c10:	33fc      	adds	r3, #252	; 0xfc
    6c12:	695b      	ldr	r3, [r3, #20]
		_radio.crc_expire = 0;
    6c14:	32ff      	adds	r2, #255	; 0xff
    6c16:	7595      	strb	r5, [r2, #22]
		_radio.conn_curr->supervision_expire = 0;
    6c18:	861d      	strh	r5, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    6c1a:	4e85      	ldr	r6, [pc, #532]	; (6e30 <isr+0xf04>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    6c1c:	a913      	add	r1, sp, #76	; 0x4c
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    6c1e:	0033      	movs	r3, r6
    6c20:	33fc      	adds	r3, #252	; 0xfc
    6c22:	6958      	ldr	r0, [r3, #20]
    6c24:	0003      	movs	r3, r0
    6c26:	33a8      	adds	r3, #168	; 0xa8
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	09db      	lsrs	r3, r3, #7
    6c2c:	930c      	str	r3, [sp, #48]	; 0x30
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    6c2e:	f7ff f911 	bl	5e54 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    6c32:	7c33      	ldrb	r3, [r6, #16]
    6c34:	2b03      	cmp	r3, #3
    6c36:	d014      	beq.n	6c62 <isr+0xd36>
    6c38:	2303      	movs	r3, #3
    6c3a:	2d00      	cmp	r5, #0
    6c3c:	d111      	bne.n	6c62 <isr+0xd36>
    6c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6c40:	2a00      	cmp	r2, #0
    6c42:	d006      	beq.n	6c52 <isr+0xd26>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    6c44:	7a3a      	ldrb	r2, [r7, #8]
    6c46:	06d2      	lsls	r2, r2, #27
    6c48:	d403      	bmi.n	6c52 <isr+0xd26>
    6c4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6c4c:	7852      	ldrb	r2, [r2, #1]
    6c4e:	2a00      	cmp	r2, #0
    6c50:	d007      	beq.n	6c62 <isr+0xd36>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    6c52:	0033      	movs	r3, r6
    6c54:	33fc      	adds	r3, #252	; 0xfc
    6c56:	695b      	ldr	r3, [r3, #20]
    6c58:	339b      	adds	r3, #155	; 0x9b
			 (pdu_data_tx->len == 0)) ||
    6c5a:	781b      	ldrb	r3, [r3, #0]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    6c5c:	1e5a      	subs	r2, r3, #1
    6c5e:	4193      	sbcs	r3, r2
    6c60:	3302      	adds	r3, #2
    6c62:	7433      	strb	r3, [r6, #16]
	if (_radio.state == STATE_CLOSE) {
    6c64:	2b03      	cmp	r3, #3
    6c66:	d000      	beq.n	6c6a <isr+0xd3e>
    6c68:	e2e9      	b.n	723e <isr+0x1312>
		if (_radio.role == ROLE_MASTER) {
    6c6a:	7bf3      	ldrb	r3, [r6, #15]
    6c6c:	2b04      	cmp	r3, #4
    6c6e:	d000      	beq.n	6c72 <isr+0xd46>
    6c70:	e2c0      	b.n	71f4 <isr+0x12c8>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    6c72:	217f      	movs	r1, #127	; 0x7f
    6c74:	36fc      	adds	r6, #252	; 0xfc
    6c76:	6972      	ldr	r2, [r6, #20]
    6c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c7a:	32a8      	adds	r2, #168	; 0xa8
    6c7c:	7810      	ldrb	r0, [r2, #0]
    6c7e:	01db      	lsls	r3, r3, #7
    6c80:	4001      	ands	r1, r0
    6c82:	430b      	orrs	r3, r1
    6c84:	7013      	strb	r3, [r2, #0]
			radio_disable();
    6c86:	f002 f817 	bl	8cb8 <radio_disable>
    6c8a:	e77e      	b.n	6b8a <isr+0xc5e>
	    (packet_rx_reserve_get(3) != 0) &&
    6c8c:	2003      	movs	r0, #3
    6c8e:	f7fd fa87 	bl	41a0 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6c92:	2800      	cmp	r0, #0
    6c94:	d0b8      	beq.n	6c08 <isr+0xcdc>
	    ((_radio.fc_ena == 0) ||
    6c96:	23bb      	movs	r3, #187	; 0xbb
    6c98:	005b      	lsls	r3, r3, #1
	    (packet_rx_reserve_get(3) != 0) &&
    6c9a:	5cf3      	ldrb	r3, [r6, r3]
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d033      	beq.n	6d08 <isr+0xddc>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6ca0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6ca2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	    ((_radio.fc_ena == 0) ||
    6ca4:	429a      	cmp	r2, r3
    6ca6:	d107      	bne.n	6cb8 <isr+0xd8c>
	      (_radio.fc_req == _radio.fc_ack)) ||
    6ca8:	23ba      	movs	r3, #186	; 0xba
    6caa:	2176      	movs	r1, #118	; 0x76
    6cac:	005b      	lsls	r3, r3, #1
    6cae:	31ff      	adds	r1, #255	; 0xff
    6cb0:	5cf3      	ldrb	r3, [r6, r3]
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6cb2:	5c71      	ldrb	r1, [r6, r1]
    6cb4:	4299      	cmp	r1, r3
    6cb6:	d027      	beq.n	6d08 <isr+0xddc>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6cb8:	0033      	movs	r3, r6
    6cba:	33fc      	adds	r3, #252	; 0xfc
    6cbc:	6c99      	ldr	r1, [r3, #72]	; 0x48
	      (_radio.fc_req == _radio.fc_ack)) ||
    6cbe:	428a      	cmp	r2, r1
    6cc0:	d0a2      	beq.n	6c08 <isr+0xcdc>
	      (_radio.fc_req != _radio.fc_ack) &&
    6cc2:	22ba      	movs	r2, #186	; 0xba
    6cc4:	2076      	movs	r0, #118	; 0x76
    6cc6:	0052      	lsls	r2, r2, #1
    6cc8:	30ff      	adds	r0, #255	; 0xff
    6cca:	5cb1      	ldrb	r1, [r6, r2]
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6ccc:	5c30      	ldrb	r0, [r6, r0]
    6cce:	4288      	cmp	r0, r1
    6cd0:	d09a      	beq.n	6c08 <isr+0xcdc>
		(((_radio.fc_req == 0) &&
    6cd2:	5cb2      	ldrb	r2, [r6, r2]
	      (_radio.fc_req != _radio.fc_ack) &&
    6cd4:	2a00      	cmp	r2, #0
    6cd6:	d106      	bne.n	6ce6 <isr+0xdba>
		   _radio.conn_curr->handle)) ||
    6cd8:	695b      	ldr	r3, [r3, #20]
		(((_radio.fc_req == 0) &&
    6cda:	3273      	adds	r2, #115	; 0x73
    6cdc:	32ff      	adds	r2, #255	; 0xff
    6cde:	5ab2      	ldrh	r2, [r6, r2]
    6ce0:	8c1b      	ldrh	r3, [r3, #32]
    6ce2:	429a      	cmp	r2, r3
    6ce4:	d010      	beq.n	6d08 <isr+0xddc>
		 ((_radio.fc_req != 0) &&
    6ce6:	23ba      	movs	r3, #186	; 0xba
    6ce8:	005b      	lsls	r3, r3, #1
    6cea:	5cf2      	ldrb	r2, [r6, r3]
		   _radio.conn_curr->handle)) ||
    6cec:	2a00      	cmp	r2, #0
    6cee:	d08b      	beq.n	6c08 <isr+0xcdc>
		   _radio.conn_curr->handle)))))) {
    6cf0:	0032      	movs	r2, r6
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6cf2:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    6cf4:	32fc      	adds	r2, #252	; 0xfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6cf6:	33b3      	adds	r3, #179	; 0xb3
		   _radio.conn_curr->handle)))))) {
    6cf8:	6951      	ldr	r1, [r2, #20]
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6cfa:	005b      	lsls	r3, r3, #1
    6cfc:	18f3      	adds	r3, r6, r3
		 ((_radio.fc_req != 0) &&
    6cfe:	88da      	ldrh	r2, [r3, #6]
    6d00:	8c0b      	ldrh	r3, [r1, #32]
    6d02:	429a      	cmp	r2, r3
    6d04:	d000      	beq.n	6d08 <isr+0xddc>
    6d06:	e77f      	b.n	6c08 <isr+0xcdc>
		if (pdu_data_rx->len != 0) {
    6d08:	7a7b      	ldrb	r3, [r7, #9]
    6d0a:	930c      	str	r3, [sp, #48]	; 0x30
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d100      	bne.n	6d12 <isr+0xde6>
    6d10:	e20f      	b.n	7132 <isr+0x1206>
			if (_radio.conn_curr->enc_rx) {
    6d12:	0033      	movs	r3, r6
		u8_t ccm_rx_increment = 0;
    6d14:	2200      	movs	r2, #0
			if (_radio.conn_curr->enc_rx) {
    6d16:	33fc      	adds	r3, #252	; 0xfc
    6d18:	695b      	ldr	r3, [r3, #20]
		u8_t ccm_rx_increment = 0;
    6d1a:	920c      	str	r2, [sp, #48]	; 0x30
			if (_radio.conn_curr->enc_rx) {
    6d1c:	33a8      	adds	r3, #168	; 0xa8
    6d1e:	781b      	ldrb	r3, [r3, #0]
    6d20:	06db      	lsls	r3, r3, #27
    6d22:	d507      	bpl.n	6d34 <isr+0xe08>
				done = radio_ccm_is_done();
    6d24:	f002 f9fc 	bl	9120 <radio_ccm_is_done>
				ccm_rx_increment = 1;
    6d28:	2301      	movs	r3, #1
    6d2a:	930c      	str	r3, [sp, #48]	; 0x30
				LL_ASSERT(done);
    6d2c:	2800      	cmp	r0, #0
    6d2e:	d101      	bne.n	6d34 <isr+0xe08>
    6d30:	f7ff f94d 	bl	5fce <isr+0xa2>
			if ((_radio.conn_curr->enc_rx &&
    6d34:	0033      	movs	r3, r6
    6d36:	33fc      	adds	r3, #252	; 0xfc
    6d38:	695b      	ldr	r3, [r3, #20]
    6d3a:	33a8      	adds	r3, #168	; 0xa8
    6d3c:	781b      	ldrb	r3, [r3, #0]
    6d3e:	06db      	lsls	r3, r3, #27
    6d40:	d410      	bmi.n	6d64 <isr+0xe38>
			    (_radio.conn_curr->pause_rx &&
    6d42:	0033      	movs	r3, r6
    6d44:	33fc      	adds	r3, #252	; 0xfc
    6d46:	695d      	ldr	r5, [r3, #20]
    6d48:	002b      	movs	r3, r5
    6d4a:	33a8      	adds	r3, #168	; 0xa8
    6d4c:	781a      	ldrb	r2, [r3, #0]
			     !radio_ccm_mic_is_valid()) ||
    6d4e:	0753      	lsls	r3, r2, #29
    6d50:	d420      	bmi.n	6d94 <isr+0xe68>
			switch (pdu_data_rx->ll_id) {
    6d52:	7a3c      	ldrb	r4, [r7, #8]
    6d54:	07a4      	lsls	r4, r4, #30
    6d56:	0fa4      	lsrs	r4, r4, #30
    6d58:	d100      	bne.n	6d5c <isr+0xe30>
    6d5a:	e0bf      	b.n	6edc <isr+0xfb0>
    6d5c:	2c02      	cmp	r4, #2
    6d5e:	d842      	bhi.n	6de6 <isr+0xeba>
				*rx_enqueue = 1;
    6d60:	2401      	movs	r4, #1
    6d62:	e0bb      	b.n	6edc <isr+0xfb0>
			     !radio_ccm_mic_is_valid()) ||
    6d64:	f002 f9fe 	bl	9164 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    6d68:	2800      	cmp	r0, #0
    6d6a:	d1ea      	bne.n	6d42 <isr+0xe16>
				_radio.state = STATE_CLOSE;
    6d6c:	2303      	movs	r3, #3
    6d6e:	7433      	strb	r3, [r6, #16]
				radio_disable();
    6d70:	f001 ffa2 	bl	8cb8 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    6d74:	f001 ffb2 	bl	8cdc <radio_is_ready>
    6d78:	1e04      	subs	r4, r0, #0
    6d7a:	d001      	beq.n	6d80 <isr+0xe54>
    6d7c:	f7ff f927 	bl	5fce <isr+0xa2>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    6d80:	36fc      	adds	r6, #252	; 0xfc
    6d82:	213d      	movs	r1, #61	; 0x3d
    6d84:	6970      	ldr	r0, [r6, #20]
    6d86:	f7fd fd6b 	bl	4860 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    6d8a:	6970      	ldr	r0, [r6, #20]
    6d8c:	f7fd ff9a 	bl	4cc4 <connection_release>
				_radio.conn_curr = NULL;
    6d90:	6174      	str	r4, [r6, #20]
    6d92:	e6fa      	b.n	6b8a <isr+0xc5e>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6d94:	7a3b      	ldrb	r3, [r7, #8]
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    6d96:	43db      	mvns	r3, r3
    6d98:	079b      	lsls	r3, r3, #30
    6d9a:	d1e7      	bne.n	6d6c <isr+0xe40>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6d9c:	7f68      	ldrb	r0, [r5, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    6d9e:	7afb      	ldrb	r3, [r7, #11]
    6da0:	2140      	movs	r1, #64	; 0x40
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6da2:	287f      	cmp	r0, #127	; 0x7f
    6da4:	d812      	bhi.n	6dcc <isr+0xea0>
	       (!conn->role &&
    6da6:	420a      	tst	r2, r1
    6da8:	d109      	bne.n	6dbe <isr+0xe92>
		((!conn->refresh &&
    6daa:	2b02      	cmp	r3, #2
    6dac:	d0d1      	beq.n	6d52 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6dae:	1f5a      	subs	r2, r3, #5
    6db0:	2a01      	cmp	r2, #1
    6db2:	d9ce      	bls.n	6d52 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6db4:	22fb      	movs	r2, #251	; 0xfb
    6db6:	3b0d      	subs	r3, #13
    6db8:	4213      	tst	r3, r2
    6dba:	d1d7      	bne.n	6d6c <isr+0xe40>
    6dbc:	e7c9      	b.n	6d52 <isr+0xe26>
		 (conn->refresh &&
    6dbe:	21fd      	movs	r1, #253	; 0xfd
    6dc0:	1e9a      	subs	r2, r3, #2
    6dc2:	420a      	tst	r2, r1
    6dc4:	d0c5      	beq.n	6d52 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6dc6:	2b0b      	cmp	r3, #11
    6dc8:	d1f1      	bne.n	6dae <isr+0xe82>
    6dca:	e7c2      	b.n	6d52 <isr+0xe26>
	       (conn->role &&
    6dcc:	420a      	tst	r2, r1
    6dce:	d104      	bne.n	6dda <isr+0xeae>
		((!conn->refresh &&
    6dd0:	2b02      	cmp	r3, #2
    6dd2:	d0be      	beq.n	6d52 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6dd4:	2b06      	cmp	r3, #6
    6dd6:	d1ed      	bne.n	6db4 <isr+0xe88>
    6dd8:	e7bb      	b.n	6d52 <isr+0xe26>
		 (conn->refresh &&
    6dda:	1e9a      	subs	r2, r3, #2
    6ddc:	2a01      	cmp	r2, #1
    6dde:	d9b8      	bls.n	6d52 <isr+0xe26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6de0:	2b0b      	cmp	r3, #11
    6de2:	d1f7      	bne.n	6dd4 <isr+0xea8>
    6de4:	e7b5      	b.n	6d52 <isr+0xe26>
	pdu_data_rx = (void *)node_rx->pdu_data;
    6de6:	003b      	movs	r3, r7
    6de8:	3308      	adds	r3, #8
    6dea:	930f      	str	r3, [sp, #60]	; 0x3c
	switch (pdu_data_rx->llctrl.opcode) {
    6dec:	7afc      	ldrb	r4, [r7, #11]
    6dee:	2c19      	cmp	r4, #25
    6df0:	d900      	bls.n	6df4 <isr+0xec8>
    6df2:	e1a6      	b.n	7142 <isr+0x1216>
    6df4:	0020      	movs	r0, r4
    6df6:	f7f9 f9dd 	bl	1b4 <__gnu_thumb1_case_uhi>
    6dfa:	001d      	.short	0x001d
    6dfc:	00e700b0 	.word	0x00e700b0
    6e00:	01a401a4 	.word	0x01a401a4
    6e04:	01a401a4 	.word	0x01a401a4
    6e08:	00f2019e 	.word	0x00f2019e
    6e0c:	01a4010c 	.word	0x01a4010c
    6e10:	012c01a4 	.word	0x012c01a4
    6e14:	010501a4 	.word	0x010501a4
    6e18:	01a401a4 	.word	0x01a401a4
    6e1c:	01a40196 	.word	0x01a40196
    6e20:	01a401a4 	.word	0x01a401a4
    6e24:	01a401a4 	.word	0x01a401a4
    6e28:	01a401a4 	.word	0x01a401a4
    6e2c:	01b9      	.short	0x01b9
    6e2e:	46c0      	nop			; (mov r8, r8)
    6e30:	20000254 	.word	0x20000254
		if (!_radio.conn_curr->role ||
    6e34:	7f6b      	ldrb	r3, [r5, #29]
    6e36:	2b7f      	cmp	r3, #127	; 0x7f
    6e38:	d800      	bhi.n	6e3c <isr+0xf10>
    6e3a:	e182      	b.n	7142 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    6e3c:	7a79      	ldrb	r1, [r7, #9]
    6e3e:	2000      	movs	r0, #0
    6e40:	f7fd f96e 	bl	4120 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    6e44:	2800      	cmp	r0, #0
    6e46:	d100      	bne.n	6e4a <isr+0xf1e>
    6e48:	e17b      	b.n	7142 <isr+0x1216>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6e4a:	7dbb      	ldrb	r3, [r7, #22]
    6e4c:	7d7a      	ldrb	r2, [r7, #21]
    6e4e:	021b      	lsls	r3, r3, #8
    6e50:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    6e52:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    6e54:	1a9a      	subs	r2, r3, r2
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6e56:	0412      	lsls	r2, r2, #16
    6e58:	d500      	bpl.n	6e5c <isr+0xf30>
    6e5a:	e3a3      	b.n	75a4 <isr+0x1678>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    6e5c:	002a      	movs	r2, r5
    6e5e:	325c      	adds	r2, #92	; 0x5c
    6e60:	7811      	ldrb	r1, [r2, #0]
    6e62:	3201      	adds	r2, #1
    6e64:	7812      	ldrb	r2, [r2, #0]
    6e66:	428a      	cmp	r2, r1
    6e68:	d001      	beq.n	6e6e <isr+0xf42>
    6e6a:	f7ff f8b0 	bl	5fce <isr+0xa2>
	if (_radio.conn_upd == 0) {
    6e6e:	22be      	movs	r2, #190	; 0xbe
    6e70:	0052      	lsls	r2, r2, #1
    6e72:	58b0      	ldr	r0, [r6, r2]
    6e74:	2800      	cmp	r0, #0
    6e76:	d100      	bne.n	6e7a <isr+0xf4e>
		_radio.conn_upd = conn;
    6e78:	50b5      	str	r5, [r6, r2]
	conn->llcp.conn_upd.win_size =
    6e7a:	002a      	movs	r2, r5
    6e7c:	7b38      	ldrb	r0, [r7, #12]
    6e7e:	3270      	adds	r2, #112	; 0x70
    6e80:	7010      	strb	r0, [r2, #0]
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    6e82:	7bba      	ldrb	r2, [r7, #14]
    6e84:	7b78      	ldrb	r0, [r7, #13]
    6e86:	0212      	lsls	r2, r2, #8
    6e88:	4302      	orrs	r2, r0
    6e8a:	48d7      	ldr	r0, [pc, #860]	; (71e8 <isr+0x12bc>)
			_radio.conn_curr->procedure_expire = 0;
    6e8c:	2400      	movs	r4, #0
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    6e8e:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    6e90:	66ea      	str	r2, [r5, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    6e92:	7c3a      	ldrb	r2, [r7, #16]
    6e94:	7bf8      	ldrb	r0, [r7, #15]
    6e96:	0212      	lsls	r2, r2, #8
    6e98:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.interval =
    6e9a:	0028      	movs	r0, r5
    6e9c:	3062      	adds	r0, #98	; 0x62
    6e9e:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.latency;
    6ea0:	7cba      	ldrb	r2, [r7, #18]
    6ea2:	7c78      	ldrb	r0, [r7, #17]
    6ea4:	0212      	lsls	r2, r2, #8
    6ea6:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.latency =
    6ea8:	0028      	movs	r0, r5
    6eaa:	3064      	adds	r0, #100	; 0x64
    6eac:	8002      	strh	r2, [r0, #0]
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    6eae:	7d3a      	ldrb	r2, [r7, #20]
    6eb0:	7cf8      	ldrb	r0, [r7, #19]
    6eb2:	0212      	lsls	r2, r2, #8
    6eb4:	4302      	orrs	r2, r0
	conn->llcp.conn_upd.timeout =
    6eb6:	0028      	movs	r0, r5
    6eb8:	3066      	adds	r0, #102	; 0x66
    6eba:	8002      	strh	r2, [r0, #0]
	conn->llcp.conn_upd.instant =
    6ebc:	002a      	movs	r2, r5
	conn->llcp.conn_upd.is_internal = 0;
    6ebe:	20f8      	movs	r0, #248	; 0xf8
	conn->llcp.conn_upd.instant =
    6ec0:	3268      	adds	r2, #104	; 0x68
    6ec2:	8013      	strh	r3, [r2, #0]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6ec4:	3a08      	subs	r2, #8
    6ec6:	7813      	ldrb	r3, [r2, #0]
	conn->llcp_ack--;
    6ec8:	3901      	subs	r1, #1
	conn->llcp.conn_upd.is_internal = 0;
    6eca:	4003      	ands	r3, r0
    6ecc:	7013      	strb	r3, [r2, #0]
	conn->llcp_type = LLCP_CONN_UPD;
    6ece:	002b      	movs	r3, r5
    6ed0:	2201      	movs	r2, #1
    6ed2:	335e      	adds	r3, #94	; 0x5e
    6ed4:	701a      	strb	r2, [r3, #0]
	conn->llcp_ack--;
    6ed6:	3b01      	subs	r3, #1
    6ed8:	7019      	strb	r1, [r3, #0]
			_radio.conn_curr->procedure_expire = 0;
    6eda:	86ac      	strh	r4, [r5, #52]	; 0x34
			_radio.conn_curr->nesn++;
    6edc:	4bc3      	ldr	r3, [pc, #780]	; (71ec <isr+0x12c0>)
    6ede:	2102      	movs	r1, #2
    6ee0:	33fc      	adds	r3, #252	; 0xfc
    6ee2:	695d      	ldr	r5, [r3, #20]
    6ee4:	002a      	movs	r2, r5
    6ee6:	32a8      	adds	r2, #168	; 0xa8
    6ee8:	7813      	ldrb	r3, [r2, #0]
    6eea:	404b      	eors	r3, r1
    6eec:	7013      	strb	r3, [r2, #0]
			if (ccm_rx_increment) {
    6eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d100      	bne.n	6ef6 <isr+0xfca>
    6ef4:	e689      	b.n	6c0a <isr+0xcde>
				_radio.conn_curr->ccm_rx.counter++;
    6ef6:	002b      	movs	r3, r5
    6ef8:	002e      	movs	r6, r5
    6efa:	33b8      	adds	r3, #184	; 0xb8
    6efc:	36bc      	adds	r6, #188	; 0xbc
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	7832      	ldrb	r2, [r6, #0]
    6f02:	0a1b      	lsrs	r3, r3, #8
    6f04:	0612      	lsls	r2, r2, #24
    6f06:	431a      	orrs	r2, r3
    6f08:	0010      	movs	r0, r2
    6f0a:	002a      	movs	r2, r5
    6f0c:	32c0      	adds	r2, #192	; 0xc0
    6f0e:	6833      	ldr	r3, [r6, #0]
    6f10:	7812      	ldrb	r2, [r2, #0]
    6f12:	0a1b      	lsrs	r3, r3, #8
    6f14:	0612      	lsls	r2, r2, #24
    6f16:	431a      	orrs	r2, r3
    6f18:	0011      	movs	r1, r2
    6f1a:	2300      	movs	r3, #0
    6f1c:	2201      	movs	r2, #1
    6f1e:	1812      	adds	r2, r2, r0
    6f20:	414b      	adcs	r3, r1
    6f22:	920c      	str	r2, [sp, #48]	; 0x30
    6f24:	930d      	str	r3, [sp, #52]	; 0x34
    6f26:	2230      	movs	r2, #48	; 0x30
    6f28:	466b      	mov	r3, sp
    6f2a:	189b      	adds	r3, r3, r2
    6f2c:	781b      	ldrb	r3, [r3, #0]
    6f2e:	35b9      	adds	r5, #185	; 0xb9
    6f30:	702b      	strb	r3, [r5, #0]
    6f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6f34:	0a19      	lsrs	r1, r3, #8
    6f36:	0e1a      	lsrs	r2, r3, #24
    6f38:	7069      	strb	r1, [r5, #1]
    6f3a:	70ea      	strb	r2, [r5, #3]
    6f3c:	0c19      	lsrs	r1, r3, #16
    6f3e:	2234      	movs	r2, #52	; 0x34
    6f40:	466b      	mov	r3, sp
    6f42:	189b      	adds	r3, r3, r2
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	70a9      	strb	r1, [r5, #2]
    6f48:	712b      	strb	r3, [r5, #4]
    6f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6f4c:	0a1a      	lsrs	r2, r3, #8
    6f4e:	716a      	strb	r2, [r5, #5]
    6f50:	0c1a      	lsrs	r2, r3, #16
    6f52:	0e1b      	lsrs	r3, r3, #24
    6f54:	71aa      	strb	r2, [r5, #6]
    6f56:	71eb      	strb	r3, [r5, #7]
    6f58:	e657      	b.n	6c0a <isr+0xcde>
		if (!_radio.conn_curr->role ||
    6f5a:	7f6b      	ldrb	r3, [r5, #29]
    6f5c:	2b7f      	cmp	r3, #127	; 0x7f
    6f5e:	d800      	bhi.n	6f62 <isr+0x1036>
    6f60:	e0ef      	b.n	7142 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    6f62:	7a79      	ldrb	r1, [r7, #9]
    6f64:	2001      	movs	r0, #1
    6f66:	f7fd f8db 	bl	4120 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    6f6a:	2800      	cmp	r0, #0
    6f6c:	d100      	bne.n	6f70 <isr+0x1044>
    6f6e:	e0e8      	b.n	7142 <isr+0x1216>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    6f70:	7cbb      	ldrb	r3, [r7, #18]
    6f72:	7c7a      	ldrb	r2, [r7, #17]
    6f74:	021b      	lsls	r3, r3, #8
    6f76:	4313      	orrs	r3, r2
	      conn->event_counter) & 0xffff) > 0x7fff) {
    6f78:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    6f7a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    6f7c:	041b      	lsls	r3, r3, #16
    6f7e:	d500      	bpl.n	6f82 <isr+0x1056>
    6f80:	e310      	b.n	75a4 <isr+0x1678>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    6f82:	002e      	movs	r6, r5
    6f84:	002b      	movs	r3, r5
    6f86:	365d      	adds	r6, #93	; 0x5d
    6f88:	335c      	adds	r3, #92	; 0x5c
    6f8a:	781a      	ldrb	r2, [r3, #0]
    6f8c:	7833      	ldrb	r3, [r6, #0]
    6f8e:	429a      	cmp	r2, r3
    6f90:	d001      	beq.n	6f96 <isr+0x106a>
    6f92:	f7ff f81c 	bl	5fce <isr+0xa2>
	memcpy(&conn->llcp.chan_map.chm[0],
    6f96:	0028      	movs	r0, r5
    6f98:	0039      	movs	r1, r7
    6f9a:	2205      	movs	r2, #5
    6f9c:	3061      	adds	r0, #97	; 0x61
    6f9e:	310c      	adds	r1, #12
    6fa0:	f7f9 fb62 	bl	668 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    6fa4:	7cbb      	ldrb	r3, [r7, #18]
    6fa6:	7c7a      	ldrb	r2, [r7, #17]
    6fa8:	021b      	lsls	r3, r3, #8
    6faa:	4313      	orrs	r3, r2
	conn->llcp.chan_map.instant =
    6fac:	002a      	movs	r2, r5
    6fae:	3266      	adds	r2, #102	; 0x66
    6fb0:	8013      	strh	r3, [r2, #0]
	conn->llcp.chan_map.initiate = 0;
    6fb2:	002b      	movs	r3, r5
    6fb4:	2400      	movs	r4, #0
    6fb6:	3360      	adds	r3, #96	; 0x60
    6fb8:	701c      	strb	r4, [r3, #0]
			conn->llcp_type = LLCP_CHAN_MAP;
    6fba:	2302      	movs	r3, #2
    6fbc:	355e      	adds	r5, #94	; 0x5e
    6fbe:	702b      	strb	r3, [r5, #0]
			conn->llcp_ack--;
    6fc0:	7833      	ldrb	r3, [r6, #0]
    6fc2:	3b01      	subs	r3, #1
    6fc4:	7033      	strb	r3, [r6, #0]
    6fc6:	e789      	b.n	6edc <isr+0xfb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    6fc8:	7a79      	ldrb	r1, [r7, #9]
    6fca:	2002      	movs	r0, #2
    6fcc:	f7fd f8a8 	bl	4120 <pdu_len_cmp>
    6fd0:	2800      	cmp	r0, #0
    6fd2:	d100      	bne.n	6fd6 <isr+0x10aa>
    6fd4:	e0b5      	b.n	7142 <isr+0x1216>
		_radio.conn_curr->llcp_terminate.reason_peer =
    6fd6:	7b3b      	ldrb	r3, [r7, #12]
    6fd8:	359b      	adds	r5, #155	; 0x9b
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    6fda:	702b      	strb	r3, [r5, #0]
    6fdc:	e0a9      	b.n	7132 <isr+0x1206>
		if (!_radio.conn_curr->role ||
    6fde:	7f6b      	ldrb	r3, [r5, #29]
    6fe0:	2b7f      	cmp	r3, #127	; 0x7f
    6fe2:	d800      	bhi.n	6fe6 <isr+0x10ba>
    6fe4:	e0ad      	b.n	7142 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    6fe6:	2008      	movs	r0, #8
    6fe8:	7a79      	ldrb	r1, [r7, #9]
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    6fea:	f7fd f899 	bl	4120 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    6fee:	2800      	cmp	r0, #0
    6ff0:	d100      	bne.n	6ff4 <isr+0x10c8>
    6ff2:	e0a6      	b.n	7142 <isr+0x1216>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    6ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6ff6:	0028      	movs	r0, r5
    6ff8:	f7fe faa8 	bl	554c <feature_rsp_send>
    6ffc:	1e04      	subs	r4, r0, #0
		if (!nack) {
    6ffe:	d000      	beq.n	7002 <isr+0x10d6>
    7000:	e602      	b.n	6c08 <isr+0xcdc>
    7002:	e76b      	b.n	6edc <isr+0xfb0>
		if (_radio.conn_curr->role ||
    7004:	7f6b      	ldrb	r3, [r5, #29]
    7006:	2b7f      	cmp	r3, #127	; 0x7f
    7008:	d900      	bls.n	700c <isr+0x10e0>
    700a:	e09a      	b.n	7142 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    700c:	7a79      	ldrb	r1, [r7, #9]
    700e:	200e      	movs	r0, #14
    7010:	e7eb      	b.n	6fea <isr+0x10be>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    7012:	7a79      	ldrb	r1, [r7, #9]
    7014:	2009      	movs	r0, #9
    7016:	f7fd f883 	bl	4120 <pdu_len_cmp>
    701a:	2800      	cmp	r0, #0
    701c:	d100      	bne.n	7020 <isr+0x10f4>
    701e:	e090      	b.n	7142 <isr+0x1216>
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7020:	0029      	movs	r1, r5
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7022:	7b3a      	ldrb	r2, [r7, #12]
    7024:	4b72      	ldr	r3, [pc, #456]	; (71f0 <isr+0x12c4>)
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7026:	318c      	adds	r1, #140	; 0x8c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7028:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    702a:	7b7a      	ldrb	r2, [r7, #13]
    702c:	0212      	lsls	r2, r2, #8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    702e:	4313      	orrs	r3, r2
	       (features[1] << 8) | (features[2] << 16);
    7030:	7bba      	ldrb	r2, [r7, #14]
    7032:	0412      	lsls	r2, r2, #16
    7034:	431a      	orrs	r2, r3
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7036:	680b      	ldr	r3, [r1, #0]
    7038:	03db      	lsls	r3, r3, #15
    703a:	0bdb      	lsrs	r3, r3, #15
    703c:	4013      	ands	r3, r2
		_radio.conn_curr->common.fex_valid = 1;
    703e:	002a      	movs	r2, r5
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7040:	600b      	str	r3, [r1, #0]
		_radio.conn_curr->common.fex_valid = 1;
    7042:	2320      	movs	r3, #32
    7044:	3238      	adds	r2, #56	; 0x38
    7046:	7811      	ldrb	r1, [r2, #0]
    7048:	430b      	orrs	r3, r1
    704a:	7013      	strb	r3, [r2, #0]
		_radio.conn_curr->procedure_expire = 0;
    704c:	2300      	movs	r3, #0
    704e:	86ab      	strh	r3, [r5, #52]	; 0x34
    7050:	e686      	b.n	6d60 <isr+0xe34>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    7052:	7a79      	ldrb	r1, [r7, #9]
    7054:	200c      	movs	r0, #12
    7056:	f7fd f863 	bl	4120 <pdu_len_cmp>
    705a:	2800      	cmp	r0, #0
    705c:	d071      	beq.n	7142 <isr+0x1216>
	if (!conn->llcp_version.tx) {
    705e:	002c      	movs	r4, r5
    7060:	3490      	adds	r4, #144	; 0x90
    7062:	7823      	ldrb	r3, [r4, #0]
    7064:	2601      	movs	r6, #1
    7066:	001a      	movs	r2, r3
    7068:	4032      	ands	r2, r6
    706a:	920f      	str	r2, [sp, #60]	; 0x3c
    706c:	d154      	bne.n	7118 <isr+0x11ec>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    706e:	485f      	ldr	r0, [pc, #380]	; (71ec <isr+0x12c0>)
    7070:	3051      	adds	r0, #81	; 0x51
    7072:	30ff      	adds	r0, #255	; 0xff
    7074:	f7fb fb34 	bl	26e0 <mem_acquire>
    7078:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    707a:	d100      	bne.n	707e <isr+0x1152>
    707c:	e5c4      	b.n	6c08 <isr+0xcdc>
		conn->llcp_version.tx = 1;
    707e:	7823      	ldrb	r3, [r4, #0]
    7080:	4333      	orrs	r3, r6
    7082:	7023      	strb	r3, [r4, #0]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7084:	2403      	movs	r4, #3
    7086:	7903      	ldrb	r3, [r0, #4]
    7088:	4323      	orrs	r3, r4
    708a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    708c:	2306      	movs	r3, #6
    708e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    7090:	18db      	adds	r3, r3, r3
    7092:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    7094:	3b03      	subs	r3, #3
    7096:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    7098:	3b18      	subs	r3, #24
    709a:	7243      	strb	r3, [r0, #9]
    709c:	3314      	adds	r3, #20
    709e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    70a0:	3b06      	subs	r3, #6
    70a2:	72c3      	strb	r3, [r0, #11]
    70a4:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    70a6:	0028      	movs	r0, r5
    70a8:	f7fe fa37 	bl	551a <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    70ac:	002a      	movs	r2, r5
    70ae:	2380      	movs	r3, #128	; 0x80
    70b0:	32a8      	adds	r2, #168	; 0xa8
    70b2:	7811      	ldrb	r1, [r2, #0]
    70b4:	425b      	negs	r3, r3
    70b6:	430b      	orrs	r3, r1
    70b8:	7013      	strb	r3, [r2, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    70ba:	f001 fe45 	bl	8d48 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    70be:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    70c0:	223c      	movs	r2, #60	; 0x3c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    70c2:	43a3      	bics	r3, r4
    70c4:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    70c6:	466b      	mov	r3, sp
    70c8:	189b      	adds	r3, r3, r2
    70ca:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    70cc:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    70ce:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    70d0:	002b      	movs	r3, r5
    70d2:	33ec      	adds	r3, #236	; 0xec
    70d4:	681c      	ldr	r4, [r3, #0]
    70d6:	2310      	movs	r3, #16
    70d8:	2c00      	cmp	r4, #0
    70da:	d01a      	beq.n	7112 <isr+0x11e6>
		pdu_data_tx->md = 1;
    70dc:	431e      	orrs	r6, r3
	u8_t rx_enqueue = 0;
    70de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
		pdu_data_tx->md = 1;
    70e0:	7006      	strb	r6, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    70e2:	002b      	movs	r3, r5
    70e4:	7b3a      	ldrb	r2, [r7, #12]
    70e6:	3391      	adds	r3, #145	; 0x91
    70e8:	701a      	strb	r2, [r3, #0]
	conn->llcp_version.company_id = v->company_id;
    70ea:	7bbb      	ldrb	r3, [r7, #14]
    70ec:	7b7a      	ldrb	r2, [r7, #13]
    70ee:	021b      	lsls	r3, r3, #8
    70f0:	4313      	orrs	r3, r2
    70f2:	002a      	movs	r2, r5
    70f4:	3292      	adds	r2, #146	; 0x92
    70f6:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.sub_version_number = v->sub_version_number;
    70f8:	7c3b      	ldrb	r3, [r7, #16]
    70fa:	7bfa      	ldrb	r2, [r7, #15]
    70fc:	021b      	lsls	r3, r3, #8
    70fe:	4313      	orrs	r3, r2
    7100:	002a      	movs	r2, r5
    7102:	3294      	adds	r2, #148	; 0x94
    7104:	8013      	strh	r3, [r2, #0]
	conn->llcp_version.rx = 1;
    7106:	2302      	movs	r3, #2
    7108:	3590      	adds	r5, #144	; 0x90
    710a:	782a      	ldrb	r2, [r5, #0]
    710c:	4313      	orrs	r3, r2
    710e:	702b      	strb	r3, [r5, #0]
    7110:	e6e4      	b.n	6edc <isr+0xfb0>
		pdu_data_tx->md = 0;
    7112:	439e      	bics	r6, r3
    7114:	7006      	strb	r6, [r0, #0]
    7116:	e7e4      	b.n	70e2 <isr+0x11b6>
	u8_t rx_enqueue = 0;
    7118:	2400      	movs	r4, #0
	} else if (!conn->llcp_version.rx) {
    711a:	079b      	lsls	r3, r3, #30
    711c:	d500      	bpl.n	7120 <isr+0x11f4>
    711e:	e6dd      	b.n	6edc <isr+0xfb0>
		conn->procedure_expire = 0;
    7120:	86ac      	strh	r4, [r5, #52]	; 0x34
		*rx_enqueue = 1;
    7122:	0034      	movs	r4, r6
    7124:	e7dd      	b.n	70e2 <isr+0x11b6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    7126:	7a79      	ldrb	r1, [r7, #9]
    7128:	2011      	movs	r0, #17
    712a:	f7fc fff9 	bl	4120 <pdu_len_cmp>
    712e:	2800      	cmp	r0, #0
    7130:	d007      	beq.n	7142 <isr+0x1216>
	u8_t rx_enqueue = 0;
    7132:	2400      	movs	r4, #0
    7134:	e6d2      	b.n	6edc <isr+0xfb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    7136:	7a79      	ldrb	r1, [r7, #9]
    7138:	2007      	movs	r0, #7
    713a:	f7fc fff1 	bl	4120 <pdu_len_cmp>
    713e:	2800      	cmp	r0, #0
    7140:	d184      	bne.n	704c <isr+0x1120>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7142:	0030      	movs	r0, r6
    7144:	3051      	adds	r0, #81	; 0x51
    7146:	30ff      	adds	r0, #255	; 0xff
    7148:	f7fb faca 	bl	26e0 <mem_acquire>
    714c:	1e01      	subs	r1, r0, #0
	if (!node_tx) {
    714e:	d100      	bne.n	7152 <isr+0x1226>
    7150:	e55a      	b.n	6c08 <isr+0xcdc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7152:	2303      	movs	r3, #3
    7154:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    7156:	7204      	strb	r4, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7158:	4313      	orrs	r3, r2
    715a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    715c:	2302      	movs	r3, #2
    715e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    7160:	3305      	adds	r3, #5
    7162:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    7164:	0028      	movs	r0, r5
    7166:	f7fe f9a7 	bl	54b8 <ctrl_tx_enqueue>
    716a:	e7e2      	b.n	7132 <isr+0x1206>
		if (_radio.conn_curr->role ||
    716c:	7f6b      	ldrb	r3, [r5, #29]
    716e:	2b7f      	cmp	r3, #127	; 0x7f
    7170:	d8e7      	bhi.n	7142 <isr+0x1216>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    7172:	7a79      	ldrb	r1, [r7, #9]
    7174:	2019      	movs	r0, #25
    7176:	f7fc ffd3 	bl	4120 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    717a:	2800      	cmp	r0, #0
    717c:	d0e1      	beq.n	7142 <isr+0x1216>
			if (!(p->phys & 0x01)) {
    717e:	2201      	movs	r2, #1
    7180:	7b3b      	ldrb	r3, [r7, #12]
	u8_t rx_enqueue = 0;
    7182:	2400      	movs	r4, #0
			if (!(p->phys & 0x01)) {
    7184:	4213      	tst	r3, r2
    7186:	d100      	bne.n	718a <isr+0x125e>
    7188:	e6a8      	b.n	6edc <isr+0xfb0>
			if (conn->llcp_req != conn->llcp_ack) {
    718a:	002e      	movs	r6, r5
    718c:	002b      	movs	r3, r5
    718e:	365d      	adds	r6, #93	; 0x5d
    7190:	335c      	adds	r3, #92	; 0x5c
    7192:	781a      	ldrb	r2, [r3, #0]
    7194:	7833      	ldrb	r3, [r6, #0]
    7196:	429a      	cmp	r2, r3
    7198:	d000      	beq.n	719c <isr+0x1270>
    719a:	e69f      	b.n	6edc <isr+0xfb0>
			memcpy(&conn->llcp.chan_map.chm[0],
    719c:	0028      	movs	r0, r5
    719e:	4913      	ldr	r1, [pc, #76]	; (71ec <isr+0x12c0>)
    71a0:	2205      	movs	r2, #5
    71a2:	3117      	adds	r1, #23
    71a4:	3061      	adds	r0, #97	; 0x61
    71a6:	31ff      	adds	r1, #255	; 0xff
    71a8:	f7f9 fa5e 	bl	668 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    71ac:	002b      	movs	r3, r5
    71ae:	2201      	movs	r2, #1
    71b0:	3360      	adds	r3, #96	; 0x60
    71b2:	701a      	strb	r2, [r3, #0]
    71b4:	e701      	b.n	6fba <isr+0x108e>
		if (_radio.crc_expire == 0) {
    71b6:	7d93      	ldrb	r3, [r2, #22]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d101      	bne.n	71c0 <isr+0x1294>
			_radio.crc_expire = 2;
    71bc:	3302      	adds	r3, #2
    71be:	7593      	strb	r3, [r2, #22]
		_radio.crc_expire--;
    71c0:	0023      	movs	r3, r4
    71c2:	33ff      	adds	r3, #255	; 0xff
    71c4:	7d9d      	ldrb	r5, [r3, #22]
		if (!_radio.conn_curr->supervision_expire) {
    71c6:	34fc      	adds	r4, #252	; 0xfc
		_radio.crc_expire--;
    71c8:	3d01      	subs	r5, #1
    71ca:	b2ea      	uxtb	r2, r5
    71cc:	759a      	strb	r2, [r3, #22]
		crc_close = (_radio.crc_expire == 0);
    71ce:	4255      	negs	r5, r2
    71d0:	4155      	adcs	r5, r2
		if (!_radio.conn_curr->supervision_expire) {
    71d2:	6963      	ldr	r3, [r4, #20]
		crc_close = (_radio.crc_expire == 0);
    71d4:	b2ed      	uxtb	r5, r5
		if (!_radio.conn_curr->supervision_expire) {
    71d6:	8e1c      	ldrh	r4, [r3, #48]	; 0x30
    71d8:	2c00      	cmp	r4, #0
    71da:	d103      	bne.n	71e4 <isr+0x12b8>
			_radio.conn_curr->supervision_expire =
    71dc:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    71de:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    71e0:	940b      	str	r4, [sp, #44]	; 0x2c
    71e2:	e51a      	b.n	6c1a <isr+0xcee>
	u8_t rx_enqueue = 0;
    71e4:	2400      	movs	r4, #0
    71e6:	e7fb      	b.n	71e0 <isr+0x12b4>
    71e8:	000004e2 	.word	0x000004e2
    71ec:	20000254 	.word	0x20000254
    71f0:	fffe30d0 	.word	0xfffe30d0
			radio_switch_complete_and_disable();
    71f4:	f001 fdc0 	bl	8d78 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    71f8:	36fc      	adds	r6, #252	; 0xfc
    71fa:	6970      	ldr	r0, [r6, #20]
    71fc:	2501      	movs	r5, #1
    71fe:	0006      	movs	r6, r0
    7200:	36a8      	adds	r6, #168	; 0xa8
    7202:	7832      	ldrb	r2, [r6, #0]
    7204:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7206:	402a      	ands	r2, r5
    7208:	00d3      	lsls	r3, r2, #3
    720a:	930c      	str	r3, [sp, #48]	; 0x30
    720c:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    720e:	7836      	ldrb	r6, [r6, #0]
	pdu_data_tx->sn = _radio.conn_curr->sn;
    7210:	001a      	movs	r2, r3
    7212:	2308      	movs	r3, #8
    7214:	439a      	bics	r2, r3
    7216:	0013      	movs	r3, r2
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    7218:	40ee      	lsrs	r6, r5
    721a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    721c:	402e      	ands	r6, r5
    721e:	4313      	orrs	r3, r2
    7220:	001d      	movs	r5, r3
    7222:	2304      	movs	r3, #4
    7224:	00b6      	lsls	r6, r6, #2
    7226:	439d      	bics	r5, r3
    7228:	4335      	orrs	r5, r6
    722a:	700d      	strb	r5, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    722c:	f7fd faa2 	bl	4774 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    7230:	f001 fd54 	bl	8cdc <radio_is_ready>
    7234:	2800      	cmp	r0, #0
    7236:	d100      	bne.n	723a <isr+0x130e>
    7238:	e4a7      	b.n	6b8a <isr+0xc5e>
    723a:	f7fe fec8 	bl	5fce <isr+0xa2>
		radio_tmr_tifs_set(RADIO_TIFS);
    723e:	2096      	movs	r0, #150	; 0x96
    7240:	f001 fe1c 	bl	8e7c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7244:	2000      	movs	r0, #0
    7246:	f001 fd87 	bl	8d58 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    724a:	f001 fed9 	bl	9000 <radio_tmr_end_capture>
    724e:	e7d3      	b.n	71f8 <isr+0x12cc>
	switch (_radio.role) {
    7250:	7be0      	ldrb	r0, [r4, #15]
    7252:	b2c0      	uxtb	r0, r0
    7254:	2804      	cmp	r0, #4
    7256:	d901      	bls.n	725c <isr+0x1330>
    7258:	f7fe feb9 	bl	5fce <isr+0xa2>
    725c:	f7f8 ffaa 	bl	1b4 <__gnu_thumb1_case_uhi>
    7260:	00050199 	.word	0x00050199
    7264:	008f0064 	.word	0x008f0064
    7268:	008f      	.short	0x008f
	if ((_radio.state == STATE_CLOSE) &&
    726a:	2b03      	cmp	r3, #3
    726c:	d109      	bne.n	7282 <isr+0x1356>
	    (_radio.advertiser.chan_map_current != 0)) {
    726e:	1d63      	adds	r3, r4, #5
    7270:	7fdb      	ldrb	r3, [r3, #31]
	if ((_radio.state == STATE_CLOSE) &&
    7272:	075b      	lsls	r3, r3, #29
    7274:	d005      	beq.n	7282 <isr+0x1356>
		adv_setup();
    7276:	f7fd fc53 	bl	4b20 <adv_setup>
		radio_tx_enable();
    727a:	f001 fd17 	bl	8cac <radio_tx_enable>
    727e:	f7fe feb4 	bl	5fea <isr+0xbe>
		radio_filter_disable();
    7282:	f001 fdcb 	bl	8e1c <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    7286:	7c23      	ldrb	r3, [r4, #16]
    7288:	2b03      	cmp	r3, #3
    728a:	d130      	bne.n	72ee <isr+0x13c2>
		    (!_radio.advertiser.is_hdcd)) {
    728c:	1d63      	adds	r3, r4, #5
    728e:	7fdd      	ldrb	r5, [r3, #31]
		if ((_radio.state == STATE_CLOSE) &&
    7290:	2340      	movs	r3, #64	; 0x40
    7292:	401d      	ands	r5, r3
    7294:	d12b      	bne.n	72ee <isr+0x13c2>
			rand_isr_get(sizeof(random_delay), &random_delay);
    7296:	ae13      	add	r6, sp, #76	; 0x4c
    7298:	0031      	movs	r1, r6
    729a:	2001      	movs	r0, #1
    729c:	f001 fbae 	bl	89fc <rand_isr_get>
			random_delay %= 10;
    72a0:	7830      	ldrb	r0, [r6, #0]
    72a2:	210a      	movs	r1, #10
    72a4:	f7f8 ffd4 	bl	250 <__aeabi_uidivmod>
			random_delay += 1;
    72a8:	3101      	adds	r1, #1
    72aa:	b2c8      	uxtb	r0, r1
					HAL_TICKER_US_TO_TICKS(random_delay *
    72ac:	4abf      	ldr	r2, [pc, #764]	; (75ac <isr+0x1680>)
    72ae:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    72b0:	7030      	strb	r0, [r6, #0]
					HAL_TICKER_US_TO_TICKS(random_delay *
    72b2:	0029      	movs	r1, r5
    72b4:	f7f9 f858 	bl	368 <__aeabi_lmul>
    72b8:	4abd      	ldr	r2, [pc, #756]	; (75b0 <isr+0x1684>)
    72ba:	2307      	movs	r3, #7
    72bc:	f7f9 f834 	bl	328 <__aeabi_uldivmod>
			ticker_status =
    72c0:	4abc      	ldr	r2, [pc, #752]	; (75b4 <isr+0x1688>)
    72c2:	b283      	uxth	r3, r0
    72c4:	9206      	str	r2, [sp, #24]
    72c6:	4abc      	ldr	r2, [pc, #752]	; (75b8 <isr+0x168c>)
    72c8:	9504      	str	r5, [sp, #16]
    72ca:	9205      	str	r2, [sp, #20]
    72cc:	9503      	str	r5, [sp, #12]
    72ce:	9502      	str	r5, [sp, #8]
    72d0:	9501      	str	r5, [sp, #4]
    72d2:	9500      	str	r5, [sp, #0]
    72d4:	2205      	movs	r2, #5
    72d6:	0029      	movs	r1, r5
    72d8:	0028      	movs	r0, r5
    72da:	f7fc f86d 	bl	33b8 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    72de:	2302      	movs	r3, #2
    72e0:	4398      	bics	r0, r3
    72e2:	d004      	beq.n	72ee <isr+0x13c2>
    72e4:	7ba3      	ldrb	r3, [r4, #14]
    72e6:	2b05      	cmp	r3, #5
    72e8:	d001      	beq.n	72ee <isr+0x13c2>
    72ea:	f7fe fe70 	bl	5fce <isr+0xa2>
	_radio.role = ROLE_NONE;
    72ee:	2400      	movs	r4, #0
    72f0:	4db2      	ldr	r5, [pc, #712]	; (75bc <isr+0x1690>)
    72f2:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    72f4:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    72f6:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    72f8:	f001 fe12 	bl	8f20 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    72fc:	0022      	movs	r2, r4
    72fe:	0021      	movs	r1, r4
    7300:	0020      	movs	r0, r4
    7302:	4baf      	ldr	r3, [pc, #700]	; (75c0 <isr+0x1694>)
    7304:	f7fb faa2 	bl	284c <mayfly_enqueue>
    7308:	1e04      	subs	r4, r0, #0
	LL_ASSERT(!retval);
    730a:	d001      	beq.n	7310 <isr+0x13e4>
    730c:	f7fe fe5f 	bl	5fce <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    7310:	6828      	ldr	r0, [r5, #0]
    7312:	0021      	movs	r1, r4
    7314:	6843      	ldr	r3, [r0, #4]
    7316:	685b      	ldr	r3, [r3, #4]
    7318:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    731a:	2201      	movs	r2, #1
    731c:	0020      	movs	r0, r4
    731e:	0011      	movs	r1, r2
    7320:	f7fb fa70 	bl	2804 <mayfly_enable>
    7324:	f7fe fe82 	bl	602c <isr+0x100>
	if (_radio.state == STATE_CLOSE) {
    7328:	2b03      	cmp	r3, #3
    732a:	d11b      	bne.n	7364 <isr+0x1438>
		radio_tmr_tifs_set(RADIO_TIFS);
    732c:	2096      	movs	r0, #150	; 0x96
    732e:	f001 fda5 	bl	8e7c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7332:	2300      	movs	r3, #0
    7334:	0019      	movs	r1, r3
    7336:	001a      	movs	r2, r3
    7338:	0018      	movs	r0, r3
    733a:	f001 fd15 	bl	8d68 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    733e:	2336      	movs	r3, #54	; 0x36
    7340:	0022      	movs	r2, r4
    7342:	33ff      	adds	r3, #255	; 0xff
    7344:	5ce3      	ldrb	r3, [r4, r3]
    7346:	32fc      	adds	r2, #252	; 0xfc
    7348:	6b52      	ldr	r2, [r2, #52]	; 0x34
    734a:	009b      	lsls	r3, r3, #2
		radio_pkt_rx_set(_radio.packet_rx
    734c:	5898      	ldr	r0, [r3, r2]
    734e:	3008      	adds	r0, #8
    7350:	f001 fc8e 	bl	8c70 <radio_pkt_rx_set>
		radio_rssi_measure();
    7354:	f001 fd18 	bl	8d88 <radio_rssi_measure>
		_radio.state = STATE_RX;
    7358:	2301      	movs	r3, #1
    735a:	7423      	strb	r3, [r4, #16]
		radio_rx_enable();
    735c:	f001 fca0 	bl	8ca0 <radio_rx_enable>
    7360:	f7fe fe43 	bl	5fea <isr+0xbe>
		radio_filter_disable();
    7364:	f001 fd5a 	bl	8e1c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    7368:	7c23      	ldrb	r3, [r4, #16]
    736a:	2b05      	cmp	r3, #5
    736c:	d1bf      	bne.n	72ee <isr+0x13c2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    736e:	2000      	movs	r0, #0
    7370:	2204      	movs	r2, #4
    7372:	9000      	str	r0, [sp, #0]
    7374:	0003      	movs	r3, r0
    7376:	0001      	movs	r1, r0
    7378:	f7fc f86e 	bl	3458 <ticker_stop>
    737c:	e7b7      	b.n	72ee <isr+0x13c2>
	if (_radio.conn_curr == 0) {
    737e:	0023      	movs	r3, r4
    7380:	33fc      	adds	r3, #252	; 0xfc
    7382:	6958      	ldr	r0, [r3, #20]
    7384:	2800      	cmp	r0, #0
    7386:	d0b2      	beq.n	72ee <isr+0x13c2>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    7388:	0003      	movs	r3, r0
    738a:	339b      	adds	r3, #155	; 0x9b
    738c:	7819      	ldrb	r1, [r3, #0]
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    738e:	2900      	cmp	r1, #0
    7390:	d010      	beq.n	73b4 <isr+0x1488>
    7392:	7be3      	ldrb	r3, [r4, #15]
    7394:	2b03      	cmp	r3, #3
    7396:	d004      	beq.n	73a2 <isr+0x1476>
    7398:	0003      	movs	r3, r0
    739a:	3338      	adds	r3, #56	; 0x38
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	07db      	lsls	r3, r3, #31
    73a0:	d508      	bpl.n	73b4 <isr+0x1488>
			connection_release(_radio.conn_curr);
    73a2:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    73a4:	f7fd fa5c 	bl	4860 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    73a8:	6960      	ldr	r0, [r4, #20]
    73aa:	f7fd fc8b 	bl	4cc4 <connection_release>
			_radio.conn_curr = NULL;
    73ae:	2300      	movs	r3, #0
    73b0:	6163      	str	r3, [r4, #20]
    73b2:	e79c      	b.n	72ee <isr+0x13c2>
	latency_event = _radio.conn_curr->latency_event;
    73b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    73b6:	930b      	str	r3, [sp, #44]	; 0x2c
	elapsed_event = latency_event + 1;
    73b8:	1c5e      	adds	r6, r3, #1
	if (_radio.packet_counter &&
    73ba:	0023      	movs	r3, r4
    73bc:	33ff      	adds	r3, #255	; 0xff
    73be:	7d5f      	ldrb	r7, [r3, #21]
	elapsed_event = latency_event + 1;
    73c0:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    73c2:	2f00      	cmp	r7, #0
    73c4:	d07b      	beq.n	74be <isr+0x1592>
		if (_radio.role == ROLE_SLAVE) {
    73c6:	7be3      	ldrb	r3, [r4, #15]
    73c8:	2b03      	cmp	r3, #3
    73ca:	d16e      	bne.n	74aa <isr+0x157e>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    73cc:	f001 fe0a 	bl	8fe4 <radio_tmr_aa_restore>
    73d0:	0007      	movs	r7, r0
						     radio_tmr_ready_get();
    73d2:	f001 fe0d 	bl	8ff0 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    73d6:	34fc      	adds	r4, #252	; 0xfc
    73d8:	6964      	ldr	r4, [r4, #20]
			start_to_address_actual_us = radio_tmr_aa_restore() -
    73da:	1a3f      	subs	r7, r7, r0
			window_widening_event_us =
    73dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    73de:	4a79      	ldr	r2, [pc, #484]	; (75c4 <isr+0x1698>)
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    73e0:	0003      	movs	r3, r0
    73e2:	3358      	adds	r3, #88	; 0x58
    73e4:	930c      	str	r3, [sp, #48]	; 0x30
			if (start_to_address_actual_us <=
    73e6:	429f      	cmp	r7, r3
    73e8:	d84c      	bhi.n	7484 <isr+0x1558>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    73ea:	2300      	movs	r3, #0
    73ec:	2100      	movs	r1, #0
    73ee:	f7f8 ffbb 	bl	368 <__aeabi_lmul>
    73f2:	4a6f      	ldr	r2, [pc, #444]	; (75b0 <isr+0x1684>)
    73f4:	2307      	movs	r3, #7
    73f6:	f7f8 ff97 	bl	328 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    73fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    73fc:	4a71      	ldr	r2, [pc, #452]	; (75c4 <isr+0x1698>)
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    73fe:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    7400:	2100      	movs	r1, #0
    7402:	1bd8      	subs	r0, r3, r7
    7404:	2300      	movs	r3, #0
    7406:	f7f8 ffaf 	bl	368 <__aeabi_lmul>
    740a:	4a69      	ldr	r2, [pc, #420]	; (75b0 <isr+0x1684>)
    740c:	2307      	movs	r3, #7
    740e:	f7f8 ff8b 	bl	328 <__aeabi_uldivmod>
    7412:	b281      	uxth	r1, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    7414:	2300      	movs	r3, #0
    7416:	64a3      	str	r3, [r4, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    7418:	6523      	str	r3, [r4, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    741a:	0023      	movs	r3, r4
    741c:	33ec      	adds	r3, #236	; 0xec
    741e:	681b      	ldr	r3, [r3, #0]
    7420:	2b00      	cmp	r3, #0
    7422:	d03b      	beq.n	749c <isr+0x1570>
				if (pdu_data_tx->len ||
    7424:	795b      	ldrb	r3, [r3, #5]
    7426:	2b00      	cmp	r3, #0
    7428:	d104      	bne.n	7434 <isr+0x1508>
				    _radio.conn_curr->packet_tx_head_offset) {
    742a:	0023      	movs	r3, r4
    742c:	33ff      	adds	r3, #255	; 0xff
				if (pdu_data_tx->len ||
    742e:	789b      	ldrb	r3, [r3, #2]
    7430:	2b00      	cmp	r3, #0
    7432:	d001      	beq.n	7438 <isr+0x150c>
					_radio.conn_curr->latency_event = 0;
    7434:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    7436:	8563      	strh	r3, [r4, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    7438:	2200      	movs	r2, #0
    743a:	4b60      	ldr	r3, [pc, #384]	; (75bc <isr+0x1690>)
    743c:	33fc      	adds	r3, #252	; 0xfc
    743e:	695b      	ldr	r3, [r3, #20]
    7440:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    7442:	4c5e      	ldr	r4, [pc, #376]	; (75bc <isr+0x1690>)
    7444:	0027      	movs	r7, r4
    7446:	37fc      	adds	r7, #252	; 0xfc
    7448:	6978      	ldr	r0, [r7, #20]
    744a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    744c:	2b00      	cmp	r3, #0
    744e:	d017      	beq.n	7480 <isr+0x1554>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    7450:	429e      	cmp	r6, r3
    7452:	d300      	bcc.n	7456 <isr+0x152a>
    7454:	e092      	b.n	757c <isr+0x1650>
			_radio.conn_curr->latency_event = 0;
    7456:	2200      	movs	r2, #0
			_radio.conn_curr->supervision_expire -= elapsed_event;
    7458:	1b9b      	subs	r3, r3, r6
    745a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    745c:	8542      	strh	r2, [r0, #42]	; 0x2a
			_radio.conn_curr->supervision_expire -= elapsed_event;
    745e:	8603      	strh	r3, [r0, #48]	; 0x30
				force = 1;
    7460:	3201      	adds	r2, #1
			if (_radio.conn_curr->supervision_expire <= 6) {
    7462:	2b06      	cmp	r3, #6
    7464:	d949      	bls.n	74fa <isr+0x15ce>
			else if (_radio.role == ROLE_SLAVE) {
    7466:	7be3      	ldrb	r3, [r4, #15]
    7468:	2b03      	cmp	r3, #3
    746a:	d109      	bne.n	7480 <isr+0x1554>
				if (latency_event != 0) {
    746c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    746e:	0017      	movs	r7, r2
    7470:	2b00      	cmp	r3, #0
    7472:	d142      	bne.n	74fa <isr+0x15ce>
					force = _radio.conn_curr->slave.force & 0x01;
    7474:	6d43      	ldr	r3, [r0, #84]	; 0x54
    7476:	401a      	ands	r2, r3
					_radio.conn_curr->slave.force >>= 1;
    7478:	40fb      	lsrs	r3, r7
					if (force) {
    747a:	2a00      	cmp	r2, #0
    747c:	d139      	bne.n	74f2 <isr+0x15c6>
					_radio.conn_curr->slave.force >>= 1;
    747e:	6543      	str	r3, [r0, #84]	; 0x54
	force = 0;
    7480:	2200      	movs	r2, #0
    7482:	e03a      	b.n	74fa <isr+0x15ce>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7484:	2300      	movs	r3, #0
    7486:	0038      	movs	r0, r7
    7488:	2100      	movs	r1, #0
    748a:	f7f8 ff6d 	bl	368 <__aeabi_lmul>
    748e:	4a48      	ldr	r2, [pc, #288]	; (75b0 <isr+0x1684>)
    7490:	2307      	movs	r3, #7
    7492:	f7f8 ff49 	bl	328 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    7496:	2102      	movs	r1, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7498:	b285      	uxth	r5, r0
    749a:	e7bb      	b.n	7414 <isr+0x14e8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    749c:	0023      	movs	r3, r4
    749e:	3338      	adds	r3, #56	; 0x38
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	07db      	lsls	r3, r3, #31
    74a4:	d5c8      	bpl.n	7438 <isr+0x150c>
				_radio.conn_curr->latency_event =
    74a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    74a8:	e7c5      	b.n	7436 <isr+0x150a>
		} else if (reason_peer) {
    74aa:	2900      	cmp	r1, #0
    74ac:	d005      	beq.n	74ba <isr+0x158e>
			_radio.conn_curr->master.terminate_ack = 1;
    74ae:	2301      	movs	r3, #1
	ticks_drift_minus = 0;
    74b0:	2100      	movs	r1, #0
			_radio.conn_curr->master.terminate_ack = 1;
    74b2:	3038      	adds	r0, #56	; 0x38
    74b4:	7802      	ldrb	r2, [r0, #0]
    74b6:	4313      	orrs	r3, r2
    74b8:	7003      	strb	r3, [r0, #0]
	ticks_drift_plus = 0;
    74ba:	000d      	movs	r5, r1
    74bc:	e7bc      	b.n	7438 <isr+0x150c>
	else if (_radio.conn_curr->connect_expire) {
    74be:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    74c0:	2d00      	cmp	r5, #0
    74c2:	d00f      	beq.n	74e4 <isr+0x15b8>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    74c4:	42ae      	cmp	r6, r5
    74c6:	d204      	bcs.n	74d2 <isr+0x15a6>
			_radio.conn_curr->connect_expire -= elapsed_event;
    74c8:	1bad      	subs	r5, r5, r6
    74ca:	8585      	strh	r5, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    74cc:	003d      	movs	r5, r7
    74ce:	0029      	movs	r1, r5
    74d0:	e7b7      	b.n	7442 <isr+0x1516>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    74d2:	213e      	movs	r1, #62	; 0x3e
			connection_release(_radio.conn_curr);
    74d4:	34fc      	adds	r4, #252	; 0xfc
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    74d6:	f7fd f9c3 	bl	4860 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    74da:	6960      	ldr	r0, [r4, #20]
    74dc:	f7fd fbf2 	bl	4cc4 <connection_release>
			_radio.conn_curr = NULL;
    74e0:	6167      	str	r7, [r4, #20]
    74e2:	e704      	b.n	72ee <isr+0x13c2>
		if (!_radio.conn_curr->supervision_expire) {
    74e4:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    74e6:	2900      	cmp	r1, #0
    74e8:	d1f1      	bne.n	74ce <isr+0x15a2>
			_radio.conn_curr->supervision_expire =
    74ea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
	ticks_drift_plus = 0;
    74ec:	000d      	movs	r5, r1
			_radio.conn_curr->supervision_expire =
    74ee:	8603      	strh	r3, [r0, #48]	; 0x30
    74f0:	e7a7      	b.n	7442 <isr+0x1516>
						_radio.conn_curr->slave.force |=
    74f2:	2780      	movs	r7, #128	; 0x80
    74f4:	063f      	lsls	r7, r7, #24
    74f6:	433b      	orrs	r3, r7
    74f8:	6543      	str	r3, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    74fa:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    74fc:	2b00      	cmp	r3, #0
    74fe:	d003      	beq.n	7508 <isr+0x15dc>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    7500:	429e      	cmp	r6, r3
    7502:	d244      	bcs.n	758e <isr+0x1662>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    7504:	1b9e      	subs	r6, r3, r6
    7506:	8686      	strh	r6, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    7508:	0003      	movs	r3, r0
    750a:	335d      	adds	r3, #93	; 0x5d
    750c:	781e      	ldrb	r6, [r3, #0]
    750e:	3b01      	subs	r3, #1
    7510:	781b      	ldrb	r3, [r3, #0]
    7512:	429e      	cmp	r6, r3
    7514:	d007      	beq.n	7526 <isr+0x15fa>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    7516:	0003      	movs	r3, r0
    7518:	335e      	adds	r3, #94	; 0x5e
    751a:	781b      	ldrb	r3, [r3, #0]
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    751c:	3b01      	subs	r3, #1
    751e:	2b01      	cmp	r3, #1
    7520:	d801      	bhi.n	7526 <isr+0x15fa>
		_radio.conn_curr->latency_event = 0;
    7522:	2300      	movs	r3, #0
    7524:	8543      	strh	r3, [r0, #42]	; 0x2a
    7526:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    7528:	2a00      	cmp	r2, #0
    752a:	d103      	bne.n	7534 <isr+0x1608>
    752c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	lazy = 0;
    752e:	0017      	movs	r7, r2
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    7530:	42b3      	cmp	r3, r6
    7532:	d001      	beq.n	7538 <isr+0x160c>
		lazy = _radio.conn_curr->latency_event + 1;
    7534:	3301      	adds	r3, #1
    7536:	b29f      	uxth	r7, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    7538:	002b      	movs	r3, r5
    753a:	430b      	orrs	r3, r1
    753c:	433b      	orrs	r3, r7
    753e:	d102      	bne.n	7546 <isr+0x161a>
	    (lazy != 0) || (force != 0)) {
    7540:	2a00      	cmp	r2, #0
    7542:	d100      	bne.n	7546 <isr+0x161a>
    7544:	e6d3      	b.n	72ee <isr+0x13c2>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    7546:	8c06      	ldrh	r6, [r0, #32]
		ticker_status =
    7548:	2000      	movs	r0, #0
    754a:	4b1f      	ldr	r3, [pc, #124]	; (75c8 <isr+0x169c>)
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    754c:	3607      	adds	r6, #7
    754e:	b2f6      	uxtb	r6, r6
		ticker_status =
    7550:	9305      	str	r3, [sp, #20]
    7552:	9204      	str	r2, [sp, #16]
    7554:	9100      	str	r1, [sp, #0]
    7556:	002b      	movs	r3, r5
				      (void *)(u32_t)ticker_id);
    7558:	9606      	str	r6, [sp, #24]
		ticker_status =
    755a:	9703      	str	r7, [sp, #12]
    755c:	9002      	str	r0, [sp, #8]
    755e:	9001      	str	r0, [sp, #4]
    7560:	0032      	movs	r2, r6
    7562:	0001      	movs	r1, r0
    7564:	f7fb ff28 	bl	33b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7568:	2302      	movs	r3, #2
    756a:	4398      	bics	r0, r3
    756c:	d100      	bne.n	7570 <isr+0x1644>
    756e:	e6be      	b.n	72ee <isr+0x13c2>
    7570:	7ba3      	ldrb	r3, [r4, #14]
    7572:	429e      	cmp	r6, r3
    7574:	d100      	bne.n	7578 <isr+0x164c>
    7576:	e6ba      	b.n	72ee <isr+0x13c2>
    7578:	f7fe fd29 	bl	5fce <isr+0xa2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    757c:	2108      	movs	r1, #8
    757e:	f7fd f96f 	bl	4860 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    7582:	6978      	ldr	r0, [r7, #20]
    7584:	f7fd fb9e 	bl	4cc4 <connection_release>
			_radio.conn_curr = NULL;
    7588:	2300      	movs	r3, #0
    758a:	617b      	str	r3, [r7, #20]
    758c:	e6af      	b.n	72ee <isr+0x13c2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    758e:	2122      	movs	r1, #34	; 0x22
    7590:	e707      	b.n	73a2 <isr+0x1476>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    7592:	3b04      	subs	r3, #4
    7594:	2b01      	cmp	r3, #1
    7596:	d901      	bls.n	759c <isr+0x1670>
    7598:	f7fe fd19 	bl	5fce <isr+0xa2>
		_radio.state = STATE_NONE;
    759c:	2300      	movs	r3, #0
    759e:	7423      	strb	r3, [r4, #16]
    75a0:	f7fe fd44 	bl	602c <isr+0x100>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    75a4:	359b      	adds	r5, #155	; 0x9b
    75a6:	2328      	movs	r3, #40	; 0x28
    75a8:	e517      	b.n	6fda <isr+0x10ae>
    75aa:	46c0      	nop			; (mov r8, r8)
    75ac:	d4a51000 	.word	0xd4a51000
    75b0:	1afd498d 	.word	0x1afd498d
    75b4:	00000f48 	.word	0x00000f48
    75b8:	00004e99 	.word	0x00004e99
    75bc:	20000254 	.word	0x20000254
    75c0:	200022f8 	.word	0x200022f8
    75c4:	3b9aca00 	.word	0x3b9aca00
    75c8:	00004e7d 	.word	0x00004e7d

000075cc <mayfly_xtal_stop_calc>:
{
    75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    75ce:	2302      	movs	r3, #2
	ticker_id_next = 0xff;
    75d0:	2523      	movs	r5, #35	; 0x23
{
    75d2:	b091      	sub	sp, #68	; 0x44
	ticker_id_next = 0xff;
    75d4:	aa02      	add	r2, sp, #8
    75d6:	18ad      	adds	r5, r5, r2
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    75d8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    75da:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    75dc:	2300      	movs	r3, #0
{
    75de:	0004      	movs	r4, r0
	struct connection *conn_curr = NULL;
    75e0:	930c      	str	r3, [sp, #48]	; 0x30
	struct connection *conn_next = NULL;
    75e2:	930d      	str	r3, [sp, #52]	; 0x34
	ticker_id_next = 0xff;
    75e4:	702a      	strb	r2, [r5, #0]
	ticks_to_expire = 0;
    75e6:	930e      	str	r3, [sp, #56]	; 0x38
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    75e8:	ab0b      	add	r3, sp, #44	; 0x2c
    75ea:	9302      	str	r3, [sp, #8]
    75ec:	4b6e      	ldr	r3, [pc, #440]	; (77a8 <mayfly_xtal_stop_calc+0x1dc>)
    75ee:	002a      	movs	r2, r5
    75f0:	9301      	str	r3, [sp, #4]
    75f2:	ab0e      	add	r3, sp, #56	; 0x38
    75f4:	9300      	str	r3, [sp, #0]
    75f6:	2101      	movs	r1, #1
    75f8:	ab0f      	add	r3, sp, #60	; 0x3c
    75fa:	2000      	movs	r0, #0
    75fc:	f7fb ff5a 	bl	34b4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    7600:	2802      	cmp	r0, #2
    7602:	d009      	beq.n	7618 <mayfly_xtal_stop_calc+0x4c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    7604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7606:	2b00      	cmp	r3, #0
    7608:	d00a      	beq.n	7620 <mayfly_xtal_stop_calc+0x54>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    760a:	b662      	cpsie	i
    760c:	2004      	movs	r0, #4
    760e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    7610:	2101      	movs	r1, #1
    7612:	2000      	movs	r0, #0
    7614:	f7fb ffb4 	bl	3580 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    7618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    761a:	2b02      	cmp	r3, #2
    761c:	d0f8      	beq.n	7610 <mayfly_xtal_stop_calc+0x44>
    761e:	e7f1      	b.n	7604 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    7620:	782b      	ldrb	r3, [r5, #0]
				    _radio.connection_count));
    7622:	2bff      	cmp	r3, #255	; 0xff
    7624:	d005      	beq.n	7632 <mayfly_xtal_stop_calc+0x66>
    7626:	4a61      	ldr	r2, [pc, #388]	; (77ac <mayfly_xtal_stop_calc+0x1e0>)
    7628:	32ff      	adds	r2, #255	; 0xff
    762a:	7b52      	ldrb	r2, [r2, #13]
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    762c:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    762e:	4293      	cmp	r3, r2
    7630:	dada      	bge.n	75e8 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    7632:	1f5a      	subs	r2, r3, #5
    7634:	b2d2      	uxtb	r2, r2
    7636:	4f5e      	ldr	r7, [pc, #376]	; (77b0 <mayfly_xtal_stop_calc+0x1e4>)
    7638:	2af9      	cmp	r2, #249	; 0xf9
    763a:	d805      	bhi.n	7648 <mayfly_xtal_stop_calc+0x7c>
				_radio.connection_count))) {
    763c:	4a5b      	ldr	r2, [pc, #364]	; (77ac <mayfly_xtal_stop_calc+0x1e0>)
    763e:	32ff      	adds	r2, #255	; 0xff
    7640:	7b52      	ldrb	r2, [r2, #13]
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    7642:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    7644:	4293      	cmp	r3, r2
    7646:	db07      	blt.n	7658 <mayfly_xtal_stop_calc+0x8c>
		if (s_xtal_retained) {
    7648:	783b      	ldrb	r3, [r7, #0]
    764a:	2b00      	cmp	r3, #0
    764c:	d002      	beq.n	7654 <mayfly_xtal_stop_calc+0x88>
    764e:	2001      	movs	r0, #1
    7650:	f7fd f858 	bl	4704 <mayfly_xtal_retain.part.15>
}
    7654:	b011      	add	sp, #68	; 0x44
    7656:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    7658:	b2e0      	uxtb	r0, r4
    765a:	a90c      	add	r1, sp, #48	; 0x30
    765c:	f7fd f834 	bl	46c8 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    7660:	2800      	cmp	r0, #0
    7662:	d0d2      	beq.n	760a <mayfly_xtal_stop_calc+0x3e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    7664:	6802      	ldr	r2, [r0, #0]
    7666:	6841      	ldr	r1, [r0, #4]
    7668:	2a00      	cmp	r2, #0
    766a:	da2b      	bge.n	76c4 <mayfly_xtal_stop_calc+0xf8>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    766c:	6883      	ldr	r3, [r0, #8]
    766e:	428b      	cmp	r3, r1
    7670:	d200      	bcs.n	7674 <mayfly_xtal_stop_calc+0xa8>
    7672:	000b      	movs	r3, r1
	ticks_slot_abs += hdr_curr->ticks_slot;
    7674:	68c2      	ldr	r2, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7676:	a90d      	add	r1, sp, #52	; 0x34
	ticks_slot_abs += hdr_curr->ticks_slot;
    7678:	189b      	adds	r3, r3, r2
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    767a:	7828      	ldrb	r0, [r5, #0]
	ticks_slot_abs += hdr_curr->ticks_slot;
    767c:	9309      	str	r3, [sp, #36]	; 0x24
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    767e:	f7fd f823 	bl	46c8 <hdr_conn_get>
    7682:	1e04      	subs	r4, r0, #0
	LL_ASSERT(hdr_next);
    7684:	d0c1      	beq.n	760a <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7686:	6843      	ldr	r3, [r0, #4]
    7688:	6886      	ldr	r6, [r0, #8]
    768a:	429e      	cmp	r6, r3
    768c:	d200      	bcs.n	7690 <mayfly_xtal_stop_calc+0xc4>
    768e:	001e      	movs	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7690:	6823      	ldr	r3, [r4, #0]
    7692:	2b00      	cmp	r3, #0
    7694:	da05      	bge.n	76a2 <mayfly_xtal_stop_calc+0xd6>
		ticks_to_expire -=
    7696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			(hdr_next->ticks_xtal_to_start &
    7698:	005b      	lsls	r3, r3, #1
		ticks_to_expire -=
    769a:	18b2      	adds	r2, r6, r2
			(hdr_next->ticks_xtal_to_start &
    769c:	085b      	lsrs	r3, r3, #1
		ticks_to_expire -=
    769e:	1ad3      	subs	r3, r2, r3
    76a0:	930e      	str	r3, [sp, #56]	; 0x38
	if (ticks_to_expire >
    76a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    76a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    76a6:	3331      	adds	r3, #49	; 0x31
    76a8:	4293      	cmp	r3, r2
    76aa:	d210      	bcs.n	76ce <mayfly_xtal_stop_calc+0x102>
		if (s_xtal_retained) {
    76ac:	783b      	ldrb	r3, [r7, #0]
    76ae:	2b00      	cmp	r3, #0
    76b0:	d002      	beq.n	76b8 <mayfly_xtal_stop_calc+0xec>
    76b2:	2001      	movs	r0, #1
    76b4:	f7fd f826 	bl	4704 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    76b8:	782a      	ldrb	r2, [r5, #0]
    76ba:	2101      	movs	r1, #1
    76bc:	0020      	movs	r0, r4
    76be:	f7fd f8ab 	bl	4818 <prepare_normal_set>
    76c2:	e7c7      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    76c4:	000b      	movs	r3, r1
    76c6:	4291      	cmp	r1, r2
    76c8:	d2d4      	bcs.n	7674 <mayfly_xtal_stop_calc+0xa8>
    76ca:	0013      	movs	r3, r2
    76cc:	e7d2      	b.n	7674 <mayfly_xtal_stop_calc+0xa8>
		if (!s_xtal_retained) {
    76ce:	7839      	ldrb	r1, [r7, #0]
    76d0:	2900      	cmp	r1, #0
    76d2:	d108      	bne.n	76e6 <mayfly_xtal_stop_calc+0x11a>
			s_xtal_retained = 1;
    76d4:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    76d6:	4b37      	ldr	r3, [pc, #220]	; (77b4 <mayfly_xtal_stop_calc+0x1e8>)
    76d8:	000a      	movs	r2, r1
			s_xtal_retained = 1;
    76da:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    76dc:	f7fb f8b6 	bl	284c <mayfly_enqueue>
			LL_ASSERT(!retval);
    76e0:	2800      	cmp	r0, #0
    76e2:	d000      	beq.n	76e6 <mayfly_xtal_stop_calc+0x11a>
    76e4:	e791      	b.n	760a <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    76e6:	6823      	ldr	r3, [r4, #0]
    76e8:	2b00      	cmp	r3, #0
    76ea:	db14      	blt.n	7716 <mayfly_xtal_stop_calc+0x14a>
    76ec:	429e      	cmp	r6, r3
    76ee:	d212      	bcs.n	7716 <mayfly_xtal_stop_calc+0x14a>
			ticker_status =
    76f0:	2000      	movs	r0, #0
    76f2:	4931      	ldr	r1, [pc, #196]	; (77b8 <mayfly_xtal_stop_calc+0x1ec>)
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    76f4:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    76f6:	b29b      	uxth	r3, r3
			ticker_status =
    76f8:	782a      	ldrb	r2, [r5, #0]
    76fa:	9105      	str	r1, [sp, #20]
    76fc:	9302      	str	r3, [sp, #8]
    76fe:	9406      	str	r4, [sp, #24]
    7700:	9004      	str	r0, [sp, #16]
    7702:	9003      	str	r0, [sp, #12]
    7704:	9001      	str	r0, [sp, #4]
    7706:	9000      	str	r0, [sp, #0]
    7708:	2101      	movs	r1, #1
    770a:	f7fb fe55 	bl	33b8 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    770e:	2302      	movs	r3, #2
    7710:	4398      	bics	r0, r3
    7712:	d000      	beq.n	7716 <mayfly_xtal_stop_calc+0x14a>
    7714:	e779      	b.n	760a <mayfly_xtal_stop_calc+0x3e>
		if (!conn_curr || !conn_next) {
    7716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7718:	2d00      	cmp	r5, #0
    771a:	d09b      	beq.n	7654 <mayfly_xtal_stop_calc+0x88>
    771c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    771e:	2c00      	cmp	r4, #0
    7720:	d098      	beq.n	7654 <mayfly_xtal_stop_calc+0x88>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    7722:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    7724:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    7726:	4298      	cmp	r0, r3
    7728:	d000      	beq.n	772c <mayfly_xtal_stop_calc+0x160>
    772a:	e793      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    772c:	2324      	movs	r3, #36	; 0x24
    772e:	4a23      	ldr	r2, [pc, #140]	; (77bc <mayfly_xtal_stop_calc+0x1f0>)
    7730:	33ff      	adds	r3, #255	; 0xff
    7732:	2100      	movs	r1, #0
    7734:	f7f8 fe18 	bl	368 <__aeabi_lmul>
    7738:	4a21      	ldr	r2, [pc, #132]	; (77c0 <mayfly_xtal_stop_calc+0x1f4>)
    773a:	2307      	movs	r3, #7
    773c:	f7f8 fdf4 	bl	328 <__aeabi_uldivmod>
			while (ticks_to_expire > ticks_conn_interval) {
    7740:	2200      	movs	r2, #0
    7742:	2101      	movs	r1, #1
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    7744:	0200      	lsls	r0, r0, #8
    7746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7748:	0a00      	lsrs	r0, r0, #8
			while (ticks_to_expire > ticks_conn_interval) {
    774a:	4298      	cmp	r0, r3
    774c:	d318      	bcc.n	7780 <mayfly_xtal_stop_calc+0x1b4>
    774e:	2a00      	cmp	r2, #0
    7750:	d000      	beq.n	7754 <mayfly_xtal_stop_calc+0x188>
    7752:	930e      	str	r3, [sp, #56]	; 0x38
			if (conn_curr->role && !conn_next->role &&
    7754:	7f69      	ldrb	r1, [r5, #29]
    7756:	7f62      	ldrb	r2, [r4, #29]
    7758:	297f      	cmp	r1, #127	; 0x7f
    775a:	d914      	bls.n	7786 <mayfly_xtal_stop_calc+0x1ba>
    775c:	2a7f      	cmp	r2, #127	; 0x7f
    775e:	d900      	bls.n	7762 <mayfly_xtal_stop_calc+0x196>
    7760:	e778      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
			     (ticks_slot_abs +
    7762:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7764:	3214      	adds	r2, #20
			if (conn_curr->role && !conn_next->role &&
    7766:	429a      	cmp	r2, r3
    7768:	d800      	bhi.n	776c <mayfly_xtal_stop_calc+0x1a0>
    776a:	e773      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_curr);
    776c:	0028      	movs	r0, r5
    776e:	f7fc fd37 	bl	41e0 <conn_update_req>
				if (status == 2) {
    7772:	2802      	cmp	r0, #2
    7774:	d000      	beq.n	7778 <mayfly_xtal_stop_calc+0x1ac>
    7776:	e76d      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_next);
    7778:	980d      	ldr	r0, [sp, #52]	; 0x34
					conn_update_req(conn_curr);
    777a:	f7fc fd31 	bl	41e0 <conn_update_req>
    777e:	e769      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
				ticks_to_expire -= ticks_conn_interval;
    7780:	1a1b      	subs	r3, r3, r0
    7782:	000a      	movs	r2, r1
    7784:	e7e1      	b.n	774a <mayfly_xtal_stop_calc+0x17e>
			} else if (!conn_curr->role && conn_next->role &&
    7786:	2a7f      	cmp	r2, #127	; 0x7f
    7788:	d800      	bhi.n	778c <mayfly_xtal_stop_calc+0x1c0>
    778a:	e763      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
				    (ticks_slot_abs +
    778c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    778e:	3214      	adds	r2, #20
			} else if (!conn_curr->role && conn_next->role &&
    7790:	429a      	cmp	r2, r3
    7792:	d800      	bhi.n	7796 <mayfly_xtal_stop_calc+0x1ca>
    7794:	e75e      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
				status = conn_update_req(conn_next);
    7796:	0020      	movs	r0, r4
    7798:	f7fc fd22 	bl	41e0 <conn_update_req>
				if (status == 2) {
    779c:	2802      	cmp	r0, #2
    779e:	d000      	beq.n	77a2 <mayfly_xtal_stop_calc+0x1d6>
    77a0:	e758      	b.n	7654 <mayfly_xtal_stop_calc+0x88>
					conn_update_req(conn_curr);
    77a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    77a4:	e7e9      	b.n	777a <mayfly_xtal_stop_calc+0x1ae>
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	00004149 	.word	0x00004149
    77ac:	20000254 	.word	0x20000254
    77b0:	20000458 	.word	0x20000458
    77b4:	20002358 	.word	0x20002358
    77b8:	0000414d 	.word	0x0000414d
    77bc:	09ce5400 	.word	0x09ce5400
    77c0:	1afd498d 	.word	0x1afd498d

000077c4 <event_master>:
{
    77c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    77c6:	001c      	movs	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    77c8:	4b49      	ldr	r3, [pc, #292]	; (78f0 <event_master+0x12c>)
{
    77ca:	0006      	movs	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    77cc:	7bdd      	ldrb	r5, [r3, #15]
    77ce:	b2ed      	uxtb	r5, r5
    77d0:	2d00      	cmp	r5, #0
    77d2:	d002      	beq.n	77da <event_master+0x16>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    77d4:	b662      	cpsie	i
    77d6:	2004      	movs	r0, #4
    77d8:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    77da:	7b1a      	ldrb	r2, [r3, #12]
    77dc:	8c21      	ldrh	r1, [r4, #32]
    77de:	b2d2      	uxtb	r2, r2
    77e0:	3107      	adds	r1, #7
    77e2:	428a      	cmp	r2, r1
    77e4:	d1f6      	bne.n	77d4 <event_master+0x10>
	_radio.role = ROLE_MASTER;
    77e6:	2704      	movs	r7, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    77e8:	b2d2      	uxtb	r2, r2
	_radio.role = ROLE_MASTER;
    77ea:	73df      	strb	r7, [r3, #15]
	_radio.state = STATE_TX;
    77ec:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    77ee:	731d      	strb	r5, [r3, #12]
	_radio.ticker_id_event =
    77f0:	735a      	strb	r2, [r3, #13]
	_radio.packet_counter = 0;
    77f2:	001a      	movs	r2, r3
	_radio.state = STATE_TX;
    77f4:	7418      	strb	r0, [r3, #16]
	_radio.packet_counter = 0;
    77f6:	32ff      	adds	r2, #255	; 0xff
	_radio.ticks_anchor = ticks_at_expire;
    77f8:	605e      	str	r6, [r3, #4]
	_radio.conn_curr = conn;
    77fa:	33fc      	adds	r3, #252	; 0xfc
	_radio.packet_counter = 0;
    77fc:	7555      	strb	r5, [r2, #21]
	_radio.crc_expire = 0;
    77fe:	7595      	strb	r5, [r2, #22]
	_radio.conn_curr = conn;
    7800:	615c      	str	r4, [r3, #20]
	conn->latency_event = conn->latency_prepare;
    7802:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    7804:	8525      	strh	r5, [r4, #40]	; 0x28
	conn->latency_event = conn->latency_prepare;
    7806:	8563      	strh	r3, [r4, #42]	; 0x2a
	packet_tx_enqueue(2);
    7808:	f7fd fa0c 	bl	4c24 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    780c:	a901      	add	r1, sp, #4
    780e:	0020      	movs	r0, r4
    7810:	f7fe fb20 	bl	5e54 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    7814:	0021      	movs	r1, r4
    7816:	2201      	movs	r2, #1
    7818:	31a8      	adds	r1, #168	; 0xa8
    781a:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    781c:	7809      	ldrb	r1, [r1, #0]
	pdu_data_tx->sn = conn->sn;
    781e:	4013      	ands	r3, r2
    7820:	00d8      	lsls	r0, r3, #3
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	3207      	adds	r2, #7
    7826:	781b      	ldrb	r3, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
    7828:	0849      	lsrs	r1, r1, #1
	pdu_data_tx->sn = conn->sn;
    782a:	4393      	bics	r3, r2
	pdu_data_tx->nesn = conn->nesn;
    782c:	4303      	orrs	r3, r0
    782e:	43bb      	bics	r3, r7
    7830:	0027      	movs	r7, r4
    7832:	3a07      	subs	r2, #7
    7834:	4011      	ands	r1, r2
    7836:	0089      	lsls	r1, r1, #2
    7838:	9a01      	ldr	r2, [sp, #4]
    783a:	430b      	orrs	r3, r1
    783c:	7013      	strb	r3, [r2, #0]
	connection_configure(conn);
    783e:	0020      	movs	r0, r4
    7840:	f7fe fa34 	bl	5cac <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7844:	2096      	movs	r0, #150	; 0x96
    7846:	f001 fb19 	bl	8e7c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    784a:	0028      	movs	r0, r5
    784c:	f001 fa84 	bl	8d58 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    7850:	9901      	ldr	r1, [sp, #4]
    7852:	0020      	movs	r0, r4
    7854:	f7fc ff8e 	bl	4774 <tx_packet_set>
	if (conn->data_chan_sel) {
    7858:	7f63      	ldrb	r3, [r4, #29]
    785a:	3717      	adds	r7, #23
    785c:	069d      	lsls	r5, r3, #26
    785e:	065b      	lsls	r3, r3, #25
    7860:	d520      	bpl.n	78a4 <event_master+0xe0>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7862:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7864:	0eab      	lsrs	r3, r5, #26
    7866:	3801      	subs	r0, #1
    7868:	8be1      	ldrh	r1, [r4, #30]
    786a:	b280      	uxth	r0, r0
    786c:	003a      	movs	r2, r7
    786e:	f7fd fd6d 	bl	534c <chan_sel_2>
	chan_set(data_chan_use);
    7872:	f7fd f939 	bl	4ae8 <chan_set>
		remainder_us = radio_tmr_start(1,
    7876:	0031      	movs	r1, r6
    7878:	4d1d      	ldr	r5, [pc, #116]	; (78f0 <event_master+0x12c>)
    787a:	3109      	adds	r1, #9
    787c:	68aa      	ldr	r2, [r5, #8]
    787e:	2001      	movs	r0, #1
    7880:	f001 fb04 	bl	8e8c <radio_tmr_start>
		radio_tmr_end_capture();
    7884:	f001 fbbc 	bl	9000 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7888:	8c21      	ldrh	r1, [r4, #32]
    788a:	0032      	movs	r2, r6
    788c:	3107      	adds	r1, #7
    788e:	b2c9      	uxtb	r1, r1
    7890:	0020      	movs	r0, r4
    7892:	f7fd fd9b 	bl	53cc <preempt_calc>
	if (0 !=
    7896:	2800      	cmp	r0, #0
    7898:	d020      	beq.n	78dc <event_master+0x118>
		_radio.state = STATE_STOP;
    789a:	2304      	movs	r3, #4
    789c:	742b      	strb	r3, [r5, #16]
		radio_disable();
    789e:	f001 fa0b 	bl	8cb8 <radio_disable>
}
    78a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    78a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    78a6:	7fa0      	ldrb	r0, [r4, #30]
    78a8:	3301      	adds	r3, #1
    78aa:	4358      	muls	r0, r3
    78ac:	7fe3      	ldrb	r3, [r4, #31]
    78ae:	2125      	movs	r1, #37	; 0x25
    78b0:	18c0      	adds	r0, r0, r3
    78b2:	f7f8 fd2d 	bl	310 <__aeabi_idivmod>
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    78b6:	2207      	movs	r2, #7
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    78b8:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    78ba:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    78bc:	08c3      	lsrs	r3, r0, #3
    78be:	5cfb      	ldrb	r3, [r7, r3]
    78c0:	4011      	ands	r1, r2
    78c2:	410b      	asrs	r3, r1
    78c4:	3a06      	subs	r2, #6
					   conn->data_chan_count);
    78c6:	0ead      	lsrs	r5, r5, #26
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    78c8:	4213      	tst	r3, r2
    78ca:	d1d2      	bne.n	7872 <event_master+0xae>
		chan_index = chan_next % chan_count;
    78cc:	0029      	movs	r1, r5
    78ce:	f7f8 fcbf 	bl	250 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    78d2:	0038      	movs	r0, r7
		chan_index = chan_next % chan_count;
    78d4:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    78d6:	f7fc fc48 	bl	416a <chan_sel_remap>
    78da:	e7ca      	b.n	7872 <event_master+0xae>
		ticker_status =
    78dc:	0003      	movs	r3, r0
    78de:	4a05      	ldr	r2, [pc, #20]	; (78f4 <event_master+0x130>)
    78e0:	0001      	movs	r1, r0
    78e2:	f7fb fe1d 	bl	3520 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    78e6:	2302      	movs	r3, #2
    78e8:	4398      	bics	r0, r3
    78ea:	d000      	beq.n	78ee <event_master+0x12a>
    78ec:	e772      	b.n	77d4 <event_master+0x10>
    78ee:	e7d8      	b.n	78a2 <event_master+0xde>
    78f0:	20000254 	.word	0x20000254
    78f4:	000046ad 	.word	0x000046ad

000078f8 <radio_init>:
{
    78f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78fa:	b087      	sub	sp, #28
    78fc:	9201      	str	r2, [sp, #4]
    78fe:	aa0c      	add	r2, sp, #48	; 0x30
    7900:	7816      	ldrb	r6, [r2, #0]
    7902:	aa0d      	add	r2, sp, #52	; 0x34
    7904:	8817      	ldrh	r7, [r2, #0]
    7906:	aa0e      	add	r2, sp, #56	; 0x38
    7908:	8812      	ldrh	r2, [r2, #0]
    790a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    790c:	9205      	str	r2, [sp, #20]
    790e:	aa10      	add	r2, sp, #64	; 0x40
    7910:	8812      	ldrh	r2, [r2, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7912:	2482      	movs	r4, #130	; 0x82
{
    7914:	9202      	str	r2, [sp, #8]
	_radio.hf_clock = hf_clock;
    7916:	4a35      	ldr	r2, [pc, #212]	; (79ec <radio_init+0xf4>)
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7918:	0064      	lsls	r4, r4, #1
	_radio.hf_clock = hf_clock;
    791a:	6010      	str	r0, [r2, #0]
	_radio.sca = sca;
    791c:	0010      	movs	r0, r2
    791e:	30ff      	adds	r0, #255	; 0xff
    7920:	7741      	strb	r1, [r0, #29]
	mem_radio_end = mem_radio + mem_size;
    7922:	9902      	ldr	r1, [sp, #8]
    7924:	1869      	adds	r1, r5, r1
    7926:	9103      	str	r1, [sp, #12]
	_radio.connection_count = connection_count_max;
    7928:	4669      	mov	r1, sp
    792a:	7909      	ldrb	r1, [r1, #4]
    792c:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
    792e:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7930:	9901      	ldr	r1, [sp, #4]
	_radio.conn_pool = mem_radio;
    7932:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7934:	434c      	muls	r4, r1
	_radio.conn_pool = mem_radio;
    7936:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7938:	192c      	adds	r4, r5, r4
	tx_count_max += 1;
    793a:	1c75      	adds	r5, r6, #1
	rx_count_max += 3;
    793c:	1cd9      	adds	r1, r3, #3
	tx_count_max += 1;
    793e:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
    7940:	3304      	adds	r3, #4
	tx_count_max += 1;
    7942:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
    7944:	b2dd      	uxtb	r5, r3
    7946:	239a      	movs	r3, #154	; 0x9a
	_radio.packet_tx_count = (tx_count_max + 1);
    7948:	3602      	adds	r6, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    794a:	005b      	lsls	r3, r3, #1
    794c:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    794e:	b2f6      	uxtb	r6, r6
    7950:	3334      	adds	r3, #52	; 0x34
    7952:	54d6      	strb	r6, [r2, r3]
	rx_count_max += 3;
    7954:	b2c9      	uxtb	r1, r1
	_radio.link_rx_data_quota = rx_count_max;
    7956:	3b20      	subs	r3, #32
    7958:	54d1      	strb	r1, [r2, r3]
		(sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);
    795a:	00ab      	lsls	r3, r5, #2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    795c:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx = (void *)mem_radio;
    795e:	6344      	str	r4, [r0, #52]	; 0x34
	mem_radio +=
    7960:	18e4      	adds	r4, r4, r3
	_radio.pkt_tx = (void *)mem_radio;
    7962:	6644      	str	r4, [r0, #100]	; 0x64
	_radio.packet_data_octets_max = packet_data_octets_max;
    7964:	32fe      	adds	r2, #254	; 0xfe
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7966:	19a4      	adds	r4, r4, r6
	    (offsetof(struct pdu_data, lldata) +
    7968:	1cfb      	adds	r3, r7, #3
	_radio.pkt_release = (void *)mem_radio;
    796a:	6684      	str	r4, [r0, #104]	; 0x68
	_radio.packet_data_octets_max = packet_data_octets_max;
    796c:	8557      	strh	r7, [r2, #42]	; 0x2a
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    796e:	19a4      	adds	r4, r4, r6
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    7970:	2b28      	cmp	r3, #40	; 0x28
    7972:	d92f      	bls.n	79d4 <radio_init+0xdc>
		_radio.packet_rx_data_pool_size =
    7974:	2303      	movs	r3, #3
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    7976:	370e      	adds	r7, #14
		_radio.packet_rx_data_pool_size =
    7978:	439f      	bics	r7, r3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    797a:	4e1c      	ldr	r6, [pc, #112]	; (79ec <radio_init+0xf4>)
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    797c:	4379      	muls	r1, r7
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    797e:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
    7980:	8591      	strh	r1, [r2, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7982:	2130      	movs	r1, #48	; 0x30
    7984:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7986:	8d9f      	ldrh	r7, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7988:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    798a:	0038      	movs	r0, r7
    798c:	f7f8 fc1c 	bl	1c8 <__aeabi_uidiv>
    7990:	2397      	movs	r3, #151	; 0x97
	_radio.pkt_rx_data_pool = mem_radio;
    7992:	0032      	movs	r2, r6
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7994:	005b      	lsls	r3, r3, #1
    7996:	54f0      	strb	r0, [r6, r3]
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7998:	9b01      	ldr	r3, [sp, #4]
	_radio.pkt_rx_data_pool = mem_radio;
    799a:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    799c:	18ed      	adds	r5, r5, r3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    799e:	2303      	movs	r3, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    79a0:	00ed      	lsls	r5, r5, #3
	_radio.pkt_rx_data_pool = mem_radio;
    79a2:	6254      	str	r4, [r2, #36]	; 0x24
	mem_radio += _radio.packet_rx_data_pool_size;
    79a4:	19e4      	adds	r4, r4, r7
	_radio.link_rx_pool = mem_radio;
    79a6:	63d4      	str	r4, [r2, #60]	; 0x3c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    79a8:	1964      	adds	r4, r4, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    79aa:	9d05      	ldr	r5, [sp, #20]
	_radio.pkt_tx_ctrl_pool = mem_radio;
    79ac:	6514      	str	r4, [r2, #80]	; 0x50
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    79ae:	350a      	adds	r5, #10
    79b0:	439d      	bics	r5, r3
	_radio.packet_tx_data_size =
    79b2:	335a      	adds	r3, #90	; 0x5a
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    79b4:	b2ad      	uxth	r5, r5
	_radio.packet_tx_data_size =
    79b6:	33ff      	adds	r3, #255	; 0xff
    79b8:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    79ba:	9b04      	ldr	r3, [sp, #16]
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    79bc:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    79be:	436b      	muls	r3, r5
    79c0:	18e5      	adds	r5, r4, r3
	retcode = (mem_radio - mem_radio_end);
    79c2:	9b03      	ldr	r3, [sp, #12]
	_radio.pkt_tx_data_pool = mem_radio;
    79c4:	6594      	str	r4, [r2, #88]	; 0x58
	retcode = (mem_radio - mem_radio_end);
    79c6:	1aed      	subs	r5, r5, r3
	if (retcode) {
    79c8:	d006      	beq.n	79d8 <radio_init+0xe0>
		return (retcode + mem_size);
    79ca:	9b02      	ldr	r3, [sp, #8]
    79cc:	18ed      	adds	r5, r5, r3
}
    79ce:	0028      	movs	r0, r5
    79d0:	b007      	add	sp, #28
    79d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    79d4:	2730      	movs	r7, #48	; 0x30
    79d6:	e7d0      	b.n	797a <radio_init+0x82>
	_radio.fc_ena = 1;
    79d8:	23bb      	movs	r3, #187	; 0xbb
    79da:	2201      	movs	r2, #1
    79dc:	005b      	lsls	r3, r3, #1
    79de:	54f2      	strb	r2, [r6, r3]
	common_init();
    79e0:	f7fd fc36 	bl	5250 <common_init>
	radio_setup();
    79e4:	f001 f8be 	bl	8b64 <radio_setup>
	return retcode;
    79e8:	e7f1      	b.n	79ce <radio_init+0xd6>
    79ea:	46c0      	nop			; (mov r8, r8)
    79ec:	20000254 	.word	0x20000254

000079f0 <ll_reset>:
{
    79f0:	b570      	push	{r4, r5, r6, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    79f2:	2103      	movs	r1, #3
    79f4:	2005      	movs	r0, #5
    79f6:	f7fc fc8d 	bl	4314 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    79fa:	2104      	movs	r1, #4
    79fc:	2006      	movs	r0, #6
    79fe:	f7fc fc89 	bl	4314 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    7a02:	4c25      	ldr	r4, [pc, #148]	; (7a98 <ll_reset+0xa8>)
    7a04:	2500      	movs	r5, #0
    7a06:	0026      	movs	r6, r4
    7a08:	36ff      	adds	r6, #255	; 0xff
    7a0a:	7b73      	ldrb	r3, [r6, #13]
    7a0c:	42ab      	cmp	r3, r5
    7a0e:	d83b      	bhi.n	7a88 <ll_reset+0x98>
	_radio.advertiser.is_enabled = 0;
    7a10:	217f      	movs	r1, #127	; 0x7f
    7a12:	1d62      	adds	r2, r4, #5
    7a14:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    7a16:	2500      	movs	r5, #0
	_radio.advertiser.is_enabled = 0;
    7a18:	400b      	ands	r3, r1
    7a1a:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    7a1c:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    7a1e:	0022      	movs	r2, r4
	_radio.advertiser.conn = NULL;
    7a20:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
    7a22:	32dc      	adds	r2, #220	; 0xdc
	_radio.advertiser.conn = NULL;
    7a24:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
    7a26:	7813      	ldrb	r3, [r2, #0]
    7a28:	397e      	subs	r1, #126	; 0x7e
    7a2a:	438b      	bics	r3, r1
    7a2c:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
    7a2e:	0023      	movs	r3, r4
    7a30:	33fc      	adds	r3, #252	; 0xfc
    7a32:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7a34:	0023      	movs	r3, r4
    7a36:	312f      	adds	r1, #47	; 0x2f
    7a38:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7a3a:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7a3c:	85d9      	strh	r1, [r3, #46]	; 0x2e
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7a3e:	f7f8 fbc3 	bl	1c8 <__aeabi_uidiv>
    7a42:	2397      	movs	r3, #151	; 0x97
    7a44:	005b      	lsls	r3, r3, #1
    7a46:	54e0      	strb	r0, [r4, r3]
	_radio.packet_rx_last = 0;
    7a48:	2336      	movs	r3, #54	; 0x36
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7a4a:	22a4      	movs	r2, #164	; 0xa4
	_radio.packet_rx_last = 0;
    7a4c:	33ff      	adds	r3, #255	; 0xff
    7a4e:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    7a50:	3301      	adds	r3, #1
    7a52:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7a54:	3b02      	subs	r3, #2
    7a56:	5ce3      	ldrb	r3, [r4, r3]
    7a58:	0052      	lsls	r2, r2, #1
    7a5a:	3b01      	subs	r3, #1
    7a5c:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    7a5e:	236a      	movs	r3, #106	; 0x6a
    7a60:	33ff      	adds	r3, #255	; 0xff
    7a62:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    7a64:	3301      	adds	r3, #1
    7a66:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    7a68:	236c      	movs	r3, #108	; 0x6c
    7a6a:	33ff      	adds	r3, #255	; 0xff
    7a6c:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;
    7a6e:	3301      	adds	r3, #1
    7a70:	54e5      	strb	r5, [r4, r3]
	_radio.fc_ack = _radio.fc_req;
    7a72:	3308      	adds	r3, #8
    7a74:	5ce2      	ldrb	r2, [r4, r3]
    7a76:	2376      	movs	r3, #118	; 0x76
	ll_filter_reset(false);
    7a78:	0028      	movs	r0, r5
	_radio.fc_ack = _radio.fc_req;
    7a7a:	33ff      	adds	r3, #255	; 0xff
    7a7c:	54e2      	strb	r2, [r4, r3]
	ll_filter_reset(false);
    7a7e:	f000 fe8f 	bl	87a0 <ll_filter_reset>
	common_init();
    7a82:	f7fd fbe5 	bl	5250 <common_init>
}
    7a86:	bd70      	pop	{r4, r5, r6, pc}
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    7a88:	1de8      	adds	r0, r5, #7
    7a8a:	b2c0      	uxtb	r0, r0
    7a8c:	21ff      	movs	r1, #255	; 0xff
	     conn_handle++) {
    7a8e:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    7a90:	f7fc fc40 	bl	4314 <role_disable>
	     conn_handle++) {
    7a94:	b2ad      	uxth	r5, r5
    7a96:	e7b8      	b.n	7a0a <ll_reset+0x1a>
    7a98:	20000254 	.word	0x20000254

00007a9c <radio_adv_data_get>:
	return &_radio.advertiser.adv_data;
    7a9c:	4801      	ldr	r0, [pc, #4]	; (7aa4 <radio_adv_data_get+0x8>)
}
    7a9e:	3026      	adds	r0, #38	; 0x26
    7aa0:	4770      	bx	lr
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	20000254 	.word	0x20000254

00007aa8 <radio_scan_data_get>:
	return &_radio.advertiser.scan_data;
    7aa8:	4801      	ldr	r0, [pc, #4]	; (7ab0 <radio_scan_data_get+0x8>)
}
    7aaa:	3076      	adds	r0, #118	; 0x76
    7aac:	4770      	bx	lr
    7aae:	46c0      	nop			; (mov r8, r8)
    7ab0:	20000254 	.word	0x20000254

00007ab4 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    7ab4:	4b02      	ldr	r3, [pc, #8]	; (7ac0 <ll_adv_is_enabled+0xc>)
    7ab6:	3305      	adds	r3, #5
    7ab8:	7fd8      	ldrb	r0, [r3, #31]
    7aba:	09c0      	lsrs	r0, r0, #7
}
    7abc:	4770      	bx	lr
    7abe:	46c0      	nop			; (mov r8, r8)
    7ac0:	20000254 	.word	0x20000254

00007ac4 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    7ac4:	4b04      	ldr	r3, [pc, #16]	; (7ad8 <radio_adv_filter_pol_get+0x14>)
    7ac6:	2000      	movs	r0, #0
    7ac8:	1d5a      	adds	r2, r3, #5
    7aca:	7fd2      	ldrb	r2, [r2, #31]
    7acc:	2a7f      	cmp	r2, #127	; 0x7f
    7ace:	d902      	bls.n	7ad6 <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
    7ad0:	3306      	adds	r3, #6
    7ad2:	7fd8      	ldrb	r0, [r3, #31]
    7ad4:	0980      	lsrs	r0, r0, #6
}
    7ad6:	4770      	bx	lr
    7ad8:	20000254 	.word	0x20000254

00007adc <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7adc:	4a09      	ldr	r2, [pc, #36]	; (7b04 <ll_scan_is_enabled+0x28>)
    7ade:	0013      	movs	r3, r2
    7ae0:	33dc      	adds	r3, #220	; 0xdc
    7ae2:	7818      	ldrb	r0, [r3, #0]
    7ae4:	0013      	movs	r3, r2
    7ae6:	33dd      	adds	r3, #221	; 0xdd
    7ae8:	781b      	ldrb	r3, [r3, #0]
    7aea:	07c0      	lsls	r0, r0, #31
    7aec:	071b      	lsls	r3, r3, #28
    7aee:	0fdb      	lsrs	r3, r3, #31
    7af0:	0fc0      	lsrs	r0, r0, #31
    7af2:	4098      	lsls	r0, r3
	       (_radio.scanner.conn ? BIT(2) : 0);
    7af4:	32fc      	adds	r2, #252	; 0xfc
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7af6:	0003      	movs	r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    7af8:	6810      	ldr	r0, [r2, #0]
    7afa:	1e42      	subs	r2, r0, #1
    7afc:	4190      	sbcs	r0, r2
    7afe:	0080      	lsls	r0, r0, #2
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7b00:	4318      	orrs	r0, r3
}
    7b02:	4770      	bx	lr
    7b04:	20000254 	.word	0x20000254

00007b08 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    7b08:	4b05      	ldr	r3, [pc, #20]	; (7b20 <radio_scan_filter_pol_get+0x18>)
    7b0a:	2000      	movs	r0, #0
    7b0c:	001a      	movs	r2, r3
    7b0e:	32dc      	adds	r2, #220	; 0xdc
    7b10:	7812      	ldrb	r2, [r2, #0]
    7b12:	07d2      	lsls	r2, r2, #31
    7b14:	d503      	bpl.n	7b1e <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
    7b16:	33dd      	adds	r3, #221	; 0xdd
    7b18:	7818      	ldrb	r0, [r3, #0]
    7b1a:	0680      	lsls	r0, r0, #26
    7b1c:	0f80      	lsrs	r0, r0, #30
}
    7b1e:	4770      	bx	lr
    7b20:	20000254 	.word	0x20000254

00007b24 <ll_tx_pwr_lvl_get>:
{
    7b24:	b510      	push	{r4, lr}
    7b26:	0014      	movs	r4, r2
	conn = connection_get(handle);
    7b28:	f7fc fbdc 	bl	42e4 <connection_get>
    7b2c:	0003      	movs	r3, r0
		return 1;
    7b2e:	2001      	movs	r0, #1
	if (!conn) {
    7b30:	2b00      	cmp	r3, #0
    7b32:	d001      	beq.n	7b38 <ll_tx_pwr_lvl_get+0x14>
	*tx_pwr_lvl = 0;
    7b34:	2000      	movs	r0, #0
    7b36:	7020      	strb	r0, [r4, #0]
}
    7b38:	bd10      	pop	{r4, pc}
	...

00007b3c <ll_rx_get>:
{
    7b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7b3e:	4d1b      	ldr	r5, [pc, #108]	; (7bac <ll_rx_get+0x70>)
{
    7b40:	0006      	movs	r6, r0
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7b42:	002a      	movs	r2, r5
{
    7b44:	0008      	movs	r0, r1
    7b46:	0029      	movs	r1, r5
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7b48:	32fc      	adds	r2, #252	; 0xfc
    7b4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
    7b4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
    7b4e:	316c      	adds	r1, #108	; 0x6c
{
    7b50:	b085      	sub	sp, #20
    7b52:	31ff      	adds	r1, #255	; 0xff
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7b54:	4293      	cmp	r3, r2
    7b56:	d020      	beq.n	7b9a <ll_rx_get+0x5e>
		_node_rx = _radio.link_rx_head->mem;
    7b58:	685b      	ldr	r3, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7b5a:	781a      	ldrb	r2, [r3, #0]
		_node_rx = _radio.link_rx_head->mem;
    7b5c:	9301      	str	r3, [sp, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7b5e:	f7fc fb75 	bl	424c <tx_cmplt_get>
    7b62:	1e04      	subs	r4, r0, #0
		if (!cmplt) {
    7b64:	d120      	bne.n	7ba8 <ll_rx_get+0x6c>
			first = _radio.packet_release_first;
    7b66:	ab02      	add	r3, sp, #8
    7b68:	1d5f      	adds	r7, r3, #5
    7b6a:	236c      	movs	r3, #108	; 0x6c
    7b6c:	33ff      	adds	r3, #255	; 0xff
    7b6e:	5ceb      	ldrb	r3, [r5, r3]
    7b70:	703b      	strb	r3, [r7, #0]
				cmplt_curr = tx_cmplt_get(&h, &first,
    7b72:	23b6      	movs	r3, #182	; 0xb6
    7b74:	005b      	lsls	r3, r3, #1
    7b76:	5cea      	ldrb	r2, [r5, r3]
    7b78:	ab02      	add	r3, sp, #8
    7b7a:	b2d2      	uxtb	r2, r2
    7b7c:	0039      	movs	r1, r7
    7b7e:	1d98      	adds	r0, r3, #6
    7b80:	f7fc fb64 	bl	424c <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    7b84:	2c00      	cmp	r4, #0
    7b86:	d106      	bne.n	7b96 <ll_rx_get+0x5a>
			} while ((cmplt_prev != 0) ||
    7b88:	2800      	cmp	r0, #0
    7b8a:	d104      	bne.n	7b96 <ll_rx_get+0x5a>
			*node_rx = _node_rx;
    7b8c:	9b01      	ldr	r3, [sp, #4]
}
    7b8e:	0020      	movs	r0, r4
		*node_rx = NULL;
    7b90:	6033      	str	r3, [r6, #0]
}
    7b92:	b005      	add	sp, #20
    7b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    7b96:	0004      	movs	r4, r0
    7b98:	e7eb      	b.n	7b72 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7b9a:	23b6      	movs	r3, #182	; 0xb6
    7b9c:	005b      	lsls	r3, r3, #1
    7b9e:	5cea      	ldrb	r2, [r5, r3]
    7ba0:	b2d2      	uxtb	r2, r2
    7ba2:	f7fc fb53 	bl	424c <tx_cmplt_get>
    7ba6:	0004      	movs	r4, r0
		*node_rx = NULL;
    7ba8:	2300      	movs	r3, #0
    7baa:	e7f0      	b.n	7b8e <ll_rx_get+0x52>
    7bac:	20000254 	.word	0x20000254

00007bb0 <ll_rx_mem_release>:
{
    7bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bb2:	2680      	movs	r6, #128	; 0x80
    7bb4:	0005      	movs	r5, r0
	_node_rx = *node_rx;
    7bb6:	6800      	ldr	r0, [r0, #0]
	while (_node_rx) {
    7bb8:	2800      	cmp	r0, #0
    7bba:	d103      	bne.n	7bc4 <ll_rx_mem_release+0x14>
	*node_rx = _node_rx;
    7bbc:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    7bbe:	f7fd fb01 	bl	51c4 <packet_rx_allocate.constprop.49>
}
    7bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (_node_rx_free->hdr.type) {
    7bc4:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    7bc6:	6807      	ldr	r7, [r0, #0]
    7bc8:	2b0a      	cmp	r3, #10
    7bca:	d808      	bhi.n	7bde <ll_rx_mem_release+0x2e>
    7bcc:	2201      	movs	r2, #1
    7bce:	409a      	lsls	r2, r3
    7bd0:	0013      	movs	r3, r2
    7bd2:	4a0d      	ldr	r2, [pc, #52]	; (7c08 <ll_rx_mem_release+0x58>)
    7bd4:	4c0d      	ldr	r4, [pc, #52]	; (7c0c <ll_rx_mem_release+0x5c>)
    7bd6:	4213      	tst	r3, r2
    7bd8:	d104      	bne.n	7be4 <ll_rx_mem_release+0x34>
    7bda:	4233      	tst	r3, r6
    7bdc:	d109      	bne.n	7bf2 <ll_rx_mem_release+0x42>
			LL_ASSERT(0);
    7bde:	b662      	cpsie	i
    7be0:	2004      	movs	r0, #4
    7be2:	df02      	svc	2
			mem_release(_node_rx_free,
    7be4:	0021      	movs	r1, r4
    7be6:	3125      	adds	r1, #37	; 0x25
			mem_release(conn, &_radio.conn_free);
    7be8:	31ff      	adds	r1, #255	; 0xff
    7bea:	f7fa fd92 	bl	2712 <mem_release>
{
    7bee:	0038      	movs	r0, r7
    7bf0:	e7e2      	b.n	7bb8 <ll_rx_mem_release+0x8>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7bf2:	0023      	movs	r3, r4
    7bf4:	2182      	movs	r1, #130	; 0x82
    7bf6:	33fc      	adds	r3, #252	; 0xfc
    7bf8:	88c2      	ldrh	r2, [r0, #6]
    7bfa:	0049      	lsls	r1, r1, #1
    7bfc:	6898      	ldr	r0, [r3, #8]
    7bfe:	f7fa fd9e 	bl	273e <mem_get>
			mem_release(conn, &_radio.conn_free);
    7c02:	0021      	movs	r1, r4
    7c04:	3109      	adds	r1, #9
    7c06:	e7ef      	b.n	7be8 <ll_rx_mem_release+0x38>
    7c08:	0000077e 	.word	0x0000077e
    7c0c:	20000254 	.word	0x20000254

00007c10 <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    7c10:	b570      	push	{r4, r5, r6, lr}
    7c12:	4b18      	ldr	r3, [pc, #96]	; (7c74 <do_radio_rx_fc_set+0x64>)
    7c14:	0004      	movs	r4, r0
	if (req == ack) {
    7c16:	4291      	cmp	r1, r2
    7c18:	d11c      	bne.n	7c54 <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7c1a:	0018      	movs	r0, r3
    7c1c:	30fc      	adds	r0, #252	; 0xfc
    7c1e:	6c85      	ldr	r5, [r0, #72]	; 0x48
    7c20:	6c46      	ldr	r6, [r0, #68]	; 0x44
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    7c22:	2001      	movs	r0, #1
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7c24:	42ae      	cmp	r6, r5
    7c26:	d114      	bne.n	7c52 <do_radio_rx_fc_set+0x42>
			if (ack1 == 0) {
    7c28:	1e08      	subs	r0, r1, #0
    7c2a:	d100      	bne.n	7c2e <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
    7c2c:	2003      	movs	r0, #3
			_radio.fc_handle[--ack1] = handle;
    7c2e:	3801      	subs	r0, #1
    7c30:	b2c0      	uxtb	r0, r0
    7c32:	0005      	movs	r5, r0
    7c34:	35b4      	adds	r5, #180	; 0xb4
    7c36:	006d      	lsls	r5, r5, #1
    7c38:	195d      	adds	r5, r3, r5
    7c3a:	80ec      	strh	r4, [r5, #6]
			_radio.fc_ack = ack1;
    7c3c:	2476      	movs	r4, #118	; 0x76
    7c3e:	34ff      	adds	r4, #255	; 0xff
    7c40:	5518      	strb	r0, [r3, r4]
			if (req != _radio.fc_req) {
    7c42:	20ba      	movs	r0, #186	; 0xba
    7c44:	0040      	lsls	r0, r0, #1
    7c46:	5c1d      	ldrb	r5, [r3, r0]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    7c48:	2000      	movs	r0, #0
			if (req != _radio.fc_req) {
    7c4a:	42a9      	cmp	r1, r5
    7c4c:	d001      	beq.n	7c52 <do_radio_rx_fc_set+0x42>
				_radio.fc_ack = ack;
    7c4e:	551a      	strb	r2, [r3, r4]
				return 1;
    7c50:	3001      	adds	r0, #1
}
    7c52:	bd70      	pop	{r4, r5, r6, pc}
	} else if (((req == 0) &&
    7c54:	2900      	cmp	r1, #0
    7c56:	d107      	bne.n	7c68 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    7c58:	22b9      	movs	r2, #185	; 0xb9
    7c5a:	0052      	lsls	r2, r2, #1
	} else if (((req == 0) &&
    7c5c:	5a98      	ldrh	r0, [r3, r2]
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    7c5e:	1b00      	subs	r0, r0, r4
    7c60:	1e43      	subs	r3, r0, #1
    7c62:	4198      	sbcs	r0, r3
				return 1;
    7c64:	b2c0      	uxtb	r0, r0
    7c66:	e7f4      	b.n	7c52 <do_radio_rx_fc_set+0x42>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    7c68:	31b3      	adds	r1, #179	; 0xb3
    7c6a:	0049      	lsls	r1, r1, #1
    7c6c:	1859      	adds	r1, r3, r1
    7c6e:	88c8      	ldrh	r0, [r1, #6]
    7c70:	e7f5      	b.n	7c5e <do_radio_rx_fc_set+0x4e>
    7c72:	46c0      	nop			; (mov r8, r8)
    7c74:	20000254 	.word	0x20000254

00007c78 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    7c78:	22bb      	movs	r2, #187	; 0xbb
{
    7c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    7c7c:	4b15      	ldr	r3, [pc, #84]	; (7cd4 <radio_rx_fc_set+0x5c>)
    7c7e:	0052      	lsls	r2, r2, #1
    7c80:	5c9a      	ldrb	r2, [r3, r2]
{
    7c82:	0005      	movs	r5, r0
    7c84:	0008      	movs	r0, r1
	if (_radio.fc_ena) {
    7c86:	2a00      	cmp	r2, #0
    7c88:	d101      	bne.n	7c8e <radio_rx_fc_set+0x16>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    7c8a:	2000      	movs	r0, #0
}
    7c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		u8_t req = _radio.fc_req;
    7c8e:	22ba      	movs	r2, #186	; 0xba
		u8_t ack = _radio.fc_ack;
    7c90:	2476      	movs	r4, #118	; 0x76
		u8_t req = _radio.fc_req;
    7c92:	0052      	lsls	r2, r2, #1
    7c94:	5c99      	ldrb	r1, [r3, r2]
		u8_t ack = _radio.fc_ack;
    7c96:	34ff      	adds	r4, #255	; 0xff
		u8_t req = _radio.fc_req;
    7c98:	b2c9      	uxtb	r1, r1
		u8_t ack = _radio.fc_ack;
    7c9a:	5d1a      	ldrb	r2, [r3, r4]
		if (fc) {
    7c9c:	2800      	cmp	r0, #0
    7c9e:	d006      	beq.n	7cae <radio_rx_fc_set+0x36>
			if (handle != 0xffff) {
    7ca0:	4b0d      	ldr	r3, [pc, #52]	; (7cd8 <radio_rx_fc_set+0x60>)
    7ca2:	429d      	cmp	r5, r3
    7ca4:	d0f1      	beq.n	7c8a <radio_rx_fc_set+0x12>
				return do_radio_rx_fc_set(handle, req, ack);
    7ca6:	0028      	movs	r0, r5
    7ca8:	f7ff ffb2 	bl	7c10 <do_radio_rx_fc_set>
    7cac:	e7ee      	b.n	7c8c <radio_rx_fc_set+0x14>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7cae:	001d      	movs	r5, r3
    7cb0:	35fc      	adds	r5, #252	; 0xfc
    7cb2:	6c6f      	ldr	r7, [r5, #68]	; 0x44
    7cb4:	6cae      	ldr	r6, [r5, #72]	; 0x48
    7cb6:	42b7      	cmp	r7, r6
    7cb8:	d1e7      	bne.n	7c8a <radio_rx_fc_set+0x12>
    7cba:	4291      	cmp	r1, r2
    7cbc:	d0e5      	beq.n	7c8a <radio_rx_fc_set+0x12>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7cbe:	6cad      	ldr	r5, [r5, #72]	; 0x48
			_radio.fc_ack = req;
    7cc0:	5519      	strb	r1, [r3, r4]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7cc2:	42af      	cmp	r7, r5
    7cc4:	d0e1      	beq.n	7c8a <radio_rx_fc_set+0x12>
			    (req == _radio.fc_req)) {
    7cc6:	25ba      	movs	r5, #186	; 0xba
    7cc8:	006d      	lsls	r5, r5, #1
    7cca:	5d5d      	ldrb	r5, [r3, r5]
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7ccc:	42a9      	cmp	r1, r5
    7cce:	d1dc      	bne.n	7c8a <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
    7cd0:	551a      	strb	r2, [r3, r4]
    7cd2:	e7db      	b.n	7c8c <radio_rx_fc_set+0x14>
    7cd4:	20000254 	.word	0x20000254
    7cd8:	0000ffff 	.word	0x0000ffff

00007cdc <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    7cdc:	4770      	bx	lr
	...

00007ce0 <radio_adv_enable>:
{
    7ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ce2:	b093      	sub	sp, #76	; 0x4c
    7ce4:	930e      	str	r3, [sp, #56]	; 0x38
    7ce6:	232f      	movs	r3, #47	; 0x2f
    7ce8:	910c      	str	r1, [sp, #48]	; 0x30
    7cea:	a904      	add	r1, sp, #16
    7cec:	185b      	adds	r3, r3, r1
    7cee:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7cf0:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
    7cf2:	4dac      	ldr	r5, [pc, #688]	; (7fa4 <radio_adv_enable+0x2c4>)
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7cf4:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
    7cf6:	1d6b      	adds	r3, r5, #5
    7cf8:	7fdb      	ldrb	r3, [r3, #31]
{
    7cfa:	900d      	str	r0, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    7cfc:	2b7f      	cmp	r3, #127	; 0x7f
    7cfe:	d901      	bls.n	7d04 <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    7d00:	260c      	movs	r6, #12
    7d02:	e023      	b.n	7d4c <radio_adv_enable+0x6c>
					[_radio.advertiser.adv_data.last][0];
    7d04:	002b      	movs	r3, r5
    7d06:	3375      	adds	r3, #117	; 0x75
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7d08:	781a      	ldrb	r2, [r3, #0]
    7d0a:	2327      	movs	r3, #39	; 0x27
    7d0c:	4353      	muls	r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7d0e:	220f      	movs	r2, #15
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7d10:	3326      	adds	r3, #38	; 0x26
    7d12:	18eb      	adds	r3, r5, r3
    7d14:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7d16:	781b      	ldrb	r3, [r3, #0]
		conn = NULL;
    7d18:	2700      	movs	r7, #0
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7d1a:	4013      	ands	r3, r2
    7d1c:	2b01      	cmp	r3, #1
    7d1e:	d864      	bhi.n	7dea <radio_adv_enable+0x10a>
		if (_radio.advertiser.conn) {
    7d20:	4ba1      	ldr	r3, [pc, #644]	; (7fa8 <radio_adv_enable+0x2c8>)
    7d22:	681c      	ldr	r4, [r3, #0]
    7d24:	42bc      	cmp	r4, r7
    7d26:	d1eb      	bne.n	7d00 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    7d28:	48a0      	ldr	r0, [pc, #640]	; (7fac <radio_adv_enable+0x2cc>)
    7d2a:	f7fa fcd9 	bl	26e0 <mem_acquire>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    7d2e:	2607      	movs	r6, #7
		link = mem_acquire(&_radio.link_rx_free);
    7d30:	900a      	str	r0, [sp, #40]	; 0x28
		if (!link) {
    7d32:	42b8      	cmp	r0, r7
    7d34:	d00a      	beq.n	7d4c <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    7d36:	0028      	movs	r0, r5
    7d38:	3009      	adds	r0, #9
    7d3a:	30ff      	adds	r0, #255	; 0xff
    7d3c:	f7fa fcd0 	bl	26e0 <mem_acquire>
    7d40:	1e07      	subs	r7, r0, #0
		if (!conn) {
    7d42:	d106      	bne.n	7d52 <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
    7d44:	4999      	ldr	r1, [pc, #612]	; (7fac <radio_adv_enable+0x2cc>)
    7d46:	980a      	ldr	r0, [sp, #40]	; 0x28
    7d48:	f7fa fce3 	bl	2712 <mem_release>
}
    7d4c:	0030      	movs	r0, r6
    7d4e:	b013      	add	sp, #76	; 0x4c
    7d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->handle = 0xFFFF;
    7d52:	2301      	movs	r3, #1
    7d54:	425b      	negs	r3, r3
    7d56:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    7d58:	0003      	movs	r3, r0
    7d5a:	4a95      	ldr	r2, [pc, #596]	; (7fb0 <radio_adv_enable+0x2d0>)
    7d5c:	338c      	adds	r3, #140	; 0x8c
    7d5e:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
    7d60:	2140      	movs	r1, #64	; 0x40
		conn->role = 1;
    7d62:	2380      	movs	r3, #128	; 0x80
		conn->data_chan_sel = 0;
    7d64:	7f42      	ldrb	r2, [r0, #29]
		conn->role = 1;
    7d66:	425b      	negs	r3, r3
    7d68:	438a      	bics	r2, r1
    7d6a:	4313      	orrs	r3, r2
    7d6c:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    7d6e:	2306      	movs	r3, #6
		conn->common.fex_valid = 0;
    7d70:	0002      	movs	r2, r0
		conn->data_chan_use = 0;
    7d72:	77c4      	strb	r4, [r0, #31]
		conn->event_counter = 0;
    7d74:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    7d76:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    7d78:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->connect_expire = 6;
    7d7a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    7d7c:	2020      	movs	r0, #32
		conn->slave.latency_enabled = 0;
    7d7e:	2501      	movs	r5, #1
		conn->slave.latency_cancel = 0;
    7d80:	2602      	movs	r6, #2
		conn->common.fex_valid = 0;
    7d82:	3238      	adds	r2, #56	; 0x38
    7d84:	7813      	ldrb	r3, [r2, #0]
		conn->slave.latency_enabled = 0;
    7d86:	4383      	bics	r3, r0
		conn->slave.latency_cancel = 0;
    7d88:	43ab      	bics	r3, r5
    7d8a:	43b3      	bics	r3, r6
    7d8c:	7013      	strb	r3, [r2, #0]
		conn->llcp_req = 0;
    7d8e:	003b      	movs	r3, r7
    7d90:	335c      	adds	r3, #92	; 0x5c
		conn->slave.window_widening_prepare_us = 0;
    7d92:	647c      	str	r4, [r7, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    7d94:	64bc      	str	r4, [r7, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    7d96:	65bc      	str	r4, [r7, #88]	; 0x58
		conn->supervision_expire = 0;
    7d98:	863c      	strh	r4, [r7, #48]	; 0x30
		conn->procedure_expire = 0;
    7d9a:	86bc      	strh	r4, [r7, #52]	; 0x34
		conn->llcp_version.tx = 0;
    7d9c:	3258      	adds	r2, #88	; 0x58
		conn->llcp_req = 0;
    7d9e:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    7da0:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    7da2:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    7da4:	43ab      	bics	r3, r5
    7da6:	43b3      	bics	r3, r6
    7da8:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    7daa:	003b      	movs	r3, r7
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		conn->llcp_terminate.req = 0;
    7dae:	3398      	adds	r3, #152	; 0x98
    7db0:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    7db2:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
    7db4:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7db6:	3304      	adds	r3, #4
    7db8:	601a      	str	r2, [r3, #0]
		conn->sn = 0;
    7dba:	003a      	movs	r2, r7
    7dbc:	32a8      	adds	r2, #168	; 0xa8
    7dbe:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    7dc0:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
    7dc2:	0035      	movs	r5, r6
    7dc4:	43b3      	bics	r3, r6
		conn->enc_tx = 0;
    7dc6:	35e1      	adds	r5, #225	; 0xe1
    7dc8:	402b      	ands	r3, r5
		conn->refresh = 0;
    7dca:	4383      	bics	r3, r0
		conn->empty = 0;
    7dcc:	438b      	bics	r3, r1
    7dce:	313f      	adds	r1, #63	; 0x3f
    7dd0:	400b      	ands	r3, r1
    7dd2:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    7dd4:	003b      	movs	r3, r7
    7dd6:	33ec      	adds	r3, #236	; 0xec
    7dd8:	601c      	str	r4, [r3, #0]
		conn->pkt_tx_ctrl = NULL;
    7dda:	605c      	str	r4, [r3, #4]
		conn->pkt_tx_ctrl_last = NULL;
    7ddc:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_data = NULL;
    7dde:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_last = NULL;
    7de0:	611c      	str	r4, [r3, #16]
		conn->packet_tx_head_len = 0;
    7de2:	751c      	strb	r4, [r3, #20]
		conn->packet_tx_head_offset = 0;
    7de4:	755c      	strb	r4, [r3, #21]
		_radio.advertiser.conn = conn;
    7de6:	4b70      	ldr	r3, [pc, #448]	; (7fa8 <radio_adv_enable+0x2c8>)
    7de8:	601f      	str	r7, [r3, #0]
	_radio.advertiser.chan_map = chan_map;
    7dea:	202f      	movs	r0, #47	; 0x2f
	_radio.advertiser.phy_p = phy_p;
    7dec:	2107      	movs	r1, #7
    7dee:	4d6d      	ldr	r5, [pc, #436]	; (7fa4 <radio_adv_enable+0x2c4>)
    7df0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7df2:	1dac      	adds	r4, r5, #6
    7df4:	7fe3      	ldrb	r3, [r4, #31]
	_radio.advertiser.chan_map = chan_map;
    7df6:	aa04      	add	r2, sp, #16
    7df8:	1880      	adds	r0, r0, r2
    7dfa:	7802      	ldrb	r2, [r0, #0]
	_radio.advertiser.phy_p = phy_p;
    7dfc:	400e      	ands	r6, r1
    7dfe:	438b      	bics	r3, r1
	_radio.advertiser.chan_map = chan_map;
    7e00:	4333      	orrs	r3, r6
    7e02:	4011      	ands	r1, r2
    7e04:	001a      	movs	r2, r3
    7e06:	2338      	movs	r3, #56	; 0x38
    7e08:	439a      	bics	r2, r3
	_radio.advertiser.filter_policy = filter_policy;
    7e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	_radio.advertiser.chan_map = chan_map;
    7e0c:	00c9      	lsls	r1, r1, #3
	_radio.advertiser.filter_policy = filter_policy;
    7e0e:	019e      	lsls	r6, r3, #6
    7e10:	233f      	movs	r3, #63	; 0x3f
    7e12:	430a      	orrs	r2, r1
    7e14:	401a      	ands	r2, r3
		_radio.ticks_active_to_start;
    7e16:	002b      	movs	r3, r5
	_radio.advertiser.filter_policy = filter_policy;
    7e18:	4332      	orrs	r2, r6
    7e1a:	77e2      	strb	r2, [r4, #31]
		_radio.ticks_active_to_start;
    7e1c:	33fc      	adds	r3, #252	; 0xfc
	_radio.advertiser.hdr.ticks_active_to_start =
    7e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7e20:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_active_to_start =
    7e22:	61ab      	str	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    7e24:	2327      	movs	r3, #39	; 0x27
    7e26:	616b      	str	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
    7e28:	2300      	movs	r3, #0
    7e2a:	61eb      	str	r3, [r5, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7e2c:	f7fa fdf0 	bl	2a10 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e32:	781e      	ldrb	r6, [r3, #0]
    7e34:	230f      	movs	r3, #15
    7e36:	401e      	ands	r6, r3
    7e38:	2e01      	cmp	r6, #1
    7e3a:	d16e      	bne.n	7f1a <radio_adv_enable+0x23a>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    7e3c:	23a7      	movs	r3, #167	; 0xa7
    7e3e:	009b      	lsls	r3, r3, #2
    7e40:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    7e42:	3039      	adds	r0, #57	; 0x39
    7e44:	30ff      	adds	r0, #255	; 0xff
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7e46:	4a5b      	ldr	r2, [pc, #364]	; (7fb4 <radio_adv_enable+0x2d4>)
    7e48:	2300      	movs	r3, #0
    7e4a:	2100      	movs	r1, #0
    7e4c:	f7f8 fa8c 	bl	368 <__aeabi_lmul>
    7e50:	4a59      	ldr	r2, [pc, #356]	; (7fb8 <radio_adv_enable+0x2d8>)
    7e52:	2307      	movs	r3, #7
    7e54:	f7f8 fa68 	bl	328 <__aeabi_uldivmod>
	ticks_slot_offset =
    7e58:	69aa      	ldr	r2, [r5, #24]
    7e5a:	696b      	ldr	r3, [r5, #20]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7e5c:	6228      	str	r0, [r5, #32]
	ticks_slot_offset =
    7e5e:	920a      	str	r2, [sp, #40]	; 0x28
    7e60:	429a      	cmp	r2, r3
    7e62:	d200      	bcs.n	7e66 <radio_adv_enable+0x186>
    7e64:	930a      	str	r3, [sp, #40]	; 0x28
    7e66:	2400      	movs	r4, #0
	_radio.advertiser.is_hdcd = !interval &&
    7e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7e6a:	42a3      	cmp	r3, r4
    7e6c:	d103      	bne.n	7e76 <radio_adv_enable+0x196>
    7e6e:	3e01      	subs	r6, #1
    7e70:	4273      	negs	r3, r6
    7e72:	4173      	adcs	r3, r6
    7e74:	b2dc      	uxtb	r4, r3
    7e76:	2240      	movs	r2, #64	; 0x40
    7e78:	1d6b      	adds	r3, r5, #5
    7e7a:	01a6      	lsls	r6, r4, #6
    7e7c:	7fdc      	ldrb	r4, [r3, #31]
    7e7e:	4394      	bics	r4, r2
    7e80:	4334      	orrs	r4, r6
    7e82:	77dc      	strb	r4, [r3, #31]
    7e84:	ae11      	add	r6, sp, #68	; 0x44
	if (_radio.advertiser.is_hdcd) {
    7e86:	4014      	ands	r4, r2
    7e88:	d055      	beq.n	7f36 <radio_adv_enable+0x256>
		u32_t ticks_now = ticker_ticks_now_get();
    7e8a:	f7fb fb89 	bl	35a0 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7e8e:	6a29      	ldr	r1, [r5, #32]
    7e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e92:	468c      	mov	ip, r1
    7e94:	4463      	add	r3, ip
    7e96:	001a      	movs	r2, r3
		u32_t ticks_now = ticker_ticks_now_get();
    7e98:	0004      	movs	r4, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7e9a:	2000      	movs	r0, #0
    7e9c:	4b47      	ldr	r3, [pc, #284]	; (7fbc <radio_adv_enable+0x2dc>)
    7e9e:	9204      	str	r2, [sp, #16]
    7ea0:	9307      	str	r3, [sp, #28]
    7ea2:	4b47      	ldr	r3, [pc, #284]	; (7fc0 <radio_adv_enable+0x2e0>)
    7ea4:	9201      	str	r2, [sp, #4]
    7ea6:	9305      	str	r3, [sp, #20]
    7ea8:	9608      	str	r6, [sp, #32]
    7eaa:	9006      	str	r0, [sp, #24]
    7eac:	9003      	str	r0, [sp, #12]
    7eae:	9002      	str	r0, [sp, #8]
    7eb0:	9000      	str	r0, [sp, #0]
    7eb2:	0023      	movs	r3, r4
    7eb4:	2205      	movs	r2, #5
    7eb6:	2103      	movs	r1, #3
    7eb8:	f7fb fa3c 	bl	3334 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    7ebc:	2802      	cmp	r0, #2
    7ebe:	d036      	beq.n	7f2e <radio_adv_enable+0x24e>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    7ec0:	9811      	ldr	r0, [sp, #68]	; 0x44
    7ec2:	2800      	cmp	r0, #0
    7ec4:	d117      	bne.n	7ef6 <radio_adv_enable+0x216>
		ret_cb = TICKER_STATUS_BUSY;
    7ec6:	2302      	movs	r3, #2
		ret =
    7ec8:	2203      	movs	r2, #3
		ret_cb = TICKER_STATUS_BUSY;
    7eca:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    7ecc:	4b3b      	ldr	r3, [pc, #236]	; (7fbc <radio_adv_enable+0x2dc>)
    7ece:	0011      	movs	r1, r2
    7ed0:	9307      	str	r3, [sp, #28]
    7ed2:	4b3c      	ldr	r3, [pc, #240]	; (7fc4 <radio_adv_enable+0x2e4>)
    7ed4:	9608      	str	r6, [sp, #32]
    7ed6:	9305      	str	r3, [sp, #20]
    7ed8:	4b3b      	ldr	r3, [pc, #236]	; (7fc8 <radio_adv_enable+0x2e8>)
    7eda:	9006      	str	r0, [sp, #24]
    7edc:	9300      	str	r3, [sp, #0]
    7ede:	0023      	movs	r3, r4
    7ee0:	9004      	str	r0, [sp, #16]
    7ee2:	9003      	str	r0, [sp, #12]
    7ee4:	9002      	str	r0, [sp, #8]
    7ee6:	9001      	str	r0, [sp, #4]
		ret =
    7ee8:	f7fb fa24 	bl	3334 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    7eec:	2802      	cmp	r0, #2
    7eee:	d045      	beq.n	7f7c <radio_adv_enable+0x29c>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    7ef0:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7ef2:	2e00      	cmp	r6, #0
    7ef4:	d046      	beq.n	7f84 <radio_adv_enable+0x2a4>
	if (conn) {
    7ef6:	2f00      	cmp	r7, #0
    7ef8:	d100      	bne.n	7efc <radio_adv_enable+0x21c>
    7efa:	e701      	b.n	7d00 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    7efc:	0029      	movs	r1, r5
    7efe:	003b      	movs	r3, r7
    7f00:	313d      	adds	r1, #61	; 0x3d
    7f02:	339c      	adds	r3, #156	; 0x9c
    7f04:	6818      	ldr	r0, [r3, #0]
    7f06:	31ff      	adds	r1, #255	; 0xff
    7f08:	f7fa fc03 	bl	2712 <mem_release>
		mem_release(conn, &_radio.conn_free);
    7f0c:	0029      	movs	r1, r5
    7f0e:	3109      	adds	r1, #9
    7f10:	31ff      	adds	r1, #255	; 0xff
    7f12:	0038      	movs	r0, r7
    7f14:	f7fa fbfd 	bl	2712 <mem_release>
    7f18:	e6f2      	b.n	7d00 <radio_adv_enable+0x20>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    7f1a:	2e02      	cmp	r6, #2
    7f1c:	d103      	bne.n	7f26 <radio_adv_enable+0x246>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    7f1e:	23a9      	movs	r3, #169	; 0xa9
    7f20:	009b      	lsls	r3, r3, #2
			   152 + 376) * chan_cnt;
    7f22:	4358      	muls	r0, r3
    7f24:	e78f      	b.n	7e46 <radio_adv_enable+0x166>
    7f26:	4b29      	ldr	r3, [pc, #164]	; (7fcc <radio_adv_enable+0x2ec>)
    7f28:	e7fb      	b.n	7f22 <radio_adv_enable+0x242>
				cpu_sleep();
    7f2a:	f7fc f8f5 	bl	4118 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    7f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7f30:	2b02      	cmp	r3, #2
    7f32:	d0fa      	beq.n	7f2a <radio_adv_enable+0x24a>
    7f34:	e7c4      	b.n	7ec0 <radio_adv_enable+0x1e0>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f36:	f7fb fb33 	bl	35a0 <ticker_ticks_now_get>
		ret =
    7f3a:	4b20      	ldr	r3, [pc, #128]	; (7fbc <radio_adv_enable+0x2dc>)
    7f3c:	9608      	str	r6, [sp, #32]
    7f3e:	9307      	str	r3, [sp, #28]
    7f40:	4b1f      	ldr	r3, [pc, #124]	; (7fc0 <radio_adv_enable+0x2e0>)
    7f42:	9406      	str	r4, [sp, #24]
    7f44:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f46:	6a2a      	ldr	r2, [r5, #32]
    7f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f4a:	4694      	mov	ip, r2
    7f4c:	4463      	add	r3, ip
    7f4e:	900b      	str	r0, [sp, #44]	; 0x2c
		ret =
    7f50:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7f52:	4a1f      	ldr	r2, [pc, #124]	; (7fd0 <radio_adv_enable+0x2f0>)
    7f54:	2391      	movs	r3, #145	; 0x91
    7f56:	980c      	ldr	r0, [sp, #48]	; 0x30
    7f58:	0021      	movs	r1, r4
		ret =
    7f5a:	9403      	str	r4, [sp, #12]
    7f5c:	9402      	str	r4, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7f5e:	f7f8 fa03 	bl	368 <__aeabi_lmul>
    7f62:	4a15      	ldr	r2, [pc, #84]	; (7fb8 <radio_adv_enable+0x2d8>)
    7f64:	2307      	movs	r3, #7
    7f66:	f7f8 f9df 	bl	328 <__aeabi_uldivmod>
		ret =
    7f6a:	9400      	str	r4, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7f6c:	9001      	str	r0, [sp, #4]
		ret =
    7f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f70:	2205      	movs	r2, #5
    7f72:	2103      	movs	r1, #3
    7f74:	0020      	movs	r0, r4
    7f76:	e7b7      	b.n	7ee8 <radio_adv_enable+0x208>
			cpu_sleep();
    7f78:	f7fc f8ce 	bl	4118 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    7f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7f7e:	2b02      	cmp	r3, #2
    7f80:	d0fa      	beq.n	7f78 <radio_adv_enable+0x298>
    7f82:	e7b5      	b.n	7ef0 <radio_adv_enable+0x210>
		_radio.advertiser.is_enabled = 1;
    7f84:	2380      	movs	r3, #128	; 0x80
		if (!_radio.scanner.is_enabled) {
    7f86:	2001      	movs	r0, #1
		_radio.advertiser.is_enabled = 1;
    7f88:	1d6a      	adds	r2, r5, #5
    7f8a:	7fd1      	ldrb	r1, [r2, #31]
    7f8c:	425b      	negs	r3, r3
    7f8e:	430b      	orrs	r3, r1
		if (!_radio.scanner.is_enabled) {
    7f90:	35dc      	adds	r5, #220	; 0xdc
		_radio.advertiser.is_enabled = 1;
    7f92:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    7f94:	782b      	ldrb	r3, [r5, #0]
    7f96:	4203      	tst	r3, r0
    7f98:	d000      	beq.n	7f9c <radio_adv_enable+0x2bc>
    7f9a:	e6d7      	b.n	7d4c <radio_adv_enable+0x6c>
			ll_adv_scan_state_cb(BIT(0));
    7f9c:	f7ff fe9e 	bl	7cdc <ll_adv_scan_state_cb>
    7fa0:	e6d4      	b.n	7d4c <radio_adv_enable+0x6c>
    7fa2:	46c0      	nop			; (mov r8, r8)
    7fa4:	20000254 	.word	0x20000254
    7fa8:	2000031c 	.word	0x2000031c
    7fac:	20000390 	.word	0x20000390
    7fb0:	0001400c 	.word	0x0001400c
    7fb4:	3b9aca00 	.word	0x3b9aca00
    7fb8:	1afd498d 	.word	0x1afd498d
    7fbc:	00004149 	.word	0x00004149
    7fc0:	00005161 	.word	0x00005161
    7fc4:	00005199 	.word	0x00005199
    7fc8:	0000a3fe 	.word	0x0000a3fe
    7fcc:	000005fc 	.word	0x000005fc
    7fd0:	84e72a00 	.word	0x84e72a00

00007fd4 <radio_adv_disable>:
{
    7fd4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    7fd6:	2103      	movs	r1, #3
    7fd8:	2005      	movs	r0, #5
    7fda:	f7fc f99b 	bl	4314 <role_disable>
    7fde:	1e05      	subs	r5, r0, #0
	if (!status) {
    7fe0:	d123      	bne.n	802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
		_radio.advertiser.is_enabled = 0;
    7fe2:	217f      	movs	r1, #127	; 0x7f
    7fe4:	4c12      	ldr	r4, [pc, #72]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fe6:	1d62      	adds	r2, r4, #5
    7fe8:	7fd3      	ldrb	r3, [r2, #31]
    7fea:	400b      	ands	r3, r1
    7fec:	77d3      	strb	r3, [r2, #31]
		if (!_radio.scanner.is_enabled) {
    7fee:	0023      	movs	r3, r4
    7ff0:	33dc      	adds	r3, #220	; 0xdc
    7ff2:	781b      	ldrb	r3, [r3, #0]
    7ff4:	07db      	lsls	r3, r3, #31
    7ff6:	d401      	bmi.n	7ffc <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    7ff8:	f7ff fe70 	bl	7cdc <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    7ffc:	0023      	movs	r3, r4
    7ffe:	33c8      	adds	r3, #200	; 0xc8
    8000:	681e      	ldr	r6, [r3, #0]
		if (conn) {
    8002:	2e00      	cmp	r6, #0
    8004:	d00f      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
			_radio.advertiser.conn = NULL;
    8006:	2200      	movs	r2, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    8008:	0021      	movs	r1, r4
			_radio.advertiser.conn = NULL;
    800a:	601a      	str	r2, [r3, #0]
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    800c:	0033      	movs	r3, r6
    800e:	313d      	adds	r1, #61	; 0x3d
    8010:	339c      	adds	r3, #156	; 0x9c
    8012:	31ff      	adds	r1, #255	; 0xff
    8014:	6818      	ldr	r0, [r3, #0]
    8016:	f7fa fb7c 	bl	2712 <mem_release>
			mem_release(conn, &_radio.conn_free);
    801a:	0021      	movs	r1, r4
    801c:	3109      	adds	r1, #9
    801e:	31ff      	adds	r1, #255	; 0xff
    8020:	0030      	movs	r0, r6
    8022:	f7fa fb76 	bl	2712 <mem_release>
}
    8026:	0028      	movs	r0, r5
    8028:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    802a:	250c      	movs	r5, #12
    802c:	e7fb      	b.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    802e:	46c0      	nop			; (mov r8, r8)
    8030:	20000254 	.word	0x20000254

00008034 <ll_rx_dequeue>:
	struct radio_pdu_node_rx *node_rx = NULL;
    8034:	2300      	movs	r3, #0
{
    8036:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8038:	4c35      	ldr	r4, [pc, #212]	; (8110 <ll_rx_dequeue+0xdc>)
	struct radio_pdu_node_rx *node_rx = NULL;
    803a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    803c:	0021      	movs	r1, r4
    803e:	0023      	movs	r3, r4
    8040:	3141      	adds	r1, #65	; 0x41
    8042:	33fc      	adds	r3, #252	; 0xfc
    8044:	6c98      	ldr	r0, [r3, #72]	; 0x48
    8046:	31ff      	adds	r1, #255	; 0xff
    8048:	aa01      	add	r2, sp, #4
    804a:	f7fa fba5 	bl	2798 <memq_dequeue>
	LL_ASSERT(link);
    804e:	2800      	cmp	r0, #0
    8050:	d102      	bne.n	8058 <ll_rx_dequeue+0x24>
			LL_ASSERT(_radio.scanner.is_enabled);
    8052:	b662      	cpsie	i
    8054:	2004      	movs	r0, #4
    8056:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    8058:	0021      	movs	r1, r4
    805a:	313d      	adds	r1, #61	; 0x3d
    805c:	31ff      	adds	r1, #255	; 0xff
    805e:	f7fa fb58 	bl	2712 <mem_release>
	switch (node_rx->hdr.type) {
    8062:	9a01      	ldr	r2, [sp, #4]
    8064:	7911      	ldrb	r1, [r2, #4]
    8066:	290a      	cmp	r1, #10
    8068:	d8f3      	bhi.n	8052 <ll_rx_dequeue+0x1e>
    806a:	2301      	movs	r3, #1
    806c:	408b      	lsls	r3, r1
    806e:	4829      	ldr	r0, [pc, #164]	; (8114 <ll_rx_dequeue+0xe0>)
    8070:	4203      	tst	r3, r0
    8072:	d114      	bne.n	809e <ll_rx_dequeue+0x6a>
    8074:	061b      	lsls	r3, r3, #24
    8076:	d5ec      	bpl.n	8052 <ll_rx_dequeue+0x1e>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    8078:	2906      	cmp	r1, #6
    807a:	d137      	bne.n	80ec <ll_rx_dequeue+0xb8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    807c:	0013      	movs	r3, r2
    807e:	7ad2      	ldrb	r2, [r2, #11]
    8080:	330b      	adds	r3, #11
    8082:	2a3c      	cmp	r2, #60	; 0x3c
    8084:	d017      	beq.n	80b6 <ll_rx_dequeue+0x82>
    8086:	785b      	ldrb	r3, [r3, #1]
    8088:	2b00      	cmp	r3, #0
    808a:	d130      	bne.n	80ee <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    808c:	0022      	movs	r2, r4
    808e:	2101      	movs	r1, #1
    8090:	32dc      	adds	r2, #220	; 0xdc
    8092:	7813      	ldrb	r3, [r2, #0]
    8094:	420b      	tst	r3, r1
    8096:	d0dc      	beq.n	8052 <ll_rx_dequeue+0x1e>
			_radio.scanner.is_enabled = 0;
    8098:	438b      	bics	r3, r1
    809a:	7013      	strb	r3, [r2, #0]
    809c:	e019      	b.n	80d2 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    809e:	209a      	movs	r0, #154	; 0x9a
    80a0:	25a4      	movs	r5, #164	; 0xa4
    80a2:	0040      	lsls	r0, r0, #1
    80a4:	006d      	lsls	r5, r5, #1
    80a6:	5c20      	ldrb	r0, [r4, r0]
    80a8:	5d63      	ldrb	r3, [r4, r5]
    80aa:	3801      	subs	r0, #1
    80ac:	4283      	cmp	r3, r0
    80ae:	dad0      	bge.n	8052 <ll_rx_dequeue+0x1e>
		_radio.link_rx_data_quota++;
    80b0:	3301      	adds	r3, #1
    80b2:	5563      	strb	r3, [r4, r5]
		break;
    80b4:	e7e0      	b.n	8078 <ll_rx_dequeue+0x44>
				conn = _radio.advertiser.conn;
    80b6:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    80b8:	2200      	movs	r2, #0
				conn = _radio.advertiser.conn;
    80ba:	33c8      	adds	r3, #200	; 0xc8
    80bc:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
    80be:	601a      	str	r2, [r3, #0]
			LL_ASSERT(_radio.advertiser.is_enabled);
    80c0:	1d62      	adds	r2, r4, #5
    80c2:	7fd3      	ldrb	r3, [r2, #31]
    80c4:	2b7f      	cmp	r3, #127	; 0x7f
    80c6:	d9c4      	bls.n	8052 <ll_rx_dequeue+0x1e>
			_radio.advertiser.is_enabled = 0;
    80c8:	217f      	movs	r1, #127	; 0x7f
    80ca:	400b      	ands	r3, r1
    80cc:	77d3      	strb	r3, [r2, #31]
		if (conn) {
    80ce:	2d00      	cmp	r5, #0
    80d0:	d10f      	bne.n	80f2 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    80d2:	0023      	movs	r3, r4
    80d4:	33dc      	adds	r3, #220	; 0xdc
    80d6:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
    80d8:	3405      	adds	r4, #5
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    80da:	07c0      	lsls	r0, r0, #31
		     _radio.advertiser.is_enabled;
    80dc:	7fe3      	ldrb	r3, [r4, #31]
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    80de:	0fc0      	lsrs	r0, r0, #31
    80e0:	0040      	lsls	r0, r0, #1
    80e2:	09db      	lsrs	r3, r3, #7
		if (!bm) {
    80e4:	4318      	orrs	r0, r3
    80e6:	d101      	bne.n	80ec <ll_rx_dequeue+0xb8>
			ll_adv_scan_state_cb(0);
    80e8:	f7ff fdf8 	bl	7cdc <ll_adv_scan_state_cb>
}
    80ec:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		struct connection *conn = NULL;
    80ee:	2500      	movs	r5, #0
    80f0:	e7e6      	b.n	80c0 <ll_rx_dequeue+0x8c>
			mem_release(node_rx->hdr.onion.link,
    80f2:	0021      	movs	r1, r4
    80f4:	002b      	movs	r3, r5
    80f6:	313d      	adds	r1, #61	; 0x3d
    80f8:	339c      	adds	r3, #156	; 0x9c
    80fa:	6818      	ldr	r0, [r3, #0]
    80fc:	31ff      	adds	r1, #255	; 0xff
    80fe:	f7fa fb08 	bl	2712 <mem_release>
			mem_release(conn, &_radio.conn_free);
    8102:	0021      	movs	r1, r4
    8104:	3109      	adds	r1, #9
    8106:	31ff      	adds	r1, #255	; 0xff
    8108:	0028      	movs	r0, r5
    810a:	f7fa fb02 	bl	2712 <mem_release>
    810e:	e7e0      	b.n	80d2 <ll_rx_dequeue+0x9e>
    8110:	20000254 	.word	0x20000254
    8114:	0000077e 	.word	0x0000077e

00008118 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    8118:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    811a:	4c0a      	ldr	r4, [pc, #40]	; (8144 <rtc0_nrf5_isr+0x2c>)
    811c:	6c62      	ldr	r2, [r4, #68]	; 0x44
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    811e:	6ca5      	ldr	r5, [r4, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    8120:	2a00      	cmp	r2, #0
    8122:	d003      	beq.n	812c <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    8124:	2000      	movs	r0, #0
    8126:	6460      	str	r0, [r4, #68]	; 0x44

		ticker_trigger(0);
    8128:	f7fb f8f4 	bl	3314 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    812c:	2d00      	cmp	r5, #0
    812e:	d004      	beq.n	813a <rtc0_nrf5_isr+0x22>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    8130:	2300      	movs	r3, #0

		ticker_trigger(1);
    8132:	2001      	movs	r0, #1
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    8134:	64a3      	str	r3, [r4, #72]	; 0x48
		ticker_trigger(1);
    8136:	f7fb f8ed 	bl	3314 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    813a:	2000      	movs	r0, #0
    813c:	f7fa fbd8 	bl	28f0 <mayfly_run>
}
    8140:	bd70      	pop	{r4, r5, r6, pc}
    8142:	46c0      	nop			; (mov r8, r8)
    8144:	4000b0fc 	.word	0x4000b0fc

00008148 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    8148:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    814a:	2001      	movs	r0, #1
    814c:	f7fa fbd0 	bl	28f0 <mayfly_run>
}
    8150:	bd10      	pop	{r4, pc}

00008152 <rng_nrf5_isr>:
{
    8152:	b510      	push	{r4, lr}
	isr_rand(arg);
    8154:	f000 fc5c 	bl	8a10 <isr_rand>
}
    8158:	bd10      	pop	{r4, pc}

0000815a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    815a:	b510      	push	{r4, lr}
	isr_radio();
    815c:	f000 fce0 	bl	8b20 <isr_radio>
	ISR_DIRECT_PM();
    8160:	f7f8 fc78 	bl	a54 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    8164:	f7f8 fb64 	bl	830 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8168:	bd10      	pop	{r4, pc}

0000816a <radio_active_callback>:
}
    816a:	4770      	bx	lr

0000816c <radio_event_callback>:
{
    816c:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    816e:	4b02      	ldr	r3, [pc, #8]	; (8178 <radio_event_callback+0xc>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8170:	6818      	ldr	r0, [r3, #0]
    8172:	f001 feb1 	bl	9ed8 <_impl_k_sem_give>
}
    8176:	bd10      	pop	{r4, pc}
    8178:	20000a14 	.word	0x20000a14

0000817c <ll_init>:

int ll_init(struct k_sem *sem_rx)
{
    817c:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    817e:	4b3c      	ldr	r3, [pc, #240]	; (8270 <ll_init+0xf4>)
{
    8180:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    8182:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
    8184:	2204      	movs	r2, #4
    8186:	2109      	movs	r1, #9
    8188:	483a      	ldr	r0, [pc, #232]	; (8274 <ll_init+0xf8>)
    818a:	f000 fc19 	bl	89c0 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
    818e:	483a      	ldr	r0, [pc, #232]	; (8278 <ll_init+0xfc>)
    8190:	220c      	movs	r2, #12
    8192:	2111      	movs	r1, #17
    8194:	f000 fc1e 	bl	89d4 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    8198:	4838      	ldr	r0, [pc, #224]	; (827c <ll_init+0x100>)
    819a:	f001 f9bb 	bl	9514 <device_get_binding>
	if (!clk_k32) {
    819e:	2800      	cmp	r0, #0
    81a0:	d102      	bne.n	81a8 <ll_init+0x2c>
		return -ENODEV;
    81a2:	2013      	movs	r0, #19
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
    81a4:	4240      	negs	r0, r0
    81a6:	e05e      	b.n	8266 <ll_init+0xea>
	return api->on(dev, sys);
    81a8:	6843      	ldr	r3, [r0, #4]
    81aa:	2100      	movs	r1, #0
    81ac:	681b      	ldr	r3, [r3, #0]
    81ae:	4798      	blx	r3
	cntr_init();
    81b0:	f000 fb02 	bl	87b8 <cntr_init>
	mayfly_init();
    81b4:	f7fa fb00 	bl	27b8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    81b8:	2208      	movs	r2, #8
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    81ba:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    81bc:	2402      	movs	r4, #2
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    81be:	250d      	movs	r5, #13
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    81c0:	4b2f      	ldr	r3, [pc, #188]	; (8280 <ll_init+0x104>)
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    81c2:	2107      	movs	r1, #7
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    81c4:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    81c6:	3a05      	subs	r2, #5
    81c8:	721a      	strb	r2, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    81ca:	4a2e      	ldr	r2, [pc, #184]	; (8284 <ll_init+0x108>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    81cc:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    81ce:	761c      	strb	r4, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    81d0:	9205      	str	r2, [sp, #20]
    81d2:	4a2d      	ldr	r2, [pc, #180]	; (8288 <ll_init+0x10c>)
    81d4:	9300      	str	r3, [sp, #0]
    81d6:	9204      	str	r2, [sp, #16]
    81d8:	4a2c      	ldr	r2, [pc, #176]	; (828c <ll_init+0x110>)
    81da:	9501      	str	r5, [sp, #4]
    81dc:	9203      	str	r2, [sp, #12]
    81de:	4a2c      	ldr	r2, [pc, #176]	; (8290 <ll_init+0x114>)
    81e0:	2304      	movs	r3, #4
    81e2:	9202      	str	r2, [sp, #8]
    81e4:	4a2b      	ldr	r2, [pc, #172]	; (8294 <ll_init+0x118>)
    81e6:	f7fb f85d 	bl	32a4 <ticker_init>
    81ea:	1e06      	subs	r6, r0, #0
	LL_ASSERT(!err);
    81ec:	d002      	beq.n	81f4 <ll_init+0x78>
    81ee:	b662      	cpsie	i
    81f0:	2004      	movs	r0, #4
    81f2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    81f4:	4828      	ldr	r0, [pc, #160]	; (8298 <ll_init+0x11c>)
    81f6:	f001 f98d 	bl	9514 <device_get_binding>
	if (!clk_m16) {
    81fa:	2800      	cmp	r0, #0
    81fc:	d0d1      	beq.n	81a2 <ll_init+0x26>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    81fe:	23f8      	movs	r3, #248	; 0xf8
    8200:	005b      	lsls	r3, r3, #1
    8202:	9304      	str	r3, [sp, #16]
    8204:	4b25      	ldr	r3, [pc, #148]	; (829c <ll_init+0x120>)
    8206:	9400      	str	r4, [sp, #0]
    8208:	9303      	str	r3, [sp, #12]
    820a:	231b      	movs	r3, #27
    820c:	9302      	str	r3, [sp, #8]
    820e:	9301      	str	r3, [sp, #4]
    8210:	3b1a      	subs	r3, #26
    8212:	0032      	movs	r2, r6
    8214:	0019      	movs	r1, r3
    8216:	f7ff fb6f 	bl	78f8 <radio_init>
    821a:	1e04      	subs	r4, r0, #0
	if (err) {
    821c:	d125      	bne.n	826a <ll_init+0xee>
	}

	ll_filter_reset(true);
    821e:	2001      	movs	r0, #1
    8220:	f000 fabe 	bl	87a0 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8224:	0022      	movs	r2, r4
    8226:	0021      	movs	r1, r4
    8228:	2001      	movs	r0, #1
    822a:	f7f8 fbdd 	bl	9e8 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    822e:	0022      	movs	r2, r4
    8230:	0021      	movs	r1, r4
    8232:	200b      	movs	r0, #11
    8234:	f7f8 fbd8 	bl	9e8 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    8238:	0022      	movs	r2, r4
    823a:	0021      	movs	r1, r4
    823c:	2018      	movs	r0, #24
    823e:	f7f8 fbd3 	bl	9e8 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    8242:	0022      	movs	r2, r4
    8244:	2101      	movs	r1, #1
    8246:	0028      	movs	r0, r5
    8248:	f7f8 fbce 	bl	9e8 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    824c:	2001      	movs	r0, #1
    824e:	f7f8 fba1 	bl	994 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8252:	200b      	movs	r0, #11
    8254:	f7f8 fb9e 	bl	994 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    8258:	2018      	movs	r0, #24
    825a:	f7f8 fb9b 	bl	994 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    825e:	0028      	movs	r0, r5
    8260:	f7f8 fb98 	bl	994 <_arch_irq_enable>

	return 0;
    8264:	0020      	movs	r0, r4
}
    8266:	b006      	add	sp, #24
    8268:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    826a:	200c      	movs	r0, #12
    826c:	e79a      	b.n	81a4 <ll_init+0x28>
    826e:	46c0      	nop			; (mov r8, r8)
    8270:	20000a14 	.word	0x20000a14
    8274:	200009f4 	.word	0x200009f4
    8278:	20000a00 	.word	0x20000a00
    827c:	0000ae94 	.word	0x0000ae94
    8280:	200009d4 	.word	0x200009d4
    8284:	000092d1 	.word	0x000092d1
    8288:	0000925d 	.word	0x0000925d
    828c:	00009245 	.word	0x00009245
    8290:	20000764 	.word	0x20000764
    8294:	2000064c 	.word	0x2000064c
    8298:	0000ae9f 	.word	0x0000ae9f
    829c:	2000045c 	.word	0x2000045c

000082a0 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    82a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a2:	b08b      	sub	sp, #44	; 0x2c
    82a4:	9201      	str	r2, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    82a6:	2200      	movs	r2, #0
{
    82a8:	001d      	movs	r5, r3
    82aa:	ab10      	add	r3, sp, #64	; 0x40
    82ac:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    82ae:	2601      	movs	r6, #1
{
    82b0:	9302      	str	r3, [sp, #8]
    82b2:	ab11      	add	r3, sp, #68	; 0x44
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	000f      	movs	r7, r1
    82b8:	9303      	str	r3, [sp, #12]
    82ba:	ab13      	add	r3, sp, #76	; 0x4c
    82bc:	781b      	ldrb	r3, [r3, #0]
    82be:	9304      	str	r3, [sp, #16]
    82c0:	ab14      	add	r3, sp, #80	; 0x50
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	9305      	str	r3, [sp, #20]
    82c6:	ab16      	add	r3, sp, #88	; 0x58
    82c8:	781b      	ldrb	r3, [r3, #0]
    82ca:	9300      	str	r3, [sp, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    82cc:	ab08      	add	r3, sp, #32
    82ce:	701a      	strb	r2, [r3, #0]
    82d0:	3206      	adds	r2, #6
    82d2:	709a      	strb	r2, [r3, #2]
    82d4:	3a04      	subs	r2, #4
    82d6:	70da      	strb	r2, [r3, #3]
    82d8:	2207      	movs	r2, #7
    82da:	705e      	strb	r6, [r3, #1]
    82dc:	711e      	strb	r6, [r3, #4]
    82de:	715a      	strb	r2, [r3, #5]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    82e0:	f7ff fbe8 	bl	7ab4 <ll_adv_is_enabled>
    82e4:	1e04      	subs	r4, r0, #0
    82e6:	d000      	beq.n	82ea <ll_adv_params_set+0x4a>
    82e8:	e0ce      	b.n	8488 <ll_adv_params_set+0x1e8>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    82ea:	201f      	movs	r0, #31
    82ec:	2320      	movs	r3, #32
    82ee:	4a68      	ldr	r2, [pc, #416]	; (8490 <ll_adv_params_set+0x1f0>)
    82f0:	7811      	ldrb	r1, [r2, #0]
    82f2:	4001      	ands	r1, r0
    82f4:	430b      	orrs	r3, r1
    82f6:	7013      	strb	r3, [r2, #0]

	/* extended */
	if (adv_type > 0x04) {
    82f8:	2d04      	cmp	r5, #4
    82fa:	d967      	bls.n	83cc <ll_adv_params_set+0x12c>
    82fc:	2303      	movs	r3, #3
		/* legacy */
		if (evt_prop & BIT(4)) {
    82fe:	06f9      	lsls	r1, r7, #27
    8300:	d50e      	bpl.n	8320 <ll_adv_params_set+0x80>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    8302:	2104      	movs	r1, #4
    8304:	aa07      	add	r2, sp, #28
    8306:	7051      	strb	r1, [r2, #1]
    8308:	3902      	subs	r1, #2
    830a:	7013      	strb	r3, [r2, #0]
    830c:	7091      	strb	r1, [r2, #2]
    830e:	70d4      	strb	r4, [r2, #3]

			adv_type = leg_adv_type[evt_prop & 0x03];
    8310:	403b      	ands	r3, r7
    8312:	5cd5      	ldrb	r5, [r2, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    8314:	073b      	lsls	r3, r7, #28
    8316:	d559      	bpl.n	83cc <ll_adv_params_set+0x12c>
				adv_type = 0x01;
    8318:	0035      	movs	r5, r6
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    831a:	2200      	movs	r2, #0
    831c:	4b5c      	ldr	r3, [pc, #368]	; (8490 <ll_adv_params_set+0x1f0>)
    831e:	e011      	b.n	8344 <ll_adv_params_set+0xa4>
			if (((evt_prop & 0x03) == 0x03) ||
    8320:	403b      	ands	r3, r7
    8322:	2b03      	cmp	r3, #3
    8324:	d100      	bne.n	8328 <ll_adv_params_set+0x88>
    8326:	e0b1      	b.n	848c <ll_adv_params_set+0x1ec>
    8328:	230c      	movs	r3, #12
    832a:	403b      	ands	r3, r7
    832c:	2b0c      	cmp	r3, #12
    832e:	d100      	bne.n	8332 <ll_adv_params_set+0x92>
    8330:	e0ac      	b.n	848c <ll_adv_params_set+0x1ec>
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    8332:	2505      	movs	r5, #5
			ll_adv.phy_p = phy_p;
    8334:	9b00      	ldr	r3, [sp, #0]
    8336:	0159      	lsls	r1, r3, #5
    8338:	7813      	ldrb	r3, [r2, #0]
    833a:	4003      	ands	r3, r0
    833c:	430b      	orrs	r3, r1
    833e:	7013      	strb	r3, [r2, #0]
		ll_adv.interval = interval;
    8340:	4b53      	ldr	r3, [pc, #332]	; (8490 <ll_adv_params_set+0x1f0>)
    8342:	9a01      	ldr	r2, [sp, #4]
	}
	ll_adv.chan_map = chan_map;
    8344:	2107      	movs	r1, #7
		ll_adv.interval = 0;
    8346:	605a      	str	r2, [r3, #4]
	ll_adv.chan_map = chan_map;
    8348:	4a51      	ldr	r2, [pc, #324]	; (8490 <ll_adv_params_set+0x1f0>)
    834a:	9804      	ldr	r0, [sp, #16]
    834c:	7813      	ldrb	r3, [r2, #0]
    834e:	4008      	ands	r0, r1
    8350:	438b      	bics	r3, r1
	ll_adv.filter_policy = filter_policy;
    8352:	4303      	orrs	r3, r0
    8354:	2018      	movs	r0, #24
    8356:	9e05      	ldr	r6, [sp, #20]
    8358:	3904      	subs	r1, #4
    835a:	400e      	ands	r6, r1
    835c:	00f1      	lsls	r1, r6, #3
    835e:	4383      	bics	r3, r0
    8360:	430b      	orrs	r3, r1
    8362:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    8364:	f7ff fb9a 	bl	7a9c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8368:	0003      	movs	r3, r0
    836a:	2627      	movs	r6, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
    836c:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    836e:	334f      	adds	r3, #79	; 0x4f
    8370:	781b      	ldrb	r3, [r3, #0]
    8372:	435e      	muls	r6, r3
	pdu->type = pdu_adv_type[adv_type];
    8374:	ab08      	add	r3, sp, #32
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8376:	1986      	adds	r6, r0, r6
	pdu->type = pdu_adv_type[adv_type];
    8378:	5d59      	ldrb	r1, [r3, r5]
    837a:	7833      	ldrb	r3, [r6, #0]
    837c:	4011      	ands	r1, r2
    837e:	4393      	bics	r3, r2
	pdu->rfu = 0;
    8380:	430b      	orrs	r3, r1
    8382:	2110      	movs	r1, #16
    8384:	438b      	bics	r3, r1
    8386:	7033      	strb	r3, [r6, #0]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    8388:	401a      	ands	r2, r3
    838a:	1849      	adds	r1, r1, r1
    838c:	2a01      	cmp	r2, #1
    838e:	d820      	bhi.n	83d2 <ll_adv_params_set+0x132>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    8390:	430b      	orrs	r3, r1
	} else {
		pdu->chan_sel = 0;
    8392:	7033      	strb	r3, [r6, #0]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    8394:	2301      	movs	r3, #1
    8396:	2040      	movs	r0, #64	; 0x40
    8398:	9d02      	ldr	r5, [sp, #8]
    839a:	401d      	ands	r5, r3
    839c:	7833      	ldrb	r3, [r6, #0]
    839e:	01a9      	lsls	r1, r5, #6
    83a0:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    83a2:	430b      	orrs	r3, r1
    83a4:	217f      	movs	r1, #127	; 0x7f
    83a6:	400b      	ands	r3, r1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    83a8:	3970      	subs	r1, #112	; 0x70
	pdu->rx_addr = 0;
    83aa:	7033      	strb	r3, [r6, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    83ac:	4019      	ands	r1, r3
    83ae:	2901      	cmp	r1, #1
    83b0:	d111      	bne.n	83d6 <ll_adv_params_set+0x136>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    83b2:	0030      	movs	r0, r6
		pdu->rx_addr = direct_addr_type;
    83b4:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    83b6:	3008      	adds	r0, #8
		pdu->rx_addr = direct_addr_type;
    83b8:	01d2      	lsls	r2, r2, #7
    83ba:	4313      	orrs	r3, r2
    83bc:	7033      	strb	r3, [r6, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    83be:	2206      	movs	r2, #6
    83c0:	9912      	ldr	r1, [sp, #72]	; 0x48
    83c2:	f7f8 f951 	bl	668 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    83c6:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    83c8:	7073      	strb	r3, [r6, #1]
    83ca:	e039      	b.n	8440 <ll_adv_params_set+0x1a0>
	if (adv_type != 0x01) {
    83cc:	2d01      	cmp	r5, #1
    83ce:	d1b7      	bne.n	8340 <ll_adv_params_set+0xa0>
    83d0:	e7a3      	b.n	831a <ll_adv_params_set+0x7a>
		pdu->chan_sel = 0;
    83d2:	438b      	bics	r3, r1
    83d4:	e7dd      	b.n	8392 <ll_adv_params_set+0xf2>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    83d6:	2907      	cmp	r1, #7
    83d8:	d151      	bne.n	847e <ll_adv_params_set+0x1de>
		p->adv_mode = evt_prop & 0x03;
    83da:	01b9      	lsls	r1, r7, #6
    83dc:	70b1      	strb	r1, [r6, #2]
		*(u8_t *)h = 0;
    83de:	2100      	movs	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    83e0:	1cb0      	adds	r0, r6, #2
		ptr = (u8_t *)h + sizeof(*h);
    83e2:	1d33      	adds	r3, r6, #4
		*(u8_t *)h = 0;
    83e4:	70f1      	strb	r1, [r6, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    83e6:	06ba      	lsls	r2, r7, #26
    83e8:	d40a      	bmi.n	8400 <ll_adv_params_set+0x160>
    83ea:	223f      	movs	r2, #63	; 0x3f
    83ec:	78b1      	ldrb	r1, [r6, #2]
    83ee:	4391      	bics	r1, r2
    83f0:	d106      	bne.n	8400 <ll_adv_params_set+0x160>
    83f2:	9a00      	ldr	r2, [sp, #0]
    83f4:	2a04      	cmp	r2, #4
    83f6:	d003      	beq.n	8400 <ll_adv_params_set+0x160>
			h->adv_addr = 1;
    83f8:	2301      	movs	r3, #1
    83fa:	70f3      	strb	r3, [r6, #3]
			ptr += BDADDR_SIZE;
    83fc:	0033      	movs	r3, r6
    83fe:	330a      	adds	r3, #10
		if (evt_prop & BIT(6)) {
    8400:	2140      	movs	r1, #64	; 0x40
    8402:	420f      	tst	r7, r1
    8404:	d003      	beq.n	840e <ll_adv_params_set+0x16e>
			h->tx_pwr = 1;
    8406:	78f2      	ldrb	r2, [r6, #3]
			ptr++;
    8408:	3301      	adds	r3, #1
			h->tx_pwr = 1;
    840a:	4311      	orrs	r1, r2
    840c:	70f1      	strb	r1, [r6, #3]
		len = ptr - (u8_t *)p;
    840e:	1a1a      	subs	r2, r3, r0
    8410:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    8412:	2a02      	cmp	r2, #2
    8414:	d931      	bls.n	847a <ll_adv_params_set+0x1da>
			p->ext_hdr_len = len -
    8416:	273f      	movs	r7, #63	; 0x3f
    8418:	78b1      	ldrb	r1, [r6, #2]
    841a:	1e50      	subs	r0, r2, #1
    841c:	4038      	ands	r0, r7
    841e:	43b9      	bics	r1, r7
    8420:	4301      	orrs	r1, r0
    8422:	70b1      	strb	r1, [r6, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    8424:	7072      	strb	r2, [r6, #1]
		if (h->tx_pwr) {
    8426:	78f2      	ldrb	r2, [r6, #3]
    8428:	0652      	lsls	r2, r2, #25
    842a:	d509      	bpl.n	8440 <ll_adv_params_set+0x1a0>
			_tx_pwr = 0;
    842c:	9a15      	ldr	r2, [sp, #84]	; 0x54
			if (tx_pwr) {
    842e:	1e11      	subs	r1, r2, #0
    8430:	d004      	beq.n	843c <ll_adv_params_set+0x19c>
				if (*tx_pwr != 0x7F) {
    8432:	7812      	ldrb	r2, [r2, #0]
    8434:	2a7f      	cmp	r2, #127	; 0x7f
    8436:	d101      	bne.n	843c <ll_adv_params_set+0x19c>
					*tx_pwr = _tx_pwr;
    8438:	2200      	movs	r2, #0
    843a:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    843c:	3b01      	subs	r3, #1
    843e:	701a      	strb	r2, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    8440:	f7ff fb32 	bl	7aa8 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8444:	0003      	movs	r3, r0
    8446:	334f      	adds	r3, #79	; 0x4f
    8448:	781a      	ldrb	r2, [r3, #0]
    844a:	2327      	movs	r3, #39	; 0x27
    844c:	4353      	muls	r3, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    844e:	220f      	movs	r2, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8450:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8452:	7803      	ldrb	r3, [r0, #0]
    8454:	4393      	bics	r3, r2
    8456:	001a      	movs	r2, r3
	pdu->rfu = 0;
    8458:	2304      	movs	r3, #4
    845a:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    845c:	01aa      	lsls	r2, r5, #6
    845e:	258f      	movs	r5, #143	; 0x8f
    8460:	401d      	ands	r5, r3
	pdu->rx_addr = 0;
    8462:	237f      	movs	r3, #127	; 0x7f
    8464:	4315      	orrs	r5, r2
    8466:	401d      	ands	r5, r3
	if (pdu->len == 0) {
    8468:	7843      	ldrb	r3, [r0, #1]
	pdu->rx_addr = 0;
    846a:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
    846c:	2b00      	cmp	r3, #0
    846e:	d101      	bne.n	8474 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
    8470:	3306      	adds	r3, #6
    8472:	7043      	strb	r3, [r0, #1]
	}

	return 0;
}
    8474:	0020      	movs	r0, r4
    8476:	b00b      	add	sp, #44	; 0x2c
    8478:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    847a:	2201      	movs	r2, #1
    847c:	e7d2      	b.n	8424 <ll_adv_params_set+0x184>
	} else if (pdu->len == 0) {
    847e:	7873      	ldrb	r3, [r6, #1]
    8480:	2b00      	cmp	r3, #0
    8482:	d1dd      	bne.n	8440 <ll_adv_params_set+0x1a0>
		pdu->len = BDADDR_SIZE;
    8484:	3306      	adds	r3, #6
    8486:	e79f      	b.n	83c8 <ll_adv_params_set+0x128>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8488:	240c      	movs	r4, #12
    848a:	e7f3      	b.n	8474 <ll_adv_params_set+0x1d4>
				return 0x12; /* invalid HCI cmd param */
    848c:	2412      	movs	r4, #18
    848e:	e7f1      	b.n	8474 <ll_adv_params_set+0x1d4>
    8490:	20000a18 	.word	0x20000a18

00008494 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    8494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8496:	0007      	movs	r7, r0
    8498:	9100      	str	r1, [sp, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    849a:	f7ff faff 	bl	7a9c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    849e:	0003      	movs	r3, r0
    84a0:	2127      	movs	r1, #39	; 0x27
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    84a2:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    84a4:	334f      	adds	r3, #79	; 0x4f
    84a6:	781d      	ldrb	r5, [r3, #0]
	radio_adv_data = radio_adv_data_get();
    84a8:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    84aa:	4369      	muls	r1, r5
    84ac:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    84ae:	780b      	ldrb	r3, [r1, #0]
    84b0:	401a      	ands	r2, r3
    84b2:	2a01      	cmp	r2, #1
    84b4:	d045      	beq.n	8542 <ll_adv_data_set+0xae>
    84b6:	2a07      	cmp	r2, #7
    84b8:	d043      	beq.n	8542 <ll_adv_data_set+0xae>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    84ba:	0002      	movs	r2, r0
    84bc:	324e      	adds	r2, #78	; 0x4e
    84be:	7812      	ldrb	r2, [r2, #0]
    84c0:	42aa      	cmp	r2, r5
    84c2:	d104      	bne.n	84ce <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
    84c4:	3501      	adds	r5, #1
    84c6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    84c8:	2d02      	cmp	r5, #2
    84ca:	d100      	bne.n	84ce <ll_adv_data_set+0x3a>
			last = 0;
    84cc:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    84ce:	200f      	movs	r0, #15
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    84d0:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
    84d2:	4003      	ands	r3, r0
    84d4:	001a      	movs	r2, r3
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    84d6:	436c      	muls	r4, r5
    84d8:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
    84da:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    84dc:	364f      	adds	r6, #79	; 0x4f
	pdu->type = prev->type;
    84de:	4383      	bics	r3, r0
	pdu->rfu = 0;
    84e0:	4313      	orrs	r3, r2
    84e2:	2210      	movs	r2, #16
    84e4:	4393      	bics	r3, r2
    84e6:	7023      	strb	r3, [r4, #0]
		pdu->chan_sel = prev->chan_sel;
    84e8:	780a      	ldrb	r2, [r1, #0]
    84ea:	380e      	subs	r0, #14
    84ec:	0952      	lsrs	r2, r2, #5
    84ee:	4002      	ands	r2, r0
    84f0:	0153      	lsls	r3, r2, #5
    84f2:	9301      	str	r3, [sp, #4]
    84f4:	7823      	ldrb	r3, [r4, #0]
    84f6:	001a      	movs	r2, r3
    84f8:	2320      	movs	r3, #32
    84fa:	439a      	bics	r2, r3
    84fc:	0013      	movs	r3, r2
    84fe:	9a01      	ldr	r2, [sp, #4]
    8500:	431a      	orrs	r2, r3
    8502:	7022      	strb	r2, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
    8504:	780b      	ldrb	r3, [r1, #0]
    8506:	b2d2      	uxtb	r2, r2
    8508:	099b      	lsrs	r3, r3, #6
    850a:	4003      	ands	r3, r0
    850c:	303f      	adds	r0, #63	; 0x3f
    850e:	4382      	bics	r2, r0
    8510:	019b      	lsls	r3, r3, #6
    8512:	4313      	orrs	r3, r2
    8514:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
    8516:	780b      	ldrb	r3, [r1, #0]
    8518:	303f      	adds	r0, #63	; 0x3f
    851a:	09db      	lsrs	r3, r3, #7
    851c:	01da      	lsls	r2, r3, #7
    851e:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    8520:	3102      	adds	r1, #2
	pdu->rx_addr = prev->rx_addr;
    8522:	4003      	ands	r3, r0
    8524:	4313      	orrs	r3, r2
    8526:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    8528:	2206      	movs	r2, #6
    852a:	1ca0      	adds	r0, r4, #2
    852c:	f7f8 f89c 	bl	668 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    8530:	0020      	movs	r0, r4
    8532:	003a      	movs	r2, r7
    8534:	3008      	adds	r0, #8
    8536:	9900      	ldr	r1, [sp, #0]
    8538:	f7f8 f896 	bl	668 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    853c:	1dbb      	adds	r3, r7, #6
    853e:	7063      	strb	r3, [r4, #1]
	radio_adv_data->last = last;
    8540:	7035      	strb	r5, [r6, #0]
}
    8542:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00008544 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    8544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8546:	0007      	movs	r7, r0
    8548:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    854a:	f7ff faad 	bl	7aa8 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    854e:	0003      	movs	r3, r0
    8550:	334f      	adds	r3, #79	; 0x4f
    8552:	7819      	ldrb	r1, [r3, #0]
    8554:	3b01      	subs	r3, #1
    8556:	781b      	ldrb	r3, [r3, #0]
	radio_scan_data = radio_scan_data_get();
    8558:	0005      	movs	r5, r0
    855a:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
    855c:	428b      	cmp	r3, r1
    855e:	d104      	bne.n	856a <ll_scan_data_set+0x26>
		last = radio_scan_data->last + 1;
    8560:	1c4e      	adds	r6, r1, #1
    8562:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    8564:	2e02      	cmp	r6, #2
    8566:	d100      	bne.n	856a <ll_scan_data_set+0x26>
			last = 0;
    8568:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    856a:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    856c:	220f      	movs	r2, #15
	prev = (struct pdu_adv *)
    856e:	4361      	muls	r1, r4
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    8570:	4374      	muls	r4, r6
    8572:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8574:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    8576:	2040      	movs	r0, #64	; 0x40
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8578:	4393      	bics	r3, r2
    857a:	001a      	movs	r2, r3
	pdu->rfu = 0;
    857c:	2304      	movs	r3, #4
    857e:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
    8580:	22cf      	movs	r2, #207	; 0xcf
    8582:	4013      	ands	r3, r2
    8584:	7023      	strb	r3, [r4, #0]
	prev = (struct pdu_adv *)
    8586:	1869      	adds	r1, r5, r1
	pdu->tx_addr = prev->tx_addr;
    8588:	780b      	ldrb	r3, [r1, #0]
    858a:	3a8f      	subs	r2, #143	; 0x8f
    858c:	401a      	ands	r2, r3
    858e:	7823      	ldrb	r3, [r4, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    8590:	3102      	adds	r1, #2
	pdu->tx_addr = prev->tx_addr;
    8592:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    8594:	4313      	orrs	r3, r2
    8596:	227f      	movs	r2, #127	; 0x7f
    8598:	4013      	ands	r3, r2
    859a:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    859c:	1dbb      	adds	r3, r7, #6
    859e:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    85a0:	1ca0      	adds	r0, r4, #2
    85a2:	3a79      	subs	r2, #121	; 0x79
    85a4:	f7f8 f860 	bl	668 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    85a8:	0020      	movs	r0, r4
    85aa:	003a      	movs	r2, r7

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    85ac:	354f      	adds	r5, #79	; 0x4f
	memcpy(&pdu->scan_rsp.data[0], data, len);
    85ae:	9901      	ldr	r1, [sp, #4]
    85b0:	3008      	adds	r0, #8
    85b2:	f7f8 f859 	bl	668 <memcpy>
	radio_scan_data->last = last;
    85b6:	702e      	strb	r6, [r5, #0]
}
    85b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

000085bc <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    85bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    85be:	b085      	sub	sp, #20
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    85c0:	2800      	cmp	r0, #0
    85c2:	d103      	bne.n	85cc <ll_adv_enable+0x10>
		return radio_adv_disable();
    85c4:	f7ff fd06 	bl	7fd4 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    85c8:	b005      	add	sp, #20
    85ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ll_adv_is_enabled()) {
    85cc:	f7ff fa72 	bl	7ab4 <ll_adv_is_enabled>
    85d0:	0007      	movs	r7, r0
		return 0;
    85d2:	2000      	movs	r0, #0
	} else if (ll_adv_is_enabled()) {
    85d4:	4287      	cmp	r7, r0
    85d6:	d1f7      	bne.n	85c8 <ll_adv_enable+0xc>
	radio_adv_data = radio_adv_data_get();
    85d8:	f7ff fa60 	bl	7a9c <radio_adv_data_get>
    85dc:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
    85de:	f7ff fa63 	bl	7aa8 <radio_scan_data_get>
			[radio_adv_data->last][0];
    85e2:	0023      	movs	r3, r4
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    85e4:	2627      	movs	r6, #39	; 0x27
			[radio_adv_data->last][0];
    85e6:	334f      	adds	r3, #79	; 0x4f
	radio_scan_data = radio_scan_data_get();
    85e8:	0005      	movs	r5, r0
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    85ea:	7818      	ldrb	r0, [r3, #0]
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    85ec:	230f      	movs	r3, #15
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    85ee:	4370      	muls	r0, r6
    85f0:	1824      	adds	r4, r4, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    85f2:	7820      	ldrb	r0, [r4, #0]
    85f4:	4003      	ands	r3, r0
    85f6:	2b07      	cmp	r3, #7
    85f8:	d11a      	bne.n	8630 <ll_adv_enable+0x74>
		if (h->adv_addr) {
    85fa:	78e3      	ldrb	r3, [r4, #3]
    85fc:	07db      	lsls	r3, r3, #31
    85fe:	d509      	bpl.n	8614 <ll_adv_enable+0x58>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    8600:	0640      	lsls	r0, r0, #25
    8602:	0039      	movs	r1, r7
    8604:	0fc0      	lsrs	r0, r0, #31
    8606:	f7fa ffd3 	bl	35b0 <ll_addr_get>
    860a:	0001      	movs	r1, r0
		ptr = (u8_t *)h + sizeof(*h);
    860c:	1d20      	adds	r0, r4, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    860e:	2206      	movs	r2, #6
    8610:	f7f8 f82a 	bl	668 <memcpy>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    8614:	24ff      	movs	r4, #255	; 0xff
				  ll_adv.chan_map, ll_adv.filter_policy,
    8616:	4913      	ldr	r1, [pc, #76]	; (8664 <ll_adv_enable+0xa8>)
    8618:	7808      	ldrb	r0, [r1, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    861a:	6849      	ldr	r1, [r1, #4]
				  ll_adv.chan_map, ll_adv.filter_policy,
    861c:	06c3      	lsls	r3, r0, #27
    861e:	0742      	lsls	r2, r0, #29
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    8620:	0f9b      	lsrs	r3, r3, #30
    8622:	0f52      	lsrs	r2, r2, #29
    8624:	b289      	uxth	r1, r1
    8626:	9400      	str	r4, [sp, #0]
    8628:	0940      	lsrs	r0, r0, #5
    862a:	f7ff fb59 	bl	7ce0 <radio_adv_enable>
	return status;
    862e:	e7cb      	b.n	85c8 <ll_adv_enable+0xc>
			[radio_scan_data->last][0];
    8630:	002b      	movs	r3, r5
    8632:	334f      	adds	r3, #79	; 0x4f
    8634:	781b      	ldrb	r3, [r3, #0]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    8636:	0640      	lsls	r0, r0, #25
    8638:	0039      	movs	r1, r7
    863a:	0fc0      	lsrs	r0, r0, #31
			[radio_scan_data->last][0];
    863c:	9303      	str	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    863e:	f7fa ffb7 	bl	35b0 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    8642:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    8644:	0001      	movs	r1, r0
			memcpy(&pdu_adv->adv_ind.addr[0],
    8646:	1ca0      	adds	r0, r4, #2
    8648:	f7f8 f80e 	bl	668 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    864c:	7820      	ldrb	r0, [r4, #0]
    864e:	0039      	movs	r1, r7
    8650:	0640      	lsls	r0, r0, #25
    8652:	0fc0      	lsrs	r0, r0, #31
    8654:	f7fa ffac 	bl	35b0 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    8658:	9b03      	ldr	r3, [sp, #12]
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    865a:	0001      	movs	r1, r0
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    865c:	435e      	muls	r6, r3
    865e:	19ad      	adds	r5, r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    8660:	1ca8      	adds	r0, r5, #2
    8662:	e7d4      	b.n	860e <ll_adv_enable+0x52>
    8664:	20000a18 	.word	0x20000a18

00008668 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    8668:	2800      	cmp	r0, #0
    866a:	d102      	bne.n	8672 <ctrl_filter_get+0xa>
    866c:	b662      	cpsie	i
    866e:	2004      	movs	r0, #4
    8670:	df02      	svc	2
	return &wl_filter;
#endif
}
    8672:	4801      	ldr	r0, [pc, #4]	; (8678 <ctrl_filter_get+0x10>)
    8674:	4770      	bx	lr
    8676:	46c0      	nop			; (mov r8, r8)
    8678:	20000a20 	.word	0x20000a20

0000867c <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    867c:	2008      	movs	r0, #8
    867e:	4770      	bx	lr

00008680 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    8680:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8682:	f7ff fa1f 	bl	7ac4 <radio_adv_filter_pol_get>
    8686:	1e04      	subs	r4, r0, #0
    8688:	d002      	beq.n	8690 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    868a:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    868c:	0020      	movs	r0, r4
    868e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8690:	f7ff fa3a 	bl	7b08 <radio_scan_filter_pol_get>
    8694:	07c3      	lsls	r3, r0, #31
    8696:	d4f8      	bmi.n	868a <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    8698:	4b02      	ldr	r3, [pc, #8]	; (86a4 <ll_wl_clear+0x24>)
    869a:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    869c:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    869e:	4b02      	ldr	r3, [pc, #8]	; (86a8 <ll_wl_clear+0x28>)
    86a0:	701c      	strb	r4, [r3, #0]
	return 0;
    86a2:	e7f3      	b.n	868c <ll_wl_clear+0xc>
    86a4:	20000a20 	.word	0x20000a20
    86a8:	20000d94 	.word	0x20000d94

000086ac <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    86ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86ae:	0005      	movs	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    86b0:	f7ff fa08 	bl	7ac4 <radio_adv_filter_pol_get>
    86b4:	1e04      	subs	r4, r0, #0
    86b6:	d002      	beq.n	86be <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    86b8:	240c      	movs	r4, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    86ba:	0020      	movs	r0, r4
    86bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    86be:	f7ff fa23 	bl	7b08 <radio_scan_filter_pol_get>
    86c2:	2101      	movs	r1, #1
    86c4:	4208      	tst	r0, r1
    86c6:	d1f7      	bne.n	86b8 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    86c8:	782a      	ldrb	r2, [r5, #0]
    86ca:	2aff      	cmp	r2, #255	; 0xff
    86cc:	d102      	bne.n	86d4 <ll_wl_add+0x28>
		wl_anon = 1;
    86ce:	4b10      	ldr	r3, [pc, #64]	; (8710 <ll_wl_add+0x64>)
    86d0:	7019      	strb	r1, [r3, #0]
		return 0;
    86d2:	e7f2      	b.n	86ba <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    86d4:	480f      	ldr	r0, [pc, #60]	; (8714 <ll_wl_add+0x68>)
    86d6:	0023      	movs	r3, r4
    86d8:	7806      	ldrb	r6, [r0, #0]
    86da:	2eff      	cmp	r6, #255	; 0xff
    86dc:	d102      	bne.n	86e4 <ll_wl_add+0x38>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    86de:	2407      	movs	r4, #7
    86e0:	e7eb      	b.n	86ba <ll_wl_add+0xe>
	     index++) {
    86e2:	3301      	adds	r3, #1
	     (filter->enable_bitmask & BIT(index));
    86e4:	0037      	movs	r7, r6
    86e6:	40df      	lsrs	r7, r3
	for (index = 0;
    86e8:	420f      	tst	r7, r1
    86ea:	d1fa      	bne.n	86e2 <ll_wl_add+0x36>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    86ec:	400a      	ands	r2, r1
    86ee:	409a      	lsls	r2, r3
	filter->enable_bitmask |= BIT(index);
    86f0:	000f      	movs	r7, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    86f2:	7841      	ldrb	r1, [r0, #1]
	filter->enable_bitmask |= BIT(index);
    86f4:	409f      	lsls	r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    86f6:	430a      	orrs	r2, r1
    86f8:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    86fa:	2206      	movs	r2, #6
    86fc:	4353      	muls	r3, r2
	filter->enable_bitmask |= BIT(index);
    86fe:	433e      	orrs	r6, r7
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8700:	3302      	adds	r3, #2
	filter->enable_bitmask |= BIT(index);
    8702:	7006      	strb	r6, [r0, #0]
	return filter_add(&wl_filter, addr->type, addr->a.val);
    8704:	1c69      	adds	r1, r5, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8706:	18c0      	adds	r0, r0, r3
    8708:	f7f7 ffae 	bl	668 <memcpy>
    870c:	e7d5      	b.n	86ba <ll_wl_add+0xe>
    870e:	46c0      	nop			; (mov r8, r8)
    8710:	20000d94 	.word	0x20000d94
    8714:	20000a20 	.word	0x20000a20

00008718 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    8718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    871a:	9001      	str	r0, [sp, #4]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    871c:	f7ff f9d2 	bl	7ac4 <radio_adv_filter_pol_get>
    8720:	1e07      	subs	r7, r0, #0
    8722:	d002      	beq.n	872a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8724:	270c      	movs	r7, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    8726:	0038      	movs	r0, r7
    8728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    872a:	f7ff f9ed 	bl	7b08 <radio_scan_filter_pol_get>
    872e:	2401      	movs	r4, #1
    8730:	4220      	tst	r0, r4
    8732:	d1f7      	bne.n	8724 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    8734:	9b01      	ldr	r3, [sp, #4]
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	9300      	str	r3, [sp, #0]
    873a:	2bff      	cmp	r3, #255	; 0xff
    873c:	d102      	bne.n	8744 <ll_wl_remove+0x2c>
		wl_anon = 0;
    873e:	4b16      	ldr	r3, [pc, #88]	; (8798 <ll_wl_remove+0x80>)
    8740:	701f      	strb	r7, [r3, #0]
		return 0;
    8742:	e7f0      	b.n	8726 <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
    8744:	4b15      	ldr	r3, [pc, #84]	; (879c <ll_wl_remove+0x84>)
    8746:	2508      	movs	r5, #8
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	2b00      	cmp	r3, #0
    874c:	d101      	bne.n	8752 <ll_wl_remove+0x3a>
		return BT_HCI_ERR_INVALID_PARAM;
    874e:	2712      	movs	r7, #18
    8750:	e7e9      	b.n	8726 <ll_wl_remove+0xe>
	while (index--) {
    8752:	3d01      	subs	r5, #1
    8754:	d3fb      	bcc.n	874e <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
    8756:	4e11      	ldr	r6, [pc, #68]	; (879c <ll_wl_remove+0x84>)
    8758:	7833      	ldrb	r3, [r6, #0]
    875a:	40eb      	lsrs	r3, r5
    875c:	4223      	tst	r3, r4
    875e:	d0f8      	beq.n	8752 <ll_wl_remove+0x3a>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    8760:	7873      	ldrb	r3, [r6, #1]
    8762:	9a00      	ldr	r2, [sp, #0]
    8764:	412b      	asrs	r3, r5
    8766:	4053      	eors	r3, r2
		if ((filter->enable_bitmask & BIT(index)) &&
    8768:	4223      	tst	r3, r4
    876a:	d1f2      	bne.n	8752 <ll_wl_remove+0x3a>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    876c:	2006      	movs	r0, #6
    876e:	4368      	muls	r0, r5
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    8770:	9b01      	ldr	r3, [sp, #4]
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    8772:	3002      	adds	r0, #2
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    8774:	1c59      	adds	r1, r3, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    8776:	1830      	adds	r0, r6, r0
    8778:	2206      	movs	r2, #6
    877a:	f7f7 ff62 	bl	642 <memcmp>
		     (addr_type & 0x01)) &&
    877e:	2800      	cmp	r0, #0
    8780:	d1e7      	bne.n	8752 <ll_wl_remove+0x3a>
			filter->enable_bitmask &= ~BIT(index);
    8782:	40ac      	lsls	r4, r5
    8784:	43e4      	mvns	r4, r4
    8786:	7833      	ldrb	r3, [r6, #0]
    8788:	b2e4      	uxtb	r4, r4
    878a:	4023      	ands	r3, r4
    878c:	7033      	strb	r3, [r6, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    878e:	7873      	ldrb	r3, [r6, #1]
    8790:	401c      	ands	r4, r3
    8792:	7074      	strb	r4, [r6, #1]
    8794:	e7c7      	b.n	8726 <ll_wl_remove+0xe>
    8796:	46c0      	nop			; (mov r8, r8)
    8798:	20000d94 	.word	0x20000d94
    879c:	20000a20 	.word	0x20000a20

000087a0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    87a0:	2300      	movs	r3, #0
    87a2:	4a03      	ldr	r2, [pc, #12]	; (87b0 <ll_filter_reset+0x10>)
    87a4:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    87a6:	4a03      	ldr	r2, [pc, #12]	; (87b4 <ll_filter_reset+0x14>)
    87a8:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    87aa:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    87ac:	4770      	bx	lr
    87ae:	46c0      	nop			; (mov r8, r8)
    87b0:	20000d94 	.word	0x20000d94
    87b4:	20000a20 	.word	0x20000a20

000087b8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    87b8:	22a1      	movs	r2, #161	; 0xa1
    87ba:	2100      	movs	r1, #0
    87bc:	4b05      	ldr	r3, [pc, #20]	; (87d4 <cntr_init+0x1c>)
    87be:	00d2      	lsls	r2, r2, #3
    87c0:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    87c2:	22c0      	movs	r2, #192	; 0xc0
    87c4:	21d1      	movs	r1, #209	; 0xd1
    87c6:	0292      	lsls	r2, r2, #10
    87c8:	0089      	lsls	r1, r1, #2
    87ca:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    87cc:	3940      	subs	r1, #64	; 0x40
    87ce:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif
}
    87d0:	4770      	bx	lr
    87d2:	46c0      	nop			; (mov r8, r8)
    87d4:	4000b000 	.word	0x4000b000

000087d8 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    87d8:	4a05      	ldr	r2, [pc, #20]	; (87f0 <cntr_start+0x18>)
    87da:	2001      	movs	r0, #1
    87dc:	7813      	ldrb	r3, [r2, #0]
    87de:	1c59      	adds	r1, r3, #1
    87e0:	7011      	strb	r1, [r2, #0]
    87e2:	2b00      	cmp	r3, #0
    87e4:	d102      	bne.n	87ec <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    87e6:	4a03      	ldr	r2, [pc, #12]	; (87f4 <cntr_start+0x1c>)
    87e8:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    87ea:	0018      	movs	r0, r3
}
    87ec:	4770      	bx	lr
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	20000a52 	.word	0x20000a52
    87f4:	4000b000 	.word	0x4000b000

000087f8 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    87f8:	4a08      	ldr	r2, [pc, #32]	; (881c <cntr_stop+0x24>)
    87fa:	7813      	ldrb	r3, [r2, #0]
    87fc:	2b00      	cmp	r3, #0
    87fe:	d102      	bne.n	8806 <cntr_stop+0xe>
    8800:	b662      	cpsie	i
    8802:	2004      	movs	r0, #4
    8804:	df02      	svc	2

	if (--_refcount) {
    8806:	3b01      	subs	r3, #1
    8808:	b2db      	uxtb	r3, r3
    880a:	7013      	strb	r3, [r2, #0]
    880c:	2001      	movs	r0, #1
    880e:	2b00      	cmp	r3, #0
    8810:	d102      	bne.n	8818 <cntr_stop+0x20>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    8812:	4a03      	ldr	r2, [pc, #12]	; (8820 <cntr_stop+0x28>)
    8814:	6050      	str	r0, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    8816:	0018      	movs	r0, r3
}
    8818:	4770      	bx	lr
    881a:	46c0      	nop			; (mov r8, r8)
    881c:	20000a52 	.word	0x20000a52
    8820:	4000b000 	.word	0x4000b000

00008824 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    8824:	4b01      	ldr	r3, [pc, #4]	; (882c <cntr_cnt_get+0x8>)
    8826:	4a02      	ldr	r2, [pc, #8]	; (8830 <cntr_cnt_get+0xc>)
    8828:	58d0      	ldr	r0, [r2, r3]
}
    882a:	4770      	bx	lr
    882c:	00000504 	.word	0x00000504
    8830:	4000b000 	.word	0x4000b000

00008834 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    8834:	3051      	adds	r0, #81	; 0x51
    8836:	4b02      	ldr	r3, [pc, #8]	; (8840 <cntr_cmp_set+0xc>)
    8838:	30ff      	adds	r0, #255	; 0xff
    883a:	0080      	lsls	r0, r0, #2
    883c:	50c1      	str	r1, [r0, r3]
}
    883e:	4770      	bx	lr
    8840:	4000b000 	.word	0x4000b000

00008844 <isr>:
{
	return get(rng_isr, octets, rand);
}

static int isr(struct rand *rng, bool store)
{
    8844:	b570      	push	{r4, r5, r6, lr}
	u8_t last;

	if (!rng) {
    8846:	2800      	cmp	r0, #0
    8848:	d01d      	beq.n	8886 <isr+0x42>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    884a:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    884c:	7805      	ldrb	r5, [r0, #0]
	last = rng->last + 1;
    884e:	1c53      	adds	r3, r2, #1
    8850:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    8852:	42ab      	cmp	r3, r5
    8854:	d100      	bne.n	8858 <isr+0x14>
		last = 0;
    8856:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
    8858:	7884      	ldrb	r4, [r0, #2]
    885a:	42a3      	cmp	r3, r4
    885c:	d013      	beq.n	8886 <isr+0x42>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    885e:	2900      	cmp	r1, #0
    8860:	d00e      	beq.n	8880 <isr+0x3c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    8862:	21a1      	movs	r1, #161	; 0xa1
    8864:	4e09      	ldr	r6, [pc, #36]	; (888c <isr+0x48>)
    8866:	00c9      	lsls	r1, r1, #3
    8868:	5871      	ldr	r1, [r6, r1]
    886a:	1882      	adds	r2, r0, r2
    886c:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    886e:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    8870:	3301      	adds	r3, #1
    8872:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    8874:	429d      	cmp	r5, r3
    8876:	d100      	bne.n	887a <isr+0x36>
		last = 0;
    8878:	2300      	movs	r3, #0
	}

	if (last == rng->first) {
		return 0;
    887a:	2000      	movs	r0, #0
	if (last == rng->first) {
    887c:	42a3      	cmp	r3, r4
    887e:	d001      	beq.n	8884 <isr+0x40>
	}

	return -EBUSY;
    8880:	2010      	movs	r0, #16
		return -ENOBUFS;
    8882:	4240      	negs	r0, r0
}
    8884:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8886:	2037      	movs	r0, #55	; 0x37
    8888:	e7fb      	b.n	8882 <isr+0x3e>
    888a:	46c0      	nop			; (mov r8, r8)
    888c:	4000d000 	.word	0x4000d000

00008890 <get>:
{
    8890:	b5f0      	push	{r4, r5, r6, r7, lr}
    8892:	b085      	sub	sp, #20
	LL_ASSERT(rng);
    8894:	2800      	cmp	r0, #0
    8896:	d102      	bne.n	889e <get+0xe>
    8898:	b662      	cpsie	i
    889a:	2004      	movs	r0, #4
    889c:	df02      	svc	2
	first = rng->first;
    889e:	7884      	ldrb	r4, [r0, #2]
	last = rng->last;
    88a0:	78c3      	ldrb	r3, [r0, #3]
    88a2:	1852      	adds	r2, r2, r1
    88a4:	1d25      	adds	r5, r4, #4
    88a6:	4694      	mov	ip, r2
		s = &rng->rand[first];
    88a8:	1945      	adds	r5, r0, r5
	if (first <= last) {
    88aa:	429c      	cmp	r4, r3
    88ac:	d81d      	bhi.n	88ea <get+0x5a>
		avail = last - first;
    88ae:	1b1b      	subs	r3, r3, r4
    88b0:	b2db      	uxtb	r3, r3
			remaining = 0;
    88b2:	2700      	movs	r7, #0
		if (octets < avail) {
    88b4:	4299      	cmp	r1, r3
    88b6:	d203      	bcs.n	88c0 <get+0x30>
			remaining = avail - octets;
    88b8:	b2ce      	uxtb	r6, r1
    88ba:	1b9b      	subs	r3, r3, r6
    88bc:	b2df      	uxtb	r7, r3
			avail = octets;
    88be:	0033      	movs	r3, r6
		first += avail;
    88c0:	191c      	adds	r4, r3, r4
		octets -= avail;
    88c2:	1ac9      	subs	r1, r1, r3
		first += avail;
    88c4:	b2e4      	uxtb	r4, r4
    88c6:	18eb      	adds	r3, r5, r3
		while (avail--) {
    88c8:	42ab      	cmp	r3, r5
    88ca:	d109      	bne.n	88e0 <get+0x50>
	if (remaining < rng->threshold) {
    88cc:	7843      	ldrb	r3, [r0, #1]
		rng->first = first;
    88ce:	7084      	strb	r4, [r0, #2]
	if (remaining < rng->threshold) {
    88d0:	42bb      	cmp	r3, r7
    88d2:	d902      	bls.n	88da <get+0x4a>
		NRF_RNG->TASKS_START = 1;
    88d4:	2201      	movs	r2, #1
    88d6:	4b23      	ldr	r3, [pc, #140]	; (8964 <get+0xd4>)
    88d8:	601a      	str	r2, [r3, #0]
}
    88da:	0008      	movs	r0, r1
    88dc:	b005      	add	sp, #20
    88de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*(--d) = *s++;
    88e0:	782e      	ldrb	r6, [r5, #0]
    88e2:	3a01      	subs	r2, #1
    88e4:	7016      	strb	r6, [r2, #0]
    88e6:	3501      	adds	r5, #1
    88e8:	e7ee      	b.n	88c8 <get+0x38>
		avail = rng->count - first;
    88ea:	7802      	ldrb	r2, [r0, #0]
    88ec:	1b12      	subs	r2, r2, r4
    88ee:	b2d2      	uxtb	r2, r2
		if (octets < avail) {
    88f0:	4291      	cmp	r1, r2
    88f2:	d225      	bcs.n	8940 <get+0xb0>
			remaining = avail + last - octets;
    88f4:	b2ce      	uxtb	r6, r1
    88f6:	1b9f      	subs	r7, r3, r6
    88f8:	19d7      	adds	r7, r2, r7
			avail = octets;
    88fa:	0032      	movs	r2, r6
			first += avail;
    88fc:	19a4      	adds	r4, r4, r6
			remaining = avail + last - octets;
    88fe:	b2ff      	uxtb	r7, r7
			first += avail;
    8900:	b2e4      	uxtb	r4, r4
    8902:	18ae      	adds	r6, r5, r2
    8904:	9501      	str	r5, [sp, #4]
		d = &rand[octets];
    8906:	4665      	mov	r5, ip
		octets -= avail;
    8908:	1a89      	subs	r1, r1, r2
    890a:	9603      	str	r6, [sp, #12]
		d = &rand[octets];
    890c:	9502      	str	r5, [sp, #8]
		while (avail--) {
    890e:	9e03      	ldr	r6, [sp, #12]
    8910:	9d01      	ldr	r5, [sp, #4]
    8912:	42b5      	cmp	r5, r6
    8914:	d117      	bne.n	8946 <get+0xb6>
    8916:	4665      	mov	r5, ip
    8918:	1aaa      	subs	r2, r5, r2
		if (octets && last) {
    891a:	2900      	cmp	r1, #0
    891c:	d0d6      	beq.n	88cc <get+0x3c>
    891e:	2b00      	cmp	r3, #0
    8920:	d0d4      	beq.n	88cc <get+0x3c>
			s = &rng->rand[0];
    8922:	1d05      	adds	r5, r0, #4
			if (octets < last) {
    8924:	4299      	cmp	r1, r3
    8926:	d219      	bcs.n	895c <get+0xcc>
				remaining = last - octets;
    8928:	b2cc      	uxtb	r4, r1
    892a:	1b1b      	subs	r3, r3, r4
    892c:	b2df      	uxtb	r7, r3
			octets -= last;
    892e:	1b09      	subs	r1, r1, r4
    8930:	192b      	adds	r3, r5, r4
			while (last--) {
    8932:	429d      	cmp	r5, r3
    8934:	d0ca      	beq.n	88cc <get+0x3c>
				*(--d) = *s++;
    8936:	782e      	ldrb	r6, [r5, #0]
    8938:	3a01      	subs	r2, #1
    893a:	7016      	strb	r6, [r2, #0]
    893c:	3501      	adds	r5, #1
    893e:	e7f8      	b.n	8932 <get+0xa2>
    8940:	001f      	movs	r7, r3
			first = 0;
    8942:	2400      	movs	r4, #0
    8944:	e7dd      	b.n	8902 <get+0x72>
			*(--d) = *s++;
    8946:	9e02      	ldr	r6, [sp, #8]
    8948:	9d01      	ldr	r5, [sp, #4]
    894a:	3e01      	subs	r6, #1
    894c:	9602      	str	r6, [sp, #8]
    894e:	782e      	ldrb	r6, [r5, #0]
    8950:	9d02      	ldr	r5, [sp, #8]
    8952:	702e      	strb	r6, [r5, #0]
    8954:	9e01      	ldr	r6, [sp, #4]
    8956:	3601      	adds	r6, #1
    8958:	9601      	str	r6, [sp, #4]
    895a:	e7d8      	b.n	890e <get+0x7e>
    895c:	001c      	movs	r4, r3
				remaining = 0;
    895e:	2700      	movs	r7, #0
    8960:	e7e5      	b.n	892e <get+0x9e>
    8962:	46c0      	nop			; (mov r8, r8)
    8964:	4000d000 	.word	0x4000d000

00008968 <init>:
{
    8968:	b510      	push	{r4, lr}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    896a:	1d1c      	adds	r4, r3, #4
    896c:	42a2      	cmp	r2, r4
    896e:	d802      	bhi.n	8976 <init+0xe>
    8970:	b662      	cpsie	i
    8972:	2004      	movs	r0, #4
    8974:	df02      	svc	2
	*rng = (struct rand *)context;
    8976:	6001      	str	r1, [r0, #0]
	p->threshold = threshold;
    8978:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    897a:	2300      	movs	r3, #0
	p->count = len - offsetof(struct rand, rand);
    897c:	3a04      	subs	r2, #4
	p->first = p->last = 0;
    897e:	70cb      	strb	r3, [r1, #3]
    8980:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    8982:	4b0a      	ldr	r3, [pc, #40]	; (89ac <init+0x44>)
	p->count = len - offsetof(struct rand, rand);
    8984:	700a      	strb	r2, [r1, #0]
	if (!rng_isr || !rng_thr) {
    8986:	681b      	ldr	r3, [r3, #0]
    8988:	2b00      	cmp	r3, #0
    898a:	d003      	beq.n	8994 <init+0x2c>
    898c:	4b08      	ldr	r3, [pc, #32]	; (89b0 <init+0x48>)
    898e:	681b      	ldr	r3, [r3, #0]
    8990:	2b00      	cmp	r3, #0
    8992:	d10a      	bne.n	89aa <init+0x42>
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    8994:	2201      	movs	r2, #1
		NRF_RNG->EVENTS_VALRDY = 0;
    8996:	2000      	movs	r0, #0
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    8998:	4b06      	ldr	r3, [pc, #24]	; (89b4 <init+0x4c>)
    899a:	4907      	ldr	r1, [pc, #28]	; (89b8 <init+0x50>)
    899c:	505a      	str	r2, [r3, r1]
		NRF_RNG->EVENTS_VALRDY = 0;
    899e:	4907      	ldr	r1, [pc, #28]	; (89bc <init+0x54>)
    89a0:	6048      	str	r0, [r1, #4]
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    89a2:	21c1      	movs	r1, #193	; 0xc1
    89a4:	0089      	lsls	r1, r1, #2
    89a6:	505a      	str	r2, [r3, r1]
		NRF_RNG->TASKS_START = 1;
    89a8:	601a      	str	r2, [r3, #0]
}
    89aa:	bd10      	pop	{r4, pc}
    89ac:	20000a54 	.word	0x20000a54
    89b0:	20000a58 	.word	0x20000a58
    89b4:	4000d000 	.word	0x4000d000
    89b8:	00000504 	.word	0x00000504
    89bc:	4000d0fc 	.word	0x4000d0fc

000089c0 <rand_init>:
{
    89c0:	b510      	push	{r4, lr}
    89c2:	0013      	movs	r3, r2
	init(&rng_thr, context, context_len, threshold);
    89c4:	000a      	movs	r2, r1
    89c6:	0001      	movs	r1, r0
    89c8:	4801      	ldr	r0, [pc, #4]	; (89d0 <rand_init+0x10>)
    89ca:	f7ff ffcd 	bl	8968 <init>
}
    89ce:	bd10      	pop	{r4, pc}
    89d0:	20000a58 	.word	0x20000a58

000089d4 <rand_isr_init>:
{
    89d4:	b510      	push	{r4, lr}
    89d6:	0013      	movs	r3, r2
	init(&rng_isr, context, context_len, threshold);
    89d8:	000a      	movs	r2, r1
    89da:	0001      	movs	r1, r0
    89dc:	4801      	ldr	r0, [pc, #4]	; (89e4 <rand_isr_init+0x10>)
    89de:	f7ff ffc3 	bl	8968 <init>
}
    89e2:	bd10      	pop	{r4, pc}
    89e4:	20000a54 	.word	0x20000a54

000089e8 <rand_get>:
{
    89e8:	b510      	push	{r4, lr}
	return get(rng_thr, octets, rand);
    89ea:	4b03      	ldr	r3, [pc, #12]	; (89f8 <rand_get+0x10>)
{
    89ec:	000a      	movs	r2, r1
	return get(rng_thr, octets, rand);
    89ee:	0001      	movs	r1, r0
    89f0:	6818      	ldr	r0, [r3, #0]
    89f2:	f7ff ff4d 	bl	8890 <get>
}
    89f6:	bd10      	pop	{r4, pc}
    89f8:	20000a58 	.word	0x20000a58

000089fc <rand_isr_get>:
{
    89fc:	b510      	push	{r4, lr}
	return get(rng_isr, octets, rand);
    89fe:	4b03      	ldr	r3, [pc, #12]	; (8a0c <rand_isr_get+0x10>)
{
    8a00:	000a      	movs	r2, r1
	return get(rng_isr, octets, rand);
    8a02:	0001      	movs	r1, r0
    8a04:	6818      	ldr	r0, [r3, #0]
    8a06:	f7ff ff43 	bl	8890 <get>
}
    8a0a:	bd10      	pop	{r4, pc}
    8a0c:	20000a54 	.word	0x20000a54

00008a10 <isr_rand>:

void isr_rand(void *param)
{
    8a10:	b510      	push	{r4, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    8a12:	4c0e      	ldr	r4, [pc, #56]	; (8a4c <isr_rand+0x3c>)
    8a14:	6863      	ldr	r3, [r4, #4]
    8a16:	2b00      	cmp	r3, #0
    8a18:	d016      	beq.n	8a48 <isr_rand+0x38>
		int ret;

		ret = isr(rng_isr, true);
    8a1a:	4b0d      	ldr	r3, [pc, #52]	; (8a50 <isr_rand+0x40>)
    8a1c:	2101      	movs	r1, #1
    8a1e:	6818      	ldr	r0, [r3, #0]
    8a20:	f7ff ff10 	bl	8844 <isr>
		if (ret != -EBUSY) {
    8a24:	0003      	movs	r3, r0
    8a26:	3310      	adds	r3, #16
    8a28:	d007      	beq.n	8a3a <isr_rand+0x2a>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    8a2a:	3037      	adds	r0, #55	; 0x37
    8a2c:	4241      	negs	r1, r0
    8a2e:	4141      	adcs	r1, r0
    8a30:	4b08      	ldr	r3, [pc, #32]	; (8a54 <isr_rand+0x44>)
    8a32:	b2c9      	uxtb	r1, r1
    8a34:	6818      	ldr	r0, [r3, #0]
    8a36:	f7ff ff05 	bl	8844 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    8a3a:	2300      	movs	r3, #0
    8a3c:	6063      	str	r3, [r4, #4]

		if (ret != -EBUSY) {
    8a3e:	3010      	adds	r0, #16
    8a40:	d002      	beq.n	8a48 <isr_rand+0x38>
			NRF_RNG->TASKS_STOP = 1;
    8a42:	2201      	movs	r2, #1
    8a44:	4b04      	ldr	r3, [pc, #16]	; (8a58 <isr_rand+0x48>)
    8a46:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
			NRF_RNG_regw_sideeffects();
#endif
		}
	}
}
    8a48:	bd10      	pop	{r4, pc}
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	4000d0fc 	.word	0x4000d0fc
    8a50:	20000a54 	.word	0x20000a54
    8a54:	20000a58 	.word	0x20000a58
    8a58:	4000d000 	.word	0x4000d000

00008a5c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    8a5c:	b570      	push	{r4, r5, r6, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    8a5e:	2401      	movs	r4, #1
    8a60:	4b0d      	ldr	r3, [pc, #52]	; (8a98 <do_ecb+0x3c>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    8a62:	4a0e      	ldr	r2, [pc, #56]	; (8a9c <do_ecb+0x40>)
		NRF_ECB->EVENTS_ENDECB = 0;
    8a64:	2500      	movs	r5, #0
    8a66:	490e      	ldr	r1, [pc, #56]	; (8aa0 <do_ecb+0x44>)
		NRF_ECB->TASKS_STOPECB = 1;
    8a68:	605c      	str	r4, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    8a6a:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    8a6c:	604d      	str	r5, [r1, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    8a6e:	608d      	str	r5, [r1, #8]
    8a70:	000d      	movs	r5, r1
		NRF_ECB->TASKS_STARTECB = 1;
    8a72:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8a74:	686e      	ldr	r6, [r5, #4]
    8a76:	2e00      	cmp	r6, #0
    8a78:	d105      	bne.n	8a86 <do_ecb+0x2a>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8a7a:	68ae      	ldr	r6, [r5, #8]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8a7c:	2e00      	cmp	r6, #0
    8a7e:	d102      	bne.n	8a86 <do_ecb+0x2a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    8a80:	589e      	ldr	r6, [r3, r2]
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8a82:	2e00      	cmp	r6, #0
    8a84:	d1f6      	bne.n	8a74 <do_ecb+0x18>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    8a86:	605c      	str	r4, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    8a88:	6889      	ldr	r1, [r1, #8]
    8a8a:	2900      	cmp	r1, #0
    8a8c:	d1ea      	bne.n	8a64 <do_ecb+0x8>
    8a8e:	589d      	ldr	r5, [r3, r2]
    8a90:	2d00      	cmp	r5, #0
    8a92:	d0e7      	beq.n	8a64 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    8a94:	5099      	str	r1, [r3, r2]
}
    8a96:	bd70      	pop	{r4, r5, r6, pc}
    8a98:	4000e000 	.word	0x4000e000
    8a9c:	00000504 	.word	0x00000504
    8aa0:	4000e0fc 	.word	0x4000e0fc

00008aa4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    8aa4:	b570      	push	{r4, r5, r6, lr}
    8aa6:	000e      	movs	r6, r1
    8aa8:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8aaa:	0001      	movs	r1, r0
{
    8aac:	0015      	movs	r5, r2
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8aae:	4668      	mov	r0, sp
    8ab0:	2210      	movs	r2, #16
{
    8ab2:	001c      	movs	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8ab4:	f7f9 fe4e 	bl	2754 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    8ab8:	a804      	add	r0, sp, #16
    8aba:	2210      	movs	r2, #16
    8abc:	0031      	movs	r1, r6
    8abe:	f7f9 fe49 	bl	2754 <mem_rcopy>

	do_ecb(&ecb);
    8ac2:	4668      	mov	r0, sp
    8ac4:	f7ff ffca 	bl	8a5c <do_ecb>

	if (cipher_text_le) {
    8ac8:	2d00      	cmp	r5, #0
    8aca:	d004      	beq.n	8ad6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    8acc:	2210      	movs	r2, #16
    8ace:	a908      	add	r1, sp, #32
    8ad0:	0028      	movs	r0, r5
    8ad2:	f7f9 fe3f 	bl	2754 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    8ad6:	2c00      	cmp	r4, #0
    8ad8:	d004      	beq.n	8ae4 <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    8ada:	2210      	movs	r2, #16
    8adc:	a908      	add	r1, sp, #32
    8ade:	0020      	movs	r0, r4
    8ae0:	f7f7 fdc2 	bl	668 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    8ae4:	b00c      	add	sp, #48	; 0x30
    8ae6:	bd70      	pop	{r4, r5, r6, pc}

00008ae8 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    8ae8:	22a2      	movs	r2, #162	; 0xa2
    8aea:	4b07      	ldr	r3, [pc, #28]	; (8b08 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    8aec:	4907      	ldr	r1, [pc, #28]	; (8b0c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    8aee:	00d2      	lsls	r2, r2, #3
    8af0:	5099      	str	r1, [r3, r2]
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    8af2:	2800      	cmp	r0, #0
    8af4:	d106      	bne.n	8b04 <hal_radio_enable_on_tick_ppi_config_and_enable+0x1c>
    8af6:	4a06      	ldr	r2, [pc, #24]	; (8b10 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    8af8:	4906      	ldr	r1, [pc, #24]	; (8b14 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    8afa:	505a      	str	r2, [r3, r1]
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    8afc:	2101      	movs	r1, #1
    8afe:	4a06      	ldr	r2, [pc, #24]	; (8b18 <hal_radio_enable_on_tick_ppi_config_and_enable+0x30>)
    8b00:	5099      	str	r1, [r3, r2]
}
    8b02:	4770      	bx	lr
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    8b04:	4a05      	ldr	r2, [pc, #20]	; (8b1c <hal_radio_enable_on_tick_ppi_config_and_enable+0x34>)
    8b06:	e7f7      	b.n	8af8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x10>
    8b08:	4001f000 	.word	0x4001f000
    8b0c:	40008140 	.word	0x40008140
    8b10:	40001004 	.word	0x40001004
    8b14:	00000514 	.word	0x00000514
    8b18:	00000504 	.word	0x00000504
    8b1c:	40001000 	.word	0x40001000

00008b20 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    8b20:	4b03      	ldr	r3, [pc, #12]	; (8b30 <isr_radio+0x10>)
{
    8b22:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    8b24:	681b      	ldr	r3, [r3, #0]
    8b26:	2b00      	cmp	r3, #0
    8b28:	d000      	beq.n	8b2c <isr_radio+0xc>
		sfp_radio_isr();
    8b2a:	4798      	blx	r3
	}
}
    8b2c:	bd10      	pop	{r4, pc}
    8b2e:	46c0      	nop			; (mov r8, r8)
    8b30:	20000ab8 	.word	0x20000ab8

00008b34 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    8b34:	4b08      	ldr	r3, [pc, #32]	; (8b58 <radio_isr_set+0x24>)
{
    8b36:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    8b38:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    8b3a:	23c1      	movs	r3, #193	; 0xc1
    8b3c:	2110      	movs	r1, #16
    8b3e:	4a07      	ldr	r2, [pc, #28]	; (8b5c <radio_isr_set+0x28>)
    8b40:	009b      	lsls	r3, r3, #2
    8b42:	50d1      	str	r1, [r2, r3]
    8b44:	4a06      	ldr	r2, [pc, #24]	; (8b60 <radio_isr_set+0x2c>)
    8b46:	3b85      	subs	r3, #133	; 0x85
    8b48:	390e      	subs	r1, #14
    8b4a:	3bff      	subs	r3, #255	; 0xff
    8b4c:	50d1      	str	r1, [r2, r3]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_INTENSET();
#endif
	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    8b4e:	2001      	movs	r0, #1
    8b50:	f7f7 ff20 	bl	994 <_arch_irq_enable>
}
    8b54:	bd10      	pop	{r4, pc}
    8b56:	46c0      	nop			; (mov r8, r8)
    8b58:	20000ab8 	.word	0x20000ab8
    8b5c:	40001000 	.word	0x40001000
    8b60:	e000e100 	.word	0xe000e100

00008b64 <radio_setup>:

	radio_gpio_lna_off();
#endif /* CONFIG_BT_CTLR_GPIO_LNA_PIN */

	hal_radio_ram_prio_setup();
}
    8b64:	4770      	bx	lr
	...

00008b68 <radio_reset>:

void radio_reset(void)
{
    8b68:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    8b6a:	2001      	movs	r0, #1
    8b6c:	f7f7 ff1e 	bl	9ac <_arch_irq_disable>

	NRF_RADIO->POWER =
    8b70:	2100      	movs	r1, #0
    8b72:	4a03      	ldr	r2, [pc, #12]	; (8b80 <radio_reset+0x18>)
    8b74:	4b03      	ldr	r3, [pc, #12]	; (8b84 <radio_reset+0x1c>)
    8b76:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif
	NRF_RADIO->POWER =
    8b78:	3101      	adds	r1, #1
    8b7a:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_POWER();
#endif

	hal_radio_reset();
}
    8b7c:	bd10      	pop	{r4, pc}
    8b7e:	46c0      	nop			; (mov r8, r8)
    8b80:	40001000 	.word	0x40001000
    8b84:	00000ffc 	.word	0x00000ffc

00008b88 <radio_phy_set>:
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    8b88:	2301      	movs	r3, #1
	switch (phy) {
    8b8a:	2802      	cmp	r0, #2
    8b8c:	d000      	beq.n	8b90 <radio_phy_set+0x8>
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    8b8e:	3302      	adds	r3, #2
{
	u32_t mode;

	mode = hal_radio_phy_mode_get(phy, flags);

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    8b90:	22a2      	movs	r2, #162	; 0xa2
    8b92:	4902      	ldr	r1, [pc, #8]	; (8b9c <radio_phy_set+0x14>)
    8b94:	00d2      	lsls	r2, r2, #3
    8b96:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BT_CTLR_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BT_CTLR_RADIO_ENABLE_FAST */
}
    8b98:	4770      	bx	lr
    8b9a:	46c0      	nop			; (mov r8, r8)
    8b9c:	40001000 	.word	0x40001000

00008ba0 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    8ba0:	4b01      	ldr	r3, [pc, #4]	; (8ba8 <radio_tx_power_set+0x8>)
    8ba2:	4a02      	ldr	r2, [pc, #8]	; (8bac <radio_tx_power_set+0xc>)
    8ba4:	50d0      	str	r0, [r2, r3]
}
    8ba6:	4770      	bx	lr
    8ba8:	0000050c 	.word	0x0000050c
    8bac:	40001000 	.word	0x40001000

00008bb0 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    8bb0:	23a1      	movs	r3, #161	; 0xa1
    8bb2:	4a02      	ldr	r2, [pc, #8]	; (8bbc <radio_freq_chan_set+0xc>)
    8bb4:	00db      	lsls	r3, r3, #3
    8bb6:	50d0      	str	r0, [r2, r3]
}
    8bb8:	4770      	bx	lr
    8bba:	46c0      	nop			; (mov r8, r8)
    8bbc:	40001000 	.word	0x40001000

00008bc0 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    8bc0:	4b06      	ldr	r3, [pc, #24]	; (8bdc <radio_whiten_iv_set+0x1c>)
    8bc2:	4a07      	ldr	r2, [pc, #28]	; (8be0 <radio_whiten_iv_set+0x20>)
    8bc4:	5098      	str	r0, [r3, r2]

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    8bc6:	3a3c      	subs	r2, #60	; 0x3c
    8bc8:	5899      	ldr	r1, [r3, r2]
    8bca:	4806      	ldr	r0, [pc, #24]	; (8be4 <radio_whiten_iv_set+0x24>)
    8bcc:	4001      	ands	r1, r0
    8bce:	5099      	str	r1, [r3, r2]
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    8bd0:	2180      	movs	r1, #128	; 0x80
    8bd2:	5898      	ldr	r0, [r3, r2]
    8bd4:	0489      	lsls	r1, r1, #18
    8bd6:	4301      	orrs	r1, r0
    8bd8:	5099      	str	r1, [r3, r2]
			    RADIO_PCNF1_WHITEEN_Msk;
}
    8bda:	4770      	bx	lr
    8bdc:	40001000 	.word	0x40001000
    8be0:	00000554 	.word	0x00000554
    8be4:	fdffffff 	.word	0xfdffffff

00008be8 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    8be8:	2100      	movs	r1, #0
    8bea:	4a0a      	ldr	r2, [pc, #40]	; (8c14 <radio_aa_set+0x2c>)
    8bec:	4b0a      	ldr	r3, [pc, #40]	; (8c18 <radio_aa_set+0x30>)
    8bee:	50d1      	str	r1, [r2, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    8bf0:	3101      	adds	r1, #1
    8bf2:	3304      	adds	r3, #4
    8bf4:	50d1      	str	r1, [r2, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    8bf6:	78c1      	ldrb	r1, [r0, #3]
    8bf8:	4b08      	ldr	r3, [pc, #32]	; (8c1c <radio_aa_set+0x34>)
    8bfa:	50d1      	str	r1, [r2, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    8bfc:	7883      	ldrb	r3, [r0, #2]
    8bfe:	7841      	ldrb	r1, [r0, #1]
    8c00:	061b      	lsls	r3, r3, #24
    8c02:	0409      	lsls	r1, r1, #16
    8c04:	430b      	orrs	r3, r1
    8c06:	7801      	ldrb	r1, [r0, #0]
    8c08:	0209      	lsls	r1, r1, #8
    8c0a:	430b      	orrs	r3, r1
    8c0c:	4904      	ldr	r1, [pc, #16]	; (8c20 <radio_aa_set+0x38>)
    8c0e:	5053      	str	r3, [r2, r1]
}
    8c10:	4770      	bx	lr
    8c12:	46c0      	nop			; (mov r8, r8)
    8c14:	40001000 	.word	0x40001000
    8c18:	0000052c 	.word	0x0000052c
    8c1c:	00000524 	.word	0x00000524
    8c20:	0000051c 	.word	0x0000051c

00008c24 <radio_pkt_configure>:

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    8c24:	b510      	push	{r4, lr}
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DATA_LENGTH_CLEAR) && dc) {
    8c26:	07d3      	lsls	r3, r2, #31
    8c28:	d500      	bpl.n	8c2c <radio_pkt_configure+0x8>
		bits_len = 5;
    8c2a:	2005      	movs	r0, #5

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    8c2c:	2308      	movs	r3, #8
    8c2e:	22f0      	movs	r2, #240	; 0xf0
    8c30:	1a1b      	subs	r3, r3, r0
    8c32:	0312      	lsls	r2, r2, #12
    8c34:	041b      	lsls	r3, r3, #16
    8c36:	4013      	ands	r3, r2
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    8c38:	220f      	movs	r2, #15
    8c3a:	4010      	ands	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    8c3c:	32f1      	adds	r2, #241	; 0xf1
    8c3e:	4310      	orrs	r0, r2
    8c40:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    8c42:	4a08      	ldr	r2, [pc, #32]	; (8c64 <radio_pkt_configure+0x40>)
    8c44:	4b08      	ldr	r3, [pc, #32]	; (8c68 <radio_pkt_configure+0x44>)
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    8c46:	4c09      	ldr	r4, [pc, #36]	; (8c6c <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    8c48:	5098      	str	r0, [r3, r2]
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    8c4a:	20a3      	movs	r0, #163	; 0xa3
    8c4c:	00c0      	lsls	r0, r0, #3
    8c4e:	581a      	ldr	r2, [r3, r0]
    8c50:	4022      	ands	r2, r4
    8c52:	501a      	str	r2, [r3, r0]
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    8c54:	22c0      	movs	r2, #192	; 0xc0
    8c56:	581c      	ldr	r4, [r3, r0]
    8c58:	0292      	lsls	r2, r2, #10
    8c5a:	4322      	orrs	r2, r4
    8c5c:	4311      	orrs	r1, r2
    8c5e:	5019      	str	r1, [r3, r0]
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    8c60:	bd10      	pop	{r4, pc}
    8c62:	46c0      	nop			; (mov r8, r8)
    8c64:	00000514 	.word	0x00000514
    8c68:	40001000 	.word	0x40001000
    8c6c:	fef80000 	.word	0xfef80000

00008c70 <radio_pkt_rx_set>:
    8c70:	4b01      	ldr	r3, [pc, #4]	; (8c78 <radio_pkt_rx_set+0x8>)
    8c72:	4a02      	ldr	r2, [pc, #8]	; (8c7c <radio_pkt_rx_set+0xc>)
    8c74:	50d0      	str	r0, [r2, r3]
    8c76:	4770      	bx	lr
    8c78:	00000504 	.word	0x00000504
    8c7c:	40001000 	.word	0x40001000

00008c80 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    8c80:	4b01      	ldr	r3, [pc, #4]	; (8c88 <radio_pkt_tx_set+0x8>)
    8c82:	4a02      	ldr	r2, [pc, #8]	; (8c8c <radio_pkt_tx_set+0xc>)
    8c84:	50d0      	str	r0, [r2, r3]
}
    8c86:	4770      	bx	lr
    8c88:	00000504 	.word	0x00000504
    8c8c:	40001000 	.word	0x40001000

00008c90 <radio_tx_ready_delay_get>:

u32_t radio_tx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_ready_delay_us_get(phy, flags);
}
    8c90:	208c      	movs	r0, #140	; 0x8c
    8c92:	4770      	bx	lr

00008c94 <radio_tx_chain_delay_get>:

u32_t radio_tx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_tx_chain_delay_us_get(phy, flags);
}
    8c94:	2001      	movs	r0, #1
    8c96:	4770      	bx	lr

00008c98 <radio_rx_ready_delay_get>:

u32_t radio_rx_ready_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_ready_delay_us_get(phy, flags);
}
    8c98:	208a      	movs	r0, #138	; 0x8a
    8c9a:	4770      	bx	lr

00008c9c <radio_rx_chain_delay_get>:

u32_t radio_rx_chain_delay_get(u8_t phy, u8_t flags)
{
	return hal_radio_rx_chain_delay_us_get(phy, flags);
}
    8c9c:	2003      	movs	r0, #3
    8c9e:	4770      	bx	lr

00008ca0 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    8ca0:	2201      	movs	r2, #1
    8ca2:	4b01      	ldr	r3, [pc, #4]	; (8ca8 <radio_rx_enable+0x8>)
    8ca4:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_RXEN();
#endif
}
    8ca6:	4770      	bx	lr
    8ca8:	40001000 	.word	0x40001000

00008cac <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    8cac:	2201      	movs	r2, #1
    8cae:	4b01      	ldr	r3, [pc, #4]	; (8cb4 <radio_tx_enable+0x8>)
    8cb0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_TXEN();
#endif
}
    8cb2:	4770      	bx	lr
    8cb4:	40001000 	.word	0x40001000

00008cb8 <radio_disable>:
	NRF_PPI_regw_sideeffects_CHEN();
	NRF_PPI_tasw_sideeffects();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    8cb8:	2280      	movs	r2, #128	; 0x80
    8cba:	2100      	movs	r1, #0
    8cbc:	4b02      	ldr	r3, [pc, #8]	; (8cc8 <radio_disable+0x10>)
    8cbe:	0092      	lsls	r2, r2, #2
    8cc0:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    8cc2:	2201      	movs	r2, #1
    8cc4:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RADIO_regw_sideeffects_TASKS_DISABLE();
#endif
}
    8cc6:	4770      	bx	lr
    8cc8:	40001000 	.word	0x40001000

00008ccc <radio_status_reset>:
	/* NOTE: Only EVENTS_* registers read (checked) by software needs reset
	 *       between Radio IRQs. In PPI use, irrespective of stored EVENT_*
	 *       register value, PPI task will be triggered. Hence, other
	 *       EVENT_* registers are not reset to save code and CPU time.
	 */
	NRF_RADIO->EVENTS_READY = 0;
    8ccc:	2200      	movs	r2, #0
    8cce:	4b02      	ldr	r3, [pc, #8]	; (8cd8 <radio_status_reset+0xc>)
    8cd0:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_END = 0;
    8cd2:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    8cd4:	615a      	str	r2, [r3, #20]
}
    8cd6:	4770      	bx	lr
    8cd8:	400010fc 	.word	0x400010fc

00008cdc <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    8cdc:	4b02      	ldr	r3, [pc, #8]	; (8ce8 <radio_is_ready+0xc>)
    8cde:	6858      	ldr	r0, [r3, #4]
    8ce0:	1e43      	subs	r3, r0, #1
    8ce2:	4198      	sbcs	r0, r3
}
    8ce4:	4770      	bx	lr
    8ce6:	46c0      	nop			; (mov r8, r8)
    8ce8:	400010fc 	.word	0x400010fc

00008cec <radio_is_done>:
}

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    8cec:	4b02      	ldr	r3, [pc, #8]	; (8cf8 <radio_is_done+0xc>)
    8cee:	6918      	ldr	r0, [r3, #16]
    8cf0:	1e43      	subs	r3, r0, #1
    8cf2:	4198      	sbcs	r0, r3
}
    8cf4:	4770      	bx	lr
    8cf6:	46c0      	nop			; (mov r8, r8)
    8cf8:	400010fc 	.word	0x400010fc

00008cfc <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    8cfc:	23aa      	movs	r3, #170	; 0xaa
    8cfe:	4a03      	ldr	r2, [pc, #12]	; (8d0c <radio_is_idle+0x10>)
    8d00:	00db      	lsls	r3, r3, #3
    8d02:	58d0      	ldr	r0, [r2, r3]
    8d04:	4243      	negs	r3, r0
    8d06:	4158      	adcs	r0, r3
}
    8d08:	4770      	bx	lr
    8d0a:	46c0      	nop			; (mov r8, r8)
    8d0c:	40001000 	.word	0x40001000

00008d10 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    8d10:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    8d12:	2404      	movs	r4, #4
    8d14:	4b04      	ldr	r3, [pc, #16]	; (8d28 <radio_crc_configure+0x18>)
    8d16:	4a05      	ldr	r2, [pc, #20]	; (8d2c <radio_crc_configure+0x1c>)
    8d18:	34ff      	adds	r4, #255	; 0xff
    8d1a:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    8d1c:	3204      	adds	r2, #4
    8d1e:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    8d20:	4a03      	ldr	r2, [pc, #12]	; (8d30 <radio_crc_configure+0x20>)
    8d22:	5099      	str	r1, [r3, r2]
}
    8d24:	bd10      	pop	{r4, pc}
    8d26:	46c0      	nop			; (mov r8, r8)
    8d28:	40001000 	.word	0x40001000
    8d2c:	00000534 	.word	0x00000534
    8d30:	0000053c 	.word	0x0000053c

00008d34 <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    8d34:	2380      	movs	r3, #128	; 0x80
    8d36:	4a03      	ldr	r2, [pc, #12]	; (8d44 <radio_crc_is_valid+0x10>)
    8d38:	00db      	lsls	r3, r3, #3
    8d3a:	58d0      	ldr	r0, [r2, r3]
    8d3c:	1e43      	subs	r3, r0, #1
    8d3e:	4198      	sbcs	r0, r3
}
    8d40:	4770      	bx	lr
    8d42:	46c0      	nop			; (mov r8, r8)
    8d44:	40001000 	.word	0x40001000

00008d48 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    8d48:	4800      	ldr	r0, [pc, #0]	; (8d4c <radio_pkt_empty_get+0x4>)
    8d4a:	4770      	bx	lr
    8d4c:	20000a88 	.word	0x20000a88

00008d50 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    8d50:	4800      	ldr	r0, [pc, #0]	; (8d54 <radio_pkt_scratch_get+0x4>)
    8d52:	4770      	bx	lr
    8d54:	20000a8c 	.word	0x20000a8c

00008d58 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8d58:	2380      	movs	r3, #128	; 0x80
    8d5a:	210b      	movs	r1, #11
    8d5c:	4a01      	ldr	r2, [pc, #4]	; (8d64 <radio_switch_complete_and_rx+0xc>)
    8d5e:	009b      	lsls	r3, r3, #2
    8d60:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8d62:	4770      	bx	lr
    8d64:	40001000 	.word	0x40001000

00008d68 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8d68:	2380      	movs	r3, #128	; 0x80
    8d6a:	2107      	movs	r1, #7
    8d6c:	4a01      	ldr	r2, [pc, #4]	; (8d74 <radio_switch_complete_and_tx+0xc>)
    8d6e:	009b      	lsls	r3, r3, #2
    8d70:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8d72:	4770      	bx	lr
    8d74:	40001000 	.word	0x40001000

00008d78 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    8d78:	2380      	movs	r3, #128	; 0x80
    8d7a:	2103      	movs	r1, #3
    8d7c:	4a01      	ldr	r2, [pc, #4]	; (8d84 <radio_switch_complete_and_disable+0xc>)
    8d7e:	009b      	lsls	r3, r3, #2
    8d80:	50d1      	str	r1, [r2, r3]
			   HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8d82:	4770      	bx	lr
    8d84:	40001000 	.word	0x40001000

00008d88 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    8d88:	2280      	movs	r2, #128	; 0x80
    8d8a:	2388      	movs	r3, #136	; 0x88
    8d8c:	4903      	ldr	r1, [pc, #12]	; (8d9c <radio_rssi_measure+0x14>)
    8d8e:	0092      	lsls	r2, r2, #2
    8d90:	5888      	ldr	r0, [r1, r2]
    8d92:	005b      	lsls	r3, r3, #1
    8d94:	4303      	orrs	r3, r0
    8d96:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    8d98:	4770      	bx	lr
    8d9a:	46c0      	nop			; (mov r8, r8)
    8d9c:	40001000 	.word	0x40001000

00008da0 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    8da0:	23a9      	movs	r3, #169	; 0xa9
    8da2:	4a02      	ldr	r2, [pc, #8]	; (8dac <radio_rssi_get+0xc>)
    8da4:	00db      	lsls	r3, r3, #3
    8da6:	58d0      	ldr	r0, [r2, r3]
}
    8da8:	4770      	bx	lr
    8daa:	46c0      	nop			; (mov r8, r8)
    8dac:	40001000 	.word	0x40001000

00008db0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    8db0:	2200      	movs	r2, #0
    8db2:	4b01      	ldr	r3, [pc, #4]	; (8db8 <radio_rssi_status_reset+0x8>)
    8db4:	621a      	str	r2, [r3, #32]
}
    8db6:	4770      	bx	lr
    8db8:	400010fc 	.word	0x400010fc

00008dbc <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    8dbc:	4b02      	ldr	r3, [pc, #8]	; (8dc8 <radio_rssi_is_ready+0xc>)
    8dbe:	6a18      	ldr	r0, [r3, #32]
    8dc0:	1e43      	subs	r3, r0, #1
    8dc2:	4198      	sbcs	r0, r3
}
    8dc4:	4770      	bx	lr
    8dc6:	46c0      	nop			; (mov r8, r8)
    8dc8:	400010fc 	.word	0x400010fc

00008dcc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    8dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8dce:	27c0      	movs	r7, #192	; 0xc0
{
    8dd0:	2400      	movs	r4, #0
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8dd2:	00ff      	lsls	r7, r7, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    8dd4:	7855      	ldrb	r5, [r2, #1]
    8dd6:	7813      	ldrb	r3, [r2, #0]
    8dd8:	022d      	lsls	r5, r5, #8
    8dda:	431d      	orrs	r5, r3
    8ddc:	7893      	ldrb	r3, [r2, #2]
    8dde:	4e0e      	ldr	r6, [pc, #56]	; (8e18 <radio_filter_configure+0x4c>)
    8de0:	041b      	lsls	r3, r3, #16
    8de2:	431d      	orrs	r5, r3
    8de4:	78d3      	ldrb	r3, [r2, #3]
    8de6:	061b      	lsls	r3, r3, #24
    8de8:	432b      	orrs	r3, r5
    8dea:	00a5      	lsls	r5, r4, #2
    8dec:	19ad      	adds	r5, r5, r6
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8dee:	51eb      	str	r3, [r5, r7]
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    8df0:	7913      	ldrb	r3, [r2, #4]
    8df2:	3401      	adds	r4, #1
    8df4:	469c      	mov	ip, r3
    8df6:	4666      	mov	r6, ip
    8df8:	7953      	ldrb	r3, [r2, #5]
		bdaddr += 6;
    8dfa:	3206      	adds	r2, #6
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    8dfc:	021b      	lsls	r3, r3, #8
    8dfe:	4333      	orrs	r3, r6
    8e00:	26c4      	movs	r6, #196	; 0xc4
    8e02:	00f6      	lsls	r6, r6, #3
    8e04:	51ab      	str	r3, [r5, r6]
	for (index = 0; index < 8; index++) {
    8e06:	2c08      	cmp	r4, #8
    8e08:	d1e4      	bne.n	8dd4 <radio_filter_configure+0x8>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    8e0a:	23c8      	movs	r3, #200	; 0xc8
    8e0c:	0209      	lsls	r1, r1, #8
    8e0e:	4a02      	ldr	r2, [pc, #8]	; (8e18 <radio_filter_configure+0x4c>)
    8e10:	4308      	orrs	r0, r1
    8e12:	00db      	lsls	r3, r3, #3
    8e14:	50d0      	str	r0, [r2, r3]
}
    8e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e18:	40001000 	.word	0x40001000

00008e1c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    8e1c:	22c8      	movs	r2, #200	; 0xc8
    8e1e:	20ff      	movs	r0, #255	; 0xff
    8e20:	4902      	ldr	r1, [pc, #8]	; (8e2c <radio_filter_disable+0x10>)
    8e22:	00d2      	lsls	r2, r2, #3
    8e24:	588b      	ldr	r3, [r1, r2]
    8e26:	4383      	bics	r3, r0
    8e28:	508b      	str	r3, [r1, r2]
}
    8e2a:	4770      	bx	lr
    8e2c:	40001000 	.word	0x40001000

00008e30 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    8e30:	2200      	movs	r2, #0
    8e32:	4b01      	ldr	r3, [pc, #4]	; (8e38 <radio_filter_status_reset+0x8>)
    8e34:	619a      	str	r2, [r3, #24]
}
    8e36:	4770      	bx	lr
    8e38:	400010fc 	.word	0x400010fc

00008e3c <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    8e3c:	4b02      	ldr	r3, [pc, #8]	; (8e48 <radio_filter_has_match+0xc>)
    8e3e:	6998      	ldr	r0, [r3, #24]
    8e40:	1e43      	subs	r3, r0, #1
    8e42:	4198      	sbcs	r0, r3
}
    8e44:	4770      	bx	lr
    8e46:	46c0      	nop			; (mov r8, r8)
    8e48:	400010fc 	.word	0x400010fc

00008e4c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    8e4c:	2382      	movs	r3, #130	; 0x82
    8e4e:	4a02      	ldr	r2, [pc, #8]	; (8e58 <radio_filter_match_get+0xc>)
    8e50:	00db      	lsls	r3, r3, #3
    8e52:	58d0      	ldr	r0, [r2, r3]
}
    8e54:	4770      	bx	lr
    8e56:	46c0      	nop			; (mov r8, r8)
    8e58:	40001000 	.word	0x40001000

00008e5c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    8e5c:	2180      	movs	r1, #128	; 0x80
    8e5e:	23d2      	movs	r3, #210	; 0xd2
    8e60:	4a04      	ldr	r2, [pc, #16]	; (8e74 <radio_tmr_status_reset+0x18>)
    8e62:	02c9      	lsls	r1, r1, #11
    8e64:	009b      	lsls	r3, r3, #2
    8e66:	50d1      	str	r1, [r2, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    8e68:	217f      	movs	r1, #127	; 0x7f
    8e6a:	4a03      	ldr	r2, [pc, #12]	; (8e78 <radio_tmr_status_reset+0x1c>)
    8e6c:	33c1      	adds	r3, #193	; 0xc1
    8e6e:	33ff      	adds	r3, #255	; 0xff
    8e70:	50d1      	str	r1, [r2, r3]
			HAL_TRIGGER_CRYPT_PPI_DISABLE;

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
}
    8e72:	4770      	bx	lr
    8e74:	4000b000 	.word	0x4000b000
    8e78:	4001f000 	.word	0x4001f000

00008e7c <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    8e7c:	4b01      	ldr	r3, [pc, #4]	; (8e84 <radio_tmr_tifs_set+0x8>)
    8e7e:	4a02      	ldr	r2, [pc, #8]	; (8e88 <radio_tmr_tifs_set+0xc>)
    8e80:	50d0      	str	r0, [r2, r3]
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8e82:	4770      	bx	lr
    8e84:	00000544 	.word	0x00000544
    8e88:	40001000 	.word	0x40001000

00008e8c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    8e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    8e8e:	4b1a      	ldr	r3, [pc, #104]	; (8ef8 <radio_tmr_start+0x6c>)
{
    8e90:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    8e92:	18d1      	adds	r1, r2, r3
    8e94:	4b19      	ldr	r3, [pc, #100]	; (8efc <radio_tmr_start+0x70>)
{
    8e96:	0005      	movs	r5, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    8e98:	4299      	cmp	r1, r3
    8e9a:	d902      	bls.n	8ea2 <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    8e9c:	4b18      	ldr	r3, [pc, #96]	; (8f00 <radio_tmr_start+0x74>)
		ticks_start--;
    8e9e:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    8ea0:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    8ea2:	4918      	ldr	r1, [pc, #96]	; (8f04 <radio_tmr_start+0x78>)
    8ea4:	0010      	movs	r0, r2
    8ea6:	f7f7 f98f 	bl	1c8 <__aeabi_uidiv>

	EVENT_TIMER->TASKS_CLEAR = 1;
    8eaa:	2201      	movs	r2, #1
    8eac:	4b16      	ldr	r3, [pc, #88]	; (8f08 <radio_tmr_start+0x7c>)
	EVENT_TIMER->MODE = 0;
    8eae:	4917      	ldr	r1, [pc, #92]	; (8f0c <radio_tmr_start+0x80>)
	EVENT_TIMER->TASKS_CLEAR = 1;
    8eb0:	60da      	str	r2, [r3, #12]
	EVENT_TIMER->MODE = 0;
    8eb2:	2200      	movs	r2, #0
    8eb4:	505a      	str	r2, [r3, r1]
	EVENT_TIMER->PRESCALER = 4;
    8eb6:	22a2      	movs	r2, #162	; 0xa2
	remainder /= 1000000UL;
    8eb8:	0006      	movs	r6, r0
	EVENT_TIMER->PRESCALER = 4;
    8eba:	2004      	movs	r0, #4

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    8ebc:	27a9      	movs	r7, #169	; 0xa9
	EVENT_TIMER->PRESCALER = 4;
    8ebe:	00d2      	lsls	r2, r2, #3
    8ec0:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    8ec2:	3802      	subs	r0, #2
    8ec4:	3a08      	subs	r2, #8
    8ec6:	5098      	str	r0, [r3, r2]
	EVENT_TIMER->CC[0] = remainder;
    8ec8:	3238      	adds	r2, #56	; 0x38
    8eca:	509e      	str	r6, [r3, r2]
	NRF_RTC0->CC[2] = ticks_start;
    8ecc:	4a10      	ldr	r2, [pc, #64]	; (8f10 <radio_tmr_start+0x84>)
    8ece:	00ff      	lsls	r7, r7, #3
    8ed0:	51d4      	str	r4, [r2, r7]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    8ed2:	2780      	movs	r7, #128	; 0x80
    8ed4:	24d1      	movs	r4, #209	; 0xd1
    8ed6:	02ff      	lsls	r7, r7, #11
    8ed8:	00a4      	lsls	r4, r4, #2
    8eda:	5117      	str	r7, [r2, r4]

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    8edc:	4a0d      	ldr	r2, [pc, #52]	; (8f14 <radio_tmr_start+0x88>)
    8ede:	4f0e      	ldr	r7, [pc, #56]	; (8f18 <radio_tmr_start+0x8c>)
    8ee0:	34d5      	adds	r4, #213	; 0xd5
    8ee2:	34ff      	adds	r4, #255	; 0xff
    8ee4:	5117      	str	r7, [r2, r4]
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    8ee6:	4c0d      	ldr	r4, [pc, #52]	; (8f1c <radio_tmr_start+0x90>)
    8ee8:	5113      	str	r3, [r2, r4]
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    8eea:	5050      	str	r0, [r2, r1]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    8eec:	0028      	movs	r0, r5
    8eee:	f7ff fdfb 	bl	8ae8 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    8ef2:	0030      	movs	r0, r6
    8ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ef6:	46c0      	nop			; (mov r8, r8)
    8ef8:	fff0bdc0 	.word	0xfff0bdc0
    8efc:	7ff0bdbf 	.word	0x7ff0bdbf
    8f00:	01d1a94a 	.word	0x01d1a94a
    8f04:	000f4240 	.word	0x000f4240
    8f08:	40008000 	.word	0x40008000
    8f0c:	00000504 	.word	0x00000504
    8f10:	4000b000 	.word	0x4000b000
    8f14:	4001f000 	.word	0x4001f000
    8f18:	4000b148 	.word	0x4000b148
    8f1c:	0000051c 	.word	0x0000051c

00008f20 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    8f20:	2201      	movs	r2, #1
    8f22:	4b02      	ldr	r3, [pc, #8]	; (8f2c <radio_tmr_stop+0xc>)
    8f24:	605a      	str	r2, [r3, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    8f26:	611a      	str	r2, [r3, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_STOP(SW_SWITCH_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8f28:	4770      	bx	lr
    8f2a:	46c0      	nop			; (mov r8, r8)
    8f2c:	40008000 	.word	0x40008000

00008f30 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    8f30:	4b0a      	ldr	r3, [pc, #40]	; (8f5c <radio_tmr_hcto_configure+0x2c>)
    8f32:	4a0b      	ldr	r2, [pc, #44]	; (8f60 <radio_tmr_hcto_configure+0x30>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    8f34:	490b      	ldr	r1, [pc, #44]	; (8f64 <radio_tmr_hcto_configure+0x34>)
	EVENT_TIMER->CC[1] = hcto;
    8f36:	50d0      	str	r0, [r2, r3]
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    8f38:	22a5      	movs	r2, #165	; 0xa5
    8f3a:	4b0b      	ldr	r3, [pc, #44]	; (8f68 <radio_tmr_hcto_configure+0x38>)
    8f3c:	00d2      	lsls	r2, r2, #3
    8f3e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    8f40:	490a      	ldr	r1, [pc, #40]	; (8f6c <radio_tmr_hcto_configure+0x3c>)
    8f42:	4a0b      	ldr	r2, [pc, #44]	; (8f70 <radio_tmr_hcto_configure+0x40>)
    8f44:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    8f46:	490b      	ldr	r1, [pc, #44]	; (8f74 <radio_tmr_hcto_configure+0x44>)
    8f48:	3204      	adds	r2, #4
    8f4a:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    8f4c:	490a      	ldr	r1, [pc, #40]	; (8f78 <radio_tmr_hcto_configure+0x48>)
    8f4e:	4a0b      	ldr	r2, [pc, #44]	; (8f7c <radio_tmr_hcto_configure+0x4c>)
    8f50:	5099      	str	r1, [r3, r2]
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    8f52:	2118      	movs	r1, #24
    8f54:	4a0a      	ldr	r2, [pc, #40]	; (8f80 <radio_tmr_hcto_configure+0x50>)
    8f56:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
		HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    8f58:	4770      	bx	lr
    8f5a:	46c0      	nop			; (mov r8, r8)
    8f5c:	00000544 	.word	0x00000544
    8f60:	40008000 	.word	0x40008000
    8f64:	40001104 	.word	0x40001104
    8f68:	4001f000 	.word	0x4001f000
    8f6c:	40008044 	.word	0x40008044
    8f70:	0000052c 	.word	0x0000052c
    8f74:	40008144 	.word	0x40008144
    8f78:	40001010 	.word	0x40001010
    8f7c:	00000534 	.word	0x00000534
    8f80:	00000504 	.word	0x00000504

00008f84 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    8f84:	22a4      	movs	r2, #164	; 0xa4
    8f86:	4b08      	ldr	r3, [pc, #32]	; (8fa8 <radio_tmr_aa_capture+0x24>)
    8f88:	4908      	ldr	r1, [pc, #32]	; (8fac <radio_tmr_aa_capture+0x28>)
    8f8a:	00d2      	lsls	r2, r2, #3
    8f8c:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    8f8e:	4908      	ldr	r1, [pc, #32]	; (8fb0 <radio_tmr_aa_capture+0x2c>)
    8f90:	4a08      	ldr	r2, [pc, #32]	; (8fb4 <radio_tmr_aa_capture+0x30>)
    8f92:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    8f94:	4908      	ldr	r1, [pc, #32]	; (8fb8 <radio_tmr_aa_capture+0x34>)
    8f96:	3204      	adds	r2, #4
    8f98:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    8f9a:	4908      	ldr	r1, [pc, #32]	; (8fbc <radio_tmr_aa_capture+0x38>)
    8f9c:	4a08      	ldr	r2, [pc, #32]	; (8fc0 <radio_tmr_aa_capture+0x3c>)
    8f9e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    8fa0:	210c      	movs	r1, #12
    8fa2:	4a08      	ldr	r2, [pc, #32]	; (8fc4 <radio_tmr_aa_capture+0x40>)
    8fa4:	5099      	str	r1, [r3, r2]
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    8fa6:	4770      	bx	lr
    8fa8:	4001f000 	.word	0x4001f000
    8fac:	40001100 	.word	0x40001100
    8fb0:	40008040 	.word	0x40008040
    8fb4:	00000524 	.word	0x00000524
    8fb8:	40001104 	.word	0x40001104
    8fbc:	40008044 	.word	0x40008044
    8fc0:	0000052c 	.word	0x0000052c
    8fc4:	00000504 	.word	0x00000504

00008fc8 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    8fc8:	4b01      	ldr	r3, [pc, #4]	; (8fd0 <radio_tmr_aa_get+0x8>)
    8fca:	4a02      	ldr	r2, [pc, #8]	; (8fd4 <radio_tmr_aa_get+0xc>)
    8fcc:	58d0      	ldr	r0, [r2, r3]
}
    8fce:	4770      	bx	lr
    8fd0:	00000544 	.word	0x00000544
    8fd4:	40008000 	.word	0x40008000

00008fd8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    8fd8:	4b01      	ldr	r3, [pc, #4]	; (8fe0 <radio_tmr_aa_save+0x8>)
    8fda:	6018      	str	r0, [r3, #0]
}
    8fdc:	4770      	bx	lr
    8fde:	46c0      	nop			; (mov r8, r8)
    8fe0:	20000ab4 	.word	0x20000ab4

00008fe4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
    8fe4:	4b01      	ldr	r3, [pc, #4]	; (8fec <radio_tmr_aa_restore+0x8>)
    8fe6:	6818      	ldr	r0, [r3, #0]
}
    8fe8:	4770      	bx	lr
    8fea:	46c0      	nop			; (mov r8, r8)
    8fec:	20000ab4 	.word	0x20000ab4

00008ff0 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    8ff0:	23a8      	movs	r3, #168	; 0xa8
    8ff2:	4a02      	ldr	r2, [pc, #8]	; (8ffc <radio_tmr_ready_get+0xc>)
    8ff4:	00db      	lsls	r3, r3, #3
    8ff6:	58d0      	ldr	r0, [r2, r3]
}
    8ff8:	4770      	bx	lr
    8ffa:	46c0      	nop			; (mov r8, r8)
    8ffc:	40008000 	.word	0x40008000

00009000 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    9000:	22a7      	movs	r2, #167	; 0xa7
    9002:	4b05      	ldr	r3, [pc, #20]	; (9018 <radio_tmr_end_capture+0x18>)
    9004:	4905      	ldr	r1, [pc, #20]	; (901c <radio_tmr_end_capture+0x1c>)
    9006:	00d2      	lsls	r2, r2, #3
    9008:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    900a:	4905      	ldr	r1, [pc, #20]	; (9020 <radio_tmr_end_capture+0x20>)
    900c:	4a05      	ldr	r2, [pc, #20]	; (9024 <radio_tmr_end_capture+0x24>)
    900e:	5099      	str	r1, [r3, r2]
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    9010:	2120      	movs	r1, #32
    9012:	4a05      	ldr	r2, [pc, #20]	; (9028 <radio_tmr_end_capture+0x28>)
    9014:	5099      	str	r1, [r3, r2]

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    9016:	4770      	bx	lr
    9018:	4001f000 	.word	0x4001f000
    901c:	4000110c 	.word	0x4000110c
    9020:	40008048 	.word	0x40008048
    9024:	0000053c 	.word	0x0000053c
    9028:	00000504 	.word	0x00000504

0000902c <radio_tmr_end_get>:
    902c:	23a9      	movs	r3, #169	; 0xa9
    902e:	4a02      	ldr	r2, [pc, #8]	; (9038 <radio_tmr_end_get+0xc>)
    9030:	00db      	lsls	r3, r3, #3
    9032:	58d0      	ldr	r0, [r2, r3]
    9034:	4770      	bx	lr
    9036:	46c0      	nop			; (mov r8, r8)
    9038:	40008000 	.word	0x40008000

0000903c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    903c:	23a9      	movs	r3, #169	; 0xa9
    903e:	4a02      	ldr	r2, [pc, #8]	; (9048 <radio_tmr_tifs_base_get+0xc>)
    9040:	00db      	lsls	r3, r3, #3
    9042:	58d0      	ldr	r0, [r2, r3]
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    9044:	4770      	bx	lr
    9046:	46c0      	nop			; (mov r8, r8)
    9048:	40008000 	.word	0x40008000

0000904c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    904c:	b570      	push	{r4, r5, r6, lr}

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    904e:	24a0      	movs	r4, #160	; 0xa0
    9050:	2100      	movs	r1, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9052:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9054:	4b12      	ldr	r3, [pc, #72]	; (90a0 <radio_ccm_rx_pkt_set+0x54>)
    9056:	00e4      	lsls	r4, r4, #3
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9058:	26a1      	movs	r6, #161	; 0xa1
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    905a:	5119      	str	r1, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    905c:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE = mode;
    905e:	2401      	movs	r4, #1
    9060:	4d10      	ldr	r5, [pc, #64]	; (90a4 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9062:	00f6      	lsls	r6, r6, #3
	NRF_CCM->MODE = mode;
    9064:	515c      	str	r4, [r3, r5]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9066:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    9068:	480f      	ldr	r0, [pc, #60]	; (90a8 <radio_ccm_rx_pkt_set+0x5c>)
    906a:	4e10      	ldr	r6, [pc, #64]	; (90ac <radio_ccm_rx_pkt_set+0x60>)
    906c:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    906e:	3604      	adds	r6, #4
    9070:	519a      	str	r2, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9072:	4e0f      	ldr	r6, [pc, #60]	; (90b0 <radio_ccm_rx_pkt_set+0x64>)
    9074:	4a0f      	ldr	r2, [pc, #60]	; (90b4 <radio_ccm_rx_pkt_set+0x68>)
    9076:	509e      	str	r6, [r3, r2]
	NRF_CCM->SHORTS = 0;
    9078:	2280      	movs	r2, #128	; 0x80
    907a:	0092      	lsls	r2, r2, #2
    907c:	5099      	str	r1, [r3, r2]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    907e:	001a      	movs	r2, r3
    9080:	32fc      	adds	r2, #252	; 0xfc
    9082:	6091      	str	r1, [r2, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    9084:	60d1      	str	r1, [r2, #12]

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    9086:	21a8      	movs	r1, #168	; 0xa8
    9088:	4a0b      	ldr	r2, [pc, #44]	; (90b8 <radio_ccm_rx_pkt_set+0x6c>)
    908a:	4e0c      	ldr	r6, [pc, #48]	; (90bc <radio_ccm_rx_pkt_set+0x70>)
    908c:	00c9      	lsls	r1, r1, #3
    908e:	5056      	str	r6, [r2, r1]
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    9090:	4e0b      	ldr	r6, [pc, #44]	; (90c0 <radio_ccm_rx_pkt_set+0x74>)
    9092:	490c      	ldr	r1, [pc, #48]	; (90c4 <radio_ccm_rx_pkt_set+0x78>)
    9094:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    9096:	2140      	movs	r1, #64	; 0x40
    9098:	5151      	str	r1, [r2, r5]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    909a:	601c      	str	r4, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    909c:	bd70      	pop	{r4, r5, r6, pc}
    909e:	46c0      	nop			; (mov r8, r8)
    90a0:	4000f000 	.word	0x4000f000
    90a4:	00000504 	.word	0x00000504
    90a8:	20000a8c 	.word	0x20000a8c
    90ac:	0000050c 	.word	0x0000050c
    90b0:	20000a5c 	.word	0x20000a5c
    90b4:	00000514 	.word	0x00000514
    90b8:	4001f000 	.word	0x4001f000
    90bc:	40001104 	.word	0x40001104
    90c0:	4000f004 	.word	0x4000f004
    90c4:	00000544 	.word	0x00000544

000090c8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    90c8:	b530      	push	{r4, r5, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    90ca:	24a0      	movs	r4, #160	; 0xa0
    90cc:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    90ce:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    90d0:	4b0d      	ldr	r3, [pc, #52]	; (9108 <radio_ccm_tx_pkt_set+0x40>)
    90d2:	00e4      	lsls	r4, r4, #3
    90d4:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    90d6:	511d      	str	r5, [r3, r4]
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    90d8:	4c0c      	ldr	r4, [pc, #48]	; (910c <radio_ccm_tx_pkt_set+0x44>)
    90da:	511a      	str	r2, [r3, r4]
	NRF_CCM->CNFPTR = (u32_t)ccm;
    90dc:	3404      	adds	r4, #4
    90de:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    90e0:	480b      	ldr	r0, [pc, #44]	; (9110 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    90e2:	4c0c      	ldr	r4, [pc, #48]	; (9114 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (u32_t)pkt;
    90e4:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    90e6:	21a2      	movs	r1, #162	; 0xa2
    90e8:	480b      	ldr	r0, [pc, #44]	; (9118 <radio_ccm_tx_pkt_set+0x50>)
    90ea:	00c9      	lsls	r1, r1, #3
    90ec:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    90ee:	490b      	ldr	r1, [pc, #44]	; (911c <radio_ccm_tx_pkt_set+0x54>)
    90f0:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    90f2:	2480      	movs	r4, #128	; 0x80
    90f4:	2101      	movs	r1, #1
    90f6:	00a4      	lsls	r4, r4, #2
    90f8:	5119      	str	r1, [r3, r4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    90fa:	001c      	movs	r4, r3
    90fc:	34fc      	adds	r4, #252	; 0xfc
    90fe:	60a2      	str	r2, [r4, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    9100:	60e2      	str	r2, [r4, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    9102:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    9104:	bd30      	pop	{r4, r5, pc}
    9106:	46c0      	nop			; (mov r8, r8)
    9108:	4000f000 	.word	0x4000f000
    910c:	00000504 	.word	0x00000504
    9110:	0000050c 	.word	0x0000050c
    9114:	20000a5c 	.word	0x20000a5c
    9118:	20000a8c 	.word	0x20000a8c
    911c:	00000514 	.word	0x00000514

00009120 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    9120:	22c1      	movs	r2, #193	; 0xc1
    9122:	2102      	movs	r1, #2
    9124:	4b0c      	ldr	r3, [pc, #48]	; (9158 <radio_ccm_is_done+0x38>)
    9126:	0092      	lsls	r2, r2, #2
    9128:	5099      	str	r1, [r3, r2]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    912a:	4a0c      	ldr	r2, [pc, #48]	; (915c <radio_ccm_is_done+0x3c>)
    912c:	6891      	ldr	r1, [r2, #8]
    912e:	2900      	cmp	r1, #0
    9130:	d00d      	beq.n	914e <radio_ccm_is_done+0x2e>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    9132:	21c2      	movs	r1, #194	; 0xc2
    9134:	2002      	movs	r0, #2
    9136:	0089      	lsls	r1, r1, #2
    9138:	5058      	str	r0, [r3, r1]
    913a:	2080      	movs	r0, #128	; 0x80
    913c:	23c0      	movs	r3, #192	; 0xc0
    913e:	4908      	ldr	r1, [pc, #32]	; (9160 <radio_ccm_is_done+0x40>)
    9140:	005b      	lsls	r3, r3, #1
    9142:	0200      	lsls	r0, r0, #8
    9144:	50c8      	str	r0, [r1, r3]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    9146:	68d0      	ldr	r0, [r2, #12]
    9148:	4243      	negs	r3, r0
    914a:	4158      	adcs	r0, r3
}
    914c:	4770      	bx	lr
		__WFE();
    914e:	bf20      	wfe
		__SEV();
    9150:	bf40      	sev
		__WFE();
    9152:	bf20      	wfe
    9154:	e7ea      	b.n	912c <radio_ccm_is_done+0xc>
    9156:	46c0      	nop			; (mov r8, r8)
    9158:	4000f000 	.word	0x4000f000
    915c:	4000f0fc 	.word	0x4000f0fc
    9160:	e000e100 	.word	0xe000e100

00009164 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    9164:	2380      	movs	r3, #128	; 0x80
    9166:	4a03      	ldr	r2, [pc, #12]	; (9174 <radio_ccm_mic_is_valid+0x10>)
    9168:	00db      	lsls	r3, r3, #3
    916a:	58d0      	ldr	r0, [r2, r3]
    916c:	1e43      	subs	r3, r0, #1
    916e:	4198      	sbcs	r0, r3
}
    9170:	4770      	bx	lr
    9172:	46c0      	nop			; (mov r8, r8)
    9174:	4000f000 	.word	0x4000f000

00009178 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    9178:	2380      	movs	r3, #128	; 0x80
    917a:	4a02      	ldr	r2, [pc, #8]	; (9184 <radio_ar_match_get+0xc>)
    917c:	00db      	lsls	r3, r3, #3
    917e:	58d0      	ldr	r0, [r2, r3]
}
    9180:	4770      	bx	lr
    9182:	46c0      	nop			; (mov r8, r8)
    9184:	4000f000 	.word	0x4000f000

00009188 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    9188:	2300      	movs	r3, #0
    918a:	4a03      	ldr	r2, [pc, #12]	; (9198 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    918c:	4903      	ldr	r1, [pc, #12]	; (919c <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
    918e:	62d3      	str	r3, [r2, #44]	; 0x2c
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    9190:	22a0      	movs	r2, #160	; 0xa0
    9192:	00d2      	lsls	r2, r2, #3
    9194:	508b      	str	r3, [r1, r2]
			  AAR_ENABLE_ENABLE_Msk;
}
    9196:	4770      	bx	lr
    9198:	400010fc 	.word	0x400010fc
    919c:	4000f000 	.word	0x4000f000

000091a0 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    91a0:	2000      	movs	r0, #0
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    91a2:	4b07      	ldr	r3, [pc, #28]	; (91c0 <radio_ar_has_match+0x20>)
    91a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED &&
    91a6:	4283      	cmp	r3, r0
    91a8:	d009      	beq.n	91be <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_END &&
    91aa:	4b06      	ldr	r3, [pc, #24]	; (91c4 <radio_ar_has_match+0x24>)
    91ac:	685a      	ldr	r2, [r3, #4]
	return (radio_bc_has_match() &&
    91ae:	4282      	cmp	r2, r0
    91b0:	d005      	beq.n	91be <radio_ar_has_match+0x1e>
		NRF_AAR->EVENTS_RESOLVED &&
    91b2:	689a      	ldr	r2, [r3, #8]
		NRF_AAR->EVENTS_END &&
    91b4:	4282      	cmp	r2, r0
    91b6:	d002      	beq.n	91be <radio_ar_has_match+0x1e>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    91b8:	68d8      	ldr	r0, [r3, #12]
		NRF_AAR->EVENTS_RESOLVED &&
    91ba:	4243      	negs	r3, r0
    91bc:	4158      	adcs	r0, r3
}
    91be:	4770      	bx	lr
    91c0:	400010fc 	.word	0x400010fc
    91c4:	4000f0fc 	.word	0x4000f0fc

000091c8 <mayfly_enable_cb>:
#else
#error Unknown LL variant.
#endif

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    91c8:	b510      	push	{r4, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    91ca:	2901      	cmp	r1, #1
    91cc:	d002      	beq.n	91d4 <mayfly_enable_cb+0xc>
    91ce:	b662      	cpsie	i
    91d0:	2004      	movs	r0, #4
    91d2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    91d4:	2018      	movs	r0, #24
	if (enable) {
    91d6:	2a00      	cmp	r2, #0
    91d8:	d002      	beq.n	91e0 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    91da:	f7f7 fbdb 	bl	994 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    91de:	bd10      	pop	{r4, pc}
		irq_disable(SWI4_IRQn);
    91e0:	f7f7 fbe4 	bl	9ac <_arch_irq_disable>
}
    91e4:	e7fb      	b.n	91de <mayfly_enable_cb+0x16>

000091e6 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    91e6:	b510      	push	{r4, lr}
	(void)caller_id;

	switch (callee_id) {
    91e8:	2900      	cmp	r1, #0
    91ea:	d004      	beq.n	91f6 <mayfly_is_enabled+0x10>
    91ec:	2901      	cmp	r1, #1
    91ee:	d006      	beq.n	91fe <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    91f0:	b662      	cpsie	i
    91f2:	2004      	movs	r0, #4
    91f4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    91f6:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    91f8:	f7f7 fbe8 	bl	9cc <_arch_irq_is_enabled>
		break;
	}

	return 0;
}
    91fc:	bd10      	pop	{r4, pc}
		return irq_is_enabled(SWI4_IRQn);
    91fe:	2018      	movs	r0, #24
    9200:	e7fa      	b.n	91f8 <mayfly_is_enabled+0x12>

00009202 <mayfly_prio_is_equal>:

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    9202:	0003      	movs	r3, r0
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    9204:	2001      	movs	r0, #1
    9206:	428b      	cmp	r3, r1
    9208:	d008      	beq.n	921c <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    920a:	2b00      	cmp	r3, #0
    920c:	d103      	bne.n	9216 <mayfly_prio_is_equal+0x14>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    920e:	3901      	subs	r1, #1
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    9210:	4248      	negs	r0, r1
    9212:	4148      	adcs	r0, r1
    9214:	e002      	b.n	921c <mayfly_prio_is_equal+0x1a>
    9216:	2000      	movs	r0, #0
    9218:	2b01      	cmp	r3, #1
    921a:	d0f9      	beq.n	9210 <mayfly_prio_is_equal+0xe>
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    921c:	4770      	bx	lr
	...

00009220 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    9220:	4b07      	ldr	r3, [pc, #28]	; (9240 <mayfly_pend+0x20>)
	(void)caller_id;

	switch (callee_id) {
    9222:	2900      	cmp	r1, #0
    9224:	d004      	beq.n	9230 <mayfly_pend+0x10>
    9226:	2901      	cmp	r1, #1
    9228:	d006      	beq.n	9238 <mayfly_pend+0x18>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    922a:	b662      	cpsie	i
    922c:	2004      	movs	r0, #4
    922e:	df02      	svc	2
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9230:	2280      	movs	r2, #128	; 0x80
    9232:	0112      	lsls	r2, r2, #4
    9234:	605a      	str	r2, [r3, #4]
		break;
	}
}
    9236:	4770      	bx	lr
    9238:	2280      	movs	r2, #128	; 0x80
    923a:	0452      	lsls	r2, r2, #17
    923c:	e7fa      	b.n	9234 <mayfly_pend+0x14>
    923e:	46c0      	nop			; (mov r8, r8)
    9240:	e000e1fc 	.word	0xe000e1fc

00009244 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    9244:	2803      	cmp	r0, #3
    9246:	d902      	bls.n	924e <hal_ticker_instance0_caller_id_get+0xa>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9248:	b662      	cpsie	i
    924a:	2004      	movs	r0, #4
    924c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    924e:	4b02      	ldr	r3, [pc, #8]	; (9258 <hal_ticker_instance0_caller_id_get+0x14>)
    9250:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9252:	2800      	cmp	r0, #0
    9254:	d0f8      	beq.n	9248 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    9256:	4770      	bx	lr
    9258:	0000b002 	.word	0x0000b002

0000925c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    925c:	3802      	subs	r0, #2
{
    925e:	b510      	push	{r4, lr}
    9260:	001c      	movs	r4, r3
	switch (caller_id) {
    9262:	2803      	cmp	r0, #3
    9264:	d817      	bhi.n	9296 <hal_ticker_instance0_sched+0x3a>
    9266:	f7f6 ff91 	bl	18c <__gnu_thumb1_case_uqi>
    926a:	0902      	.short	0x0902
    926c:	2212      	.short	0x2212
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    926e:	2903      	cmp	r1, #3
    9270:	d111      	bne.n	9296 <hal_ticker_instance0_sched+0x3a>
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    9272:	2100      	movs	r1, #0
			m.param = instance;
    9274:	4b11      	ldr	r3, [pc, #68]	; (92bc <hal_ticker_instance0_sched+0x60>)
    9276:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9278:	0008      	movs	r0, r1
    927a:	e005      	b.n	9288 <hal_ticker_instance0_sched+0x2c>
		switch (callee_id) {
    927c:	2904      	cmp	r1, #4
    927e:	d10a      	bne.n	9296 <hal_ticker_instance0_sched+0x3a>
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    9280:	2000      	movs	r0, #0
			m.param = instance;
    9282:	4b0f      	ldr	r3, [pc, #60]	; (92c0 <hal_ticker_instance0_sched+0x64>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    9284:	3903      	subs	r1, #3
			m.param = instance;
    9286:	609c      	str	r4, [r3, #8]
						  ticker_job};

			m.param = instance;

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9288:	f7f9 fae0 	bl	284c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    928c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
    928e:	2903      	cmp	r1, #3
    9290:	d004      	beq.n	929c <hal_ticker_instance0_sched+0x40>
    9292:	2904      	cmp	r1, #4
    9294:	d007      	beq.n	92a6 <hal_ticker_instance0_sched+0x4a>
		LL_ASSERT(0);
    9296:	b662      	cpsie	i
    9298:	2004      	movs	r0, #4
    929a:	df02      	svc	2
			m.param = instance;
    929c:	4b09      	ldr	r3, [pc, #36]	; (92c4 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    929e:	2100      	movs	r1, #0
			m.param = instance;
    92a0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    92a2:	2001      	movs	r0, #1
    92a4:	e7f0      	b.n	9288 <hal_ticker_instance0_sched+0x2c>
			m.param = instance;
    92a6:	4b08      	ldr	r3, [pc, #32]	; (92c8 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    92a8:	2101      	movs	r1, #1
			m.param = instance;
    92aa:	609c      	str	r4, [r3, #8]
    92ac:	e7e4      	b.n	9278 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    92ae:	2904      	cmp	r1, #4
    92b0:	d1f1      	bne.n	9296 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    92b2:	4b06      	ldr	r3, [pc, #24]	; (92cc <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    92b4:	3903      	subs	r1, #3
			m.param = instance;
    92b6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    92b8:	2003      	movs	r0, #3
    92ba:	e7e5      	b.n	9288 <hal_ticker_instance0_sched+0x2c>
    92bc:	200023b8 	.word	0x200023b8
    92c0:	200023c8 	.word	0x200023c8
    92c4:	200023d8 	.word	0x200023d8
    92c8:	200023e8 	.word	0x200023e8
    92cc:	200023f8 	.word	0x200023f8

000092d0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
    92d0:	b510      	push	{r4, lr}
    92d2:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    92d4:	2000      	movs	r0, #0
    92d6:	f7ff faad 	bl	8834 <cntr_cmp_set>
}
    92da:	bd10      	pop	{r4, pc}

000092dc <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    92dc:	4770      	bx	lr
	...

000092e0 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
    92e0:	4b01      	ldr	r3, [pc, #4]	; (92e8 <net_buf_pool_get+0x8>)
    92e2:	0140      	lsls	r0, r0, #5
    92e4:	18c0      	adds	r0, r0, r3
}
    92e6:	4770      	bx	lr
    92e8:	200024dc 	.word	0x200024dc

000092ec <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    92ec:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    92ee:	4b04      	ldr	r3, [pc, #16]	; (9300 <net_buf_id+0x14>)
    92f0:	0152      	lsls	r2, r2, #5
    92f2:	189b      	adds	r3, r3, r2
    92f4:	69db      	ldr	r3, [r3, #28]
    92f6:	1ac0      	subs	r0, r0, r3
    92f8:	4b02      	ldr	r3, [pc, #8]	; (9304 <net_buf_id+0x18>)
    92fa:	10c0      	asrs	r0, r0, #3
    92fc:	4358      	muls	r0, r3
}
    92fe:	4770      	bx	lr
    9300:	200024dc 	.word	0x200024dc
    9304:	aaaaaaab 	.word	0xaaaaaaab

00009308 <fixed_data_alloc>:
{
    9308:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    930a:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    930c:	4b08      	ldr	r3, [pc, #32]	; (9330 <fixed_data_alloc+0x28>)
    930e:	0152      	lsls	r2, r2, #5
    9310:	189b      	adds	r3, r3, r2
    9312:	699b      	ldr	r3, [r3, #24]
    9314:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    9316:	680b      	ldr	r3, [r1, #0]
    9318:	6822      	ldr	r2, [r4, #0]
    931a:	4293      	cmp	r3, r2
    931c:	d900      	bls.n	9320 <fixed_data_alloc+0x18>
    931e:	0013      	movs	r3, r2
    9320:	600b      	str	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    9322:	f7ff ffe3 	bl	92ec <net_buf_id>
    9326:	6823      	ldr	r3, [r4, #0]
    9328:	4343      	muls	r3, r0
    932a:	6860      	ldr	r0, [r4, #4]
    932c:	18c0      	adds	r0, r0, r3
}
    932e:	bd10      	pop	{r4, pc}
    9330:	200024dc 	.word	0x200024dc

00009334 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    9334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9336:	0005      	movs	r5, r0
    9338:	9101      	str	r1, [sp, #4]
    933a:	0016      	movs	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    933c:	f000 fe44 	bl	9fc8 <_impl_k_uptime_get_32>
    9340:	9000      	str	r0, [sp, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    9342:	f3ef 8710 	mrs	r7, PRIMASK
    9346:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    9348:	8a6b      	ldrh	r3, [r5, #18]
    934a:	2b00      	cmp	r3, #0
    934c:	d040      	beq.n	93d0 <net_buf_alloc_len+0x9c>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    934e:	8a2a      	ldrh	r2, [r5, #16]
    9350:	429a      	cmp	r2, r3
    9352:	d92c      	bls.n	93ae <net_buf_alloc_len+0x7a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    9354:	2100      	movs	r1, #0
    9356:	0028      	movs	r0, r5
    9358:	f000 fba0 	bl	9a9c <k_queue_get>
    935c:	1e04      	subs	r4, r0, #0
			if (buf) {
    935e:	d026      	beq.n	93ae <net_buf_alloc_len+0x7a>
	if (key) {
    9360:	2f00      	cmp	r7, #0
    9362:	d100      	bne.n	9366 <net_buf_alloc_len+0x32>
	__asm__ volatile("cpsie i" : : : "memory");
    9364:	b662      	cpsie	i
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    9366:	9b01      	ldr	r3, [sp, #4]
    9368:	2b00      	cmp	r3, #0
    936a:	d03c      	beq.n	93e6 <net_buf_alloc_len+0xb2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    936c:	1c73      	adds	r3, r6, #1
    936e:	2b01      	cmp	r3, #1
    9370:	d907      	bls.n	9382 <net_buf_alloc_len+0x4e>
    9372:	f000 fe29 	bl	9fc8 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    9376:	9b00      	ldr	r3, [sp, #0]
    9378:	1ac0      	subs	r0, r0, r3

			timeout -= min(timeout, diff);
    937a:	42b0      	cmp	r0, r6
    937c:	d900      	bls.n	9380 <net_buf_alloc_len+0x4c>
    937e:	0030      	movs	r0, r6
    9380:	1a36      	subs	r6, r6, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9382:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    9384:	4f1e      	ldr	r7, [pc, #120]	; (9400 <net_buf_alloc_len+0xcc>)
    9386:	015b      	lsls	r3, r3, #5
    9388:	18fb      	adds	r3, r7, r3
    938a:	699b      	ldr	r3, [r3, #24]
    938c:	0032      	movs	r2, r6
    938e:	681b      	ldr	r3, [r3, #0]
    9390:	a901      	add	r1, sp, #4
    9392:	681b      	ldr	r3, [r3, #0]
    9394:	0020      	movs	r0, r4
    9396:	4798      	blx	r3
    9398:	1e05      	subs	r5, r0, #0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    939a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    939c:	d124      	bne.n	93e8 <net_buf_alloc_len+0xb4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    939e:	79a0      	ldrb	r0, [r4, #6]
    93a0:	0021      	movs	r1, r4
    93a2:	0140      	lsls	r0, r0, #5
    93a4:	19c0      	adds	r0, r0, r7
    93a6:	f000 fb58 	bl	9a5a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    93aa:	002c      	movs	r4, r5
    93ac:	e019      	b.n	93e2 <net_buf_alloc_len+0xae>
		uninit_count = pool->uninit_count--;
    93ae:	8a6b      	ldrh	r3, [r5, #18]
    93b0:	1e5a      	subs	r2, r3, #1
    93b2:	826a      	strh	r2, [r5, #18]
	if (key) {
    93b4:	2f00      	cmp	r7, #0
    93b6:	d100      	bne.n	93ba <net_buf_alloc_len+0x86>
	__asm__ volatile("cpsie i" : : : "memory");
    93b8:	b662      	cpsie	i
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    93ba:	8a2c      	ldrh	r4, [r5, #16]
    93bc:	1ae3      	subs	r3, r4, r3
    93be:	2418      	movs	r4, #24
    93c0:	435c      	muls	r4, r3
    93c2:	69eb      	ldr	r3, [r5, #28]
    93c4:	191c      	adds	r4, r3, r4
	return pool - _net_buf_pool_list;
    93c6:	4b0e      	ldr	r3, [pc, #56]	; (9400 <net_buf_alloc_len+0xcc>)
    93c8:	1aed      	subs	r5, r5, r3
    93ca:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    93cc:	71a5      	strb	r5, [r4, #6]
		goto success;
    93ce:	e7ca      	b.n	9366 <net_buf_alloc_len+0x32>
	if (key) {
    93d0:	2f00      	cmp	r7, #0
    93d2:	d100      	bne.n	93d6 <net_buf_alloc_len+0xa2>
	__asm__ volatile("cpsie i" : : : "memory");
    93d4:	b662      	cpsie	i
	buf = k_lifo_get(&pool->free, timeout);
    93d6:	0031      	movs	r1, r6
    93d8:	0028      	movs	r0, r5
    93da:	f000 fb5f 	bl	9a9c <k_queue_get>
    93de:	1e04      	subs	r4, r0, #0
	if (!buf) {
    93e0:	d1c1      	bne.n	9366 <net_buf_alloc_len+0x32>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    93e2:	0020      	movs	r0, r4
    93e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		buf->__buf = NULL;
    93e6:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    93e8:	2301      	movs	r3, #1
    93ea:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    93ec:	2300      	movs	r3, #0
	buf->size  = size;
    93ee:	466a      	mov	r2, sp
	buf->frags = NULL;
    93f0:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    93f2:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    93f4:	8892      	ldrh	r2, [r2, #4]
	buf->len  = 0;
    93f6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    93f8:	6923      	ldr	r3, [r4, #16]
    93fa:	81e2      	strh	r2, [r4, #14]
    93fc:	60a3      	str	r3, [r4, #8]
	return buf;
    93fe:	e7f0      	b.n	93e2 <net_buf_alloc_len+0xae>
    9400:	200024dc 	.word	0x200024dc

00009404 <net_buf_alloc_fixed>:
	return net_buf_alloc_len_debug(pool, fixed->data_size, timeout, func,
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
    9404:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9406:	6983      	ldr	r3, [r0, #24]
{
    9408:	000a      	movs	r2, r1

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    940a:	685b      	ldr	r3, [r3, #4]
    940c:	6819      	ldr	r1, [r3, #0]
    940e:	f7ff ff91 	bl	9334 <net_buf_alloc_len>
}
    9412:	bd10      	pop	{r4, pc}

00009414 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    9414:	6883      	ldr	r3, [r0, #8]
    9416:	1859      	adds	r1, r3, r1
    9418:	6001      	str	r1, [r0, #0]
}
    941a:	4770      	bx	lr

0000941c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    941c:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    941e:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
    9420:	2501      	movs	r5, #1
	for (tail = buf; tail->frags; tail = tail->frags) {
    9422:	6814      	ldr	r4, [r2, #0]
    9424:	2c00      	cmp	r4, #0
    9426:	d102      	bne.n	942e <net_buf_put+0x12>
	}

	k_fifo_put_list(fifo, buf, tail);
    9428:	f000 fb1d 	bl	9a66 <k_queue_append_list>
}
    942c:	bd70      	pop	{r4, r5, r6, pc}
		tail->flags |= NET_BUF_FRAGS;
    942e:	7953      	ldrb	r3, [r2, #5]
    9430:	432b      	orrs	r3, r5
    9432:	7153      	strb	r3, [r2, #5]
    9434:	0022      	movs	r2, r4
    9436:	e7f4      	b.n	9422 <net_buf_put+0x6>

00009438 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    9438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    943a:	0004      	movs	r4, r0
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    943c:	2502      	movs	r5, #2
	NET_BUF_ASSERT(buf);

	while (buf) {
    943e:	2c00      	cmp	r4, #0
    9440:	d100      	bne.n	9444 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    9442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    9444:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    9446:	6826      	ldr	r6, [r4, #0]
		if (--buf->ref > 0) {
    9448:	3b01      	subs	r3, #1
    944a:	b2db      	uxtb	r3, r3
    944c:	7123      	strb	r3, [r4, #4]
    944e:	2b00      	cmp	r3, #0
    9450:	d1f7      	bne.n	9442 <net_buf_unref+0xa>
		if (buf->__buf) {
    9452:	6921      	ldr	r1, [r4, #16]
    9454:	4f10      	ldr	r7, [pc, #64]	; (9498 <net_buf_unref+0x60>)
    9456:	2900      	cmp	r1, #0
    9458:	d00c      	beq.n	9474 <net_buf_unref+0x3c>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    945a:	7963      	ldrb	r3, [r4, #5]
    945c:	422b      	tst	r3, r5
    945e:	d107      	bne.n	9470 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9460:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    9462:	0020      	movs	r0, r4
    9464:	015b      	lsls	r3, r3, #5
    9466:	18fb      	adds	r3, r7, r3
    9468:	699b      	ldr	r3, [r3, #24]
    946a:	681b      	ldr	r3, [r3, #0]
    946c:	689b      	ldr	r3, [r3, #8]
    946e:	4798      	blx	r3
			buf->__buf = NULL;
    9470:	2300      	movs	r3, #0
    9472:	6123      	str	r3, [r4, #16]
		buf->data = NULL;
    9474:	2300      	movs	r3, #0
		pool = net_buf_pool_get(buf->pool_id);
    9476:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    9478:	60a3      	str	r3, [r4, #8]
		if (pool->destroy) {
    947a:	0140      	lsls	r0, r0, #5
		buf->frags = NULL;
    947c:	6023      	str	r3, [r4, #0]
		if (pool->destroy) {
    947e:	1838      	adds	r0, r7, r0
    9480:	6943      	ldr	r3, [r0, #20]
    9482:	2b00      	cmp	r3, #0
    9484:	d003      	beq.n	948e <net_buf_unref+0x56>
			pool->destroy(buf);
    9486:	0020      	movs	r0, r4
    9488:	4798      	blx	r3
{
    948a:	0034      	movs	r4, r6
    948c:	e7d7      	b.n	943e <net_buf_unref+0x6>
	k_lifo_put(&pool->free, buf);
    948e:	0021      	movs	r1, r4
    9490:	f000 fae3 	bl	9a5a <k_queue_prepend>
    9494:	e7f9      	b.n	948a <net_buf_unref+0x52>
    9496:	46c0      	nop			; (mov r8, r8)
    9498:	200024dc 	.word	0x200024dc

0000949c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    949c:	7903      	ldrb	r3, [r0, #4]
    949e:	3301      	adds	r3, #1
    94a0:	7103      	strb	r3, [r0, #4]
	return buf;
}
    94a2:	4770      	bx	lr

000094a4 <net_buf_simple_add>:
	return buf->data + buf->len;
    94a4:	8883      	ldrh	r3, [r0, #4]
    94a6:	6802      	ldr	r2, [r0, #0]
    94a8:	18d2      	adds	r2, r2, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    94aa:	185b      	adds	r3, r3, r1
    94ac:	8083      	strh	r3, [r0, #4]
	return tail;
}
    94ae:	0010      	movs	r0, r2
    94b0:	4770      	bx	lr

000094b2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    94b2:	b510      	push	{r4, lr}
    94b4:	0004      	movs	r4, r0
    94b6:	8883      	ldrh	r3, [r0, #4]
    94b8:	6800      	ldr	r0, [r0, #0]
    94ba:	18c0      	adds	r0, r0, r3
	buf->len += len;
    94bc:	189b      	adds	r3, r3, r2
    94be:	80a3      	strh	r3, [r4, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    94c0:	f7f7 f8d2 	bl	668 <memcpy>
}
    94c4:	bd10      	pop	{r4, pc}

000094c6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    94c6:	8883      	ldrh	r3, [r0, #4]
    94c8:	1a5b      	subs	r3, r3, r1
    94ca:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    94cc:	6803      	ldr	r3, [r0, #0]
    94ce:	1859      	adds	r1, r3, r1
    94d0:	6001      	str	r1, [r0, #0]
}
    94d2:	0008      	movs	r0, r1
    94d4:	4770      	bx	lr

000094d6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    94d6:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
    94d8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    94da:	2101      	movs	r1, #1
	val = buf->data[0];
    94dc:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
    94de:	f7ff fff2 	bl	94c6 <net_buf_simple_pull>

	return val;
}
    94e2:	0020      	movs	r0, r4
    94e4:	bd10      	pop	{r4, pc}

000094e6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    94e6:	6803      	ldr	r3, [r0, #0]
    94e8:	6880      	ldr	r0, [r0, #8]
    94ea:	1a18      	subs	r0, r3, r0
}
    94ec:	4770      	bx	lr
	...

000094f0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    94f0:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    94f2:	4e07      	ldr	r6, [pc, #28]	; (9510 <_sys_device_do_config_level+0x20>)
    94f4:	0083      	lsls	r3, r0, #2
    94f6:	599d      	ldr	r5, [r3, r6]
    94f8:	3001      	adds	r0, #1
    94fa:	0084      	lsls	r4, r0, #2
    94fc:	5933      	ldr	r3, [r6, r4]
    94fe:	429d      	cmp	r5, r3
    9500:	d300      	bcc.n	9504 <_sys_device_do_config_level+0x14>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    9502:	bd70      	pop	{r4, r5, r6, pc}
		device->init(info);
    9504:	682b      	ldr	r3, [r5, #0]
    9506:	0028      	movs	r0, r5
    9508:	685b      	ldr	r3, [r3, #4]
    950a:	4798      	blx	r3
								info++) {
    950c:	350c      	adds	r5, #12
    950e:	e7f5      	b.n	94fc <_sys_device_do_config_level+0xc>
    9510:	0000b014 	.word	0x0000b014

00009514 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    9514:	b570      	push	{r4, r5, r6, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    9516:	4c11      	ldr	r4, [pc, #68]	; (955c <device_get_binding+0x48>)
{
    9518:	0006      	movs	r6, r0
    951a:	0023      	movs	r3, r4
	for (info = __device_init_start; info != __device_init_end; info++) {
    951c:	4d10      	ldr	r5, [pc, #64]	; (9560 <device_get_binding+0x4c>)
    951e:	42ac      	cmp	r4, r5
    9520:	d104      	bne.n	952c <device_get_binding+0x18>
    9522:	001c      	movs	r4, r3
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    9524:	42ac      	cmp	r4, r5
    9526:	d10a      	bne.n	953e <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    9528:	2400      	movs	r4, #0
    952a:	e014      	b.n	9556 <device_get_binding+0x42>
		if (info->driver_api != NULL && info->config->name == name) {
    952c:	6862      	ldr	r2, [r4, #4]
    952e:	2a00      	cmp	r2, #0
    9530:	d003      	beq.n	953a <device_get_binding+0x26>
    9532:	6822      	ldr	r2, [r4, #0]
    9534:	6812      	ldr	r2, [r2, #0]
    9536:	42b2      	cmp	r2, r6
    9538:	d00d      	beq.n	9556 <device_get_binding+0x42>
	for (info = __device_init_start; info != __device_init_end; info++) {
    953a:	340c      	adds	r4, #12
    953c:	e7ef      	b.n	951e <device_get_binding+0xa>
		if (!info->driver_api) {
    953e:	6863      	ldr	r3, [r4, #4]
    9540:	2b00      	cmp	r3, #0
    9542:	d101      	bne.n	9548 <device_get_binding+0x34>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9544:	340c      	adds	r4, #12
    9546:	e7ed      	b.n	9524 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    9548:	6823      	ldr	r3, [r4, #0]
    954a:	0030      	movs	r0, r6
    954c:	6819      	ldr	r1, [r3, #0]
    954e:	f7f7 f86c 	bl	62a <strcmp>
    9552:	2800      	cmp	r0, #0
    9554:	d1f6      	bne.n	9544 <device_get_binding+0x30>
}
    9556:	0020      	movs	r0, r4
    9558:	bd70      	pop	{r4, r5, r6, pc}
    955a:	46c0      	nop			; (mov r8, r8)
    955c:	20002410 	.word	0x20002410
    9560:	200024a0 	.word	0x200024a0

00009564 <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    9564:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    9566:	1c43      	adds	r3, r0, #1
    9568:	d003      	beq.n	9572 <_sys_power_save_idle_exit+0xe>
    956a:	4b03      	ldr	r3, [pc, #12]	; (9578 <_sys_power_save_idle_exit+0x14>)
    956c:	681b      	ldr	r3, [r3, #0]
    956e:	4298      	cmp	r0, r3
    9570:	db01      	blt.n	9576 <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    9572:	f7f8 fbe5 	bl	1d40 <_timer_idle_exit>
	}
}
    9576:	bd10      	pop	{r4, pc}
    9578:	20002408 	.word	0x20002408

0000957c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    957c:	b570      	push	{r4, r5, r6, lr}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    957e:	2601      	movs	r6, #1
    9580:	4276      	negs	r6, r6
	__asm__ volatile("mrs %0, PRIMASK;"
    9582:	f3ef 8310 	mrs	r3, PRIMASK
    9586:	b672      	cpsid	i
	return list->head == list;
    9588:	4d0b      	ldr	r5, [pc, #44]	; (95b8 <idle+0x3c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    958a:	4a0c      	ldr	r2, [pc, #48]	; (95bc <idle+0x40>)
	return list->head == list;
    958c:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    958e:	4293      	cmp	r3, r2
    9590:	d00c      	beq.n	95ac <idle+0x30>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    9592:	2b00      	cmp	r3, #0
    9594:	d00a      	beq.n	95ac <idle+0x30>
    9596:	691c      	ldr	r4, [r3, #16]
	if (_must_enter_tickless_idle(ticks)) {
    9598:	1c63      	adds	r3, r4, #1
    959a:	d008      	beq.n	95ae <idle+0x32>
    959c:	4b08      	ldr	r3, [pc, #32]	; (95c0 <idle+0x44>)
    959e:	681b      	ldr	r3, [r3, #0]
    95a0:	42a3      	cmp	r3, r4
    95a2:	dd04      	ble.n	95ae <idle+0x32>
	_kernel.idle = ticks;
    95a4:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    95a6:	f7f7 fa93 	bl	ad0 <k_cpu_idle>
    95aa:	e7ea      	b.n	9582 <idle+0x6>
    95ac:	0034      	movs	r4, r6
		_timer_idle_enter(ticks);
    95ae:	0020      	movs	r0, r4
    95b0:	f7f8 fbb0 	bl	1d14 <_timer_idle_enter>
    95b4:	e7f6      	b.n	95a4 <idle+0x28>
    95b6:	46c0      	nop			; (mov r8, r8)
    95b8:	20000ba4 	.word	0x20000ba4
    95bc:	20000bb4 	.word	0x20000bb4
    95c0:	20002408 	.word	0x20002408

000095c4 <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    95c4:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
    95c6:	4803      	ldr	r0, [pc, #12]	; (95d4 <_bss_zero+0x10>)
    95c8:	4a03      	ldr	r2, [pc, #12]	; (95d8 <_bss_zero+0x14>)
    95ca:	2100      	movs	r1, #0
    95cc:	1a12      	subs	r2, r2, r0
    95ce:	f7f7 f875 	bl	6bc <memset>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
    95d2:	bd10      	pop	{r4, pc}
    95d4:	20000000 	.word	0x20000000
    95d8:	20000e18 	.word	0x20000e18

000095dc <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    95dc:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
    95de:	4803      	ldr	r0, [pc, #12]	; (95ec <_data_copy+0x10>)
    95e0:	4a03      	ldr	r2, [pc, #12]	; (95f0 <_data_copy+0x14>)
    95e2:	4904      	ldr	r1, [pc, #16]	; (95f4 <_data_copy+0x18>)
    95e4:	1a12      	subs	r2, r2, r0
    95e6:	f7f7 f83f 	bl	668 <memcpy>
#endif
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
    95ea:	bd10      	pop	{r4, pc}
    95ec:	20002150 	.word	0x20002150
    95f0:	2000251c 	.word	0x2000251c
    95f4:	0000b078 	.word	0x0000b078

000095f8 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    95f8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    95fa:	2002      	movs	r0, #2
    95fc:	f7ff ff78 	bl	94f0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    9600:	4908      	ldr	r1, [pc, #32]	; (9624 <_main+0x2c>)
    9602:	4809      	ldr	r0, [pc, #36]	; (9628 <_main+0x30>)
    9604:	f7f7 fce8 	bl	fd8 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    9608:	2003      	movs	r0, #3
    960a:	f7ff ff71 	bl	94f0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    960e:	f000 fed5 	bl	a3bc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    9612:	f7f7 f885 	bl	720 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    9616:	2101      	movs	r1, #1
    9618:	4a04      	ldr	r2, [pc, #16]	; (962c <_main+0x34>)
    961a:	7a13      	ldrb	r3, [r2, #8]
    961c:	438b      	bics	r3, r1
    961e:	7213      	strb	r3, [r2, #8]
}
    9620:	bd10      	pop	{r4, pc}
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	0000b030 	.word	0x0000b030
    9628:	0000b04c 	.word	0x0000b04c
    962c:	20000b44 	.word	0x20000b44

00009630 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    9630:	b5f0      	push	{r4, r5, r6, r7, lr}
    9632:	b087      	sub	sp, #28
    9634:	af06      	add	r7, sp, #24
	_IntLibInit();
    9636:	f7f7 f913 	bl	860 <_IntLibInit>
    963a:	4b30      	ldr	r3, [pc, #192]	; (96fc <_Cstart+0xcc>)
    963c:	4a30      	ldr	r2, [pc, #192]	; (9700 <_Cstart+0xd0>)
	list->head = (sys_dnode_t *)list;
    963e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    9640:	605b      	str	r3, [r3, #4]
    9642:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    9644:	4293      	cmp	r3, r2
    9646:	d1fa      	bne.n	963e <_Cstart+0xe>
	_setup_new_thread(_main_thread, _main_stack,
    9648:	2400      	movs	r4, #0
    964a:	2301      	movs	r3, #1
    964c:	2280      	movs	r2, #128	; 0x80
	_ready_q.cache = _main_thread;
    964e:	4d2d      	ldr	r5, [pc, #180]	; (9704 <_Cstart+0xd4>)
    9650:	4e2d      	ldr	r6, [pc, #180]	; (9708 <_Cstart+0xd8>)
	_setup_new_thread(_main_thread, _main_stack,
    9652:	492e      	ldr	r1, [pc, #184]	; (970c <_Cstart+0xdc>)
	_ready_q.cache = _main_thread;
    9654:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    9656:	0028      	movs	r0, r5
    9658:	9304      	str	r3, [sp, #16]
    965a:	9403      	str	r4, [sp, #12]
    965c:	9402      	str	r4, [sp, #8]
    965e:	9401      	str	r4, [sp, #4]
    9660:	9400      	str	r4, [sp, #0]
    9662:	4b2b      	ldr	r3, [pc, #172]	; (9710 <_Cstart+0xe0>)
    9664:	00d2      	lsls	r2, r2, #3
    9666:	f000 fe51 	bl	a30c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    966a:	2204      	movs	r2, #4
    966c:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    966e:	0028      	movs	r0, r5
    9670:	4393      	bics	r3, r2
    9672:	726b      	strb	r3, [r5, #9]
    9674:	f000 fa5a 	bl	9b2c <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    9678:	2301      	movs	r3, #1
    967a:	2280      	movs	r2, #128	; 0x80
    967c:	9304      	str	r3, [sp, #16]
    967e:	330e      	adds	r3, #14
    9680:	9303      	str	r3, [sp, #12]
    9682:	4924      	ldr	r1, [pc, #144]	; (9714 <_Cstart+0xe4>)
    9684:	9402      	str	r4, [sp, #8]
    9686:	9401      	str	r4, [sp, #4]
    9688:	9400      	str	r4, [sp, #0]
    968a:	4b23      	ldr	r3, [pc, #140]	; (9718 <_Cstart+0xe8>)
    968c:	0052      	lsls	r2, r2, #1
    968e:	4823      	ldr	r0, [pc, #140]	; (971c <_Cstart+0xec>)
    9690:	f000 fe3c 	bl	a30c <_setup_new_thread>
    9694:	2204      	movs	r2, #4
    9696:	4b21      	ldr	r3, [pc, #132]	; (971c <_Cstart+0xec>)
    9698:	7a5b      	ldrb	r3, [r3, #9]
    969a:	4393      	bics	r3, r2
    969c:	4a1f      	ldr	r2, [pc, #124]	; (971c <_Cstart+0xec>)
    969e:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    96a0:	0010      	movs	r0, r2
    96a2:	f000 fa43 	bl	9b2c <_add_thread_to_ready_q>
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    96a6:	22a0      	movs	r2, #160	; 0xa0
	list->head = (sys_dnode_t *)list;
    96a8:	4b1d      	ldr	r3, [pc, #116]	; (9720 <_Cstart+0xf0>)
    96aa:	0092      	lsls	r2, r2, #2
    96ac:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    96ae:	6173      	str	r3, [r6, #20]
    96b0:	4b1c      	ldr	r3, [pc, #112]	; (9724 <_Cstart+0xf4>)
    96b2:	189b      	adds	r3, r3, r2
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    96b4:	f383 8808 	msr	MSP, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    96b8:	491b      	ldr	r1, [pc, #108]	; (9728 <_Cstart+0xf8>)
    96ba:	4a1c      	ldr	r2, [pc, #112]	; (972c <_Cstart+0xfc>)
    96bc:	6a0b      	ldr	r3, [r1, #32]
    96be:	401a      	ands	r2, r3
    96c0:	23c0      	movs	r3, #192	; 0xc0
    96c2:	041b      	lsls	r3, r3, #16
    96c4:	4313      	orrs	r3, r2
    96c6:	620b      	str	r3, [r1, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    96c8:	f7f7 f962 	bl	990 <_FaultInit>
	_CpuIdleInit();
    96cc:	f7f7 f9fa 	bl	ac4 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    96d0:	0020      	movs	r0, r4
    96d2:	f7ff ff0d 	bl	94f0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    96d6:	2001      	movs	r0, #1
    96d8:	f7ff ff0a 	bl	94f0 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    96dc:	2280      	movs	r2, #128	; 0x80
    96de:	4b0b      	ldr	r3, [pc, #44]	; (970c <_Cstart+0xdc>)
    96e0:	00d2      	lsls	r2, r2, #3
    96e2:	189b      	adds	r3, r3, r2
    96e4:	2207      	movs	r2, #7

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    96e6:	490a      	ldr	r1, [pc, #40]	; (9710 <_Cstart+0xe0>)
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    96e8:	4393      	bics	r3, r2
	_current = main_thread;
    96ea:	60b5      	str	r5, [r6, #8]
	__asm__ __volatile__(
    96ec:	4a10      	ldr	r2, [pc, #64]	; (9730 <_Cstart+0x100>)
    96ee:	000c      	movs	r4, r1
    96f0:	f383 8809 	msr	PSP, r3
    96f4:	b662      	cpsie	i
    96f6:	1c20      	adds	r0, r4, #0
    96f8:	4710      	bx	r2
    96fa:	46c0      	nop			; (mov r8, r8)
    96fc:	20000bc8 	.word	0x20000bc8
    9700:	20000cc8 	.word	0x20000cc8
    9704:	20000b44 	.word	0x20000b44
    9708:	20000ba4 	.word	0x20000ba4
    970c:	200015d0 	.word	0x200015d0
    9710:	000095f9 	.word	0x000095f9
    9714:	200019d0 	.word	0x200019d0
    9718:	0000957d 	.word	0x0000957d
    971c:	20000ae4 	.word	0x20000ae4
    9720:	20000bb4 	.word	0x20000bb4
    9724:	20001ad0 	.word	0x20001ad0
    9728:	e000ed00 	.word	0xe000ed00
    972c:	ff00ffff 	.word	0xff00ffff
    9730:	0000a2a9 	.word	0x0000a2a9

00009734 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    9734:	b570      	push	{r4, r5, r6, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    9736:	7ac6      	ldrb	r6, [r0, #11]
    9738:	250c      	movs	r5, #12
    973a:	68c4      	ldr	r4, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    973c:	428e      	cmp	r6, r1
    973e:	db0b      	blt.n	9758 <get_bit_ptr+0x24>
    9740:	4369      	muls	r1, r5
    9742:	1861      	adds	r1, r4, r1

	*word = &bitarray[bn / 32];
    9744:	201f      	movs	r0, #31
    9746:	17d4      	asrs	r4, r2, #31
    9748:	4004      	ands	r4, r0
    974a:	18a4      	adds	r4, r4, r2
    974c:	1164      	asrs	r4, r4, #5
    974e:	00a4      	lsls	r4, r4, #2
    9750:	190c      	adds	r4, r1, r4

	return bn & 0x1f;
    9752:	4010      	ands	r0, r2
	*word = &bitarray[bn / 32];
    9754:	601c      	str	r4, [r3, #0]
}
    9756:	bd70      	pop	{r4, r5, r6, pc}
		&p->levels[level].bits : p->levels[level].bits_p;
    9758:	434d      	muls	r5, r1
    975a:	5961      	ldr	r1, [r4, r5]
    975c:	e7f2      	b.n	9744 <get_bit_ptr+0x10>

0000975e <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    975e:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    9760:	ab01      	add	r3, sp, #4
    9762:	f7ff ffe7 	bl	9734 <get_bit_ptr>

	*word |= (1<<bit);
    9766:	2301      	movs	r3, #1
    9768:	4083      	lsls	r3, r0
    976a:	9a01      	ldr	r2, [sp, #4]
    976c:	6811      	ldr	r1, [r2, #0]
    976e:	430b      	orrs	r3, r1
    9770:	6013      	str	r3, [r2, #0]
}
    9772:	bd07      	pop	{r0, r1, r2, pc}

00009774 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    9774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9776:	4c26      	ldr	r4, [pc, #152]	; (9810 <init_static_pools+0x9c>)
    9778:	4b26      	ldr	r3, [pc, #152]	; (9814 <init_static_pools+0xa0>)
    977a:	429c      	cmp	r4, r3
    977c:	d301      	bcc.n	9782 <init_static_pools+0xe>
		init_mem_pool(p);
	}

	return 0;
}
    977e:	2000      	movs	r0, #0
    9780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    9782:	6865      	ldr	r5, [r4, #4]
    9784:	8923      	ldrh	r3, [r4, #8]
	for (i = 0; i < p->n_levels; i++) {
    9786:	2600      	movs	r6, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    9788:	436b      	muls	r3, r5
    978a:	9301      	str	r3, [sp, #4]
	u32_t *bits = p->buf + buflen;
    978c:	9a01      	ldr	r2, [sp, #4]
    978e:	6823      	ldr	r3, [r4, #0]
    9790:	189f      	adds	r7, r3, r2
    9792:	0023      	movs	r3, r4
    9794:	3310      	adds	r3, #16
	list->head = (sys_dnode_t *)list;
    9796:	6123      	str	r3, [r4, #16]
	list->tail = (sys_dnode_t *)list;
    9798:	6163      	str	r3, [r4, #20]
	for (i = 0; i < p->n_levels; i++) {
    979a:	7aa3      	ldrb	r3, [r4, #10]
    979c:	429e      	cmp	r6, r3
    979e:	db05      	blt.n	97ac <init_static_pools+0x38>
    97a0:	2500      	movs	r5, #0
	for (i = 0; i < p->n_max; i++) {
    97a2:	8923      	ldrh	r3, [r4, #8]
    97a4:	429d      	cmp	r5, r3
    97a6:	db20      	blt.n	97ea <init_static_pools+0x76>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    97a8:	3418      	adds	r4, #24
    97aa:	e7e5      	b.n	9778 <init_static_pools+0x4>
		int nblocks = buflen / sz;
    97ac:	0029      	movs	r1, r5
    97ae:	9801      	ldr	r0, [sp, #4]
    97b0:	f7f6 fd0a 	bl	1c8 <__aeabi_uidiv>
		sys_dlist_init(&p->levels[i].free_list);
    97b4:	230c      	movs	r3, #12
    97b6:	4373      	muls	r3, r6
    97b8:	68e2      	ldr	r2, [r4, #12]
    97ba:	18d3      	adds	r3, r2, r3
    97bc:	1d1a      	adds	r2, r3, #4
	list->head = (sys_dnode_t *)list;
    97be:	605a      	str	r2, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    97c0:	609a      	str	r2, [r3, #8]
		if (nblocks < 32) {
    97c2:	281f      	cmp	r0, #31
    97c4:	dc06      	bgt.n	97d4 <init_static_pools+0x60>
			p->max_inline_level = i;
    97c6:	72e6      	strb	r6, [r4, #11]
		sz = _ALIGN4(sz / 4);
    97c8:	2303      	movs	r3, #3
    97ca:	08ad      	lsrs	r5, r5, #2
    97cc:	3503      	adds	r5, #3
    97ce:	439d      	bics	r5, r3
	for (i = 0; i < p->n_levels; i++) {
    97d0:	3601      	adds	r6, #1
    97d2:	e7e2      	b.n	979a <init_static_pools+0x26>
			p->levels[i].bits_p = bits;
    97d4:	601f      	str	r7, [r3, #0]
			bits += (nblocks + 31)/32;
    97d6:	0003      	movs	r3, r0
    97d8:	221f      	movs	r2, #31
    97da:	331f      	adds	r3, #31
    97dc:	17d8      	asrs	r0, r3, #31
    97de:	4010      	ands	r0, r2
    97e0:	18c0      	adds	r0, r0, r3
    97e2:	1140      	asrs	r0, r0, #5
    97e4:	0080      	lsls	r0, r0, #2
    97e6:	183f      	adds	r7, r7, r0
    97e8:	e7ee      	b.n	97c8 <init_static_pools+0x54>
	return p->buf + lsz * block;
    97ea:	6863      	ldr	r3, [r4, #4]
    97ec:	6822      	ldr	r2, [r4, #0]
    97ee:	436b      	muls	r3, r5
    97f0:	18d3      	adds	r3, r2, r3
		sys_dlist_append(&p->levels[0].free_list, block);
    97f2:	68e2      	ldr	r2, [r4, #12]
		set_free_bit(p, 0, i);
    97f4:	0020      	movs	r0, r4
		sys_dlist_append(&p->levels[0].free_list, block);
    97f6:	1d11      	adds	r1, r2, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    97f8:	6019      	str	r1, [r3, #0]
	node->prev = list->tail;
    97fa:	6891      	ldr	r1, [r2, #8]
    97fc:	6059      	str	r1, [r3, #4]

	list->tail->next = node;
    97fe:	6891      	ldr	r1, [r2, #8]
    9800:	600b      	str	r3, [r1, #0]
	list->tail = node;
    9802:	6093      	str	r3, [r2, #8]
		set_free_bit(p, 0, i);
    9804:	2100      	movs	r1, #0
    9806:	002a      	movs	r2, r5
    9808:	f7ff ffa9 	bl	975e <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    980c:	3501      	adds	r5, #1
    980e:	e7c8      	b.n	97a2 <init_static_pools+0x2e>
    9810:	200024a0 	.word	0x200024a0
    9814:	200024a0 	.word	0x200024a0

00009818 <adjust_owner_prio.isra.7>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    9818:	230a      	movs	r3, #10
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    981a:	b570      	push	{r4, r5, r6, lr}
	if (mutex->owner->base.prio != new_prio) {
    981c:	56c3      	ldrsb	r3, [r0, r3]
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    981e:	0004      	movs	r4, r0
    9820:	000d      	movs	r5, r1
	if (mutex->owner->base.prio != new_prio) {
    9822:	428b      	cmp	r3, r1
    9824:	d00b      	beq.n	983e <adjust_owner_prio.isra.7+0x26>
	return !(_is_thread_prevented_from_running(thread) ||
    9826:	7a43      	ldrb	r3, [r0, #9]
    9828:	06db      	lsls	r3, r3, #27
    982a:	d109      	bne.n	9840 <adjust_owner_prio.isra.7+0x28>
    982c:	6a03      	ldr	r3, [r0, #32]
    982e:	3301      	adds	r3, #1
    9830:	d106      	bne.n	9840 <adjust_owner_prio.isra.7+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    9832:	f000 fa03 	bl	9c3c <_remove_thread_from_ready_q>
		thread->base.prio = prio;
    9836:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
    9838:	0020      	movs	r0, r4
    983a:	f000 f977 	bl	9b2c <_add_thread_to_ready_q>
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    983e:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		thread->base.prio = prio;
    9840:	72a5      	strb	r5, [r4, #10]
    9842:	e7fc      	b.n	983e <adjust_owner_prio.isra.7+0x26>

00009844 <_impl_k_mutex_lock>:

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    9844:	b570      	push	{r4, r5, r6, lr}
	--_current->base.sched_locked;
    9846:	4b2f      	ldr	r3, [pc, #188]	; (9904 <_impl_k_mutex_lock+0xc0>)
    9848:	000d      	movs	r5, r1
    984a:	6899      	ldr	r1, [r3, #8]
    984c:	0004      	movs	r4, r0
    984e:	7aca      	ldrb	r2, [r1, #11]
    9850:	3a01      	subs	r2, #1
    9852:	72ca      	strb	r2, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    9854:	68c2      	ldr	r2, [r0, #12]
    9856:	2a00      	cmp	r2, #0
    9858:	d00a      	beq.n	9870 <_impl_k_mutex_lock+0x2c>
    985a:	6880      	ldr	r0, [r0, #8]
    985c:	6899      	ldr	r1, [r3, #8]
    985e:	4288      	cmp	r0, r1
    9860:	d012      	beq.n	9888 <_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    9862:	2d00      	cmp	r5, #0
    9864:	d112      	bne.n	988c <_impl_k_mutex_lock+0x48>
		k_sched_unlock();
    9866:	f000 fa83 	bl	9d70 <k_sched_unlock>
		return -EBUSY;
    986a:	2010      	movs	r0, #16
	adjust_owner_prio(mutex, new_prio);
	irq_unlock(key);

	k_sched_unlock();

	return -EAGAIN;
    986c:	4240      	negs	r0, r0
    986e:	e00a      	b.n	9886 <_impl_k_mutex_lock+0x42>
					_current->base.prio :
    9870:	6899      	ldr	r1, [r3, #8]
    9872:	7a89      	ldrb	r1, [r1, #10]
    9874:	b249      	sxtb	r1, r1
		mutex->owner = _current;
    9876:	689b      	ldr	r3, [r3, #8]
		mutex->lock_count++;
    9878:	3201      	adds	r2, #1
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    987a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    987c:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    987e:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
    9880:	f000 fa76 	bl	9d70 <k_sched_unlock>
		return 0;
    9884:	2000      	movs	r0, #0
}
    9886:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
    9888:	6921      	ldr	r1, [r4, #16]
    988a:	e7f4      	b.n	9876 <_impl_k_mutex_lock+0x32>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    988c:	230a      	movs	r3, #10
    988e:	7a89      	ldrb	r1, [r1, #10]
    9890:	56c3      	ldrsb	r3, [r0, r3]
    9892:	b249      	sxtb	r1, r1
    9894:	4299      	cmp	r1, r3
    9896:	dd00      	ble.n	989a <_impl_k_mutex_lock+0x56>
    9898:	0019      	movs	r1, r3
    989a:	43cb      	mvns	r3, r1
    989c:	17db      	asrs	r3, r3, #31
    989e:	4019      	ands	r1, r3
    98a0:	f3ef 8610 	mrs	r6, PRIMASK
    98a4:	b672      	cpsid	i
	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    98a6:	230a      	movs	r3, #10
    98a8:	68a0      	ldr	r0, [r4, #8]
    98aa:	56c3      	ldrsb	r3, [r0, r3]
    98ac:	4299      	cmp	r1, r3
    98ae:	da01      	bge.n	98b4 <_impl_k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
    98b0:	f7ff ffb2 	bl	9818 <adjust_owner_prio.isra.7>
	_pend_current_thread(&mutex->wait_q, timeout);
    98b4:	0020      	movs	r0, r4
    98b6:	0029      	movs	r1, r5
    98b8:	f000 fa1e 	bl	9cf8 <_pend_current_thread>
	_update_time_slice_before_swap();
    98bc:	f000 fad6 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    98c0:	0030      	movs	r0, r6
    98c2:	f7f7 f827 	bl	914 <__swap>
	if (got_mutex == 0) {
    98c6:	2800      	cmp	r0, #0
    98c8:	d0da      	beq.n	9880 <_impl_k_mutex_lock+0x3c>
	return list->head == list;
    98ca:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98cc:	429c      	cmp	r4, r3
    98ce:	d100      	bne.n	98d2 <_impl_k_mutex_lock+0x8e>
    98d0:	2300      	movs	r3, #0
	new_prio = mutex->owner_orig_prio;
    98d2:	6921      	ldr	r1, [r4, #16]
						     new_prio) : new_prio;
    98d4:	2b00      	cmp	r3, #0
    98d6:	d007      	beq.n	98e8 <_impl_k_mutex_lock+0xa4>
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    98d8:	7a9b      	ldrb	r3, [r3, #10]
    98da:	b25b      	sxtb	r3, r3
    98dc:	4299      	cmp	r1, r3
    98de:	dd00      	ble.n	98e2 <_impl_k_mutex_lock+0x9e>
    98e0:	0019      	movs	r1, r3
    98e2:	43cb      	mvns	r3, r1
    98e4:	17db      	asrs	r3, r3, #31
    98e6:	4019      	ands	r1, r3
    98e8:	f3ef 8510 	mrs	r5, PRIMASK
    98ec:	b672      	cpsid	i
	adjust_owner_prio(mutex, new_prio);
    98ee:	68a0      	ldr	r0, [r4, #8]
    98f0:	f7ff ff92 	bl	9818 <adjust_owner_prio.isra.7>
	if (key) {
    98f4:	2d00      	cmp	r5, #0
    98f6:	d100      	bne.n	98fa <_impl_k_mutex_lock+0xb6>
	__asm__ volatile("cpsie i" : : : "memory");
    98f8:	b662      	cpsie	i
	k_sched_unlock();
    98fa:	f000 fa39 	bl	9d70 <k_sched_unlock>
	return -EAGAIN;
    98fe:	200b      	movs	r0, #11
    9900:	e7b4      	b.n	986c <_impl_k_mutex_lock+0x28>
    9902:	46c0      	nop			; (mov r8, r8)
    9904:	20000ba4 	.word	0x20000ba4

00009908 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    990a:	4f35      	ldr	r7, [pc, #212]	; (99e0 <_impl_k_mutex_unlock+0xd8>)
    990c:	0005      	movs	r5, r0
    990e:	68ba      	ldr	r2, [r7, #8]
    9910:	7ad3      	ldrb	r3, [r2, #11]
    9912:	3b01      	subs	r3, #1
    9914:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    9916:	68c3      	ldr	r3, [r0, #12]
    9918:	1e5c      	subs	r4, r3, #1
    991a:	60c4      	str	r4, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    991c:	2c00      	cmp	r4, #0
    991e:	d002      	beq.n	9926 <_impl_k_mutex_unlock+0x1e>
		k_sched_unlock();
    9920:	f000 fa26 	bl	9d70 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    9924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    9926:	f3ef 8610 	mrs	r6, PRIMASK
    992a:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    992c:	6901      	ldr	r1, [r0, #16]
    992e:	6880      	ldr	r0, [r0, #8]
    9930:	f7ff ff72 	bl	9818 <adjust_owner_prio.isra.7>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    9934:	4b2b      	ldr	r3, [pc, #172]	; (99e4 <_impl_k_mutex_unlock+0xdc>)
    9936:	681a      	ldr	r2, [r3, #0]
    9938:	682b      	ldr	r3, [r5, #0]
    993a:	2a00      	cmp	r2, #0
    993c:	d012      	beq.n	9964 <_impl_k_mutex_unlock+0x5c>
    993e:	429d      	cmp	r5, r3
    9940:	d100      	bne.n	9944 <_impl_k_mutex_unlock+0x3c>
    9942:	0023      	movs	r3, r4
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    9944:	2b00      	cmp	r3, #0
    9946:	d105      	bne.n	9954 <_impl_k_mutex_unlock+0x4c>
	if (key) {
    9948:	2e00      	cmp	r6, #0
    994a:	d100      	bne.n	994e <_impl_k_mutex_unlock+0x46>
	__asm__ volatile("cpsie i" : : : "memory");
    994c:	b662      	cpsie	i
		mutex->owner = NULL;
    994e:	2300      	movs	r3, #0
    9950:	60ab      	str	r3, [r5, #8]
    9952:	e7e5      	b.n	9920 <_impl_k_mutex_unlock+0x18>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    9954:	6a1a      	ldr	r2, [r3, #32]
    9956:	3202      	adds	r2, #2
    9958:	d108      	bne.n	996c <_impl_k_mutex_unlock+0x64>
	return (node == list->tail) ? NULL : node->next;
    995a:	686a      	ldr	r2, [r5, #4]
    995c:	4293      	cmp	r3, r2
    995e:	d0f3      	beq.n	9948 <_impl_k_mutex_unlock+0x40>
    9960:	681b      	ldr	r3, [r3, #0]
    9962:	e7ef      	b.n	9944 <_impl_k_mutex_unlock+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9964:	429d      	cmp	r5, r3
    9966:	d0ef      	beq.n	9948 <_impl_k_mutex_unlock+0x40>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    9968:	2b00      	cmp	r3, #0
    996a:	d0ed      	beq.n	9948 <_impl_k_mutex_unlock+0x40>
			if (_is_thread_timeout_expired(thread)) {
    996c:	001c      	movs	r4, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    996e:	685b      	ldr	r3, [r3, #4]
    9970:	6822      	ldr	r2, [r4, #0]
	return _abort_timeout(&thread->base.timeout);
    9972:	0021      	movs	r1, r4
    9974:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9976:	6822      	ldr	r2, [r4, #0]
    9978:	3110      	adds	r1, #16
    997a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    997c:	2202      	movs	r2, #2
    997e:	7a63      	ldrb	r3, [r4, #9]
    9980:	4393      	bics	r3, r2
    9982:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9984:	6a23      	ldr	r3, [r4, #32]
    9986:	1c5a      	adds	r2, r3, #1
    9988:	d00e      	beq.n	99a8 <_impl_k_mutex_unlock+0xa0>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    998a:	697a      	ldr	r2, [r7, #20]
    998c:	4291      	cmp	r1, r2
    998e:	d003      	beq.n	9998 <_impl_k_mutex_unlock+0x90>
	return (node == list->tail) ? NULL : node->next;
    9990:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9992:	6911      	ldr	r1, [r2, #16]
    9994:	18cb      	adds	r3, r1, r3
    9996:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    9998:	6963      	ldr	r3, [r4, #20]
    999a:	6922      	ldr	r2, [r4, #16]
    999c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    999e:	6922      	ldr	r2, [r4, #16]
    99a0:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    99a2:	2301      	movs	r3, #1
    99a4:	425b      	negs	r3, r3
    99a6:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    99a8:	7a63      	ldrb	r3, [r4, #9]
    99aa:	2204      	movs	r2, #4
    99ac:	0019      	movs	r1, r3
    99ae:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    99b0:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    99b2:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    99b4:	4213      	tst	r3, r2
    99b6:	d102      	bne.n	99be <_impl_k_mutex_unlock+0xb6>
    99b8:	6a23      	ldr	r3, [r4, #32]
    99ba:	3301      	adds	r3, #1
    99bc:	d00c      	beq.n	99d8 <_impl_k_mutex_unlock+0xd0>
	if (key) {
    99be:	2e00      	cmp	r6, #0
    99c0:	d100      	bne.n	99c4 <_impl_k_mutex_unlock+0xbc>
	__asm__ volatile("cpsie i" : : : "memory");
    99c2:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    99c4:	2300      	movs	r3, #0
    99c6:	65e3      	str	r3, [r4, #92]	; 0x5c
		mutex->lock_count++;
    99c8:	68eb      	ldr	r3, [r5, #12]
		mutex->owner = new_owner;
    99ca:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    99cc:	3301      	adds	r3, #1
    99ce:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    99d0:	230a      	movs	r3, #10
    99d2:	56e3      	ldrsb	r3, [r4, r3]
    99d4:	612b      	str	r3, [r5, #16]
    99d6:	e7a3      	b.n	9920 <_impl_k_mutex_unlock+0x18>
		_add_thread_to_ready_q(thread);
    99d8:	0020      	movs	r0, r4
    99da:	f000 f8a7 	bl	9b2c <_add_thread_to_ready_q>
    99de:	e7ee      	b.n	99be <_impl_k_mutex_unlock+0xb6>
    99e0:	20000ba4 	.word	0x20000ba4
    99e4:	20000d98 	.word	0x20000d98

000099e8 <k_queue_init>:
	list->head = NULL;
    99e8:	2300      	movs	r3, #0
    99ea:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    99ec:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    99ee:	0003      	movs	r3, r0
    99f0:	3308      	adds	r3, #8
	list->head = (sys_dnode_t *)list;
    99f2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    99f4:	60c3      	str	r3, [r0, #12]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    99f6:	4770      	bx	lr

000099f8 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    99f8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    99fa:	f3ef 8410 	mrs	r4, PRIMASK
    99fe:	b672      	cpsid	i
	if (!prev) {
    9a00:	2900      	cmp	r1, #0
    9a02:	d107      	bne.n	9a14 <k_queue_insert+0x1c>
	node->next = list->head;
    9a04:	6803      	ldr	r3, [r0, #0]
    9a06:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    9a08:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    9a0a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	d10a      	bne.n	9a26 <k_queue_insert+0x2e>
		list->tail = node;
    9a10:	6042      	str	r2, [r0, #4]
    9a12:	e008      	b.n	9a26 <k_queue_insert+0x2e>
	} else if (!prev->next) {
    9a14:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    9a16:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d112      	bne.n	9a42 <k_queue_insert+0x4a>
	if (!list->tail) {
    9a1c:	6843      	ldr	r3, [r0, #4]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d10d      	bne.n	9a3e <k_queue_insert+0x46>
		list->tail = node;
    9a22:	6042      	str	r2, [r0, #4]
		list->head = node;
    9a24:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9a26:	3008      	adds	r0, #8
    9a28:	2104      	movs	r1, #4
    9a2a:	f000 ffc9 	bl	a9c0 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    9a2e:	2800      	cmp	r0, #0
    9a30:	d009      	beq.n	9a46 <k_queue_insert+0x4e>
	_update_time_slice_before_swap();
    9a32:	f000 fa1b 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    9a36:	0020      	movs	r0, r4
    9a38:	f7f6 ff6c 	bl	914 <__swap>
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    9a3c:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    9a3e:	601a      	str	r2, [r3, #0]
    9a40:	e7e6      	b.n	9a10 <k_queue_insert+0x18>
		prev->next = node;
    9a42:	600a      	str	r2, [r1, #0]
    9a44:	e7ef      	b.n	9a26 <k_queue_insert+0x2e>
	if (key) {
    9a46:	2c00      	cmp	r4, #0
    9a48:	d1f8      	bne.n	9a3c <k_queue_insert+0x44>
	__asm__ volatile("cpsie i" : : : "memory");
    9a4a:	b662      	cpsie	i
    9a4c:	e7f6      	b.n	9a3c <k_queue_insert+0x44>

00009a4e <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
    9a4e:	b510      	push	{r4, lr}
    9a50:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
    9a52:	6841      	ldr	r1, [r0, #4]
    9a54:	f7ff ffd0 	bl	99f8 <k_queue_insert>
}
    9a58:	bd10      	pop	{r4, pc}

00009a5a <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
    9a5a:	b510      	push	{r4, lr}
    9a5c:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
    9a5e:	2100      	movs	r1, #0
    9a60:	f7ff ffca 	bl	99f8 <k_queue_insert>
}
    9a64:	bd10      	pop	{r4, pc}

00009a66 <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    9a66:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9a68:	f3ef 8410 	mrs	r4, PRIMASK
    9a6c:	b672      	cpsid	i
	if (!list->tail) {
    9a6e:	6843      	ldr	r3, [r0, #4]
    9a70:	2b00      	cmp	r3, #0
    9a72:	d10d      	bne.n	9a90 <k_queue_append_list+0x2a>
		list->head = (sys_snode_t *)head;
    9a74:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    9a76:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9a78:	2104      	movs	r1, #4
    9a7a:	3008      	adds	r0, #8
    9a7c:	f000 ffa0 	bl	a9c0 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    9a80:	2800      	cmp	r0, #0
    9a82:	d007      	beq.n	9a94 <k_queue_append_list+0x2e>
	_update_time_slice_before_swap();
    9a84:	f000 f9f2 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    9a88:	0020      	movs	r0, r4
    9a8a:	f7f6 ff43 	bl	914 <__swap>
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    9a8e:	bd10      	pop	{r4, pc}
		list->tail->next = (sys_snode_t *)head;
    9a90:	6019      	str	r1, [r3, #0]
    9a92:	e7f0      	b.n	9a76 <k_queue_append_list+0x10>
	if (key) {
    9a94:	2c00      	cmp	r4, #0
    9a96:	d1fa      	bne.n	9a8e <k_queue_append_list+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    9a98:	b662      	cpsie	i
    9a9a:	e7f8      	b.n	9a8e <k_queue_append_list+0x28>

00009a9c <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a9e:	0004      	movs	r4, r0
    9aa0:	b087      	sub	sp, #28
    9aa2:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    9aa4:	f3ef 8310 	mrs	r3, PRIMASK
    9aa8:	b672      	cpsid	i
    9aaa:	6800      	ldr	r0, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    9aac:	2800      	cmp	r0, #0
    9aae:	d00a      	beq.n	9ac6 <k_queue_get+0x2a>
	list->head = node->next;
    9ab0:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    9ab2:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    9ab4:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    9ab6:	4288      	cmp	r0, r1
    9ab8:	d100      	bne.n	9abc <k_queue_get+0x20>
		list->tail = list->head;
    9aba:	6062      	str	r2, [r4, #4]
	if (key) {
    9abc:	2b00      	cmp	r3, #0
    9abe:	d100      	bne.n	9ac2 <k_queue_get+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    9ac0:	b662      	cpsie	i
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    9ac2:	b007      	add	sp, #28
    9ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (timeout == K_NO_WAIT) {
    9ac6:	2900      	cmp	r1, #0
    9ac8:	d101      	bne.n	9ace <k_queue_get+0x32>
		return NULL;
    9aca:	0008      	movs	r0, r1
    9acc:	e7f6      	b.n	9abc <k_queue_get+0x20>
	if (key) {
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d100      	bne.n	9ad4 <k_queue_get+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    9ad2:	b662      	cpsie	i
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    9ad4:	ae01      	add	r6, sp, #4
    9ad6:	0023      	movs	r3, r4
    9ad8:	2200      	movs	r2, #0
    9ada:	2104      	movs	r1, #4
    9adc:	0030      	movs	r0, r6
    9ade:	f000 fec1 	bl	a864 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    9ae2:	270f      	movs	r7, #15
    9ae4:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    9ae6:	002a      	movs	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    9ae8:	403b      	ands	r3, r7
		err = k_poll(&event, 1, timeout);
    9aea:	2101      	movs	r1, #1
    9aec:	0030      	movs	r0, r6
		event.state = K_POLL_STATE_NOT_READY;
    9aee:	7373      	strb	r3, [r6, #13]
		err = k_poll(&event, 1, timeout);
    9af0:	f000 fed0 	bl	a894 <k_poll>
		if (err) {
    9af4:	2800      	cmp	r0, #0
    9af6:	d001      	beq.n	9afc <k_queue_get+0x60>
			return NULL;
    9af8:	2000      	movs	r0, #0
    9afa:	e7e2      	b.n	9ac2 <k_queue_get+0x26>
	__asm__ volatile("mrs %0, PRIMASK;"
    9afc:	f3ef 8310 	mrs	r3, PRIMASK
    9b00:	b672      	cpsid	i
    9b02:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    9b04:	2800      	cmp	r0, #0
    9b06:	d008      	beq.n	9b1a <k_queue_get+0x7e>
	list->head = node->next;
    9b08:	6802      	ldr	r2, [r0, #0]
	if (list->tail == node) {
    9b0a:	6861      	ldr	r1, [r4, #4]
	list->head = node->next;
    9b0c:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
    9b0e:	4288      	cmp	r0, r1
    9b10:	d100      	bne.n	9b14 <k_queue_get+0x78>
		list->tail = list->head;
    9b12:	6062      	str	r2, [r4, #4]
	if (key) {
    9b14:	2b00      	cmp	r3, #0
    9b16:	d002      	beq.n	9b1e <k_queue_get+0x82>
    9b18:	e7d3      	b.n	9ac2 <k_queue_get+0x26>
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d102      	bne.n	9b24 <k_queue_get+0x88>
	__asm__ volatile("cpsie i" : : : "memory");
    9b1e:	b662      	cpsie	i
	} while (!val && timeout == K_FOREVER);
    9b20:	2800      	cmp	r0, #0
    9b22:	d1ce      	bne.n	9ac2 <k_queue_get+0x26>
    9b24:	1c6b      	adds	r3, r5, #1
    9b26:	d0dd      	beq.n	9ae4 <k_queue_get+0x48>
    9b28:	e7e6      	b.n	9af8 <k_queue_get+0x5c>
	...

00009b2c <_add_thread_to_ready_q>:
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9b2c:	230a      	movs	r3, #10
{
    9b2e:	b530      	push	{r4, r5, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9b30:	56c3      	ldrsb	r3, [r0, r3]
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9b32:	251f      	movs	r5, #31
	return prio + _NUM_COOP_PRIO;
    9b34:	001c      	movs	r4, r3
    9b36:	3410      	adds	r4, #16
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9b38:	4025      	ands	r5, r4
	return (prio + _NUM_COOP_PRIO) >> 5;
    9b3a:	1162      	asrs	r2, r4, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9b3c:	2401      	movs	r4, #1
    9b3e:	40ac      	lsls	r4, r5
	*bmap |= _get_ready_q_prio_bit(prio);
    9b40:	490d      	ldr	r1, [pc, #52]	; (9b78 <_add_thread_to_ready_q+0x4c>)
    9b42:	3206      	adds	r2, #6
    9b44:	0092      	lsls	r2, r2, #2
    9b46:	188a      	adds	r2, r1, r2
    9b48:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9b4a:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    9b4c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    9b4e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    9b50:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9b52:	1d1a      	adds	r2, r3, #4
    9b54:	188a      	adds	r2, r1, r2
	node->next = list;
    9b56:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    9b58:	18cb      	adds	r3, r1, r3
    9b5a:	689a      	ldr	r2, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    9b5c:	240a      	movs	r4, #10
    9b5e:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    9b60:	689a      	ldr	r2, [r3, #8]
    9b62:	6010      	str	r0, [r2, #0]
    9b64:	220a      	movs	r2, #10
	list->tail = node;
    9b66:	6098      	str	r0, [r3, #8]
    9b68:	69cb      	ldr	r3, [r1, #28]
    9b6a:	5704      	ldrsb	r4, [r0, r4]
    9b6c:	569a      	ldrsb	r2, [r3, r2]
    9b6e:	4294      	cmp	r4, r2
    9b70:	db00      	blt.n	9b74 <_add_thread_to_ready_q+0x48>
    9b72:	0018      	movs	r0, r3
    9b74:	61c8      	str	r0, [r1, #28]
	_ready_q.prio_bmap[0] = 1;
# ifndef CONFIG_SMP
	_ready_q.cache = thread;
# endif
#endif
}
    9b76:	bd30      	pop	{r4, r5, pc}
    9b78:	20000ba4 	.word	0x20000ba4

00009b7c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9b7c:	7a43      	ldrb	r3, [r0, #9]
    9b7e:	2204      	movs	r2, #4
    9b80:	0019      	movs	r1, r3
    9b82:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    9b84:	221b      	movs	r2, #27
{
    9b86:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9b88:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    9b8a:	4213      	tst	r3, r2
    9b8c:	d104      	bne.n	9b98 <_ready_thread+0x1c>
    9b8e:	6a03      	ldr	r3, [r0, #32]
    9b90:	3301      	adds	r3, #1
    9b92:	d101      	bne.n	9b98 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    9b94:	f7ff ffca 	bl	9b2c <_add_thread_to_ready_q>
}
    9b98:	bd10      	pop	{r4, pc}
	...

00009b9c <_add_timeout>:
{
    9b9c:	b510      	push	{r4, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    9b9e:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    9ba0:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    9ba2:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d123      	bne.n	9bf0 <_add_timeout+0x54>
	__asm__ volatile("mrs %0, PRIMASK;"
    9ba8:	f3ef 8410 	mrs	r4, PRIMASK
    9bac:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    9bae:	2201      	movs	r2, #1
    9bb0:	4252      	negs	r2, r2
    9bb2:	610a      	str	r2, [r1, #16]
	if (thread) {
    9bb4:	2800      	cmp	r0, #0
    9bb6:	d012      	beq.n	9bde <_add_timeout+0x42>
	if (timeout_obj->wait_q) {
    9bb8:	68ca      	ldr	r2, [r1, #12]
    9bba:	2a00      	cmp	r2, #0
    9bbc:	d009      	beq.n	9bd2 <_add_timeout+0x36>
	node->prev->next = node->next;
    9bbe:	6842      	ldr	r2, [r0, #4]
    9bc0:	6801      	ldr	r1, [r0, #0]
    9bc2:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9bc4:	6801      	ldr	r1, [r0, #0]
    9bc6:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9bc8:	2102      	movs	r1, #2
    9bca:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    9bcc:	61c3      	str	r3, [r0, #28]
    9bce:	438a      	bics	r2, r1
    9bd0:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    9bd2:	f7ff ffd3 	bl	9b7c <_ready_thread>
	if (key) {
    9bd6:	2c00      	cmp	r4, #0
    9bd8:	d100      	bne.n	9bdc <_add_timeout+0x40>
	__asm__ volatile("cpsie i" : : : "memory");
    9bda:	b662      	cpsie	i
}
    9bdc:	bd10      	pop	{r4, pc}
	if (key) {
    9bde:	2c00      	cmp	r4, #0
    9be0:	d100      	bne.n	9be4 <_add_timeout+0x48>
	__asm__ volatile("cpsie i" : : : "memory");
    9be2:	b662      	cpsie	i
		if (timeout->func) {
    9be4:	694b      	ldr	r3, [r1, #20]
    9be6:	2b00      	cmp	r3, #0
    9be8:	d0f8      	beq.n	9bdc <_add_timeout+0x40>
			timeout->func(timeout);
    9bea:	0008      	movs	r0, r1
    9bec:	4798      	blx	r3
    9bee:	e7f5      	b.n	9bdc <_add_timeout+0x40>
	return list->head == list;
    9bf0:	4a11      	ldr	r2, [pc, #68]	; (9c38 <_add_timeout+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9bf2:	0010      	movs	r0, r2
	return list->head == list;
    9bf4:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9bf6:	3010      	adds	r0, #16
    9bf8:	4283      	cmp	r3, r0
    9bfa:	d10e      	bne.n	9c1a <_add_timeout+0x7e>
	node->next = list;
    9bfc:	0013      	movs	r3, r2
    9bfe:	3310      	adds	r3, #16
    9c00:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
    9c02:	6953      	ldr	r3, [r2, #20]
    9c04:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    9c06:	6953      	ldr	r3, [r2, #20]
    9c08:	6019      	str	r1, [r3, #0]
	list->tail = node;
    9c0a:	6151      	str	r1, [r2, #20]
    9c0c:	e7e6      	b.n	9bdc <_add_timeout+0x40>
		*delta -= in_q->delta_ticks_from_prev;
    9c0e:	1b00      	subs	r0, r0, r4
    9c10:	6108      	str	r0, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    9c12:	6950      	ldr	r0, [r2, #20]
    9c14:	4283      	cmp	r3, r0
    9c16:	d0f1      	beq.n	9bfc <_add_timeout+0x60>
    9c18:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d0ee      	beq.n	9bfc <_add_timeout+0x60>
		if (*delta <= in_q->delta_ticks_from_prev) {
    9c1e:	6908      	ldr	r0, [r1, #16]
    9c20:	691c      	ldr	r4, [r3, #16]
    9c22:	42a0      	cmp	r0, r4
    9c24:	dcf3      	bgt.n	9c0e <_add_timeout+0x72>
		node->prev = insert_point->prev;
    9c26:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    9c28:	1a20      	subs	r0, r4, r0
    9c2a:	6118      	str	r0, [r3, #16]
    9c2c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    9c2e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    9c30:	685a      	ldr	r2, [r3, #4]
    9c32:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    9c34:	6059      	str	r1, [r3, #4]
    9c36:	e7d1      	b.n	9bdc <_add_timeout+0x40>
    9c38:	20000ba4 	.word	0x20000ba4

00009c3c <_remove_thread_from_ready_q>:
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9c3c:	230a      	movs	r3, #10
{
    9c3e:	b510      	push	{r4, lr}
	node->prev->next = node->next;
    9c40:	6842      	ldr	r2, [r0, #4]
    9c42:	6801      	ldr	r1, [r0, #0]
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9c44:	56c3      	ldrsb	r3, [r0, r3]
    9c46:	6011      	str	r1, [r2, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9c48:	4c12      	ldr	r4, [pc, #72]	; (9c94 <_remove_thread_from_ready_q+0x58>)
	node->next->prev = node->prev;
    9c4a:	6801      	ldr	r1, [r0, #0]
    9c4c:	3314      	adds	r3, #20
    9c4e:	00db      	lsls	r3, r3, #3
    9c50:	604a      	str	r2, [r1, #4]
    9c52:	1d1a      	adds	r2, r3, #4
	return list->head == list;
    9c54:	18e3      	adds	r3, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    9c56:	685b      	ldr	r3, [r3, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9c58:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_empty(q)) {
    9c5a:	4293      	cmp	r3, r2
    9c5c:	d10d      	bne.n	9c7a <_remove_thread_from_ready_q+0x3e>
		_clear_ready_q_prio_bit(thread->base.prio);
    9c5e:	220a      	movs	r2, #10
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9c60:	211f      	movs	r1, #31
    9c62:	5682      	ldrsb	r2, [r0, r2]
	return (prio + _NUM_COOP_PRIO) >> 5;
    9c64:	3210      	adds	r2, #16
    9c66:	1153      	asrs	r3, r2, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9c68:	400a      	ands	r2, r1
    9c6a:	391e      	subs	r1, #30
    9c6c:	4091      	lsls	r1, r2
	*bmap &= ~_get_ready_q_prio_bit(prio);
    9c6e:	3306      	adds	r3, #6
    9c70:	009b      	lsls	r3, r3, #2
    9c72:	18e3      	adds	r3, r4, r3
    9c74:	689a      	ldr	r2, [r3, #8]
    9c76:	438a      	bics	r2, r1
    9c78:	609a      	str	r2, [r3, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9c7a:	69e3      	ldr	r3, [r4, #28]
    9c7c:	4298      	cmp	r0, r3
    9c7e:	d106      	bne.n	9c8e <_remove_thread_from_ready_q+0x52>
	return __builtin_ffs(op);
    9c80:	6a20      	ldr	r0, [r4, #32]
    9c82:	f7f6 fb9b 	bl	3bc <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    9c86:	3003      	adds	r0, #3
    9c88:	00c0      	lsls	r0, r0, #3
    9c8a:	1820      	adds	r0, r4, r0
    9c8c:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9c8e:	61e3      	str	r3, [r4, #28]
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
# endif
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    9c90:	bd10      	pop	{r4, pc}
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	20000ba4 	.word	0x20000ba4

00009c98 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    9c98:	b570      	push	{r4, r5, r6, lr}
    9c9a:	680c      	ldr	r4, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c9c:	42a1      	cmp	r1, r4
    9c9e:	d100      	bne.n	9ca2 <_pend_thread+0xa>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    9ca0:	2400      	movs	r4, #0
    9ca2:	2c00      	cmp	r4, #0
    9ca4:	d021      	beq.n	9cea <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    9ca6:	250a      	movs	r5, #10
    9ca8:	230a      	movs	r3, #10
    9caa:	5745      	ldrsb	r5, [r0, r5]
    9cac:	56e3      	ldrsb	r3, [r4, r3]
    9cae:	429d      	cmp	r5, r3
    9cb0:	da15      	bge.n	9cde <_pend_thread+0x46>
		node->prev = insert_point->prev;
    9cb2:	6863      	ldr	r3, [r4, #4]
		node->next = insert_point;
    9cb4:	6004      	str	r4, [r0, #0]
		node->prev = insert_point->prev;
    9cb6:	6043      	str	r3, [r0, #4]
		insert_point->prev->next = node;
    9cb8:	6863      	ldr	r3, [r4, #4]
    9cba:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    9cbc:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    9cbe:	2302      	movs	r3, #2
    9cc0:	7a44      	ldrb	r4, [r0, #9]
    9cc2:	4323      	orrs	r3, r4
    9cc4:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    9cc6:	1c53      	adds	r3, r2, #1
    9cc8:	d008      	beq.n	9cdc <_pend_thread+0x44>
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    9cca:	0004      	movs	r4, r0
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    9ccc:	1cd3      	adds	r3, r2, #3
    9cce:	089b      	lsrs	r3, r3, #2
    9cd0:	3410      	adds	r4, #16
    9cd2:	000a      	movs	r2, r1
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
    9cd4:	3301      	adds	r3, #1
    9cd6:	0021      	movs	r1, r4
    9cd8:	f7ff ff60 	bl	9b9c <_add_timeout>

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    9cdc:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    9cde:	684b      	ldr	r3, [r1, #4]
    9ce0:	429c      	cmp	r4, r3
    9ce2:	d002      	beq.n	9cea <_pend_thread+0x52>
    9ce4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    9ce6:	2c00      	cmp	r4, #0
    9ce8:	d1db      	bne.n	9ca2 <_pend_thread+0xa>
	node->next = list;
    9cea:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    9cec:	684b      	ldr	r3, [r1, #4]
    9cee:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    9cf0:	684b      	ldr	r3, [r1, #4]
    9cf2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    9cf4:	6048      	str	r0, [r1, #4]
    9cf6:	e7e2      	b.n	9cbe <_pend_thread+0x26>

00009cf8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    9cf8:	b570      	push	{r4, r5, r6, lr}
    9cfa:	000e      	movs	r6, r1
    9cfc:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
    9cfe:	4c05      	ldr	r4, [pc, #20]	; (9d14 <_pend_current_thread+0x1c>)
    9d00:	68a0      	ldr	r0, [r4, #8]
    9d02:	f7ff ff9b 	bl	9c3c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    9d06:	0032      	movs	r2, r6
    9d08:	0029      	movs	r1, r5
    9d0a:	68a0      	ldr	r0, [r4, #8]
    9d0c:	f7ff ffc4 	bl	9c98 <_pend_thread>
}
    9d10:	bd70      	pop	{r4, r5, r6, pc}
    9d12:	46c0      	nop			; (mov r8, r8)
    9d14:	20000ba4 	.word	0x20000ba4

00009d18 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    9d18:	b510      	push	{r4, lr}
	ready_range = _ready_q.prio_bmap[0];
    9d1a:	4c07      	ldr	r4, [pc, #28]	; (9d38 <__must_switch_threads+0x20>)
    9d1c:	6a20      	ldr	r0, [r4, #32]
    9d1e:	f7f6 fb4d 	bl	3bc <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    9d22:	220a      	movs	r2, #10
    9d24:	68a3      	ldr	r3, [r4, #8]
    9d26:	569a      	ldrsb	r2, [r3, r2]
	return abs_prio - _NUM_COOP_PRIO;
    9d28:	0003      	movs	r3, r0
    9d2a:	3b11      	subs	r3, #17
	return prio1 < prio2;
    9d2c:	2001      	movs	r0, #1
    9d2e:	429a      	cmp	r2, r3
    9d30:	dc00      	bgt.n	9d34 <__must_switch_threads+0x1c>
    9d32:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    9d34:	bd10      	pop	{r4, pc}
    9d36:	46c0      	nop			; (mov r8, r8)
    9d38:	20000ba4 	.word	0x20000ba4

00009d3c <_reschedule_threads>:
{
    9d3c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    9d3e:	4b0a      	ldr	r3, [pc, #40]	; (9d68 <_reschedule_threads+0x2c>)
    9d40:	0004      	movs	r4, r0
    9d42:	689b      	ldr	r3, [r3, #8]
    9d44:	895b      	ldrh	r3, [r3, #10]
    9d46:	2b7f      	cmp	r3, #127	; 0x7f
    9d48:	d80a      	bhi.n	9d60 <_reschedule_threads+0x24>
    9d4a:	f7ff ffe5 	bl	9d18 <__must_switch_threads>
    9d4e:	2800      	cmp	r0, #0
    9d50:	d006      	beq.n	9d60 <_reschedule_threads+0x24>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    9d52:	2200      	movs	r2, #0
    9d54:	4b05      	ldr	r3, [pc, #20]	; (9d6c <_reschedule_threads+0x30>)
    9d56:	0020      	movs	r0, r4
    9d58:	601a      	str	r2, [r3, #0]
    9d5a:	f7f6 fddb 	bl	914 <__swap>
    9d5e:	e002      	b.n	9d66 <_reschedule_threads+0x2a>
	if (key) {
    9d60:	2c00      	cmp	r4, #0
    9d62:	d100      	bne.n	9d66 <_reschedule_threads+0x2a>
	__asm__ volatile("cpsie i" : : : "memory");
    9d64:	b662      	cpsie	i
}
    9d66:	bd10      	pop	{r4, pc}
    9d68:	20000ba4 	.word	0x20000ba4
    9d6c:	20000d9c 	.word	0x20000d9c

00009d70 <k_sched_unlock>:
{
    9d70:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9d72:	f3ef 8010 	mrs	r0, PRIMASK
    9d76:	b672      	cpsid	i
	++_current->base.sched_locked;
    9d78:	4b03      	ldr	r3, [pc, #12]	; (9d88 <k_sched_unlock+0x18>)
    9d7a:	689a      	ldr	r2, [r3, #8]
    9d7c:	7ad3      	ldrb	r3, [r2, #11]
    9d7e:	3301      	adds	r3, #1
    9d80:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    9d82:	f7ff ffdb 	bl	9d3c <_reschedule_threads>
}
    9d86:	bd10      	pop	{r4, pc}
    9d88:	20000ba4 	.word	0x20000ba4

00009d8c <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9d8c:	230a      	movs	r3, #10
{
    9d8e:	b570      	push	{r4, r5, r6, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9d90:	56c3      	ldrsb	r3, [r0, r3]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9d92:	4c10      	ldr	r4, [pc, #64]	; (9dd4 <_move_thread_to_end_of_prio_q+0x48>)
    9d94:	3314      	adds	r3, #20
    9d96:	00db      	lsls	r3, r3, #3
    9d98:	1d1a      	adds	r2, r3, #4
    9d9a:	18a2      	adds	r2, r4, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    9d9c:	6851      	ldr	r1, [r2, #4]
    9d9e:	4288      	cmp	r0, r1
    9da0:	d016      	beq.n	9dd0 <_move_thread_to_end_of_prio_q+0x44>
	node->prev->next = node->next;
    9da2:	6805      	ldr	r5, [r0, #0]
    9da4:	6841      	ldr	r1, [r0, #4]
	node->prev = list->tail;
    9da6:	18e3      	adds	r3, r4, r3
	node->prev->next = node->next;
    9da8:	600d      	str	r5, [r1, #0]
	node->next->prev = node->prev;
    9daa:	6805      	ldr	r5, [r0, #0]
    9dac:	6069      	str	r1, [r5, #4]
	node->next = list;
    9dae:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    9db0:	689a      	ldr	r2, [r3, #8]
    9db2:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    9db4:	689a      	ldr	r2, [r3, #8]
    9db6:	6010      	str	r0, [r2, #0]
	list->tail = node;
    9db8:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9dba:	69e3      	ldr	r3, [r4, #28]
    9dbc:	4298      	cmp	r0, r3
    9dbe:	d106      	bne.n	9dce <_move_thread_to_end_of_prio_q+0x42>
	return __builtin_ffs(op);
    9dc0:	6a20      	ldr	r0, [r4, #32]
    9dc2:	f7f6 fafb 	bl	3bc <__ffssi2>
	sys_dlist_t *list = &_ready_q.q[q_index];
    9dc6:	3003      	adds	r0, #3
    9dc8:	00c0      	lsls	r0, r0, #3
    9dca:	1820      	adds	r0, r4, r0
    9dcc:	6843      	ldr	r3, [r0, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9dce:	61e3      	str	r3, [r4, #28]
}
    9dd0:	bd70      	pop	{r4, r5, r6, pc}
    9dd2:	46c0      	nop			; (mov r8, r8)
    9dd4:	20000ba4 	.word	0x20000ba4

00009dd8 <_impl_k_yield>:
{
    9dd8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9dda:	f3ef 8510 	mrs	r5, PRIMASK
    9dde:	b672      	cpsid	i
	_move_thread_to_end_of_prio_q(_current);
    9de0:	4c09      	ldr	r4, [pc, #36]	; (9e08 <_impl_k_yield+0x30>)
    9de2:	68a0      	ldr	r0, [r4, #8]
    9de4:	f7ff ffd2 	bl	9d8c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    9de8:	68a2      	ldr	r2, [r4, #8]
    9dea:	69e3      	ldr	r3, [r4, #28]
    9dec:	429a      	cmp	r2, r3
    9dee:	d103      	bne.n	9df8 <_impl_k_yield+0x20>
	if (key) {
    9df0:	2d00      	cmp	r5, #0
    9df2:	d100      	bne.n	9df6 <_impl_k_yield+0x1e>
	__asm__ volatile("cpsie i" : : : "memory");
    9df4:	b662      	cpsie	i
}
    9df6:	bd70      	pop	{r4, r5, r6, pc}
	_time_slice_elapsed = 0;
    9df8:	2200      	movs	r2, #0
    9dfa:	4b04      	ldr	r3, [pc, #16]	; (9e0c <_impl_k_yield+0x34>)
    9dfc:	0028      	movs	r0, r5
    9dfe:	601a      	str	r2, [r3, #0]
    9e00:	f7f6 fd88 	bl	914 <__swap>
}
    9e04:	e7f7      	b.n	9df6 <_impl_k_yield+0x1e>
    9e06:	46c0      	nop			; (mov r8, r8)
    9e08:	20000ba4 	.word	0x20000ba4
    9e0c:	20000d9c 	.word	0x20000d9c

00009e10 <_impl_k_current_get>:
	return _current;
    9e10:	4b01      	ldr	r3, [pc, #4]	; (9e18 <_impl_k_current_get+0x8>)
    9e12:	6898      	ldr	r0, [r3, #8]
}
    9e14:	4770      	bx	lr
    9e16:	46c0      	nop			; (mov r8, r8)
    9e18:	20000ba4 	.word	0x20000ba4

00009e1c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9e1c:	4b0f      	ldr	r3, [pc, #60]	; (9e5c <_is_thread_time_slicing+0x40>)
{
    9e1e:	b082      	sub	sp, #8
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9e20:	681a      	ldr	r2, [r3, #0]
		return 0;
    9e22:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9e24:	429a      	cmp	r2, r3
    9e26:	dd16      	ble.n	9e56 <_is_thread_time_slicing+0x3a>
	return thread == _idle_thread;
    9e28:	4b0d      	ldr	r3, [pc, #52]	; (9e60 <_is_thread_time_slicing+0x44>)
    9e2a:	681b      	ldr	r3, [r3, #0]
    9e2c:	9301      	str	r3, [sp, #4]
    9e2e:	9a01      	ldr	r2, [sp, #4]
		return 0;
    9e30:	2300      	movs	r3, #0
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9e32:	4290      	cmp	r0, r2
    9e34:	d00f      	beq.n	9e56 <_is_thread_time_slicing+0x3a>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    9e36:	220a      	movs	r2, #10
    9e38:	4b0a      	ldr	r3, [pc, #40]	; (9e64 <_is_thread_time_slicing+0x48>)
    9e3a:	5682      	ldrsb	r2, [r0, r2]
    9e3c:	6819      	ldr	r1, [r3, #0]
		return 0;
    9e3e:	2300      	movs	r3, #0
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    9e40:	428a      	cmp	r2, r1
    9e42:	db08      	blt.n	9e56 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
    9e44:	4b08      	ldr	r3, [pc, #32]	; (9e68 <_is_thread_time_slicing+0x4c>)
    9e46:	3214      	adds	r2, #20
    9e48:	00d2      	lsls	r2, r2, #3
    9e4a:	189a      	adds	r2, r3, r2
    9e4c:	6890      	ldr	r0, [r2, #8]
    9e4e:	6853      	ldr	r3, [r2, #4]
    9e50:	1a1b      	subs	r3, r3, r0
    9e52:	1e58      	subs	r0, r3, #1
    9e54:	4183      	sbcs	r3, r0
}
    9e56:	0018      	movs	r0, r3
    9e58:	b002      	add	sp, #8
    9e5a:	4770      	bx	lr
    9e5c:	20000cc8 	.word	0x20000cc8
    9e60:	0000b02c 	.word	0x0000b02c
    9e64:	20000ccc 	.word	0x20000ccc
    9e68:	20000ba4 	.word	0x20000ba4

00009e6c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    9e6c:	2200      	movs	r2, #0
    9e6e:	4b01      	ldr	r3, [pc, #4]	; (9e74 <_update_time_slice_before_swap+0x8>)
    9e70:	601a      	str	r2, [r3, #0]
}
    9e72:	4770      	bx	lr
    9e74:	20000d9c 	.word	0x20000d9c

00009e78 <_unpend_first_thread>:
	if (_handling_timeouts) {
    9e78:	4b11      	ldr	r3, [pc, #68]	; (9ec0 <_unpend_first_thread+0x48>)
    9e7a:	6802      	ldr	r2, [r0, #0]
    9e7c:	681b      	ldr	r3, [r3, #0]
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d010      	beq.n	9ea4 <_unpend_first_thread+0x2c>
	return list->head == list;
    9e82:	0013      	movs	r3, r2
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e84:	4290      	cmp	r0, r2
    9e86:	d100      	bne.n	9e8a <_unpend_first_thread+0x12>
    9e88:	2300      	movs	r3, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d102      	bne.n	9e94 <_unpend_first_thread+0x1c>
    9e8e:	2300      	movs	r3, #0
		_unpend_thread(thread);
	}

	return thread;
}
    9e90:	0018      	movs	r0, r3
    9e92:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    9e94:	6a1a      	ldr	r2, [r3, #32]
    9e96:	3202      	adds	r2, #2
    9e98:	d108      	bne.n	9eac <_unpend_first_thread+0x34>
	return (node == list->tail) ? NULL : node->next;
    9e9a:	6842      	ldr	r2, [r0, #4]
    9e9c:	4293      	cmp	r3, r2
    9e9e:	d0f6      	beq.n	9e8e <_unpend_first_thread+0x16>
    9ea0:	681b      	ldr	r3, [r3, #0]
    9ea2:	e7f2      	b.n	9e8a <_unpend_first_thread+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ea4:	4290      	cmp	r0, r2
    9ea6:	d0f3      	beq.n	9e90 <_unpend_first_thread+0x18>
    9ea8:	1e13      	subs	r3, r2, #0
	if (thread) {
    9eaa:	d0f1      	beq.n	9e90 <_unpend_first_thread+0x18>
	node->prev->next = node->next;
    9eac:	685a      	ldr	r2, [r3, #4]
    9eae:	6819      	ldr	r1, [r3, #0]
    9eb0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9eb2:	6819      	ldr	r1, [r3, #0]
    9eb4:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9eb6:	2102      	movs	r1, #2
    9eb8:	7a5a      	ldrb	r2, [r3, #9]
    9eba:	438a      	bics	r2, r1
    9ebc:	725a      	strb	r2, [r3, #9]
    9ebe:	e7e7      	b.n	9e90 <_unpend_first_thread+0x18>
    9ec0:	20000d98 	.word	0x20000d98

00009ec4 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    9ec4:	0003      	movs	r3, r0
    9ec6:	3310      	adds	r3, #16
	sem->count = initial_count;
    9ec8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    9eca:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    9ecc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    9ece:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    9ed0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    9ed2:	6143      	str	r3, [r0, #20]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    9ed4:	4770      	bx	lr
	...

00009ed8 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    9ed8:	b570      	push	{r4, r5, r6, lr}
    9eda:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    9edc:	f3ef 8610 	mrs	r6, PRIMASK
    9ee0:	b672      	cpsid	i
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    9ee2:	f7ff ffc9 	bl	9e78 <_unpend_first_thread>
    9ee6:	1e04      	subs	r4, r0, #0
	if (!thread) {
    9ee8:	d113      	bne.n	9f12 <_impl_k_sem_give+0x3a>
	sem->count += (sem->count != sem->limit);
    9eea:	68aa      	ldr	r2, [r5, #8]
    9eec:	68eb      	ldr	r3, [r5, #12]
	return _handle_obj_poll_events(&sem->poll_events, state);
    9eee:	0028      	movs	r0, r5
	sem->count += (sem->count != sem->limit);
    9ef0:	1a9b      	subs	r3, r3, r2
    9ef2:	1e59      	subs	r1, r3, #1
    9ef4:	418b      	sbcs	r3, r1
    9ef6:	189b      	adds	r3, r3, r2
    9ef8:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    9efa:	3010      	adds	r0, #16
    9efc:	2102      	movs	r1, #2
    9efe:	f000 fd5f 	bl	a9c0 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    9f02:	2800      	cmp	r0, #0
    9f04:	d02d      	beq.n	9f62 <_impl_k_sem_give+0x8a>
	_update_time_slice_before_swap();
    9f06:	f7ff ffb1 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    9f0a:	0030      	movs	r0, r6
    9f0c:	f7f6 fd02 	bl	914 <__swap>
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    9f10:	bd70      	pop	{r4, r5, r6, pc}
	return _abort_timeout(&thread->base.timeout);
    9f12:	0001      	movs	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9f14:	6a03      	ldr	r3, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    9f16:	3110      	adds	r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9f18:	1c5a      	adds	r2, r3, #1
    9f1a:	d00f      	beq.n	9f3c <_impl_k_sem_give+0x64>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9f1c:	4a1a      	ldr	r2, [pc, #104]	; (9f88 <_impl_k_sem_give+0xb0>)
    9f1e:	6952      	ldr	r2, [r2, #20]
    9f20:	4291      	cmp	r1, r2
    9f22:	d003      	beq.n	9f2c <_impl_k_sem_give+0x54>
	return (node == list->tail) ? NULL : node->next;
    9f24:	6902      	ldr	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9f26:	6911      	ldr	r1, [r2, #16]
    9f28:	18cb      	adds	r3, r1, r3
    9f2a:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
    9f2c:	6963      	ldr	r3, [r4, #20]
    9f2e:	6922      	ldr	r2, [r4, #16]
    9f30:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9f32:	6922      	ldr	r2, [r4, #16]
    9f34:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    9f36:	2301      	movs	r3, #1
    9f38:	425b      	negs	r3, r3
    9f3a:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9f3c:	7a63      	ldrb	r3, [r4, #9]
    9f3e:	2204      	movs	r2, #4
    9f40:	0019      	movs	r1, r3
    9f42:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    9f44:	221b      	movs	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9f46:	7261      	strb	r1, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    9f48:	4213      	tst	r3, r2
    9f4a:	d102      	bne.n	9f52 <_impl_k_sem_give+0x7a>
    9f4c:	6a23      	ldr	r3, [r4, #32]
    9f4e:	3301      	adds	r3, #1
    9f50:	d00b      	beq.n	9f6a <_impl_k_sem_give+0x92>
    9f52:	2300      	movs	r3, #0
    9f54:	65e3      	str	r3, [r4, #92]	; 0x5c
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    9f56:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
    9f5a:	2b0d      	cmp	r3, #13
    9f5c:	d801      	bhi.n	9f62 <_impl_k_sem_give+0x8a>
    9f5e:	2b03      	cmp	r3, #3
    9f60:	d107      	bne.n	9f72 <_impl_k_sem_give+0x9a>
	if (key) {
    9f62:	2e00      	cmp	r6, #0
    9f64:	d1d4      	bne.n	9f10 <_impl_k_sem_give+0x38>
	__asm__ volatile("cpsie i" : : : "memory");
    9f66:	b662      	cpsie	i
    9f68:	e7d2      	b.n	9f10 <_impl_k_sem_give+0x38>
		_add_thread_to_ready_q(thread);
    9f6a:	0020      	movs	r0, r4
    9f6c:	f7ff fdde 	bl	9b2c <_add_thread_to_ready_q>
    9f70:	e7ef      	b.n	9f52 <_impl_k_sem_give+0x7a>
	return _is_preempt(_current) && __must_switch_threads();
    9f72:	4b05      	ldr	r3, [pc, #20]	; (9f88 <_impl_k_sem_give+0xb0>)
    9f74:	689b      	ldr	r3, [r3, #8]
    9f76:	895b      	ldrh	r3, [r3, #10]
    9f78:	2b7f      	cmp	r3, #127	; 0x7f
    9f7a:	d8f2      	bhi.n	9f62 <_impl_k_sem_give+0x8a>
    9f7c:	f7ff fecc 	bl	9d18 <__must_switch_threads>
		return handle_poll_events(sem);
    9f80:	1e43      	subs	r3, r0, #1
    9f82:	4198      	sbcs	r0, r3
    9f84:	e7bd      	b.n	9f02 <_impl_k_sem_give+0x2a>
    9f86:	46c0      	nop			; (mov r8, r8)
    9f88:	20000ba4 	.word	0x20000ba4

00009f8c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    9f8c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    9f8e:	f3ef 8410 	mrs	r4, PRIMASK
    9f92:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    9f94:	6883      	ldr	r3, [r0, #8]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d006      	beq.n	9fa8 <_impl_k_sem_take+0x1c>
		sem->count--;
    9f9a:	3b01      	subs	r3, #1
    9f9c:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
    9f9e:	2000      	movs	r0, #0
	if (key) {
    9fa0:	4284      	cmp	r4, r0
    9fa2:	d100      	bne.n	9fa6 <_impl_k_sem_take+0x1a>
	__asm__ volatile("cpsie i" : : : "memory");
    9fa4:	b662      	cpsie	i
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    9fa6:	bd10      	pop	{r4, pc}
	if (timeout == K_NO_WAIT) {
    9fa8:	2900      	cmp	r1, #0
    9faa:	d105      	bne.n	9fb8 <_impl_k_sem_take+0x2c>
	if (key) {
    9fac:	2c00      	cmp	r4, #0
    9fae:	d100      	bne.n	9fb2 <_impl_k_sem_take+0x26>
	__asm__ volatile("cpsie i" : : : "memory");
    9fb0:	b662      	cpsie	i
		return -EBUSY;
    9fb2:	2010      	movs	r0, #16
    9fb4:	4240      	negs	r0, r0
    9fb6:	e7f6      	b.n	9fa6 <_impl_k_sem_take+0x1a>
	_pend_current_thread(&sem->wait_q, timeout);
    9fb8:	f7ff fe9e 	bl	9cf8 <_pend_current_thread>
	_update_time_slice_before_swap();
    9fbc:	f7ff ff56 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    9fc0:	0020      	movs	r0, r4
    9fc2:	f7f6 fca7 	bl	914 <__swap>
	return _Swap(key);
    9fc6:	e7ee      	b.n	9fa6 <_impl_k_sem_take+0x1a>

00009fc8 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    9fc8:	4b02      	ldr	r3, [pc, #8]	; (9fd4 <_impl_k_uptime_get_32+0xc>)
    9fca:	6818      	ldr	r0, [r3, #0]
    9fcc:	6859      	ldr	r1, [r3, #4]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    9fce:	0080      	lsls	r0, r0, #2
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    9fd0:	4770      	bx	lr
    9fd2:	46c0      	nop			; (mov r8, r8)
    9fd4:	20000da0 	.word	0x20000da0

00009fd8 <_tick_get>:
	__asm__ volatile("mrs %0, PRIMASK;"
    9fd8:	f3ef 8310 	mrs	r3, PRIMASK
    9fdc:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    9fde:	4a03      	ldr	r2, [pc, #12]	; (9fec <_tick_get+0x14>)
    9fe0:	6810      	ldr	r0, [r2, #0]
    9fe2:	6851      	ldr	r1, [r2, #4]
	if (key) {
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d100      	bne.n	9fea <_tick_get+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    9fe8:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    9fea:	4770      	bx	lr
    9fec:	20000da0 	.word	0x20000da0

00009ff0 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    9ff0:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    9ff2:	f7ff fff1 	bl	9fd8 <_tick_get>
    9ff6:	0f83      	lsrs	r3, r0, #30
    9ff8:	0089      	lsls	r1, r1, #2
    9ffa:	4319      	orrs	r1, r3
    9ffc:	0080      	lsls	r0, r0, #2
}
    9ffe:	bd10      	pop	{r4, pc}

0000a000 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    a000:	b5f0      	push	{r4, r5, r6, r7, lr}
    a002:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
    a004:	f3ef 8410 	mrs	r4, PRIMASK
    a008:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    a00a:	4960      	ldr	r1, [pc, #384]	; (a18c <_nano_sys_clock_tick_announce+0x18c>)
    a00c:	17c3      	asrs	r3, r0, #31
    a00e:	9301      	str	r3, [sp, #4]
    a010:	9000      	str	r0, [sp, #0]
    a012:	680a      	ldr	r2, [r1, #0]
    a014:	684b      	ldr	r3, [r1, #4]
    a016:	9d00      	ldr	r5, [sp, #0]
    a018:	9e01      	ldr	r6, [sp, #4]
    a01a:	1952      	adds	r2, r2, r5
    a01c:	4173      	adcs	r3, r6
    a01e:	600a      	str	r2, [r1, #0]
    a020:	604b      	str	r3, [r1, #4]
	if (key) {
    a022:	2c00      	cmp	r4, #0
    a024:	d100      	bne.n	a028 <_nano_sys_clock_tick_announce+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    a026:	b662      	cpsie	i
	list->head = (sys_dnode_t *)list;
    a028:	aa04      	add	r2, sp, #16
    a02a:	9204      	str	r2, [sp, #16]
	list->tail = (sys_dnode_t *)list;
    a02c:	6052      	str	r2, [r2, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    a02e:	f3ef 8510 	mrs	r5, PRIMASK
    a032:	b672      	cpsid	i
	return list->head == list;
    a034:	4c56      	ldr	r4, [pc, #344]	; (a190 <_nano_sys_clock_tick_announce+0x190>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a036:	4e57      	ldr	r6, [pc, #348]	; (a194 <_nano_sys_clock_tick_announce+0x194>)
	return list->head == list;
    a038:	6923      	ldr	r3, [r4, #16]
    a03a:	0029      	movs	r1, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a03c:	42b3      	cmp	r3, r6
    a03e:	d001      	beq.n	a044 <_nano_sys_clock_tick_announce+0x44>
	if (!next) {
    a040:	2b00      	cmp	r3, #0
    a042:	d11f      	bne.n	a084 <_nano_sys_clock_tick_announce+0x84>
	if (key) {
    a044:	2d00      	cmp	r5, #0
    a046:	d100      	bne.n	a04a <_nano_sys_clock_tick_announce+0x4a>
	__asm__ volatile("cpsie i" : : : "memory");
    a048:	b662      	cpsie	i
	if (!_is_thread_time_slicing(_current)) {
    a04a:	4c51      	ldr	r4, [pc, #324]	; (a190 <_nano_sys_clock_tick_announce+0x190>)
    a04c:	68a0      	ldr	r0, [r4, #8]
    a04e:	f7ff fee5 	bl	9e1c <_is_thread_time_slicing>
    a052:	2800      	cmp	r0, #0
    a054:	d014      	beq.n	a080 <_nano_sys_clock_tick_announce+0x80>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a056:	4a50      	ldr	r2, [pc, #320]	; (a198 <_nano_sys_clock_tick_announce+0x198>)
    a058:	9b00      	ldr	r3, [sp, #0]
    a05a:	6811      	ldr	r1, [r2, #0]
    a05c:	009b      	lsls	r3, r3, #2
    a05e:	18cb      	adds	r3, r1, r3
	if (_time_slice_elapsed >= _time_slice_duration) {
    a060:	494e      	ldr	r1, [pc, #312]	; (a19c <_nano_sys_clock_tick_announce+0x19c>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a062:	6013      	str	r3, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    a064:	6809      	ldr	r1, [r1, #0]
    a066:	428b      	cmp	r3, r1
    a068:	db0a      	blt.n	a080 <_nano_sys_clock_tick_announce+0x80>
		_time_slice_elapsed = 0;
    a06a:	2300      	movs	r3, #0
    a06c:	6013      	str	r3, [r2, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
    a06e:	f3ef 8510 	mrs	r5, PRIMASK
    a072:	b672      	cpsid	i
		_move_thread_to_end_of_prio_q(_current);
    a074:	68a0      	ldr	r0, [r4, #8]
    a076:	f7ff fe89 	bl	9d8c <_move_thread_to_end_of_prio_q>
	if (key) {
    a07a:	2d00      	cmp	r5, #0
    a07c:	d100      	bne.n	a080 <_nano_sys_clock_tick_announce+0x80>
	__asm__ volatile("cpsie i" : : : "memory");
    a07e:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    a080:	b007      	add	sp, #28
    a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_handling_timeouts = 1;
    a084:	2601      	movs	r6, #1
    a086:	4d46      	ldr	r5, [pc, #280]	; (a1a0 <_nano_sys_clock_tick_announce+0x1a0>)
			timeout->delta_ticks_from_prev = 0;
    a088:	2700      	movs	r7, #0
	_handling_timeouts = 1;
    a08a:	602e      	str	r6, [r5, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a08c:	2502      	movs	r5, #2
    a08e:	426d      	negs	r5, r5
    a090:	46ac      	mov	ip, r5
	return (node == list->tail) ? NULL : node->next;
    a092:	9403      	str	r4, [sp, #12]
		s32_t tmp = timeout->delta_ticks_from_prev;
    a094:	691d      	ldr	r5, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    a096:	4285      	cmp	r5, r0
    a098:	da20      	bge.n	a0dc <_nano_sys_clock_tick_announce+0xdc>
			timeout->delta_ticks_from_prev = 0;
    a09a:	611f      	str	r7, [r3, #16]
    a09c:	9c03      	ldr	r4, [sp, #12]
		ticks -= tmp;
    a09e:	1b40      	subs	r0, r0, r5
    a0a0:	6966      	ldr	r6, [r4, #20]
    a0a2:	2500      	movs	r5, #0
    a0a4:	429e      	cmp	r6, r3
    a0a6:	d000      	beq.n	a0aa <_nano_sys_clock_tick_announce+0xaa>
    a0a8:	681d      	ldr	r5, [r3, #0]
		if (timeout->delta_ticks_from_prev == 0) {
    a0aa:	691e      	ldr	r6, [r3, #16]
    a0ac:	2e00      	cmp	r6, #0
    a0ae:	d118      	bne.n	a0e2 <_nano_sys_clock_tick_announce+0xe2>
	node->prev->next = node->next;
    a0b0:	681c      	ldr	r4, [r3, #0]
    a0b2:	685e      	ldr	r6, [r3, #4]
    a0b4:	6034      	str	r4, [r6, #0]
	node->next->prev = node->prev;
    a0b6:	681c      	ldr	r4, [r3, #0]
    a0b8:	6066      	str	r6, [r4, #4]
	node->next = list->head;
    a0ba:	6814      	ldr	r4, [r2, #0]
	node->prev = list;
    a0bc:	605a      	str	r2, [r3, #4]
	node->next = list->head;
    a0be:	601c      	str	r4, [r3, #0]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a0c0:	4664      	mov	r4, ip
	list->head->prev = node;
    a0c2:	6816      	ldr	r6, [r2, #0]
	list->head = node;
    a0c4:	6013      	str	r3, [r2, #0]
	list->head->prev = node;
    a0c6:	6073      	str	r3, [r6, #4]
    a0c8:	611c      	str	r4, [r3, #16]
	if (key) {
    a0ca:	2900      	cmp	r1, #0
    a0cc:	d100      	bne.n	a0d0 <_nano_sys_clock_tick_announce+0xd0>
	__asm__ volatile("cpsie i" : : : "memory");
    a0ce:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    a0d0:	f3ef 8110 	mrs	r1, PRIMASK
    a0d4:	b672      	cpsid	i
    a0d6:	1e2b      	subs	r3, r5, #0
	while (next) {
    a0d8:	d1dc      	bne.n	a094 <_nano_sys_clock_tick_announce+0x94>
    a0da:	e004      	b.n	a0e6 <_nano_sys_clock_tick_announce+0xe6>
			timeout->delta_ticks_from_prev -= ticks;
    a0dc:	1a2e      	subs	r6, r5, r0
    a0de:	611e      	str	r6, [r3, #16]
    a0e0:	e7dc      	b.n	a09c <_nano_sys_clock_tick_announce+0x9c>
		} else if (ticks <= 0) {
    a0e2:	2800      	cmp	r0, #0
    a0e4:	dcf1      	bgt.n	a0ca <_nano_sys_clock_tick_announce+0xca>
	if (key) {
    a0e6:	2900      	cmp	r1, #0
    a0e8:	d100      	bne.n	a0ec <_nano_sys_clock_tick_announce+0xec>
	__asm__ volatile("cpsie i" : : : "memory");
    a0ea:	b662      	cpsie	i
	return list->head == list;
    a0ec:	9804      	ldr	r0, [sp, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a0ee:	4290      	cmp	r0, r2
    a0f0:	d103      	bne.n	a0fa <_nano_sys_clock_tick_announce+0xfa>
	_handling_timeouts = 0;
    a0f2:	2200      	movs	r2, #0
    a0f4:	4b2a      	ldr	r3, [pc, #168]	; (a1a0 <_nano_sys_clock_tick_announce+0x1a0>)
    a0f6:	601a      	str	r2, [r3, #0]
    a0f8:	e7a7      	b.n	a04a <_nano_sys_clock_tick_announce+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a0fa:	2800      	cmp	r0, #0
    a0fc:	d0f9      	beq.n	a0f2 <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    a0fe:	9b05      	ldr	r3, [sp, #20]
    a100:	2400      	movs	r4, #0
    a102:	4298      	cmp	r0, r3
    a104:	d000      	beq.n	a108 <_nano_sys_clock_tick_announce+0x108>
    a106:	6804      	ldr	r4, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a108:	2601      	movs	r6, #1
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a10a:	2704      	movs	r7, #4
    a10c:	4276      	negs	r6, r6
	node->prev->next = node->next;
    a10e:	6843      	ldr	r3, [r0, #4]
    a110:	6802      	ldr	r2, [r0, #0]
    a112:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a114:	6802      	ldr	r2, [r0, #0]
    a116:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    a118:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
    a11a:	f3ef 8510 	mrs	r5, PRIMASK
    a11e:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    a120:	6106      	str	r6, [r0, #16]
	if (thread) {
    a122:	2b00      	cmp	r3, #0
    a124:	d021      	beq.n	a16a <_nano_sys_clock_tick_announce+0x16a>
	if (timeout_obj->wait_q) {
    a126:	68c2      	ldr	r2, [r0, #12]
    a128:	2a00      	cmp	r2, #0
    a12a:	d00a      	beq.n	a142 <_nano_sys_clock_tick_announce+0x142>
	node->prev->next = node->next;
    a12c:	685a      	ldr	r2, [r3, #4]
    a12e:	6819      	ldr	r1, [r3, #0]
    a130:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a132:	6819      	ldr	r1, [r3, #0]
    a134:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a136:	2102      	movs	r1, #2
    a138:	7a5a      	ldrb	r2, [r3, #9]
    a13a:	438a      	bics	r2, r1
    a13c:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    a13e:	2200      	movs	r2, #0
    a140:	61da      	str	r2, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a142:	7a5a      	ldrb	r2, [r3, #9]
    a144:	0011      	movs	r1, r2
    a146:	43b9      	bics	r1, r7
    a148:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a14a:	211b      	movs	r1, #27
    a14c:	420a      	tst	r2, r1
    a14e:	d102      	bne.n	a156 <_nano_sys_clock_tick_announce+0x156>
    a150:	6a1a      	ldr	r2, [r3, #32]
    a152:	3201      	adds	r2, #1
    a154:	d015      	beq.n	a182 <_nano_sys_clock_tick_announce+0x182>
	if (key) {
    a156:	2d00      	cmp	r5, #0
    a158:	d100      	bne.n	a15c <_nano_sys_clock_tick_announce+0x15c>
	__asm__ volatile("cpsie i" : : : "memory");
    a15a:	b662      	cpsie	i
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a15c:	2c00      	cmp	r4, #0
    a15e:	d0c8      	beq.n	a0f2 <_nano_sys_clock_tick_announce+0xf2>
	return (node == list->tail) ? NULL : node->next;
    a160:	9b05      	ldr	r3, [sp, #20]
    a162:	42a3      	cmp	r3, r4
    a164:	d109      	bne.n	a17a <_nano_sys_clock_tick_announce+0x17a>
    a166:	2300      	movs	r3, #0
    a168:	e008      	b.n	a17c <_nano_sys_clock_tick_announce+0x17c>
	if (key) {
    a16a:	2d00      	cmp	r5, #0
    a16c:	d100      	bne.n	a170 <_nano_sys_clock_tick_announce+0x170>
	__asm__ volatile("cpsie i" : : : "memory");
    a16e:	b662      	cpsie	i
		if (timeout->func) {
    a170:	6943      	ldr	r3, [r0, #20]
    a172:	2b00      	cmp	r3, #0
    a174:	d0f2      	beq.n	a15c <_nano_sys_clock_tick_announce+0x15c>
			timeout->func(timeout);
    a176:	4798      	blx	r3
    a178:	e7f0      	b.n	a15c <_nano_sys_clock_tick_announce+0x15c>
    a17a:	6823      	ldr	r3, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a17c:	0020      	movs	r0, r4
    a17e:	001c      	movs	r4, r3
    a180:	e7c5      	b.n	a10e <_nano_sys_clock_tick_announce+0x10e>
		_add_thread_to_ready_q(thread);
    a182:	0018      	movs	r0, r3
    a184:	f7ff fcd2 	bl	9b2c <_add_thread_to_ready_q>
    a188:	e7e5      	b.n	a156 <_nano_sys_clock_tick_announce+0x156>
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	20000da0 	.word	0x20000da0
    a190:	20000ba4 	.word	0x20000ba4
    a194:	20000bb4 	.word	0x20000bb4
    a198:	20000d9c 	.word	0x20000d9c
    a19c:	20000cc8 	.word	0x20000cc8
    a1a0:	20000d98 	.word	0x20000d98

0000a1a4 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    a1a4:	2301      	movs	r3, #1
    a1a6:	2280      	movs	r2, #128	; 0x80
{
    a1a8:	b510      	push	{r4, lr}
	k_work_q_start(&k_sys_work_q,
    a1aa:	4804      	ldr	r0, [pc, #16]	; (a1bc <k_sys_work_q_init+0x18>)
    a1ac:	425b      	negs	r3, r3
    a1ae:	00d2      	lsls	r2, r2, #3
    a1b0:	4903      	ldr	r1, [pc, #12]	; (a1c0 <k_sys_work_q_init+0x1c>)
    a1b2:	f000 f967 	bl	a484 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    a1b6:	2000      	movs	r0, #0
    a1b8:	bd10      	pop	{r4, pc}
    a1ba:	46c0      	nop			; (mov r8, r8)
    a1bc:	20000da8 	.word	0x20000da8
    a1c0:	20001d50 	.word	0x20001d50

0000a1c4 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    a1c4:	7a42      	ldrb	r2, [r0, #9]
    a1c6:	2300      	movs	r3, #0
    a1c8:	06d2      	lsls	r2, r2, #27
    a1ca:	d104      	bne.n	a1d6 <_is_thread_ready+0x12>
    a1cc:	6a03      	ldr	r3, [r0, #32]
    a1ce:	3301      	adds	r3, #1
    a1d0:	4258      	negs	r0, r3
    a1d2:	4143      	adcs	r3, r0
    a1d4:	b2db      	uxtb	r3, r3
}
    a1d6:	0018      	movs	r0, r3
    a1d8:	4770      	bx	lr
	...

0000a1dc <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a1dc:	6902      	ldr	r2, [r0, #16]
{
    a1de:	0003      	movs	r3, r0
		return _INACTIVE;
    a1e0:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a1e2:	1c51      	adds	r1, r2, #1
    a1e4:	d010      	beq.n	a208 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a1e6:	4909      	ldr	r1, [pc, #36]	; (a20c <_abort_timeout+0x30>)
    a1e8:	6949      	ldr	r1, [r1, #20]
    a1ea:	428b      	cmp	r3, r1
    a1ec:	d003      	beq.n	a1f6 <_abort_timeout+0x1a>
    a1ee:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a1f0:	6908      	ldr	r0, [r1, #16]
    a1f2:	1882      	adds	r2, r0, r2
    a1f4:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    a1f6:	685a      	ldr	r2, [r3, #4]
    a1f8:	6819      	ldr	r1, [r3, #0]
	return 0;
    a1fa:	2000      	movs	r0, #0
    a1fc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a1fe:	6819      	ldr	r1, [r3, #0]
    a200:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a202:	2201      	movs	r2, #1
    a204:	4252      	negs	r2, r2
    a206:	611a      	str	r2, [r3, #16]
}
    a208:	4770      	bx	lr
    a20a:	46c0      	nop			; (mov r8, r8)
    a20c:	20000ba4 	.word	0x20000ba4

0000a210 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    a210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    a212:	f3ef 8310 	mrs	r3, PRIMASK
    a216:	b672      	cpsid	i
    a218:	9301      	str	r3, [sp, #4]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a21a:	2300      	movs	r3, #0
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a21c:	0004      	movs	r4, r0
	return list->head == list;
    a21e:	4a17      	ldr	r2, [pc, #92]	; (a27c <schedule_new_thread.part.13+0x6c>)
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    a220:	3103      	adds	r1, #3
    a222:	0889      	lsrs	r1, r1, #2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a224:	61c3      	str	r3, [r0, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a226:	4e16      	ldr	r6, [pc, #88]	; (a280 <schedule_new_thread.part.13+0x70>)
	return list->head == list;
    a228:	6913      	ldr	r3, [r2, #16]
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    a22a:	3101      	adds	r1, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a22c:	3410      	adds	r4, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a22e:	6201      	str	r1, [r0, #32]
	timeout->thread = thread;
    a230:	6180      	str	r0, [r0, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a232:	42b3      	cmp	r3, r6
    a234:	d10a      	bne.n	a24c <schedule_new_thread.part.13+0x3c>
	node->next = list;
    a236:	6106      	str	r6, [r0, #16]
	node->prev = list->tail;
    a238:	6953      	ldr	r3, [r2, #20]
    a23a:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    a23c:	6953      	ldr	r3, [r2, #20]
    a23e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a240:	6154      	str	r4, [r2, #20]
	if (key) {
    a242:	9b01      	ldr	r3, [sp, #4]
    a244:	2b00      	cmp	r3, #0
    a246:	d100      	bne.n	a24a <schedule_new_thread.part.13+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    a248:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a24a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a24c:	2b00      	cmp	r3, #0
    a24e:	d0f2      	beq.n	a236 <schedule_new_thread.part.13+0x26>
    a250:	6957      	ldr	r7, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    a252:	6a01      	ldr	r1, [r0, #32]
    a254:	691d      	ldr	r5, [r3, #16]
    a256:	42a9      	cmp	r1, r5
    a258:	dc08      	bgt.n	a26c <schedule_new_thread.part.13+0x5c>
		node->prev = insert_point->prev;
    a25a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a25c:	1a69      	subs	r1, r5, r1
    a25e:	6119      	str	r1, [r3, #16]
    a260:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    a262:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    a264:	685a      	ldr	r2, [r3, #4]
    a266:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
    a268:	605c      	str	r4, [r3, #4]
    a26a:	e7ea      	b.n	a242 <schedule_new_thread.part.13+0x32>
		*delta -= in_q->delta_ticks_from_prev;
    a26c:	1b49      	subs	r1, r1, r5
    a26e:	6201      	str	r1, [r0, #32]
	return (node == list->tail) ? NULL : node->next;
    a270:	42bb      	cmp	r3, r7
    a272:	d0e0      	beq.n	a236 <schedule_new_thread.part.13+0x26>
    a274:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a276:	2b00      	cmp	r3, #0
    a278:	d1eb      	bne.n	a252 <schedule_new_thread.part.13+0x42>
    a27a:	e7dc      	b.n	a236 <schedule_new_thread.part.13+0x26>
    a27c:	20000ba4 	.word	0x20000ba4
    a280:	20000bb4 	.word	0x20000bb4

0000a284 <k_is_in_isr>:
    a284:	f3ef 8305 	mrs	r3, IPSR
    a288:	2001      	movs	r0, #1
    a28a:	2b0d      	cmp	r3, #13
    a28c:	d803      	bhi.n	a296 <k_is_in_isr+0x12>
    a28e:	3b03      	subs	r3, #3
    a290:	4258      	negs	r0, r3
    a292:	4158      	adcs	r0, r3
    a294:	b2c0      	uxtb	r0, r0
}
    a296:	4770      	bx	lr

0000a298 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    a298:	4b02      	ldr	r3, [pc, #8]	; (a2a4 <_is_thread_essential+0xc>)
    a29a:	689b      	ldr	r3, [r3, #8]
    a29c:	7a18      	ldrb	r0, [r3, #8]
    a29e:	2301      	movs	r3, #1
    a2a0:	4018      	ands	r0, r3
}
    a2a2:	4770      	bx	lr
    a2a4:	20000ba4 	.word	0x20000ba4

0000a2a8 <_thread_entry>:
{
    a2a8:	b510      	push	{r4, lr}
    a2aa:	0004      	movs	r4, r0
    a2ac:	0008      	movs	r0, r1
    a2ae:	0011      	movs	r1, r2
	entry(p1, p2, p3);
    a2b0:	001a      	movs	r2, r3
    a2b2:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    a2b4:	f7ff fdac 	bl	9e10 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    a2b8:	f7f6 fc76 	bl	ba8 <_impl_k_thread_abort>

0000a2bc <_impl_k_thread_start>:
{
    a2bc:	b570      	push	{r4, r5, r6, lr}
    a2be:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a2c0:	f3ef 8510 	mrs	r5, PRIMASK
    a2c4:	b672      	cpsid	i
	if (_has_thread_started(thread)) {
    a2c6:	2204      	movs	r2, #4
    a2c8:	7a43      	ldrb	r3, [r0, #9]
    a2ca:	4213      	tst	r3, r2
    a2cc:	d102      	bne.n	a2d4 <_impl_k_thread_start+0x18>
	if (key) {
    a2ce:	2d00      	cmp	r5, #0
    a2d0:	d018      	beq.n	a304 <_impl_k_thread_start+0x48>
}
    a2d2:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a2d4:	4393      	bics	r3, r2
    a2d6:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    a2d8:	f7ff ff74 	bl	a1c4 <_is_thread_ready>
    a2dc:	2800      	cmp	r0, #0
    a2de:	d0f6      	beq.n	a2ce <_impl_k_thread_start+0x12>
		_add_thread_to_ready_q(thread);
    a2e0:	0020      	movs	r0, r4
    a2e2:	f7ff fc23 	bl	9b2c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    a2e6:	4b08      	ldr	r3, [pc, #32]	; (a308 <_impl_k_thread_start+0x4c>)
    a2e8:	689b      	ldr	r3, [r3, #8]
    a2ea:	895b      	ldrh	r3, [r3, #10]
    a2ec:	2b7f      	cmp	r3, #127	; 0x7f
    a2ee:	d8ee      	bhi.n	a2ce <_impl_k_thread_start+0x12>
    a2f0:	f7ff fd12 	bl	9d18 <__must_switch_threads>
    a2f4:	2800      	cmp	r0, #0
    a2f6:	d0ea      	beq.n	a2ce <_impl_k_thread_start+0x12>
	_update_time_slice_before_swap();
    a2f8:	f7ff fdb8 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    a2fc:	0028      	movs	r0, r5
    a2fe:	f7f6 fb09 	bl	914 <__swap>
    a302:	e7e6      	b.n	a2d2 <_impl_k_thread_start+0x16>
	__asm__ volatile("cpsie i" : : : "memory");
    a304:	b662      	cpsie	i
    a306:	e7e4      	b.n	a2d2 <_impl_k_thread_start+0x16>
    a308:	20000ba4 	.word	0x20000ba4

0000a30c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    a30c:	b510      	push	{r4, lr}
    a30e:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a310:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a312:	9404      	str	r4, [sp, #16]
    a314:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a316:	9403      	str	r4, [sp, #12]
    a318:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a31a:	9402      	str	r4, [sp, #8]
    a31c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a31e:	9401      	str	r4, [sp, #4]
    a320:	9c08      	ldr	r4, [sp, #32]
    a322:	9400      	str	r4, [sp, #0]
    a324:	f7f6 fba8 	bl	a78 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    a328:	b006      	add	sp, #24
    a32a:	bd10      	pop	{r4, pc}

0000a32c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    a32c:	b530      	push	{r4, r5, lr}
    a32e:	0004      	movs	r4, r0
    a330:	b087      	sub	sp, #28
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a332:	980e      	ldr	r0, [sp, #56]	; 0x38
{
    a334:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a336:	9004      	str	r0, [sp, #16]
    a338:	980d      	ldr	r0, [sp, #52]	; 0x34
    a33a:	9003      	str	r0, [sp, #12]
    a33c:	980c      	ldr	r0, [sp, #48]	; 0x30
    a33e:	9002      	str	r0, [sp, #8]
    a340:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a342:	9001      	str	r0, [sp, #4]
    a344:	980a      	ldr	r0, [sp, #40]	; 0x28
    a346:	9000      	str	r0, [sp, #0]
    a348:	0020      	movs	r0, r4
    a34a:	f7f6 fb95 	bl	a78 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    a34e:	1c6b      	adds	r3, r5, #1
    a350:	d004      	beq.n	a35c <_impl_k_thread_create+0x30>
	if (delay == 0) {
    a352:	2d00      	cmp	r5, #0
    a354:	d105      	bne.n	a362 <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    a356:	0020      	movs	r0, r4
    a358:	f7ff ffb0 	bl	a2bc <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    a35c:	0020      	movs	r0, r4
    a35e:	b007      	add	sp, #28
    a360:	bd30      	pop	{r4, r5, pc}
    a362:	0029      	movs	r1, r5
    a364:	0020      	movs	r0, r4
    a366:	f7ff ff53 	bl	a210 <schedule_new_thread.part.13>
    a36a:	e7f7      	b.n	a35c <_impl_k_thread_create+0x30>

0000a36c <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    a36c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    a36e:	b510      	push	{r4, lr}
    a370:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
    a372:	2b00      	cmp	r3, #0
    a374:	d000      	beq.n	a378 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    a376:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    a378:	0020      	movs	r0, r4
    a37a:	f7ff ff23 	bl	a1c4 <_is_thread_ready>
    a37e:	2800      	cmp	r0, #0
    a380:	d007      	beq.n	a392 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    a382:	0020      	movs	r0, r4
    a384:	f7ff fc5a 	bl	9c3c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    a388:	2308      	movs	r3, #8
    a38a:	7a62      	ldrb	r2, [r4, #9]
    a38c:	4313      	orrs	r3, r2
    a38e:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    a390:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    a392:	2202      	movs	r2, #2
    a394:	7a63      	ldrb	r3, [r4, #9]
    a396:	4213      	tst	r3, r2
    a398:	d007      	beq.n	a3aa <_k_thread_single_abort+0x3e>
	node->prev->next = node->next;
    a39a:	6863      	ldr	r3, [r4, #4]
    a39c:	6821      	ldr	r1, [r4, #0]
    a39e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    a3a0:	6821      	ldr	r1, [r4, #0]
    a3a2:	604b      	str	r3, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a3a4:	7a63      	ldrb	r3, [r4, #9]
    a3a6:	4393      	bics	r3, r2
    a3a8:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    a3aa:	6a23      	ldr	r3, [r4, #32]
    a3ac:	3301      	adds	r3, #1
    a3ae:	d0eb      	beq.n	a388 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    a3b0:	0020      	movs	r0, r4
    a3b2:	3010      	adds	r0, #16
    a3b4:	f7ff ff12 	bl	a1dc <_abort_timeout>
    a3b8:	e7e6      	b.n	a388 <_k_thread_single_abort+0x1c>
	...

0000a3bc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    a3be:	4c1c      	ldr	r4, [pc, #112]	; (a430 <_init_static_threads+0x74>)
{
    a3c0:	b087      	sub	sp, #28
    a3c2:	0025      	movs	r5, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    a3c4:	4e1b      	ldr	r6, [pc, #108]	; (a434 <_init_static_threads+0x78>)
    a3c6:	42b4      	cmp	r4, r6
    a3c8:	d310      	bcc.n	a3ec <_init_static_threads+0x30>
	--_current->base.sched_locked;
    a3ca:	4b1b      	ldr	r3, [pc, #108]	; (a438 <_init_static_threads+0x7c>)
    a3cc:	689a      	ldr	r2, [r3, #8]
    a3ce:	7ad3      	ldrb	r3, [r2, #11]
    a3d0:	3b01      	subs	r3, #1
    a3d2:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile("mrs %0, PRIMASK;"
    a3d4:	f3ef 8710 	mrs	r7, PRIMASK
    a3d8:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    a3da:	42b5      	cmp	r5, r6
    a3dc:	d31a      	bcc.n	a414 <_init_static_threads+0x58>
	if (key) {
    a3de:	2f00      	cmp	r7, #0
    a3e0:	d100      	bne.n	a3e4 <_init_static_threads+0x28>
	__asm__ volatile("cpsie i" : : : "memory");
    a3e2:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    a3e4:	f7ff fcc4 	bl	9d70 <k_sched_unlock>
}
    a3e8:	b007      	add	sp, #28
    a3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a3ec:	6a23      	ldr	r3, [r4, #32]
    a3ee:	9304      	str	r3, [sp, #16]
    a3f0:	69e3      	ldr	r3, [r4, #28]
    a3f2:	9303      	str	r3, [sp, #12]
    a3f4:	69a3      	ldr	r3, [r4, #24]
    a3f6:	9302      	str	r3, [sp, #8]
    a3f8:	6963      	ldr	r3, [r4, #20]
    a3fa:	9301      	str	r3, [sp, #4]
    a3fc:	6923      	ldr	r3, [r4, #16]
    a3fe:	9300      	str	r3, [sp, #0]
    a400:	68e3      	ldr	r3, [r4, #12]
    a402:	68a2      	ldr	r2, [r4, #8]
    a404:	6861      	ldr	r1, [r4, #4]
    a406:	6820      	ldr	r0, [r4, #0]
    a408:	f7f6 fb36 	bl	a78 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a40c:	6823      	ldr	r3, [r4, #0]
    a40e:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
    a410:	342c      	adds	r4, #44	; 0x2c
    a412:	e7d7      	b.n	a3c4 <_init_static_threads+0x8>
		if (thread_data->init_delay != K_FOREVER) {
    a414:	6a69      	ldr	r1, [r5, #36]	; 0x24
    a416:	1c4b      	adds	r3, r1, #1
    a418:	d004      	beq.n	a424 <_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    a41a:	6828      	ldr	r0, [r5, #0]
	if (delay == 0) {
    a41c:	2900      	cmp	r1, #0
    a41e:	d103      	bne.n	a428 <_init_static_threads+0x6c>
    a420:	f7ff ff4c 	bl	a2bc <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a424:	352c      	adds	r5, #44	; 0x2c
    a426:	e7d8      	b.n	a3da <_init_static_threads+0x1e>
    a428:	f7ff fef2 	bl	a210 <schedule_new_thread.part.13>
    a42c:	e7fa      	b.n	a424 <_init_static_threads+0x68>
    a42e:	46c0      	nop			; (mov r8, r8)
    a430:	200024a0 	.word	0x200024a0
    a434:	200024a0 	.word	0x200024a0
    a438:	20000ba4 	.word	0x20000ba4

0000a43c <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    a43c:	7242      	strb	r2, [r0, #9]
	t->delta_ticks_from_prev = _INACTIVE;
    a43e:	2201      	movs	r2, #1
	thread_base->user_options = (u8_t)options;
    a440:	7203      	strb	r3, [r0, #8]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    a442:	2300      	movs	r3, #0
    a444:	4252      	negs	r2, r2
	thread_base->prio = priority;
    a446:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    a448:	72c3      	strb	r3, [r0, #11]
    a44a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    a44c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    a44e:	6183      	str	r3, [r0, #24]
	t->func = func;
    a450:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    a452:	4770      	bx	lr

0000a454 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a456:	2602      	movs	r6, #2
    a458:	0005      	movs	r5, r0
    a45a:	4276      	negs	r6, r6

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    a45c:	2101      	movs	r1, #1
    a45e:	0028      	movs	r0, r5
    a460:	4249      	negs	r1, r1
    a462:	f7ff fb1b 	bl	9a9c <k_queue_get>
    a466:	1e04      	subs	r4, r0, #0
		if (!work) {
    a468:	d0f8      	beq.n	a45c <work_q_main+0x8>
			continue;
		}

		handler = work->handler;
    a46a:	6847      	ldr	r7, [r0, #4]
    a46c:	0031      	movs	r1, r6
    a46e:	3008      	adds	r0, #8
    a470:	f000 f937 	bl	a6e2 <atomic_and>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a474:	07c3      	lsls	r3, r0, #31
    a476:	d501      	bpl.n	a47c <work_q_main+0x28>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a478:	0020      	movs	r0, r4
    a47a:	47b8      	blx	r7
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    a47c:	f7ff fcac 	bl	9dd8 <_impl_k_yield>
    a480:	e7ec      	b.n	a45c <work_q_main+0x8>
	...

0000a484 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    a484:	b5f0      	push	{r4, r5, r6, r7, lr}
    a486:	0004      	movs	r4, r0
    a488:	b087      	sub	sp, #28
    a48a:	001f      	movs	r7, r3
    a48c:	000d      	movs	r5, r1
    a48e:	0016      	movs	r6, r2
	k_queue_init(&work_q->queue);
    a490:	f7ff faaa 	bl	99e8 <k_queue_init>

    a494:	2300      	movs	r3, #0
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
    a496:	0020      	movs	r0, r4
    a498:	9305      	str	r3, [sp, #20]
    a49a:	9304      	str	r3, [sp, #16]
    a49c:	9302      	str	r3, [sp, #8]
    a49e:	9301      	str	r3, [sp, #4]
    a4a0:	9703      	str	r7, [sp, #12]
    a4a2:	9400      	str	r4, [sp, #0]
    a4a4:	4b03      	ldr	r3, [pc, #12]	; (a4b4 <k_work_q_start+0x30>)
    a4a6:	0032      	movs	r2, r6
    a4a8:	0029      	movs	r1, r5
    a4aa:	3010      	adds	r0, #16
    a4ac:	f7ff ff3e 	bl	a32c <_impl_k_thread_create>
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    a4b0:	b007      	add	sp, #28
    a4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4b4:	0000a455 	.word	0x0000a455

0000a4b8 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a4b8:	7a43      	ldrb	r3, [r0, #9]
    a4ba:	2204      	movs	r2, #4
    a4bc:	0019      	movs	r1, r3
    a4be:	4391      	bics	r1, r2
	return !(_is_thread_prevented_from_running(thread) ||
    a4c0:	221b      	movs	r2, #27
{
    a4c2:	b510      	push	{r4, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a4c4:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a4c6:	4213      	tst	r3, r2
    a4c8:	d104      	bne.n	a4d4 <_ready_thread+0x1c>
    a4ca:	6a03      	ldr	r3, [r0, #32]
    a4cc:	3301      	adds	r3, #1
    a4ce:	d101      	bne.n	a4d4 <_ready_thread+0x1c>
		_add_thread_to_ready_q(thread);
    a4d0:	f7ff fb2c 	bl	9b2c <_add_thread_to_ready_q>
}
    a4d4:	bd10      	pop	{r4, pc}

0000a4d6 <_unpend_thread>:
	node->prev->next = node->next;
    a4d6:	6843      	ldr	r3, [r0, #4]
    a4d8:	6802      	ldr	r2, [r0, #0]
    a4da:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a4dc:	6802      	ldr	r2, [r0, #0]
    a4de:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a4e0:	2202      	movs	r2, #2
    a4e2:	7a43      	ldrb	r3, [r0, #9]
    a4e4:	4393      	bics	r3, r2
    a4e6:	7243      	strb	r3, [r0, #9]
}
    a4e8:	4770      	bx	lr
	...

0000a4ec <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a4ec:	6902      	ldr	r2, [r0, #16]
{
    a4ee:	0003      	movs	r3, r0
		return _INACTIVE;
    a4f0:	0010      	movs	r0, r2
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a4f2:	1c51      	adds	r1, r2, #1
    a4f4:	d010      	beq.n	a518 <_abort_timeout+0x2c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a4f6:	4909      	ldr	r1, [pc, #36]	; (a51c <_abort_timeout+0x30>)
    a4f8:	6949      	ldr	r1, [r1, #20]
    a4fa:	428b      	cmp	r3, r1
    a4fc:	d003      	beq.n	a506 <_abort_timeout+0x1a>
	return (node == list->tail) ? NULL : node->next;
    a4fe:	6819      	ldr	r1, [r3, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a500:	6908      	ldr	r0, [r1, #16]
    a502:	1882      	adds	r2, r0, r2
    a504:	610a      	str	r2, [r1, #16]
	node->prev->next = node->next;
    a506:	685a      	ldr	r2, [r3, #4]
    a508:	6819      	ldr	r1, [r3, #0]
	return 0;
    a50a:	2000      	movs	r0, #0
    a50c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a50e:	6819      	ldr	r1, [r3, #0]
    a510:	604a      	str	r2, [r1, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a512:	2201      	movs	r2, #1
    a514:	4252      	negs	r2, r2
    a516:	611a      	str	r2, [r3, #16]
}
    a518:	4770      	bx	lr
    a51a:	46c0      	nop			; (mov r8, r8)
    a51c:	20000ba4 	.word	0x20000ba4

0000a520 <_add_timeout.constprop.9>:
	timeout->thread = thread;
    a520:	2300      	movs	r3, #0
static inline void _add_timeout(struct k_thread *thread,
    a522:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a524:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    a526:	6083      	str	r3, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a528:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    a52a:	429a      	cmp	r2, r3
    a52c:	d10d      	bne.n	a54a <_add_timeout.constprop.9+0x2a>
	__asm__ volatile("mrs %0, PRIMASK;"
    a52e:	f3ef 8310 	mrs	r3, PRIMASK
    a532:	b672      	cpsid	i
	timeout->delta_ticks_from_prev = _INACTIVE;
    a534:	2201      	movs	r2, #1
    a536:	4252      	negs	r2, r2
    a538:	6102      	str	r2, [r0, #16]
	if (key) {
    a53a:	2b00      	cmp	r3, #0
    a53c:	d100      	bne.n	a540 <_add_timeout.constprop.9+0x20>
	__asm__ volatile("cpsie i" : : : "memory");
    a53e:	b662      	cpsie	i
		if (timeout->func) {
    a540:	6943      	ldr	r3, [r0, #20]
    a542:	2b00      	cmp	r3, #0
    a544:	d000      	beq.n	a548 <_add_timeout.constprop.9+0x28>
			timeout->func(timeout);
    a546:	4798      	blx	r3
}
    a548:	bd70      	pop	{r4, r5, r6, pc}
	return list->head == list;
    a54a:	4a10      	ldr	r2, [pc, #64]	; (a58c <_add_timeout.constprop.9+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a54c:	4d10      	ldr	r5, [pc, #64]	; (a590 <_add_timeout.constprop.9+0x70>)
	return list->head == list;
    a54e:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a550:	42ab      	cmp	r3, r5
    a552:	d10c      	bne.n	a56e <_add_timeout.constprop.9+0x4e>
	node->next = list;
    a554:	6005      	str	r5, [r0, #0]
	node->prev = list->tail;
    a556:	6953      	ldr	r3, [r2, #20]
    a558:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    a55a:	6953      	ldr	r3, [r2, #20]
    a55c:	6018      	str	r0, [r3, #0]
	list->tail = node;
    a55e:	6150      	str	r0, [r2, #20]
    a560:	e7f2      	b.n	a548 <_add_timeout.constprop.9+0x28>
		*delta -= in_q->delta_ticks_from_prev;
    a562:	1b09      	subs	r1, r1, r4
    a564:	6101      	str	r1, [r0, #16]
	return (node == list->tail) ? NULL : node->next;
    a566:	6951      	ldr	r1, [r2, #20]
    a568:	428b      	cmp	r3, r1
    a56a:	d0f3      	beq.n	a554 <_add_timeout.constprop.9+0x34>
    a56c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a56e:	2b00      	cmp	r3, #0
    a570:	d0f0      	beq.n	a554 <_add_timeout.constprop.9+0x34>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a572:	6901      	ldr	r1, [r0, #16]
    a574:	691c      	ldr	r4, [r3, #16]
    a576:	42a1      	cmp	r1, r4
    a578:	dcf3      	bgt.n	a562 <_add_timeout.constprop.9+0x42>
		node->prev = insert_point->prev;
    a57a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a57c:	1a61      	subs	r1, r4, r1
    a57e:	6119      	str	r1, [r3, #16]
    a580:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
    a582:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
    a584:	685a      	ldr	r2, [r3, #4]
    a586:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
    a588:	6058      	str	r0, [r3, #4]
    a58a:	e7dd      	b.n	a548 <_add_timeout.constprop.9+0x28>
    a58c:	20000ba4 	.word	0x20000ba4
    a590:	20000bb4 	.word	0x20000bb4

0000a594 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
    a594:	b570      	push	{r4, r5, r6, lr}
    a596:	0005      	movs	r5, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    a598:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    a59a:	0004      	movs	r4, r0
    a59c:	3518      	adds	r5, #24
	if (timer->period > 0) {
    a59e:	2b00      	cmp	r3, #0
    a5a0:	dd09      	ble.n	a5b6 <_timer_expiration_handler+0x22>
	__asm__ volatile("mrs %0, PRIMASK;"
    a5a2:	f3ef 8610 	mrs	r6, PRIMASK
    a5a6:	b672      	cpsid	i
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    a5a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a5aa:	0029      	movs	r1, r5
    a5ac:	f7ff ffb8 	bl	a520 <_add_timeout.constprop.9>
	if (key) {
    a5b0:	2e00      	cmp	r6, #0
    a5b2:	d100      	bne.n	a5b6 <_timer_expiration_handler+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    a5b4:	b662      	cpsie	i
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    a5b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a5b8:	3301      	adds	r3, #1
    a5ba:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    a5bc:	6a23      	ldr	r3, [r4, #32]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d001      	beq.n	a5c6 <_timer_expiration_handler+0x32>
		timer->expiry_fn(timer);
    a5c2:	0020      	movs	r0, r4
    a5c4:	4798      	blx	r3
	return list->head == list;
    a5c6:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a5c8:	42ac      	cmp	r4, r5
    a5ca:	d00f      	beq.n	a5ec <_timer_expiration_handler+0x58>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    a5cc:	2c00      	cmp	r4, #0
    a5ce:	d00d      	beq.n	a5ec <_timer_expiration_handler+0x58>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    a5d0:	0020      	movs	r0, r4
    a5d2:	f7ff ff80 	bl	a4d6 <_unpend_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
    a5d6:	f3ef 8510 	mrs	r5, PRIMASK
    a5da:	b672      	cpsid	i

	key = irq_lock();
	_ready_thread(thread);
    a5dc:	0020      	movs	r0, r4
    a5de:	f7ff ff6b 	bl	a4b8 <_ready_thread>
	if (key) {
    a5e2:	2d00      	cmp	r5, #0
    a5e4:	d100      	bne.n	a5e8 <_timer_expiration_handler+0x54>
	__asm__ volatile("cpsie i" : : : "memory");
    a5e6:	b662      	cpsie	i
    a5e8:	2300      	movs	r3, #0
    a5ea:	65e3      	str	r3, [r4, #92]	; 0x5c
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
    a5ec:	bd70      	pop	{r4, r5, r6, pc}

0000a5ee <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    a5ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a5f0:	3203      	adds	r2, #3
    a5f2:	3103      	adds	r1, #3
    a5f4:	0892      	lsrs	r2, r2, #2
    a5f6:	0889      	lsrs	r1, r1, #2
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
    a5f8:	9200      	str	r2, [sp, #0]
{
    a5fa:	0004      	movs	r4, r0
	duration_in_ticks = _ms_to_ticks(duration);
    a5fc:	9101      	str	r1, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    a5fe:	f3ef 8510 	mrs	r5, PRIMASK
    a602:	b672      	cpsid	i

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
    a604:	6903      	ldr	r3, [r0, #16]
    a606:	3301      	adds	r3, #1
    a608:	d001      	beq.n	a60e <_impl_k_timer_start+0x20>
		_abort_timeout(&timer->timeout);
    a60a:	f7ff ff6f 	bl	a4ec <_abort_timeout>
	}

	timer->period = period_in_ticks;
    a60e:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0;
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    a610:	0021      	movs	r1, r4
	timer->period = period_in_ticks;
    a612:	62a3      	str	r3, [r4, #40]	; 0x28
	timer->status = 0;
    a614:	2300      	movs	r3, #0
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    a616:	9a01      	ldr	r2, [sp, #4]
	timer->status = 0;
    a618:	62e3      	str	r3, [r4, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
    a61a:	3118      	adds	r1, #24
    a61c:	0020      	movs	r0, r4
    a61e:	f7ff ff7f 	bl	a520 <_add_timeout.constprop.9>
	if (key) {
    a622:	2d00      	cmp	r5, #0
    a624:	d100      	bne.n	a628 <_impl_k_timer_start+0x3a>
	__asm__ volatile("cpsie i" : : : "memory");
    a626:	b662      	cpsie	i
	irq_unlock(key);
}
    a628:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

0000a62c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
    a62c:	b570      	push	{r4, r5, r6, lr}
    a62e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a630:	f3ef 8510 	mrs	r5, PRIMASK
    a634:	b672      	cpsid	i
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);
    a636:	f7ff ff59 	bl	a4ec <_abort_timeout>
	if (key) {
    a63a:	2d00      	cmp	r5, #0
    a63c:	d100      	bne.n	a640 <_impl_k_timer_stop+0x14>
	__asm__ volatile("cpsie i" : : : "memory");
    a63e:	b662      	cpsie	i

	irq_unlock(key);

	if (inactive) {
    a640:	1c43      	adds	r3, r0, #1
    a642:	d01c      	beq.n	a67e <_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn) {
    a644:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a646:	2b00      	cmp	r3, #0
    a648:	d001      	beq.n	a64e <_impl_k_timer_stop+0x22>
		timer->stop_fn(timer);
    a64a:	0020      	movs	r0, r4
    a64c:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
    a64e:	f3ef 8510 	mrs	r5, PRIMASK
    a652:	b672      	cpsid	i
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
    a654:	0023      	movs	r3, r4
	if (_handling_timeouts) {
    a656:	4a16      	ldr	r2, [pc, #88]	; (a6b0 <_impl_k_timer_stop+0x84>)
    a658:	3318      	adds	r3, #24
    a65a:	6812      	ldr	r2, [r2, #0]
    a65c:	69a0      	ldr	r0, [r4, #24]
    a65e:	2a00      	cmp	r2, #0
    a660:	d016      	beq.n	a690 <_impl_k_timer_stop+0x64>
    a662:	4283      	cmp	r3, r0
    a664:	d100      	bne.n	a668 <_impl_k_timer_stop+0x3c>
    a666:	2000      	movs	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    a668:	2800      	cmp	r0, #0
    a66a:	d109      	bne.n	a680 <_impl_k_timer_stop+0x54>
    a66c:	f3ef 8305 	mrs	r3, IPSR
    a670:	2b0d      	cmp	r3, #13
    a672:	d801      	bhi.n	a678 <_impl_k_timer_stop+0x4c>
    a674:	2b03      	cmp	r3, #3
    a676:	d116      	bne.n	a6a6 <_impl_k_timer_stop+0x7a>
	if (key) {
    a678:	2d00      	cmp	r5, #0
    a67a:	d100      	bne.n	a67e <_impl_k_timer_stop+0x52>
	__asm__ volatile("cpsie i" : : : "memory");
    a67c:	b662      	cpsie	i
	if (_is_in_isr()) {
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
	}
}
    a67e:	bd70      	pop	{r4, r5, r6, pc}
			if (_is_thread_timeout_expired(thread)) {
    a680:	6a03      	ldr	r3, [r0, #32]
    a682:	3302      	adds	r3, #2
    a684:	d108      	bne.n	a698 <_impl_k_timer_stop+0x6c>
	return (node == list->tail) ? NULL : node->next;
    a686:	69e3      	ldr	r3, [r4, #28]
    a688:	4298      	cmp	r0, r3
    a68a:	d0ef      	beq.n	a66c <_impl_k_timer_stop+0x40>
    a68c:	6800      	ldr	r0, [r0, #0]
    a68e:	e7eb      	b.n	a668 <_impl_k_timer_stop+0x3c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a690:	4283      	cmp	r3, r0
    a692:	d0eb      	beq.n	a66c <_impl_k_timer_stop+0x40>
	if (thread) {
    a694:	2800      	cmp	r0, #0
    a696:	d0e9      	beq.n	a66c <_impl_k_timer_stop+0x40>
			if (_is_thread_timeout_expired(thread)) {
    a698:	0004      	movs	r4, r0
		_unpend_thread(thread);
    a69a:	f7ff ff1c 	bl	a4d6 <_unpend_thread>
		_ready_thread(pending_thread);
    a69e:	0020      	movs	r0, r4
    a6a0:	f7ff ff0a 	bl	a4b8 <_ready_thread>
    a6a4:	e7e2      	b.n	a66c <_impl_k_timer_stop+0x40>
		_reschedule_threads(key);
    a6a6:	0028      	movs	r0, r5
    a6a8:	f7ff fb48 	bl	9d3c <_reschedule_threads>
    a6ac:	e7e7      	b.n	a67e <_impl_k_timer_stop+0x52>
    a6ae:	46c0      	nop			; (mov r8, r8)
    a6b0:	20000d98 	.word	0x20000d98

0000a6b4 <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
    a6b4:	6800      	ldr	r0, [r0, #0]
}
    a6b6:	4770      	bx	lr

0000a6b8 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    a6b8:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a6ba:	f3ef 8210 	mrs	r2, PRIMASK
    a6be:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    a6c0:	6800      	ldr	r0, [r0, #0]
	*target = value;
    a6c2:	6019      	str	r1, [r3, #0]
	if (key) {
    a6c4:	2a00      	cmp	r2, #0
    a6c6:	d100      	bne.n	a6ca <atomic_set+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a6c8:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    a6ca:	4770      	bx	lr

0000a6cc <atomic_or>:
	__asm__ volatile("mrs %0, PRIMASK;"
    a6cc:	f3ef 8210 	mrs	r2, PRIMASK
    a6d0:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    a6d2:	6803      	ldr	r3, [r0, #0]
	*target |= value;
    a6d4:	4319      	orrs	r1, r3
    a6d6:	6001      	str	r1, [r0, #0]
	if (key) {
    a6d8:	2a00      	cmp	r2, #0
    a6da:	d100      	bne.n	a6de <atomic_or+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a6dc:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    a6de:	0018      	movs	r0, r3
    a6e0:	4770      	bx	lr

0000a6e2 <atomic_and>:
	__asm__ volatile("mrs %0, PRIMASK;"
    a6e2:	f3ef 8210 	mrs	r2, PRIMASK
    a6e6:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    a6e8:	6803      	ldr	r3, [r0, #0]
	*target &= value;
    a6ea:	4019      	ands	r1, r3
    a6ec:	6001      	str	r1, [r0, #0]
	if (key) {
    a6ee:	2a00      	cmp	r2, #0
    a6f0:	d100      	bne.n	a6f4 <atomic_and+0x12>
	__asm__ volatile("cpsie i" : : : "memory");
    a6f2:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    a6f4:	0018      	movs	r0, r3
    a6f6:	4770      	bx	lr

0000a6f8 <sys_dlist_remove>:
	node->prev->next = node->next;
    a6f8:	6802      	ldr	r2, [r0, #0]
    a6fa:	6843      	ldr	r3, [r0, #4]
    a6fc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a6fe:	6802      	ldr	r2, [r0, #0]
    a700:	6053      	str	r3, [r2, #4]
}
    a702:	4770      	bx	lr

0000a704 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    a704:	b570      	push	{r4, r5, r6, lr}
    a706:	2414      	movs	r4, #20
    a708:	000d      	movs	r5, r1
    a70a:	0016      	movs	r6, r2
    a70c:	434c      	muls	r4, r1
    a70e:	1904      	adds	r4, r0, r4
	for (; last_registered >= 0; last_registered--) {
    a710:	2d00      	cmp	r5, #0
    a712:	da00      	bge.n	a716 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    a714:	bd70      	pop	{r4, r5, r6, pc}
	event->poller = NULL;
    a716:	2300      	movs	r3, #0
    a718:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
    a71a:	7b63      	ldrb	r3, [r4, #13]
    a71c:	071b      	lsls	r3, r3, #28
    a71e:	0f1b      	lsrs	r3, r3, #28
    a720:	2b02      	cmp	r3, #2
    a722:	d003      	beq.n	a72c <clear_event_registrations+0x28>
    a724:	2b04      	cmp	r3, #4
    a726:	d001      	beq.n	a72c <clear_event_registrations+0x28>
    a728:	2b01      	cmp	r3, #1
    a72a:	d102      	bne.n	a732 <clear_event_registrations+0x2e>
		sys_dlist_remove(&event->_node);
    a72c:	0020      	movs	r0, r4
    a72e:	f7ff ffe3 	bl	a6f8 <sys_dlist_remove>
	if (key) {
    a732:	2e00      	cmp	r6, #0
    a734:	d100      	bne.n	a738 <clear_event_registrations+0x34>
	__asm__ volatile("cpsie i" : : : "memory");
    a736:	b662      	cpsie	i
	__asm__ volatile("mrs %0, PRIMASK;"
    a738:	f3ef 8610 	mrs	r6, PRIMASK
    a73c:	b672      	cpsid	i
	for (; last_registered >= 0; last_registered--) {
    a73e:	3d01      	subs	r5, #1
    a740:	3c14      	subs	r4, #20
    a742:	e7e5      	b.n	a710 <clear_event_registrations+0xc>

0000a744 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
    a744:	2300      	movs	r3, #0
{
    a746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    a748:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    a74a:	6883      	ldr	r3, [r0, #8]
{
    a74c:	0006      	movs	r6, r0
    a74e:	9101      	str	r1, [sp, #4]
    a750:	0017      	movs	r7, r2
	if (!event->poller) {
    a752:	2b00      	cmp	r3, #0
    a754:	d039      	beq.n	a7ca <_signal_poll_event+0x86>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    a756:	681c      	ldr	r4, [r3, #0]
	thread->base.thread_state &= ~states;
    a758:	2220      	movs	r2, #32
    a75a:	7a63      	ldrb	r3, [r4, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    a75c:	2502      	movs	r5, #2
    a75e:	0019      	movs	r1, r3
    a760:	4391      	bics	r1, r2
    a762:	7261      	strb	r1, [r4, #9]
    a764:	422b      	tst	r3, r5
    a766:	d030      	beq.n	a7ca <_signal_poll_event+0x86>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    a768:	6a23      	ldr	r3, [r4, #32]
    a76a:	3302      	adds	r3, #2
    a76c:	d03c      	beq.n	a7e8 <_signal_poll_event+0xa4>
	sys_dlist_remove(&thread->base.k_q_node);
    a76e:	0020      	movs	r0, r4
    a770:	f7ff ffc2 	bl	a6f8 <sys_dlist_remove>
	return _abort_timeout(&thread->base.timeout);
    a774:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PENDING;
    a776:	7a63      	ldrb	r3, [r4, #9]
    a778:	3010      	adds	r0, #16
    a77a:	43ab      	bics	r3, r5
    a77c:	7263      	strb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a77e:	6a23      	ldr	r3, [r4, #32]
    a780:	1c5a      	adds	r2, r3, #1
    a782:	d00c      	beq.n	a79e <_signal_poll_event+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a784:	4a1f      	ldr	r2, [pc, #124]	; (a804 <_signal_poll_event+0xc0>)
    a786:	6952      	ldr	r2, [r2, #20]
    a788:	4290      	cmp	r0, r2
    a78a:	d003      	beq.n	a794 <_signal_poll_event+0x50>
	return (node == list->tail) ? NULL : node->next;
    a78c:	6922      	ldr	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a78e:	6911      	ldr	r1, [r2, #16]
    a790:	18cb      	adds	r3, r1, r3
    a792:	6113      	str	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    a794:	f7ff ffb0 	bl	a6f8 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    a798:	2301      	movs	r3, #1
    a79a:	425b      	negs	r3, r3
    a79c:	6223      	str	r3, [r4, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    a79e:	9b01      	ldr	r3, [sp, #4]
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d01e      	beq.n	a7e2 <_signal_poll_event+0x9e>
    a7a4:	2300      	movs	r3, #0
	return !(_is_thread_prevented_from_running(thread) ||
    a7a6:	201f      	movs	r0, #31
    a7a8:	7a65      	ldrb	r5, [r4, #9]
    a7aa:	65e3      	str	r3, [r4, #92]	; 0x5c
    a7ac:	4005      	ands	r5, r0
    a7ae:	d10c      	bne.n	a7ca <_signal_poll_event+0x86>
    a7b0:	6a23      	ldr	r3, [r4, #32]
    a7b2:	3301      	adds	r3, #1
    a7b4:	d109      	bne.n	a7ca <_signal_poll_event+0x86>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    a7b6:	0020      	movs	r0, r4
    a7b8:	f7ff f9b8 	bl	9b2c <_add_thread_to_ready_q>
    a7bc:	f3ef 8305 	mrs	r3, IPSR
    a7c0:	2b0d      	cmp	r3, #13
    a7c2:	d801      	bhi.n	a7c8 <_signal_poll_event+0x84>
    a7c4:	2b03      	cmp	r3, #3
    a7c6:	d112      	bne.n	a7ee <_signal_poll_event+0xaa>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    a7c8:	603d      	str	r5, [r7, #0]
	event->state |= state;
    a7ca:	7b73      	ldrb	r3, [r6, #13]
    a7cc:	9901      	ldr	r1, [sp, #4]
    a7ce:	091a      	lsrs	r2, r3, #4
    a7d0:	4311      	orrs	r1, r2
    a7d2:	010a      	lsls	r2, r1, #4
    a7d4:	210f      	movs	r1, #15
	event->poller = NULL;
    a7d6:	2000      	movs	r0, #0
	event->state |= state;
    a7d8:	400b      	ands	r3, r1
    a7da:	4313      	orrs	r3, r2
	event->poller = NULL;
    a7dc:	60b0      	str	r0, [r6, #8]
	event->state |= state;
    a7de:	7373      	strb	r3, [r6, #13]

ready_event:
	set_event_ready(event, state);
	return 0;
}
    a7e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	_set_thread_return_value(thread,
    a7e2:	2304      	movs	r3, #4
    a7e4:	425b      	negs	r3, r3
    a7e6:	e7de      	b.n	a7a6 <_signal_poll_event+0x62>
		return -EAGAIN;
    a7e8:	200b      	movs	r0, #11
    a7ea:	4240      	negs	r0, r0
    a7ec:	e7f8      	b.n	a7e0 <_signal_poll_event+0x9c>
	return _is_preempt(_current) && __must_switch_threads();
    a7ee:	4b05      	ldr	r3, [pc, #20]	; (a804 <_signal_poll_event+0xc0>)
    a7f0:	689b      	ldr	r3, [r3, #8]
    a7f2:	895b      	ldrh	r3, [r3, #10]
    a7f4:	2b7f      	cmp	r3, #127	; 0x7f
    a7f6:	d8e7      	bhi.n	a7c8 <_signal_poll_event+0x84>
    a7f8:	f7ff fa8e 	bl	9d18 <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    a7fc:	0005      	movs	r5, r0
    a7fe:	1e68      	subs	r0, r5, #1
    a800:	4185      	sbcs	r5, r0
    a802:	e7e1      	b.n	a7c8 <_signal_poll_event+0x84>
    a804:	20000ba4 	.word	0x20000ba4

0000a808 <add_event>:
	return list->head == list;
    a808:	6803      	ldr	r3, [r0, #0]
{
    a80a:	b530      	push	{r4, r5, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    a80c:	4298      	cmp	r0, r3
    a80e:	d00b      	beq.n	a828 <add_event+0x20>
    a810:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    a812:	2c00      	cmp	r4, #0
    a814:	d008      	beq.n	a828 <add_event+0x20>
    a816:	68a5      	ldr	r5, [r4, #8]
    a818:	6812      	ldr	r2, [r2, #0]
    a81a:	682d      	ldr	r5, [r5, #0]
    a81c:	7a92      	ldrb	r2, [r2, #10]
    a81e:	7aad      	ldrb	r5, [r5, #10]
    a820:	b252      	sxtb	r2, r2
    a822:	b26d      	sxtb	r5, r5
    a824:	4295      	cmp	r5, r2
    a826:	da18      	bge.n	a85a <add_event+0x52>
	node->next = list;
    a828:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    a82a:	6843      	ldr	r3, [r0, #4]
    a82c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    a82e:	6843      	ldr	r3, [r0, #4]
    a830:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a832:	6041      	str	r1, [r0, #4]
    a834:	e00b      	b.n	a84e <add_event+0x46>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    a836:	689d      	ldr	r5, [r3, #8]
    a838:	682d      	ldr	r5, [r5, #0]
    a83a:	7aad      	ldrb	r5, [r5, #10]
    a83c:	b26d      	sxtb	r5, r5
    a83e:	4295      	cmp	r5, r2
    a840:	dd06      	ble.n	a850 <add_event+0x48>
		node->prev = insert_point->prev;
    a842:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    a844:	600b      	str	r3, [r1, #0]
		node->prev = insert_point->prev;
    a846:	604a      	str	r2, [r1, #4]
		insert_point->prev->next = node;
    a848:	685a      	ldr	r2, [r3, #4]
    a84a:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a84c:	6059      	str	r1, [r3, #4]
}
    a84e:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    a850:	42a3      	cmp	r3, r4
    a852:	d004      	beq.n	a85e <add_event+0x56>
    a854:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    a856:	2b00      	cmp	r3, #0
    a858:	d001      	beq.n	a85e <add_event+0x56>
    a85a:	2b00      	cmp	r3, #0
    a85c:	d1eb      	bne.n	a836 <add_event+0x2e>
	node->next = list;
    a85e:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    a860:	604c      	str	r4, [r1, #4]
    a862:	e7e4      	b.n	a82e <add_event+0x26>

0000a864 <k_poll_event_init>:
{
    a864:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
    a866:	2400      	movs	r4, #0
    a868:	6084      	str	r4, [r0, #8]
	event->type = type;
    a86a:	340f      	adds	r4, #15
    a86c:	4021      	ands	r1, r4
    a86e:	000d      	movs	r5, r1
    a870:	7b41      	ldrb	r1, [r0, #13]
	event->obj = obj;
    a872:	6103      	str	r3, [r0, #16]
	event->type = type;
    a874:	43a1      	bics	r1, r4
	event->state = K_POLL_STATE_NOT_READY;
    a876:	4329      	orrs	r1, r5
    a878:	4021      	ands	r1, r4
    a87a:	7341      	strb	r1, [r0, #13]
	event->mode = mode;
    a87c:	2101      	movs	r1, #1
    a87e:	400a      	ands	r2, r1
    a880:	0014      	movs	r4, r2
    a882:	7b82      	ldrb	r2, [r0, #14]
    a884:	438a      	bics	r2, r1
    a886:	4322      	orrs	r2, r4
    a888:	7382      	strb	r2, [r0, #14]
	event->unused = 0;
    a88a:	89c2      	ldrh	r2, [r0, #14]
    a88c:	400a      	ands	r2, r1
    a88e:	81c2      	strh	r2, [r0, #14]
}
    a890:	bd30      	pop	{r4, r5, pc}
	...

0000a894 <k_poll>:
{
    a894:	b5f0      	push	{r4, r5, r6, r7, lr}
    a896:	b089      	sub	sp, #36	; 0x24
    a898:	0007      	movs	r7, r0
    a89a:	9102      	str	r1, [sp, #8]
    a89c:	9201      	str	r2, [sp, #4]
    a89e:	f3ef 8010 	mrs	r0, PRIMASK
    a8a2:	b672      	cpsid	i
	thread->base.thread_state |= states;
    a8a4:	2320      	movs	r3, #32
	set_polling_state(_current);
    a8a6:	4a45      	ldr	r2, [pc, #276]	; (a9bc <k_poll+0x128>)
    a8a8:	6891      	ldr	r1, [r2, #8]
    a8aa:	7a4c      	ldrb	r4, [r1, #9]
    a8ac:	4323      	orrs	r3, r4
    a8ae:	724b      	strb	r3, [r1, #9]
	if (key) {
    a8b0:	2800      	cmp	r0, #0
    a8b2:	d100      	bne.n	a8b6 <k_poll+0x22>
	__asm__ volatile("cpsie i" : : : "memory");
    a8b4:	b662      	cpsie	i
	int last_registered = -1, rc;
    a8b6:	2501      	movs	r5, #1
    a8b8:	003c      	movs	r4, r7
	for (int ii = 0; ii < num_events; ii++) {
    a8ba:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current };
    a8bc:	6893      	ldr	r3, [r2, #8]
	int last_registered = -1, rc;
    a8be:	426d      	negs	r5, r5
	struct _poller poller = { .thread = _current };
    a8c0:	9305      	str	r3, [sp, #20]
	for (int ii = 0; ii < num_events; ii++) {
    a8c2:	9b02      	ldr	r3, [sp, #8]
    a8c4:	429e      	cmp	r6, r3
    a8c6:	db14      	blt.n	a8f2 <k_poll+0x5e>
	__asm__ volatile("mrs %0, PRIMASK;"
    a8c8:	f3ef 8610 	mrs	r6, PRIMASK
    a8cc:	b672      	cpsid	i
	return _is_thread_polling(_current);
    a8ce:	4b3b      	ldr	r3, [pc, #236]	; (a9bc <k_poll+0x128>)
	if (!is_polling()) {
    a8d0:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    a8d2:	689a      	ldr	r2, [r3, #8]
    a8d4:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    a8d6:	001c      	movs	r4, r3
    a8d8:	400c      	ands	r4, r1
    a8da:	d144      	bne.n	a966 <k_poll+0xd2>
	clear_event_registrations(events, last_registered, key);
    a8dc:	0032      	movs	r2, r6
    a8de:	0029      	movs	r1, r5
    a8e0:	0038      	movs	r0, r7
    a8e2:	f7ff ff0f 	bl	a704 <clear_event_registrations>
	if (key) {
    a8e6:	2e00      	cmp	r6, #0
    a8e8:	d100      	bne.n	a8ec <k_poll+0x58>
	__asm__ volatile("cpsie i" : : : "memory");
    a8ea:	b662      	cpsie	i
}
    a8ec:	0020      	movs	r0, r4
    a8ee:	b009      	add	sp, #36	; 0x24
    a8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    a8f2:	f3ef 8310 	mrs	r3, PRIMASK
    a8f6:	b672      	cpsid	i
	switch (event->type) {
    a8f8:	7b62      	ldrb	r2, [r4, #13]
    a8fa:	9303      	str	r3, [sp, #12]
    a8fc:	0713      	lsls	r3, r2, #28
    a8fe:	0f1b      	lsrs	r3, r3, #28
    a900:	2b02      	cmp	r3, #2
    a902:	d003      	beq.n	a90c <k_poll+0x78>
    a904:	2b04      	cmp	r3, #4
    a906:	d004      	beq.n	a912 <k_poll+0x7e>
    a908:	2b01      	cmp	r3, #1
    a90a:	d106      	bne.n	a91a <k_poll+0x86>
		if (event->signal->signaled) {
    a90c:	6921      	ldr	r1, [r4, #16]
    a90e:	6889      	ldr	r1, [r1, #8]
    a910:	e001      	b.n	a916 <k_poll+0x82>
		if (!k_queue_is_empty(event->queue)) {
    a912:	6921      	ldr	r1, [r4, #16]
    a914:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
    a916:	2900      	cmp	r1, #0
    a918:	d140      	bne.n	a99c <k_poll+0x108>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    a91a:	9a01      	ldr	r2, [sp, #4]
    a91c:	2a00      	cmp	r2, #0
    a91e:	d018      	beq.n	a952 <k_poll+0xbe>
    a920:	2120      	movs	r1, #32
	return _is_thread_polling(_current);
    a922:	4a26      	ldr	r2, [pc, #152]	; (a9bc <k_poll+0x128>)
		} else if (timeout != K_NO_WAIT && is_polling()) {
    a924:	6892      	ldr	r2, [r2, #8]
    a926:	7a52      	ldrb	r2, [r2, #9]
    a928:	420a      	tst	r2, r1
    a92a:	d012      	beq.n	a952 <k_poll+0xbe>
	switch (event->type) {
    a92c:	2b02      	cmp	r3, #2
    a92e:	d007      	beq.n	a940 <k_poll+0xac>
    a930:	2b04      	cmp	r3, #4
    a932:	d015      	beq.n	a960 <k_poll+0xcc>
    a934:	2b01      	cmp	r3, #1
    a936:	d109      	bne.n	a94c <k_poll+0xb8>
		add_event(&event->signal->poll_events, event, poller);
    a938:	aa05      	add	r2, sp, #20
    a93a:	0021      	movs	r1, r4
    a93c:	6920      	ldr	r0, [r4, #16]
    a93e:	e003      	b.n	a948 <k_poll+0xb4>
		add_event(&event->sem->poll_events, event, poller);
    a940:	6920      	ldr	r0, [r4, #16]
    a942:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
    a944:	0021      	movs	r1, r4
    a946:	aa05      	add	r2, sp, #20
		add_event(&event->signal->poll_events, event, poller);
    a948:	f7ff ff5e 	bl	a808 <add_event>
	event->poller = poller;
    a94c:	ab05      	add	r3, sp, #20
    a94e:	60a3      	str	r3, [r4, #8]
				++last_registered;
    a950:	3501      	adds	r5, #1
	if (key) {
    a952:	9b03      	ldr	r3, [sp, #12]
    a954:	2b00      	cmp	r3, #0
    a956:	d100      	bne.n	a95a <k_poll+0xc6>
	__asm__ volatile("cpsie i" : : : "memory");
    a958:	b662      	cpsie	i
	for (int ii = 0; ii < num_events; ii++) {
    a95a:	3601      	adds	r6, #1
    a95c:	3414      	adds	r4, #20
    a95e:	e7b0      	b.n	a8c2 <k_poll+0x2e>
		add_event(&event->queue->poll_events, event, poller);
    a960:	6920      	ldr	r0, [r4, #16]
    a962:	3008      	adds	r0, #8
    a964:	e7ee      	b.n	a944 <k_poll+0xb0>
	thread->base.thread_state &= ~states;
    a966:	438b      	bics	r3, r1
    a968:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    a96a:	9b01      	ldr	r3, [sp, #4]
    a96c:	2b00      	cmp	r3, #0
    a96e:	d105      	bne.n	a97c <k_poll+0xe8>
	if (key) {
    a970:	2e00      	cmp	r6, #0
    a972:	d100      	bne.n	a976 <k_poll+0xe2>
	__asm__ volatile("cpsie i" : : : "memory");
    a974:	b662      	cpsie	i
		return -EAGAIN;
    a976:	240b      	movs	r4, #11
    a978:	4264      	negs	r4, r4
    a97a:	e7b7      	b.n	a8ec <k_poll+0x58>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    a97c:	a806      	add	r0, sp, #24
	_pend_current_thread(&wait_q, timeout);
    a97e:	9901      	ldr	r1, [sp, #4]
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    a980:	9006      	str	r0, [sp, #24]
    a982:	6040      	str	r0, [r0, #4]
	_pend_current_thread(&wait_q, timeout);
    a984:	f7ff f9b8 	bl	9cf8 <_pend_current_thread>
	_update_time_slice_before_swap();
    a988:	f7ff fa70 	bl	9e6c <_update_time_slice_before_swap>
	return __swap(key);
    a98c:	0030      	movs	r0, r6
    a98e:	f7f5 ffc1 	bl	914 <__swap>
    a992:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    a994:	f3ef 8610 	mrs	r6, PRIMASK
    a998:	b672      	cpsid	i
    a99a:	e79f      	b.n	a8dc <k_poll+0x48>
	event->poller = NULL;
    a99c:	2100      	movs	r1, #0
    a99e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
    a9a0:	0911      	lsrs	r1, r2, #4
    a9a2:	430b      	orrs	r3, r1
    a9a4:	210f      	movs	r1, #15
    a9a6:	011b      	lsls	r3, r3, #4
    a9a8:	400a      	ands	r2, r1
    a9aa:	4313      	orrs	r3, r2
    a9ac:	7363      	strb	r3, [r4, #13]
			clear_polling_state(_current);
    a9ae:	4b03      	ldr	r3, [pc, #12]	; (a9bc <k_poll+0x128>)
    a9b0:	3111      	adds	r1, #17
    a9b2:	689a      	ldr	r2, [r3, #8]
    a9b4:	7a53      	ldrb	r3, [r2, #9]
    a9b6:	438b      	bics	r3, r1
    a9b8:	7253      	strb	r3, [r2, #9]
    a9ba:	e7ca      	b.n	a952 <k_poll+0xbe>
    a9bc:	20000ba4 	.word	0x20000ba4

0000a9c0 <_handle_obj_poll_events>:

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    a9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return list->head == list;
    a9c2:	6804      	ldr	r4, [r0, #0]
    a9c4:	000d      	movs	r5, r1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    a9c6:	42a0      	cmp	r0, r4
    a9c8:	d101      	bne.n	a9ce <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    a9ca:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    a9cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    a9ce:	0020      	movs	r0, r4
    a9d0:	f7ff fe92 	bl	a6f8 <sys_dlist_remove>
	if (!poll_event) {
    a9d4:	2c00      	cmp	r4, #0
    a9d6:	d0f8      	beq.n	a9ca <_handle_obj_poll_events+0xa>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
    a9d8:	aa01      	add	r2, sp, #4
    a9da:	0029      	movs	r1, r5
    a9dc:	0020      	movs	r0, r4
    a9de:	f7ff feb1 	bl	a744 <_signal_poll_event>
	return must_reschedule;
    a9e2:	9801      	ldr	r0, [sp, #4]
    a9e4:	e7f2      	b.n	a9cc <_handle_obj_poll_events+0xc>

0000a9e6 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    a9e6:	4770      	bx	lr
